
C:\Users\Henry\Desktop\Skripsie\software\acrobat_v4\Debug\acrobat_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001fc  20000000  0800552c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d8  20000200  08005728  00020200  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200004d8  08005728  000204d8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001bdf7  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000035f4  00000000  00000000  0003c01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007f3c  00000000  00000000  0003f60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ad8  00000000  00000000  00047550  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f00  00000000  00000000  00048028  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007a2f  00000000  00000000  00048f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0004b576  00000000  00000000  00050957  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009becd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002780  00000000  00000000  0009bf4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000bcad  00000000  00000000  0009e6cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005260 	.word	0x08005260

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	08005260 	.word	0x08005260

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	1c10      	adds	r0, r2, #0
 8000248:	4662      	mov	r2, ip
 800024a:	468c      	mov	ip, r1
 800024c:	1c19      	adds	r1, r3, #0
 800024e:	4663      	mov	r3, ip
 8000250:	e000      	b.n	8000254 <__aeabi_cdcmpeq>
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_cdcmpeq>:
 8000254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000256:	f000 fe33 	bl	8000ec0 <__ledf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	d401      	bmi.n	8000262 <__aeabi_cdcmpeq+0xe>
 800025e:	2100      	movs	r1, #0
 8000260:	42c8      	cmn	r0, r1
 8000262:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000264 <__aeabi_dcmpeq>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fd8d 	bl	8000d84 <__eqdf2>
 800026a:	4240      	negs	r0, r0
 800026c:	3001      	adds	r0, #1
 800026e:	bd10      	pop	{r4, pc}

08000270 <__aeabi_dcmplt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 fe25 	bl	8000ec0 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	db01      	blt.n	800027e <__aeabi_dcmplt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmple>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 fe1b 	bl	8000ec0 <__ledf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dd01      	ble.n	8000292 <__aeabi_dcmple+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpgt>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 fdad 	bl	8000df8 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dc01      	bgt.n	80002a6 <__aeabi_dcmpgt+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_dcmpge>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f000 fda3 	bl	8000df8 <__gedf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	da01      	bge.n	80002ba <__aeabi_dcmpge+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			; (mov r8, r8)

080002c0 <__aeabi_cfrcmple>:
 80002c0:	4684      	mov	ip, r0
 80002c2:	1c08      	adds	r0, r1, #0
 80002c4:	4661      	mov	r1, ip
 80002c6:	e7ff      	b.n	80002c8 <__aeabi_cfcmpeq>

080002c8 <__aeabi_cfcmpeq>:
 80002c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ca:	f000 f899 	bl	8000400 <__lesf2>
 80002ce:	2800      	cmp	r0, #0
 80002d0:	d401      	bmi.n	80002d6 <__aeabi_cfcmpeq+0xe>
 80002d2:	2100      	movs	r1, #0
 80002d4:	42c8      	cmn	r0, r1
 80002d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002d8 <__aeabi_fcmpeq>:
 80002d8:	b510      	push	{r4, lr}
 80002da:	f000 f82b 	bl	8000334 <__eqsf2>
 80002de:	4240      	negs	r0, r0
 80002e0:	3001      	adds	r0, #1
 80002e2:	bd10      	pop	{r4, pc}

080002e4 <__aeabi_fcmplt>:
 80002e4:	b510      	push	{r4, lr}
 80002e6:	f000 f88b 	bl	8000400 <__lesf2>
 80002ea:	2800      	cmp	r0, #0
 80002ec:	db01      	blt.n	80002f2 <__aeabi_fcmplt+0xe>
 80002ee:	2000      	movs	r0, #0
 80002f0:	bd10      	pop	{r4, pc}
 80002f2:	2001      	movs	r0, #1
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_fcmple>:
 80002f8:	b510      	push	{r4, lr}
 80002fa:	f000 f881 	bl	8000400 <__lesf2>
 80002fe:	2800      	cmp	r0, #0
 8000300:	dd01      	ble.n	8000306 <__aeabi_fcmple+0xe>
 8000302:	2000      	movs	r0, #0
 8000304:	bd10      	pop	{r4, pc}
 8000306:	2001      	movs	r0, #1
 8000308:	bd10      	pop	{r4, pc}
 800030a:	46c0      	nop			; (mov r8, r8)

0800030c <__aeabi_fcmpgt>:
 800030c:	b510      	push	{r4, lr}
 800030e:	f000 f837 	bl	8000380 <__gesf2>
 8000312:	2800      	cmp	r0, #0
 8000314:	dc01      	bgt.n	800031a <__aeabi_fcmpgt+0xe>
 8000316:	2000      	movs	r0, #0
 8000318:	bd10      	pop	{r4, pc}
 800031a:	2001      	movs	r0, #1
 800031c:	bd10      	pop	{r4, pc}
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <__aeabi_fcmpge>:
 8000320:	b510      	push	{r4, lr}
 8000322:	f000 f82d 	bl	8000380 <__gesf2>
 8000326:	2800      	cmp	r0, #0
 8000328:	da01      	bge.n	800032e <__aeabi_fcmpge+0xe>
 800032a:	2000      	movs	r0, #0
 800032c:	bd10      	pop	{r4, pc}
 800032e:	2001      	movs	r0, #1
 8000330:	bd10      	pop	{r4, pc}
 8000332:	46c0      	nop			; (mov r8, r8)

08000334 <__eqsf2>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	0042      	lsls	r2, r0, #1
 8000338:	0245      	lsls	r5, r0, #9
 800033a:	024e      	lsls	r6, r1, #9
 800033c:	004c      	lsls	r4, r1, #1
 800033e:	0fc3      	lsrs	r3, r0, #31
 8000340:	0a6d      	lsrs	r5, r5, #9
 8000342:	0e12      	lsrs	r2, r2, #24
 8000344:	0a76      	lsrs	r6, r6, #9
 8000346:	0e24      	lsrs	r4, r4, #24
 8000348:	0fc9      	lsrs	r1, r1, #31
 800034a:	2001      	movs	r0, #1
 800034c:	2aff      	cmp	r2, #255	; 0xff
 800034e:	d006      	beq.n	800035e <__eqsf2+0x2a>
 8000350:	2cff      	cmp	r4, #255	; 0xff
 8000352:	d003      	beq.n	800035c <__eqsf2+0x28>
 8000354:	42a2      	cmp	r2, r4
 8000356:	d101      	bne.n	800035c <__eqsf2+0x28>
 8000358:	42b5      	cmp	r5, r6
 800035a:	d006      	beq.n	800036a <__eqsf2+0x36>
 800035c:	bd70      	pop	{r4, r5, r6, pc}
 800035e:	2d00      	cmp	r5, #0
 8000360:	d1fc      	bne.n	800035c <__eqsf2+0x28>
 8000362:	2cff      	cmp	r4, #255	; 0xff
 8000364:	d1fa      	bne.n	800035c <__eqsf2+0x28>
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__eqsf2+0x28>
 800036a:	428b      	cmp	r3, r1
 800036c:	d006      	beq.n	800037c <__eqsf2+0x48>
 800036e:	2001      	movs	r0, #1
 8000370:	2a00      	cmp	r2, #0
 8000372:	d1f3      	bne.n	800035c <__eqsf2+0x28>
 8000374:	0028      	movs	r0, r5
 8000376:	1e45      	subs	r5, r0, #1
 8000378:	41a8      	sbcs	r0, r5
 800037a:	e7ef      	b.n	800035c <__eqsf2+0x28>
 800037c:	2000      	movs	r0, #0
 800037e:	e7ed      	b.n	800035c <__eqsf2+0x28>

08000380 <__gesf2>:
 8000380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000382:	0042      	lsls	r2, r0, #1
 8000384:	0245      	lsls	r5, r0, #9
 8000386:	024c      	lsls	r4, r1, #9
 8000388:	0fc3      	lsrs	r3, r0, #31
 800038a:	0048      	lsls	r0, r1, #1
 800038c:	0a6d      	lsrs	r5, r5, #9
 800038e:	0e12      	lsrs	r2, r2, #24
 8000390:	0a64      	lsrs	r4, r4, #9
 8000392:	0e00      	lsrs	r0, r0, #24
 8000394:	0fc9      	lsrs	r1, r1, #31
 8000396:	2aff      	cmp	r2, #255	; 0xff
 8000398:	d01e      	beq.n	80003d8 <__gesf2+0x58>
 800039a:	28ff      	cmp	r0, #255	; 0xff
 800039c:	d021      	beq.n	80003e2 <__gesf2+0x62>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d10a      	bne.n	80003b8 <__gesf2+0x38>
 80003a2:	426e      	negs	r6, r5
 80003a4:	416e      	adcs	r6, r5
 80003a6:	b2f6      	uxtb	r6, r6
 80003a8:	2800      	cmp	r0, #0
 80003aa:	d10f      	bne.n	80003cc <__gesf2+0x4c>
 80003ac:	2c00      	cmp	r4, #0
 80003ae:	d10d      	bne.n	80003cc <__gesf2+0x4c>
 80003b0:	2000      	movs	r0, #0
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d009      	beq.n	80003ca <__gesf2+0x4a>
 80003b6:	e005      	b.n	80003c4 <__gesf2+0x44>
 80003b8:	2800      	cmp	r0, #0
 80003ba:	d101      	bne.n	80003c0 <__gesf2+0x40>
 80003bc:	2c00      	cmp	r4, #0
 80003be:	d001      	beq.n	80003c4 <__gesf2+0x44>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d011      	beq.n	80003e8 <__gesf2+0x68>
 80003c4:	2101      	movs	r1, #1
 80003c6:	4258      	negs	r0, r3
 80003c8:	4308      	orrs	r0, r1
 80003ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003cc:	2e00      	cmp	r6, #0
 80003ce:	d0f7      	beq.n	80003c0 <__gesf2+0x40>
 80003d0:	2001      	movs	r0, #1
 80003d2:	3901      	subs	r1, #1
 80003d4:	4308      	orrs	r0, r1
 80003d6:	e7f8      	b.n	80003ca <__gesf2+0x4a>
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0de      	beq.n	800039a <__gesf2+0x1a>
 80003dc:	2002      	movs	r0, #2
 80003de:	4240      	negs	r0, r0
 80003e0:	e7f3      	b.n	80003ca <__gesf2+0x4a>
 80003e2:	2c00      	cmp	r4, #0
 80003e4:	d0db      	beq.n	800039e <__gesf2+0x1e>
 80003e6:	e7f9      	b.n	80003dc <__gesf2+0x5c>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	dceb      	bgt.n	80003c4 <__gesf2+0x44>
 80003ec:	db04      	blt.n	80003f8 <__gesf2+0x78>
 80003ee:	42a5      	cmp	r5, r4
 80003f0:	d8e8      	bhi.n	80003c4 <__gesf2+0x44>
 80003f2:	2000      	movs	r0, #0
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	d2e8      	bcs.n	80003ca <__gesf2+0x4a>
 80003f8:	2101      	movs	r1, #1
 80003fa:	1e58      	subs	r0, r3, #1
 80003fc:	4308      	orrs	r0, r1
 80003fe:	e7e4      	b.n	80003ca <__gesf2+0x4a>

08000400 <__lesf2>:
 8000400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000402:	0042      	lsls	r2, r0, #1
 8000404:	024d      	lsls	r5, r1, #9
 8000406:	004c      	lsls	r4, r1, #1
 8000408:	0246      	lsls	r6, r0, #9
 800040a:	0a76      	lsrs	r6, r6, #9
 800040c:	0e12      	lsrs	r2, r2, #24
 800040e:	0fc3      	lsrs	r3, r0, #31
 8000410:	0a6d      	lsrs	r5, r5, #9
 8000412:	0e24      	lsrs	r4, r4, #24
 8000414:	0fc9      	lsrs	r1, r1, #31
 8000416:	2aff      	cmp	r2, #255	; 0xff
 8000418:	d016      	beq.n	8000448 <__lesf2+0x48>
 800041a:	2cff      	cmp	r4, #255	; 0xff
 800041c:	d018      	beq.n	8000450 <__lesf2+0x50>
 800041e:	2a00      	cmp	r2, #0
 8000420:	d10a      	bne.n	8000438 <__lesf2+0x38>
 8000422:	4270      	negs	r0, r6
 8000424:	4170      	adcs	r0, r6
 8000426:	b2c0      	uxtb	r0, r0
 8000428:	2c00      	cmp	r4, #0
 800042a:	d015      	beq.n	8000458 <__lesf2+0x58>
 800042c:	2800      	cmp	r0, #0
 800042e:	d005      	beq.n	800043c <__lesf2+0x3c>
 8000430:	2001      	movs	r0, #1
 8000432:	3901      	subs	r1, #1
 8000434:	4308      	orrs	r0, r1
 8000436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000438:	2c00      	cmp	r4, #0
 800043a:	d013      	beq.n	8000464 <__lesf2+0x64>
 800043c:	4299      	cmp	r1, r3
 800043e:	d014      	beq.n	800046a <__lesf2+0x6a>
 8000440:	2001      	movs	r0, #1
 8000442:	425b      	negs	r3, r3
 8000444:	4318      	orrs	r0, r3
 8000446:	e7f6      	b.n	8000436 <__lesf2+0x36>
 8000448:	2002      	movs	r0, #2
 800044a:	2e00      	cmp	r6, #0
 800044c:	d1f3      	bne.n	8000436 <__lesf2+0x36>
 800044e:	e7e4      	b.n	800041a <__lesf2+0x1a>
 8000450:	2002      	movs	r0, #2
 8000452:	2d00      	cmp	r5, #0
 8000454:	d1ef      	bne.n	8000436 <__lesf2+0x36>
 8000456:	e7e2      	b.n	800041e <__lesf2+0x1e>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d1e7      	bne.n	800042c <__lesf2+0x2c>
 800045c:	2000      	movs	r0, #0
 800045e:	2e00      	cmp	r6, #0
 8000460:	d0e9      	beq.n	8000436 <__lesf2+0x36>
 8000462:	e7ed      	b.n	8000440 <__lesf2+0x40>
 8000464:	2d00      	cmp	r5, #0
 8000466:	d1e9      	bne.n	800043c <__lesf2+0x3c>
 8000468:	e7ea      	b.n	8000440 <__lesf2+0x40>
 800046a:	42a2      	cmp	r2, r4
 800046c:	dc06      	bgt.n	800047c <__lesf2+0x7c>
 800046e:	dbdf      	blt.n	8000430 <__lesf2+0x30>
 8000470:	42ae      	cmp	r6, r5
 8000472:	d803      	bhi.n	800047c <__lesf2+0x7c>
 8000474:	2000      	movs	r0, #0
 8000476:	42ae      	cmp	r6, r5
 8000478:	d3da      	bcc.n	8000430 <__lesf2+0x30>
 800047a:	e7dc      	b.n	8000436 <__lesf2+0x36>
 800047c:	2001      	movs	r0, #1
 800047e:	4249      	negs	r1, r1
 8000480:	4308      	orrs	r0, r1
 8000482:	e7d8      	b.n	8000436 <__lesf2+0x36>

08000484 <__aeabi_fmul>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0247      	lsls	r7, r0, #9
 8000492:	0046      	lsls	r6, r0, #1
 8000494:	4688      	mov	r8, r1
 8000496:	0a7f      	lsrs	r7, r7, #9
 8000498:	0e36      	lsrs	r6, r6, #24
 800049a:	0fc4      	lsrs	r4, r0, #31
 800049c:	2e00      	cmp	r6, #0
 800049e:	d047      	beq.n	8000530 <__aeabi_fmul+0xac>
 80004a0:	2eff      	cmp	r6, #255	; 0xff
 80004a2:	d024      	beq.n	80004ee <__aeabi_fmul+0x6a>
 80004a4:	00fb      	lsls	r3, r7, #3
 80004a6:	2780      	movs	r7, #128	; 0x80
 80004a8:	04ff      	lsls	r7, r7, #19
 80004aa:	431f      	orrs	r7, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	4699      	mov	r9, r3
 80004b0:	469a      	mov	sl, r3
 80004b2:	3e7f      	subs	r6, #127	; 0x7f
 80004b4:	4643      	mov	r3, r8
 80004b6:	025d      	lsls	r5, r3, #9
 80004b8:	0058      	lsls	r0, r3, #1
 80004ba:	0fdb      	lsrs	r3, r3, #31
 80004bc:	0a6d      	lsrs	r5, r5, #9
 80004be:	0e00      	lsrs	r0, r0, #24
 80004c0:	4698      	mov	r8, r3
 80004c2:	d043      	beq.n	800054c <__aeabi_fmul+0xc8>
 80004c4:	28ff      	cmp	r0, #255	; 0xff
 80004c6:	d03b      	beq.n	8000540 <__aeabi_fmul+0xbc>
 80004c8:	00eb      	lsls	r3, r5, #3
 80004ca:	2580      	movs	r5, #128	; 0x80
 80004cc:	2200      	movs	r2, #0
 80004ce:	04ed      	lsls	r5, r5, #19
 80004d0:	431d      	orrs	r5, r3
 80004d2:	387f      	subs	r0, #127	; 0x7f
 80004d4:	1836      	adds	r6, r6, r0
 80004d6:	1c73      	adds	r3, r6, #1
 80004d8:	4641      	mov	r1, r8
 80004da:	469b      	mov	fp, r3
 80004dc:	464b      	mov	r3, r9
 80004de:	4061      	eors	r1, r4
 80004e0:	4313      	orrs	r3, r2
 80004e2:	2b0f      	cmp	r3, #15
 80004e4:	d864      	bhi.n	80005b0 <__aeabi_fmul+0x12c>
 80004e6:	4875      	ldr	r0, [pc, #468]	; (80006bc <__aeabi_fmul+0x238>)
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	58c3      	ldr	r3, [r0, r3]
 80004ec:	469f      	mov	pc, r3
 80004ee:	2f00      	cmp	r7, #0
 80004f0:	d142      	bne.n	8000578 <__aeabi_fmul+0xf4>
 80004f2:	2308      	movs	r3, #8
 80004f4:	4699      	mov	r9, r3
 80004f6:	3b06      	subs	r3, #6
 80004f8:	26ff      	movs	r6, #255	; 0xff
 80004fa:	469a      	mov	sl, r3
 80004fc:	e7da      	b.n	80004b4 <__aeabi_fmul+0x30>
 80004fe:	4641      	mov	r1, r8
 8000500:	2a02      	cmp	r2, #2
 8000502:	d028      	beq.n	8000556 <__aeabi_fmul+0xd2>
 8000504:	2a03      	cmp	r2, #3
 8000506:	d100      	bne.n	800050a <__aeabi_fmul+0x86>
 8000508:	e0ce      	b.n	80006a8 <__aeabi_fmul+0x224>
 800050a:	2a01      	cmp	r2, #1
 800050c:	d000      	beq.n	8000510 <__aeabi_fmul+0x8c>
 800050e:	e0ac      	b.n	800066a <__aeabi_fmul+0x1e6>
 8000510:	4011      	ands	r1, r2
 8000512:	2000      	movs	r0, #0
 8000514:	2200      	movs	r2, #0
 8000516:	b2cc      	uxtb	r4, r1
 8000518:	0240      	lsls	r0, r0, #9
 800051a:	05d2      	lsls	r2, r2, #23
 800051c:	0a40      	lsrs	r0, r0, #9
 800051e:	07e4      	lsls	r4, r4, #31
 8000520:	4310      	orrs	r0, r2
 8000522:	4320      	orrs	r0, r4
 8000524:	bc3c      	pop	{r2, r3, r4, r5}
 8000526:	4690      	mov	r8, r2
 8000528:	4699      	mov	r9, r3
 800052a:	46a2      	mov	sl, r4
 800052c:	46ab      	mov	fp, r5
 800052e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000530:	2f00      	cmp	r7, #0
 8000532:	d115      	bne.n	8000560 <__aeabi_fmul+0xdc>
 8000534:	2304      	movs	r3, #4
 8000536:	4699      	mov	r9, r3
 8000538:	3b03      	subs	r3, #3
 800053a:	2600      	movs	r6, #0
 800053c:	469a      	mov	sl, r3
 800053e:	e7b9      	b.n	80004b4 <__aeabi_fmul+0x30>
 8000540:	20ff      	movs	r0, #255	; 0xff
 8000542:	2202      	movs	r2, #2
 8000544:	2d00      	cmp	r5, #0
 8000546:	d0c5      	beq.n	80004d4 <__aeabi_fmul+0x50>
 8000548:	2203      	movs	r2, #3
 800054a:	e7c3      	b.n	80004d4 <__aeabi_fmul+0x50>
 800054c:	2d00      	cmp	r5, #0
 800054e:	d119      	bne.n	8000584 <__aeabi_fmul+0x100>
 8000550:	2000      	movs	r0, #0
 8000552:	2201      	movs	r2, #1
 8000554:	e7be      	b.n	80004d4 <__aeabi_fmul+0x50>
 8000556:	2401      	movs	r4, #1
 8000558:	22ff      	movs	r2, #255	; 0xff
 800055a:	400c      	ands	r4, r1
 800055c:	2000      	movs	r0, #0
 800055e:	e7db      	b.n	8000518 <__aeabi_fmul+0x94>
 8000560:	0038      	movs	r0, r7
 8000562:	f001 fb6d 	bl	8001c40 <__clzsi2>
 8000566:	2676      	movs	r6, #118	; 0x76
 8000568:	1f43      	subs	r3, r0, #5
 800056a:	409f      	lsls	r7, r3
 800056c:	2300      	movs	r3, #0
 800056e:	4276      	negs	r6, r6
 8000570:	1a36      	subs	r6, r6, r0
 8000572:	4699      	mov	r9, r3
 8000574:	469a      	mov	sl, r3
 8000576:	e79d      	b.n	80004b4 <__aeabi_fmul+0x30>
 8000578:	230c      	movs	r3, #12
 800057a:	4699      	mov	r9, r3
 800057c:	3b09      	subs	r3, #9
 800057e:	26ff      	movs	r6, #255	; 0xff
 8000580:	469a      	mov	sl, r3
 8000582:	e797      	b.n	80004b4 <__aeabi_fmul+0x30>
 8000584:	0028      	movs	r0, r5
 8000586:	f001 fb5b 	bl	8001c40 <__clzsi2>
 800058a:	1f43      	subs	r3, r0, #5
 800058c:	409d      	lsls	r5, r3
 800058e:	2376      	movs	r3, #118	; 0x76
 8000590:	425b      	negs	r3, r3
 8000592:	1a18      	subs	r0, r3, r0
 8000594:	2200      	movs	r2, #0
 8000596:	e79d      	b.n	80004d4 <__aeabi_fmul+0x50>
 8000598:	2080      	movs	r0, #128	; 0x80
 800059a:	2400      	movs	r4, #0
 800059c:	03c0      	lsls	r0, r0, #15
 800059e:	22ff      	movs	r2, #255	; 0xff
 80005a0:	e7ba      	b.n	8000518 <__aeabi_fmul+0x94>
 80005a2:	003d      	movs	r5, r7
 80005a4:	4652      	mov	r2, sl
 80005a6:	e7ab      	b.n	8000500 <__aeabi_fmul+0x7c>
 80005a8:	003d      	movs	r5, r7
 80005aa:	0021      	movs	r1, r4
 80005ac:	4652      	mov	r2, sl
 80005ae:	e7a7      	b.n	8000500 <__aeabi_fmul+0x7c>
 80005b0:	0c3b      	lsrs	r3, r7, #16
 80005b2:	469c      	mov	ip, r3
 80005b4:	042a      	lsls	r2, r5, #16
 80005b6:	0c12      	lsrs	r2, r2, #16
 80005b8:	0c2b      	lsrs	r3, r5, #16
 80005ba:	0014      	movs	r4, r2
 80005bc:	4660      	mov	r0, ip
 80005be:	4665      	mov	r5, ip
 80005c0:	043f      	lsls	r7, r7, #16
 80005c2:	0c3f      	lsrs	r7, r7, #16
 80005c4:	437c      	muls	r4, r7
 80005c6:	4342      	muls	r2, r0
 80005c8:	435d      	muls	r5, r3
 80005ca:	437b      	muls	r3, r7
 80005cc:	0c27      	lsrs	r7, r4, #16
 80005ce:	189b      	adds	r3, r3, r2
 80005d0:	18ff      	adds	r7, r7, r3
 80005d2:	42ba      	cmp	r2, r7
 80005d4:	d903      	bls.n	80005de <__aeabi_fmul+0x15a>
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	025b      	lsls	r3, r3, #9
 80005da:	469c      	mov	ip, r3
 80005dc:	4465      	add	r5, ip
 80005de:	0424      	lsls	r4, r4, #16
 80005e0:	043a      	lsls	r2, r7, #16
 80005e2:	0c24      	lsrs	r4, r4, #16
 80005e4:	1912      	adds	r2, r2, r4
 80005e6:	0193      	lsls	r3, r2, #6
 80005e8:	1e5c      	subs	r4, r3, #1
 80005ea:	41a3      	sbcs	r3, r4
 80005ec:	0c3f      	lsrs	r7, r7, #16
 80005ee:	0e92      	lsrs	r2, r2, #26
 80005f0:	197d      	adds	r5, r7, r5
 80005f2:	431a      	orrs	r2, r3
 80005f4:	01ad      	lsls	r5, r5, #6
 80005f6:	4315      	orrs	r5, r2
 80005f8:	012b      	lsls	r3, r5, #4
 80005fa:	d504      	bpl.n	8000606 <__aeabi_fmul+0x182>
 80005fc:	2301      	movs	r3, #1
 80005fe:	465e      	mov	r6, fp
 8000600:	086a      	lsrs	r2, r5, #1
 8000602:	401d      	ands	r5, r3
 8000604:	4315      	orrs	r5, r2
 8000606:	0032      	movs	r2, r6
 8000608:	327f      	adds	r2, #127	; 0x7f
 800060a:	2a00      	cmp	r2, #0
 800060c:	dd25      	ble.n	800065a <__aeabi_fmul+0x1d6>
 800060e:	076b      	lsls	r3, r5, #29
 8000610:	d004      	beq.n	800061c <__aeabi_fmul+0x198>
 8000612:	230f      	movs	r3, #15
 8000614:	402b      	ands	r3, r5
 8000616:	2b04      	cmp	r3, #4
 8000618:	d000      	beq.n	800061c <__aeabi_fmul+0x198>
 800061a:	3504      	adds	r5, #4
 800061c:	012b      	lsls	r3, r5, #4
 800061e:	d503      	bpl.n	8000628 <__aeabi_fmul+0x1a4>
 8000620:	0032      	movs	r2, r6
 8000622:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <__aeabi_fmul+0x23c>)
 8000624:	3280      	adds	r2, #128	; 0x80
 8000626:	401d      	ands	r5, r3
 8000628:	2afe      	cmp	r2, #254	; 0xfe
 800062a:	dc94      	bgt.n	8000556 <__aeabi_fmul+0xd2>
 800062c:	2401      	movs	r4, #1
 800062e:	01a8      	lsls	r0, r5, #6
 8000630:	0a40      	lsrs	r0, r0, #9
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	400c      	ands	r4, r1
 8000636:	e76f      	b.n	8000518 <__aeabi_fmul+0x94>
 8000638:	2080      	movs	r0, #128	; 0x80
 800063a:	03c0      	lsls	r0, r0, #15
 800063c:	4207      	tst	r7, r0
 800063e:	d007      	beq.n	8000650 <__aeabi_fmul+0x1cc>
 8000640:	4205      	tst	r5, r0
 8000642:	d105      	bne.n	8000650 <__aeabi_fmul+0x1cc>
 8000644:	4328      	orrs	r0, r5
 8000646:	0240      	lsls	r0, r0, #9
 8000648:	0a40      	lsrs	r0, r0, #9
 800064a:	4644      	mov	r4, r8
 800064c:	22ff      	movs	r2, #255	; 0xff
 800064e:	e763      	b.n	8000518 <__aeabi_fmul+0x94>
 8000650:	4338      	orrs	r0, r7
 8000652:	0240      	lsls	r0, r0, #9
 8000654:	0a40      	lsrs	r0, r0, #9
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	e75e      	b.n	8000518 <__aeabi_fmul+0x94>
 800065a:	2401      	movs	r4, #1
 800065c:	1aa3      	subs	r3, r4, r2
 800065e:	2b1b      	cmp	r3, #27
 8000660:	dd05      	ble.n	800066e <__aeabi_fmul+0x1ea>
 8000662:	400c      	ands	r4, r1
 8000664:	2200      	movs	r2, #0
 8000666:	2000      	movs	r0, #0
 8000668:	e756      	b.n	8000518 <__aeabi_fmul+0x94>
 800066a:	465e      	mov	r6, fp
 800066c:	e7cb      	b.n	8000606 <__aeabi_fmul+0x182>
 800066e:	002a      	movs	r2, r5
 8000670:	2020      	movs	r0, #32
 8000672:	40da      	lsrs	r2, r3
 8000674:	1ac3      	subs	r3, r0, r3
 8000676:	409d      	lsls	r5, r3
 8000678:	002b      	movs	r3, r5
 800067a:	1e5d      	subs	r5, r3, #1
 800067c:	41ab      	sbcs	r3, r5
 800067e:	4313      	orrs	r3, r2
 8000680:	075a      	lsls	r2, r3, #29
 8000682:	d004      	beq.n	800068e <__aeabi_fmul+0x20a>
 8000684:	220f      	movs	r2, #15
 8000686:	401a      	ands	r2, r3
 8000688:	2a04      	cmp	r2, #4
 800068a:	d000      	beq.n	800068e <__aeabi_fmul+0x20a>
 800068c:	3304      	adds	r3, #4
 800068e:	015a      	lsls	r2, r3, #5
 8000690:	d504      	bpl.n	800069c <__aeabi_fmul+0x218>
 8000692:	2401      	movs	r4, #1
 8000694:	2201      	movs	r2, #1
 8000696:	400c      	ands	r4, r1
 8000698:	2000      	movs	r0, #0
 800069a:	e73d      	b.n	8000518 <__aeabi_fmul+0x94>
 800069c:	2401      	movs	r4, #1
 800069e:	019b      	lsls	r3, r3, #6
 80006a0:	0a58      	lsrs	r0, r3, #9
 80006a2:	400c      	ands	r4, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	e737      	b.n	8000518 <__aeabi_fmul+0x94>
 80006a8:	2080      	movs	r0, #128	; 0x80
 80006aa:	2401      	movs	r4, #1
 80006ac:	03c0      	lsls	r0, r0, #15
 80006ae:	4328      	orrs	r0, r5
 80006b0:	0240      	lsls	r0, r0, #9
 80006b2:	0a40      	lsrs	r0, r0, #9
 80006b4:	400c      	ands	r4, r1
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	e72e      	b.n	8000518 <__aeabi_fmul+0x94>
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	08005298 	.word	0x08005298
 80006c0:	f7ffffff 	.word	0xf7ffffff

080006c4 <__aeabi_i2f>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d030      	beq.n	800072c <__aeabi_i2f+0x68>
 80006ca:	17c3      	asrs	r3, r0, #31
 80006cc:	18c4      	adds	r4, r0, r3
 80006ce:	405c      	eors	r4, r3
 80006d0:	0fc5      	lsrs	r5, r0, #31
 80006d2:	0020      	movs	r0, r4
 80006d4:	f001 fab4 	bl	8001c40 <__clzsi2>
 80006d8:	239e      	movs	r3, #158	; 0x9e
 80006da:	1a1b      	subs	r3, r3, r0
 80006dc:	2b96      	cmp	r3, #150	; 0x96
 80006de:	dc0d      	bgt.n	80006fc <__aeabi_i2f+0x38>
 80006e0:	2296      	movs	r2, #150	; 0x96
 80006e2:	1ad2      	subs	r2, r2, r3
 80006e4:	4094      	lsls	r4, r2
 80006e6:	002a      	movs	r2, r5
 80006e8:	0264      	lsls	r4, r4, #9
 80006ea:	0a64      	lsrs	r4, r4, #9
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	0264      	lsls	r4, r4, #9
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	0a60      	lsrs	r0, r4, #9
 80006f4:	07d2      	lsls	r2, r2, #31
 80006f6:	4318      	orrs	r0, r3
 80006f8:	4310      	orrs	r0, r2
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	2b99      	cmp	r3, #153	; 0x99
 80006fe:	dc19      	bgt.n	8000734 <__aeabi_i2f+0x70>
 8000700:	2299      	movs	r2, #153	; 0x99
 8000702:	1ad2      	subs	r2, r2, r3
 8000704:	2a00      	cmp	r2, #0
 8000706:	dd29      	ble.n	800075c <__aeabi_i2f+0x98>
 8000708:	4094      	lsls	r4, r2
 800070a:	0022      	movs	r2, r4
 800070c:	4c14      	ldr	r4, [pc, #80]	; (8000760 <__aeabi_i2f+0x9c>)
 800070e:	4014      	ands	r4, r2
 8000710:	0751      	lsls	r1, r2, #29
 8000712:	d004      	beq.n	800071e <__aeabi_i2f+0x5a>
 8000714:	210f      	movs	r1, #15
 8000716:	400a      	ands	r2, r1
 8000718:	2a04      	cmp	r2, #4
 800071a:	d000      	beq.n	800071e <__aeabi_i2f+0x5a>
 800071c:	3404      	adds	r4, #4
 800071e:	0162      	lsls	r2, r4, #5
 8000720:	d413      	bmi.n	800074a <__aeabi_i2f+0x86>
 8000722:	01a4      	lsls	r4, r4, #6
 8000724:	0a64      	lsrs	r4, r4, #9
 8000726:	b2db      	uxtb	r3, r3
 8000728:	002a      	movs	r2, r5
 800072a:	e7e0      	b.n	80006ee <__aeabi_i2f+0x2a>
 800072c:	2200      	movs	r2, #0
 800072e:	2300      	movs	r3, #0
 8000730:	2400      	movs	r4, #0
 8000732:	e7dc      	b.n	80006ee <__aeabi_i2f+0x2a>
 8000734:	2205      	movs	r2, #5
 8000736:	0021      	movs	r1, r4
 8000738:	1a12      	subs	r2, r2, r0
 800073a:	40d1      	lsrs	r1, r2
 800073c:	22b9      	movs	r2, #185	; 0xb9
 800073e:	1ad2      	subs	r2, r2, r3
 8000740:	4094      	lsls	r4, r2
 8000742:	1e62      	subs	r2, r4, #1
 8000744:	4194      	sbcs	r4, r2
 8000746:	430c      	orrs	r4, r1
 8000748:	e7da      	b.n	8000700 <__aeabi_i2f+0x3c>
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <__aeabi_i2f+0x9c>)
 800074c:	002a      	movs	r2, r5
 800074e:	401c      	ands	r4, r3
 8000750:	239f      	movs	r3, #159	; 0x9f
 8000752:	01a4      	lsls	r4, r4, #6
 8000754:	1a1b      	subs	r3, r3, r0
 8000756:	0a64      	lsrs	r4, r4, #9
 8000758:	b2db      	uxtb	r3, r3
 800075a:	e7c8      	b.n	80006ee <__aeabi_i2f+0x2a>
 800075c:	0022      	movs	r2, r4
 800075e:	e7d5      	b.n	800070c <__aeabi_i2f+0x48>
 8000760:	fbffffff 	.word	0xfbffffff

08000764 <__aeabi_dadd>:
 8000764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000766:	4645      	mov	r5, r8
 8000768:	46de      	mov	lr, fp
 800076a:	4657      	mov	r7, sl
 800076c:	464e      	mov	r6, r9
 800076e:	030c      	lsls	r4, r1, #12
 8000770:	b5e0      	push	{r5, r6, r7, lr}
 8000772:	004e      	lsls	r6, r1, #1
 8000774:	0fc9      	lsrs	r1, r1, #31
 8000776:	4688      	mov	r8, r1
 8000778:	000d      	movs	r5, r1
 800077a:	0a61      	lsrs	r1, r4, #9
 800077c:	0f44      	lsrs	r4, r0, #29
 800077e:	430c      	orrs	r4, r1
 8000780:	00c7      	lsls	r7, r0, #3
 8000782:	0319      	lsls	r1, r3, #12
 8000784:	0058      	lsls	r0, r3, #1
 8000786:	0fdb      	lsrs	r3, r3, #31
 8000788:	469b      	mov	fp, r3
 800078a:	0a4b      	lsrs	r3, r1, #9
 800078c:	0f51      	lsrs	r1, r2, #29
 800078e:	430b      	orrs	r3, r1
 8000790:	0d76      	lsrs	r6, r6, #21
 8000792:	0d40      	lsrs	r0, r0, #21
 8000794:	0019      	movs	r1, r3
 8000796:	00d2      	lsls	r2, r2, #3
 8000798:	45d8      	cmp	r8, fp
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x3a>
 800079c:	e0ae      	b.n	80008fc <__aeabi_dadd+0x198>
 800079e:	1a35      	subs	r5, r6, r0
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_dadd+0x42>
 80007a4:	e0f6      	b.n	8000994 <__aeabi_dadd+0x230>
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dadd+0x66>
 80007aa:	4313      	orrs	r3, r2
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x4c>
 80007ae:	e0db      	b.n	8000968 <__aeabi_dadd+0x204>
 80007b0:	1e6b      	subs	r3, r5, #1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_dadd+0x54>
 80007b6:	e137      	b.n	8000a28 <__aeabi_dadd+0x2c4>
 80007b8:	1aba      	subs	r2, r7, r2
 80007ba:	4297      	cmp	r7, r2
 80007bc:	41bf      	sbcs	r7, r7
 80007be:	1a64      	subs	r4, r4, r1
 80007c0:	427f      	negs	r7, r7
 80007c2:	1be4      	subs	r4, r4, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	0017      	movs	r7, r2
 80007c8:	e024      	b.n	8000814 <__aeabi_dadd+0xb0>
 80007ca:	4bc6      	ldr	r3, [pc, #792]	; (8000ae4 <__aeabi_dadd+0x380>)
 80007cc:	429e      	cmp	r6, r3
 80007ce:	d04d      	beq.n	800086c <__aeabi_dadd+0x108>
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	041b      	lsls	r3, r3, #16
 80007d4:	4319      	orrs	r1, r3
 80007d6:	2d38      	cmp	r5, #56	; 0x38
 80007d8:	dd00      	ble.n	80007dc <__aeabi_dadd+0x78>
 80007da:	e107      	b.n	80009ec <__aeabi_dadd+0x288>
 80007dc:	2d1f      	cmp	r5, #31
 80007de:	dd00      	ble.n	80007e2 <__aeabi_dadd+0x7e>
 80007e0:	e138      	b.n	8000a54 <__aeabi_dadd+0x2f0>
 80007e2:	2020      	movs	r0, #32
 80007e4:	1b43      	subs	r3, r0, r5
 80007e6:	469a      	mov	sl, r3
 80007e8:	000b      	movs	r3, r1
 80007ea:	4650      	mov	r0, sl
 80007ec:	4083      	lsls	r3, r0
 80007ee:	4699      	mov	r9, r3
 80007f0:	0013      	movs	r3, r2
 80007f2:	4648      	mov	r0, r9
 80007f4:	40eb      	lsrs	r3, r5
 80007f6:	4318      	orrs	r0, r3
 80007f8:	0003      	movs	r3, r0
 80007fa:	4650      	mov	r0, sl
 80007fc:	4082      	lsls	r2, r0
 80007fe:	1e50      	subs	r0, r2, #1
 8000800:	4182      	sbcs	r2, r0
 8000802:	40e9      	lsrs	r1, r5
 8000804:	431a      	orrs	r2, r3
 8000806:	1aba      	subs	r2, r7, r2
 8000808:	1a61      	subs	r1, r4, r1
 800080a:	4297      	cmp	r7, r2
 800080c:	41a4      	sbcs	r4, r4
 800080e:	0017      	movs	r7, r2
 8000810:	4264      	negs	r4, r4
 8000812:	1b0c      	subs	r4, r1, r4
 8000814:	0223      	lsls	r3, r4, #8
 8000816:	d562      	bpl.n	80008de <__aeabi_dadd+0x17a>
 8000818:	0264      	lsls	r4, r4, #9
 800081a:	0a65      	lsrs	r5, r4, #9
 800081c:	2d00      	cmp	r5, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0xbe>
 8000820:	e0df      	b.n	80009e2 <__aeabi_dadd+0x27e>
 8000822:	0028      	movs	r0, r5
 8000824:	f001 fa0c 	bl	8001c40 <__clzsi2>
 8000828:	0003      	movs	r3, r0
 800082a:	3b08      	subs	r3, #8
 800082c:	2b1f      	cmp	r3, #31
 800082e:	dd00      	ble.n	8000832 <__aeabi_dadd+0xce>
 8000830:	e0d2      	b.n	80009d8 <__aeabi_dadd+0x274>
 8000832:	2220      	movs	r2, #32
 8000834:	003c      	movs	r4, r7
 8000836:	1ad2      	subs	r2, r2, r3
 8000838:	409d      	lsls	r5, r3
 800083a:	40d4      	lsrs	r4, r2
 800083c:	409f      	lsls	r7, r3
 800083e:	4325      	orrs	r5, r4
 8000840:	429e      	cmp	r6, r3
 8000842:	dd00      	ble.n	8000846 <__aeabi_dadd+0xe2>
 8000844:	e0c4      	b.n	80009d0 <__aeabi_dadd+0x26c>
 8000846:	1b9e      	subs	r6, r3, r6
 8000848:	1c73      	adds	r3, r6, #1
 800084a:	2b1f      	cmp	r3, #31
 800084c:	dd00      	ble.n	8000850 <__aeabi_dadd+0xec>
 800084e:	e0f1      	b.n	8000a34 <__aeabi_dadd+0x2d0>
 8000850:	2220      	movs	r2, #32
 8000852:	0038      	movs	r0, r7
 8000854:	0029      	movs	r1, r5
 8000856:	1ad2      	subs	r2, r2, r3
 8000858:	40d8      	lsrs	r0, r3
 800085a:	4091      	lsls	r1, r2
 800085c:	4097      	lsls	r7, r2
 800085e:	002c      	movs	r4, r5
 8000860:	4301      	orrs	r1, r0
 8000862:	1e78      	subs	r0, r7, #1
 8000864:	4187      	sbcs	r7, r0
 8000866:	40dc      	lsrs	r4, r3
 8000868:	2600      	movs	r6, #0
 800086a:	430f      	orrs	r7, r1
 800086c:	077b      	lsls	r3, r7, #29
 800086e:	d009      	beq.n	8000884 <__aeabi_dadd+0x120>
 8000870:	230f      	movs	r3, #15
 8000872:	403b      	ands	r3, r7
 8000874:	2b04      	cmp	r3, #4
 8000876:	d005      	beq.n	8000884 <__aeabi_dadd+0x120>
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	42bb      	cmp	r3, r7
 800087c:	41bf      	sbcs	r7, r7
 800087e:	427f      	negs	r7, r7
 8000880:	19e4      	adds	r4, r4, r7
 8000882:	001f      	movs	r7, r3
 8000884:	0223      	lsls	r3, r4, #8
 8000886:	d52c      	bpl.n	80008e2 <__aeabi_dadd+0x17e>
 8000888:	4b96      	ldr	r3, [pc, #600]	; (8000ae4 <__aeabi_dadd+0x380>)
 800088a:	3601      	adds	r6, #1
 800088c:	429e      	cmp	r6, r3
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x12e>
 8000890:	e09a      	b.n	80009c8 <__aeabi_dadd+0x264>
 8000892:	4645      	mov	r5, r8
 8000894:	4b94      	ldr	r3, [pc, #592]	; (8000ae8 <__aeabi_dadd+0x384>)
 8000896:	08ff      	lsrs	r7, r7, #3
 8000898:	401c      	ands	r4, r3
 800089a:	0760      	lsls	r0, r4, #29
 800089c:	0576      	lsls	r6, r6, #21
 800089e:	0264      	lsls	r4, r4, #9
 80008a0:	4307      	orrs	r7, r0
 80008a2:	0b24      	lsrs	r4, r4, #12
 80008a4:	0d76      	lsrs	r6, r6, #21
 80008a6:	2100      	movs	r1, #0
 80008a8:	0324      	lsls	r4, r4, #12
 80008aa:	0b23      	lsrs	r3, r4, #12
 80008ac:	0d0c      	lsrs	r4, r1, #20
 80008ae:	4a8f      	ldr	r2, [pc, #572]	; (8000aec <__aeabi_dadd+0x388>)
 80008b0:	0524      	lsls	r4, r4, #20
 80008b2:	431c      	orrs	r4, r3
 80008b4:	4014      	ands	r4, r2
 80008b6:	0533      	lsls	r3, r6, #20
 80008b8:	4323      	orrs	r3, r4
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	07ed      	lsls	r5, r5, #31
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	432b      	orrs	r3, r5
 80008c2:	0038      	movs	r0, r7
 80008c4:	0019      	movs	r1, r3
 80008c6:	bc3c      	pop	{r2, r3, r4, r5}
 80008c8:	4690      	mov	r8, r2
 80008ca:	4699      	mov	r9, r3
 80008cc:	46a2      	mov	sl, r4
 80008ce:	46ab      	mov	fp, r5
 80008d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d2:	4664      	mov	r4, ip
 80008d4:	4304      	orrs	r4, r0
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x176>
 80008d8:	e211      	b.n	8000cfe <__aeabi_dadd+0x59a>
 80008da:	0004      	movs	r4, r0
 80008dc:	4667      	mov	r7, ip
 80008de:	077b      	lsls	r3, r7, #29
 80008e0:	d1c6      	bne.n	8000870 <__aeabi_dadd+0x10c>
 80008e2:	4645      	mov	r5, r8
 80008e4:	0760      	lsls	r0, r4, #29
 80008e6:	08ff      	lsrs	r7, r7, #3
 80008e8:	4307      	orrs	r7, r0
 80008ea:	08e4      	lsrs	r4, r4, #3
 80008ec:	4b7d      	ldr	r3, [pc, #500]	; (8000ae4 <__aeabi_dadd+0x380>)
 80008ee:	429e      	cmp	r6, r3
 80008f0:	d030      	beq.n	8000954 <__aeabi_dadd+0x1f0>
 80008f2:	0324      	lsls	r4, r4, #12
 80008f4:	0576      	lsls	r6, r6, #21
 80008f6:	0b24      	lsrs	r4, r4, #12
 80008f8:	0d76      	lsrs	r6, r6, #21
 80008fa:	e7d4      	b.n	80008a6 <__aeabi_dadd+0x142>
 80008fc:	1a33      	subs	r3, r6, r0
 80008fe:	469a      	mov	sl, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	dd78      	ble.n	80009f6 <__aeabi_dadd+0x292>
 8000904:	2800      	cmp	r0, #0
 8000906:	d031      	beq.n	800096c <__aeabi_dadd+0x208>
 8000908:	4876      	ldr	r0, [pc, #472]	; (8000ae4 <__aeabi_dadd+0x380>)
 800090a:	4286      	cmp	r6, r0
 800090c:	d0ae      	beq.n	800086c <__aeabi_dadd+0x108>
 800090e:	2080      	movs	r0, #128	; 0x80
 8000910:	0400      	lsls	r0, r0, #16
 8000912:	4301      	orrs	r1, r0
 8000914:	4653      	mov	r3, sl
 8000916:	2b38      	cmp	r3, #56	; 0x38
 8000918:	dc00      	bgt.n	800091c <__aeabi_dadd+0x1b8>
 800091a:	e0e9      	b.n	8000af0 <__aeabi_dadd+0x38c>
 800091c:	430a      	orrs	r2, r1
 800091e:	1e51      	subs	r1, r2, #1
 8000920:	418a      	sbcs	r2, r1
 8000922:	2100      	movs	r1, #0
 8000924:	19d2      	adds	r2, r2, r7
 8000926:	42ba      	cmp	r2, r7
 8000928:	41bf      	sbcs	r7, r7
 800092a:	1909      	adds	r1, r1, r4
 800092c:	427c      	negs	r4, r7
 800092e:	0017      	movs	r7, r2
 8000930:	190c      	adds	r4, r1, r4
 8000932:	0223      	lsls	r3, r4, #8
 8000934:	d5d3      	bpl.n	80008de <__aeabi_dadd+0x17a>
 8000936:	4b6b      	ldr	r3, [pc, #428]	; (8000ae4 <__aeabi_dadd+0x380>)
 8000938:	3601      	adds	r6, #1
 800093a:	429e      	cmp	r6, r3
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x1dc>
 800093e:	e13a      	b.n	8000bb6 <__aeabi_dadd+0x452>
 8000940:	2001      	movs	r0, #1
 8000942:	4b69      	ldr	r3, [pc, #420]	; (8000ae8 <__aeabi_dadd+0x384>)
 8000944:	401c      	ands	r4, r3
 8000946:	087b      	lsrs	r3, r7, #1
 8000948:	4007      	ands	r7, r0
 800094a:	431f      	orrs	r7, r3
 800094c:	07e0      	lsls	r0, r4, #31
 800094e:	4307      	orrs	r7, r0
 8000950:	0864      	lsrs	r4, r4, #1
 8000952:	e78b      	b.n	800086c <__aeabi_dadd+0x108>
 8000954:	0023      	movs	r3, r4
 8000956:	433b      	orrs	r3, r7
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x1f8>
 800095a:	e1cb      	b.n	8000cf4 <__aeabi_dadd+0x590>
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0312      	lsls	r2, r2, #12
 8000960:	4314      	orrs	r4, r2
 8000962:	0324      	lsls	r4, r4, #12
 8000964:	0b24      	lsrs	r4, r4, #12
 8000966:	e79e      	b.n	80008a6 <__aeabi_dadd+0x142>
 8000968:	002e      	movs	r6, r5
 800096a:	e77f      	b.n	800086c <__aeabi_dadd+0x108>
 800096c:	0008      	movs	r0, r1
 800096e:	4310      	orrs	r0, r2
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x210>
 8000972:	e0b4      	b.n	8000ade <__aeabi_dadd+0x37a>
 8000974:	1e58      	subs	r0, r3, #1
 8000976:	2800      	cmp	r0, #0
 8000978:	d000      	beq.n	800097c <__aeabi_dadd+0x218>
 800097a:	e0de      	b.n	8000b3a <__aeabi_dadd+0x3d6>
 800097c:	18ba      	adds	r2, r7, r2
 800097e:	42ba      	cmp	r2, r7
 8000980:	419b      	sbcs	r3, r3
 8000982:	1864      	adds	r4, r4, r1
 8000984:	425b      	negs	r3, r3
 8000986:	18e4      	adds	r4, r4, r3
 8000988:	0017      	movs	r7, r2
 800098a:	2601      	movs	r6, #1
 800098c:	0223      	lsls	r3, r4, #8
 800098e:	d5a6      	bpl.n	80008de <__aeabi_dadd+0x17a>
 8000990:	2602      	movs	r6, #2
 8000992:	e7d5      	b.n	8000940 <__aeabi_dadd+0x1dc>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d16e      	bne.n	8000a76 <__aeabi_dadd+0x312>
 8000998:	1c70      	adds	r0, r6, #1
 800099a:	0540      	lsls	r0, r0, #21
 800099c:	0d40      	lsrs	r0, r0, #21
 800099e:	2801      	cmp	r0, #1
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x240>
 80009a2:	e0f9      	b.n	8000b98 <__aeabi_dadd+0x434>
 80009a4:	1ab8      	subs	r0, r7, r2
 80009a6:	4684      	mov	ip, r0
 80009a8:	4287      	cmp	r7, r0
 80009aa:	4180      	sbcs	r0, r0
 80009ac:	1ae5      	subs	r5, r4, r3
 80009ae:	4240      	negs	r0, r0
 80009b0:	1a2d      	subs	r5, r5, r0
 80009b2:	0228      	lsls	r0, r5, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x254>
 80009b6:	e089      	b.n	8000acc <__aeabi_dadd+0x368>
 80009b8:	1bd7      	subs	r7, r2, r7
 80009ba:	42ba      	cmp	r2, r7
 80009bc:	4192      	sbcs	r2, r2
 80009be:	1b1c      	subs	r4, r3, r4
 80009c0:	4252      	negs	r2, r2
 80009c2:	1aa5      	subs	r5, r4, r2
 80009c4:	46d8      	mov	r8, fp
 80009c6:	e729      	b.n	800081c <__aeabi_dadd+0xb8>
 80009c8:	4645      	mov	r5, r8
 80009ca:	2400      	movs	r4, #0
 80009cc:	2700      	movs	r7, #0
 80009ce:	e76a      	b.n	80008a6 <__aeabi_dadd+0x142>
 80009d0:	4c45      	ldr	r4, [pc, #276]	; (8000ae8 <__aeabi_dadd+0x384>)
 80009d2:	1af6      	subs	r6, r6, r3
 80009d4:	402c      	ands	r4, r5
 80009d6:	e749      	b.n	800086c <__aeabi_dadd+0x108>
 80009d8:	003d      	movs	r5, r7
 80009da:	3828      	subs	r0, #40	; 0x28
 80009dc:	4085      	lsls	r5, r0
 80009de:	2700      	movs	r7, #0
 80009e0:	e72e      	b.n	8000840 <__aeabi_dadd+0xdc>
 80009e2:	0038      	movs	r0, r7
 80009e4:	f001 f92c 	bl	8001c40 <__clzsi2>
 80009e8:	3020      	adds	r0, #32
 80009ea:	e71d      	b.n	8000828 <__aeabi_dadd+0xc4>
 80009ec:	430a      	orrs	r2, r1
 80009ee:	1e51      	subs	r1, r2, #1
 80009f0:	418a      	sbcs	r2, r1
 80009f2:	2100      	movs	r1, #0
 80009f4:	e707      	b.n	8000806 <__aeabi_dadd+0xa2>
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d000      	beq.n	80009fc <__aeabi_dadd+0x298>
 80009fa:	e0f3      	b.n	8000be4 <__aeabi_dadd+0x480>
 80009fc:	1c70      	adds	r0, r6, #1
 80009fe:	0543      	lsls	r3, r0, #21
 8000a00:	0d5b      	lsrs	r3, r3, #21
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	dc00      	bgt.n	8000a08 <__aeabi_dadd+0x2a4>
 8000a06:	e0ad      	b.n	8000b64 <__aeabi_dadd+0x400>
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <__aeabi_dadd+0x380>)
 8000a0a:	4298      	cmp	r0, r3
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dadd+0x2ac>
 8000a0e:	e0d1      	b.n	8000bb4 <__aeabi_dadd+0x450>
 8000a10:	18ba      	adds	r2, r7, r2
 8000a12:	42ba      	cmp	r2, r7
 8000a14:	41bf      	sbcs	r7, r7
 8000a16:	1864      	adds	r4, r4, r1
 8000a18:	427f      	negs	r7, r7
 8000a1a:	19e4      	adds	r4, r4, r7
 8000a1c:	07e7      	lsls	r7, r4, #31
 8000a1e:	0852      	lsrs	r2, r2, #1
 8000a20:	4317      	orrs	r7, r2
 8000a22:	0864      	lsrs	r4, r4, #1
 8000a24:	0006      	movs	r6, r0
 8000a26:	e721      	b.n	800086c <__aeabi_dadd+0x108>
 8000a28:	482e      	ldr	r0, [pc, #184]	; (8000ae4 <__aeabi_dadd+0x380>)
 8000a2a:	4285      	cmp	r5, r0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x2cc>
 8000a2e:	e093      	b.n	8000b58 <__aeabi_dadd+0x3f4>
 8000a30:	001d      	movs	r5, r3
 8000a32:	e6d0      	b.n	80007d6 <__aeabi_dadd+0x72>
 8000a34:	0029      	movs	r1, r5
 8000a36:	3e1f      	subs	r6, #31
 8000a38:	40f1      	lsrs	r1, r6
 8000a3a:	2b20      	cmp	r3, #32
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dadd+0x2dc>
 8000a3e:	e08d      	b.n	8000b5c <__aeabi_dadd+0x3f8>
 8000a40:	2240      	movs	r2, #64	; 0x40
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	409d      	lsls	r5, r3
 8000a46:	432f      	orrs	r7, r5
 8000a48:	1e7d      	subs	r5, r7, #1
 8000a4a:	41af      	sbcs	r7, r5
 8000a4c:	2400      	movs	r4, #0
 8000a4e:	430f      	orrs	r7, r1
 8000a50:	2600      	movs	r6, #0
 8000a52:	e744      	b.n	80008de <__aeabi_dadd+0x17a>
 8000a54:	002b      	movs	r3, r5
 8000a56:	0008      	movs	r0, r1
 8000a58:	3b20      	subs	r3, #32
 8000a5a:	40d8      	lsrs	r0, r3
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	2d20      	cmp	r5, #32
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x300>
 8000a62:	e07d      	b.n	8000b60 <__aeabi_dadd+0x3fc>
 8000a64:	2040      	movs	r0, #64	; 0x40
 8000a66:	1b45      	subs	r5, r0, r5
 8000a68:	40a9      	lsls	r1, r5
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	1e51      	subs	r1, r2, #1
 8000a6e:	418a      	sbcs	r2, r1
 8000a70:	2100      	movs	r1, #0
 8000a72:	431a      	orrs	r2, r3
 8000a74:	e6c7      	b.n	8000806 <__aeabi_dadd+0xa2>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d050      	beq.n	8000b1c <__aeabi_dadd+0x3b8>
 8000a7a:	4e1a      	ldr	r6, [pc, #104]	; (8000ae4 <__aeabi_dadd+0x380>)
 8000a7c:	42b0      	cmp	r0, r6
 8000a7e:	d057      	beq.n	8000b30 <__aeabi_dadd+0x3cc>
 8000a80:	2680      	movs	r6, #128	; 0x80
 8000a82:	426b      	negs	r3, r5
 8000a84:	4699      	mov	r9, r3
 8000a86:	0436      	lsls	r6, r6, #16
 8000a88:	4334      	orrs	r4, r6
 8000a8a:	464b      	mov	r3, r9
 8000a8c:	2b38      	cmp	r3, #56	; 0x38
 8000a8e:	dd00      	ble.n	8000a92 <__aeabi_dadd+0x32e>
 8000a90:	e0d6      	b.n	8000c40 <__aeabi_dadd+0x4dc>
 8000a92:	2b1f      	cmp	r3, #31
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_dadd+0x334>
 8000a96:	e135      	b.n	8000d04 <__aeabi_dadd+0x5a0>
 8000a98:	2620      	movs	r6, #32
 8000a9a:	1af5      	subs	r5, r6, r3
 8000a9c:	0026      	movs	r6, r4
 8000a9e:	40ae      	lsls	r6, r5
 8000aa0:	46b2      	mov	sl, r6
 8000aa2:	003e      	movs	r6, r7
 8000aa4:	40de      	lsrs	r6, r3
 8000aa6:	46ac      	mov	ip, r5
 8000aa8:	0035      	movs	r5, r6
 8000aaa:	4656      	mov	r6, sl
 8000aac:	432e      	orrs	r6, r5
 8000aae:	4665      	mov	r5, ip
 8000ab0:	40af      	lsls	r7, r5
 8000ab2:	1e7d      	subs	r5, r7, #1
 8000ab4:	41af      	sbcs	r7, r5
 8000ab6:	40dc      	lsrs	r4, r3
 8000ab8:	4337      	orrs	r7, r6
 8000aba:	1bd7      	subs	r7, r2, r7
 8000abc:	42ba      	cmp	r2, r7
 8000abe:	4192      	sbcs	r2, r2
 8000ac0:	1b0c      	subs	r4, r1, r4
 8000ac2:	4252      	negs	r2, r2
 8000ac4:	1aa4      	subs	r4, r4, r2
 8000ac6:	0006      	movs	r6, r0
 8000ac8:	46d8      	mov	r8, fp
 8000aca:	e6a3      	b.n	8000814 <__aeabi_dadd+0xb0>
 8000acc:	4664      	mov	r4, ip
 8000ace:	4667      	mov	r7, ip
 8000ad0:	432c      	orrs	r4, r5
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_dadd+0x372>
 8000ad4:	e6a2      	b.n	800081c <__aeabi_dadd+0xb8>
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	2600      	movs	r6, #0
 8000ada:	2700      	movs	r7, #0
 8000adc:	e706      	b.n	80008ec <__aeabi_dadd+0x188>
 8000ade:	001e      	movs	r6, r3
 8000ae0:	e6c4      	b.n	800086c <__aeabi_dadd+0x108>
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	000007ff 	.word	0x000007ff
 8000ae8:	ff7fffff 	.word	0xff7fffff
 8000aec:	800fffff 	.word	0x800fffff
 8000af0:	2b1f      	cmp	r3, #31
 8000af2:	dc63      	bgt.n	8000bbc <__aeabi_dadd+0x458>
 8000af4:	2020      	movs	r0, #32
 8000af6:	1ac3      	subs	r3, r0, r3
 8000af8:	0008      	movs	r0, r1
 8000afa:	4098      	lsls	r0, r3
 8000afc:	469c      	mov	ip, r3
 8000afe:	4683      	mov	fp, r0
 8000b00:	4653      	mov	r3, sl
 8000b02:	0010      	movs	r0, r2
 8000b04:	40d8      	lsrs	r0, r3
 8000b06:	0003      	movs	r3, r0
 8000b08:	4658      	mov	r0, fp
 8000b0a:	4318      	orrs	r0, r3
 8000b0c:	4663      	mov	r3, ip
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	1e53      	subs	r3, r2, #1
 8000b12:	419a      	sbcs	r2, r3
 8000b14:	4653      	mov	r3, sl
 8000b16:	4302      	orrs	r2, r0
 8000b18:	40d9      	lsrs	r1, r3
 8000b1a:	e703      	b.n	8000924 <__aeabi_dadd+0x1c0>
 8000b1c:	0026      	movs	r6, r4
 8000b1e:	433e      	orrs	r6, r7
 8000b20:	d006      	beq.n	8000b30 <__aeabi_dadd+0x3cc>
 8000b22:	43eb      	mvns	r3, r5
 8000b24:	4699      	mov	r9, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0c7      	beq.n	8000aba <__aeabi_dadd+0x356>
 8000b2a:	4e94      	ldr	r6, [pc, #592]	; (8000d7c <__aeabi_dadd+0x618>)
 8000b2c:	42b0      	cmp	r0, r6
 8000b2e:	d1ac      	bne.n	8000a8a <__aeabi_dadd+0x326>
 8000b30:	000c      	movs	r4, r1
 8000b32:	0017      	movs	r7, r2
 8000b34:	0006      	movs	r6, r0
 8000b36:	46d8      	mov	r8, fp
 8000b38:	e698      	b.n	800086c <__aeabi_dadd+0x108>
 8000b3a:	4b90      	ldr	r3, [pc, #576]	; (8000d7c <__aeabi_dadd+0x618>)
 8000b3c:	459a      	cmp	sl, r3
 8000b3e:	d00b      	beq.n	8000b58 <__aeabi_dadd+0x3f4>
 8000b40:	4682      	mov	sl, r0
 8000b42:	e6e7      	b.n	8000914 <__aeabi_dadd+0x1b0>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x3e6>
 8000b48:	e09e      	b.n	8000c88 <__aeabi_dadd+0x524>
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	4310      	orrs	r0, r2
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dadd+0x3ee>
 8000b50:	e0e9      	b.n	8000d26 <__aeabi_dadd+0x5c2>
 8000b52:	001c      	movs	r4, r3
 8000b54:	0017      	movs	r7, r2
 8000b56:	46d8      	mov	r8, fp
 8000b58:	4e88      	ldr	r6, [pc, #544]	; (8000d7c <__aeabi_dadd+0x618>)
 8000b5a:	e687      	b.n	800086c <__aeabi_dadd+0x108>
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	e772      	b.n	8000a46 <__aeabi_dadd+0x2e2>
 8000b60:	2100      	movs	r1, #0
 8000b62:	e782      	b.n	8000a6a <__aeabi_dadd+0x306>
 8000b64:	0023      	movs	r3, r4
 8000b66:	433b      	orrs	r3, r7
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_dadd+0x40a>
 8000b6c:	e0ab      	b.n	8000cc6 <__aeabi_dadd+0x562>
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x410>
 8000b72:	e0e7      	b.n	8000d44 <__aeabi_dadd+0x5e0>
 8000b74:	000b      	movs	r3, r1
 8000b76:	4313      	orrs	r3, r2
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x418>
 8000b7a:	e677      	b.n	800086c <__aeabi_dadd+0x108>
 8000b7c:	18ba      	adds	r2, r7, r2
 8000b7e:	42ba      	cmp	r2, r7
 8000b80:	41bf      	sbcs	r7, r7
 8000b82:	1864      	adds	r4, r4, r1
 8000b84:	427f      	negs	r7, r7
 8000b86:	19e4      	adds	r4, r4, r7
 8000b88:	0223      	lsls	r3, r4, #8
 8000b8a:	d400      	bmi.n	8000b8e <__aeabi_dadd+0x42a>
 8000b8c:	e0f2      	b.n	8000d74 <__aeabi_dadd+0x610>
 8000b8e:	4b7c      	ldr	r3, [pc, #496]	; (8000d80 <__aeabi_dadd+0x61c>)
 8000b90:	0017      	movs	r7, r2
 8000b92:	401c      	ands	r4, r3
 8000b94:	0006      	movs	r6, r0
 8000b96:	e669      	b.n	800086c <__aeabi_dadd+0x108>
 8000b98:	0020      	movs	r0, r4
 8000b9a:	4338      	orrs	r0, r7
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d1d1      	bne.n	8000b44 <__aeabi_dadd+0x3e0>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d15b      	bne.n	8000c5c <__aeabi_dadd+0x4f8>
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	4314      	orrs	r4, r2
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x448>
 8000baa:	e0a8      	b.n	8000cfe <__aeabi_dadd+0x59a>
 8000bac:	001c      	movs	r4, r3
 8000bae:	0017      	movs	r7, r2
 8000bb0:	46d8      	mov	r8, fp
 8000bb2:	e65b      	b.n	800086c <__aeabi_dadd+0x108>
 8000bb4:	0006      	movs	r6, r0
 8000bb6:	2400      	movs	r4, #0
 8000bb8:	2700      	movs	r7, #0
 8000bba:	e697      	b.n	80008ec <__aeabi_dadd+0x188>
 8000bbc:	4650      	mov	r0, sl
 8000bbe:	000b      	movs	r3, r1
 8000bc0:	3820      	subs	r0, #32
 8000bc2:	40c3      	lsrs	r3, r0
 8000bc4:	4699      	mov	r9, r3
 8000bc6:	4653      	mov	r3, sl
 8000bc8:	2b20      	cmp	r3, #32
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x46a>
 8000bcc:	e095      	b.n	8000cfa <__aeabi_dadd+0x596>
 8000bce:	2340      	movs	r3, #64	; 0x40
 8000bd0:	4650      	mov	r0, sl
 8000bd2:	1a1b      	subs	r3, r3, r0
 8000bd4:	4099      	lsls	r1, r3
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	1e51      	subs	r1, r2, #1
 8000bda:	418a      	sbcs	r2, r1
 8000bdc:	464b      	mov	r3, r9
 8000bde:	2100      	movs	r1, #0
 8000be0:	431a      	orrs	r2, r3
 8000be2:	e69f      	b.n	8000924 <__aeabi_dadd+0x1c0>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d130      	bne.n	8000c4a <__aeabi_dadd+0x4e6>
 8000be8:	0026      	movs	r6, r4
 8000bea:	433e      	orrs	r6, r7
 8000bec:	d067      	beq.n	8000cbe <__aeabi_dadd+0x55a>
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d01c      	beq.n	8000c30 <__aeabi_dadd+0x4cc>
 8000bf6:	4e61      	ldr	r6, [pc, #388]	; (8000d7c <__aeabi_dadd+0x618>)
 8000bf8:	42b0      	cmp	r0, r6
 8000bfa:	d060      	beq.n	8000cbe <__aeabi_dadd+0x55a>
 8000bfc:	4653      	mov	r3, sl
 8000bfe:	2b38      	cmp	r3, #56	; 0x38
 8000c00:	dd00      	ble.n	8000c04 <__aeabi_dadd+0x4a0>
 8000c02:	e096      	b.n	8000d32 <__aeabi_dadd+0x5ce>
 8000c04:	2b1f      	cmp	r3, #31
 8000c06:	dd00      	ble.n	8000c0a <__aeabi_dadd+0x4a6>
 8000c08:	e09f      	b.n	8000d4a <__aeabi_dadd+0x5e6>
 8000c0a:	2620      	movs	r6, #32
 8000c0c:	1af3      	subs	r3, r6, r3
 8000c0e:	0026      	movs	r6, r4
 8000c10:	409e      	lsls	r6, r3
 8000c12:	469c      	mov	ip, r3
 8000c14:	46b3      	mov	fp, r6
 8000c16:	4653      	mov	r3, sl
 8000c18:	003e      	movs	r6, r7
 8000c1a:	40de      	lsrs	r6, r3
 8000c1c:	0033      	movs	r3, r6
 8000c1e:	465e      	mov	r6, fp
 8000c20:	431e      	orrs	r6, r3
 8000c22:	4663      	mov	r3, ip
 8000c24:	409f      	lsls	r7, r3
 8000c26:	1e7b      	subs	r3, r7, #1
 8000c28:	419f      	sbcs	r7, r3
 8000c2a:	4653      	mov	r3, sl
 8000c2c:	40dc      	lsrs	r4, r3
 8000c2e:	4337      	orrs	r7, r6
 8000c30:	18bf      	adds	r7, r7, r2
 8000c32:	4297      	cmp	r7, r2
 8000c34:	4192      	sbcs	r2, r2
 8000c36:	1864      	adds	r4, r4, r1
 8000c38:	4252      	negs	r2, r2
 8000c3a:	18a4      	adds	r4, r4, r2
 8000c3c:	0006      	movs	r6, r0
 8000c3e:	e678      	b.n	8000932 <__aeabi_dadd+0x1ce>
 8000c40:	4327      	orrs	r7, r4
 8000c42:	1e7c      	subs	r4, r7, #1
 8000c44:	41a7      	sbcs	r7, r4
 8000c46:	2400      	movs	r4, #0
 8000c48:	e737      	b.n	8000aba <__aeabi_dadd+0x356>
 8000c4a:	4e4c      	ldr	r6, [pc, #304]	; (8000d7c <__aeabi_dadd+0x618>)
 8000c4c:	42b0      	cmp	r0, r6
 8000c4e:	d036      	beq.n	8000cbe <__aeabi_dadd+0x55a>
 8000c50:	2680      	movs	r6, #128	; 0x80
 8000c52:	425b      	negs	r3, r3
 8000c54:	0436      	lsls	r6, r6, #16
 8000c56:	469a      	mov	sl, r3
 8000c58:	4334      	orrs	r4, r6
 8000c5a:	e7cf      	b.n	8000bfc <__aeabi_dadd+0x498>
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	4310      	orrs	r0, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_dadd+0x500>
 8000c62:	e603      	b.n	800086c <__aeabi_dadd+0x108>
 8000c64:	1ab8      	subs	r0, r7, r2
 8000c66:	4684      	mov	ip, r0
 8000c68:	4567      	cmp	r7, ip
 8000c6a:	41ad      	sbcs	r5, r5
 8000c6c:	1ae0      	subs	r0, r4, r3
 8000c6e:	426d      	negs	r5, r5
 8000c70:	1b40      	subs	r0, r0, r5
 8000c72:	0205      	lsls	r5, r0, #8
 8000c74:	d400      	bmi.n	8000c78 <__aeabi_dadd+0x514>
 8000c76:	e62c      	b.n	80008d2 <__aeabi_dadd+0x16e>
 8000c78:	1bd7      	subs	r7, r2, r7
 8000c7a:	42ba      	cmp	r2, r7
 8000c7c:	4192      	sbcs	r2, r2
 8000c7e:	1b1c      	subs	r4, r3, r4
 8000c80:	4252      	negs	r2, r2
 8000c82:	1aa4      	subs	r4, r4, r2
 8000c84:	46d8      	mov	r8, fp
 8000c86:	e5f1      	b.n	800086c <__aeabi_dadd+0x108>
 8000c88:	0018      	movs	r0, r3
 8000c8a:	4310      	orrs	r0, r2
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x52c>
 8000c8e:	e763      	b.n	8000b58 <__aeabi_dadd+0x3f4>
 8000c90:	08f8      	lsrs	r0, r7, #3
 8000c92:	0767      	lsls	r7, r4, #29
 8000c94:	4307      	orrs	r7, r0
 8000c96:	2080      	movs	r0, #128	; 0x80
 8000c98:	08e4      	lsrs	r4, r4, #3
 8000c9a:	0300      	lsls	r0, r0, #12
 8000c9c:	4204      	tst	r4, r0
 8000c9e:	d008      	beq.n	8000cb2 <__aeabi_dadd+0x54e>
 8000ca0:	08dd      	lsrs	r5, r3, #3
 8000ca2:	4205      	tst	r5, r0
 8000ca4:	d105      	bne.n	8000cb2 <__aeabi_dadd+0x54e>
 8000ca6:	08d2      	lsrs	r2, r2, #3
 8000ca8:	0759      	lsls	r1, r3, #29
 8000caa:	4311      	orrs	r1, r2
 8000cac:	000f      	movs	r7, r1
 8000cae:	002c      	movs	r4, r5
 8000cb0:	46d8      	mov	r8, fp
 8000cb2:	0f7b      	lsrs	r3, r7, #29
 8000cb4:	00e4      	lsls	r4, r4, #3
 8000cb6:	431c      	orrs	r4, r3
 8000cb8:	00ff      	lsls	r7, r7, #3
 8000cba:	4e30      	ldr	r6, [pc, #192]	; (8000d7c <__aeabi_dadd+0x618>)
 8000cbc:	e5d6      	b.n	800086c <__aeabi_dadd+0x108>
 8000cbe:	000c      	movs	r4, r1
 8000cc0:	0017      	movs	r7, r2
 8000cc2:	0006      	movs	r6, r0
 8000cc4:	e5d2      	b.n	800086c <__aeabi_dadd+0x108>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d038      	beq.n	8000d3c <__aeabi_dadd+0x5d8>
 8000cca:	000b      	movs	r3, r1
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dadd+0x56e>
 8000cd0:	e742      	b.n	8000b58 <__aeabi_dadd+0x3f4>
 8000cd2:	08f8      	lsrs	r0, r7, #3
 8000cd4:	0767      	lsls	r7, r4, #29
 8000cd6:	4307      	orrs	r7, r0
 8000cd8:	2080      	movs	r0, #128	; 0x80
 8000cda:	08e4      	lsrs	r4, r4, #3
 8000cdc:	0300      	lsls	r0, r0, #12
 8000cde:	4204      	tst	r4, r0
 8000ce0:	d0e7      	beq.n	8000cb2 <__aeabi_dadd+0x54e>
 8000ce2:	08cb      	lsrs	r3, r1, #3
 8000ce4:	4203      	tst	r3, r0
 8000ce6:	d1e4      	bne.n	8000cb2 <__aeabi_dadd+0x54e>
 8000ce8:	08d2      	lsrs	r2, r2, #3
 8000cea:	0749      	lsls	r1, r1, #29
 8000cec:	4311      	orrs	r1, r2
 8000cee:	000f      	movs	r7, r1
 8000cf0:	001c      	movs	r4, r3
 8000cf2:	e7de      	b.n	8000cb2 <__aeabi_dadd+0x54e>
 8000cf4:	2700      	movs	r7, #0
 8000cf6:	2400      	movs	r4, #0
 8000cf8:	e5d5      	b.n	80008a6 <__aeabi_dadd+0x142>
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	e76b      	b.n	8000bd6 <__aeabi_dadd+0x472>
 8000cfe:	2500      	movs	r5, #0
 8000d00:	2700      	movs	r7, #0
 8000d02:	e5f3      	b.n	80008ec <__aeabi_dadd+0x188>
 8000d04:	464e      	mov	r6, r9
 8000d06:	0025      	movs	r5, r4
 8000d08:	3e20      	subs	r6, #32
 8000d0a:	40f5      	lsrs	r5, r6
 8000d0c:	464b      	mov	r3, r9
 8000d0e:	002e      	movs	r6, r5
 8000d10:	2b20      	cmp	r3, #32
 8000d12:	d02d      	beq.n	8000d70 <__aeabi_dadd+0x60c>
 8000d14:	2540      	movs	r5, #64	; 0x40
 8000d16:	1aed      	subs	r5, r5, r3
 8000d18:	40ac      	lsls	r4, r5
 8000d1a:	4327      	orrs	r7, r4
 8000d1c:	1e7c      	subs	r4, r7, #1
 8000d1e:	41a7      	sbcs	r7, r4
 8000d20:	2400      	movs	r4, #0
 8000d22:	4337      	orrs	r7, r6
 8000d24:	e6c9      	b.n	8000aba <__aeabi_dadd+0x356>
 8000d26:	2480      	movs	r4, #128	; 0x80
 8000d28:	2500      	movs	r5, #0
 8000d2a:	0324      	lsls	r4, r4, #12
 8000d2c:	4e13      	ldr	r6, [pc, #76]	; (8000d7c <__aeabi_dadd+0x618>)
 8000d2e:	2700      	movs	r7, #0
 8000d30:	e5dc      	b.n	80008ec <__aeabi_dadd+0x188>
 8000d32:	4327      	orrs	r7, r4
 8000d34:	1e7c      	subs	r4, r7, #1
 8000d36:	41a7      	sbcs	r7, r4
 8000d38:	2400      	movs	r4, #0
 8000d3a:	e779      	b.n	8000c30 <__aeabi_dadd+0x4cc>
 8000d3c:	000c      	movs	r4, r1
 8000d3e:	0017      	movs	r7, r2
 8000d40:	4e0e      	ldr	r6, [pc, #56]	; (8000d7c <__aeabi_dadd+0x618>)
 8000d42:	e593      	b.n	800086c <__aeabi_dadd+0x108>
 8000d44:	000c      	movs	r4, r1
 8000d46:	0017      	movs	r7, r2
 8000d48:	e590      	b.n	800086c <__aeabi_dadd+0x108>
 8000d4a:	4656      	mov	r6, sl
 8000d4c:	0023      	movs	r3, r4
 8000d4e:	3e20      	subs	r6, #32
 8000d50:	40f3      	lsrs	r3, r6
 8000d52:	4699      	mov	r9, r3
 8000d54:	4653      	mov	r3, sl
 8000d56:	2b20      	cmp	r3, #32
 8000d58:	d00e      	beq.n	8000d78 <__aeabi_dadd+0x614>
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	4656      	mov	r6, sl
 8000d5e:	1b9b      	subs	r3, r3, r6
 8000d60:	409c      	lsls	r4, r3
 8000d62:	4327      	orrs	r7, r4
 8000d64:	1e7c      	subs	r4, r7, #1
 8000d66:	41a7      	sbcs	r7, r4
 8000d68:	464b      	mov	r3, r9
 8000d6a:	2400      	movs	r4, #0
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	e75f      	b.n	8000c30 <__aeabi_dadd+0x4cc>
 8000d70:	2400      	movs	r4, #0
 8000d72:	e7d2      	b.n	8000d1a <__aeabi_dadd+0x5b6>
 8000d74:	0017      	movs	r7, r2
 8000d76:	e5b2      	b.n	80008de <__aeabi_dadd+0x17a>
 8000d78:	2400      	movs	r4, #0
 8000d7a:	e7f2      	b.n	8000d62 <__aeabi_dadd+0x5fe>
 8000d7c:	000007ff 	.word	0x000007ff
 8000d80:	ff7fffff 	.word	0xff7fffff

08000d84 <__eqdf2>:
 8000d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d86:	464f      	mov	r7, r9
 8000d88:	4646      	mov	r6, r8
 8000d8a:	46d6      	mov	lr, sl
 8000d8c:	005c      	lsls	r4, r3, #1
 8000d8e:	b5c0      	push	{r6, r7, lr}
 8000d90:	031f      	lsls	r7, r3, #12
 8000d92:	0fdb      	lsrs	r3, r3, #31
 8000d94:	469a      	mov	sl, r3
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <__eqdf2+0x70>)
 8000d98:	030e      	lsls	r6, r1, #12
 8000d9a:	004d      	lsls	r5, r1, #1
 8000d9c:	4684      	mov	ip, r0
 8000d9e:	4680      	mov	r8, r0
 8000da0:	0b36      	lsrs	r6, r6, #12
 8000da2:	0d6d      	lsrs	r5, r5, #21
 8000da4:	0fc9      	lsrs	r1, r1, #31
 8000da6:	4691      	mov	r9, r2
 8000da8:	0b3f      	lsrs	r7, r7, #12
 8000daa:	0d64      	lsrs	r4, r4, #21
 8000dac:	2001      	movs	r0, #1
 8000dae:	429d      	cmp	r5, r3
 8000db0:	d008      	beq.n	8000dc4 <__eqdf2+0x40>
 8000db2:	429c      	cmp	r4, r3
 8000db4:	d001      	beq.n	8000dba <__eqdf2+0x36>
 8000db6:	42a5      	cmp	r5, r4
 8000db8:	d00b      	beq.n	8000dd2 <__eqdf2+0x4e>
 8000dba:	bc1c      	pop	{r2, r3, r4}
 8000dbc:	4690      	mov	r8, r2
 8000dbe:	4699      	mov	r9, r3
 8000dc0:	46a2      	mov	sl, r4
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc4:	4663      	mov	r3, ip
 8000dc6:	4333      	orrs	r3, r6
 8000dc8:	d1f7      	bne.n	8000dba <__eqdf2+0x36>
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	d1f5      	bne.n	8000dba <__eqdf2+0x36>
 8000dce:	433a      	orrs	r2, r7
 8000dd0:	d1f3      	bne.n	8000dba <__eqdf2+0x36>
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	42be      	cmp	r6, r7
 8000dd6:	d1f0      	bne.n	8000dba <__eqdf2+0x36>
 8000dd8:	45c8      	cmp	r8, r9
 8000dda:	d1ee      	bne.n	8000dba <__eqdf2+0x36>
 8000ddc:	4551      	cmp	r1, sl
 8000dde:	d007      	beq.n	8000df0 <__eqdf2+0x6c>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d1ea      	bne.n	8000dba <__eqdf2+0x36>
 8000de4:	4663      	mov	r3, ip
 8000de6:	431e      	orrs	r6, r3
 8000de8:	0030      	movs	r0, r6
 8000dea:	1e46      	subs	r6, r0, #1
 8000dec:	41b0      	sbcs	r0, r6
 8000dee:	e7e4      	b.n	8000dba <__eqdf2+0x36>
 8000df0:	2000      	movs	r0, #0
 8000df2:	e7e2      	b.n	8000dba <__eqdf2+0x36>
 8000df4:	000007ff 	.word	0x000007ff

08000df8 <__gedf2>:
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	46de      	mov	lr, fp
 8000dfe:	4657      	mov	r7, sl
 8000e00:	464e      	mov	r6, r9
 8000e02:	b5e0      	push	{r5, r6, r7, lr}
 8000e04:	031f      	lsls	r7, r3, #12
 8000e06:	0b3d      	lsrs	r5, r7, #12
 8000e08:	4f2c      	ldr	r7, [pc, #176]	; (8000ebc <__gedf2+0xc4>)
 8000e0a:	030e      	lsls	r6, r1, #12
 8000e0c:	004c      	lsls	r4, r1, #1
 8000e0e:	46ab      	mov	fp, r5
 8000e10:	005d      	lsls	r5, r3, #1
 8000e12:	4684      	mov	ip, r0
 8000e14:	0b36      	lsrs	r6, r6, #12
 8000e16:	0d64      	lsrs	r4, r4, #21
 8000e18:	0fc9      	lsrs	r1, r1, #31
 8000e1a:	4690      	mov	r8, r2
 8000e1c:	0d6d      	lsrs	r5, r5, #21
 8000e1e:	0fdb      	lsrs	r3, r3, #31
 8000e20:	42bc      	cmp	r4, r7
 8000e22:	d02a      	beq.n	8000e7a <__gedf2+0x82>
 8000e24:	4f25      	ldr	r7, [pc, #148]	; (8000ebc <__gedf2+0xc4>)
 8000e26:	42bd      	cmp	r5, r7
 8000e28:	d02d      	beq.n	8000e86 <__gedf2+0x8e>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d10f      	bne.n	8000e4e <__gedf2+0x56>
 8000e2e:	4330      	orrs	r0, r6
 8000e30:	0007      	movs	r7, r0
 8000e32:	4681      	mov	r9, r0
 8000e34:	4278      	negs	r0, r7
 8000e36:	4178      	adcs	r0, r7
 8000e38:	b2c0      	uxtb	r0, r0
 8000e3a:	2d00      	cmp	r5, #0
 8000e3c:	d117      	bne.n	8000e6e <__gedf2+0x76>
 8000e3e:	465f      	mov	r7, fp
 8000e40:	433a      	orrs	r2, r7
 8000e42:	d114      	bne.n	8000e6e <__gedf2+0x76>
 8000e44:	464b      	mov	r3, r9
 8000e46:	2000      	movs	r0, #0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00a      	beq.n	8000e62 <__gedf2+0x6a>
 8000e4c:	e006      	b.n	8000e5c <__gedf2+0x64>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d102      	bne.n	8000e58 <__gedf2+0x60>
 8000e52:	4658      	mov	r0, fp
 8000e54:	4302      	orrs	r2, r0
 8000e56:	d001      	beq.n	8000e5c <__gedf2+0x64>
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d018      	beq.n	8000e8e <__gedf2+0x96>
 8000e5c:	4248      	negs	r0, r1
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4308      	orrs	r0, r1
 8000e62:	bc3c      	pop	{r2, r3, r4, r5}
 8000e64:	4690      	mov	r8, r2
 8000e66:	4699      	mov	r9, r3
 8000e68:	46a2      	mov	sl, r4
 8000e6a:	46ab      	mov	fp, r5
 8000e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d0f2      	beq.n	8000e58 <__gedf2+0x60>
 8000e72:	2001      	movs	r0, #1
 8000e74:	3b01      	subs	r3, #1
 8000e76:	4318      	orrs	r0, r3
 8000e78:	e7f3      	b.n	8000e62 <__gedf2+0x6a>
 8000e7a:	0037      	movs	r7, r6
 8000e7c:	4307      	orrs	r7, r0
 8000e7e:	d0d1      	beq.n	8000e24 <__gedf2+0x2c>
 8000e80:	2002      	movs	r0, #2
 8000e82:	4240      	negs	r0, r0
 8000e84:	e7ed      	b.n	8000e62 <__gedf2+0x6a>
 8000e86:	465f      	mov	r7, fp
 8000e88:	4317      	orrs	r7, r2
 8000e8a:	d0ce      	beq.n	8000e2a <__gedf2+0x32>
 8000e8c:	e7f8      	b.n	8000e80 <__gedf2+0x88>
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	dce4      	bgt.n	8000e5c <__gedf2+0x64>
 8000e92:	da03      	bge.n	8000e9c <__gedf2+0xa4>
 8000e94:	1e48      	subs	r0, r1, #1
 8000e96:	2101      	movs	r1, #1
 8000e98:	4308      	orrs	r0, r1
 8000e9a:	e7e2      	b.n	8000e62 <__gedf2+0x6a>
 8000e9c:	455e      	cmp	r6, fp
 8000e9e:	d8dd      	bhi.n	8000e5c <__gedf2+0x64>
 8000ea0:	d006      	beq.n	8000eb0 <__gedf2+0xb8>
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	455e      	cmp	r6, fp
 8000ea6:	d2dc      	bcs.n	8000e62 <__gedf2+0x6a>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	1e48      	subs	r0, r1, #1
 8000eac:	4318      	orrs	r0, r3
 8000eae:	e7d8      	b.n	8000e62 <__gedf2+0x6a>
 8000eb0:	45c4      	cmp	ip, r8
 8000eb2:	d8d3      	bhi.n	8000e5c <__gedf2+0x64>
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	45c4      	cmp	ip, r8
 8000eb8:	d3f6      	bcc.n	8000ea8 <__gedf2+0xb0>
 8000eba:	e7d2      	b.n	8000e62 <__gedf2+0x6a>
 8000ebc:	000007ff 	.word	0x000007ff

08000ec0 <__ledf2>:
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	464e      	mov	r6, r9
 8000ec4:	4645      	mov	r5, r8
 8000ec6:	46de      	mov	lr, fp
 8000ec8:	4657      	mov	r7, sl
 8000eca:	005c      	lsls	r4, r3, #1
 8000ecc:	b5e0      	push	{r5, r6, r7, lr}
 8000ece:	031f      	lsls	r7, r3, #12
 8000ed0:	0fdb      	lsrs	r3, r3, #31
 8000ed2:	4699      	mov	r9, r3
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <__ledf2+0xc0>)
 8000ed6:	030e      	lsls	r6, r1, #12
 8000ed8:	004d      	lsls	r5, r1, #1
 8000eda:	0fc9      	lsrs	r1, r1, #31
 8000edc:	4684      	mov	ip, r0
 8000ede:	0b36      	lsrs	r6, r6, #12
 8000ee0:	0d6d      	lsrs	r5, r5, #21
 8000ee2:	468b      	mov	fp, r1
 8000ee4:	4690      	mov	r8, r2
 8000ee6:	0b3f      	lsrs	r7, r7, #12
 8000ee8:	0d64      	lsrs	r4, r4, #21
 8000eea:	429d      	cmp	r5, r3
 8000eec:	d020      	beq.n	8000f30 <__ledf2+0x70>
 8000eee:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <__ledf2+0xc0>)
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	d022      	beq.n	8000f3a <__ledf2+0x7a>
 8000ef4:	2d00      	cmp	r5, #0
 8000ef6:	d112      	bne.n	8000f1e <__ledf2+0x5e>
 8000ef8:	4330      	orrs	r0, r6
 8000efa:	4243      	negs	r3, r0
 8000efc:	4143      	adcs	r3, r0
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2c00      	cmp	r4, #0
 8000f02:	d01f      	beq.n	8000f44 <__ledf2+0x84>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00c      	beq.n	8000f22 <__ledf2+0x62>
 8000f08:	464b      	mov	r3, r9
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	4303      	orrs	r3, r0
 8000f10:	0018      	movs	r0, r3
 8000f12:	bc3c      	pop	{r2, r3, r4, r5}
 8000f14:	4690      	mov	r8, r2
 8000f16:	4699      	mov	r9, r3
 8000f18:	46a2      	mov	sl, r4
 8000f1a:	46ab      	mov	fp, r5
 8000f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	d016      	beq.n	8000f50 <__ledf2+0x90>
 8000f22:	45cb      	cmp	fp, r9
 8000f24:	d017      	beq.n	8000f56 <__ledf2+0x96>
 8000f26:	465b      	mov	r3, fp
 8000f28:	4259      	negs	r1, r3
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	e7ef      	b.n	8000f10 <__ledf2+0x50>
 8000f30:	0031      	movs	r1, r6
 8000f32:	2302      	movs	r3, #2
 8000f34:	4301      	orrs	r1, r0
 8000f36:	d1eb      	bne.n	8000f10 <__ledf2+0x50>
 8000f38:	e7d9      	b.n	8000eee <__ledf2+0x2e>
 8000f3a:	0039      	movs	r1, r7
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	4311      	orrs	r1, r2
 8000f40:	d1e6      	bne.n	8000f10 <__ledf2+0x50>
 8000f42:	e7d7      	b.n	8000ef4 <__ledf2+0x34>
 8000f44:	433a      	orrs	r2, r7
 8000f46:	d1dd      	bne.n	8000f04 <__ledf2+0x44>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d0e0      	beq.n	8000f10 <__ledf2+0x50>
 8000f4e:	e7ea      	b.n	8000f26 <__ledf2+0x66>
 8000f50:	433a      	orrs	r2, r7
 8000f52:	d1e6      	bne.n	8000f22 <__ledf2+0x62>
 8000f54:	e7e7      	b.n	8000f26 <__ledf2+0x66>
 8000f56:	42a5      	cmp	r5, r4
 8000f58:	dce5      	bgt.n	8000f26 <__ledf2+0x66>
 8000f5a:	db05      	blt.n	8000f68 <__ledf2+0xa8>
 8000f5c:	42be      	cmp	r6, r7
 8000f5e:	d8e2      	bhi.n	8000f26 <__ledf2+0x66>
 8000f60:	d007      	beq.n	8000f72 <__ledf2+0xb2>
 8000f62:	2300      	movs	r3, #0
 8000f64:	42be      	cmp	r6, r7
 8000f66:	d2d3      	bcs.n	8000f10 <__ledf2+0x50>
 8000f68:	4659      	mov	r1, fp
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	3901      	subs	r1, #1
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	e7ce      	b.n	8000f10 <__ledf2+0x50>
 8000f72:	45c4      	cmp	ip, r8
 8000f74:	d8d7      	bhi.n	8000f26 <__ledf2+0x66>
 8000f76:	2300      	movs	r3, #0
 8000f78:	45c4      	cmp	ip, r8
 8000f7a:	d3f5      	bcc.n	8000f68 <__ledf2+0xa8>
 8000f7c:	e7c8      	b.n	8000f10 <__ledf2+0x50>
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	000007ff 	.word	0x000007ff

08000f84 <__aeabi_dmul>:
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	4657      	mov	r7, sl
 8000f88:	4645      	mov	r5, r8
 8000f8a:	46de      	mov	lr, fp
 8000f8c:	464e      	mov	r6, r9
 8000f8e:	b5e0      	push	{r5, r6, r7, lr}
 8000f90:	030c      	lsls	r4, r1, #12
 8000f92:	4698      	mov	r8, r3
 8000f94:	004e      	lsls	r6, r1, #1
 8000f96:	0b23      	lsrs	r3, r4, #12
 8000f98:	b087      	sub	sp, #28
 8000f9a:	0007      	movs	r7, r0
 8000f9c:	4692      	mov	sl, r2
 8000f9e:	469b      	mov	fp, r3
 8000fa0:	0d76      	lsrs	r6, r6, #21
 8000fa2:	0fcd      	lsrs	r5, r1, #31
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d06b      	beq.n	8001080 <__aeabi_dmul+0xfc>
 8000fa8:	4b6d      	ldr	r3, [pc, #436]	; (8001160 <__aeabi_dmul+0x1dc>)
 8000faa:	429e      	cmp	r6, r3
 8000fac:	d035      	beq.n	800101a <__aeabi_dmul+0x96>
 8000fae:	2480      	movs	r4, #128	; 0x80
 8000fb0:	465b      	mov	r3, fp
 8000fb2:	0f42      	lsrs	r2, r0, #29
 8000fb4:	0424      	lsls	r4, r4, #16
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4314      	orrs	r4, r2
 8000fba:	431c      	orrs	r4, r3
 8000fbc:	00c3      	lsls	r3, r0, #3
 8000fbe:	4699      	mov	r9, r3
 8000fc0:	4b68      	ldr	r3, [pc, #416]	; (8001164 <__aeabi_dmul+0x1e0>)
 8000fc2:	46a3      	mov	fp, r4
 8000fc4:	469c      	mov	ip, r3
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	4466      	add	r6, ip
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	4643      	mov	r3, r8
 8000fd0:	031c      	lsls	r4, r3, #12
 8000fd2:	005a      	lsls	r2, r3, #1
 8000fd4:	0fdb      	lsrs	r3, r3, #31
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	0b24      	lsrs	r4, r4, #12
 8000fda:	0d52      	lsrs	r2, r2, #21
 8000fdc:	4698      	mov	r8, r3
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dmul+0x5e>
 8000fe0:	e076      	b.n	80010d0 <__aeabi_dmul+0x14c>
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <__aeabi_dmul+0x1dc>)
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d06d      	beq.n	80010c4 <__aeabi_dmul+0x140>
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	0f41      	lsrs	r1, r0, #29
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	495c      	ldr	r1, [pc, #368]	; (8001164 <__aeabi_dmul+0x1e0>)
 8000ff2:	00e4      	lsls	r4, r4, #3
 8000ff4:	468c      	mov	ip, r1
 8000ff6:	431c      	orrs	r4, r3
 8000ff8:	00c3      	lsls	r3, r0, #3
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	4462      	add	r2, ip
 8000ffe:	4641      	mov	r1, r8
 8001000:	18b6      	adds	r6, r6, r2
 8001002:	4069      	eors	r1, r5
 8001004:	1c72      	adds	r2, r6, #1
 8001006:	9101      	str	r1, [sp, #4]
 8001008:	4694      	mov	ip, r2
 800100a:	4307      	orrs	r7, r0
 800100c:	2f0f      	cmp	r7, #15
 800100e:	d900      	bls.n	8001012 <__aeabi_dmul+0x8e>
 8001010:	e0b0      	b.n	8001174 <__aeabi_dmul+0x1f0>
 8001012:	4a55      	ldr	r2, [pc, #340]	; (8001168 <__aeabi_dmul+0x1e4>)
 8001014:	00bf      	lsls	r7, r7, #2
 8001016:	59d2      	ldr	r2, [r2, r7]
 8001018:	4697      	mov	pc, r2
 800101a:	465b      	mov	r3, fp
 800101c:	4303      	orrs	r3, r0
 800101e:	4699      	mov	r9, r3
 8001020:	d000      	beq.n	8001024 <__aeabi_dmul+0xa0>
 8001022:	e087      	b.n	8001134 <__aeabi_dmul+0x1b0>
 8001024:	2300      	movs	r3, #0
 8001026:	469b      	mov	fp, r3
 8001028:	3302      	adds	r3, #2
 800102a:	2708      	movs	r7, #8
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	e7ce      	b.n	8000fce <__aeabi_dmul+0x4a>
 8001030:	4642      	mov	r2, r8
 8001032:	9201      	str	r2, [sp, #4]
 8001034:	2802      	cmp	r0, #2
 8001036:	d067      	beq.n	8001108 <__aeabi_dmul+0x184>
 8001038:	2803      	cmp	r0, #3
 800103a:	d100      	bne.n	800103e <__aeabi_dmul+0xba>
 800103c:	e20e      	b.n	800145c <__aeabi_dmul+0x4d8>
 800103e:	2801      	cmp	r0, #1
 8001040:	d000      	beq.n	8001044 <__aeabi_dmul+0xc0>
 8001042:	e162      	b.n	800130a <__aeabi_dmul+0x386>
 8001044:	2300      	movs	r3, #0
 8001046:	2400      	movs	r4, #0
 8001048:	2200      	movs	r2, #0
 800104a:	4699      	mov	r9, r3
 800104c:	9901      	ldr	r1, [sp, #4]
 800104e:	4001      	ands	r1, r0
 8001050:	b2cd      	uxtb	r5, r1
 8001052:	2100      	movs	r1, #0
 8001054:	0312      	lsls	r2, r2, #12
 8001056:	0d0b      	lsrs	r3, r1, #20
 8001058:	0b12      	lsrs	r2, r2, #12
 800105a:	051b      	lsls	r3, r3, #20
 800105c:	4313      	orrs	r3, r2
 800105e:	4a43      	ldr	r2, [pc, #268]	; (800116c <__aeabi_dmul+0x1e8>)
 8001060:	0524      	lsls	r4, r4, #20
 8001062:	4013      	ands	r3, r2
 8001064:	431c      	orrs	r4, r3
 8001066:	0064      	lsls	r4, r4, #1
 8001068:	07ed      	lsls	r5, r5, #31
 800106a:	0864      	lsrs	r4, r4, #1
 800106c:	432c      	orrs	r4, r5
 800106e:	4648      	mov	r0, r9
 8001070:	0021      	movs	r1, r4
 8001072:	b007      	add	sp, #28
 8001074:	bc3c      	pop	{r2, r3, r4, r5}
 8001076:	4690      	mov	r8, r2
 8001078:	4699      	mov	r9, r3
 800107a:	46a2      	mov	sl, r4
 800107c:	46ab      	mov	fp, r5
 800107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001080:	4303      	orrs	r3, r0
 8001082:	4699      	mov	r9, r3
 8001084:	d04f      	beq.n	8001126 <__aeabi_dmul+0x1a2>
 8001086:	465b      	mov	r3, fp
 8001088:	2b00      	cmp	r3, #0
 800108a:	d100      	bne.n	800108e <__aeabi_dmul+0x10a>
 800108c:	e189      	b.n	80013a2 <__aeabi_dmul+0x41e>
 800108e:	4658      	mov	r0, fp
 8001090:	f000 fdd6 	bl	8001c40 <__clzsi2>
 8001094:	0003      	movs	r3, r0
 8001096:	3b0b      	subs	r3, #11
 8001098:	2b1c      	cmp	r3, #28
 800109a:	dd00      	ble.n	800109e <__aeabi_dmul+0x11a>
 800109c:	e17a      	b.n	8001394 <__aeabi_dmul+0x410>
 800109e:	221d      	movs	r2, #29
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	003a      	movs	r2, r7
 80010a4:	0001      	movs	r1, r0
 80010a6:	465c      	mov	r4, fp
 80010a8:	40da      	lsrs	r2, r3
 80010aa:	3908      	subs	r1, #8
 80010ac:	408c      	lsls	r4, r1
 80010ae:	0013      	movs	r3, r2
 80010b0:	408f      	lsls	r7, r1
 80010b2:	4323      	orrs	r3, r4
 80010b4:	469b      	mov	fp, r3
 80010b6:	46b9      	mov	r9, r7
 80010b8:	2300      	movs	r3, #0
 80010ba:	4e2d      	ldr	r6, [pc, #180]	; (8001170 <__aeabi_dmul+0x1ec>)
 80010bc:	2700      	movs	r7, #0
 80010be:	1a36      	subs	r6, r6, r0
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	e784      	b.n	8000fce <__aeabi_dmul+0x4a>
 80010c4:	4653      	mov	r3, sl
 80010c6:	4323      	orrs	r3, r4
 80010c8:	d12a      	bne.n	8001120 <__aeabi_dmul+0x19c>
 80010ca:	2400      	movs	r4, #0
 80010cc:	2002      	movs	r0, #2
 80010ce:	e796      	b.n	8000ffe <__aeabi_dmul+0x7a>
 80010d0:	4653      	mov	r3, sl
 80010d2:	4323      	orrs	r3, r4
 80010d4:	d020      	beq.n	8001118 <__aeabi_dmul+0x194>
 80010d6:	2c00      	cmp	r4, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_dmul+0x158>
 80010da:	e157      	b.n	800138c <__aeabi_dmul+0x408>
 80010dc:	0020      	movs	r0, r4
 80010de:	f000 fdaf 	bl	8001c40 <__clzsi2>
 80010e2:	0003      	movs	r3, r0
 80010e4:	3b0b      	subs	r3, #11
 80010e6:	2b1c      	cmp	r3, #28
 80010e8:	dd00      	ble.n	80010ec <__aeabi_dmul+0x168>
 80010ea:	e149      	b.n	8001380 <__aeabi_dmul+0x3fc>
 80010ec:	211d      	movs	r1, #29
 80010ee:	1acb      	subs	r3, r1, r3
 80010f0:	4651      	mov	r1, sl
 80010f2:	0002      	movs	r2, r0
 80010f4:	40d9      	lsrs	r1, r3
 80010f6:	4653      	mov	r3, sl
 80010f8:	3a08      	subs	r2, #8
 80010fa:	4094      	lsls	r4, r2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	430c      	orrs	r4, r1
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <__aeabi_dmul+0x1ec>)
 8001102:	1a12      	subs	r2, r2, r0
 8001104:	2000      	movs	r0, #0
 8001106:	e77a      	b.n	8000ffe <__aeabi_dmul+0x7a>
 8001108:	2501      	movs	r5, #1
 800110a:	9b01      	ldr	r3, [sp, #4]
 800110c:	4c14      	ldr	r4, [pc, #80]	; (8001160 <__aeabi_dmul+0x1dc>)
 800110e:	401d      	ands	r5, r3
 8001110:	2300      	movs	r3, #0
 8001112:	2200      	movs	r2, #0
 8001114:	4699      	mov	r9, r3
 8001116:	e79c      	b.n	8001052 <__aeabi_dmul+0xce>
 8001118:	2400      	movs	r4, #0
 800111a:	2200      	movs	r2, #0
 800111c:	2001      	movs	r0, #1
 800111e:	e76e      	b.n	8000ffe <__aeabi_dmul+0x7a>
 8001120:	4653      	mov	r3, sl
 8001122:	2003      	movs	r0, #3
 8001124:	e76b      	b.n	8000ffe <__aeabi_dmul+0x7a>
 8001126:	2300      	movs	r3, #0
 8001128:	469b      	mov	fp, r3
 800112a:	3301      	adds	r3, #1
 800112c:	2704      	movs	r7, #4
 800112e:	2600      	movs	r6, #0
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	e74c      	b.n	8000fce <__aeabi_dmul+0x4a>
 8001134:	2303      	movs	r3, #3
 8001136:	4681      	mov	r9, r0
 8001138:	270c      	movs	r7, #12
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	e747      	b.n	8000fce <__aeabi_dmul+0x4a>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	2300      	movs	r3, #0
 8001142:	2500      	movs	r5, #0
 8001144:	0312      	lsls	r2, r2, #12
 8001146:	4699      	mov	r9, r3
 8001148:	4c05      	ldr	r4, [pc, #20]	; (8001160 <__aeabi_dmul+0x1dc>)
 800114a:	e782      	b.n	8001052 <__aeabi_dmul+0xce>
 800114c:	465c      	mov	r4, fp
 800114e:	464b      	mov	r3, r9
 8001150:	9802      	ldr	r0, [sp, #8]
 8001152:	e76f      	b.n	8001034 <__aeabi_dmul+0xb0>
 8001154:	465c      	mov	r4, fp
 8001156:	464b      	mov	r3, r9
 8001158:	9501      	str	r5, [sp, #4]
 800115a:	9802      	ldr	r0, [sp, #8]
 800115c:	e76a      	b.n	8001034 <__aeabi_dmul+0xb0>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	000007ff 	.word	0x000007ff
 8001164:	fffffc01 	.word	0xfffffc01
 8001168:	080052d8 	.word	0x080052d8
 800116c:	800fffff 	.word	0x800fffff
 8001170:	fffffc0d 	.word	0xfffffc0d
 8001174:	464a      	mov	r2, r9
 8001176:	4649      	mov	r1, r9
 8001178:	0c17      	lsrs	r7, r2, #16
 800117a:	0c1a      	lsrs	r2, r3, #16
 800117c:	041b      	lsls	r3, r3, #16
 800117e:	0c1b      	lsrs	r3, r3, #16
 8001180:	0408      	lsls	r0, r1, #16
 8001182:	0019      	movs	r1, r3
 8001184:	0c00      	lsrs	r0, r0, #16
 8001186:	4341      	muls	r1, r0
 8001188:	0015      	movs	r5, r2
 800118a:	4688      	mov	r8, r1
 800118c:	0019      	movs	r1, r3
 800118e:	437d      	muls	r5, r7
 8001190:	4379      	muls	r1, r7
 8001192:	9503      	str	r5, [sp, #12]
 8001194:	4689      	mov	r9, r1
 8001196:	0029      	movs	r1, r5
 8001198:	0015      	movs	r5, r2
 800119a:	4345      	muls	r5, r0
 800119c:	444d      	add	r5, r9
 800119e:	9502      	str	r5, [sp, #8]
 80011a0:	4645      	mov	r5, r8
 80011a2:	0c2d      	lsrs	r5, r5, #16
 80011a4:	46aa      	mov	sl, r5
 80011a6:	9d02      	ldr	r5, [sp, #8]
 80011a8:	4455      	add	r5, sl
 80011aa:	45a9      	cmp	r9, r5
 80011ac:	d906      	bls.n	80011bc <__aeabi_dmul+0x238>
 80011ae:	468a      	mov	sl, r1
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	0249      	lsls	r1, r1, #9
 80011b4:	4689      	mov	r9, r1
 80011b6:	44ca      	add	sl, r9
 80011b8:	4651      	mov	r1, sl
 80011ba:	9103      	str	r1, [sp, #12]
 80011bc:	0c29      	lsrs	r1, r5, #16
 80011be:	9104      	str	r1, [sp, #16]
 80011c0:	4641      	mov	r1, r8
 80011c2:	0409      	lsls	r1, r1, #16
 80011c4:	042d      	lsls	r5, r5, #16
 80011c6:	0c09      	lsrs	r1, r1, #16
 80011c8:	4688      	mov	r8, r1
 80011ca:	0029      	movs	r1, r5
 80011cc:	0c25      	lsrs	r5, r4, #16
 80011ce:	0424      	lsls	r4, r4, #16
 80011d0:	4441      	add	r1, r8
 80011d2:	0c24      	lsrs	r4, r4, #16
 80011d4:	9105      	str	r1, [sp, #20]
 80011d6:	0021      	movs	r1, r4
 80011d8:	4341      	muls	r1, r0
 80011da:	4688      	mov	r8, r1
 80011dc:	0021      	movs	r1, r4
 80011de:	4379      	muls	r1, r7
 80011e0:	468a      	mov	sl, r1
 80011e2:	4368      	muls	r0, r5
 80011e4:	4641      	mov	r1, r8
 80011e6:	4450      	add	r0, sl
 80011e8:	4681      	mov	r9, r0
 80011ea:	0c08      	lsrs	r0, r1, #16
 80011ec:	4448      	add	r0, r9
 80011ee:	436f      	muls	r7, r5
 80011f0:	4582      	cmp	sl, r0
 80011f2:	d903      	bls.n	80011fc <__aeabi_dmul+0x278>
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	0249      	lsls	r1, r1, #9
 80011f8:	4689      	mov	r9, r1
 80011fa:	444f      	add	r7, r9
 80011fc:	0c01      	lsrs	r1, r0, #16
 80011fe:	4689      	mov	r9, r1
 8001200:	0039      	movs	r1, r7
 8001202:	4449      	add	r1, r9
 8001204:	9102      	str	r1, [sp, #8]
 8001206:	4641      	mov	r1, r8
 8001208:	040f      	lsls	r7, r1, #16
 800120a:	9904      	ldr	r1, [sp, #16]
 800120c:	0c3f      	lsrs	r7, r7, #16
 800120e:	4688      	mov	r8, r1
 8001210:	0400      	lsls	r0, r0, #16
 8001212:	19c0      	adds	r0, r0, r7
 8001214:	4480      	add	r8, r0
 8001216:	4641      	mov	r1, r8
 8001218:	9104      	str	r1, [sp, #16]
 800121a:	4659      	mov	r1, fp
 800121c:	0c0f      	lsrs	r7, r1, #16
 800121e:	0409      	lsls	r1, r1, #16
 8001220:	0c09      	lsrs	r1, r1, #16
 8001222:	4688      	mov	r8, r1
 8001224:	4359      	muls	r1, r3
 8001226:	468a      	mov	sl, r1
 8001228:	0039      	movs	r1, r7
 800122a:	4351      	muls	r1, r2
 800122c:	4689      	mov	r9, r1
 800122e:	4641      	mov	r1, r8
 8001230:	434a      	muls	r2, r1
 8001232:	4651      	mov	r1, sl
 8001234:	0c09      	lsrs	r1, r1, #16
 8001236:	468b      	mov	fp, r1
 8001238:	437b      	muls	r3, r7
 800123a:	18d2      	adds	r2, r2, r3
 800123c:	445a      	add	r2, fp
 800123e:	4293      	cmp	r3, r2
 8001240:	d903      	bls.n	800124a <__aeabi_dmul+0x2c6>
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	025b      	lsls	r3, r3, #9
 8001246:	469b      	mov	fp, r3
 8001248:	44d9      	add	r9, fp
 800124a:	4651      	mov	r1, sl
 800124c:	0409      	lsls	r1, r1, #16
 800124e:	0c09      	lsrs	r1, r1, #16
 8001250:	468a      	mov	sl, r1
 8001252:	4641      	mov	r1, r8
 8001254:	4361      	muls	r1, r4
 8001256:	437c      	muls	r4, r7
 8001258:	0c13      	lsrs	r3, r2, #16
 800125a:	0412      	lsls	r2, r2, #16
 800125c:	444b      	add	r3, r9
 800125e:	4452      	add	r2, sl
 8001260:	46a1      	mov	r9, r4
 8001262:	468a      	mov	sl, r1
 8001264:	003c      	movs	r4, r7
 8001266:	4641      	mov	r1, r8
 8001268:	436c      	muls	r4, r5
 800126a:	434d      	muls	r5, r1
 800126c:	4651      	mov	r1, sl
 800126e:	444d      	add	r5, r9
 8001270:	0c0f      	lsrs	r7, r1, #16
 8001272:	197d      	adds	r5, r7, r5
 8001274:	45a9      	cmp	r9, r5
 8001276:	d903      	bls.n	8001280 <__aeabi_dmul+0x2fc>
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	0249      	lsls	r1, r1, #9
 800127c:	4688      	mov	r8, r1
 800127e:	4444      	add	r4, r8
 8001280:	9f04      	ldr	r7, [sp, #16]
 8001282:	9903      	ldr	r1, [sp, #12]
 8001284:	46b8      	mov	r8, r7
 8001286:	4441      	add	r1, r8
 8001288:	468b      	mov	fp, r1
 800128a:	4583      	cmp	fp, r0
 800128c:	4180      	sbcs	r0, r0
 800128e:	4241      	negs	r1, r0
 8001290:	4688      	mov	r8, r1
 8001292:	4651      	mov	r1, sl
 8001294:	0408      	lsls	r0, r1, #16
 8001296:	042f      	lsls	r7, r5, #16
 8001298:	0c00      	lsrs	r0, r0, #16
 800129a:	183f      	adds	r7, r7, r0
 800129c:	4658      	mov	r0, fp
 800129e:	9902      	ldr	r1, [sp, #8]
 80012a0:	1810      	adds	r0, r2, r0
 80012a2:	4689      	mov	r9, r1
 80012a4:	4290      	cmp	r0, r2
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	444f      	add	r7, r9
 80012aa:	46ba      	mov	sl, r7
 80012ac:	4252      	negs	r2, r2
 80012ae:	4699      	mov	r9, r3
 80012b0:	4693      	mov	fp, r2
 80012b2:	44c2      	add	sl, r8
 80012b4:	44d1      	add	r9, sl
 80012b6:	44cb      	add	fp, r9
 80012b8:	428f      	cmp	r7, r1
 80012ba:	41bf      	sbcs	r7, r7
 80012bc:	45c2      	cmp	sl, r8
 80012be:	4189      	sbcs	r1, r1
 80012c0:	4599      	cmp	r9, r3
 80012c2:	419b      	sbcs	r3, r3
 80012c4:	4593      	cmp	fp, r2
 80012c6:	4192      	sbcs	r2, r2
 80012c8:	427f      	negs	r7, r7
 80012ca:	4249      	negs	r1, r1
 80012cc:	0c2d      	lsrs	r5, r5, #16
 80012ce:	4252      	negs	r2, r2
 80012d0:	430f      	orrs	r7, r1
 80012d2:	425b      	negs	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	197f      	adds	r7, r7, r5
 80012d8:	18ff      	adds	r7, r7, r3
 80012da:	465b      	mov	r3, fp
 80012dc:	193c      	adds	r4, r7, r4
 80012de:	0ddb      	lsrs	r3, r3, #23
 80012e0:	9a05      	ldr	r2, [sp, #20]
 80012e2:	0264      	lsls	r4, r4, #9
 80012e4:	431c      	orrs	r4, r3
 80012e6:	0243      	lsls	r3, r0, #9
 80012e8:	4313      	orrs	r3, r2
 80012ea:	1e5d      	subs	r5, r3, #1
 80012ec:	41ab      	sbcs	r3, r5
 80012ee:	465a      	mov	r2, fp
 80012f0:	0dc0      	lsrs	r0, r0, #23
 80012f2:	4303      	orrs	r3, r0
 80012f4:	0252      	lsls	r2, r2, #9
 80012f6:	4313      	orrs	r3, r2
 80012f8:	01e2      	lsls	r2, r4, #7
 80012fa:	d556      	bpl.n	80013aa <__aeabi_dmul+0x426>
 80012fc:	2001      	movs	r0, #1
 80012fe:	085a      	lsrs	r2, r3, #1
 8001300:	4003      	ands	r3, r0
 8001302:	4313      	orrs	r3, r2
 8001304:	07e2      	lsls	r2, r4, #31
 8001306:	4313      	orrs	r3, r2
 8001308:	0864      	lsrs	r4, r4, #1
 800130a:	485a      	ldr	r0, [pc, #360]	; (8001474 <__aeabi_dmul+0x4f0>)
 800130c:	4460      	add	r0, ip
 800130e:	2800      	cmp	r0, #0
 8001310:	dd4d      	ble.n	80013ae <__aeabi_dmul+0x42a>
 8001312:	075a      	lsls	r2, r3, #29
 8001314:	d009      	beq.n	800132a <__aeabi_dmul+0x3a6>
 8001316:	220f      	movs	r2, #15
 8001318:	401a      	ands	r2, r3
 800131a:	2a04      	cmp	r2, #4
 800131c:	d005      	beq.n	800132a <__aeabi_dmul+0x3a6>
 800131e:	1d1a      	adds	r2, r3, #4
 8001320:	429a      	cmp	r2, r3
 8001322:	419b      	sbcs	r3, r3
 8001324:	425b      	negs	r3, r3
 8001326:	18e4      	adds	r4, r4, r3
 8001328:	0013      	movs	r3, r2
 800132a:	01e2      	lsls	r2, r4, #7
 800132c:	d504      	bpl.n	8001338 <__aeabi_dmul+0x3b4>
 800132e:	2080      	movs	r0, #128	; 0x80
 8001330:	4a51      	ldr	r2, [pc, #324]	; (8001478 <__aeabi_dmul+0x4f4>)
 8001332:	00c0      	lsls	r0, r0, #3
 8001334:	4014      	ands	r4, r2
 8001336:	4460      	add	r0, ip
 8001338:	4a50      	ldr	r2, [pc, #320]	; (800147c <__aeabi_dmul+0x4f8>)
 800133a:	4290      	cmp	r0, r2
 800133c:	dd00      	ble.n	8001340 <__aeabi_dmul+0x3bc>
 800133e:	e6e3      	b.n	8001108 <__aeabi_dmul+0x184>
 8001340:	2501      	movs	r5, #1
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	0762      	lsls	r2, r4, #29
 8001346:	431a      	orrs	r2, r3
 8001348:	0264      	lsls	r4, r4, #9
 800134a:	9b01      	ldr	r3, [sp, #4]
 800134c:	4691      	mov	r9, r2
 800134e:	0b22      	lsrs	r2, r4, #12
 8001350:	0544      	lsls	r4, r0, #21
 8001352:	0d64      	lsrs	r4, r4, #21
 8001354:	401d      	ands	r5, r3
 8001356:	e67c      	b.n	8001052 <__aeabi_dmul+0xce>
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	4659      	mov	r1, fp
 800135c:	0312      	lsls	r2, r2, #12
 800135e:	4211      	tst	r1, r2
 8001360:	d008      	beq.n	8001374 <__aeabi_dmul+0x3f0>
 8001362:	4214      	tst	r4, r2
 8001364:	d106      	bne.n	8001374 <__aeabi_dmul+0x3f0>
 8001366:	4322      	orrs	r2, r4
 8001368:	0312      	lsls	r2, r2, #12
 800136a:	0b12      	lsrs	r2, r2, #12
 800136c:	4645      	mov	r5, r8
 800136e:	4699      	mov	r9, r3
 8001370:	4c43      	ldr	r4, [pc, #268]	; (8001480 <__aeabi_dmul+0x4fc>)
 8001372:	e66e      	b.n	8001052 <__aeabi_dmul+0xce>
 8001374:	465b      	mov	r3, fp
 8001376:	431a      	orrs	r2, r3
 8001378:	0312      	lsls	r2, r2, #12
 800137a:	0b12      	lsrs	r2, r2, #12
 800137c:	4c40      	ldr	r4, [pc, #256]	; (8001480 <__aeabi_dmul+0x4fc>)
 800137e:	e668      	b.n	8001052 <__aeabi_dmul+0xce>
 8001380:	0003      	movs	r3, r0
 8001382:	4654      	mov	r4, sl
 8001384:	3b28      	subs	r3, #40	; 0x28
 8001386:	409c      	lsls	r4, r3
 8001388:	2300      	movs	r3, #0
 800138a:	e6b9      	b.n	8001100 <__aeabi_dmul+0x17c>
 800138c:	f000 fc58 	bl	8001c40 <__clzsi2>
 8001390:	3020      	adds	r0, #32
 8001392:	e6a6      	b.n	80010e2 <__aeabi_dmul+0x15e>
 8001394:	0003      	movs	r3, r0
 8001396:	3b28      	subs	r3, #40	; 0x28
 8001398:	409f      	lsls	r7, r3
 800139a:	2300      	movs	r3, #0
 800139c:	46bb      	mov	fp, r7
 800139e:	4699      	mov	r9, r3
 80013a0:	e68a      	b.n	80010b8 <__aeabi_dmul+0x134>
 80013a2:	f000 fc4d 	bl	8001c40 <__clzsi2>
 80013a6:	3020      	adds	r0, #32
 80013a8:	e674      	b.n	8001094 <__aeabi_dmul+0x110>
 80013aa:	46b4      	mov	ip, r6
 80013ac:	e7ad      	b.n	800130a <__aeabi_dmul+0x386>
 80013ae:	2501      	movs	r5, #1
 80013b0:	1a2a      	subs	r2, r5, r0
 80013b2:	2a38      	cmp	r2, #56	; 0x38
 80013b4:	dd06      	ble.n	80013c4 <__aeabi_dmul+0x440>
 80013b6:	9b01      	ldr	r3, [sp, #4]
 80013b8:	2400      	movs	r4, #0
 80013ba:	401d      	ands	r5, r3
 80013bc:	2300      	movs	r3, #0
 80013be:	2200      	movs	r2, #0
 80013c0:	4699      	mov	r9, r3
 80013c2:	e646      	b.n	8001052 <__aeabi_dmul+0xce>
 80013c4:	2a1f      	cmp	r2, #31
 80013c6:	dc21      	bgt.n	800140c <__aeabi_dmul+0x488>
 80013c8:	2520      	movs	r5, #32
 80013ca:	0020      	movs	r0, r4
 80013cc:	1aad      	subs	r5, r5, r2
 80013ce:	001e      	movs	r6, r3
 80013d0:	40ab      	lsls	r3, r5
 80013d2:	40a8      	lsls	r0, r5
 80013d4:	40d6      	lsrs	r6, r2
 80013d6:	1e5d      	subs	r5, r3, #1
 80013d8:	41ab      	sbcs	r3, r5
 80013da:	4330      	orrs	r0, r6
 80013dc:	4318      	orrs	r0, r3
 80013de:	40d4      	lsrs	r4, r2
 80013e0:	0743      	lsls	r3, r0, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_dmul+0x474>
 80013e4:	230f      	movs	r3, #15
 80013e6:	4003      	ands	r3, r0
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_dmul+0x474>
 80013ec:	0003      	movs	r3, r0
 80013ee:	1d18      	adds	r0, r3, #4
 80013f0:	4298      	cmp	r0, r3
 80013f2:	419b      	sbcs	r3, r3
 80013f4:	425b      	negs	r3, r3
 80013f6:	18e4      	adds	r4, r4, r3
 80013f8:	0223      	lsls	r3, r4, #8
 80013fa:	d521      	bpl.n	8001440 <__aeabi_dmul+0x4bc>
 80013fc:	2501      	movs	r5, #1
 80013fe:	9b01      	ldr	r3, [sp, #4]
 8001400:	2401      	movs	r4, #1
 8001402:	401d      	ands	r5, r3
 8001404:	2300      	movs	r3, #0
 8001406:	2200      	movs	r2, #0
 8001408:	4699      	mov	r9, r3
 800140a:	e622      	b.n	8001052 <__aeabi_dmul+0xce>
 800140c:	251f      	movs	r5, #31
 800140e:	0021      	movs	r1, r4
 8001410:	426d      	negs	r5, r5
 8001412:	1a28      	subs	r0, r5, r0
 8001414:	40c1      	lsrs	r1, r0
 8001416:	0008      	movs	r0, r1
 8001418:	2a20      	cmp	r2, #32
 800141a:	d01d      	beq.n	8001458 <__aeabi_dmul+0x4d4>
 800141c:	355f      	adds	r5, #95	; 0x5f
 800141e:	1aaa      	subs	r2, r5, r2
 8001420:	4094      	lsls	r4, r2
 8001422:	4323      	orrs	r3, r4
 8001424:	1e5c      	subs	r4, r3, #1
 8001426:	41a3      	sbcs	r3, r4
 8001428:	2507      	movs	r5, #7
 800142a:	4303      	orrs	r3, r0
 800142c:	401d      	ands	r5, r3
 800142e:	2200      	movs	r2, #0
 8001430:	2d00      	cmp	r5, #0
 8001432:	d009      	beq.n	8001448 <__aeabi_dmul+0x4c4>
 8001434:	220f      	movs	r2, #15
 8001436:	2400      	movs	r4, #0
 8001438:	401a      	ands	r2, r3
 800143a:	0018      	movs	r0, r3
 800143c:	2a04      	cmp	r2, #4
 800143e:	d1d6      	bne.n	80013ee <__aeabi_dmul+0x46a>
 8001440:	0003      	movs	r3, r0
 8001442:	0765      	lsls	r5, r4, #29
 8001444:	0264      	lsls	r4, r4, #9
 8001446:	0b22      	lsrs	r2, r4, #12
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	432b      	orrs	r3, r5
 800144c:	2501      	movs	r5, #1
 800144e:	4699      	mov	r9, r3
 8001450:	9b01      	ldr	r3, [sp, #4]
 8001452:	2400      	movs	r4, #0
 8001454:	401d      	ands	r5, r3
 8001456:	e5fc      	b.n	8001052 <__aeabi_dmul+0xce>
 8001458:	2400      	movs	r4, #0
 800145a:	e7e2      	b.n	8001422 <__aeabi_dmul+0x49e>
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	2501      	movs	r5, #1
 8001460:	0312      	lsls	r2, r2, #12
 8001462:	4322      	orrs	r2, r4
 8001464:	9901      	ldr	r1, [sp, #4]
 8001466:	0312      	lsls	r2, r2, #12
 8001468:	0b12      	lsrs	r2, r2, #12
 800146a:	400d      	ands	r5, r1
 800146c:	4699      	mov	r9, r3
 800146e:	4c04      	ldr	r4, [pc, #16]	; (8001480 <__aeabi_dmul+0x4fc>)
 8001470:	e5ef      	b.n	8001052 <__aeabi_dmul+0xce>
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	000003ff 	.word	0x000003ff
 8001478:	feffffff 	.word	0xfeffffff
 800147c:	000007fe 	.word	0x000007fe
 8001480:	000007ff 	.word	0x000007ff

08001484 <__aeabi_dsub>:
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	4646      	mov	r6, r8
 8001488:	46d6      	mov	lr, sl
 800148a:	464f      	mov	r7, r9
 800148c:	030c      	lsls	r4, r1, #12
 800148e:	b5c0      	push	{r6, r7, lr}
 8001490:	0fcd      	lsrs	r5, r1, #31
 8001492:	004e      	lsls	r6, r1, #1
 8001494:	0a61      	lsrs	r1, r4, #9
 8001496:	0f44      	lsrs	r4, r0, #29
 8001498:	430c      	orrs	r4, r1
 800149a:	00c1      	lsls	r1, r0, #3
 800149c:	0058      	lsls	r0, r3, #1
 800149e:	0d40      	lsrs	r0, r0, #21
 80014a0:	4684      	mov	ip, r0
 80014a2:	468a      	mov	sl, r1
 80014a4:	000f      	movs	r7, r1
 80014a6:	0319      	lsls	r1, r3, #12
 80014a8:	0f50      	lsrs	r0, r2, #29
 80014aa:	0a49      	lsrs	r1, r1, #9
 80014ac:	4301      	orrs	r1, r0
 80014ae:	48c6      	ldr	r0, [pc, #792]	; (80017c8 <__aeabi_dsub+0x344>)
 80014b0:	0d76      	lsrs	r6, r6, #21
 80014b2:	46a8      	mov	r8, r5
 80014b4:	0fdb      	lsrs	r3, r3, #31
 80014b6:	00d2      	lsls	r2, r2, #3
 80014b8:	4584      	cmp	ip, r0
 80014ba:	d100      	bne.n	80014be <__aeabi_dsub+0x3a>
 80014bc:	e0d8      	b.n	8001670 <__aeabi_dsub+0x1ec>
 80014be:	2001      	movs	r0, #1
 80014c0:	4043      	eors	r3, r0
 80014c2:	42ab      	cmp	r3, r5
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dsub+0x44>
 80014c6:	e0a6      	b.n	8001616 <__aeabi_dsub+0x192>
 80014c8:	4660      	mov	r0, ip
 80014ca:	1a35      	subs	r5, r6, r0
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	dc00      	bgt.n	80014d2 <__aeabi_dsub+0x4e>
 80014d0:	e105      	b.n	80016de <__aeabi_dsub+0x25a>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d110      	bne.n	80014f8 <__aeabi_dsub+0x74>
 80014d6:	000b      	movs	r3, r1
 80014d8:	4313      	orrs	r3, r2
 80014da:	d100      	bne.n	80014de <__aeabi_dsub+0x5a>
 80014dc:	e0d7      	b.n	800168e <__aeabi_dsub+0x20a>
 80014de:	1e6b      	subs	r3, r5, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dsub+0x62>
 80014e4:	e14b      	b.n	800177e <__aeabi_dsub+0x2fa>
 80014e6:	4653      	mov	r3, sl
 80014e8:	1a9f      	subs	r7, r3, r2
 80014ea:	45ba      	cmp	sl, r7
 80014ec:	4180      	sbcs	r0, r0
 80014ee:	1a64      	subs	r4, r4, r1
 80014f0:	4240      	negs	r0, r0
 80014f2:	1a24      	subs	r4, r4, r0
 80014f4:	2601      	movs	r6, #1
 80014f6:	e01e      	b.n	8001536 <__aeabi_dsub+0xb2>
 80014f8:	4bb3      	ldr	r3, [pc, #716]	; (80017c8 <__aeabi_dsub+0x344>)
 80014fa:	429e      	cmp	r6, r3
 80014fc:	d048      	beq.n	8001590 <__aeabi_dsub+0x10c>
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	4319      	orrs	r1, r3
 8001504:	2d38      	cmp	r5, #56	; 0x38
 8001506:	dd00      	ble.n	800150a <__aeabi_dsub+0x86>
 8001508:	e119      	b.n	800173e <__aeabi_dsub+0x2ba>
 800150a:	2d1f      	cmp	r5, #31
 800150c:	dd00      	ble.n	8001510 <__aeabi_dsub+0x8c>
 800150e:	e14c      	b.n	80017aa <__aeabi_dsub+0x326>
 8001510:	2320      	movs	r3, #32
 8001512:	000f      	movs	r7, r1
 8001514:	1b5b      	subs	r3, r3, r5
 8001516:	0010      	movs	r0, r2
 8001518:	409a      	lsls	r2, r3
 800151a:	409f      	lsls	r7, r3
 800151c:	40e8      	lsrs	r0, r5
 800151e:	1e53      	subs	r3, r2, #1
 8001520:	419a      	sbcs	r2, r3
 8001522:	40e9      	lsrs	r1, r5
 8001524:	4307      	orrs	r7, r0
 8001526:	4317      	orrs	r7, r2
 8001528:	4653      	mov	r3, sl
 800152a:	1bdf      	subs	r7, r3, r7
 800152c:	1a61      	subs	r1, r4, r1
 800152e:	45ba      	cmp	sl, r7
 8001530:	41a4      	sbcs	r4, r4
 8001532:	4264      	negs	r4, r4
 8001534:	1b0c      	subs	r4, r1, r4
 8001536:	0223      	lsls	r3, r4, #8
 8001538:	d400      	bmi.n	800153c <__aeabi_dsub+0xb8>
 800153a:	e0c5      	b.n	80016c8 <__aeabi_dsub+0x244>
 800153c:	0264      	lsls	r4, r4, #9
 800153e:	0a65      	lsrs	r5, r4, #9
 8001540:	2d00      	cmp	r5, #0
 8001542:	d100      	bne.n	8001546 <__aeabi_dsub+0xc2>
 8001544:	e0f6      	b.n	8001734 <__aeabi_dsub+0x2b0>
 8001546:	0028      	movs	r0, r5
 8001548:	f000 fb7a 	bl	8001c40 <__clzsi2>
 800154c:	0003      	movs	r3, r0
 800154e:	3b08      	subs	r3, #8
 8001550:	2b1f      	cmp	r3, #31
 8001552:	dd00      	ble.n	8001556 <__aeabi_dsub+0xd2>
 8001554:	e0e9      	b.n	800172a <__aeabi_dsub+0x2a6>
 8001556:	2220      	movs	r2, #32
 8001558:	003c      	movs	r4, r7
 800155a:	1ad2      	subs	r2, r2, r3
 800155c:	409d      	lsls	r5, r3
 800155e:	40d4      	lsrs	r4, r2
 8001560:	409f      	lsls	r7, r3
 8001562:	4325      	orrs	r5, r4
 8001564:	429e      	cmp	r6, r3
 8001566:	dd00      	ble.n	800156a <__aeabi_dsub+0xe6>
 8001568:	e0db      	b.n	8001722 <__aeabi_dsub+0x29e>
 800156a:	1b9e      	subs	r6, r3, r6
 800156c:	1c73      	adds	r3, r6, #1
 800156e:	2b1f      	cmp	r3, #31
 8001570:	dd00      	ble.n	8001574 <__aeabi_dsub+0xf0>
 8001572:	e10a      	b.n	800178a <__aeabi_dsub+0x306>
 8001574:	2220      	movs	r2, #32
 8001576:	0038      	movs	r0, r7
 8001578:	1ad2      	subs	r2, r2, r3
 800157a:	0029      	movs	r1, r5
 800157c:	4097      	lsls	r7, r2
 800157e:	002c      	movs	r4, r5
 8001580:	4091      	lsls	r1, r2
 8001582:	40d8      	lsrs	r0, r3
 8001584:	1e7a      	subs	r2, r7, #1
 8001586:	4197      	sbcs	r7, r2
 8001588:	40dc      	lsrs	r4, r3
 800158a:	2600      	movs	r6, #0
 800158c:	4301      	orrs	r1, r0
 800158e:	430f      	orrs	r7, r1
 8001590:	077b      	lsls	r3, r7, #29
 8001592:	d009      	beq.n	80015a8 <__aeabi_dsub+0x124>
 8001594:	230f      	movs	r3, #15
 8001596:	403b      	ands	r3, r7
 8001598:	2b04      	cmp	r3, #4
 800159a:	d005      	beq.n	80015a8 <__aeabi_dsub+0x124>
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	42bb      	cmp	r3, r7
 80015a0:	41bf      	sbcs	r7, r7
 80015a2:	427f      	negs	r7, r7
 80015a4:	19e4      	adds	r4, r4, r7
 80015a6:	001f      	movs	r7, r3
 80015a8:	0223      	lsls	r3, r4, #8
 80015aa:	d525      	bpl.n	80015f8 <__aeabi_dsub+0x174>
 80015ac:	4b86      	ldr	r3, [pc, #536]	; (80017c8 <__aeabi_dsub+0x344>)
 80015ae:	3601      	adds	r6, #1
 80015b0:	429e      	cmp	r6, r3
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dsub+0x132>
 80015b4:	e0af      	b.n	8001716 <__aeabi_dsub+0x292>
 80015b6:	4b85      	ldr	r3, [pc, #532]	; (80017cc <__aeabi_dsub+0x348>)
 80015b8:	2501      	movs	r5, #1
 80015ba:	401c      	ands	r4, r3
 80015bc:	4643      	mov	r3, r8
 80015be:	0762      	lsls	r2, r4, #29
 80015c0:	08ff      	lsrs	r7, r7, #3
 80015c2:	0264      	lsls	r4, r4, #9
 80015c4:	0576      	lsls	r6, r6, #21
 80015c6:	4317      	orrs	r7, r2
 80015c8:	0b24      	lsrs	r4, r4, #12
 80015ca:	0d76      	lsrs	r6, r6, #21
 80015cc:	401d      	ands	r5, r3
 80015ce:	2100      	movs	r1, #0
 80015d0:	0324      	lsls	r4, r4, #12
 80015d2:	0b23      	lsrs	r3, r4, #12
 80015d4:	0d0c      	lsrs	r4, r1, #20
 80015d6:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <__aeabi_dsub+0x34c>)
 80015d8:	0524      	lsls	r4, r4, #20
 80015da:	431c      	orrs	r4, r3
 80015dc:	4014      	ands	r4, r2
 80015de:	0533      	lsls	r3, r6, #20
 80015e0:	4323      	orrs	r3, r4
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	07ed      	lsls	r5, r5, #31
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	432b      	orrs	r3, r5
 80015ea:	0038      	movs	r0, r7
 80015ec:	0019      	movs	r1, r3
 80015ee:	bc1c      	pop	{r2, r3, r4}
 80015f0:	4690      	mov	r8, r2
 80015f2:	4699      	mov	r9, r3
 80015f4:	46a2      	mov	sl, r4
 80015f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f8:	2501      	movs	r5, #1
 80015fa:	4643      	mov	r3, r8
 80015fc:	0762      	lsls	r2, r4, #29
 80015fe:	08ff      	lsrs	r7, r7, #3
 8001600:	4317      	orrs	r7, r2
 8001602:	08e4      	lsrs	r4, r4, #3
 8001604:	401d      	ands	r5, r3
 8001606:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <__aeabi_dsub+0x344>)
 8001608:	429e      	cmp	r6, r3
 800160a:	d036      	beq.n	800167a <__aeabi_dsub+0x1f6>
 800160c:	0324      	lsls	r4, r4, #12
 800160e:	0576      	lsls	r6, r6, #21
 8001610:	0b24      	lsrs	r4, r4, #12
 8001612:	0d76      	lsrs	r6, r6, #21
 8001614:	e7db      	b.n	80015ce <__aeabi_dsub+0x14a>
 8001616:	4663      	mov	r3, ip
 8001618:	1af3      	subs	r3, r6, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	dc00      	bgt.n	8001620 <__aeabi_dsub+0x19c>
 800161e:	e094      	b.n	800174a <__aeabi_dsub+0x2c6>
 8001620:	4660      	mov	r0, ip
 8001622:	2800      	cmp	r0, #0
 8001624:	d035      	beq.n	8001692 <__aeabi_dsub+0x20e>
 8001626:	4868      	ldr	r0, [pc, #416]	; (80017c8 <__aeabi_dsub+0x344>)
 8001628:	4286      	cmp	r6, r0
 800162a:	d0b1      	beq.n	8001590 <__aeabi_dsub+0x10c>
 800162c:	2780      	movs	r7, #128	; 0x80
 800162e:	043f      	lsls	r7, r7, #16
 8001630:	4339      	orrs	r1, r7
 8001632:	2b38      	cmp	r3, #56	; 0x38
 8001634:	dc00      	bgt.n	8001638 <__aeabi_dsub+0x1b4>
 8001636:	e0fd      	b.n	8001834 <__aeabi_dsub+0x3b0>
 8001638:	430a      	orrs	r2, r1
 800163a:	0017      	movs	r7, r2
 800163c:	2100      	movs	r1, #0
 800163e:	1e7a      	subs	r2, r7, #1
 8001640:	4197      	sbcs	r7, r2
 8001642:	4457      	add	r7, sl
 8001644:	4557      	cmp	r7, sl
 8001646:	4180      	sbcs	r0, r0
 8001648:	1909      	adds	r1, r1, r4
 800164a:	4244      	negs	r4, r0
 800164c:	190c      	adds	r4, r1, r4
 800164e:	0223      	lsls	r3, r4, #8
 8001650:	d53a      	bpl.n	80016c8 <__aeabi_dsub+0x244>
 8001652:	4b5d      	ldr	r3, [pc, #372]	; (80017c8 <__aeabi_dsub+0x344>)
 8001654:	3601      	adds	r6, #1
 8001656:	429e      	cmp	r6, r3
 8001658:	d100      	bne.n	800165c <__aeabi_dsub+0x1d8>
 800165a:	e14b      	b.n	80018f4 <__aeabi_dsub+0x470>
 800165c:	2201      	movs	r2, #1
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <__aeabi_dsub+0x348>)
 8001660:	401c      	ands	r4, r3
 8001662:	087b      	lsrs	r3, r7, #1
 8001664:	4017      	ands	r7, r2
 8001666:	431f      	orrs	r7, r3
 8001668:	07e2      	lsls	r2, r4, #31
 800166a:	4317      	orrs	r7, r2
 800166c:	0864      	lsrs	r4, r4, #1
 800166e:	e78f      	b.n	8001590 <__aeabi_dsub+0x10c>
 8001670:	0008      	movs	r0, r1
 8001672:	4310      	orrs	r0, r2
 8001674:	d000      	beq.n	8001678 <__aeabi_dsub+0x1f4>
 8001676:	e724      	b.n	80014c2 <__aeabi_dsub+0x3e>
 8001678:	e721      	b.n	80014be <__aeabi_dsub+0x3a>
 800167a:	0023      	movs	r3, r4
 800167c:	433b      	orrs	r3, r7
 800167e:	d100      	bne.n	8001682 <__aeabi_dsub+0x1fe>
 8001680:	e1b9      	b.n	80019f6 <__aeabi_dsub+0x572>
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	0312      	lsls	r2, r2, #12
 8001686:	4314      	orrs	r4, r2
 8001688:	0324      	lsls	r4, r4, #12
 800168a:	0b24      	lsrs	r4, r4, #12
 800168c:	e79f      	b.n	80015ce <__aeabi_dsub+0x14a>
 800168e:	002e      	movs	r6, r5
 8001690:	e77e      	b.n	8001590 <__aeabi_dsub+0x10c>
 8001692:	0008      	movs	r0, r1
 8001694:	4310      	orrs	r0, r2
 8001696:	d100      	bne.n	800169a <__aeabi_dsub+0x216>
 8001698:	e0ca      	b.n	8001830 <__aeabi_dsub+0x3ac>
 800169a:	1e58      	subs	r0, r3, #1
 800169c:	4684      	mov	ip, r0
 800169e:	2800      	cmp	r0, #0
 80016a0:	d000      	beq.n	80016a4 <__aeabi_dsub+0x220>
 80016a2:	e0e7      	b.n	8001874 <__aeabi_dsub+0x3f0>
 80016a4:	4452      	add	r2, sl
 80016a6:	4552      	cmp	r2, sl
 80016a8:	4180      	sbcs	r0, r0
 80016aa:	1864      	adds	r4, r4, r1
 80016ac:	4240      	negs	r0, r0
 80016ae:	1824      	adds	r4, r4, r0
 80016b0:	0017      	movs	r7, r2
 80016b2:	2601      	movs	r6, #1
 80016b4:	0223      	lsls	r3, r4, #8
 80016b6:	d507      	bpl.n	80016c8 <__aeabi_dsub+0x244>
 80016b8:	2602      	movs	r6, #2
 80016ba:	e7cf      	b.n	800165c <__aeabi_dsub+0x1d8>
 80016bc:	4664      	mov	r4, ip
 80016be:	432c      	orrs	r4, r5
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dsub+0x240>
 80016c2:	e1b3      	b.n	8001a2c <__aeabi_dsub+0x5a8>
 80016c4:	002c      	movs	r4, r5
 80016c6:	4667      	mov	r7, ip
 80016c8:	077b      	lsls	r3, r7, #29
 80016ca:	d000      	beq.n	80016ce <__aeabi_dsub+0x24a>
 80016cc:	e762      	b.n	8001594 <__aeabi_dsub+0x110>
 80016ce:	0763      	lsls	r3, r4, #29
 80016d0:	08ff      	lsrs	r7, r7, #3
 80016d2:	431f      	orrs	r7, r3
 80016d4:	2501      	movs	r5, #1
 80016d6:	4643      	mov	r3, r8
 80016d8:	08e4      	lsrs	r4, r4, #3
 80016da:	401d      	ands	r5, r3
 80016dc:	e793      	b.n	8001606 <__aeabi_dsub+0x182>
 80016de:	2d00      	cmp	r5, #0
 80016e0:	d178      	bne.n	80017d4 <__aeabi_dsub+0x350>
 80016e2:	1c75      	adds	r5, r6, #1
 80016e4:	056d      	lsls	r5, r5, #21
 80016e6:	0d6d      	lsrs	r5, r5, #21
 80016e8:	2d01      	cmp	r5, #1
 80016ea:	dc00      	bgt.n	80016ee <__aeabi_dsub+0x26a>
 80016ec:	e0f2      	b.n	80018d4 <__aeabi_dsub+0x450>
 80016ee:	4650      	mov	r0, sl
 80016f0:	1a80      	subs	r0, r0, r2
 80016f2:	4582      	cmp	sl, r0
 80016f4:	41bf      	sbcs	r7, r7
 80016f6:	1a65      	subs	r5, r4, r1
 80016f8:	427f      	negs	r7, r7
 80016fa:	1bed      	subs	r5, r5, r7
 80016fc:	4684      	mov	ip, r0
 80016fe:	0228      	lsls	r0, r5, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_dsub+0x280>
 8001702:	e08c      	b.n	800181e <__aeabi_dsub+0x39a>
 8001704:	4650      	mov	r0, sl
 8001706:	1a17      	subs	r7, r2, r0
 8001708:	42ba      	cmp	r2, r7
 800170a:	4192      	sbcs	r2, r2
 800170c:	1b0c      	subs	r4, r1, r4
 800170e:	4255      	negs	r5, r2
 8001710:	1b65      	subs	r5, r4, r5
 8001712:	4698      	mov	r8, r3
 8001714:	e714      	b.n	8001540 <__aeabi_dsub+0xbc>
 8001716:	2501      	movs	r5, #1
 8001718:	4643      	mov	r3, r8
 800171a:	2400      	movs	r4, #0
 800171c:	401d      	ands	r5, r3
 800171e:	2700      	movs	r7, #0
 8001720:	e755      	b.n	80015ce <__aeabi_dsub+0x14a>
 8001722:	4c2a      	ldr	r4, [pc, #168]	; (80017cc <__aeabi_dsub+0x348>)
 8001724:	1af6      	subs	r6, r6, r3
 8001726:	402c      	ands	r4, r5
 8001728:	e732      	b.n	8001590 <__aeabi_dsub+0x10c>
 800172a:	003d      	movs	r5, r7
 800172c:	3828      	subs	r0, #40	; 0x28
 800172e:	4085      	lsls	r5, r0
 8001730:	2700      	movs	r7, #0
 8001732:	e717      	b.n	8001564 <__aeabi_dsub+0xe0>
 8001734:	0038      	movs	r0, r7
 8001736:	f000 fa83 	bl	8001c40 <__clzsi2>
 800173a:	3020      	adds	r0, #32
 800173c:	e706      	b.n	800154c <__aeabi_dsub+0xc8>
 800173e:	430a      	orrs	r2, r1
 8001740:	0017      	movs	r7, r2
 8001742:	2100      	movs	r1, #0
 8001744:	1e7a      	subs	r2, r7, #1
 8001746:	4197      	sbcs	r7, r2
 8001748:	e6ee      	b.n	8001528 <__aeabi_dsub+0xa4>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d000      	beq.n	8001750 <__aeabi_dsub+0x2cc>
 800174e:	e0e5      	b.n	800191c <__aeabi_dsub+0x498>
 8001750:	1c73      	adds	r3, r6, #1
 8001752:	469c      	mov	ip, r3
 8001754:	055b      	lsls	r3, r3, #21
 8001756:	0d5b      	lsrs	r3, r3, #21
 8001758:	2b01      	cmp	r3, #1
 800175a:	dc00      	bgt.n	800175e <__aeabi_dsub+0x2da>
 800175c:	e09f      	b.n	800189e <__aeabi_dsub+0x41a>
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <__aeabi_dsub+0x344>)
 8001760:	459c      	cmp	ip, r3
 8001762:	d100      	bne.n	8001766 <__aeabi_dsub+0x2e2>
 8001764:	e0c5      	b.n	80018f2 <__aeabi_dsub+0x46e>
 8001766:	4452      	add	r2, sl
 8001768:	4552      	cmp	r2, sl
 800176a:	4180      	sbcs	r0, r0
 800176c:	1864      	adds	r4, r4, r1
 800176e:	4240      	negs	r0, r0
 8001770:	1824      	adds	r4, r4, r0
 8001772:	07e7      	lsls	r7, r4, #31
 8001774:	0852      	lsrs	r2, r2, #1
 8001776:	4317      	orrs	r7, r2
 8001778:	0864      	lsrs	r4, r4, #1
 800177a:	4666      	mov	r6, ip
 800177c:	e708      	b.n	8001590 <__aeabi_dsub+0x10c>
 800177e:	4812      	ldr	r0, [pc, #72]	; (80017c8 <__aeabi_dsub+0x344>)
 8001780:	4285      	cmp	r5, r0
 8001782:	d100      	bne.n	8001786 <__aeabi_dsub+0x302>
 8001784:	e085      	b.n	8001892 <__aeabi_dsub+0x40e>
 8001786:	001d      	movs	r5, r3
 8001788:	e6bc      	b.n	8001504 <__aeabi_dsub+0x80>
 800178a:	0029      	movs	r1, r5
 800178c:	3e1f      	subs	r6, #31
 800178e:	40f1      	lsrs	r1, r6
 8001790:	2b20      	cmp	r3, #32
 8001792:	d100      	bne.n	8001796 <__aeabi_dsub+0x312>
 8001794:	e07f      	b.n	8001896 <__aeabi_dsub+0x412>
 8001796:	2240      	movs	r2, #64	; 0x40
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	409d      	lsls	r5, r3
 800179c:	432f      	orrs	r7, r5
 800179e:	1e7d      	subs	r5, r7, #1
 80017a0:	41af      	sbcs	r7, r5
 80017a2:	2400      	movs	r4, #0
 80017a4:	430f      	orrs	r7, r1
 80017a6:	2600      	movs	r6, #0
 80017a8:	e78e      	b.n	80016c8 <__aeabi_dsub+0x244>
 80017aa:	002b      	movs	r3, r5
 80017ac:	000f      	movs	r7, r1
 80017ae:	3b20      	subs	r3, #32
 80017b0:	40df      	lsrs	r7, r3
 80017b2:	2d20      	cmp	r5, #32
 80017b4:	d071      	beq.n	800189a <__aeabi_dsub+0x416>
 80017b6:	2340      	movs	r3, #64	; 0x40
 80017b8:	1b5d      	subs	r5, r3, r5
 80017ba:	40a9      	lsls	r1, r5
 80017bc:	430a      	orrs	r2, r1
 80017be:	1e51      	subs	r1, r2, #1
 80017c0:	418a      	sbcs	r2, r1
 80017c2:	2100      	movs	r1, #0
 80017c4:	4317      	orrs	r7, r2
 80017c6:	e6af      	b.n	8001528 <__aeabi_dsub+0xa4>
 80017c8:	000007ff 	.word	0x000007ff
 80017cc:	ff7fffff 	.word	0xff7fffff
 80017d0:	800fffff 	.word	0x800fffff
 80017d4:	2e00      	cmp	r6, #0
 80017d6:	d03e      	beq.n	8001856 <__aeabi_dsub+0x3d2>
 80017d8:	4eb3      	ldr	r6, [pc, #716]	; (8001aa8 <__aeabi_dsub+0x624>)
 80017da:	45b4      	cmp	ip, r6
 80017dc:	d045      	beq.n	800186a <__aeabi_dsub+0x3e6>
 80017de:	2680      	movs	r6, #128	; 0x80
 80017e0:	0436      	lsls	r6, r6, #16
 80017e2:	426d      	negs	r5, r5
 80017e4:	4334      	orrs	r4, r6
 80017e6:	2d38      	cmp	r5, #56	; 0x38
 80017e8:	dd00      	ble.n	80017ec <__aeabi_dsub+0x368>
 80017ea:	e0a8      	b.n	800193e <__aeabi_dsub+0x4ba>
 80017ec:	2d1f      	cmp	r5, #31
 80017ee:	dd00      	ble.n	80017f2 <__aeabi_dsub+0x36e>
 80017f0:	e11f      	b.n	8001a32 <__aeabi_dsub+0x5ae>
 80017f2:	2620      	movs	r6, #32
 80017f4:	0027      	movs	r7, r4
 80017f6:	4650      	mov	r0, sl
 80017f8:	1b76      	subs	r6, r6, r5
 80017fa:	40b7      	lsls	r7, r6
 80017fc:	40e8      	lsrs	r0, r5
 80017fe:	4307      	orrs	r7, r0
 8001800:	4650      	mov	r0, sl
 8001802:	40b0      	lsls	r0, r6
 8001804:	1e46      	subs	r6, r0, #1
 8001806:	41b0      	sbcs	r0, r6
 8001808:	40ec      	lsrs	r4, r5
 800180a:	4338      	orrs	r0, r7
 800180c:	1a17      	subs	r7, r2, r0
 800180e:	42ba      	cmp	r2, r7
 8001810:	4192      	sbcs	r2, r2
 8001812:	1b0c      	subs	r4, r1, r4
 8001814:	4252      	negs	r2, r2
 8001816:	1aa4      	subs	r4, r4, r2
 8001818:	4666      	mov	r6, ip
 800181a:	4698      	mov	r8, r3
 800181c:	e68b      	b.n	8001536 <__aeabi_dsub+0xb2>
 800181e:	4664      	mov	r4, ip
 8001820:	4667      	mov	r7, ip
 8001822:	432c      	orrs	r4, r5
 8001824:	d000      	beq.n	8001828 <__aeabi_dsub+0x3a4>
 8001826:	e68b      	b.n	8001540 <__aeabi_dsub+0xbc>
 8001828:	2500      	movs	r5, #0
 800182a:	2600      	movs	r6, #0
 800182c:	2700      	movs	r7, #0
 800182e:	e6ea      	b.n	8001606 <__aeabi_dsub+0x182>
 8001830:	001e      	movs	r6, r3
 8001832:	e6ad      	b.n	8001590 <__aeabi_dsub+0x10c>
 8001834:	2b1f      	cmp	r3, #31
 8001836:	dc60      	bgt.n	80018fa <__aeabi_dsub+0x476>
 8001838:	2720      	movs	r7, #32
 800183a:	1af8      	subs	r0, r7, r3
 800183c:	000f      	movs	r7, r1
 800183e:	4684      	mov	ip, r0
 8001840:	4087      	lsls	r7, r0
 8001842:	0010      	movs	r0, r2
 8001844:	40d8      	lsrs	r0, r3
 8001846:	4307      	orrs	r7, r0
 8001848:	4660      	mov	r0, ip
 800184a:	4082      	lsls	r2, r0
 800184c:	1e50      	subs	r0, r2, #1
 800184e:	4182      	sbcs	r2, r0
 8001850:	40d9      	lsrs	r1, r3
 8001852:	4317      	orrs	r7, r2
 8001854:	e6f5      	b.n	8001642 <__aeabi_dsub+0x1be>
 8001856:	0026      	movs	r6, r4
 8001858:	4650      	mov	r0, sl
 800185a:	4306      	orrs	r6, r0
 800185c:	d005      	beq.n	800186a <__aeabi_dsub+0x3e6>
 800185e:	43ed      	mvns	r5, r5
 8001860:	2d00      	cmp	r5, #0
 8001862:	d0d3      	beq.n	800180c <__aeabi_dsub+0x388>
 8001864:	4e90      	ldr	r6, [pc, #576]	; (8001aa8 <__aeabi_dsub+0x624>)
 8001866:	45b4      	cmp	ip, r6
 8001868:	d1bd      	bne.n	80017e6 <__aeabi_dsub+0x362>
 800186a:	000c      	movs	r4, r1
 800186c:	0017      	movs	r7, r2
 800186e:	4666      	mov	r6, ip
 8001870:	4698      	mov	r8, r3
 8001872:	e68d      	b.n	8001590 <__aeabi_dsub+0x10c>
 8001874:	488c      	ldr	r0, [pc, #560]	; (8001aa8 <__aeabi_dsub+0x624>)
 8001876:	4283      	cmp	r3, r0
 8001878:	d00b      	beq.n	8001892 <__aeabi_dsub+0x40e>
 800187a:	4663      	mov	r3, ip
 800187c:	e6d9      	b.n	8001632 <__aeabi_dsub+0x1ae>
 800187e:	2d00      	cmp	r5, #0
 8001880:	d000      	beq.n	8001884 <__aeabi_dsub+0x400>
 8001882:	e096      	b.n	80019b2 <__aeabi_dsub+0x52e>
 8001884:	0008      	movs	r0, r1
 8001886:	4310      	orrs	r0, r2
 8001888:	d100      	bne.n	800188c <__aeabi_dsub+0x408>
 800188a:	e0e2      	b.n	8001a52 <__aeabi_dsub+0x5ce>
 800188c:	000c      	movs	r4, r1
 800188e:	0017      	movs	r7, r2
 8001890:	4698      	mov	r8, r3
 8001892:	4e85      	ldr	r6, [pc, #532]	; (8001aa8 <__aeabi_dsub+0x624>)
 8001894:	e67c      	b.n	8001590 <__aeabi_dsub+0x10c>
 8001896:	2500      	movs	r5, #0
 8001898:	e780      	b.n	800179c <__aeabi_dsub+0x318>
 800189a:	2100      	movs	r1, #0
 800189c:	e78e      	b.n	80017bc <__aeabi_dsub+0x338>
 800189e:	0023      	movs	r3, r4
 80018a0:	4650      	mov	r0, sl
 80018a2:	4303      	orrs	r3, r0
 80018a4:	2e00      	cmp	r6, #0
 80018a6:	d000      	beq.n	80018aa <__aeabi_dsub+0x426>
 80018a8:	e0a8      	b.n	80019fc <__aeabi_dsub+0x578>
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dsub+0x42c>
 80018ae:	e0de      	b.n	8001a6e <__aeabi_dsub+0x5ea>
 80018b0:	000b      	movs	r3, r1
 80018b2:	4313      	orrs	r3, r2
 80018b4:	d100      	bne.n	80018b8 <__aeabi_dsub+0x434>
 80018b6:	e66b      	b.n	8001590 <__aeabi_dsub+0x10c>
 80018b8:	4452      	add	r2, sl
 80018ba:	4552      	cmp	r2, sl
 80018bc:	4180      	sbcs	r0, r0
 80018be:	1864      	adds	r4, r4, r1
 80018c0:	4240      	negs	r0, r0
 80018c2:	1824      	adds	r4, r4, r0
 80018c4:	0017      	movs	r7, r2
 80018c6:	0223      	lsls	r3, r4, #8
 80018c8:	d400      	bmi.n	80018cc <__aeabi_dsub+0x448>
 80018ca:	e6fd      	b.n	80016c8 <__aeabi_dsub+0x244>
 80018cc:	4b77      	ldr	r3, [pc, #476]	; (8001aac <__aeabi_dsub+0x628>)
 80018ce:	4666      	mov	r6, ip
 80018d0:	401c      	ands	r4, r3
 80018d2:	e65d      	b.n	8001590 <__aeabi_dsub+0x10c>
 80018d4:	0025      	movs	r5, r4
 80018d6:	4650      	mov	r0, sl
 80018d8:	4305      	orrs	r5, r0
 80018da:	2e00      	cmp	r6, #0
 80018dc:	d1cf      	bne.n	800187e <__aeabi_dsub+0x3fa>
 80018de:	2d00      	cmp	r5, #0
 80018e0:	d14f      	bne.n	8001982 <__aeabi_dsub+0x4fe>
 80018e2:	000c      	movs	r4, r1
 80018e4:	4314      	orrs	r4, r2
 80018e6:	d100      	bne.n	80018ea <__aeabi_dsub+0x466>
 80018e8:	e0a0      	b.n	8001a2c <__aeabi_dsub+0x5a8>
 80018ea:	000c      	movs	r4, r1
 80018ec:	0017      	movs	r7, r2
 80018ee:	4698      	mov	r8, r3
 80018f0:	e64e      	b.n	8001590 <__aeabi_dsub+0x10c>
 80018f2:	4666      	mov	r6, ip
 80018f4:	2400      	movs	r4, #0
 80018f6:	2700      	movs	r7, #0
 80018f8:	e685      	b.n	8001606 <__aeabi_dsub+0x182>
 80018fa:	001f      	movs	r7, r3
 80018fc:	0008      	movs	r0, r1
 80018fe:	3f20      	subs	r7, #32
 8001900:	40f8      	lsrs	r0, r7
 8001902:	0007      	movs	r7, r0
 8001904:	2b20      	cmp	r3, #32
 8001906:	d100      	bne.n	800190a <__aeabi_dsub+0x486>
 8001908:	e08e      	b.n	8001a28 <__aeabi_dsub+0x5a4>
 800190a:	2040      	movs	r0, #64	; 0x40
 800190c:	1ac3      	subs	r3, r0, r3
 800190e:	4099      	lsls	r1, r3
 8001910:	430a      	orrs	r2, r1
 8001912:	1e51      	subs	r1, r2, #1
 8001914:	418a      	sbcs	r2, r1
 8001916:	2100      	movs	r1, #0
 8001918:	4317      	orrs	r7, r2
 800191a:	e692      	b.n	8001642 <__aeabi_dsub+0x1be>
 800191c:	2e00      	cmp	r6, #0
 800191e:	d114      	bne.n	800194a <__aeabi_dsub+0x4c6>
 8001920:	0026      	movs	r6, r4
 8001922:	4650      	mov	r0, sl
 8001924:	4306      	orrs	r6, r0
 8001926:	d062      	beq.n	80019ee <__aeabi_dsub+0x56a>
 8001928:	43db      	mvns	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d15c      	bne.n	80019e8 <__aeabi_dsub+0x564>
 800192e:	1887      	adds	r7, r0, r2
 8001930:	4297      	cmp	r7, r2
 8001932:	4192      	sbcs	r2, r2
 8001934:	1864      	adds	r4, r4, r1
 8001936:	4252      	negs	r2, r2
 8001938:	18a4      	adds	r4, r4, r2
 800193a:	4666      	mov	r6, ip
 800193c:	e687      	b.n	800164e <__aeabi_dsub+0x1ca>
 800193e:	4650      	mov	r0, sl
 8001940:	4320      	orrs	r0, r4
 8001942:	1e44      	subs	r4, r0, #1
 8001944:	41a0      	sbcs	r0, r4
 8001946:	2400      	movs	r4, #0
 8001948:	e760      	b.n	800180c <__aeabi_dsub+0x388>
 800194a:	4e57      	ldr	r6, [pc, #348]	; (8001aa8 <__aeabi_dsub+0x624>)
 800194c:	45b4      	cmp	ip, r6
 800194e:	d04e      	beq.n	80019ee <__aeabi_dsub+0x56a>
 8001950:	2680      	movs	r6, #128	; 0x80
 8001952:	0436      	lsls	r6, r6, #16
 8001954:	425b      	negs	r3, r3
 8001956:	4334      	orrs	r4, r6
 8001958:	2b38      	cmp	r3, #56	; 0x38
 800195a:	dd00      	ble.n	800195e <__aeabi_dsub+0x4da>
 800195c:	e07f      	b.n	8001a5e <__aeabi_dsub+0x5da>
 800195e:	2b1f      	cmp	r3, #31
 8001960:	dd00      	ble.n	8001964 <__aeabi_dsub+0x4e0>
 8001962:	e08b      	b.n	8001a7c <__aeabi_dsub+0x5f8>
 8001964:	2620      	movs	r6, #32
 8001966:	0027      	movs	r7, r4
 8001968:	4650      	mov	r0, sl
 800196a:	1af6      	subs	r6, r6, r3
 800196c:	40b7      	lsls	r7, r6
 800196e:	40d8      	lsrs	r0, r3
 8001970:	4307      	orrs	r7, r0
 8001972:	4650      	mov	r0, sl
 8001974:	40b0      	lsls	r0, r6
 8001976:	1e46      	subs	r6, r0, #1
 8001978:	41b0      	sbcs	r0, r6
 800197a:	4307      	orrs	r7, r0
 800197c:	40dc      	lsrs	r4, r3
 800197e:	18bf      	adds	r7, r7, r2
 8001980:	e7d6      	b.n	8001930 <__aeabi_dsub+0x4ac>
 8001982:	000d      	movs	r5, r1
 8001984:	4315      	orrs	r5, r2
 8001986:	d100      	bne.n	800198a <__aeabi_dsub+0x506>
 8001988:	e602      	b.n	8001590 <__aeabi_dsub+0x10c>
 800198a:	4650      	mov	r0, sl
 800198c:	1a80      	subs	r0, r0, r2
 800198e:	4582      	cmp	sl, r0
 8001990:	41bf      	sbcs	r7, r7
 8001992:	1a65      	subs	r5, r4, r1
 8001994:	427f      	negs	r7, r7
 8001996:	1bed      	subs	r5, r5, r7
 8001998:	4684      	mov	ip, r0
 800199a:	0228      	lsls	r0, r5, #8
 800199c:	d400      	bmi.n	80019a0 <__aeabi_dsub+0x51c>
 800199e:	e68d      	b.n	80016bc <__aeabi_dsub+0x238>
 80019a0:	4650      	mov	r0, sl
 80019a2:	1a17      	subs	r7, r2, r0
 80019a4:	42ba      	cmp	r2, r7
 80019a6:	4192      	sbcs	r2, r2
 80019a8:	1b0c      	subs	r4, r1, r4
 80019aa:	4252      	negs	r2, r2
 80019ac:	1aa4      	subs	r4, r4, r2
 80019ae:	4698      	mov	r8, r3
 80019b0:	e5ee      	b.n	8001590 <__aeabi_dsub+0x10c>
 80019b2:	000d      	movs	r5, r1
 80019b4:	4315      	orrs	r5, r2
 80019b6:	d100      	bne.n	80019ba <__aeabi_dsub+0x536>
 80019b8:	e76b      	b.n	8001892 <__aeabi_dsub+0x40e>
 80019ba:	4650      	mov	r0, sl
 80019bc:	0767      	lsls	r7, r4, #29
 80019be:	08c0      	lsrs	r0, r0, #3
 80019c0:	4307      	orrs	r7, r0
 80019c2:	2080      	movs	r0, #128	; 0x80
 80019c4:	08e4      	lsrs	r4, r4, #3
 80019c6:	0300      	lsls	r0, r0, #12
 80019c8:	4204      	tst	r4, r0
 80019ca:	d007      	beq.n	80019dc <__aeabi_dsub+0x558>
 80019cc:	08cd      	lsrs	r5, r1, #3
 80019ce:	4205      	tst	r5, r0
 80019d0:	d104      	bne.n	80019dc <__aeabi_dsub+0x558>
 80019d2:	002c      	movs	r4, r5
 80019d4:	4698      	mov	r8, r3
 80019d6:	08d7      	lsrs	r7, r2, #3
 80019d8:	0749      	lsls	r1, r1, #29
 80019da:	430f      	orrs	r7, r1
 80019dc:	0f7b      	lsrs	r3, r7, #29
 80019de:	00e4      	lsls	r4, r4, #3
 80019e0:	431c      	orrs	r4, r3
 80019e2:	00ff      	lsls	r7, r7, #3
 80019e4:	4e30      	ldr	r6, [pc, #192]	; (8001aa8 <__aeabi_dsub+0x624>)
 80019e6:	e5d3      	b.n	8001590 <__aeabi_dsub+0x10c>
 80019e8:	4e2f      	ldr	r6, [pc, #188]	; (8001aa8 <__aeabi_dsub+0x624>)
 80019ea:	45b4      	cmp	ip, r6
 80019ec:	d1b4      	bne.n	8001958 <__aeabi_dsub+0x4d4>
 80019ee:	000c      	movs	r4, r1
 80019f0:	0017      	movs	r7, r2
 80019f2:	4666      	mov	r6, ip
 80019f4:	e5cc      	b.n	8001590 <__aeabi_dsub+0x10c>
 80019f6:	2700      	movs	r7, #0
 80019f8:	2400      	movs	r4, #0
 80019fa:	e5e8      	b.n	80015ce <__aeabi_dsub+0x14a>
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d039      	beq.n	8001a74 <__aeabi_dsub+0x5f0>
 8001a00:	000b      	movs	r3, r1
 8001a02:	4313      	orrs	r3, r2
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x584>
 8001a06:	e744      	b.n	8001892 <__aeabi_dsub+0x40e>
 8001a08:	08c0      	lsrs	r0, r0, #3
 8001a0a:	0767      	lsls	r7, r4, #29
 8001a0c:	4307      	orrs	r7, r0
 8001a0e:	2080      	movs	r0, #128	; 0x80
 8001a10:	08e4      	lsrs	r4, r4, #3
 8001a12:	0300      	lsls	r0, r0, #12
 8001a14:	4204      	tst	r4, r0
 8001a16:	d0e1      	beq.n	80019dc <__aeabi_dsub+0x558>
 8001a18:	08cb      	lsrs	r3, r1, #3
 8001a1a:	4203      	tst	r3, r0
 8001a1c:	d1de      	bne.n	80019dc <__aeabi_dsub+0x558>
 8001a1e:	08d7      	lsrs	r7, r2, #3
 8001a20:	0749      	lsls	r1, r1, #29
 8001a22:	430f      	orrs	r7, r1
 8001a24:	001c      	movs	r4, r3
 8001a26:	e7d9      	b.n	80019dc <__aeabi_dsub+0x558>
 8001a28:	2100      	movs	r1, #0
 8001a2a:	e771      	b.n	8001910 <__aeabi_dsub+0x48c>
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	2700      	movs	r7, #0
 8001a30:	e5e9      	b.n	8001606 <__aeabi_dsub+0x182>
 8001a32:	002e      	movs	r6, r5
 8001a34:	0027      	movs	r7, r4
 8001a36:	3e20      	subs	r6, #32
 8001a38:	40f7      	lsrs	r7, r6
 8001a3a:	2d20      	cmp	r5, #32
 8001a3c:	d02f      	beq.n	8001a9e <__aeabi_dsub+0x61a>
 8001a3e:	2640      	movs	r6, #64	; 0x40
 8001a40:	1b75      	subs	r5, r6, r5
 8001a42:	40ac      	lsls	r4, r5
 8001a44:	4650      	mov	r0, sl
 8001a46:	4320      	orrs	r0, r4
 8001a48:	1e44      	subs	r4, r0, #1
 8001a4a:	41a0      	sbcs	r0, r4
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	4338      	orrs	r0, r7
 8001a50:	e6dc      	b.n	800180c <__aeabi_dsub+0x388>
 8001a52:	2480      	movs	r4, #128	; 0x80
 8001a54:	2500      	movs	r5, #0
 8001a56:	0324      	lsls	r4, r4, #12
 8001a58:	4e13      	ldr	r6, [pc, #76]	; (8001aa8 <__aeabi_dsub+0x624>)
 8001a5a:	2700      	movs	r7, #0
 8001a5c:	e5d3      	b.n	8001606 <__aeabi_dsub+0x182>
 8001a5e:	4650      	mov	r0, sl
 8001a60:	4320      	orrs	r0, r4
 8001a62:	0007      	movs	r7, r0
 8001a64:	1e78      	subs	r0, r7, #1
 8001a66:	4187      	sbcs	r7, r0
 8001a68:	2400      	movs	r4, #0
 8001a6a:	18bf      	adds	r7, r7, r2
 8001a6c:	e760      	b.n	8001930 <__aeabi_dsub+0x4ac>
 8001a6e:	000c      	movs	r4, r1
 8001a70:	0017      	movs	r7, r2
 8001a72:	e58d      	b.n	8001590 <__aeabi_dsub+0x10c>
 8001a74:	000c      	movs	r4, r1
 8001a76:	0017      	movs	r7, r2
 8001a78:	4e0b      	ldr	r6, [pc, #44]	; (8001aa8 <__aeabi_dsub+0x624>)
 8001a7a:	e589      	b.n	8001590 <__aeabi_dsub+0x10c>
 8001a7c:	001e      	movs	r6, r3
 8001a7e:	0027      	movs	r7, r4
 8001a80:	3e20      	subs	r6, #32
 8001a82:	40f7      	lsrs	r7, r6
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d00c      	beq.n	8001aa2 <__aeabi_dsub+0x61e>
 8001a88:	2640      	movs	r6, #64	; 0x40
 8001a8a:	1af3      	subs	r3, r6, r3
 8001a8c:	409c      	lsls	r4, r3
 8001a8e:	4650      	mov	r0, sl
 8001a90:	4320      	orrs	r0, r4
 8001a92:	1e44      	subs	r4, r0, #1
 8001a94:	41a0      	sbcs	r0, r4
 8001a96:	4307      	orrs	r7, r0
 8001a98:	2400      	movs	r4, #0
 8001a9a:	18bf      	adds	r7, r7, r2
 8001a9c:	e748      	b.n	8001930 <__aeabi_dsub+0x4ac>
 8001a9e:	2400      	movs	r4, #0
 8001aa0:	e7d0      	b.n	8001a44 <__aeabi_dsub+0x5c0>
 8001aa2:	2400      	movs	r4, #0
 8001aa4:	e7f3      	b.n	8001a8e <__aeabi_dsub+0x60a>
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	000007ff 	.word	0x000007ff
 8001aac:	ff7fffff 	.word	0xff7fffff

08001ab0 <__aeabi_d2iz>:
 8001ab0:	b530      	push	{r4, r5, lr}
 8001ab2:	4d13      	ldr	r5, [pc, #76]	; (8001b00 <__aeabi_d2iz+0x50>)
 8001ab4:	030a      	lsls	r2, r1, #12
 8001ab6:	004b      	lsls	r3, r1, #1
 8001ab8:	0b12      	lsrs	r2, r2, #12
 8001aba:	0d5b      	lsrs	r3, r3, #21
 8001abc:	0fc9      	lsrs	r1, r1, #31
 8001abe:	2400      	movs	r4, #0
 8001ac0:	42ab      	cmp	r3, r5
 8001ac2:	dd10      	ble.n	8001ae6 <__aeabi_d2iz+0x36>
 8001ac4:	4c0f      	ldr	r4, [pc, #60]	; (8001b04 <__aeabi_d2iz+0x54>)
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	dc0f      	bgt.n	8001aea <__aeabi_d2iz+0x3a>
 8001aca:	2480      	movs	r4, #128	; 0x80
 8001acc:	4d0e      	ldr	r5, [pc, #56]	; (8001b08 <__aeabi_d2iz+0x58>)
 8001ace:	0364      	lsls	r4, r4, #13
 8001ad0:	4322      	orrs	r2, r4
 8001ad2:	1aed      	subs	r5, r5, r3
 8001ad4:	2d1f      	cmp	r5, #31
 8001ad6:	dd0b      	ble.n	8001af0 <__aeabi_d2iz+0x40>
 8001ad8:	480c      	ldr	r0, [pc, #48]	; (8001b0c <__aeabi_d2iz+0x5c>)
 8001ada:	1ac3      	subs	r3, r0, r3
 8001adc:	40da      	lsrs	r2, r3
 8001ade:	4254      	negs	r4, r2
 8001ae0:	2900      	cmp	r1, #0
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_d2iz+0x36>
 8001ae4:	0014      	movs	r4, r2
 8001ae6:	0020      	movs	r0, r4
 8001ae8:	bd30      	pop	{r4, r5, pc}
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <__aeabi_d2iz+0x60>)
 8001aec:	18cc      	adds	r4, r1, r3
 8001aee:	e7fa      	b.n	8001ae6 <__aeabi_d2iz+0x36>
 8001af0:	4c08      	ldr	r4, [pc, #32]	; (8001b14 <__aeabi_d2iz+0x64>)
 8001af2:	40e8      	lsrs	r0, r5
 8001af4:	46a4      	mov	ip, r4
 8001af6:	4463      	add	r3, ip
 8001af8:	409a      	lsls	r2, r3
 8001afa:	4302      	orrs	r2, r0
 8001afc:	e7ef      	b.n	8001ade <__aeabi_d2iz+0x2e>
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	000003fe 	.word	0x000003fe
 8001b04:	0000041d 	.word	0x0000041d
 8001b08:	00000433 	.word	0x00000433
 8001b0c:	00000413 	.word	0x00000413
 8001b10:	7fffffff 	.word	0x7fffffff
 8001b14:	fffffbed 	.word	0xfffffbed

08001b18 <__aeabi_i2d>:
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d030      	beq.n	8001b80 <__aeabi_i2d+0x68>
 8001b1e:	17c3      	asrs	r3, r0, #31
 8001b20:	18c4      	adds	r4, r0, r3
 8001b22:	405c      	eors	r4, r3
 8001b24:	0fc5      	lsrs	r5, r0, #31
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 f88a 	bl	8001c40 <__clzsi2>
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <__aeabi_i2d+0x74>)
 8001b2e:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <__aeabi_i2d+0x78>)
 8001b30:	1a1b      	subs	r3, r3, r0
 8001b32:	1ad2      	subs	r2, r2, r3
 8001b34:	2a1f      	cmp	r2, #31
 8001b36:	dd18      	ble.n	8001b6a <__aeabi_i2d+0x52>
 8001b38:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <__aeabi_i2d+0x7c>)
 8001b3a:	1ad2      	subs	r2, r2, r3
 8001b3c:	4094      	lsls	r4, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	0324      	lsls	r4, r4, #12
 8001b42:	055b      	lsls	r3, r3, #21
 8001b44:	0b24      	lsrs	r4, r4, #12
 8001b46:	0d5b      	lsrs	r3, r3, #21
 8001b48:	2100      	movs	r1, #0
 8001b4a:	0010      	movs	r0, r2
 8001b4c:	0324      	lsls	r4, r4, #12
 8001b4e:	0d0a      	lsrs	r2, r1, #20
 8001b50:	0b24      	lsrs	r4, r4, #12
 8001b52:	0512      	lsls	r2, r2, #20
 8001b54:	4322      	orrs	r2, r4
 8001b56:	4c10      	ldr	r4, [pc, #64]	; (8001b98 <__aeabi_i2d+0x80>)
 8001b58:	051b      	lsls	r3, r3, #20
 8001b5a:	4022      	ands	r2, r4
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	07ed      	lsls	r5, r5, #31
 8001b62:	085b      	lsrs	r3, r3, #1
 8001b64:	432b      	orrs	r3, r5
 8001b66:	0019      	movs	r1, r3
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
 8001b6a:	0021      	movs	r1, r4
 8001b6c:	4091      	lsls	r1, r2
 8001b6e:	000a      	movs	r2, r1
 8001b70:	210b      	movs	r1, #11
 8001b72:	1a08      	subs	r0, r1, r0
 8001b74:	40c4      	lsrs	r4, r0
 8001b76:	055b      	lsls	r3, r3, #21
 8001b78:	0324      	lsls	r4, r4, #12
 8001b7a:	0b24      	lsrs	r4, r4, #12
 8001b7c:	0d5b      	lsrs	r3, r3, #21
 8001b7e:	e7e3      	b.n	8001b48 <__aeabi_i2d+0x30>
 8001b80:	2500      	movs	r5, #0
 8001b82:	2300      	movs	r3, #0
 8001b84:	2400      	movs	r4, #0
 8001b86:	2200      	movs	r2, #0
 8001b88:	e7de      	b.n	8001b48 <__aeabi_i2d+0x30>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	00000433 	.word	0x00000433
 8001b94:	00000413 	.word	0x00000413
 8001b98:	800fffff 	.word	0x800fffff

08001b9c <__aeabi_f2d>:
 8001b9c:	0041      	lsls	r1, r0, #1
 8001b9e:	0e09      	lsrs	r1, r1, #24
 8001ba0:	1c4b      	adds	r3, r1, #1
 8001ba2:	b570      	push	{r4, r5, r6, lr}
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	0246      	lsls	r6, r0, #9
 8001ba8:	0a75      	lsrs	r5, r6, #9
 8001baa:	0fc4      	lsrs	r4, r0, #31
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	dd14      	ble.n	8001bda <__aeabi_f2d+0x3e>
 8001bb0:	23e0      	movs	r3, #224	; 0xe0
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	076d      	lsls	r5, r5, #29
 8001bb6:	0b36      	lsrs	r6, r6, #12
 8001bb8:	18cb      	adds	r3, r1, r3
 8001bba:	2100      	movs	r1, #0
 8001bbc:	0d0a      	lsrs	r2, r1, #20
 8001bbe:	0028      	movs	r0, r5
 8001bc0:	0512      	lsls	r2, r2, #20
 8001bc2:	4d1c      	ldr	r5, [pc, #112]	; (8001c34 <__aeabi_f2d+0x98>)
 8001bc4:	4332      	orrs	r2, r6
 8001bc6:	055b      	lsls	r3, r3, #21
 8001bc8:	402a      	ands	r2, r5
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	07e4      	lsls	r4, r4, #31
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	4323      	orrs	r3, r4
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
 8001bda:	2900      	cmp	r1, #0
 8001bdc:	d114      	bne.n	8001c08 <__aeabi_f2d+0x6c>
 8001bde:	2d00      	cmp	r5, #0
 8001be0:	d01e      	beq.n	8001c20 <__aeabi_f2d+0x84>
 8001be2:	0028      	movs	r0, r5
 8001be4:	f000 f82c 	bl	8001c40 <__clzsi2>
 8001be8:	280a      	cmp	r0, #10
 8001bea:	dc1c      	bgt.n	8001c26 <__aeabi_f2d+0x8a>
 8001bec:	230b      	movs	r3, #11
 8001bee:	002a      	movs	r2, r5
 8001bf0:	1a1b      	subs	r3, r3, r0
 8001bf2:	40da      	lsrs	r2, r3
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	3315      	adds	r3, #21
 8001bf8:	409d      	lsls	r5, r3
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <__aeabi_f2d+0x9c>)
 8001bfc:	0312      	lsls	r2, r2, #12
 8001bfe:	1a1b      	subs	r3, r3, r0
 8001c00:	055b      	lsls	r3, r3, #21
 8001c02:	0b16      	lsrs	r6, r2, #12
 8001c04:	0d5b      	lsrs	r3, r3, #21
 8001c06:	e7d8      	b.n	8001bba <__aeabi_f2d+0x1e>
 8001c08:	2d00      	cmp	r5, #0
 8001c0a:	d006      	beq.n	8001c1a <__aeabi_f2d+0x7e>
 8001c0c:	0b32      	lsrs	r2, r6, #12
 8001c0e:	2680      	movs	r6, #128	; 0x80
 8001c10:	0336      	lsls	r6, r6, #12
 8001c12:	076d      	lsls	r5, r5, #29
 8001c14:	4316      	orrs	r6, r2
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <__aeabi_f2d+0xa0>)
 8001c18:	e7cf      	b.n	8001bba <__aeabi_f2d+0x1e>
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <__aeabi_f2d+0xa0>)
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	e7cc      	b.n	8001bba <__aeabi_f2d+0x1e>
 8001c20:	2300      	movs	r3, #0
 8001c22:	2600      	movs	r6, #0
 8001c24:	e7c9      	b.n	8001bba <__aeabi_f2d+0x1e>
 8001c26:	0003      	movs	r3, r0
 8001c28:	002a      	movs	r2, r5
 8001c2a:	3b0b      	subs	r3, #11
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	2500      	movs	r5, #0
 8001c30:	e7e3      	b.n	8001bfa <__aeabi_f2d+0x5e>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	800fffff 	.word	0x800fffff
 8001c38:	00000389 	.word	0x00000389
 8001c3c:	000007ff 	.word	0x000007ff

08001c40 <__clzsi2>:
 8001c40:	211c      	movs	r1, #28
 8001c42:	2301      	movs	r3, #1
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	4298      	cmp	r0, r3
 8001c48:	d301      	bcc.n	8001c4e <__clzsi2+0xe>
 8001c4a:	0c00      	lsrs	r0, r0, #16
 8001c4c:	3910      	subs	r1, #16
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	4298      	cmp	r0, r3
 8001c52:	d301      	bcc.n	8001c58 <__clzsi2+0x18>
 8001c54:	0a00      	lsrs	r0, r0, #8
 8001c56:	3908      	subs	r1, #8
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	4298      	cmp	r0, r3
 8001c5c:	d301      	bcc.n	8001c62 <__clzsi2+0x22>
 8001c5e:	0900      	lsrs	r0, r0, #4
 8001c60:	3904      	subs	r1, #4
 8001c62:	a202      	add	r2, pc, #8	; (adr r2, 8001c6c <__clzsi2+0x2c>)
 8001c64:	5c10      	ldrb	r0, [r2, r0]
 8001c66:	1840      	adds	r0, r0, r1
 8001c68:	4770      	bx	lr
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	02020304 	.word	0x02020304
 8001c70:	01010101 	.word	0x01010101
	...

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001c80:	f000 ff38 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8001c84:	21fa      	movs	r1, #250	; 0xfa
 8001c86:	0089      	lsls	r1, r1, #2
 8001c88:	f7fe fa50 	bl	800012c <__udivsi3>
 8001c8c:	f000 fab4 	bl	80021f8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001c90:	2001      	movs	r0, #1
 8001c92:	2200      	movs	r2, #0
 8001c94:	0021      	movs	r1, r4
 8001c96:	4240      	negs	r0, r0
 8001c98:	f000 fa74 	bl	8002184 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	bd10      	pop	{r4, pc}

08001ca0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_Init+0x1c>)
{
 8001ca4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001caa:	430b      	orrs	r3, r1
 8001cac:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	f7ff ffe5 	bl	8001c7c <HAL_InitTick>
  HAL_MspInit();
 8001cb2:	f002 f9d9 	bl	8004068 <HAL_MspInit>
}
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	bd10      	pop	{r4, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001cc0:	4a02      	ldr	r2, [pc, #8]	; (8001ccc <HAL_IncTick+0xc>)
 8001cc2:	6813      	ldr	r3, [r2, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	4770      	bx	lr
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	200002cc 	.word	0x200002cc

08001cd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001cd0:	4b01      	ldr	r3, [pc, #4]	; (8001cd8 <HAL_GetTick+0x8>)
 8001cd2:	6818      	ldr	r0, [r3, #0]
}
 8001cd4:	4770      	bx	lr
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	200002cc 	.word	0x200002cc

08001cdc <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001cdc:	2300      	movs	r3, #0
{
 8001cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce0:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001ce2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce4:	6803      	ldr	r3, [r0, #0]
{
 8001ce6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	400a      	ands	r2, r1
 8001cec:	2a01      	cmp	r2, #1
 8001cee:	d107      	bne.n	8001d00 <ADC_Enable+0x24>
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	4211      	tst	r1, r2
 8001cf4:	d001      	beq.n	8001cfa <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cf6:	2000      	movs	r0, #0
}
 8001cf8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	0412      	lsls	r2, r2, #16
 8001cfe:	d4fa      	bmi.n	8001cf6 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d00:	6899      	ldr	r1, [r3, #8]
 8001d02:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <ADC_Enable+0x8c>)
 8001d04:	4211      	tst	r1, r2
 8001d06:	d008      	beq.n	8001d1a <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d08:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d14:	4303      	orrs	r3, r0
 8001d16:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8001d18:	e7ee      	b.n	8001cf8 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	6899      	ldr	r1, [r3, #8]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <ADC_Enable+0x90>)
 8001d24:	4912      	ldr	r1, [pc, #72]	; (8001d70 <ADC_Enable+0x94>)
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	f7fe fa00 	bl	800012c <__udivsi3>
 8001d2c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001d2e:	9b01      	ldr	r3, [sp, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d115      	bne.n	8001d60 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8001d34:	f7ff ffcc 	bl	8001cd0 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d38:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8001d3a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	422b      	tst	r3, r5
 8001d42:	d1d8      	bne.n	8001cf6 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d44:	f7ff ffc4 	bl	8001cd0 <HAL_GetTick>
 8001d48:	1b80      	subs	r0, r0, r6
 8001d4a:	2802      	cmp	r0, #2
 8001d4c:	d9f6      	bls.n	8001d3c <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4e:	2310      	movs	r3, #16
 8001d50:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001d52:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d54:	4313      	orrs	r3, r2
 8001d56:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d5a:	432b      	orrs	r3, r5
 8001d5c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8001d5e:	e7cb      	b.n	8001cf8 <ADC_Enable+0x1c>
      wait_loop_index--;
 8001d60:	9b01      	ldr	r3, [sp, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	e7e2      	b.n	8001d2e <ADC_Enable+0x52>
 8001d68:	80000017 	.word	0x80000017
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	000f4240 	.word	0x000f4240

08001d74 <HAL_ADC_Init>:
{
 8001d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d76:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d072      	beq.n	8001e64 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d106      	bne.n	8001d92 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001d84:	0022      	movs	r2, r4
 8001d86:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8001d88:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8001d8a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001d8c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001d8e:	f002 f989 	bl	80040a4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d94:	06db      	lsls	r3, r3, #27
 8001d96:	d500      	bpl.n	8001d9a <HAL_ADC_Init+0x26>
 8001d98:	e079      	b.n	8001e8e <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	6898      	ldr	r0, [r3, #8]
 8001da0:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001da2:	d000      	beq.n	8001da6 <HAL_ADC_Init+0x32>
 8001da4:	e073      	b.n	8001e8e <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8001da6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001da8:	4942      	ldr	r1, [pc, #264]	; (8001eb4 <HAL_ADC_Init+0x140>)
 8001daa:	4011      	ands	r1, r2
 8001dac:	2202      	movs	r2, #2
 8001dae:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001db0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	400a      	ands	r2, r1
 8001db8:	2a01      	cmp	r2, #1
 8001dba:	d000      	beq.n	8001dbe <HAL_ADC_Init+0x4a>
 8001dbc:	e06d      	b.n	8001e9a <HAL_ADC_Init+0x126>
 8001dbe:	6819      	ldr	r1, [r3, #0]
 8001dc0:	4211      	tst	r1, r2
 8001dc2:	d102      	bne.n	8001dca <HAL_ADC_Init+0x56>
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	0412      	lsls	r2, r2, #16
 8001dc8:	d567      	bpl.n	8001e9a <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	493a      	ldr	r1, [pc, #232]	; (8001eb8 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001dce:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001dd4:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001dd6:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001dd8:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001dda:	69e2      	ldr	r2, [r4, #28]
 8001ddc:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001dde:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001de0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001de2:	3a01      	subs	r2, #1
 8001de4:	1e56      	subs	r6, r2, #1
 8001de6:	41b2      	sbcs	r2, r6
 8001de8:	0316      	lsls	r6, r2, #12
 8001dea:	68e2      	ldr	r2, [r4, #12]
 8001dec:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001dee:	6922      	ldr	r2, [r4, #16]
 8001df0:	430f      	orrs	r7, r1
 8001df2:	2a02      	cmp	r2, #2
 8001df4:	d100      	bne.n	8001df8 <HAL_ADC_Init+0x84>
 8001df6:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001df8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001dfc:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001dfe:	433a      	orrs	r2, r7
 8001e00:	4332      	orrs	r2, r6
 8001e02:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e04:	2901      	cmp	r1, #1
 8001e06:	d104      	bne.n	8001e12 <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e08:	2d00      	cmp	r5, #0
 8001e0a:	d12c      	bne.n	8001e66 <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	0249      	lsls	r1, r1, #9
 8001e10:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e12:	20c2      	movs	r0, #194	; 0xc2
 8001e14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e16:	30ff      	adds	r0, #255	; 0xff
 8001e18:	4281      	cmp	r1, r0
 8001e1a:	d002      	beq.n	8001e22 <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e1e:	4301      	orrs	r1, r0
 8001e20:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e22:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001e24:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e26:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001e28:	4311      	orrs	r1, r2
 8001e2a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e2e:	4281      	cmp	r1, r0
 8001e30:	d002      	beq.n	8001e38 <HAL_ADC_Init+0xc4>
 8001e32:	1e48      	subs	r0, r1, #1
 8001e34:	2806      	cmp	r0, #6
 8001e36:	d807      	bhi.n	8001e48 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e38:	2507      	movs	r5, #7
 8001e3a:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001e3c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e3e:	43a8      	bics	r0, r5
 8001e40:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001e42:	6958      	ldr	r0, [r3, #20]
 8001e44:	4301      	orrs	r1, r0
 8001e46:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	491c      	ldr	r1, [pc, #112]	; (8001ebc <HAL_ADC_Init+0x148>)
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d111      	bne.n	8001e76 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8001e52:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001e54:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001e56:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8001e58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e5a:	4393      	bics	r3, r2
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	2301      	movs	r3, #1
 8001e60:	4313      	orrs	r3, r2
 8001e62:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e66:	2020      	movs	r0, #32
 8001e68:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001e6a:	4328      	orrs	r0, r5
 8001e6c:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e70:	4301      	orrs	r1, r0
 8001e72:	64a1      	str	r1, [r4, #72]	; 0x48
 8001e74:	e7cd      	b.n	8001e12 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8001e76:	2212      	movs	r2, #18
 8001e78:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	4393      	bics	r3, r2
 8001e7e:	001a      	movs	r2, r3
 8001e80:	2310      	movs	r3, #16
 8001e82:	4313      	orrs	r3, r2
 8001e84:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e88:	4303      	orrs	r3, r0
 8001e8a:	64a3      	str	r3, [r4, #72]	; 0x48
 8001e8c:	e7ea      	b.n	8001e64 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8e:	2310      	movs	r3, #16
 8001e90:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001e92:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e94:	4313      	orrs	r3, r2
 8001e96:	6463      	str	r3, [r4, #68]	; 0x44
 8001e98:	e7e4      	b.n	8001e64 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e9a:	2118      	movs	r1, #24
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	68a1      	ldr	r1, [r4, #8]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001ea6:	6919      	ldr	r1, [r3, #16]
 8001ea8:	6862      	ldr	r2, [r4, #4]
 8001eaa:	0089      	lsls	r1, r1, #2
 8001eac:	0889      	lsrs	r1, r1, #2
 8001eae:	4311      	orrs	r1, r2
 8001eb0:	6119      	str	r1, [r3, #16]
 8001eb2:	e78a      	b.n	8001dca <HAL_ADC_Init+0x56>
 8001eb4:	fffffefd 	.word	0xfffffefd
 8001eb8:	fffe0219 	.word	0xfffe0219
 8001ebc:	833fffe7 	.word	0x833fffe7

08001ec0 <HAL_ADC_Start_DMA>:
{
 8001ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ec2:	6803      	ldr	r3, [r0, #0]
{
 8001ec4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ec6:	689b      	ldr	r3, [r3, #8]
{
 8001ec8:	000f      	movs	r7, r1
 8001eca:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8001ecc:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ece:	075b      	lsls	r3, r3, #29
 8001ed0:	d430      	bmi.n	8001f34 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8001ed2:	0026      	movs	r6, r4
 8001ed4:	3640      	adds	r6, #64	; 0x40
 8001ed6:	7833      	ldrb	r3, [r6, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d02b      	beq.n	8001f34 <HAL_ADC_Start_DMA+0x74>
 8001edc:	2301      	movs	r3, #1
 8001ede:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ee0:	69e3      	ldr	r3, [r4, #28]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d127      	bne.n	8001f36 <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001eea:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001eec:	401a      	ands	r2, r3
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	6463      	str	r3, [r4, #68]	; 0x44
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ef6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001efa:	64a5      	str	r5, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8001efc:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001efe:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f02:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f04:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_ADC_Start_DMA+0x90>)
 8001f08:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f0a:	231c      	movs	r3, #28
 8001f0c:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f0e:	684a      	ldr	r2, [r1, #4]
 8001f10:	3b0c      	subs	r3, #12
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001f16:	2301      	movs	r3, #1
 8001f18:	68ca      	ldr	r2, [r1, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f1e:	003a      	movs	r2, r7
 8001f20:	3140      	adds	r1, #64	; 0x40
 8001f22:	9b01      	ldr	r3, [sp, #4]
 8001f24:	f000 f9cc 	bl	80022c0 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	0028      	movs	r0, r5
 8001f2c:	6822      	ldr	r2, [r4, #0]
 8001f2e:	6891      	ldr	r1, [r2, #8]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	6093      	str	r3, [r2, #8]
}
 8001f34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001f36:	0020      	movs	r0, r4
 8001f38:	f7ff fed0 	bl	8001cdc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d1f9      	bne.n	8001f34 <HAL_ADC_Start_DMA+0x74>
 8001f40:	e7d1      	b.n	8001ee6 <HAL_ADC_Start_DMA+0x26>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	fffff0fe 	.word	0xfffff0fe
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	08001fcb 	.word	0x08001fcb
 8001f50:	08001fd7 	.word	0x08001fd7

08001f54 <HAL_ADC_ConvCpltCallback>:
 8001f54:	4770      	bx	lr
	...

08001f58 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f58:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001f5c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f5e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f60:	4211      	tst	r1, r2
 8001f62:	d12a      	bne.n	8001fba <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f64:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f66:	32b1      	adds	r2, #177	; 0xb1
 8001f68:	32ff      	adds	r2, #255	; 0xff
 8001f6a:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f6c:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	0109      	lsls	r1, r1, #4
 8001f74:	68d0      	ldr	r0, [r2, #12]
 8001f76:	4208      	tst	r0, r1
 8001f78:	d112      	bne.n	8001fa0 <ADC_DMAConvCplt+0x48>
 8001f7a:	6a19      	ldr	r1, [r3, #32]
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	d10f      	bne.n	8001fa0 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f80:	6811      	ldr	r1, [r2, #0]
 8001f82:	0709      	lsls	r1, r1, #28
 8001f84:	d50c      	bpl.n	8001fa0 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f86:	6891      	ldr	r1, [r2, #8]
 8001f88:	0749      	lsls	r1, r1, #29
 8001f8a:	d40d      	bmi.n	8001fa8 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f8c:	200c      	movs	r0, #12
 8001f8e:	6851      	ldr	r1, [r2, #4]
 8001f90:	4381      	bics	r1, r0
 8001f92:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f96:	490b      	ldr	r1, [pc, #44]	; (8001fc4 <ADC_DMAConvCplt+0x6c>)
 8001f98:	4011      	ands	r1, r2
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff ffd7 	bl	8001f54 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001fa6:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa8:	2220      	movs	r2, #32
 8001faa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001fac:	430a      	orrs	r2, r1
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	649a      	str	r2, [r3, #72]	; 0x48
 8001fb8:	e7f2      	b.n	8001fa0 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4798      	blx	r3
}
 8001fc0:	e7f1      	b.n	8001fa6 <ADC_DMAConvCplt+0x4e>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	fffffefe 	.word	0xfffffefe

08001fc8 <HAL_ADC_ConvHalfCpltCallback>:
 8001fc8:	4770      	bx	lr

08001fca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fca:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001fcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001fce:	f7ff fffb 	bl	8001fc8 <HAL_ADC_ConvHalfCpltCallback>
}
 8001fd2:	bd10      	pop	{r4, pc}

08001fd4 <HAL_ADC_ErrorCallback>:
}
 8001fd4:	4770      	bx	lr

08001fd6 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fd6:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd8:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001fda:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001fea:	f7ff fff3 	bl	8001fd4 <HAL_ADC_ErrorCallback>
}
 8001fee:	bd10      	pop	{r4, pc}

08001ff0 <HAL_ADC_ConfigChannel>:
{
 8001ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001ff2:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001ff4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001ff6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001ff8:	3440      	adds	r4, #64	; 0x40
 8001ffa:	7823      	ldrb	r3, [r4, #0]
{
 8001ffc:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8001ffe:	2002      	movs	r0, #2
 8002000:	2b01      	cmp	r3, #1
 8002002:	d02b      	beq.n	800205c <HAL_ADC_ConfigChannel+0x6c>
 8002004:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002006:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002008:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800200a:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 800200c:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800200e:	0740      	lsls	r0, r0, #29
 8002010:	d452      	bmi.n	80020b8 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8002012:	482c      	ldr	r0, [pc, #176]	; (80020c4 <HAL_ADC_ConfigChannel+0xd4>)
 8002014:	684f      	ldr	r7, [r1, #4]
 8002016:	680d      	ldr	r5, [r1, #0]
 8002018:	4287      	cmp	r7, r0
 800201a:	d03b      	beq.n	8002094 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800201c:	40ab      	lsls	r3, r5
 800201e:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002020:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002022:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002024:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002026:	4338      	orrs	r0, r7
 8002028:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800202a:	429e      	cmp	r6, r3
 800202c:	d00f      	beq.n	800204e <HAL_ADC_ConfigChannel+0x5e>
 800202e:	3e01      	subs	r6, #1
 8002030:	2e06      	cmp	r6, #6
 8002032:	d90c      	bls.n	800204e <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002034:	688b      	ldr	r3, [r1, #8]
 8002036:	2107      	movs	r1, #7
 8002038:	6950      	ldr	r0, [r2, #20]
 800203a:	4008      	ands	r0, r1
 800203c:	4283      	cmp	r3, r0
 800203e:	d006      	beq.n	800204e <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002040:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002042:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002044:	4388      	bics	r0, r1
 8002046:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002048:	6950      	ldr	r0, [r2, #20]
 800204a:	4303      	orrs	r3, r0
 800204c:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800204e:	002b      	movs	r3, r5
 8002050:	3b10      	subs	r3, #16
 8002052:	2b01      	cmp	r3, #1
 8002054:	d903      	bls.n	800205e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002056:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002058:	2300      	movs	r3, #0
 800205a:	7023      	strb	r3, [r4, #0]
}
 800205c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_ADC_ConfigChannel+0xd8>)
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	2d10      	cmp	r5, #16
 8002066:	d013      	beq.n	8002090 <HAL_ADC_ConfigChannel+0xa0>
 8002068:	03d2      	lsls	r2, r2, #15
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800206e:	2d10      	cmp	r5, #16
 8002070:	d1f1      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_ADC_ConfigChannel+0xdc>)
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_ADC_ConfigChannel+0xe0>)
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	f7fe f858 	bl	800012c <__udivsi3>
 800207c:	230a      	movs	r3, #10
 800207e:	4358      	muls	r0, r3
 8002080:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8002082:	9b01      	ldr	r3, [sp, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0e6      	beq.n	8002056 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8002088:	9b01      	ldr	r3, [sp, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	e7f8      	b.n	8002082 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002090:	0412      	lsls	r2, r2, #16
 8002092:	e7ea      	b.n	800206a <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002094:	40ab      	lsls	r3, r5
 8002096:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002098:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800209a:	002b      	movs	r3, r5
 800209c:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800209e:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d8d8      	bhi.n	8002056 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_ADC_ConfigChannel+0xd8>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2d10      	cmp	r5, #16
 80020aa:	d003      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0xc4>
 80020ac:	4909      	ldr	r1, [pc, #36]	; (80020d4 <HAL_ADC_ConfigChannel+0xe4>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e7d0      	b.n	8002056 <HAL_ADC_ConfigChannel+0x66>
 80020b4:	4908      	ldr	r1, [pc, #32]	; (80020d8 <HAL_ADC_ConfigChannel+0xe8>)
 80020b6:	e7fa      	b.n	80020ae <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b8:	2220      	movs	r2, #32
 80020ba:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80020bc:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020be:	430a      	orrs	r2, r1
 80020c0:	646a      	str	r2, [r5, #68]	; 0x44
 80020c2:	e7c9      	b.n	8002058 <HAL_ADC_ConfigChannel+0x68>
 80020c4:	00001001 	.word	0x00001001
 80020c8:	40012708 	.word	0x40012708
 80020cc:	20000000 	.word	0x20000000
 80020d0:	000f4240 	.word	0x000f4240
 80020d4:	ffbfffff 	.word	0xffbfffff
 80020d8:	ff7fffff 	.word	0xff7fffff

080020dc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020de:	0006      	movs	r6, r0
 80020e0:	3640      	adds	r6, #64	; 0x40
 80020e2:	7833      	ldrb	r3, [r6, #0]
{
 80020e4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80020e6:	2002      	movs	r0, #2
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d042      	beq.n	8002172 <HAL_ADCEx_Calibration_Start+0x96>
 80020ec:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020ee:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80020f0:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	400a      	ands	r2, r1
 80020f8:	2a01      	cmp	r2, #1
 80020fa:	d105      	bne.n	8002108 <HAL_ADCEx_Calibration_Start+0x2c>
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	4211      	tst	r1, r2
 8002100:	d138      	bne.n	8002174 <HAL_ADCEx_Calibration_Start+0x98>
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	0412      	lsls	r2, r2, #16
 8002106:	d435      	bmi.n	8002174 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002108:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800210a:	491d      	ldr	r1, [pc, #116]	; (8002180 <HAL_ADCEx_Calibration_Start+0xa4>)
 800210c:	4011      	ands	r1, r2
 800210e:	2202      	movs	r2, #2
 8002110:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002112:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8002114:	6462      	str	r2, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002116:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	438a      	bics	r2, r1
 800211c:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	0612      	lsls	r2, r2, #24
 8002124:	430a      	orrs	r2, r1
 8002126:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002128:	f7ff fdd2 	bl	8001cd0 <HAL_GetTick>
 800212c:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	2a00      	cmp	r2, #0
 8002134:	db0e      	blt.n	8002154 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002136:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002138:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800213a:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800213c:	430d      	orrs	r5, r1
 800213e:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002140:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002142:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8002144:	4393      	bics	r3, r2
 8002146:	001a      	movs	r2, r3
 8002148:	2301      	movs	r3, #1
 800214a:	4313      	orrs	r3, r2
 800214c:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214e:	2300      	movs	r3, #0
 8002150:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8002152:	e00e      	b.n	8002172 <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002154:	f7ff fdbc 	bl	8001cd0 <HAL_GetTick>
 8002158:	1bc0      	subs	r0, r0, r7
 800215a:	2802      	cmp	r0, #2
 800215c:	d9e7      	bls.n	800212e <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 800215e:	2212      	movs	r2, #18
 8002160:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8002162:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8002164:	4393      	bics	r3, r2
 8002166:	001a      	movs	r2, r3
 8002168:	2310      	movs	r3, #16
 800216a:	4313      	orrs	r3, r2
 800216c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800216e:	2300      	movs	r3, #0
 8002170:	7033      	strb	r3, [r6, #0]
}
 8002172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	2320      	movs	r3, #32
 8002176:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002178:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800217a:	4313      	orrs	r3, r2
 800217c:	6463      	str	r3, [r4, #68]	; 0x44
 800217e:	e7e6      	b.n	800214e <HAL_ADCEx_Calibration_Start+0x72>
 8002180:	fffffefd 	.word	0xfffffefd

08002184 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002188:	2800      	cmp	r0, #0
 800218a:	da14      	bge.n	80021b6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800218c:	230f      	movs	r3, #15
 800218e:	b2c0      	uxtb	r0, r0
 8002190:	4003      	ands	r3, r0
 8002192:	3b08      	subs	r3, #8
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_NVIC_SetPriority+0x58>)
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	189b      	adds	r3, r3, r2
 800219c:	2203      	movs	r2, #3
 800219e:	4010      	ands	r0, r2
 80021a0:	4090      	lsls	r0, r2
 80021a2:	32fc      	adds	r2, #252	; 0xfc
 80021a4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021aa:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ac:	69dc      	ldr	r4, [r3, #28]
 80021ae:	43ac      	bics	r4, r5
 80021b0:	4321      	orrs	r1, r4
 80021b2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021b6:	2503      	movs	r5, #3
 80021b8:	0883      	lsrs	r3, r0, #2
 80021ba:	4028      	ands	r0, r5
 80021bc:	40a8      	lsls	r0, r5
 80021be:	35fc      	adds	r5, #252	; 0xfc
 80021c0:	002e      	movs	r6, r5
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_NVIC_SetPriority+0x5c>)
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	189b      	adds	r3, r3, r2
 80021c8:	22c0      	movs	r2, #192	; 0xc0
 80021ca:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021cc:	4029      	ands	r1, r5
 80021ce:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	589c      	ldr	r4, [r3, r2]
 80021d4:	43b4      	bics	r4, r6
 80021d6:	4321      	orrs	r1, r4
 80021d8:	5099      	str	r1, [r3, r2]
 80021da:	e7eb      	b.n	80021b4 <HAL_NVIC_SetPriority+0x30>
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80021e4:	231f      	movs	r3, #31
 80021e6:	4018      	ands	r0, r3
 80021e8:	3b1e      	subs	r3, #30
 80021ea:	4083      	lsls	r3, r0
 80021ec:	4a01      	ldr	r2, [pc, #4]	; (80021f4 <HAL_NVIC_EnableIRQ+0x10>)
 80021ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80021f0:	4770      	bx	lr
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_SYSTICK_Config+0x28>)
 80021fa:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fc:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d80d      	bhi.n	800221e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002202:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002204:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002206:	4808      	ldr	r0, [pc, #32]	; (8002228 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002208:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800220a:	6a03      	ldr	r3, [r0, #32]
 800220c:	0609      	lsls	r1, r1, #24
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	430b      	orrs	r3, r1
 8002214:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002216:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002218:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800221e:	4770      	bx	lr
 8002220:	00ffffff 	.word	0x00ffffff
 8002224:	e000e010 	.word	0xe000e010
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800222e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002230:	2804      	cmp	r0, #4
 8002232:	d102      	bne.n	800223a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002234:	4310      	orrs	r0, r2
 8002236:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002238:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800223a:	2104      	movs	r1, #4
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	e7fa      	b.n	8002238 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002248:	4770      	bx	lr

0800224a <HAL_SYSTICK_IRQHandler>:
{
 800224a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800224c:	f7ff fffc 	bl	8002248 <HAL_SYSTICK_Callback>
}
 8002250:	bd10      	pop	{r4, pc}
	...

08002254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8002258:	2001      	movs	r0, #1
  if(NULL == hdma)
 800225a:	2c00      	cmp	r4, #0
 800225c:	d028      	beq.n	80022b0 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800225e:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002260:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002262:	1ca5      	adds	r5, r4, #2
 8002264:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8002266:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800226a:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800226c:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800226e:	6863      	ldr	r3, [r4, #4]
 8002270:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002272:	68e1      	ldr	r1, [r4, #12]
 8002274:	430b      	orrs	r3, r1
 8002276:	6921      	ldr	r1, [r4, #16]
 8002278:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800227a:	6961      	ldr	r1, [r4, #20]
 800227c:	430b      	orrs	r3, r1
 800227e:	69a1      	ldr	r1, [r4, #24]
 8002280:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002282:	69e1      	ldr	r1, [r4, #28]
 8002284:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002286:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002288:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_DMA_Init+0x64>)
 800228c:	2114      	movs	r1, #20
 800228e:	18c0      	adds	r0, r0, r3
 8002290:	f7fd ff4c 	bl	800012c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002296:	0080      	lsls	r0, r0, #2
 8002298:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800229a:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 800229c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800229e:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 80022a0:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80022a2:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80022a4:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80022a6:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a8:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80022aa:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80022ac:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80022ae:	77e0      	strb	r0, [r4, #31]
}  
 80022b0:	bd70      	pop	{r4, r5, r6, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	ffffc00f 	.word	0xffffc00f
 80022b8:	bffdfff8 	.word	0xbffdfff8
 80022bc:	40020000 	.word	0x40020000

080022c0 <HAL_DMA_Start_IT>:
{
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80022c2:	1c46      	adds	r6, r0, #1
 80022c4:	7ff5      	ldrb	r5, [r6, #31]
 80022c6:	2402      	movs	r4, #2
 80022c8:	2d01      	cmp	r5, #1
 80022ca:	d026      	beq.n	800231a <HAL_DMA_Start_IT+0x5a>
 80022cc:	2501      	movs	r5, #1
 80022ce:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d0:	1905      	adds	r5, r0, r4
 80022d2:	46ac      	mov	ip, r5
 80022d4:	7fed      	ldrb	r5, [r5, #31]
 80022d6:	2700      	movs	r7, #0
 80022d8:	b2ed      	uxtb	r5, r5
 80022da:	2d01      	cmp	r5, #1
 80022dc:	d129      	bne.n	8002332 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80022de:	4666      	mov	r6, ip
 80022e0:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022e2:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e4:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022e6:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022e8:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022ea:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022ec:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022ee:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022f0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80022f2:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80022f4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022f6:	6843      	ldr	r3, [r0, #4]
 80022f8:	6805      	ldr	r5, [r0, #0]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d10f      	bne.n	800231e <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 80022fe:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002300:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002302:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002304:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00c      	beq.n	8002324 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800230a:	230e      	movs	r3, #14
 800230c:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800230e:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002310:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8002312:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002314:	682a      	ldr	r2, [r5, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	602b      	str	r3, [r5, #0]
} 
 800231a:	0020      	movs	r0, r4
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800231e:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002320:	60e2      	str	r2, [r4, #12]
 8002322:	e7ee      	b.n	8002302 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002324:	230a      	movs	r3, #10
 8002326:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002328:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800232a:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	4393      	bics	r3, r2
 8002330:	e7ed      	b.n	800230e <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 8002332:	77f7      	strb	r7, [r6, #31]
 8002334:	e7f1      	b.n	800231a <HAL_DMA_Start_IT+0x5a>

08002336 <HAL_DMA_Abort_IT>:
{  
 8002336:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002338:	1c84      	adds	r4, r0, #2
 800233a:	7fe3      	ldrb	r3, [r4, #31]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d004      	beq.n	800234a <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002340:	2304      	movs	r3, #4
 8002342:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002344:	3b03      	subs	r3, #3
}
 8002346:	0018      	movs	r0, r3
 8002348:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800234a:	210e      	movs	r1, #14
 800234c:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800234e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	438a      	bics	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002356:	2201      	movs	r2, #1
 8002358:	6819      	ldr	r1, [r3, #0]
 800235a:	4391      	bics	r1, r2
 800235c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800235e:	0011      	movs	r1, r2
 8002360:	40a9      	lsls	r1, r5
 8002362:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002364:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002366:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002368:	2400      	movs	r4, #0
 800236a:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 800236c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800236e:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002372:	42a2      	cmp	r2, r4
 8002374:	d0e7      	beq.n	8002346 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002376:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	0023      	movs	r3, r4
 800237a:	e7e4      	b.n	8002346 <HAL_DMA_Abort_IT+0x10>

0800237c <HAL_DMA_IRQHandler>:
{
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800237e:	2704      	movs	r7, #4
 8002380:	003e      	movs	r6, r7
 8002382:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002384:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002386:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002388:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800238a:	6803      	ldr	r3, [r0, #0]
 800238c:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800238e:	422e      	tst	r6, r5
 8002390:	d00d      	beq.n	80023ae <HAL_DMA_IRQHandler+0x32>
 8002392:	423c      	tst	r4, r7
 8002394:	d00b      	beq.n	80023ae <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	0689      	lsls	r1, r1, #26
 800239a:	d402      	bmi.n	80023a2 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	43b9      	bics	r1, r7
 80023a0:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80023a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80023a4:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d019      	beq.n	80023de <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 80023aa:	4798      	blx	r3
}  
 80023ac:	e017      	b.n	80023de <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80023ae:	2702      	movs	r7, #2
 80023b0:	003e      	movs	r6, r7
 80023b2:	408e      	lsls	r6, r1
 80023b4:	422e      	tst	r6, r5
 80023b6:	d013      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x64>
 80023b8:	423c      	tst	r4, r7
 80023ba:	d011      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	0689      	lsls	r1, r1, #26
 80023c0:	d406      	bmi.n	80023d0 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80023c2:	240a      	movs	r4, #10
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	43a1      	bics	r1, r4
 80023c8:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80023ca:	2101      	movs	r1, #1
 80023cc:	19c3      	adds	r3, r0, r7
 80023ce:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80023d0:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80023d2:	2200      	movs	r2, #0
 80023d4:	1c43      	adds	r3, r0, #1
 80023d6:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 80023d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d1e5      	bne.n	80023aa <HAL_DMA_IRQHandler+0x2e>
}  
 80023de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023e0:	2608      	movs	r6, #8
 80023e2:	0037      	movs	r7, r6
 80023e4:	408f      	lsls	r7, r1
 80023e6:	423d      	tst	r5, r7
 80023e8:	d0f9      	beq.n	80023de <HAL_DMA_IRQHandler+0x62>
 80023ea:	4234      	tst	r4, r6
 80023ec:	d0f7      	beq.n	80023de <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ee:	250e      	movs	r5, #14
 80023f0:	681c      	ldr	r4, [r3, #0]
 80023f2:	43ac      	bics	r4, r5
 80023f4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023f6:	2301      	movs	r3, #1
 80023f8:	001c      	movs	r4, r3
 80023fa:	408c      	lsls	r4, r1
 80023fc:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 80023fe:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002400:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002402:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8002404:	2200      	movs	r2, #0
 8002406:	18c3      	adds	r3, r0, r3
 8002408:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 800240a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800240c:	e7e5      	b.n	80023da <HAL_DMA_IRQHandler+0x5e>
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002410:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002412:	680b      	ldr	r3, [r1, #0]
{ 
 8002414:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002416:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8002418:	2300      	movs	r3, #0
{ 
 800241a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800241c:	9a02      	ldr	r2, [sp, #8]
 800241e:	40da      	lsrs	r2, r3
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8002422:	b007      	add	sp, #28
 8002424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002426:	2201      	movs	r2, #1
 8002428:	409a      	lsls	r2, r3
 800242a:	9203      	str	r2, [sp, #12]
 800242c:	9903      	ldr	r1, [sp, #12]
 800242e:	9a02      	ldr	r2, [sp, #8]
 8002430:	400a      	ands	r2, r1
 8002432:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8002434:	d100      	bne.n	8002438 <HAL_GPIO_Init+0x28>
 8002436:	e08c      	b.n	8002552 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002438:	9a01      	ldr	r2, [sp, #4]
 800243a:	2110      	movs	r1, #16
 800243c:	6852      	ldr	r2, [r2, #4]
 800243e:	0016      	movs	r6, r2
 8002440:	438e      	bics	r6, r1
 8002442:	2e02      	cmp	r6, #2
 8002444:	d10e      	bne.n	8002464 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002446:	2507      	movs	r5, #7
 8002448:	401d      	ands	r5, r3
 800244a:	00ad      	lsls	r5, r5, #2
 800244c:	3901      	subs	r1, #1
 800244e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8002450:	08dc      	lsrs	r4, r3, #3
 8002452:	00a4      	lsls	r4, r4, #2
 8002454:	1904      	adds	r4, r0, r4
 8002456:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002458:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800245a:	9901      	ldr	r1, [sp, #4]
 800245c:	6909      	ldr	r1, [r1, #16]
 800245e:	40a9      	lsls	r1, r5
 8002460:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8002462:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002464:	2403      	movs	r4, #3
 8002466:	005f      	lsls	r7, r3, #1
 8002468:	40bc      	lsls	r4, r7
 800246a:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800246c:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800246e:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002470:	4025      	ands	r5, r4
 8002472:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002474:	2503      	movs	r5, #3
 8002476:	4015      	ands	r5, r2
 8002478:	40bd      	lsls	r5, r7
 800247a:	4661      	mov	r1, ip
 800247c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800247e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002480:	2e01      	cmp	r6, #1
 8002482:	d80f      	bhi.n	80024a4 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002484:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8002486:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002488:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800248a:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800248c:	40bd      	lsls	r5, r7
 800248e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002490:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002492:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002494:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002496:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002498:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800249a:	2101      	movs	r1, #1
 800249c:	400d      	ands	r5, r1
 800249e:	409d      	lsls	r5, r3
 80024a0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80024a2:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80024a4:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80024a6:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024a8:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80024aa:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80024ac:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80024ae:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80024b0:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80024b2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80024b4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80024b6:	420a      	tst	r2, r1
 80024b8:	d04b      	beq.n	8002552 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	2101      	movs	r1, #1
 80024bc:	4c26      	ldr	r4, [pc, #152]	; (8002558 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80024be:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c0:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80024c2:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c4:	430d      	orrs	r5, r1
 80024c6:	61a5      	str	r5, [r4, #24]
 80024c8:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 80024ca:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024cc:	400c      	ands	r4, r1
 80024ce:	9405      	str	r4, [sp, #20]
 80024d0:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80024d2:	240f      	movs	r4, #15
 80024d4:	4921      	ldr	r1, [pc, #132]	; (800255c <HAL_GPIO_Init+0x14c>)
 80024d6:	00ad      	lsls	r5, r5, #2
 80024d8:	00b6      	lsls	r6, r6, #2
 80024da:	186d      	adds	r5, r5, r1
 80024dc:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024de:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 80024e0:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024e2:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80024e4:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024e6:	2400      	movs	r4, #0
 80024e8:	4288      	cmp	r0, r1
 80024ea:	d00c      	beq.n	8002506 <HAL_GPIO_Init+0xf6>
 80024ec:	491c      	ldr	r1, [pc, #112]	; (8002560 <HAL_GPIO_Init+0x150>)
 80024ee:	3401      	adds	r4, #1
 80024f0:	4288      	cmp	r0, r1
 80024f2:	d008      	beq.n	8002506 <HAL_GPIO_Init+0xf6>
 80024f4:	491b      	ldr	r1, [pc, #108]	; (8002564 <HAL_GPIO_Init+0x154>)
 80024f6:	3401      	adds	r4, #1
 80024f8:	4288      	cmp	r0, r1
 80024fa:	d004      	beq.n	8002506 <HAL_GPIO_Init+0xf6>
 80024fc:	491a      	ldr	r1, [pc, #104]	; (8002568 <HAL_GPIO_Init+0x158>)
 80024fe:	3403      	adds	r4, #3
 8002500:	4288      	cmp	r0, r1
 8002502:	d100      	bne.n	8002506 <HAL_GPIO_Init+0xf6>
 8002504:	3c02      	subs	r4, #2
 8002506:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002508:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 800250c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800250e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8002510:	4c16      	ldr	r4, [pc, #88]	; (800256c <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002512:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8002514:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8002516:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002518:	03d1      	lsls	r1, r2, #15
 800251a:	d401      	bmi.n	8002520 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800251c:	003e      	movs	r6, r7
 800251e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8002520:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8002522:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8002524:	9e00      	ldr	r6, [sp, #0]
 8002526:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002528:	0391      	lsls	r1, r2, #14
 800252a:	d401      	bmi.n	8002530 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800252c:	003e      	movs	r6, r7
 800252e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8002530:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8002532:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8002534:	9e00      	ldr	r6, [sp, #0]
 8002536:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002538:	02d1      	lsls	r1, r2, #11
 800253a:	d401      	bmi.n	8002540 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800253c:	003e      	movs	r6, r7
 800253e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8002540:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8002542:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8002544:	9f00      	ldr	r7, [sp, #0]
 8002546:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002548:	0292      	lsls	r2, r2, #10
 800254a:	d401      	bmi.n	8002550 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800254c:	402e      	ands	r6, r5
 800254e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8002550:	60e7      	str	r7, [r4, #12]
    position++;
 8002552:	3301      	adds	r3, #1
 8002554:	e762      	b.n	800241c <HAL_GPIO_Init+0xc>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	40021000 	.word	0x40021000
 800255c:	40010000 	.word	0x40010000
 8002560:	48000400 	.word	0x48000400
 8002564:	48000800 	.word	0x48000800
 8002568:	48000c00 	.word	0x48000c00
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002570:	6900      	ldr	r0, [r0, #16]
 8002572:	4008      	ands	r0, r1
 8002574:	1e41      	subs	r1, r0, #1
 8002576:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002578:	b2c0      	uxtb	r0, r0
  }
 800257a:	4770      	bx	lr

0800257c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800257c:	2a00      	cmp	r2, #0
 800257e:	d001      	beq.n	8002584 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002580:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002582:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002584:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002586:	e7fc      	b.n	8002582 <HAL_GPIO_WritePin+0x6>

08002588 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800258a:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	4210      	tst	r0, r2
 8002590:	d002      	beq.n	8002598 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002592:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002594:	f001 f9da 	bl	800394c <HAL_GPIO_EXTI_Callback>
  }
}
 8002598:	bd10      	pop	{r4, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	6803      	ldr	r3, [r0, #0]
{
 80025a4:	b085      	sub	sp, #20
 80025a6:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a8:	07db      	lsls	r3, r3, #31
 80025aa:	d42f      	bmi.n	800260c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ac:	682b      	ldr	r3, [r5, #0]
 80025ae:	079b      	lsls	r3, r3, #30
 80025b0:	d500      	bpl.n	80025b4 <HAL_RCC_OscConfig+0x14>
 80025b2:	e081      	b.n	80026b8 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b4:	682b      	ldr	r3, [r5, #0]
 80025b6:	071b      	lsls	r3, r3, #28
 80025b8:	d500      	bpl.n	80025bc <HAL_RCC_OscConfig+0x1c>
 80025ba:	e0bc      	b.n	8002736 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	075b      	lsls	r3, r3, #29
 80025c0:	d500      	bpl.n	80025c4 <HAL_RCC_OscConfig+0x24>
 80025c2:	e0df      	b.n	8002784 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80025c4:	682b      	ldr	r3, [r5, #0]
 80025c6:	06db      	lsls	r3, r3, #27
 80025c8:	d51a      	bpl.n	8002600 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80025ca:	696a      	ldr	r2, [r5, #20]
 80025cc:	4cb5      	ldr	r4, [pc, #724]	; (80028a4 <HAL_RCC_OscConfig+0x304>)
 80025ce:	2304      	movs	r3, #4
 80025d0:	2a01      	cmp	r2, #1
 80025d2:	d000      	beq.n	80025d6 <HAL_RCC_OscConfig+0x36>
 80025d4:	e14b      	b.n	800286e <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025d6:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025d8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80025da:	430b      	orrs	r3, r1
 80025dc:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80025de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025e0:	431a      	orrs	r2, r3
 80025e2:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80025e4:	f7ff fb74 	bl	8001cd0 <HAL_GetTick>
 80025e8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025ec:	4233      	tst	r3, r6
 80025ee:	d100      	bne.n	80025f2 <HAL_RCC_OscConfig+0x52>
 80025f0:	e136      	b.n	8002860 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025f2:	21f8      	movs	r1, #248	; 0xf8
 80025f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80025f6:	69ab      	ldr	r3, [r5, #24]
 80025f8:	438a      	bics	r2, r1
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002600:	6a29      	ldr	r1, [r5, #32]
 8002602:	2900      	cmp	r1, #0
 8002604:	d000      	beq.n	8002608 <HAL_RCC_OscConfig+0x68>
 8002606:	e159      	b.n	80028bc <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002608:	2000      	movs	r0, #0
 800260a:	e013      	b.n	8002634 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800260c:	210c      	movs	r1, #12
 800260e:	4ca5      	ldr	r4, [pc, #660]	; (80028a4 <HAL_RCC_OscConfig+0x304>)
 8002610:	6862      	ldr	r2, [r4, #4]
 8002612:	400a      	ands	r2, r1
 8002614:	2a04      	cmp	r2, #4
 8002616:	d006      	beq.n	8002626 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002618:	6863      	ldr	r3, [r4, #4]
 800261a:	400b      	ands	r3, r1
 800261c:	2b08      	cmp	r3, #8
 800261e:	d10b      	bne.n	8002638 <HAL_RCC_OscConfig+0x98>
 8002620:	6863      	ldr	r3, [r4, #4]
 8002622:	03db      	lsls	r3, r3, #15
 8002624:	d508      	bpl.n	8002638 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	039b      	lsls	r3, r3, #14
 800262a:	d5bf      	bpl.n	80025ac <HAL_RCC_OscConfig+0xc>
 800262c:	686b      	ldr	r3, [r5, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1bc      	bne.n	80025ac <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002632:	2001      	movs	r0, #1
}
 8002634:	b005      	add	sp, #20
 8002636:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002638:	686b      	ldr	r3, [r5, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d113      	bne.n	8002666 <HAL_RCC_OscConfig+0xc6>
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	025b      	lsls	r3, r3, #9
 8002644:	4313      	orrs	r3, r2
 8002646:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002648:	f7ff fb42 	bl	8001cd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800264e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002650:	02b6      	lsls	r6, r6, #10
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	4233      	tst	r3, r6
 8002656:	d1a9      	bne.n	80025ac <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002658:	f7ff fb3a 	bl	8001cd0 <HAL_GetTick>
 800265c:	1bc0      	subs	r0, r0, r7
 800265e:	2864      	cmp	r0, #100	; 0x64
 8002660:	d9f7      	bls.n	8002652 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8002662:	2003      	movs	r0, #3
 8002664:	e7e6      	b.n	8002634 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002666:	2b00      	cmp	r3, #0
 8002668:	d116      	bne.n	8002698 <HAL_RCC_OscConfig+0xf8>
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	4a8e      	ldr	r2, [pc, #568]	; (80028a8 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002670:	4013      	ands	r3, r2
 8002672:	6023      	str	r3, [r4, #0]
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	4a8d      	ldr	r2, [pc, #564]	; (80028ac <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002678:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267a:	4013      	ands	r3, r2
 800267c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800267e:	f7ff fb27 	bl	8001cd0 <HAL_GetTick>
 8002682:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	4233      	tst	r3, r6
 8002688:	d100      	bne.n	800268c <HAL_RCC_OscConfig+0xec>
 800268a:	e78f      	b.n	80025ac <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fb20 	bl	8001cd0 <HAL_GetTick>
 8002690:	1bc0      	subs	r0, r0, r7
 8002692:	2864      	cmp	r0, #100	; 0x64
 8002694:	d9f6      	bls.n	8002684 <HAL_RCC_OscConfig+0xe4>
 8002696:	e7e4      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	2b05      	cmp	r3, #5
 800269a:	d105      	bne.n	80026a8 <HAL_RCC_OscConfig+0x108>
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	02db      	lsls	r3, r3, #11
 80026a2:	4313      	orrs	r3, r2
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	e7ca      	b.n	800263e <HAL_RCC_OscConfig+0x9e>
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	4a7f      	ldr	r2, [pc, #508]	; (80028a8 <HAL_RCC_OscConfig+0x308>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	6023      	str	r3, [r4, #0]
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	4a7e      	ldr	r2, [pc, #504]	; (80028ac <HAL_RCC_OscConfig+0x30c>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	e7c6      	b.n	8002646 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026b8:	220c      	movs	r2, #12
 80026ba:	4c7a      	ldr	r4, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x304>)
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	4213      	tst	r3, r2
 80026c0:	d006      	beq.n	80026d0 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026c2:	6863      	ldr	r3, [r4, #4]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d110      	bne.n	80026ec <HAL_RCC_OscConfig+0x14c>
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	03db      	lsls	r3, r3, #15
 80026ce:	d40d      	bmi.n	80026ec <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	079b      	lsls	r3, r3, #30
 80026d4:	d502      	bpl.n	80026dc <HAL_RCC_OscConfig+0x13c>
 80026d6:	68eb      	ldr	r3, [r5, #12]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d1aa      	bne.n	8002632 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026dc:	21f8      	movs	r1, #248	; 0xf8
 80026de:	6822      	ldr	r2, [r4, #0]
 80026e0:	692b      	ldr	r3, [r5, #16]
 80026e2:	438a      	bics	r2, r1
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4313      	orrs	r3, r2
 80026e8:	6023      	str	r3, [r4, #0]
 80026ea:	e763      	b.n	80025b4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ec:	68ea      	ldr	r2, [r5, #12]
 80026ee:	2301      	movs	r3, #1
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d00f      	beq.n	8002714 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 80026f4:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80026f8:	4313      	orrs	r3, r2
 80026fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80026fc:	f7ff fae8 	bl	8001cd0 <HAL_GetTick>
 8002700:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	4233      	tst	r3, r6
 8002706:	d1e9      	bne.n	80026dc <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002708:	f7ff fae2 	bl	8001cd0 <HAL_GetTick>
 800270c:	1bc0      	subs	r0, r0, r7
 800270e:	2802      	cmp	r0, #2
 8002710:	d9f7      	bls.n	8002702 <HAL_RCC_OscConfig+0x162>
 8002712:	e7a6      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8002714:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8002718:	439a      	bics	r2, r3
 800271a:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 800271c:	f7ff fad8 	bl	8001cd0 <HAL_GetTick>
 8002720:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	4233      	tst	r3, r6
 8002726:	d100      	bne.n	800272a <HAL_RCC_OscConfig+0x18a>
 8002728:	e744      	b.n	80025b4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272a:	f7ff fad1 	bl	8001cd0 <HAL_GetTick>
 800272e:	1bc0      	subs	r0, r0, r7
 8002730:	2802      	cmp	r0, #2
 8002732:	d9f6      	bls.n	8002722 <HAL_RCC_OscConfig+0x182>
 8002734:	e795      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002736:	69ea      	ldr	r2, [r5, #28]
 8002738:	2301      	movs	r3, #1
 800273a:	4c5a      	ldr	r4, [pc, #360]	; (80028a4 <HAL_RCC_OscConfig+0x304>)
 800273c:	2a00      	cmp	r2, #0
 800273e:	d010      	beq.n	8002762 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8002740:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8002744:	4313      	orrs	r3, r2
 8002746:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002748:	f7ff fac2 	bl	8001cd0 <HAL_GetTick>
 800274c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002750:	4233      	tst	r3, r6
 8002752:	d000      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b6>
 8002754:	e732      	b.n	80025bc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002756:	f7ff fabb 	bl	8001cd0 <HAL_GetTick>
 800275a:	1bc0      	subs	r0, r0, r7
 800275c:	2802      	cmp	r0, #2
 800275e:	d9f6      	bls.n	800274e <HAL_RCC_OscConfig+0x1ae>
 8002760:	e77f      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8002762:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8002766:	439a      	bics	r2, r3
 8002768:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800276a:	f7ff fab1 	bl	8001cd0 <HAL_GetTick>
 800276e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002772:	4233      	tst	r3, r6
 8002774:	d100      	bne.n	8002778 <HAL_RCC_OscConfig+0x1d8>
 8002776:	e721      	b.n	80025bc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002778:	f7ff faaa 	bl	8001cd0 <HAL_GetTick>
 800277c:	1bc0      	subs	r0, r0, r7
 800277e:	2802      	cmp	r0, #2
 8002780:	d9f6      	bls.n	8002770 <HAL_RCC_OscConfig+0x1d0>
 8002782:	e76e      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002784:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002788:	4c46      	ldr	r4, [pc, #280]	; (80028a4 <HAL_RCC_OscConfig+0x304>)
 800278a:	0552      	lsls	r2, r2, #21
 800278c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800278e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002790:	4213      	tst	r3, r2
 8002792:	d108      	bne.n	80027a6 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	69e3      	ldr	r3, [r4, #28]
 8002796:	4313      	orrs	r3, r2
 8002798:	61e3      	str	r3, [r4, #28]
 800279a:	69e3      	ldr	r3, [r4, #28]
 800279c:	4013      	ands	r3, r2
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	2780      	movs	r7, #128	; 0x80
 80027a8:	4e41      	ldr	r6, [pc, #260]	; (80028b0 <HAL_RCC_OscConfig+0x310>)
 80027aa:	007f      	lsls	r7, r7, #1
 80027ac:	6833      	ldr	r3, [r6, #0]
 80027ae:	423b      	tst	r3, r7
 80027b0:	d006      	beq.n	80027c0 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b2:	68ab      	ldr	r3, [r5, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d113      	bne.n	80027e0 <HAL_RCC_OscConfig+0x240>
 80027b8:	6a22      	ldr	r2, [r4, #32]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	6223      	str	r3, [r4, #32]
 80027be:	e030      	b.n	8002822 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c0:	6833      	ldr	r3, [r6, #0]
 80027c2:	433b      	orrs	r3, r7
 80027c4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80027c6:	f7ff fa83 	bl	8001cd0 <HAL_GetTick>
 80027ca:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	6833      	ldr	r3, [r6, #0]
 80027ce:	423b      	tst	r3, r7
 80027d0:	d1ef      	bne.n	80027b2 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7ff fa7d 	bl	8001cd0 <HAL_GetTick>
 80027d6:	9b01      	ldr	r3, [sp, #4]
 80027d8:	1ac0      	subs	r0, r0, r3
 80027da:	2864      	cmp	r0, #100	; 0x64
 80027dc:	d9f6      	bls.n	80027cc <HAL_RCC_OscConfig+0x22c>
 80027de:	e740      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
 80027e0:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d114      	bne.n	8002810 <HAL_RCC_OscConfig+0x270>
 80027e6:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ea:	4393      	bics	r3, r2
 80027ec:	6223      	str	r3, [r4, #32]
 80027ee:	6a23      	ldr	r3, [r4, #32]
 80027f0:	3203      	adds	r2, #3
 80027f2:	4393      	bics	r3, r2
 80027f4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80027f6:	f7ff fa6b 	bl	8001cd0 <HAL_GetTick>
 80027fa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	6a23      	ldr	r3, [r4, #32]
 80027fe:	423b      	tst	r3, r7
 8002800:	d025      	beq.n	800284e <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7ff fa65 	bl	8001cd0 <HAL_GetTick>
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_OscConfig+0x314>)
 8002808:	1b80      	subs	r0, r0, r6
 800280a:	4298      	cmp	r0, r3
 800280c:	d9f6      	bls.n	80027fc <HAL_RCC_OscConfig+0x25c>
 800280e:	e728      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	2b05      	cmp	r3, #5
 8002812:	d10b      	bne.n	800282c <HAL_RCC_OscConfig+0x28c>
 8002814:	6a21      	ldr	r1, [r4, #32]
 8002816:	3b01      	subs	r3, #1
 8002818:	430b      	orrs	r3, r1
 800281a:	6223      	str	r3, [r4, #32]
 800281c:	6a23      	ldr	r3, [r4, #32]
 800281e:	431a      	orrs	r2, r3
 8002820:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8002822:	f7ff fa55 	bl	8001cd0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002828:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	e00d      	b.n	8002848 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	6a23      	ldr	r3, [r4, #32]
 800282e:	4393      	bics	r3, r2
 8002830:	2204      	movs	r2, #4
 8002832:	6223      	str	r3, [r4, #32]
 8002834:	6a23      	ldr	r3, [r4, #32]
 8002836:	4393      	bics	r3, r2
 8002838:	e7c0      	b.n	80027bc <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7ff fa49 	bl	8001cd0 <HAL_GetTick>
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCC_OscConfig+0x314>)
 8002840:	1b80      	subs	r0, r0, r6
 8002842:	4298      	cmp	r0, r3
 8002844:	d900      	bls.n	8002848 <HAL_RCC_OscConfig+0x2a8>
 8002846:	e70c      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	6a23      	ldr	r3, [r4, #32]
 800284a:	423b      	tst	r3, r7
 800284c:	d0f5      	beq.n	800283a <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 800284e:	9b00      	ldr	r3, [sp, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d000      	beq.n	8002856 <HAL_RCC_OscConfig+0x2b6>
 8002854:	e6b6      	b.n	80025c4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	69e3      	ldr	r3, [r4, #28]
 8002858:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <HAL_RCC_OscConfig+0x318>)
 800285a:	4013      	ands	r3, r2
 800285c:	61e3      	str	r3, [r4, #28]
 800285e:	e6b1      	b.n	80025c4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002860:	f7ff fa36 	bl	8001cd0 <HAL_GetTick>
 8002864:	1bc0      	subs	r0, r0, r7
 8002866:	2802      	cmp	r0, #2
 8002868:	d800      	bhi.n	800286c <HAL_RCC_OscConfig+0x2cc>
 800286a:	e6be      	b.n	80025ea <HAL_RCC_OscConfig+0x4a>
 800286c:	e6f9      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800286e:	3205      	adds	r2, #5
 8002870:	d103      	bne.n	800287a <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002872:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002874:	439a      	bics	r2, r3
 8002876:	6362      	str	r2, [r4, #52]	; 0x34
 8002878:	e6bb      	b.n	80025f2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 800287a:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800287c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800287e:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002880:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002882:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002886:	4393      	bics	r3, r2
 8002888:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800288a:	f7ff fa21 	bl	8001cd0 <HAL_GetTick>
 800288e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002892:	4233      	tst	r3, r6
 8002894:	d100      	bne.n	8002898 <HAL_RCC_OscConfig+0x2f8>
 8002896:	e6b3      	b.n	8002600 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002898:	f7ff fa1a 	bl	8001cd0 <HAL_GetTick>
 800289c:	1bc0      	subs	r0, r0, r7
 800289e:	2802      	cmp	r0, #2
 80028a0:	d9f6      	bls.n	8002890 <HAL_RCC_OscConfig+0x2f0>
 80028a2:	e6de      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
 80028a4:	40021000 	.word	0x40021000
 80028a8:	fffeffff 	.word	0xfffeffff
 80028ac:	fffbffff 	.word	0xfffbffff
 80028b0:	40007000 	.word	0x40007000
 80028b4:	00001388 	.word	0x00001388
 80028b8:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028bc:	220c      	movs	r2, #12
 80028be:	4c26      	ldr	r4, [pc, #152]	; (8002958 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80028c0:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c2:	6863      	ldr	r3, [r4, #4]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d100      	bne.n	80028cc <HAL_RCC_OscConfig+0x32c>
 80028ca:	e6b3      	b.n	8002634 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	4a23      	ldr	r2, [pc, #140]	; (800295c <HAL_RCC_OscConfig+0x3bc>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d4:	2902      	cmp	r1, #2
 80028d6:	d12f      	bne.n	8002938 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80028d8:	f7ff f9fa 	bl	8001cd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028dc:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80028de:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e0:	04b6      	lsls	r6, r6, #18
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	4233      	tst	r3, r6
 80028e6:	d121      	bne.n	800292c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e8:	220f      	movs	r2, #15
 80028ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028ec:	4393      	bics	r3, r2
 80028ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80028f0:	4313      	orrs	r3, r2
 80028f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80028f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80028f8:	6862      	ldr	r2, [r4, #4]
 80028fa:	430b      	orrs	r3, r1
 80028fc:	4918      	ldr	r1, [pc, #96]	; (8002960 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028fe:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002900:	400a      	ands	r2, r1
 8002902:	4313      	orrs	r3, r2
 8002904:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	6822      	ldr	r2, [r4, #0]
 800290a:	045b      	lsls	r3, r3, #17
 800290c:	4313      	orrs	r3, r2
 800290e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002910:	f7ff f9de 	bl	8001cd0 <HAL_GetTick>
 8002914:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002916:	04ad      	lsls	r5, r5, #18
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	422b      	tst	r3, r5
 800291c:	d000      	beq.n	8002920 <HAL_RCC_OscConfig+0x380>
 800291e:	e673      	b.n	8002608 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff f9d6 	bl	8001cd0 <HAL_GetTick>
 8002924:	1b80      	subs	r0, r0, r6
 8002926:	2802      	cmp	r0, #2
 8002928:	d9f6      	bls.n	8002918 <HAL_RCC_OscConfig+0x378>
 800292a:	e69a      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff f9d0 	bl	8001cd0 <HAL_GetTick>
 8002930:	1bc0      	subs	r0, r0, r7
 8002932:	2802      	cmp	r0, #2
 8002934:	d9d5      	bls.n	80028e2 <HAL_RCC_OscConfig+0x342>
 8002936:	e694      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002938:	f7ff f9ca 	bl	8001cd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800293e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002940:	04ad      	lsls	r5, r5, #18
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	422b      	tst	r3, r5
 8002946:	d100      	bne.n	800294a <HAL_RCC_OscConfig+0x3aa>
 8002948:	e65e      	b.n	8002608 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294a:	f7ff f9c1 	bl	8001cd0 <HAL_GetTick>
 800294e:	1b80      	subs	r0, r0, r6
 8002950:	2802      	cmp	r0, #2
 8002952:	d9f6      	bls.n	8002942 <HAL_RCC_OscConfig+0x3a2>
 8002954:	e685      	b.n	8002662 <HAL_RCC_OscConfig+0xc2>
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40021000 	.word	0x40021000
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	ffc2ffff 	.word	0xffc2ffff

08002964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002964:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002966:	4c14      	ldr	r4, [pc, #80]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8002968:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800296a:	2210      	movs	r2, #16
 800296c:	0021      	movs	r1, r4
 800296e:	4668      	mov	r0, sp
 8002970:	f001 ff80 	bl	8004874 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002974:	0021      	movs	r1, r4
 8002976:	ad04      	add	r5, sp, #16
 8002978:	2210      	movs	r2, #16
 800297a:	3110      	adds	r1, #16
 800297c:	0028      	movs	r0, r5
 800297e:	f001 ff79 	bl	8004874 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002982:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002984:	4e0d      	ldr	r6, [pc, #52]	; (80029bc <HAL_RCC_GetSysClockFreq+0x58>)
 8002986:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002988:	401a      	ands	r2, r3
 800298a:	2a08      	cmp	r2, #8
 800298c:	d111      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800298e:	200f      	movs	r0, #15
 8002990:	466a      	mov	r2, sp
 8002992:	0c99      	lsrs	r1, r3, #18
 8002994:	4001      	ands	r1, r0
 8002996:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002998:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800299a:	4002      	ands	r2, r0
 800299c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800299e:	03db      	lsls	r3, r3, #15
 80029a0:	d505      	bpl.n	80029ae <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80029a2:	4807      	ldr	r0, [pc, #28]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80029a4:	f7fd fbc2 	bl	800012c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80029a8:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80029aa:	b008      	add	sp, #32
 80029ac:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x60>)
 80029b0:	e7fa      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80029b2:	4803      	ldr	r0, [pc, #12]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80029b4:	e7f9      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x46>
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	08005278 	.word	0x08005278
 80029bc:	40021000 	.word	0x40021000
 80029c0:	007a1200 	.word	0x007a1200
 80029c4:	003d0900 	.word	0x003d0900

080029c8 <HAL_RCC_ClockConfig>:
{
 80029c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80029ca:	2201      	movs	r2, #1
 80029cc:	4c43      	ldr	r4, [pc, #268]	; (8002adc <HAL_RCC_ClockConfig+0x114>)
{
 80029ce:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80029d0:	6823      	ldr	r3, [r4, #0]
{
 80029d2:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80029d4:	4013      	ands	r3, r2
 80029d6:	428b      	cmp	r3, r1
 80029d8:	d31c      	bcc.n	8002a14 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029da:	6832      	ldr	r2, [r6, #0]
 80029dc:	0793      	lsls	r3, r2, #30
 80029de:	d423      	bmi.n	8002a28 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e0:	07d3      	lsls	r3, r2, #31
 80029e2:	d429      	bmi.n	8002a38 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80029e4:	2301      	movs	r3, #1
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	401a      	ands	r2, r3
 80029ea:	4297      	cmp	r7, r2
 80029ec:	d367      	bcc.n	8002abe <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ee:	6833      	ldr	r3, [r6, #0]
 80029f0:	4c3b      	ldr	r4, [pc, #236]	; (8002ae0 <HAL_RCC_ClockConfig+0x118>)
 80029f2:	075b      	lsls	r3, r3, #29
 80029f4:	d46a      	bmi.n	8002acc <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029f6:	f7ff ffb5 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 80029fa:	6863      	ldr	r3, [r4, #4]
 80029fc:	4a39      	ldr	r2, [pc, #228]	; (8002ae4 <HAL_RCC_ClockConfig+0x11c>)
 80029fe:	061b      	lsls	r3, r3, #24
 8002a00:	0f1b      	lsrs	r3, r3, #28
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	40d8      	lsrs	r0, r3
 8002a06:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <HAL_RCC_ClockConfig+0x120>)
 8002a08:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7ff f936 	bl	8001c7c <HAL_InitTick>
  return HAL_OK;
 8002a10:	2000      	movs	r0, #0
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	4393      	bics	r3, r2
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	4299      	cmp	r1, r3
 8002a22:	d0da      	beq.n	80029da <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8002a24:	2001      	movs	r0, #1
}
 8002a26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	20f0      	movs	r0, #240	; 0xf0
 8002a2a:	492d      	ldr	r1, [pc, #180]	; (8002ae0 <HAL_RCC_ClockConfig+0x118>)
 8002a2c:	684b      	ldr	r3, [r1, #4]
 8002a2e:	4383      	bics	r3, r0
 8002a30:	68b0      	ldr	r0, [r6, #8]
 8002a32:	4303      	orrs	r3, r0
 8002a34:	604b      	str	r3, [r1, #4]
 8002a36:	e7d3      	b.n	80029e0 <HAL_RCC_ClockConfig+0x18>
 8002a38:	4d29      	ldr	r5, [pc, #164]	; (8002ae0 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	2a01      	cmp	r2, #1
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	039b      	lsls	r3, r3, #14
 8002a44:	d5ee      	bpl.n	8002a24 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a46:	2103      	movs	r1, #3
 8002a48:	686b      	ldr	r3, [r5, #4]
 8002a4a:	438b      	bics	r3, r1
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002a50:	f7ff f93e 	bl	8001cd0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a54:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002a56:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d115      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	686b      	ldr	r3, [r5, #4]
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d0be      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a66:	f7ff f933 	bl	8001cd0 <HAL_GetTick>
 8002a6a:	9b01      	ldr	r3, [sp, #4]
 8002a6c:	1ac0      	subs	r0, r0, r3
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_RCC_ClockConfig+0x124>)
 8002a70:	4298      	cmp	r0, r3
 8002a72:	d9f3      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8002a74:	2003      	movs	r0, #3
 8002a76:	e7d6      	b.n	8002a26 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a78:	2a02      	cmp	r2, #2
 8002a7a:	d102      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	d4e2      	bmi.n	8002a46 <HAL_RCC_ClockConfig+0x7e>
 8002a80:	e7d0      	b.n	8002a24 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a82:	079b      	lsls	r3, r3, #30
 8002a84:	d4df      	bmi.n	8002a46 <HAL_RCC_ClockConfig+0x7e>
 8002a86:	e7cd      	b.n	8002a24 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d012      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8c:	220c      	movs	r2, #12
 8002a8e:	686b      	ldr	r3, [r5, #4]
 8002a90:	4213      	tst	r3, r2
 8002a92:	d0a7      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7ff f91c 	bl	8001cd0 <HAL_GetTick>
 8002a98:	9b01      	ldr	r3, [sp, #4]
 8002a9a:	1ac0      	subs	r0, r0, r3
 8002a9c:	4b13      	ldr	r3, [pc, #76]	; (8002aec <HAL_RCC_ClockConfig+0x124>)
 8002a9e:	4298      	cmp	r0, r3
 8002aa0:	d9f4      	bls.n	8002a8c <HAL_RCC_ClockConfig+0xc4>
 8002aa2:	e7e7      	b.n	8002a74 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7ff f914 	bl	8001cd0 <HAL_GetTick>
 8002aa8:	9b01      	ldr	r3, [sp, #4]
 8002aaa:	1ac0      	subs	r0, r0, r3
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_RCC_ClockConfig+0x124>)
 8002aae:	4298      	cmp	r0, r3
 8002ab0:	d8e0      	bhi.n	8002a74 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	686b      	ldr	r3, [r5, #4]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d1f3      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xdc>
 8002abc:	e792      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	439a      	bics	r2, r3
 8002ac2:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ac4:	6822      	ldr	r2, [r4, #0]
 8002ac6:	421a      	tst	r2, r3
 8002ac8:	d1ac      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x5c>
 8002aca:	e790      	b.n	80029ee <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002acc:	6863      	ldr	r3, [r4, #4]
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_RCC_ClockConfig+0x128>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	68f2      	ldr	r2, [r6, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	6063      	str	r3, [r4, #4]
 8002ad8:	e78d      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2e>
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	0800533f 	.word	0x0800533f
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	00001388 	.word	0x00001388
 8002af0:	fffff8ff 	.word	0xfffff8ff

08002af4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002af4:	4b01      	ldr	r3, [pc, #4]	; (8002afc <HAL_RCC_GetHCLKFreq+0x8>)
 8002af6:	6818      	ldr	r0, [r3, #0]
}
 8002af8:	4770      	bx	lr
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	20000000 	.word	0x20000000

08002b00 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	055b      	lsls	r3, r3, #21
 8002b08:	0f5b      	lsrs	r3, r3, #29
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	4a03      	ldr	r2, [pc, #12]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b0e:	6810      	ldr	r0, [r2, #0]
 8002b10:	40d8      	lsrs	r0, r3
}    
 8002b12:	4770      	bx	lr
 8002b14:	40021000 	.word	0x40021000
 8002b18:	0800534f 	.word	0x0800534f
 8002b1c:	20000000 	.word	0x20000000

08002b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b20:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b22:	6803      	ldr	r3, [r0, #0]
{
 8002b24:	b085      	sub	sp, #20
 8002b26:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b28:	03db      	lsls	r3, r3, #15
 8002b2a:	d528      	bpl.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b30:	4c37      	ldr	r4, [pc, #220]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8002b32:	0552      	lsls	r2, r2, #21
 8002b34:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002b36:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b38:	4213      	tst	r3, r2
 8002b3a:	d108      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	69e3      	ldr	r3, [r4, #28]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61e3      	str	r3, [r4, #28]
 8002b42:	69e3      	ldr	r3, [r4, #28]
 8002b44:	4013      	ands	r3, r2
 8002b46:	9303      	str	r3, [sp, #12]
 8002b48:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	2780      	movs	r7, #128	; 0x80
 8002b50:	4e30      	ldr	r6, [pc, #192]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002b52:	007f      	lsls	r7, r7, #1
 8002b54:	6833      	ldr	r3, [r6, #0]
 8002b56:	423b      	tst	r3, r7
 8002b58:	d026      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b5a:	22c0      	movs	r2, #192	; 0xc0
 8002b5c:	6a23      	ldr	r3, [r4, #32]
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	4013      	ands	r3, r2
 8002b62:	4e2d      	ldr	r6, [pc, #180]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b64:	d132      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b66:	6a23      	ldr	r3, [r4, #32]
 8002b68:	401e      	ands	r6, r3
 8002b6a:	686b      	ldr	r3, [r5, #4]
 8002b6c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b70:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d103      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b76:	69e3      	ldr	r3, [r4, #28]
 8002b78:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b7e:	682a      	ldr	r2, [r5, #0]
 8002b80:	07d3      	lsls	r3, r2, #31
 8002b82:	d506      	bpl.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b84:	2003      	movs	r0, #3
 8002b86:	4922      	ldr	r1, [pc, #136]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8002b88:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002b8a:	4383      	bics	r3, r0
 8002b8c:	68a8      	ldr	r0, [r5, #8]
 8002b8e:	4303      	orrs	r3, r0
 8002b90:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b92:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b94:	0693      	lsls	r3, r2, #26
 8002b96:	d517      	bpl.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b98:	2110      	movs	r1, #16
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8002b9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b9e:	438b      	bics	r3, r1
 8002ba0:	68e9      	ldr	r1, [r5, #12]
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	e00f      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba8:	6833      	ldr	r3, [r6, #0]
 8002baa:	433b      	orrs	r3, r7
 8002bac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002bae:	f7ff f88f 	bl	8001cd0 <HAL_GetTick>
 8002bb2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	6833      	ldr	r3, [r6, #0]
 8002bb6:	423b      	tst	r3, r7
 8002bb8:	d1cf      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bba:	f7ff f889 	bl	8001cd0 <HAL_GetTick>
 8002bbe:	9b01      	ldr	r3, [sp, #4]
 8002bc0:	1ac0      	subs	r0, r0, r3
 8002bc2:	2864      	cmp	r0, #100	; 0x64
 8002bc4:	d9f6      	bls.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8002bc6:	2003      	movs	r0, #3
}
 8002bc8:	b005      	add	sp, #20
 8002bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bcc:	6869      	ldr	r1, [r5, #4]
 8002bce:	400a      	ands	r2, r1
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d0c8      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd4:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bd6:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd8:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bda:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bdc:	025b      	lsls	r3, r3, #9
 8002bde:	4303      	orrs	r3, r0
 8002be0:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002be2:	6a23      	ldr	r3, [r4, #32]
 8002be4:	480e      	ldr	r0, [pc, #56]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be6:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002be8:	4003      	ands	r3, r0
 8002bea:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8002bec:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bee:	07d3      	lsls	r3, r2, #31
 8002bf0:	d5b9      	bpl.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8002bf2:	f7ff f86d 	bl	8001cd0 <HAL_GetTick>
 8002bf6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	6a23      	ldr	r3, [r4, #32]
 8002bfc:	4213      	tst	r3, r2
 8002bfe:	d1b2      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c00:	f7ff f866 	bl	8001cd0 <HAL_GetTick>
 8002c04:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8002c06:	1bc0      	subs	r0, r0, r7
 8002c08:	4298      	cmp	r0, r3
 8002c0a:	d9f5      	bls.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8002c0c:	e7db      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40007000 	.word	0x40007000
 8002c18:	fffffcff 	.word	0xfffffcff
 8002c1c:	efffffff 	.word	0xefffffff
 8002c20:	fffeffff 	.word	0xfffeffff
 8002c24:	00001388 	.word	0x00001388

08002c28 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	6a03      	ldr	r3, [r0, #32]
{
 8002c2c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c2e:	4393      	bics	r3, r2
 8002c30:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c32:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c36:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c38:	3272      	adds	r2, #114	; 0x72
 8002c3a:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c3c:	680a      	ldr	r2, [r1, #0]
 8002c3e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c40:	2202      	movs	r2, #2
 8002c42:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c44:	688a      	ldr	r2, [r1, #8]
 8002c46:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c48:	4a11      	ldr	r2, [pc, #68]	; (8002c90 <TIM_OC1_SetConfig+0x68>)
 8002c4a:	4290      	cmp	r0, r2
 8002c4c:	d005      	beq.n	8002c5a <TIM_OC1_SetConfig+0x32>
 8002c4e:	4e11      	ldr	r6, [pc, #68]	; (8002c94 <TIM_OC1_SetConfig+0x6c>)
 8002c50:	42b0      	cmp	r0, r6
 8002c52:	d002      	beq.n	8002c5a <TIM_OC1_SetConfig+0x32>
 8002c54:	4e10      	ldr	r6, [pc, #64]	; (8002c98 <TIM_OC1_SetConfig+0x70>)
 8002c56:	42b0      	cmp	r0, r6
 8002c58:	d113      	bne.n	8002c82 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c5a:	2608      	movs	r6, #8
 8002c5c:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c5e:	68ce      	ldr	r6, [r1, #12]
 8002c60:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c62:	2604      	movs	r6, #4
 8002c64:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002c66:	4290      	cmp	r0, r2
 8002c68:	d005      	beq.n	8002c76 <TIM_OC1_SetConfig+0x4e>
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <TIM_OC1_SetConfig+0x6c>)
 8002c6c:	4290      	cmp	r0, r2
 8002c6e:	d002      	beq.n	8002c76 <TIM_OC1_SetConfig+0x4e>
 8002c70:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <TIM_OC1_SetConfig+0x70>)
 8002c72:	4290      	cmp	r0, r2
 8002c74:	d105      	bne.n	8002c82 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c78:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c7a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c7c:	694c      	ldr	r4, [r1, #20]
 8002c7e:	4334      	orrs	r4, r6
 8002c80:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c82:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002c84:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002c86:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002c88:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8a:	6203      	str	r3, [r0, #32]
}
 8002c8c:	bd70      	pop	{r4, r5, r6, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40014400 	.word	0x40014400
 8002c98:	40014800 	.word	0x40014800
 8002c9c:	fffffcff 	.word	0xfffffcff

08002ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ca2:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ca4:	6a03      	ldr	r3, [r0, #32]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <TIM_OC3_SetConfig+0x60>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002cac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002cae:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002cb0:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb2:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb4:	680d      	ldr	r5, [r1, #0]
 8002cb6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cb8:	4d12      	ldr	r5, [pc, #72]	; (8002d04 <TIM_OC3_SetConfig+0x64>)
 8002cba:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cbc:	688d      	ldr	r5, [r1, #8]
 8002cbe:	022d      	lsls	r5, r5, #8
 8002cc0:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cc2:	4d11      	ldr	r5, [pc, #68]	; (8002d08 <TIM_OC3_SetConfig+0x68>)
 8002cc4:	42a8      	cmp	r0, r5
 8002cc6:	d10e      	bne.n	8002ce6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cc8:	4d10      	ldr	r5, [pc, #64]	; (8002d0c <TIM_OC3_SetConfig+0x6c>)
 8002cca:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ccc:	68cb      	ldr	r3, [r1, #12]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cd2:	4d0f      	ldr	r5, [pc, #60]	; (8002d10 <TIM_OC3_SetConfig+0x70>)
 8002cd4:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cd6:	4d0f      	ldr	r5, [pc, #60]	; (8002d14 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cd8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cda:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cdc:	698a      	ldr	r2, [r1, #24]
 8002cde:	4332      	orrs	r2, r6
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	432a      	orrs	r2, r5
 8002ce4:	e005      	b.n	8002cf2 <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce6:	4d0c      	ldr	r5, [pc, #48]	; (8002d18 <TIM_OC3_SetConfig+0x78>)
 8002ce8:	42a8      	cmp	r0, r5
 8002cea:	d0f4      	beq.n	8002cd6 <TIM_OC3_SetConfig+0x36>
 8002cec:	4d0b      	ldr	r5, [pc, #44]	; (8002d1c <TIM_OC3_SetConfig+0x7c>)
 8002cee:	42a8      	cmp	r0, r5
 8002cf0:	d0f1      	beq.n	8002cd6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cf4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002cf6:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002cf8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfa:	6203      	str	r3, [r0, #32]
}
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	fffffeff 	.word	0xfffffeff
 8002d04:	fffffdff 	.word	0xfffffdff
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	fffff7ff 	.word	0xfffff7ff
 8002d10:	fffffbff 	.word	0xfffffbff
 8002d14:	ffffcfff 	.word	0xffffcfff
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800

08002d20 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d20:	6a03      	ldr	r3, [r0, #32]
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <TIM_OC4_SetConfig+0x4c>)
{
 8002d24:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d26:	4013      	ands	r3, r2
 8002d28:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d2c:	4c10      	ldr	r4, [pc, #64]	; (8002d70 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8002d2e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002d30:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d32:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d34:	680c      	ldr	r4, [r1, #0]
 8002d36:	0224      	lsls	r4, r4, #8
 8002d38:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d3a:	4c0e      	ldr	r4, [pc, #56]	; (8002d74 <TIM_OC4_SetConfig+0x54>)
 8002d3c:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d3e:	688c      	ldr	r4, [r1, #8]
 8002d40:	0324      	lsls	r4, r4, #12
 8002d42:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002d44:	4c0c      	ldr	r4, [pc, #48]	; (8002d78 <TIM_OC4_SetConfig+0x58>)
 8002d46:	42a0      	cmp	r0, r4
 8002d48:	d005      	beq.n	8002d56 <TIM_OC4_SetConfig+0x36>
 8002d4a:	4c0c      	ldr	r4, [pc, #48]	; (8002d7c <TIM_OC4_SetConfig+0x5c>)
 8002d4c:	42a0      	cmp	r0, r4
 8002d4e:	d002      	beq.n	8002d56 <TIM_OC4_SetConfig+0x36>
 8002d50:	4c0b      	ldr	r4, [pc, #44]	; (8002d80 <TIM_OC4_SetConfig+0x60>)
 8002d52:	42a0      	cmp	r0, r4
 8002d54:	d104      	bne.n	8002d60 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d56:	4c0b      	ldr	r4, [pc, #44]	; (8002d84 <TIM_OC4_SetConfig+0x64>)
 8002d58:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d5a:	694c      	ldr	r4, [r1, #20]
 8002d5c:	01a4      	lsls	r4, r4, #6
 8002d5e:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d60:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d62:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002d64:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002d66:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d68:	6202      	str	r2, [r0, #32]
}
 8002d6a:	bd30      	pop	{r4, r5, pc}
 8002d6c:	ffffefff 	.word	0xffffefff
 8002d70:	ffff8cff 	.word	0xffff8cff
 8002d74:	ffffdfff 	.word	0xffffdfff
 8002d78:	40012c00 	.word	0x40012c00
 8002d7c:	40014400 	.word	0x40014400
 8002d80:	40014800 	.word	0x40014800
 8002d84:	ffffbfff 	.word	0xffffbfff

08002d88 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d88:	2201      	movs	r2, #1
 8002d8a:	6803      	ldr	r3, [r0, #0]
 8002d8c:	68d9      	ldr	r1, [r3, #12]
}
 8002d8e:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d90:	4311      	orrs	r1, r2
 8002d92:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002d94:	6819      	ldr	r1, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIM_TriggerCallback>:
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d9e:	2202      	movs	r2, #2
 8002da0:	6803      	ldr	r3, [r0, #0]
{
 8002da2:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da4:	6919      	ldr	r1, [r3, #16]
{
 8002da6:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da8:	4211      	tst	r1, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002dac:	68d9      	ldr	r1, [r3, #12]
 8002dae:	4211      	tst	r1, r2
 8002db0:	d00b      	beq.n	8002dca <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002db2:	3a05      	subs	r2, #5
 8002db4:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002db6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db8:	3204      	adds	r2, #4
 8002dba:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dbc:	079b      	lsls	r3, r3, #30
 8002dbe:	d100      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x24>
 8002dc0:	e079      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	f000 fded 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dca:	2204      	movs	r2, #4
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	6919      	ldr	r1, [r3, #16]
 8002dd0:	4211      	tst	r1, r2
 8002dd2:	d010      	beq.n	8002df6 <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002dd4:	68d9      	ldr	r1, [r3, #12]
 8002dd6:	4211      	tst	r1, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dda:	3a09      	subs	r2, #9
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dde:	3207      	adds	r2, #7
 8002de0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	23c0      	movs	r3, #192	; 0xc0
 8002de6:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002de8:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dea:	421a      	tst	r2, r3
 8002dec:	d069      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	f000 fdd7 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	2300      	movs	r3, #0
 8002df4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df6:	2208      	movs	r2, #8
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	6919      	ldr	r1, [r3, #16]
 8002dfc:	4211      	tst	r1, r2
 8002dfe:	d00e      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	4211      	tst	r1, r2
 8002e04:	d00b      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e06:	3a11      	subs	r2, #17
 8002e08:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e0a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e0c:	320d      	adds	r2, #13
 8002e0e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002e10:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e12:	079b      	lsls	r3, r3, #30
 8002e14:	d05b      	beq.n	8002ece <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	f000 fdc3 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e1e:	2210      	movs	r2, #16
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	6919      	ldr	r1, [r3, #16]
 8002e24:	4211      	tst	r1, r2
 8002e26:	d010      	beq.n	8002e4a <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	4211      	tst	r1, r2
 8002e2c:	d00d      	beq.n	8002e4a <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e2e:	3a21      	subs	r2, #33	; 0x21
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e32:	3219      	adds	r2, #25
 8002e34:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	23c0      	movs	r3, #192	; 0xc0
 8002e3a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e3e:	421a      	tst	r2, r3
 8002e40:	d04b      	beq.n	8002eda <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	f000 fdad 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	2300      	movs	r3, #0
 8002e48:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	6919      	ldr	r1, [r3, #16]
 8002e50:	4211      	tst	r1, r2
 8002e52:	d007      	beq.n	8002e64 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002e54:	68d9      	ldr	r1, [r3, #12]
 8002e56:	4211      	tst	r1, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e5a:	3a03      	subs	r2, #3
 8002e5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e5e:	0020      	movs	r0, r4
 8002e60:	f000 fd7a 	bl	8003958 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	6919      	ldr	r1, [r3, #16]
 8002e6a:	4211      	tst	r1, r2
 8002e6c:	d008      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002e6e:	68d9      	ldr	r1, [r3, #12]
 8002e70:	4211      	tst	r1, r2
 8002e72:	d005      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e74:	3a02      	subs	r2, #2
 8002e76:	3aff      	subs	r2, #255	; 0xff
 8002e78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e7a:	0020      	movs	r0, r4
 8002e7c:	f000 f9bc 	bl	80031f8 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e80:	2240      	movs	r2, #64	; 0x40
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	6919      	ldr	r1, [r3, #16]
 8002e86:	4211      	tst	r1, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	4211      	tst	r1, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e90:	3a81      	subs	r2, #129	; 0x81
 8002e92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002e94:	0020      	movs	r0, r4
 8002e96:	f7ff ff81 	bl	8002d9c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	6919      	ldr	r1, [r3, #16]
 8002ea0:	4211      	tst	r1, r2
 8002ea2:	d007      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	4211      	tst	r1, r2
 8002ea8:	d004      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eaa:	3a41      	subs	r2, #65	; 0x41
 8002eac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002eae:	0020      	movs	r0, r4
 8002eb0:	f000 f9a1 	bl	80031f6 <HAL_TIMEx_CommutationCallback>
}
 8002eb4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	f000 fd6d 	bl	8003994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eba:	0020      	movs	r0, r4
 8002ebc:	f000 fd76 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
 8002ec0:	e781      	b.n	8002dc6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec2:	f000 fd67 	bl	8003994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec6:	0020      	movs	r0, r4
 8002ec8:	f000 fd70 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
 8002ecc:	e791      	b.n	8002df2 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	f000 fd61 	bl	8003994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed2:	0020      	movs	r0, r4
 8002ed4:	f000 fd6a 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
 8002ed8:	e79f      	b.n	8002e1a <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eda:	f000 fd5b 	bl	8003994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ede:	0020      	movs	r0, r4
 8002ee0:	f000 fd64 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
 8002ee4:	e7af      	b.n	8002e46 <HAL_TIM_IRQHandler+0xa8>
	...

08002ee8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <TIM_Base_SetConfig+0x68>)
{
 8002eea:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002eec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eee:	4290      	cmp	r0, r2
 8002ef0:	d002      	beq.n	8002ef8 <TIM_Base_SetConfig+0x10>
 8002ef2:	4c18      	ldr	r4, [pc, #96]	; (8002f54 <TIM_Base_SetConfig+0x6c>)
 8002ef4:	42a0      	cmp	r0, r4
 8002ef6:	d108      	bne.n	8002f0a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef8:	2470      	movs	r4, #112	; 0x70
 8002efa:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002efc:	684c      	ldr	r4, [r1, #4]
 8002efe:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f00:	4290      	cmp	r0, r2
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0x34>
 8002f04:	4c13      	ldr	r4, [pc, #76]	; (8002f54 <TIM_Base_SetConfig+0x6c>)
 8002f06:	42a0      	cmp	r0, r4
 8002f08:	d008      	beq.n	8002f1c <TIM_Base_SetConfig+0x34>
 8002f0a:	4c13      	ldr	r4, [pc, #76]	; (8002f58 <TIM_Base_SetConfig+0x70>)
 8002f0c:	42a0      	cmp	r0, r4
 8002f0e:	d005      	beq.n	8002f1c <TIM_Base_SetConfig+0x34>
 8002f10:	4c12      	ldr	r4, [pc, #72]	; (8002f5c <TIM_Base_SetConfig+0x74>)
 8002f12:	42a0      	cmp	r0, r4
 8002f14:	d002      	beq.n	8002f1c <TIM_Base_SetConfig+0x34>
 8002f16:	4c12      	ldr	r4, [pc, #72]	; (8002f60 <TIM_Base_SetConfig+0x78>)
 8002f18:	42a0      	cmp	r0, r4
 8002f1a:	d103      	bne.n	8002f24 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1c:	4c11      	ldr	r4, [pc, #68]	; (8002f64 <TIM_Base_SetConfig+0x7c>)
 8002f1e:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f20:	68cc      	ldr	r4, [r1, #12]
 8002f22:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f24:	2480      	movs	r4, #128	; 0x80
 8002f26:	43a3      	bics	r3, r4
 8002f28:	694c      	ldr	r4, [r1, #20]
 8002f2a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002f2c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2e:	688b      	ldr	r3, [r1, #8]
 8002f30:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002f32:	680b      	ldr	r3, [r1, #0]
 8002f34:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f36:	4290      	cmp	r0, r2
 8002f38:	d005      	beq.n	8002f46 <TIM_Base_SetConfig+0x5e>
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <TIM_Base_SetConfig+0x74>)
 8002f3c:	4298      	cmp	r0, r3
 8002f3e:	d002      	beq.n	8002f46 <TIM_Base_SetConfig+0x5e>
 8002f40:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <TIM_Base_SetConfig+0x78>)
 8002f42:	4298      	cmp	r0, r3
 8002f44:	d101      	bne.n	8002f4a <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8002f46:	690b      	ldr	r3, [r1, #16]
 8002f48:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	6143      	str	r3, [r0, #20]
}
 8002f4e:	bd10      	pop	{r4, pc}
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40002000 	.word	0x40002000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	fffffcff 	.word	0xfffffcff

08002f68 <HAL_TIM_Base_Init>:
{
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002f6c:	2001      	movs	r0, #1
  if(htim == NULL)
 8002f6e:	2c00      	cmp	r4, #0
 8002f70:	d014      	beq.n	8002f9c <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f72:	0025      	movs	r5, r4
 8002f74:	353d      	adds	r5, #61	; 0x3d
 8002f76:	782b      	ldrb	r3, [r5, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	0022      	movs	r2, r4
 8002f80:	323c      	adds	r2, #60	; 0x3c
 8002f82:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8002f84:	0020      	movs	r0, r4
 8002f86:	f001 f8ed 	bl	8004164 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002f8a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8c:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002f8e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f90:	1d21      	adds	r1, r4, #4
 8002f92:	f7ff ffa9 	bl	8002ee8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f96:	2301      	movs	r3, #1
  return HAL_OK;
 8002f98:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002f9a:	702b      	strb	r3, [r5, #0]
}
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}

08002f9e <HAL_TIM_PWM_Init>:
{
 8002f9e:	b570      	push	{r4, r5, r6, lr}
 8002fa0:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002fa2:	2001      	movs	r0, #1
  if(htim == NULL)
 8002fa4:	2c00      	cmp	r4, #0
 8002fa6:	d014      	beq.n	8002fd2 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002fa8:	0025      	movs	r5, r4
 8002faa:	353d      	adds	r5, #61	; 0x3d
 8002fac:	782b      	ldrb	r3, [r5, #0]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002fb4:	0022      	movs	r2, r4
 8002fb6:	323c      	adds	r2, #60	; 0x3c
 8002fb8:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f001 f8b6 	bl	800412c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002fc0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002fc4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc6:	1d21      	adds	r1, r4, #4
 8002fc8:	f7ff ff8e 	bl	8002ee8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002fcc:	2301      	movs	r3, #1
  return HAL_OK;
 8002fce:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002fd0:	702b      	strb	r3, [r5, #0]
}
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}

08002fd4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	6a03      	ldr	r3, [r0, #32]
{
 8002fd8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fda:	4393      	bics	r3, r2
 8002fdc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002fde:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fe0:	4d15      	ldr	r5, [pc, #84]	; (8003038 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8002fe2:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002fe4:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fe6:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe8:	680d      	ldr	r5, [r1, #0]
 8002fea:	022d      	lsls	r5, r5, #8
 8002fec:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8002fee:	2520      	movs	r5, #32
 8002ff0:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ff2:	688d      	ldr	r5, [r1, #8]
 8002ff4:	012d      	lsls	r5, r5, #4
 8002ff6:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ff8:	4d10      	ldr	r5, [pc, #64]	; (800303c <TIM_OC2_SetConfig+0x68>)
 8002ffa:	42a8      	cmp	r0, r5
 8002ffc:	d10f      	bne.n	800301e <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ffe:	2580      	movs	r5, #128	; 0x80
 8003000:	43aa      	bics	r2, r5
 8003002:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003004:	68ca      	ldr	r2, [r1, #12]
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800300a:	2540      	movs	r5, #64	; 0x40
 800300c:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800300e:	4d0c      	ldr	r5, [pc, #48]	; (8003040 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003010:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003012:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003014:	698b      	ldr	r3, [r1, #24]
 8003016:	4333      	orrs	r3, r6
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	432b      	orrs	r3, r5
 800301c:	e005      	b.n	800302a <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800301e:	4d09      	ldr	r5, [pc, #36]	; (8003044 <TIM_OC2_SetConfig+0x70>)
 8003020:	42a8      	cmp	r0, r5
 8003022:	d0f4      	beq.n	800300e <TIM_OC2_SetConfig+0x3a>
 8003024:	4d08      	ldr	r5, [pc, #32]	; (8003048 <TIM_OC2_SetConfig+0x74>)
 8003026:	42a8      	cmp	r0, r5
 8003028:	d0f1      	beq.n	800300e <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800302a:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800302c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800302e:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003030:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003032:	6202      	str	r2, [r0, #32]
}
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	ffff8cff 	.word	0xffff8cff
 800303c:	40012c00 	.word	0x40012c00
 8003040:	fffff3ff 	.word	0xfffff3ff
 8003044:	40014400 	.word	0x40014400
 8003048:	40014800 	.word	0x40014800

0800304c <HAL_TIM_PWM_ConfigChannel>:
{
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800304e:	0006      	movs	r6, r0
 8003050:	2302      	movs	r3, #2
 8003052:	363c      	adds	r6, #60	; 0x3c
{
 8003054:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8003056:	7831      	ldrb	r1, [r6, #0]
{
 8003058:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800305a:	0018      	movs	r0, r3
 800305c:	2901      	cmp	r1, #1
 800305e:	d025      	beq.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8003062:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 8003066:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 800306a:	2a0c      	cmp	r2, #12
 800306c:	d81a      	bhi.n	80030a4 <HAL_TIM_PWM_ConfigChannel+0x58>
 800306e:	0010      	movs	r0, r2
 8003070:	f7fd f852 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003074:	18181807 	.word	0x18181807
 8003078:	1818181d 	.word	0x1818181d
 800307c:	1818182f 	.word	0x1818182f
 8003080:	41          	.byte	0x41
 8003081:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003082:	0029      	movs	r1, r5
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	f7ff fdcf 	bl	8002c28 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800308a:	2208      	movs	r2, #8
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	6999      	ldr	r1, [r3, #24]
 8003090:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003092:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003094:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	438a      	bics	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a0:	430a      	orrs	r2, r1
 80030a2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80030a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 80030aa:	7030      	strb	r0, [r6, #0]
}
 80030ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ae:	0029      	movs	r1, r5
 80030b0:	6820      	ldr	r0, [r4, #0]
 80030b2:	f7ff ff8f 	bl	8002fd4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	6999      	ldr	r1, [r3, #24]
 80030be:	430a      	orrs	r2, r1
 80030c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030c2:	699a      	ldr	r2, [r3, #24]
 80030c4:	4915      	ldr	r1, [pc, #84]	; (800311c <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80030c6:	400a      	ands	r2, r1
 80030c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030ca:	692a      	ldr	r2, [r5, #16]
 80030cc:	6999      	ldr	r1, [r3, #24]
 80030ce:	0212      	lsls	r2, r2, #8
 80030d0:	e7e6      	b.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030d2:	0029      	movs	r1, r5
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	f7ff fde3 	bl	8002ca0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030da:	2208      	movs	r2, #8
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	69d9      	ldr	r1, [r3, #28]
 80030e0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030e2:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	438a      	bics	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030f0:	430a      	orrs	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
    break;
 80030f4:	e7d6      	b.n	80030a4 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030f6:	0029      	movs	r1, r5
 80030f8:	6820      	ldr	r0, [r4, #0]
 80030fa:	f7ff fe11 	bl	8002d20 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	69d9      	ldr	r1, [r3, #28]
 8003106:	430a      	orrs	r2, r1
 8003108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	4903      	ldr	r1, [pc, #12]	; (800311c <HAL_TIM_PWM_ConfigChannel+0xd0>)
 800310e:	400a      	ands	r2, r1
 8003110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003112:	692a      	ldr	r2, [r5, #16]
 8003114:	69d9      	ldr	r1, [r3, #28]
 8003116:	0212      	lsls	r2, r2, #8
 8003118:	e7ea      	b.n	80030f0 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	fffffbff 	.word	0xfffffbff

08003120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003120:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003122:	2401      	movs	r4, #1
 8003124:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003126:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003128:	6a03      	ldr	r3, [r0, #32]
 800312a:	43a3      	bics	r3, r4
 800312c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800312e:	6a03      	ldr	r3, [r0, #32]
 8003130:	431a      	orrs	r2, r3
 8003132:	6202      	str	r2, [r0, #32]
}
 8003134:	bd10      	pop	{r4, pc}
	...

08003138 <HAL_TIM_PWM_Start_IT>:
{
 8003138:	b510      	push	{r4, lr}
 800313a:	0004      	movs	r4, r0
  switch (Channel)
 800313c:	290c      	cmp	r1, #12
 800313e:	d80e      	bhi.n	800315e <HAL_TIM_PWM_Start_IT+0x26>
 8003140:	0008      	movs	r0, r1
 8003142:	f7fc ffe9 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003146:	0c07      	.short	0x0c07
 8003148:	0c250c0c 	.word	0x0c250c0c
 800314c:	0c290c0c 	.word	0x0c290c0c
 8003150:	0c0c      	.short	0x0c0c
 8003152:	2d          	.byte	0x2d
 8003153:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003154:	2302      	movs	r3, #2
 8003156:	6822      	ldr	r2, [r4, #0]
 8003158:	68d0      	ldr	r0, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800315a:	4303      	orrs	r3, r0
 800315c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800315e:	2201      	movs	r2, #1
 8003160:	6820      	ldr	r0, [r4, #0]
 8003162:	f7ff ffdd 	bl	8003120 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <HAL_TIM_PWM_Start_IT+0x70>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d005      	beq.n	800317a <HAL_TIM_PWM_Start_IT+0x42>
 800316e:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_TIM_PWM_Start_IT+0x74>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d002      	beq.n	800317a <HAL_TIM_PWM_Start_IT+0x42>
 8003174:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <HAL_TIM_PWM_Start_IT+0x78>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d104      	bne.n	8003184 <HAL_TIM_PWM_Start_IT+0x4c>
    __HAL_TIM_MOE_ENABLE(htim);
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800317e:	0212      	lsls	r2, r2, #8
 8003180:	430a      	orrs	r2, r1
 8003182:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003184:	2201      	movs	r2, #1
 8003186:	6819      	ldr	r1, [r3, #0]
}
 8003188:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003190:	6822      	ldr	r2, [r4, #0]
 8003192:	2304      	movs	r3, #4
 8003194:	68d0      	ldr	r0, [r2, #12]
 8003196:	e7e0      	b.n	800315a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003198:	6822      	ldr	r2, [r4, #0]
 800319a:	2308      	movs	r3, #8
 800319c:	68d0      	ldr	r0, [r2, #12]
 800319e:	e7dc      	b.n	800315a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031a0:	6822      	ldr	r2, [r4, #0]
 80031a2:	2310      	movs	r3, #16
 80031a4:	68d0      	ldr	r0, [r2, #12]
 80031a6:	e7d8      	b.n	800315a <HAL_TIM_PWM_Start_IT+0x22>
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40014400 	.word	0x40014400
 80031b0:	40014800 	.word	0x40014800

080031b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80031b4:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80031b6:	0004      	movs	r4, r0
 80031b8:	343c      	adds	r4, #60	; 0x3c
 80031ba:	7822      	ldrb	r2, [r4, #0]
{
 80031bc:	0003      	movs	r3, r0
 80031be:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80031c0:	2a01      	cmp	r2, #1
 80031c2:	d017      	beq.n	80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031c6:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	353d      	adds	r5, #61	; 0x3d
 80031ca:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	306e      	adds	r0, #110	; 0x6e
 80031d0:	4382      	bics	r2, r0
 80031d2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80031d8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80031da:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80031dc:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80031de:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	4382      	bics	r2, r0
 80031e4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80031e6:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80031e8:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80031ee:	2301      	movs	r3, #1
 80031f0:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80031f2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80031f4:	bd30      	pop	{r4, r5, pc}

080031f6 <HAL_TIMEx_CommutationCallback>:
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f8:	4770      	bx	lr
	...

080031fc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fc:	6803      	ldr	r3, [r0, #0]
 80031fe:	4906      	ldr	r1, [pc, #24]	; (8003218 <UART_EndRxTransfer+0x1c>)
 8003200:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003202:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003204:	400a      	ands	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	3123      	adds	r1, #35	; 0x23
 800320c:	31ff      	adds	r1, #255	; 0xff
 800320e:	438a      	bics	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003212:	2320      	movs	r3, #32
 8003214:	7003      	strb	r3, [r0, #0]
}
 8003216:	4770      	bx	lr
 8003218:	fffffedf 	.word	0xfffffedf

0800321c <HAL_UART_Transmit_IT>:
{
 800321c:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800321e:	0006      	movs	r6, r0
 8003220:	3669      	adds	r6, #105	; 0x69
 8003222:	7833      	ldrb	r3, [r6, #0]
{
 8003224:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003226:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8003228:	2b20      	cmp	r3, #32
 800322a:	d124      	bne.n	8003276 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 800322c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800322e:	2900      	cmp	r1, #0
 8003230:	d021      	beq.n	8003276 <HAL_UART_Transmit_IT+0x5a>
 8003232:	2a00      	cmp	r2, #0
 8003234:	d01f      	beq.n	8003276 <HAL_UART_Transmit_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	68a5      	ldr	r5, [r4, #8]
 800323a:	015b      	lsls	r3, r3, #5
 800323c:	429d      	cmp	r5, r3
 800323e:	d104      	bne.n	800324a <HAL_UART_Transmit_IT+0x2e>
 8003240:	6923      	ldr	r3, [r4, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_UART_Transmit_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8003246:	4201      	tst	r1, r0
 8003248:	d115      	bne.n	8003276 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 800324a:	0025      	movs	r5, r4
 800324c:	3568      	adds	r5, #104	; 0x68
 800324e:	782b      	ldrb	r3, [r5, #0]
    return HAL_BUSY;
 8003250:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003252:	2b01      	cmp	r3, #1
 8003254:	d00f      	beq.n	8003276 <HAL_UART_Transmit_IT+0x5a>
    huart->TxXferSize = Size;
 8003256:	0023      	movs	r3, r4
 8003258:	3350      	adds	r3, #80	; 0x50
    huart->pTxBuffPtr = pData;
 800325a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferCount = Size;
 800325c:	805a      	strh	r2, [r3, #2]
    huart->TxXferSize = Size;
 800325e:	801a      	strh	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003262:	2221      	movs	r2, #33	; 0x21
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003264:	6821      	ldr	r1, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003266:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003268:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800326a:	6808      	ldr	r0, [r1, #0]
 800326c:	325f      	adds	r2, #95	; 0x5f
 800326e:	4302      	orrs	r2, r0
    return HAL_OK;
 8003270:	0018      	movs	r0, r3
    __HAL_UNLOCK(huart);
 8003272:	702b      	strb	r3, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003274:	600a      	str	r2, [r1, #0]
}
 8003276:	bd70      	pop	{r4, r5, r6, pc}

08003278 <HAL_UART_Receive_IT>:
{
 8003278:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 800327a:	0006      	movs	r6, r0
 800327c:	366a      	adds	r6, #106	; 0x6a
 800327e:	7834      	ldrb	r4, [r6, #0]
{
 8003280:	0003      	movs	r3, r0
    return HAL_BUSY;
 8003282:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8003284:	2c20      	cmp	r4, #32
 8003286:	d135      	bne.n	80032f4 <HAL_UART_Receive_IT+0x7c>
      return HAL_ERROR;
 8003288:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800328a:	2900      	cmp	r1, #0
 800328c:	d032      	beq.n	80032f4 <HAL_UART_Receive_IT+0x7c>
 800328e:	2a00      	cmp	r2, #0
 8003290:	d030      	beq.n	80032f4 <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003292:	2480      	movs	r4, #128	; 0x80
 8003294:	689d      	ldr	r5, [r3, #8]
 8003296:	0164      	lsls	r4, r4, #5
 8003298:	42a5      	cmp	r5, r4
 800329a:	d104      	bne.n	80032a6 <HAL_UART_Receive_IT+0x2e>
 800329c:	691c      	ldr	r4, [r3, #16]
 800329e:	2c00      	cmp	r4, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Receive_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 80032a2:	4201      	tst	r1, r0
 80032a4:	d126      	bne.n	80032f4 <HAL_UART_Receive_IT+0x7c>
    __HAL_LOCK(huart);
 80032a6:	001c      	movs	r4, r3
 80032a8:	3468      	adds	r4, #104	; 0x68
 80032aa:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 80032ac:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80032ae:	2f01      	cmp	r7, #1
 80032b0:	d020      	beq.n	80032f4 <HAL_UART_Receive_IT+0x7c>
 80032b2:	3801      	subs	r0, #1
 80032b4:	7020      	strb	r0, [r4, #0]
    huart->pRxBuffPtr = pData;
 80032b6:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80032b8:	0019      	movs	r1, r3
 80032ba:	3158      	adds	r1, #88	; 0x58
 80032bc:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 80032be:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	0152      	lsls	r2, r2, #5
 80032c4:	4295      	cmp	r5, r2
 80032c6:	d118      	bne.n	80032fa <HAL_UART_Receive_IT+0x82>
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	2a00      	cmp	r2, #0
 80032cc:	d113      	bne.n	80032f6 <HAL_UART_Receive_IT+0x7e>
 80032ce:	490e      	ldr	r1, [pc, #56]	; (8003308 <HAL_UART_Receive_IT+0x90>)
 80032d0:	001a      	movs	r2, r3
 80032d2:	325c      	adds	r2, #92	; 0x5c
 80032d4:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d6:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032d8:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032da:	66d8      	str	r0, [r3, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032dc:	681b      	ldr	r3, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032de:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e0:	6899      	ldr	r1, [r3, #8]
 80032e2:	3a21      	subs	r2, #33	; 0x21
 80032e4:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 80032e6:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e8:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80032ea:	2290      	movs	r2, #144	; 0x90
 80032ec:	6819      	ldr	r1, [r3, #0]
 80032ee:	0052      	lsls	r2, r2, #1
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
}
 80032f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80032f6:	21ff      	movs	r1, #255	; 0xff
 80032f8:	e7ea      	b.n	80032d0 <HAL_UART_Receive_IT+0x58>
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d1eb      	bne.n	80032d6 <HAL_UART_Receive_IT+0x5e>
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	2a00      	cmp	r2, #0
 8003302:	d0f8      	beq.n	80032f6 <HAL_UART_Receive_IT+0x7e>
 8003304:	217f      	movs	r1, #127	; 0x7f
 8003306:	e7e3      	b.n	80032d0 <HAL_UART_Receive_IT+0x58>
 8003308:	000001ff 	.word	0x000001ff

0800330c <HAL_UART_Transmit_DMA>:
{
 800330c:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800330e:	0002      	movs	r2, r0
{
 8003310:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8003312:	3269      	adds	r2, #105	; 0x69
 8003314:	7814      	ldrb	r4, [r2, #0]
{
 8003316:	0005      	movs	r5, r0
    return HAL_BUSY;
 8003318:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 800331a:	2c20      	cmp	r4, #32
 800331c:	d134      	bne.n	8003388 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 800331e:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8003320:	2900      	cmp	r1, #0
 8003322:	d031      	beq.n	8003388 <HAL_UART_Transmit_DMA+0x7c>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d02f      	beq.n	8003388 <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003328:	2480      	movs	r4, #128	; 0x80
 800332a:	68ae      	ldr	r6, [r5, #8]
 800332c:	0164      	lsls	r4, r4, #5
 800332e:	42a6      	cmp	r6, r4
 8003330:	d104      	bne.n	800333c <HAL_UART_Transmit_DMA+0x30>
 8003332:	692c      	ldr	r4, [r5, #16]
 8003334:	2c00      	cmp	r4, #0
 8003336:	d101      	bne.n	800333c <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1U) != 0U)
 8003338:	4201      	tst	r1, r0
 800333a:	d125      	bne.n	8003388 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 800333c:	002e      	movs	r6, r5
 800333e:	3668      	adds	r6, #104	; 0x68
 8003340:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 8003342:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003344:	2c01      	cmp	r4, #1
 8003346:	d01f      	beq.n	8003388 <HAL_UART_Transmit_DMA+0x7c>
 8003348:	3801      	subs	r0, #1
 800334a:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 800334c:	0028      	movs	r0, r5
 800334e:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8003350:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003352:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 8003354:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 8003356:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003358:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800335c:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800335e:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8003360:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003362:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003364:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_UART_Transmit_DMA+0x84>)
 8003368:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800336a:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <HAL_UART_Transmit_DMA+0x88>)
 800336c:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800336e:	682a      	ldr	r2, [r5, #0]
 8003370:	3228      	adds	r2, #40	; 0x28
 8003372:	f7fe ffa5 	bl	80022c0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003376:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 8003378:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800337a:	682b      	ldr	r3, [r5, #0]
 800337c:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800337e:	6899      	ldr	r1, [r3, #8]
 8003380:	1892      	adds	r2, r2, r2
 8003382:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8003384:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bd70      	pop	{r4, r5, r6, pc}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	08003399 	.word	0x08003399
 8003390:	080033cb 	.word	0x080033cb
 8003394:	080033d7 	.word	0x080033d7

08003398 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003398:	2120      	movs	r1, #32
 800339a:	6803      	ldr	r3, [r0, #0]
{
 800339c:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800339e:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80033a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80033a2:	400b      	ands	r3, r1
 80033a4:	d10c      	bne.n	80033c0 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0;
 80033a6:	0011      	movs	r1, r2
 80033a8:	3152      	adds	r1, #82	; 0x52
 80033aa:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	6813      	ldr	r3, [r2, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	438a      	bics	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033b6:	2240      	movs	r2, #64	; 0x40
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80033be:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80033c0:	0010      	movs	r0, r2
 80033c2:	f000 faf9 	bl	80039b8 <HAL_UART_TxCpltCallback>
}
 80033c6:	e7fa      	b.n	80033be <UART_DMATransmitCplt+0x26>

080033c8 <HAL_UART_TxHalfCpltCallback>:
 80033c8:	4770      	bx	lr

080033ca <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80033ca:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 80033cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80033ce:	f7ff fffb 	bl	80033c8 <HAL_UART_TxHalfCpltCallback>
}
 80033d2:	bd10      	pop	{r4, pc}

080033d4 <HAL_UART_ErrorCallback>:
 80033d4:	4770      	bx	lr

080033d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80033d6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80033d8:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033da:	0021      	movs	r1, r4
 80033dc:	3169      	adds	r1, #105	; 0x69
 80033de:	780b      	ldrb	r3, [r1, #0]
 80033e0:	2b21      	cmp	r3, #33	; 0x21
 80033e2:	d10d      	bne.n	8003400 <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	0612      	lsls	r2, r2, #24
 80033ea:	d509      	bpl.n	8003400 <UART_DMAError+0x2a>
  {
    huart->TxXferCount = 0U;
 80033ec:	0022      	movs	r2, r4
 80033ee:	2000      	movs	r0, #0
 80033f0:	3252      	adds	r2, #82	; 0x52
 80033f2:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	30c0      	adds	r0, #192	; 0xc0
 80033f8:	4382      	bics	r2, r0
 80033fa:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80033fc:	2320      	movs	r3, #32
 80033fe:	700b      	strb	r3, [r1, #0]
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003400:	0023      	movs	r3, r4
 8003402:	336a      	adds	r3, #106	; 0x6a
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b22      	cmp	r3, #34	; 0x22
 8003408:	d10a      	bne.n	8003420 <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	065b      	lsls	r3, r3, #25
 8003410:	d506      	bpl.n	8003420 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
 8003412:	0023      	movs	r3, r4
 8003414:	2200      	movs	r2, #0
 8003416:	335a      	adds	r3, #90	; 0x5a
 8003418:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800341a:	0020      	movs	r0, r4
 800341c:	f7ff feee 	bl	80031fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003420:	2310      	movs	r3, #16
 8003422:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003424:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003426:	4313      	orrs	r3, r2
 8003428:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800342a:	f7ff ffd3 	bl	80033d4 <HAL_UART_ErrorCallback>
}
 800342e:	bd10      	pop	{r4, pc}

08003430 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003430:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	0002      	movs	r2, r0
{
 8003436:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003438:	325a      	adds	r2, #90	; 0x5a
 800343a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800343c:	3a08      	subs	r2, #8
 800343e:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8003440:	f7ff ffc8 	bl	80033d4 <HAL_UART_ErrorCallback>
}
 8003444:	bd10      	pop	{r4, pc}
	...

08003448 <UART_SetConfig>:
{
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800344c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800344e:	69c2      	ldr	r2, [r0, #28]
 8003450:	6883      	ldr	r3, [r0, #8]
 8003452:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003454:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003456:	4303      	orrs	r3, r0
 8003458:	6960      	ldr	r0, [r4, #20]
 800345a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800345c:	4835      	ldr	r0, [pc, #212]	; (8003534 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800345e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003460:	4001      	ands	r1, r0
 8003462:	430b      	orrs	r3, r1
 8003464:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003466:	686b      	ldr	r3, [r5, #4]
 8003468:	4933      	ldr	r1, [pc, #204]	; (8003538 <UART_SetConfig+0xf0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800346a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346c:	400b      	ands	r3, r1
 800346e:	68e1      	ldr	r1, [r4, #12]
 8003470:	430b      	orrs	r3, r1
 8003472:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003474:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003476:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003478:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800347a:	4830      	ldr	r0, [pc, #192]	; (800353c <UART_SetConfig+0xf4>)
 800347c:	4001      	ands	r1, r0
 800347e:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003480:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003482:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <UART_SetConfig+0xf8>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	400b      	ands	r3, r1
 800348a:	492e      	ldr	r1, [pc, #184]	; (8003544 <UART_SetConfig+0xfc>)
 800348c:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	429a      	cmp	r2, r3
 8003494:	d12c      	bne.n	80034f0 <UART_SetConfig+0xa8>
    switch (clocksource)
 8003496:	2808      	cmp	r0, #8
 8003498:	d827      	bhi.n	80034ea <UART_SetConfig+0xa2>
 800349a:	f7fc fe3d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800349e:	2605      	.short	0x2605
 80034a0:	261e260b 	.word	0x261e260b
 80034a4:	2626      	.short	0x2626
 80034a6:	21          	.byte	0x21
 80034a7:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034a8:	f7ff fb2a 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034ac:	6863      	ldr	r3, [r4, #4]
 80034ae:	0040      	lsls	r0, r0, #1
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	e002      	b.n	80034ba <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034b4:	6863      	ldr	r3, [r4, #4]
 80034b6:	0858      	lsrs	r0, r3, #1
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <UART_SetConfig+0x100>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034ba:	18c0      	adds	r0, r0, r3
 80034bc:	6861      	ldr	r1, [r4, #4]
 80034be:	f7fc fe35 	bl	800012c <__udivsi3>
 80034c2:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c4:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80034c6:	220f      	movs	r2, #15
 80034c8:	0019      	movs	r1, r3
 80034ca:	4391      	bics	r1, r2
 80034cc:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ce:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80034d0:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034d2:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60cb      	str	r3, [r1, #12]
}
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034da:	f7ff fa43 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 80034de:	e7e5      	b.n	80034ac <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	0858      	lsrs	r0, r3, #1
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	025b      	lsls	r3, r3, #9
 80034e8:	e7e7      	b.n	80034ba <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 80034ea:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e7ea      	b.n	80034c6 <UART_SetConfig+0x7e>
    switch (clocksource)
 80034f0:	2808      	cmp	r0, #8
 80034f2:	d81d      	bhi.n	8003530 <UART_SetConfig+0xe8>
 80034f4:	f7fc fe10 	bl	8000118 <__gnu_thumb1_case_uqi>
 80034f8:	1c0a1c05 	.word	0x1c0a1c05
 80034fc:	1c1c1c14 	.word	0x1c1c1c14
 8003500:	17          	.byte	0x17
 8003501:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003502:	f7ff fafd 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003506:	6861      	ldr	r1, [r4, #4]
 8003508:	084b      	lsrs	r3, r1, #1
 800350a:	e002      	b.n	8003512 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800350c:	6861      	ldr	r1, [r4, #4]
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <UART_SetConfig+0x104>)
 8003510:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003512:	18c0      	adds	r0, r0, r3
 8003514:	f7fc fe0a 	bl	800012c <__udivsi3>
 8003518:	b280      	uxth	r0, r0
 800351a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800351c:	2000      	movs	r0, #0
        break;
 800351e:	e7db      	b.n	80034d8 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003520:	f7ff fa20 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8003524:	e7ef      	b.n	8003506 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	6861      	ldr	r1, [r4, #4]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	0848      	lsrs	r0, r1, #1
 800352e:	e7f0      	b.n	8003512 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8003530:	2001      	movs	r0, #1
 8003532:	e7d1      	b.n	80034d8 <UART_SetConfig+0x90>
 8003534:	ffff69f3 	.word	0xffff69f3
 8003538:	ffffcfff 	.word	0xffffcfff
 800353c:	fffff4ff 	.word	0xfffff4ff
 8003540:	40021000 	.word	0x40021000
 8003544:	08005318 	.word	0x08005318
 8003548:	00f42400 	.word	0x00f42400
 800354c:	007a1200 	.word	0x007a1200

08003550 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003550:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003552:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003554:	07da      	lsls	r2, r3, #31
 8003556:	d506      	bpl.n	8003566 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003558:	6801      	ldr	r1, [r0, #0]
 800355a:	4c28      	ldr	r4, [pc, #160]	; (80035fc <UART_AdvFeatureConfig+0xac>)
 800355c:	684a      	ldr	r2, [r1, #4]
 800355e:	4022      	ands	r2, r4
 8003560:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003562:	4322      	orrs	r2, r4
 8003564:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003566:	079a      	lsls	r2, r3, #30
 8003568:	d506      	bpl.n	8003578 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800356a:	6801      	ldr	r1, [r0, #0]
 800356c:	4c24      	ldr	r4, [pc, #144]	; (8003600 <UART_AdvFeatureConfig+0xb0>)
 800356e:	684a      	ldr	r2, [r1, #4]
 8003570:	4022      	ands	r2, r4
 8003572:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003574:	4322      	orrs	r2, r4
 8003576:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003578:	075a      	lsls	r2, r3, #29
 800357a:	d506      	bpl.n	800358a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800357c:	6801      	ldr	r1, [r0, #0]
 800357e:	4c21      	ldr	r4, [pc, #132]	; (8003604 <UART_AdvFeatureConfig+0xb4>)
 8003580:	684a      	ldr	r2, [r1, #4]
 8003582:	4022      	ands	r2, r4
 8003584:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003586:	4322      	orrs	r2, r4
 8003588:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800358a:	071a      	lsls	r2, r3, #28
 800358c:	d506      	bpl.n	800359c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800358e:	6801      	ldr	r1, [r0, #0]
 8003590:	4c1d      	ldr	r4, [pc, #116]	; (8003608 <UART_AdvFeatureConfig+0xb8>)
 8003592:	684a      	ldr	r2, [r1, #4]
 8003594:	4022      	ands	r2, r4
 8003596:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003598:	4322      	orrs	r2, r4
 800359a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800359c:	06da      	lsls	r2, r3, #27
 800359e:	d506      	bpl.n	80035ae <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035a0:	6801      	ldr	r1, [r0, #0]
 80035a2:	4c1a      	ldr	r4, [pc, #104]	; (800360c <UART_AdvFeatureConfig+0xbc>)
 80035a4:	688a      	ldr	r2, [r1, #8]
 80035a6:	4022      	ands	r2, r4
 80035a8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80035aa:	4322      	orrs	r2, r4
 80035ac:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ae:	069a      	lsls	r2, r3, #26
 80035b0:	d506      	bpl.n	80035c0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035b2:	6801      	ldr	r1, [r0, #0]
 80035b4:	4c16      	ldr	r4, [pc, #88]	; (8003610 <UART_AdvFeatureConfig+0xc0>)
 80035b6:	688a      	ldr	r2, [r1, #8]
 80035b8:	4022      	ands	r2, r4
 80035ba:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80035bc:	4322      	orrs	r2, r4
 80035be:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c0:	065a      	lsls	r2, r3, #25
 80035c2:	d510      	bpl.n	80035e6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c4:	6801      	ldr	r1, [r0, #0]
 80035c6:	4d13      	ldr	r5, [pc, #76]	; (8003614 <UART_AdvFeatureConfig+0xc4>)
 80035c8:	684a      	ldr	r2, [r1, #4]
 80035ca:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80035cc:	402a      	ands	r2, r5
 80035ce:	4322      	orrs	r2, r4
 80035d0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	0352      	lsls	r2, r2, #13
 80035d6:	4294      	cmp	r4, r2
 80035d8:	d105      	bne.n	80035e6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035da:	684a      	ldr	r2, [r1, #4]
 80035dc:	4c0e      	ldr	r4, [pc, #56]	; (8003618 <UART_AdvFeatureConfig+0xc8>)
 80035de:	4022      	ands	r2, r4
 80035e0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80035e2:	4322      	orrs	r2, r4
 80035e4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	d506      	bpl.n	80035f8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ea:	6802      	ldr	r2, [r0, #0]
 80035ec:	490b      	ldr	r1, [pc, #44]	; (800361c <UART_AdvFeatureConfig+0xcc>)
 80035ee:	6853      	ldr	r3, [r2, #4]
 80035f0:	400b      	ands	r3, r1
 80035f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6053      	str	r3, [r2, #4]
}
 80035f8:	bd30      	pop	{r4, r5, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	fffdffff 	.word	0xfffdffff
 8003600:	fffeffff 	.word	0xfffeffff
 8003604:	fffbffff 	.word	0xfffbffff
 8003608:	ffff7fff 	.word	0xffff7fff
 800360c:	ffffefff 	.word	0xffffefff
 8003610:	ffffdfff 	.word	0xffffdfff
 8003614:	ffefffff 	.word	0xffefffff
 8003618:	ff9fffff 	.word	0xff9fffff
 800361c:	fff7ffff 	.word	0xfff7ffff

08003620 <HAL_UART_Init>:
{
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003626:	2001      	movs	r0, #1
}
 8003628:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800362a:	0005      	movs	r5, r0
 800362c:	3569      	adds	r5, #105	; 0x69
 800362e:	782b      	ldrb	r3, [r5, #0]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d104      	bne.n	8003640 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8003636:	0002      	movs	r2, r0
 8003638:	3268      	adds	r2, #104	; 0x68
 800363a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800363c:	f000 fddc 	bl	80041f8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003642:	2101      	movs	r1, #1
 8003644:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003646:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003648:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800364a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800364c:	438b      	bics	r3, r1
 800364e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003650:	f7ff fefa 	bl	8003448 <UART_SetConfig>
 8003654:	2801      	cmp	r0, #1
 8003656:	d0e6      	beq.n	8003626 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 800365e:	0020      	movs	r0, r4
 8003660:	f7ff ff76 	bl	8003550 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	490b      	ldr	r1, [pc, #44]	; (8003694 <HAL_UART_Init+0x74>)
 8003668:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366a:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800366c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800366e:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003670:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	438a      	bics	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003678:	2201      	movs	r2, #1
 800367a:	6819      	ldr	r1, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8003682:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8003686:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8003688:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800368a:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800368c:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 800368e:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003690:	e7ca      	b.n	8003628 <HAL_UART_Init+0x8>
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	fffff7ff 	.word	0xfffff7ff

08003698 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003698:	0003      	movs	r3, r0
{
 800369a:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800369c:	3369      	adds	r3, #105	; 0x69
 800369e:	781b      	ldrb	r3, [r3, #0]
{
 80036a0:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80036a2:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a4:	2b21      	cmp	r3, #33	; 0x21
 80036a6:	d10f      	bne.n	80036c8 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 80036a8:	0014      	movs	r4, r2
 80036aa:	3452      	adds	r4, #82	; 0x52
 80036ac:	8823      	ldrh	r3, [r4, #0]
 80036ae:	6811      	ldr	r1, [r2, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80036b6:	680a      	ldr	r2, [r1, #0]
 80036b8:	307e      	adds	r0, #126	; 0x7e
 80036ba:	4382      	bics	r2, r0
 80036bc:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	6808      	ldr	r0, [r1, #0]
 80036c2:	4302      	orrs	r2, r0
 80036c4:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 80036c6:	2000      	movs	r0, #0
  }
}
 80036c8:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ca:	2080      	movs	r0, #128	; 0x80
 80036cc:	6895      	ldr	r5, [r2, #8]
 80036ce:	0140      	lsls	r0, r0, #5
 80036d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80036d2:	4285      	cmp	r5, r0
 80036d4:	d10d      	bne.n	80036f2 <UART_Transmit_IT+0x5a>
 80036d6:	6910      	ldr	r0, [r2, #16]
 80036d8:	2800      	cmp	r0, #0
 80036da:	d10a      	bne.n	80036f2 <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80036dc:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 80036de:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80036e0:	05c0      	lsls	r0, r0, #23
 80036e2:	0dc0      	lsrs	r0, r0, #23
 80036e4:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80036e6:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 80036e8:	8823      	ldrh	r3, [r4, #0]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	8023      	strh	r3, [r4, #0]
 80036f0:	e7e9      	b.n	80036c6 <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80036f2:	1c58      	adds	r0, r3, #1
 80036f4:	64d0      	str	r0, [r2, #76]	; 0x4c
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	850b      	strh	r3, [r1, #40]	; 0x28
 80036fa:	e7f5      	b.n	80036e8 <UART_Transmit_IT+0x50>

080036fc <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036fc:	2140      	movs	r1, #64	; 0x40
 80036fe:	6802      	ldr	r2, [r0, #0]
{
 8003700:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	438b      	bics	r3, r1
 8003706:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003708:	0003      	movs	r3, r0
 800370a:	2220      	movs	r2, #32
 800370c:	3369      	adds	r3, #105	; 0x69
 800370e:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 8003710:	f000 f952 	bl	80039b8 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8003714:	2000      	movs	r0, #0
 8003716:	bd10      	pop	{r4, pc}

08003718 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003718:	0002      	movs	r2, r0
{
 800371a:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800371c:	326a      	adds	r2, #106	; 0x6a
 800371e:	7811      	ldrb	r1, [r2, #0]
 8003720:	6803      	ldr	r3, [r0, #0]
 8003722:	2922      	cmp	r1, #34	; 0x22
 8003724:	d12d      	bne.n	8003782 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 8003726:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 800372a:	315c      	adds	r1, #92	; 0x5c
 800372c:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800372e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003730:	0164      	lsls	r4, r4, #5
 8003732:	4029      	ands	r1, r5
 8003734:	6885      	ldr	r5, [r0, #8]
 8003736:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003738:	42a5      	cmp	r5, r4
 800373a:	d11e      	bne.n	800377a <UART_Receive_IT+0x62>
 800373c:	6904      	ldr	r4, [r0, #16]
 800373e:	2c00      	cmp	r4, #0
 8003740:	d11b      	bne.n	800377a <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8003742:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8003744:	3302      	adds	r3, #2
 8003746:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8003748:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 800374a:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 800374c:	315a      	adds	r1, #90	; 0x5a
 800374e:	880b      	ldrh	r3, [r1, #0]
 8003750:	3b01      	subs	r3, #1
 8003752:	b29b      	uxth	r3, r3
 8003754:	800b      	strh	r3, [r1, #0]
 8003756:	42a3      	cmp	r3, r4
 8003758:	d10d      	bne.n	8003776 <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375a:	6803      	ldr	r3, [r0, #0]
 800375c:	4d0c      	ldr	r5, [pc, #48]	; (8003790 <UART_Receive_IT+0x78>)
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	4029      	ands	r1, r5
 8003762:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	6899      	ldr	r1, [r3, #8]
 8003766:	3523      	adds	r5, #35	; 0x23
 8003768:	35ff      	adds	r5, #255	; 0xff
 800376a:	43a9      	bics	r1, r5
 800376c:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800376e:	2320      	movs	r3, #32
 8003770:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8003772:	f000 f8e5 	bl	8003940 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8003776:	0020      	movs	r0, r4
 8003778:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800377a:	1c5c      	adds	r4, r3, #1
 800377c:	6544      	str	r4, [r0, #84]	; 0x54
 800377e:	7019      	strb	r1, [r3, #0]
 8003780:	e7e2      	b.n	8003748 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003782:	2208      	movs	r2, #8
 8003784:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8003786:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003788:	430a      	orrs	r2, r1
 800378a:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 800378c:	e7f3      	b.n	8003776 <UART_Receive_IT+0x5e>
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	fffffedf 	.word	0xfffffedf

08003794 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003794:	220f      	movs	r2, #15
{
 8003796:	b570      	push	{r4, r5, r6, lr}
 8003798:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800379a:	6800      	ldr	r0, [r0, #0]
 800379c:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800379e:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80037a0:	401a      	ands	r2, r3
  if (errorflags == RESET)
 80037a2:	d108      	bne.n	80037b6 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037a4:	2520      	movs	r5, #32
 80037a6:	422b      	tst	r3, r5
 80037a8:	d005      	beq.n	80037b6 <HAL_UART_IRQHandler+0x22>
 80037aa:	4229      	tst	r1, r5
 80037ac:	d003      	beq.n	80037b6 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 80037ae:	0020      	movs	r0, r4
 80037b0:	f7ff ffb2 	bl	8003718 <UART_Receive_IT>
}
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 80037b6:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 80037b8:	2a00      	cmp	r2, #0
 80037ba:	d060      	beq.n	800387e <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80037bc:	2201      	movs	r2, #1
 80037be:	4015      	ands	r5, r2
 80037c0:	d103      	bne.n	80037ca <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80037c2:	2690      	movs	r6, #144	; 0x90
 80037c4:	0076      	lsls	r6, r6, #1
 80037c6:	4231      	tst	r1, r6
 80037c8:	d059      	beq.n	800387e <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037ca:	4213      	tst	r3, r2
 80037cc:	d005      	beq.n	80037da <HAL_UART_IRQHandler+0x46>
 80037ce:	05ce      	lsls	r6, r1, #23
 80037d0:	d503      	bpl.n	80037da <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80037d2:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037d4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80037d6:	4332      	orrs	r2, r6
 80037d8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037da:	2202      	movs	r2, #2
 80037dc:	4213      	tst	r3, r2
 80037de:	d006      	beq.n	80037ee <HAL_UART_IRQHandler+0x5a>
 80037e0:	2d00      	cmp	r5, #0
 80037e2:	d004      	beq.n	80037ee <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80037e4:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037e6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80037e8:	1892      	adds	r2, r2, r2
 80037ea:	4332      	orrs	r2, r6
 80037ec:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ee:	2204      	movs	r2, #4
 80037f0:	4213      	tst	r3, r2
 80037f2:	d006      	beq.n	8003802 <HAL_UART_IRQHandler+0x6e>
 80037f4:	2d00      	cmp	r5, #0
 80037f6:	d004      	beq.n	8003802 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80037f8:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037fa:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80037fc:	3a02      	subs	r2, #2
 80037fe:	4332      	orrs	r2, r6
 8003800:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003802:	071a      	lsls	r2, r3, #28
 8003804:	d508      	bpl.n	8003818 <HAL_UART_IRQHandler+0x84>
 8003806:	068a      	lsls	r2, r1, #26
 8003808:	d401      	bmi.n	800380e <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800380a:	2d00      	cmp	r5, #0
 800380c:	d004      	beq.n	8003818 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800380e:	2208      	movs	r2, #8
 8003810:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003812:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003814:	4302      	orrs	r2, r0
 8003816:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003818:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800381a:	2a00      	cmp	r2, #0
 800381c:	d0ca      	beq.n	80037b4 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381e:	2220      	movs	r2, #32
 8003820:	4213      	tst	r3, r2
 8003822:	d004      	beq.n	800382e <HAL_UART_IRQHandler+0x9a>
 8003824:	4211      	tst	r1, r2
 8003826:	d002      	beq.n	800382e <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8003828:	0020      	movs	r0, r4
 800382a:	f7ff ff75 	bl	8003718 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800382e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8003830:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003832:	071b      	lsls	r3, r3, #28
 8003834:	d404      	bmi.n	8003840 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	689d      	ldr	r5, [r3, #8]
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800383e:	d01a      	beq.n	8003876 <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8003840:	f7ff fcdc 	bl	80031fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	2140      	movs	r1, #64	; 0x40
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	420a      	tst	r2, r1
 800384c:	d00f      	beq.n	800386e <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384e:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003850:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003852:	438a      	bics	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003856:	2800      	cmp	r0, #0
 8003858:	d009      	beq.n	800386e <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800385a:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <HAL_UART_IRQHandler+0x114>)
 800385c:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800385e:	f7fe fd6a 	bl	8002336 <HAL_DMA_Abort_IT>
 8003862:	2800      	cmp	r0, #0
 8003864:	d0a6      	beq.n	80037b4 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003866:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003868:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800386a:	4798      	blx	r3
 800386c:	e7a2      	b.n	80037b4 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 800386e:	0020      	movs	r0, r4
 8003870:	f7ff fdb0 	bl	80033d4 <HAL_UART_ErrorCallback>
 8003874:	e79e      	b.n	80037b4 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8003876:	f7ff fdad 	bl	80033d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387a:	66e5      	str	r5, [r4, #108]	; 0x6c
 800387c:	e79a      	b.n	80037b4 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	4213      	tst	r3, r2
 8003882:	d005      	beq.n	8003890 <HAL_UART_IRQHandler+0xfc>
 8003884:	4211      	tst	r1, r2
 8003886:	d003      	beq.n	8003890 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8003888:	0020      	movs	r0, r4
 800388a:	f7ff ff05 	bl	8003698 <UART_Transmit_IT>
    return;
 800388e:	e791      	b.n	80037b4 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003890:	2240      	movs	r2, #64	; 0x40
 8003892:	4213      	tst	r3, r2
 8003894:	d100      	bne.n	8003898 <HAL_UART_IRQHandler+0x104>
 8003896:	e78d      	b.n	80037b4 <HAL_UART_IRQHandler+0x20>
 8003898:	4211      	tst	r1, r2
 800389a:	d100      	bne.n	800389e <HAL_UART_IRQHandler+0x10a>
 800389c:	e78a      	b.n	80037b4 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 800389e:	0020      	movs	r0, r4
 80038a0:	f7ff ff2c 	bl	80036fc <UART_EndTransmit_IT>
    return;
 80038a4:	e786      	b.n	80037b4 <HAL_UART_IRQHandler+0x20>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	08003431 	.word	0x08003431

080038ac <get_current_potentiometer>:

#include "function.h"
#include "variables.h"
#define R 155		// Resistor chosen in H-brigde circuit to transform proportional current to a voltage

void get_current_potentiometer(){
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sampledCurrent = ADC_buffer[1];
 80038ae:	4b18      	ldr	r3, [pc, #96]	; (8003910 <get_current_potentiometer+0x64>)
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <get_current_potentiometer+0x68>)
 80038b2:	681b      	ldr	r3, [r3, #0]
	sampledPotentiometer = ADC_buffer[0];
 80038b4:	4f18      	ldr	r7, [pc, #96]	; (8003918 <get_current_potentiometer+0x6c>)
	sampledCurrent = ADC_buffer[1];
 80038b6:	685e      	ldr	r6, [r3, #4]
 80038b8:	6016      	str	r6, [r2, #0]
	sampledPotentiometer = ADC_buffer[0];
 80038ba:	6818      	ldr	r0, [r3, #0]



	prevprev_q1 = prev_q1;
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <get_current_potentiometer+0x70>)
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <get_current_potentiometer+0x74>)
	sampledPotentiometer = ADC_buffer[0];
 80038c0:	6038      	str	r0, [r7, #0]
	prevprev_q1 = prev_q1;
 80038c2:	681c      	ldr	r4, [r3, #0]
 80038c4:	685d      	ldr	r5, [r3, #4]
 80038c6:	6014      	str	r4, [r2, #0]
 80038c8:	6055      	str	r5, [r2, #4]
	prev_q1 = q1;
 80038ca:	4c16      	ldr	r4, [pc, #88]	; (8003924 <get_current_potentiometer+0x78>)
 80038cc:	6821      	ldr	r1, [r4, #0]
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	6019      	str	r1, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
	q1 = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <get_current_potentiometer+0x7c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	1ac0      	subs	r0, r0, r3
 80038da:	f7fc fef3 	bl	80006c4 <__aeabi_i2f>
 80038de:	4913      	ldr	r1, [pc, #76]	; (800392c <get_current_potentiometer+0x80>)
 80038e0:	f7fc fdd0 	bl	8000484 <__aeabi_fmul>
 80038e4:	f7fe f95a 	bl	8001b9c <__aeabi_f2d>
	torque = (sampledCurrent<<9);
 80038e8:	2200      	movs	r2, #0
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <get_current_potentiometer+0x84>)
	q1 = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 80038ec:	6020      	str	r0, [r4, #0]
 80038ee:	6061      	str	r1, [r4, #4]
	torque = (sampledCurrent<<9);
 80038f0:	701a      	strb	r2, [r3, #0]
//	q1dot = (prevprev_q1 - prev_q1<<2+3*q1)/(time<<2); // time variable needs to change




	sprintf(send_torque,"%lu", sampledCurrent);
 80038f2:	4c10      	ldr	r4, [pc, #64]	; (8003934 <get_current_potentiometer+0x88>)
 80038f4:	4b10      	ldr	r3, [pc, #64]	; (8003938 <get_current_potentiometer+0x8c>)
 80038f6:	0032      	movs	r2, r6
 80038f8:	0021      	movs	r1, r4
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	f001 f886 	bl	8004a0c <siprintf>
	sprintf(send_q1,"%lu", sampledPotentiometer);
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <get_current_potentiometer+0x90>)
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	0021      	movs	r1, r4
 8003908:	f001 f880 	bl	8004a0c <siprintf>
	// Do conversion equation to get 'real' value



	// store in buffer to be send across UART
}
 800390c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	2000021c 	.word	0x2000021c
 8003914:	2000027c 	.word	0x2000027c
 8003918:	20000280 	.word	0x20000280
 800391c:	20000248 	.word	0x20000248
 8003920:	20000238 	.word	0x20000238
 8003924:	20000260 	.word	0x20000260
 8003928:	20000028 	.word	0x20000028
 800392c:	3ac88a48 	.word	0x3ac88a48
 8003930:	200002b4 	.word	0x200002b4
 8003934:	0800531c 	.word	0x0800531c
 8003938:	20000294 	.word	0x20000294
 800393c:	20000288 	.word	0x20000288

08003940 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
// interrupt when byte is received on UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	uart_flag = 1;
 8003940:	2201      	movs	r2, #1
 8003942:	4b01      	ldr	r3, [pc, #4]	; (8003948 <HAL_UART_RxCpltCallback+0x8>)
 8003944:	701a      	strb	r2, [r3, #0]
}
 8003946:	4770      	bx	lr
 8003948:	200002b8 	.word	0x200002b8

0800394c <HAL_GPIO_EXTI_Callback>:

//interrupt when encoder is experiencing an rising or falling edge
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	encoder_flag = 1;
 800394c:	2201      	movs	r2, #1
 800394e:	4b01      	ldr	r3, [pc, #4]	; (8003954 <HAL_GPIO_EXTI_Callback+0x8>)
 8003950:	701a      	strb	r2, [r3, #0]

}
 8003952:	4770      	bx	lr
 8003954:	20000233 	.word	0x20000233

08003958 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance == htim16.Instance){
 8003958:	6803      	ldr	r3, [r0, #0]
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIM_PeriodElapsedCallback+0x14>
		send_data_flag = 1;
	}
	else if(htim->Instance == htim14.Instance){
 8003962:	4a08      	ldr	r2, [pc, #32]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_TIM_PeriodElapsedCallback+0x1c>
		adc_flag = 1;
		data_flag = 1;
	}
//	data_flag = 1;
//	adc_flag = 1;
}
 800396a:	4770      	bx	lr
		send_data_flag = 1;
 800396c:	2201      	movs	r2, #1
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e7fa      	b.n	800396a <HAL_TIM_PeriodElapsedCallback+0x12>
		adc_flag = 1;
 8003974:	2301      	movs	r3, #1
 8003976:	4a05      	ldr	r2, [pc, #20]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003978:	7013      	strb	r3, [r2, #0]
		data_flag = 1;
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800397c:	7013      	strb	r3, [r2, #0]
}
 800397e:	e7f4      	b.n	800396a <HAL_TIM_PeriodElapsedCallback+0x12>
 8003980:	20000494 	.word	0x20000494
 8003984:	200003c4 	.word	0x200003c4
 8003988:	20000024 	.word	0x20000024
 800398c:	20000220 	.word	0x20000220
 8003990:	20000230 	.word	0x20000230

08003994 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
	// check what timer counter it is before setting flag
	pwm_flag = 1;
 8003994:	2201      	movs	r2, #1
 8003996:	4b01      	ldr	r3, [pc, #4]	; (800399c <HAL_TIM_OC_DelayElapsedCallback+0x8>)
 8003998:	701a      	strb	r2, [r3, #0]
}
 800399a:	4770      	bx	lr
 800399c:	20000258 	.word	0x20000258

080039a0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
 80039a0:	2201      	movs	r2, #1
 80039a2:	4b01      	ldr	r3, [pc, #4]	; (80039a8 <HAL_TIM_IC_CaptureCallback+0x8>)
 80039a4:	701a      	strb	r2, [r3, #0]
}
 80039a6:	4770      	bx	lr
 80039a8:	20000258 	.word	0x20000258

080039ac <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
 80039ac:	2201      	movs	r2, #1
 80039ae:	4b01      	ldr	r3, [pc, #4]	; (80039b4 <HAL_TIM_PWM_PulseFinishedCallback+0x8>)
 80039b0:	701a      	strb	r2, [r3, #0]
}
 80039b2:	4770      	bx	lr
 80039b4:	20000258 	.word	0x20000258

080039b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 80039b8:	b510      	push	{r4, lr}
	memset(rx_buffer,0x00, 8);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_UART_TxCpltCallback+0x24>)
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	2208      	movs	r2, #8
 80039c0:	2100      	movs	r1, #0
 80039c2:	f000 ff60 	bl	8004886 <memset>
	rx_buffer_cntr = 0;
 80039c6:	2200      	movs	r2, #0
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_UART_TxCpltCallback+0x28>)
 80039ca:	701a      	strb	r2, [r3, #0]
	memset(data_buffer,0x00,40);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_UART_TxCpltCallback+0x2c>)
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	3228      	adds	r2, #40	; 0x28
 80039d2:	2100      	movs	r1, #0
 80039d4:	f000 ff57 	bl	8004886 <memset>
}
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	20000274 	.word	0x20000274
 80039e0:	20000278 	.word	0x20000278
 80039e4:	2000022c 	.word	0x2000022c

080039e8 <read_motor_position>:


void read_motor_position(){
 80039e8:	b510      	push	{r4, lr}

	prevprev_q2 = prev_q2;
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <read_motor_position+0x7c>)
 80039ec:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <read_motor_position+0x80>)
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	6010      	str	r0, [r2, #0]
 80039f4:	6051      	str	r1, [r2, #4]
	prev_q2 = q2;
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <read_motor_position+0x84>)
 80039f8:	6811      	ldr	r1, [r2, #0]
 80039fa:	6852      	ldr	r2, [r2, #4]
 80039fc:	6019      	str	r1, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
	error_step_prev = q2_steps;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <read_motor_position+0x88>)
 8003a02:	881a      	ldrh	r2, [r3, #0]
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <read_motor_position+0x8c>)
 8003a06:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8003a08:	2110      	movs	r1, #16
 8003a0a:	481b      	ldr	r0, [pc, #108]	; (8003a78 <read_motor_position+0x90>)
 8003a0c:	f7fe fdb0 	bl	8002570 <HAL_GPIO_ReadPin>
 8003a10:	2801      	cmp	r0, #1
 8003a12:	d017      	beq.n	8003a44 <read_motor_position+0x5c>
		q2_steps += 1;
		q2 = q2_steps*dir_increment_size;
	}
	else{ // actuated pendulum is turning anti-clockwise
		q2_steps -= 1;
 8003a14:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <read_motor_position+0x88>)
 8003a16:	8818      	ldrh	r0, [r3, #0]
 8003a18:	3801      	subs	r0, #1
 8003a1a:	b200      	sxth	r0, r0
 8003a1c:	8018      	strh	r0, [r3, #0]
		q2 = q2_steps*dir_increment_size;
 8003a1e:	f7fe f87b 	bl	8001b18 <__aeabi_i2d>
 8003a22:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <read_motor_position+0x94>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f7fd faac 	bl	8000f84 <__aeabi_dmul>
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <read_motor_position+0x84>)
 8003a2e:	6018      	str	r0, [r3, #0]
 8003a30:	6059      	str	r1, [r3, #4]
	}
	sprintf(send_q2,"%d", q2_steps);
 8003a32:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <read_motor_position+0x88>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	5e9a      	ldrsh	r2, [r3, r2]
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <read_motor_position+0x98>)
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	4911      	ldr	r1, [pc, #68]	; (8003a84 <read_motor_position+0x9c>)
 8003a3e:	f000 ffe5 	bl	8004a0c <siprintf>

	//three point backward difference
//	q2dot = (prevprev_q2 - prev_q2<<2+3*q2)/(2*time); // time variable needs to change

}
 8003a42:	bd10      	pop	{r4, pc}
		q2_steps += 1;
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <read_motor_position+0x88>)
 8003a46:	8818      	ldrh	r0, [r3, #0]
 8003a48:	3001      	adds	r0, #1
 8003a4a:	b200      	sxth	r0, r0
 8003a4c:	8018      	strh	r0, [r3, #0]
		q2 = q2_steps*dir_increment_size;
 8003a4e:	f7fe f863 	bl	8001b18 <__aeabi_i2d>
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <read_motor_position+0x94>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f7fd fa94 	bl	8000f84 <__aeabi_dmul>
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <read_motor_position+0x84>)
 8003a5e:	6018      	str	r0, [r3, #0]
 8003a60:	6059      	str	r1, [r3, #4]
 8003a62:	e7e6      	b.n	8003a32 <read_motor_position+0x4a>
 8003a64:	20000240 	.word	0x20000240
 8003a68:	20000250 	.word	0x20000250
 8003a6c:	20000268 	.word	0x20000268
 8003a70:	20000270 	.word	0x20000270
 8003a74:	20000234 	.word	0x20000234
 8003a78:	48000400 	.word	0x48000400
 8003a7c:	20000010 	.word	0x20000010
 8003a80:	2000028c 	.word	0x2000028c
 8003a84:	08005320 	.word	0x08005320

08003a88 <torque_output>:
/*Creates a discrete representation of the arctan function. The
 * discrete value is contained in a array
 */


void torque_output(){
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8a:	46c6      	mov	lr, r8
 8003a8c:	b500      	push	{lr}
 8003a8e:	b082      	sub	sp, #8
//	"DB3".Unow := "DB3".kp * "DB3".Enow - "DB3".kp * "DB3".Eprev + "DB3".ki / (2 /
//	"DB3".Ts) * "DB3".Enow + "DB3".ki / (2 / "DB3".Ts) * "DB3".Eprev + "DB3".Uprev;



	if(q2 > 0.f){
 8003a90:	4b6c      	ldr	r3, [pc, #432]	; (8003c44 <torque_output+0x1bc>)
 8003a92:	681c      	ldr	r4, [r3, #0]
 8003a94:	685d      	ldr	r5, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	2300      	movs	r3, #0
 8003a9a:	0020      	movs	r0, r4
 8003a9c:	0029      	movs	r1, r5
 8003a9e:	f7fc fbfb 	bl	8000298 <__aeabi_dcmpgt>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d063      	beq.n	8003b6e <torque_output+0xe6>
		compensate = 1;
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <torque_output+0x1c0>)
 8003aaa:	701a      	strb	r2, [r3, #0]
		torque_prev = output_torque;
 8003aac:	4b67      	ldr	r3, [pc, #412]	; (8003c4c <torque_output+0x1c4>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	5e9b      	ldrsh	r3, [r3, r2]
 8003ab2:	4698      	mov	r8, r3
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <torque_output+0x1c8>)
 8003ab6:	4642      	mov	r2, r8
 8003ab8:	801a      	strh	r2, [r3, #0]
//		output_torque = 2*(q2_steps - error_step_prev) + (q2_steps + error_step_prev) + torque_prev;

		if(50*(q2 - prev_q2) + 1*(q2 + prev_q2) + torque_prev>30){
 8003aba:	4b66      	ldr	r3, [pc, #408]	; (8003c54 <torque_output+0x1cc>)
 8003abc:	681e      	ldr	r6, [r3, #0]
 8003abe:	685f      	ldr	r7, [r3, #4]
 8003ac0:	0032      	movs	r2, r6
 8003ac2:	003b      	movs	r3, r7
 8003ac4:	0020      	movs	r0, r4
 8003ac6:	0029      	movs	r1, r5
 8003ac8:	f7fd fcdc 	bl	8001484 <__aeabi_dsub>
 8003acc:	2200      	movs	r2, #0
 8003ace:	4b62      	ldr	r3, [pc, #392]	; (8003c58 <torque_output+0x1d0>)
 8003ad0:	f7fd fa58 	bl	8000f84 <__aeabi_dmul>
 8003ad4:	9000      	str	r0, [sp, #0]
 8003ad6:	9101      	str	r1, [sp, #4]
 8003ad8:	0032      	movs	r2, r6
 8003ada:	003b      	movs	r3, r7
 8003adc:	0020      	movs	r0, r4
 8003ade:	0029      	movs	r1, r5
 8003ae0:	f7fc fe40 	bl	8000764 <__aeabi_dadd>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	000b      	movs	r3, r1
 8003ae8:	9800      	ldr	r0, [sp, #0]
 8003aea:	9901      	ldr	r1, [sp, #4]
 8003aec:	f7fc fe3a 	bl	8000764 <__aeabi_dadd>
 8003af0:	0004      	movs	r4, r0
 8003af2:	000d      	movs	r5, r1
 8003af4:	4640      	mov	r0, r8
 8003af6:	f7fe f80f 	bl	8001b18 <__aeabi_i2d>
 8003afa:	0022      	movs	r2, r4
 8003afc:	002b      	movs	r3, r5
 8003afe:	f7fc fe31 	bl	8000764 <__aeabi_dadd>
 8003b02:	0004      	movs	r4, r0
 8003b04:	000d      	movs	r5, r1
 8003b06:	2200      	movs	r2, #0
 8003b08:	4b54      	ldr	r3, [pc, #336]	; (8003c5c <torque_output+0x1d4>)
 8003b0a:	f7fc fbc5 	bl	8000298 <__aeabi_dcmpgt>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d026      	beq.n	8003b60 <torque_output+0xd8>
			output_torque = 30;
 8003b12:	221e      	movs	r2, #30
 8003b14:	4b4d      	ldr	r3, [pc, #308]	; (8003c4c <torque_output+0x1c4>)
 8003b16:	801a      	strh	r2, [r3, #0]
		}
		else{
			output_torque = 50*(q2 - prev_q2) + 1*(q2 + prev_q2) + torque_prev;
		}

		duty_cycle = 100 - output_torque;
 8003b18:	4b4c      	ldr	r3, [pc, #304]	; (8003c4c <torque_output+0x1c4>)
 8003b1a:	881a      	ldrh	r2, [r3, #0]
 8003b1c:	2364      	movs	r3, #100	; 0x64
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	4a4f      	ldr	r2, [pc, #316]	; (8003c60 <torque_output+0x1d8>)
 8003b22:	7013      	strb	r3, [r2, #0]

//		output_torque = 2*(q2_steps - error_step_prev) + (q2_steps + error_step_prev) + torque_prev;
		duty_cycle = output_torque + 100;
	}

	if(compensate && q2_steps > 0.f){
 8003b24:	4b48      	ldr	r3, [pc, #288]	; (8003c48 <torque_output+0x1c0>)
 8003b26:	781c      	ldrb	r4, [r3, #0]
 8003b28:	2c00      	cmp	r4, #0
 8003b2a:	d009      	beq.n	8003b40 <torque_output+0xb8>
 8003b2c:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <torque_output+0x1dc>)
 8003b2e:	2000      	movs	r0, #0
 8003b30:	5e18      	ldrsh	r0, [r3, r0]
 8003b32:	f7fc fdc7 	bl	80006c4 <__aeabi_i2f>
 8003b36:	2100      	movs	r1, #0
 8003b38:	f7fc fbe8 	bl	800030c <__aeabi_fcmpgt>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d165      	bne.n	8003c0c <torque_output+0x184>
		motor_dir = 0;
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,motor_dir);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
	}

	else if (!compensate && q2_steps < 0.f){
 8003b40:	2c00      	cmp	r4, #0
 8003b42:	d109      	bne.n	8003b58 <torque_output+0xd0>
 8003b44:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <torque_output+0x1dc>)
 8003b46:	2000      	movs	r0, #0
 8003b48:	5e18      	ldrsh	r0, [r3, r0]
 8003b4a:	f7fc fdbb 	bl	80006c4 <__aeabi_i2f>
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f7fc fbc8 	bl	80002e4 <__aeabi_fcmplt>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d167      	bne.n	8003c28 <torque_output+0x1a0>
		motor_dir = 1;
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,motor_dir);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
	}

}
 8003b58:	b002      	add	sp, #8
 8003b5a:	bc04      	pop	{r2}
 8003b5c:	4690      	mov	r8, r2
 8003b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			output_torque = 50*(q2 - prev_q2) + 1*(q2 + prev_q2) + torque_prev;
 8003b60:	0020      	movs	r0, r4
 8003b62:	0029      	movs	r1, r5
 8003b64:	f7fd ffa4 	bl	8001ab0 <__aeabi_d2iz>
 8003b68:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <torque_output+0x1c4>)
 8003b6a:	8018      	strh	r0, [r3, #0]
 8003b6c:	e7d4      	b.n	8003b18 <torque_output+0x90>
	else if(q2 < 0.f){
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2300      	movs	r3, #0
 8003b72:	0020      	movs	r0, r4
 8003b74:	0029      	movs	r1, r5
 8003b76:	f7fc fb7b 	bl	8000270 <__aeabi_dcmplt>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d0d2      	beq.n	8003b24 <torque_output+0x9c>
		compensate = 0;
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <torque_output+0x1c0>)
 8003b82:	701a      	strb	r2, [r3, #0]
		torque_prev = output_torque;
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <torque_output+0x1c4>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	5e9b      	ldrsh	r3, [r3, r2]
 8003b8a:	4698      	mov	r8, r3
 8003b8c:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <torque_output+0x1c8>)
 8003b8e:	4642      	mov	r2, r8
 8003b90:	801a      	strh	r2, [r3, #0]
		if(50*(q2 - prev_q2) + 1*(q2 + prev_q2) + torque_prev < -30){
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <torque_output+0x1cc>)
 8003b94:	681e      	ldr	r6, [r3, #0]
 8003b96:	685f      	ldr	r7, [r3, #4]
 8003b98:	0032      	movs	r2, r6
 8003b9a:	003b      	movs	r3, r7
 8003b9c:	0020      	movs	r0, r4
 8003b9e:	0029      	movs	r1, r5
 8003ba0:	f7fd fc70 	bl	8001484 <__aeabi_dsub>
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <torque_output+0x1d0>)
 8003ba8:	f7fd f9ec 	bl	8000f84 <__aeabi_dmul>
 8003bac:	9000      	str	r0, [sp, #0]
 8003bae:	9101      	str	r1, [sp, #4]
 8003bb0:	0032      	movs	r2, r6
 8003bb2:	003b      	movs	r3, r7
 8003bb4:	0020      	movs	r0, r4
 8003bb6:	0029      	movs	r1, r5
 8003bb8:	f7fc fdd4 	bl	8000764 <__aeabi_dadd>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	000b      	movs	r3, r1
 8003bc0:	9800      	ldr	r0, [sp, #0]
 8003bc2:	9901      	ldr	r1, [sp, #4]
 8003bc4:	f7fc fdce 	bl	8000764 <__aeabi_dadd>
 8003bc8:	0004      	movs	r4, r0
 8003bca:	000d      	movs	r5, r1
 8003bcc:	4640      	mov	r0, r8
 8003bce:	f7fd ffa3 	bl	8001b18 <__aeabi_i2d>
 8003bd2:	0022      	movs	r2, r4
 8003bd4:	002b      	movs	r3, r5
 8003bd6:	f7fc fdc5 	bl	8000764 <__aeabi_dadd>
 8003bda:	0004      	movs	r4, r0
 8003bdc:	000d      	movs	r5, r1
 8003bde:	2200      	movs	r2, #0
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <torque_output+0x1e0>)
 8003be2:	f7fc fb45 	bl	8000270 <__aeabi_dcmplt>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d009      	beq.n	8003bfe <torque_output+0x176>
			output_torque = -30;
 8003bea:	221e      	movs	r2, #30
 8003bec:	4252      	negs	r2, r2
 8003bee:	4b17      	ldr	r3, [pc, #92]	; (8003c4c <torque_output+0x1c4>)
 8003bf0:	801a      	strh	r2, [r3, #0]
		duty_cycle = output_torque + 100;
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <torque_output+0x1c4>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	3364      	adds	r3, #100	; 0x64
 8003bf8:	4a19      	ldr	r2, [pc, #100]	; (8003c60 <torque_output+0x1d8>)
 8003bfa:	7013      	strb	r3, [r2, #0]
 8003bfc:	e792      	b.n	8003b24 <torque_output+0x9c>
			output_torque = 50*(q2 - prev_q2) + 1*(q2 + prev_q2) + torque_prev;
 8003bfe:	0020      	movs	r0, r4
 8003c00:	0029      	movs	r1, r5
 8003c02:	f7fd ff55 	bl	8001ab0 <__aeabi_d2iz>
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <torque_output+0x1c4>)
 8003c08:	8018      	strh	r0, [r3, #0]
 8003c0a:	e7f2      	b.n	8003bf2 <torque_output+0x16a>
		motor_dir = 0;
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <torque_output+0x1e4>)
 8003c10:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,motor_dir);
 8003c12:	2120      	movs	r1, #32
 8003c14:	2090      	movs	r0, #144	; 0x90
 8003c16:	05c0      	lsls	r0, r0, #23
 8003c18:	f7fe fcb0 	bl	800257c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <torque_output+0x1e8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <torque_output+0x1d8>)
 8003c22:	7812      	ldrb	r2, [r2, #0]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
 8003c26:	e797      	b.n	8003b58 <torque_output+0xd0>
		motor_dir = 1;
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <torque_output+0x1e4>)
 8003c2c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,motor_dir);
 8003c2e:	2120      	movs	r1, #32
 8003c30:	2090      	movs	r0, #144	; 0x90
 8003c32:	05c0      	lsls	r0, r0, #23
 8003c34:	f7fe fca2 	bl	800257c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <torque_output+0x1e8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <torque_output+0x1d8>)
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c42:	e789      	b.n	8003b58 <torque_output+0xd0>
 8003c44:	20000268 	.word	0x20000268
 8003c48:	20000228 	.word	0x20000228
 8003c4c:	20000236 	.word	0x20000236
 8003c50:	200002b6 	.word	0x200002b6
 8003c54:	20000240 	.word	0x20000240
 8003c58:	40490000 	.word	0x40490000
 8003c5c:	403e0000 	.word	0x403e0000
 8003c60:	20000231 	.word	0x20000231
 8003c64:	20000270 	.word	0x20000270
 8003c68:	c03e0000 	.word	0xc03e0000
 8003c6c:	20000235 	.word	0x20000235
 8003c70:	200002d0 	.word	0x200002d0

08003c74 <startPeripherals>:
extern ADC_HandleTypeDef hadc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim16;

void startPeripherals(){
 8003c74:	b510      	push	{r4, lr}

	HAL_ADCEx_Calibration_Start(&hadc);					// Calibrate the ADC
 8003c76:	4c12      	ldr	r4, [pc, #72]	; (8003cc0 <startPeripherals+0x4c>)
 8003c78:	0020      	movs	r0, r4
 8003c7a:	f7fe fa2f 	bl	80020dc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, ADC_buffer, 2);			// Start to capture the ADC with DMA
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <startPeripherals+0x50>)
 8003c80:	2202      	movs	r2, #2
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	0020      	movs	r0, r4
 8003c86:	f7fe f91b 	bl	8001ec0 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim14);						// Timer responsible for time-keeping and triggers system state to be send
 8003c8a:	480f      	ldr	r0, [pc, #60]	; (8003cc8 <startPeripherals+0x54>)
 8003c8c:	f7ff f87c 	bl	8002d88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);						// Timer responsible for time-keeping and triggers system state to be send
 8003c90:	480e      	ldr	r0, [pc, #56]	; (8003ccc <startPeripherals+0x58>)
 8003c92:	f7ff f879 	bl	8002d88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);			// Start the Timer Module with PWM
 8003c96:	4c0e      	ldr	r4, [pc, #56]	; (8003cd0 <startPeripherals+0x5c>)
 8003c98:	2104      	movs	r1, #4
 8003c9a:	0020      	movs	r0, r4
 8003c9c:	f7ff fa4c 	bl	8003138 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8003ca4:	490b      	ldr	r1, [pc, #44]	; (8003cd4 <startPeripherals+0x60>)
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8003ca8:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <startPeripherals+0x64>)
 8003caa:	3201      	adds	r2, #1
 8003cac:	f7ff fae4 	bl	8003278 <HAL_UART_Receive_IT>


//	HAL_Delay(500);										// Delay for peripherals to settle
	HAL_GPIO_WritePin(DEBUG_LED1_GPIO_Port,DEBUG_LED1_Pin,1); // LED ON indicates system is ready
 8003cb0:	2090      	movs	r0, #144	; 0x90
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2108      	movs	r1, #8
 8003cb6:	05c0      	lsls	r0, r0, #23
 8003cb8:	f7fe fc60 	bl	800257c <HAL_GPIO_WritePin>

	//startval_sampledPotentiometer = ADC_buffer[1];

}
 8003cbc:	bd10      	pop	{r4, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	20000448 	.word	0x20000448
 8003cc4:	2000021c 	.word	0x2000021c
 8003cc8:	200003c4 	.word	0x200003c4
 8003ccc:	20000494 	.word	0x20000494
 8003cd0:	200002d0 	.word	0x200002d0
 8003cd4:	20000279 	.word	0x20000279
 8003cd8:	20000354 	.word	0x20000354

08003cdc <init_variables>:


void init_variables(){
 8003cdc:	b570      	push	{r4, r5, r6, lr}

	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 8003cde:	2008      	movs	r0, #8
	memset(rx_buffer,0x00,8);
 8003ce0:	2408      	movs	r4, #8
	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 8003ce2:	f000 fdbd 	bl	8004860 <malloc>
 8003ce6:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <init_variables+0xc4>)
	memset(rx_buffer,0x00,8);
 8003ce8:	0022      	movs	r2, r4
 8003cea:	2100      	movs	r1, #0
	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 8003cec:	6018      	str	r0, [r3, #0]
	memset(rx_buffer,0x00,8);
 8003cee:	f000 fdca 	bl	8004886 <memset>

	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8003cf2:	0020      	movs	r0, r4
 8003cf4:	f000 fdb4 	bl	8004860 <malloc>
 8003cf8:	4b2a      	ldr	r3, [pc, #168]	; (8003da4 <init_variables+0xc8>)
	memset(verification,0x00,8);
 8003cfa:	0022      	movs	r2, r4
 8003cfc:	2100      	movs	r1, #0
	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8003cfe:	6018      	str	r0, [r3, #0]
	memset(verification,0x00,8);
 8003d00:	f000 fdc1 	bl	8004886 <memset>

	// might to be larger to account for decimals
	data_buffer = (uint8_t*)malloc(40*sizeof(uint8_t));
 8003d04:	2028      	movs	r0, #40	; 0x28
 8003d06:	f000 fdab 	bl	8004860 <malloc>
 8003d0a:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <init_variables+0xcc>)
	memset(data_buffer,0x00,40);
 8003d0c:	2228      	movs	r2, #40	; 0x28
 8003d0e:	2100      	movs	r1, #0
	data_buffer = (uint8_t*)malloc(40*sizeof(uint8_t));
 8003d10:	0005      	movs	r5, r0
 8003d12:	6018      	str	r0, [r3, #0]
	memset(data_buffer,0x00,40);
 8003d14:	f000 fdb7 	bl	8004886 <memset>

	// forming dat structure to be send
	memcpy(data_buffer, dollar, strlen((char*)dollar));
 8003d18:	4b24      	ldr	r3, [pc, #144]	; (8003dac <init_variables+0xd0>)
 8003d1a:	681e      	ldr	r6, [r3, #0]
 8003d1c:	0030      	movs	r0, r6
 8003d1e:	f7fc f9f3 	bl	8000108 <strlen>
 8003d22:	0031      	movs	r1, r6
 8003d24:	0002      	movs	r2, r0
 8003d26:	0028      	movs	r0, r5
 8003d28:	f000 fda4 	bl	8004874 <memcpy>


	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8003d2c:	0020      	movs	r0, r4
 8003d2e:	f000 fd97 	bl	8004860 <malloc>
	memset(ADC_buffer,0x00,2);
 8003d32:	2400      	movs	r4, #0
	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8003d34:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <init_variables+0xd4>)
	memset(ADC_buffer,0x00,2);
 8003d36:	8004      	strh	r4, [r0, #0]
	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8003d38:	6018      	str	r0, [r3, #0]

	atan_vals = (double*)malloc(100*sizeof(double));
 8003d3a:	20c8      	movs	r0, #200	; 0xc8
 8003d3c:	0080      	lsls	r0, r0, #2
 8003d3e:	f000 fd8f 	bl	8004860 <malloc>
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <init_variables+0xd8>)
	memset(atan_vals,0x00,100);
 8003d44:	0021      	movs	r1, r4
 8003d46:	2264      	movs	r2, #100	; 0x64
	atan_vals = (double*)malloc(100*sizeof(double));
 8003d48:	6018      	str	r0, [r3, #0]
	memset(atan_vals,0x00,100);
 8003d4a:	f000 fd9c 	bl	8004886 <memset>

	scratchpad = (uint8_t*)malloc(5*sizeof(uint8_t));
 8003d4e:	2005      	movs	r0, #5
 8003d50:	f000 fd86 	bl	8004860 <malloc>
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <init_variables+0xdc>)
	memset(scratchpad,0x00,5);
 8003d56:	0021      	movs	r1, r4
 8003d58:	2205      	movs	r2, #5
	scratchpad = (uint8_t*)malloc(5*sizeof(uint8_t));
 8003d5a:	6018      	str	r0, [r3, #0]
	memset(scratchpad,0x00,5);
 8003d5c:	f000 fd93 	bl	8004886 <memset>

	send_q1 = (char*)malloc(10*sizeof(char));
 8003d60:	200a      	movs	r0, #10
 8003d62:	f000 fd7d 	bl	8004860 <malloc>
 8003d66:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <init_variables+0xe0>)
	memset(send_q1,0x00,10);
 8003d68:	0021      	movs	r1, r4
 8003d6a:	220a      	movs	r2, #10
	send_q1 = (char*)malloc(10*sizeof(char));
 8003d6c:	6018      	str	r0, [r3, #0]
	memset(send_q1,0x00,10);
 8003d6e:	f000 fd8a 	bl	8004886 <memset>
	send_q2 = (char*)malloc(6*sizeof(char));
 8003d72:	2006      	movs	r0, #6
 8003d74:	f000 fd74 	bl	8004860 <malloc>
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <init_variables+0xe4>)
	memset(send_q2,0x00,6);
 8003d7a:	2206      	movs	r2, #6
 8003d7c:	0021      	movs	r1, r4
	send_q2 = (char*)malloc(6*sizeof(char));
 8003d7e:	6018      	str	r0, [r3, #0]
	memset(send_q2,0x00,6);
 8003d80:	f000 fd81 	bl	8004886 <memset>
	send_torque = (char*)malloc(4*sizeof(char));
 8003d84:	2004      	movs	r0, #4
 8003d86:	f000 fd6b 	bl	8004860 <malloc>
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <init_variables+0xe8>)
	memset(send_torque,0x00,4);
 8003d8c:	6004      	str	r4, [r0, #0]
	send_torque = (char*)malloc(4*sizeof(char));
 8003d8e:	6018      	str	r0, [r3, #0]
	send_time = (char*)malloc(4*sizeof(char));
 8003d90:	2004      	movs	r0, #4
 8003d92:	f000 fd65 	bl	8004860 <malloc>
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <init_variables+0xec>)
	memset(send_time,0x00,4);
 8003d98:	6004      	str	r4, [r0, #0]
	send_time = (char*)malloc(4*sizeof(char));
 8003d9a:	6018      	str	r0, [r3, #0]



	// temporary, this should be done where the variables are measured

}
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	20000274 	.word	0x20000274
 8003da4:	200002bc 	.word	0x200002bc
 8003da8:	2000022c 	.word	0x2000022c
 8003dac:	20000018 	.word	0x20000018
 8003db0:	2000021c 	.word	0x2000021c
 8003db4:	20000224 	.word	0x20000224
 8003db8:	20000284 	.word	0x20000284
 8003dbc:	20000288 	.word	0x20000288
 8003dc0:	2000028c 	.word	0x2000028c
 8003dc4:	20000294 	.word	0x20000294
 8003dc8:	20000290 	.word	0x20000290

08003dcc <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003dcc:	2312      	movs	r3, #18
{
 8003dce:	b530      	push	{r4, r5, lr}
 8003dd0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003dd2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003dd4:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003dd6:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003dd8:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003dda:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003ddc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dde:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003de0:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003de2:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003de4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003de6:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003de8:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dea:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003dec:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003dee:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003df0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003df2:	f7fe fbd5 	bl	80025a0 <HAL_RCC_OscConfig>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d000      	beq.n	8003dfc <SystemClock_Config+0x30>
 8003dfa:	e7fe      	b.n	8003dfa <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dfc:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dfe:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e00:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e02:	2101      	movs	r1, #1
 8003e04:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e06:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e08:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e0a:	f7fe fddd 	bl	80029c8 <HAL_RCC_ClockConfig>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d000      	beq.n	8003e14 <SystemClock_Config+0x48>
 8003e12:	e7fe      	b.n	8003e12 <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003e14:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e16:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e18:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e1a:	f7fe fe81 	bl	8002b20 <HAL_RCCEx_PeriphCLKConfig>
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	d000      	beq.n	8003e24 <SystemClock_Config+0x58>
 8003e22:	e7fe      	b.n	8003e22 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003e24:	f7fe fe66 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8003e28:	21fa      	movs	r1, #250	; 0xfa
 8003e2a:	0089      	lsls	r1, r1, #2
 8003e2c:	f7fc f97e 	bl	800012c <__udivsi3>
 8003e30:	f7fe f9e2 	bl	80021f8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003e34:	2004      	movs	r0, #4
 8003e36:	f7fe f9f9 	bl	800222c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4240      	negs	r0, r0
 8003e42:	f7fe f99f 	bl	8002184 <HAL_NVIC_SetPriority>
}
 8003e46:	b015      	add	sp, #84	; 0x54
 8003e48:	bd30      	pop	{r4, r5, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)

08003e4c <main>:
{
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8003e50:	f7fd ff26 	bl	8001ca0 <HAL_Init>
  SystemClock_Config();
 8003e54:	f7ff ffba 	bl	8003dcc <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	4c75      	ldr	r4, [pc, #468]	; (8004030 <main+0x1e4>)
 8003e5c:	0289      	lsls	r1, r1, #10
 8003e5e:	6962      	ldr	r2, [r4, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003e60:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e62:	430a      	orrs	r2, r1
 8003e64:	6162      	str	r2, [r4, #20]
 8003e66:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003e68:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6a:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e72:	6962      	ldr	r2, [r4, #20]
 8003e74:	02c9      	lsls	r1, r1, #11
 8003e76:	430a      	orrs	r2, r1
 8003e78:	6162      	str	r2, [r4, #20]
 8003e7a:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003e7c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7e:	400b      	ands	r3, r1
 8003e80:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003e82:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e84:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003e86:	f7fe fb79 	bl	800257c <HAL_GPIO_WritePin>
  /*Configure GPIO pins : DEBUG_LED1_Pin DEBUG_LED2_Pin MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8a:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e8e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 8003e90:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e92:	a905      	add	r1, sp, #20
 8003e94:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 8003e96:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e98:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9e:	f7fe fab7 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin PB6 */
  GPIO_InitStruct.Pin = DIR_Pin|GPIO_PIN_6;
 8003ea2:	2350      	movs	r3, #80	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea4:	a905      	add	r1, sp, #20
 8003ea6:	4863      	ldr	r0, [pc, #396]	; (8004034 <main+0x1e8>)
  GPIO_InitStruct.Pin = DIR_Pin|GPIO_PIN_6;
 8003ea8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eaa:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eae:	f7fe faaf 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Pin */
  GPIO_InitStruct.Pin = ENCODER_Pin;
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003eb6:	4b60      	ldr	r3, [pc, #384]	; (8004038 <main+0x1ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8003eb8:	a905      	add	r1, sp, #20
 8003eba:	485e      	ldr	r0, [pc, #376]	; (8004034 <main+0x1e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003ebc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8003ec0:	f7fe faa6 	bl	8002410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	2007      	movs	r0, #7
 8003eca:	f7fe f95b 	bl	8002184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003ece:	2007      	movs	r0, #7
 8003ed0:	f7fe f988 	bl	80021e4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ed4:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003ed6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ed8:	4333      	orrs	r3, r6
 8003eda:	6163      	str	r3, [r4, #20]
 8003edc:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003ede:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ee0:	4033      	ands	r3, r6
 8003ee2:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003ee4:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ee6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003ee8:	f7fe f94c 	bl	8002184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003eec:	2009      	movs	r0, #9
 8003eee:	f7fe f979 	bl	80021e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	200a      	movs	r0, #10
 8003ef8:	f7fe f944 	bl	8002184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003efc:	200a      	movs	r0, #10
 8003efe:	f7fe f971 	bl	80021e4 <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 8003f02:	4c4e      	ldr	r4, [pc, #312]	; (800403c <main+0x1f0>)
 8003f04:	4b4e      	ldr	r3, [pc, #312]	; (8004040 <main+0x1f4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003f06:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8003f08:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f0e:	23c2      	movs	r3, #194	; 0xc2
 8003f10:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f12:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003f14:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f16:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003f18:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003f1a:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003f1c:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003f1e:	6226      	str	r6, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003f20:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f22:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f24:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003f26:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003f28:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003f2a:	f7fd ff23 	bl	8001d74 <HAL_ADC_Init>
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d000      	beq.n	8003f34 <main+0xe8>
 8003f32:	e7fe      	b.n	8003f32 <main+0xe6>
  sConfig.Channel = ADC_CHANNEL_8;
 8003f34:	2308      	movs	r3, #8
 8003f36:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	015b      	lsls	r3, r3, #5
 8003f3c:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003f3e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f40:	a905      	add	r1, sp, #20
 8003f42:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003f44:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f46:	f7fe f853 	bl	8001ff0 <HAL_ADC_ConfigChannel>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d000      	beq.n	8003f50 <main+0x104>
 8003f4e:	e7fe      	b.n	8003f4e <main+0x102>
  sConfig.Channel = ADC_CHANNEL_9;
 8003f50:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f52:	a905      	add	r1, sp, #20
 8003f54:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8003f56:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f58:	f7fe f84a 	bl	8001ff0 <HAL_ADC_ConfigChannel>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d000      	beq.n	8003f62 <main+0x116>
 8003f60:	e7fe      	b.n	8003f60 <main+0x114>
  huart1.Instance = USART1;
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <main+0x1f8>)
 8003f64:	4a38      	ldr	r2, [pc, #224]	; (8004048 <main+0x1fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f66:	6098      	str	r0, [r3, #8]
  huart1.Instance = USART1;
 8003f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8003f6a:	22e1      	movs	r2, #225	; 0xe1
 8003f6c:	0292      	lsls	r2, r2, #10
 8003f6e:	605a      	str	r2, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f70:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f72:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f74:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f76:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f78:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f7a:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f7c:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f7e:	0018      	movs	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f80:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f82:	f7ff fb4d 	bl	8003620 <HAL_UART_Init>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d000      	beq.n	8003f8c <main+0x140>
 8003f8a:	e7fe      	b.n	8003f8a <main+0x13e>
  htim3.Instance = TIM3;
 8003f8c:	4c2f      	ldr	r4, [pc, #188]	; (800404c <main+0x200>)
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <main+0x204>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f90:	60a0      	str	r0, [r4, #8]
  htim3.Instance = TIM3;
 8003f92:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48;
 8003f94:	2330      	movs	r3, #48	; 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f96:	6120      	str	r0, [r4, #16]
  htim3.Init.Prescaler = 48;
 8003f98:	6063      	str	r3, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f9a:	61a0      	str	r0, [r4, #24]
  htim3.Init.Period = 99;
 8003f9c:	3333      	adds	r3, #51	; 0x33
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f9e:	0020      	movs	r0, r4
  htim3.Init.Period = 99;
 8003fa0:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003fa2:	f7fe fffc 	bl	8002f9e <HAL_TIM_PWM_Init>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d000      	beq.n	8003fac <main+0x160>
 8003faa:	e7fe      	b.n	8003faa <main+0x15e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fac:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fae:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fb0:	a903      	add	r1, sp, #12
 8003fb2:	0020      	movs	r0, r4
 8003fb4:	f7ff f8fe 	bl	80031b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d000      	beq.n	8003fbe <main+0x172>
 8003fbc:	e7fe      	b.n	8003fbc <main+0x170>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fbe:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8003fc0:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fc2:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fc4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	a905      	add	r1, sp, #20
 8003fca:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fcc:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fce:	f7ff f83d 	bl	800304c <HAL_TIM_PWM_ConfigChannel>
 8003fd2:	1e05      	subs	r5, r0, #0
 8003fd4:	d000      	beq.n	8003fd8 <main+0x18c>
 8003fd6:	e7fe      	b.n	8003fd6 <main+0x18a>
  HAL_TIM_MspPostInit(&htim3);
 8003fd8:	0020      	movs	r0, r4
 8003fda:	f000 f8f5 	bl	80041c8 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8003fde:	481d      	ldr	r0, [pc, #116]	; (8004054 <main+0x208>)
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <main+0x20c>)
  htim14.Init.Period = 1000;
 8003fe2:	24fa      	movs	r4, #250	; 0xfa
  htim14.Instance = TIM14;
 8003fe4:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 192;
 8003fe6:	23c0      	movs	r3, #192	; 0xc0
  htim14.Init.Period = 1000;
 8003fe8:	00a4      	lsls	r4, r4, #2
  htim14.Init.Prescaler = 192;
 8003fea:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fec:	6085      	str	r5, [r0, #8]
  htim14.Init.Period = 1000;
 8003fee:	60c4      	str	r4, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff0:	6105      	str	r5, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff2:	6185      	str	r5, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003ff4:	f7fe ffb8 	bl	8002f68 <HAL_TIM_Base_Init>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d000      	beq.n	8003ffe <main+0x1b2>
 8003ffc:	e7fe      	b.n	8003ffc <main+0x1b0>
  htim16.Instance = TIM16;
 8003ffe:	4b17      	ldr	r3, [pc, #92]	; (800405c <main+0x210>)
 8004000:	4a17      	ldr	r2, [pc, #92]	; (8004060 <main+0x214>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004002:	6098      	str	r0, [r3, #8]
  htim16.Instance = TIM16;
 8004004:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 384;
 8004006:	22c0      	movs	r2, #192	; 0xc0
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004008:	6118      	str	r0, [r3, #16]
  htim16.Init.Prescaler = 384;
 800400a:	0052      	lsls	r2, r2, #1
  htim16.Init.RepetitionCounter = 0;
 800400c:	6158      	str	r0, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400e:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004010:	0018      	movs	r0, r3
  htim16.Init.Prescaler = 384;
 8004012:	605a      	str	r2, [r3, #4]
  htim16.Init.Period = 1000;
 8004014:	60dc      	str	r4, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004016:	f7fe ffa7 	bl	8002f68 <HAL_TIM_Base_Init>
 800401a:	2800      	cmp	r0, #0
 800401c:	d000      	beq.n	8004020 <main+0x1d4>
 800401e:	e7fe      	b.n	800401e <main+0x1d2>
  init_variables();
 8004020:	f7ff fe5c 	bl	8003cdc <init_variables>
  startPeripherals();
 8004024:	f7ff fe26 	bl	8003c74 <startPeripherals>
	  user_main();
 8004028:	f000 fb5e 	bl	80046e8 <user_main>
 800402c:	e7fc      	b.n	8004028 <main+0x1dc>
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	40021000 	.word	0x40021000
 8004034:	48000400 	.word	0x48000400
 8004038:	10310000 	.word	0x10310000
 800403c:	20000448 	.word	0x20000448
 8004040:	40012400 	.word	0x40012400
 8004044:	20000354 	.word	0x20000354
 8004048:	40013800 	.word	0x40013800
 800404c:	200002d0 	.word	0x200002d0
 8004050:	40000400 	.word	0x40000400
 8004054:	200003c4 	.word	0x200003c4
 8004058:	40002000 	.word	0x40002000
 800405c:	20000494 	.word	0x20000494
 8004060:	40014400 	.word	0x40014400

08004064 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004064:	e7fe      	b.n	8004064 <_Error_Handler>
 8004066:	46c0      	nop			; (mov r8, r8)

08004068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004068:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406a:	2001      	movs	r0, #1
 800406c:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <HAL_MspInit+0x38>)
 800406e:	6991      	ldr	r1, [r2, #24]
 8004070:	4301      	orrs	r1, r0
 8004072:	6191      	str	r1, [r2, #24]
 8004074:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8004076:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004078:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800407a:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800407e:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004080:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8004082:	f7fe f87f 	bl	8002184 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004086:	2200      	movs	r2, #0
 8004088:	2002      	movs	r0, #2
 800408a:	0011      	movs	r1, r2
 800408c:	4240      	negs	r0, r0
 800408e:	f7fe f879 	bl	8002184 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004092:	2200      	movs	r2, #0
 8004094:	2001      	movs	r0, #1
 8004096:	0011      	movs	r1, r2
 8004098:	4240      	negs	r0, r0
 800409a:	f7fe f873 	bl	8002184 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800409e:	bd07      	pop	{r0, r1, r2, pc}
 80040a0:	40021000 	.word	0x40021000

080040a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_ADC_MspInit+0x70>)
 80040a8:	6802      	ldr	r2, [r0, #0]
{
 80040aa:	b087      	sub	sp, #28
 80040ac:	0005      	movs	r5, r0
  if(hadc->Instance==ADC1)
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d12d      	bne.n	800410e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040b2:	2680      	movs	r6, #128	; 0x80
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <HAL_ADC_MspInit+0x74>)
 80040b6:	00b6      	lsls	r6, r6, #2
 80040b8:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2700      	movs	r7, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040bc:	4332      	orrs	r2, r6
 80040be:	619a      	str	r2, [r3, #24]
 80040c0:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c2:	4816      	ldr	r0, [pc, #88]	; (800411c <HAL_ADC_MspInit+0x78>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040c4:	4033      	ands	r3, r6
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 80040ca:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040cc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 80040ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d4:	f7fe f99c 	bl	8002410 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80040d8:	4c11      	ldr	r4, [pc, #68]	; (8004120 <HAL_ADC_MspInit+0x7c>)
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_ADC_MspInit+0x80>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80040dc:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 80040de:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80040ea:	2320      	movs	r3, #32
 80040ec:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040f2:	6067      	str	r7, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80040f4:	60a7      	str	r7, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040f6:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80040f8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80040fa:	f7fe f8ab 	bl	8002254 <HAL_DMA_Init>
 80040fe:	42b8      	cmp	r0, r7
 8004100:	d003      	beq.n	800410a <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 8004102:	216b      	movs	r1, #107	; 0x6b
 8004104:	4808      	ldr	r0, [pc, #32]	; (8004128 <HAL_ADC_MspInit+0x84>)
 8004106:	f7ff ffad 	bl	8004064 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800410a:	63ec      	str	r4, [r5, #60]	; 0x3c
 800410c:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800410e:	b007      	add	sp, #28
 8004110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	40012400 	.word	0x40012400
 8004118:	40021000 	.word	0x40021000
 800411c:	48000400 	.word	0x48000400
 8004120:	20000404 	.word	0x20000404
 8004124:	40020008 	.word	0x40020008
 8004128:	08005324 	.word	0x08005324

0800412c <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800412c:	b507      	push	{r0, r1, r2, lr}

  if(htim_pwm->Instance==TIM3)
 800412e:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_TIM_PWM_MspInit+0x30>)
 8004130:	6802      	ldr	r2, [r0, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d110      	bne.n	8004158 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004136:	2002      	movs	r0, #2
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <HAL_TIM_PWM_MspInit+0x34>)
 800413a:	69d1      	ldr	r1, [r2, #28]
 800413c:	4301      	orrs	r1, r0
 800413e:	61d1      	str	r1, [r2, #28]
 8004140:	69d3      	ldr	r3, [r2, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004142:	2101      	movs	r1, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004144:	4003      	ands	r3, r0
 8004146:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004148:	300e      	adds	r0, #14
 800414a:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800414c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800414e:	f7fe f819 	bl	8002184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004152:	2010      	movs	r0, #16
 8004154:	f7fe f846 	bl	80021e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004158:	bd07      	pop	{r0, r1, r2, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	40000400 	.word	0x40000400
 8004160:	40021000 	.word	0x40021000

08004164 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004164:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM14)
 8004166:	6803      	ldr	r3, [r0, #0]
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <HAL_TIM_Base_MspInit+0x58>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d112      	bne.n	8004194 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800416e:	2080      	movs	r0, #128	; 0x80
 8004170:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <HAL_TIM_Base_MspInit+0x5c>)
 8004172:	0040      	lsls	r0, r0, #1
 8004174:	69d1      	ldr	r1, [r2, #28]
 8004176:	4301      	orrs	r1, r0
 8004178:	61d1      	str	r1, [r2, #28]
 800417a:	69d3      	ldr	r3, [r2, #28]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 800417c:	2101      	movs	r1, #1
    __HAL_RCC_TIM14_CLK_ENABLE();
 800417e:	4003      	ands	r3, r0
 8004180:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8004182:	38ed      	subs	r0, #237	; 0xed
 8004184:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004186:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8004188:	f7fd fffc 	bl	8002184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800418c:	2013      	movs	r0, #19
  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800418e:	f7fe f829 	bl	80021e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004192:	bd07      	pop	{r0, r1, r2, pc}
  else if(htim_base->Instance==TIM16)
 8004194:	4a0b      	ldr	r2, [pc, #44]	; (80041c4 <HAL_TIM_Base_MspInit+0x60>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d1fb      	bne.n	8004192 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800419a:	2080      	movs	r0, #128	; 0x80
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <HAL_TIM_Base_MspInit+0x5c>)
 800419e:	0280      	lsls	r0, r0, #10
 80041a0:	6991      	ldr	r1, [r2, #24]
 80041a2:	4301      	orrs	r1, r0
 80041a4:	6191      	str	r1, [r2, #24]
 80041a6:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80041a8:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 80041aa:	4003      	ands	r3, r0
 80041ac:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80041ae:	2015      	movs	r0, #21
 80041b0:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 80041b2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80041b4:	f7fd ffe6 	bl	8002184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80041b8:	2015      	movs	r0, #21
 80041ba:	e7e8      	b.n	800418e <HAL_TIM_Base_MspInit+0x2a>
 80041bc:	40002000 	.word	0x40002000
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40014400 	.word	0x40014400

080041c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_TIM_MspPostInit+0x2c>)
 80041cc:	6802      	ldr	r2, [r0, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d10d      	bne.n	80041ee <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM3_MspPostInit 0 */
  
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = PWM_SIGNAL_Pin;
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d6:	3b7e      	subs	r3, #126	; 0x7e
 80041d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80041da:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80041de:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80041e4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80041e6:	3301      	adds	r3, #1
 80041e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80041ea:	f7fe f911 	bl	8002410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80041ee:	b007      	add	sp, #28
 80041f0:	bd00      	pop	{pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	40000400 	.word	0x40000400

080041f8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041f8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_UART_MspInit+0x8c>)
 80041fc:	6802      	ldr	r2, [r0, #0]
{
 80041fe:	b086      	sub	sp, #24
 8004200:	0006      	movs	r6, r0
  if(huart->Instance==USART1)
 8004202:	429a      	cmp	r2, r3
 8004204:	d13b      	bne.n	800427e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004206:	2080      	movs	r0, #128	; 0x80
 8004208:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <HAL_UART_MspInit+0x90>)
 800420a:	01c0      	lsls	r0, r0, #7
 800420c:	6991      	ldr	r1, [r2, #24]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8004210:	4301      	orrs	r1, r0
 8004212:	6191      	str	r1, [r2, #24]
 8004214:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004216:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8004218:	4003      	ands	r3, r0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800421e:	23c0      	movs	r3, #192	; 0xc0
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004224:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004226:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800422a:	3301      	adds	r3, #1
 800422c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004230:	3b02      	subs	r3, #2
 8004232:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	f7fe f8eb 	bl	8002410 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800423a:	4c14      	ldr	r4, [pc, #80]	; (800428c <HAL_UART_MspInit+0x94>)
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <HAL_UART_MspInit+0x98>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800423e:	0020      	movs	r0, r4
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004240:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004242:	2310      	movs	r3, #16
 8004244:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004246:	3370      	adds	r3, #112	; 0x70
 8004248:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800424e:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004250:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004252:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004254:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004256:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004258:	f7fd fffc 	bl	8002254 <HAL_DMA_Init>
 800425c:	42a8      	cmp	r0, r5
 800425e:	d004      	beq.n	800426a <HAL_UART_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 8004260:	213c      	movs	r1, #60	; 0x3c
 8004262:	480c      	ldr	r0, [pc, #48]	; (8004294 <HAL_UART_MspInit+0x9c>)
 8004264:	31ff      	adds	r1, #255	; 0xff
 8004266:	f7ff fefd 	bl	8004064 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800426e:	6634      	str	r4, [r6, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004270:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004272:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004274:	f7fd ff86 	bl	8002184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004278:	201b      	movs	r0, #27
 800427a:	f7fd ffb3 	bl	80021e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800427e:	b006      	add	sp, #24
 8004280:	bd70      	pop	{r4, r5, r6, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	40013800 	.word	0x40013800
 8004288:	40021000 	.word	0x40021000
 800428c:	20000310 	.word	0x20000310
 8004290:	4002001c 	.word	0x4002001c
 8004294:	08005324 	.word	0x08005324

08004298 <NMI_Handler>:
 8004298:	4770      	bx	lr

0800429a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800429a:	e7fe      	b.n	800429a <HardFault_Handler>

0800429c <SVC_Handler>:
 800429c:	4770      	bx	lr

0800429e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800429e:	4770      	bx	lr

080042a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80042a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042a2:	f7fd fd0d 	bl	8001cc0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80042a6:	f7fd ffd0 	bl	800224a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042aa:	bd10      	pop	{r4, pc}

080042ac <EXTI4_15_IRQHandler>:

/**
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
 80042ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80042ae:	2020      	movs	r0, #32
 80042b0:	f7fe f96a 	bl	8002588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80042b4:	bd10      	pop	{r4, pc}
	...

080042b8 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80042b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80042ba:	4802      	ldr	r0, [pc, #8]	; (80042c4 <DMA1_Channel1_IRQHandler+0xc>)
 80042bc:	f7fe f85e 	bl	800237c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042c0:	bd10      	pop	{r4, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	20000404 	.word	0x20000404

080042c8 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 80042c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80042ca:	4802      	ldr	r0, [pc, #8]	; (80042d4 <DMA1_Channel2_3_IRQHandler+0xc>)
 80042cc:	f7fe f856 	bl	800237c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80042d0:	bd10      	pop	{r4, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	20000310 	.word	0x20000310

080042d8 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 80042d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042da:	4802      	ldr	r0, [pc, #8]	; (80042e4 <TIM3_IRQHandler+0xc>)
 80042dc:	f7fe fd5f 	bl	8002d9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042e0:	bd10      	pop	{r4, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	200002d0 	.word	0x200002d0

080042e8 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 80042e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80042ea:	4802      	ldr	r0, [pc, #8]	; (80042f4 <TIM14_IRQHandler+0xc>)
 80042ec:	f7fe fd57 	bl	8002d9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	200003c4 	.word	0x200003c4

080042f8 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 80042f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80042fa:	4802      	ldr	r0, [pc, #8]	; (8004304 <TIM16_IRQHandler+0xc>)
 80042fc:	f7fe fd4f 	bl	8002d9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004300:	bd10      	pop	{r4, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	20000494 	.word	0x20000494

08004308 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8004308:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800430a:	4802      	ldr	r0, [pc, #8]	; (8004314 <USART1_IRQHandler+0xc>)
 800430c:	f7ff fa42 	bl	8003794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004310:	bd10      	pop	{r4, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	20000354 	.word	0x20000354

08004318 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004318:	2101      	movs	r1, #1
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800431c:	4811      	ldr	r0, [pc, #68]	; (8004364 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	4002      	ands	r2, r0
 8004328:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	480e      	ldr	r0, [pc, #56]	; (8004368 <SystemInit+0x50>)
 800432e:	4002      	ands	r2, r0
 8004330:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	480d      	ldr	r0, [pc, #52]	; (800436c <SystemInit+0x54>)
 8004336:	4002      	ands	r2, r0
 8004338:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	480c      	ldr	r0, [pc, #48]	; (8004370 <SystemInit+0x58>)
 800433e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004340:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004342:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	4382      	bics	r2, r0
 8004348:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800434a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434c:	4809      	ldr	r0, [pc, #36]	; (8004374 <SystemInit+0x5c>)
 800434e:	4002      	ands	r2, r0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004354:	438a      	bics	r2, r1
 8004356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]

}
 800435c:	4770      	bx	lr
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	40021000 	.word	0x40021000
 8004364:	08ffb80c 	.word	0x08ffb80c
 8004368:	fef6ffff 	.word	0xfef6ffff
 800436c:	fffbffff 	.word	0xfffbffff
 8004370:	ffc0ffff 	.word	0xffc0ffff
 8004374:	fffffeec 	.word	0xfffffeec

08004378 <data_aquisition>:
#include "function.h"
#include "variables.h"
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim3;

void data_aquisition(){
 8004378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437a:	46de      	mov	lr, fp
 800437c:	4657      	mov	r7, sl
 800437e:	464e      	mov	r6, r9
 8004380:	4645      	mov	r5, r8
 8004382:	b5e0      	push	{r5, r6, r7, lr}
 8004384:	b085      	sub	sp, #20
	size_data_buffer = strlen((char*)data_buffer);
 8004386:	4e54      	ldr	r6, [pc, #336]	; (80044d8 <data_aquisition+0x160>)
 8004388:	6833      	ldr	r3, [r6, #0]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	0018      	movs	r0, r3
 800438e:	f7fb febb 	bl	8000108 <strlen>
 8004392:	4682      	mov	sl, r0
 8004394:	4c51      	ldr	r4, [pc, #324]	; (80044dc <data_aquisition+0x164>)
 8004396:	6020      	str	r0, [r4, #0]
	size_time = strlen((char*)send_time);
 8004398:	4b51      	ldr	r3, [pc, #324]	; (80044e0 <data_aquisition+0x168>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	0018      	movs	r0, r3
 80043a0:	f7fb feb2 	bl	8000108 <strlen>
 80043a4:	4d4f      	ldr	r5, [pc, #316]	; (80044e4 <data_aquisition+0x16c>)
 80043a6:	9002      	str	r0, [sp, #8]
 80043a8:	6028      	str	r0, [r5, #0]
	size_q1 = strlen((char*)send_q1);
 80043aa:	4f4f      	ldr	r7, [pc, #316]	; (80044e8 <data_aquisition+0x170>)
 80043ac:	46bb      	mov	fp, r7
 80043ae:	6838      	ldr	r0, [r7, #0]
 80043b0:	f7fb feaa 	bl	8000108 <strlen>
 80043b4:	4f4d      	ldr	r7, [pc, #308]	; (80044ec <data_aquisition+0x174>)
 80043b6:	6038      	str	r0, [r7, #0]
	size_q2 = strlen((char*)send_q2);
 80043b8:	494d      	ldr	r1, [pc, #308]	; (80044f0 <data_aquisition+0x178>)
 80043ba:	6809      	ldr	r1, [r1, #0]
 80043bc:	9103      	str	r1, [sp, #12]
 80043be:	0008      	movs	r0, r1
 80043c0:	f7fb fea2 	bl	8000108 <strlen>
 80043c4:	494b      	ldr	r1, [pc, #300]	; (80044f4 <data_aquisition+0x17c>)
 80043c6:	4688      	mov	r8, r1
 80043c8:	6008      	str	r0, [r1, #0]
	size_torque = strlen((char*)send_torque);
 80043ca:	494b      	ldr	r1, [pc, #300]	; (80044f8 <data_aquisition+0x180>)
 80043cc:	6809      	ldr	r1, [r1, #0]
 80043ce:	9103      	str	r1, [sp, #12]
 80043d0:	0008      	movs	r0, r1
 80043d2:	f7fb fe99 	bl	8000108 <strlen>
 80043d6:	4949      	ldr	r1, [pc, #292]	; (80044fc <data_aquisition+0x184>)
 80043d8:	4689      	mov	r9, r1
 80043da:	6008      	str	r0, [r1, #0]

	//memset(data_buffer,0x00,40);
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 80043dc:	9b00      	ldr	r3, [sp, #0]
 80043de:	0018      	movs	r0, r3
 80043e0:	4450      	add	r0, sl
 80043e2:	9a02      	ldr	r2, [sp, #8]
 80043e4:	9901      	ldr	r1, [sp, #4]
 80043e6:	f000 fa45 	bl	8004874 <memcpy>
	memcpy(data_buffer+size_time+size_data_buffer, comma, 1);
 80043ea:	682b      	ldr	r3, [r5, #0]
 80043ec:	6822      	ldr	r2, [r4, #0]
 80043ee:	4694      	mov	ip, r2
 80043f0:	4463      	add	r3, ip
 80043f2:	4a43      	ldr	r2, [pc, #268]	; (8004500 <data_aquisition+0x188>)
 80043f4:	4692      	mov	sl, r2
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	7812      	ldrb	r2, [r2, #0]
 80043fa:	6831      	ldr	r1, [r6, #0]
 80043fc:	54ca      	strb	r2, [r1, r3]
	memcpy(data_buffer+1+size_time+size_data_buffer, send_q1, size_q1);
 80043fe:	682b      	ldr	r3, [r5, #0]
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	4694      	mov	ip, r2
 8004404:	4463      	add	r3, ip
 8004406:	0018      	movs	r0, r3
 8004408:	3001      	adds	r0, #1
 800440a:	6833      	ldr	r3, [r6, #0]
 800440c:	469c      	mov	ip, r3
 800440e:	4460      	add	r0, ip
 8004410:	465b      	mov	r3, fp
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	f000 fa2d 	bl	8004874 <memcpy>
	memcpy(data_buffer+1+size_q1+size_time+size_data_buffer, comma, 1);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	682a      	ldr	r2, [r5, #0]
 800441e:	4694      	mov	ip, r2
 8004420:	4463      	add	r3, ip
 8004422:	6822      	ldr	r2, [r4, #0]
 8004424:	4694      	mov	ip, r2
 8004426:	4463      	add	r3, ip
 8004428:	3301      	adds	r3, #1
 800442a:	4652      	mov	r2, sl
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	6831      	ldr	r1, [r6, #0]
 8004432:	54ca      	strb	r2, [r1, r3]
	memcpy(data_buffer+2+size_q1+size_time+size_data_buffer, send_q2, size_q2);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	682a      	ldr	r2, [r5, #0]
 8004438:	4694      	mov	ip, r2
 800443a:	4463      	add	r3, ip
 800443c:	0018      	movs	r0, r3
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	469c      	mov	ip, r3
 8004442:	4460      	add	r0, ip
 8004444:	3002      	adds	r0, #2
 8004446:	6833      	ldr	r3, [r6, #0]
 8004448:	469c      	mov	ip, r3
 800444a:	4460      	add	r0, ip
 800444c:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <data_aquisition+0x178>)
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	4643      	mov	r3, r8
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	f000 fa0e 	bl	8004874 <memcpy>
	memcpy(data_buffer+2+size_q1+size_time+size_q2+size_data_buffer, comma, 1);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	682a      	ldr	r2, [r5, #0]
 800445c:	4694      	mov	ip, r2
 800445e:	4463      	add	r3, ip
 8004460:	4642      	mov	r2, r8
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	4694      	mov	ip, r2
 8004466:	4463      	add	r3, ip
 8004468:	6822      	ldr	r2, [r4, #0]
 800446a:	4694      	mov	ip, r2
 800446c:	4463      	add	r3, ip
 800446e:	3302      	adds	r3, #2
 8004470:	4652      	mov	r2, sl
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	7812      	ldrb	r2, [r2, #0]
 8004476:	6831      	ldr	r1, [r6, #0]
 8004478:	54ca      	strb	r2, [r1, r3]
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_data_buffer, send_torque, size_torque);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	682a      	ldr	r2, [r5, #0]
 800447e:	4694      	mov	ip, r2
 8004480:	4463      	add	r3, ip
 8004482:	0018      	movs	r0, r3
 8004484:	4643      	mov	r3, r8
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	469c      	mov	ip, r3
 800448a:	4460      	add	r0, ip
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	469c      	mov	ip, r3
 8004490:	4460      	add	r0, ip
 8004492:	3003      	adds	r0, #3
 8004494:	6833      	ldr	r3, [r6, #0]
 8004496:	469c      	mov	ip, r3
 8004498:	4460      	add	r0, ip
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <data_aquisition+0x180>)
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	464b      	mov	r3, r9
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	f000 f9e7 	bl	8004874 <memcpy>
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_torque+size_data_buffer, endSymbol, 1);
 80044a6:	6832      	ldr	r2, [r6, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	6829      	ldr	r1, [r5, #0]
 80044ac:	185b      	adds	r3, r3, r1
 80044ae:	4641      	mov	r1, r8
 80044b0:	6809      	ldr	r1, [r1, #0]
 80044b2:	185b      	adds	r3, r3, r1
 80044b4:	4649      	mov	r1, r9
 80044b6:	6809      	ldr	r1, [r1, #0]
 80044b8:	185b      	adds	r3, r3, r1
 80044ba:	6821      	ldr	r1, [r4, #0]
 80044bc:	185b      	adds	r3, r3, r1
 80044be:	3303      	adds	r3, #3
 80044c0:	4910      	ldr	r1, [pc, #64]	; (8004504 <data_aquisition+0x18c>)
 80044c2:	6809      	ldr	r1, [r1, #0]
 80044c4:	7809      	ldrb	r1, [r1, #0]
 80044c6:	54d1      	strb	r1, [r2, r3]

//	HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
}
 80044c8:	b005      	add	sp, #20
 80044ca:	bc3c      	pop	{r2, r3, r4, r5}
 80044cc:	4690      	mov	r8, r2
 80044ce:	4699      	mov	r9, r3
 80044d0:	46a2      	mov	sl, r4
 80044d2:	46ab      	mov	fp, r5
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	2000022c 	.word	0x2000022c
 80044dc:	20000298 	.word	0x20000298
 80044e0:	20000290 	.word	0x20000290
 80044e4:	200002a4 	.word	0x200002a4
 80044e8:	20000288 	.word	0x20000288
 80044ec:	2000029c 	.word	0x2000029c
 80044f0:	2000028c 	.word	0x2000028c
 80044f4:	200002a0 	.word	0x200002a0
 80044f8:	20000294 	.word	0x20000294
 80044fc:	200002a8 	.word	0x200002a8
 8004500:	20000008 	.word	0x20000008
 8004504:	20000020 	.word	0x20000020

08004508 <uart_request>:


void uart_request(){
 8004508:	b570      	push	{r4, r5, r6, lr}

	rx_buffer[rx_buffer_cntr] = rx_byte;
 800450a:	4b69      	ldr	r3, [pc, #420]	; (80046b0 <uart_request+0x1a8>)
 800450c:	4a69      	ldr	r2, [pc, #420]	; (80046b4 <uart_request+0x1ac>)
 800450e:	7812      	ldrb	r2, [r2, #0]
 8004510:	4969      	ldr	r1, [pc, #420]	; (80046b8 <uart_request+0x1b0>)
 8004512:	7809      	ldrb	r1, [r1, #0]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	5481      	strb	r1, [r0, r2]
	if(*rx_buffer == '$'){
 8004518:	681c      	ldr	r4, [r3, #0]
 800451a:	7823      	ldrb	r3, [r4, #0]
 800451c:	2b24      	cmp	r3, #36	; 0x24
 800451e:	d00f      	beq.n	8004540 <uart_request+0x38>
		rx_buffer_cntr += 1;
	}
	if(rx_buffer_cntr > 10){
 8004520:	4b64      	ldr	r3, [pc, #400]	; (80046b4 <uart_request+0x1ac>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b0a      	cmp	r3, #10
 8004526:	d902      	bls.n	800452e <uart_request+0x26>
		rx_buffer_cntr = 0;
 8004528:	2200      	movs	r2, #0
 800452a:	4b62      	ldr	r3, [pc, #392]	; (80046b4 <uart_request+0x1ac>)
 800452c:	701a      	strb	r2, [r3, #0]
	}
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 800452e:	7823      	ldrb	r3, [r4, #0]
 8004530:	2b24      	cmp	r3, #36	; 0x24
 8004532:	d00a      	beq.n	800454a <uart_request+0x42>

		}

	}

	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8004534:	2201      	movs	r2, #1
 8004536:	4960      	ldr	r1, [pc, #384]	; (80046b8 <uart_request+0x1b0>)
 8004538:	4860      	ldr	r0, [pc, #384]	; (80046bc <uart_request+0x1b4>)
 800453a:	f7fe fe9d 	bl	8003278 <HAL_UART_Receive_IT>


}
 800453e:	bd70      	pop	{r4, r5, r6, pc}
		rx_buffer_cntr += 1;
 8004540:	4a5c      	ldr	r2, [pc, #368]	; (80046b4 <uart_request+0x1ac>)
 8004542:	7813      	ldrb	r3, [r2, #0]
 8004544:	3301      	adds	r3, #1
 8004546:	7013      	strb	r3, [r2, #0]
 8004548:	e7ea      	b.n	8004520 <uart_request+0x18>
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 800454a:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <uart_request+0x1ac>)
 800454c:	781a      	ldrb	r2, [r3, #0]
 800454e:	18a3      	adds	r3, r4, r2
 8004550:	3b01      	subs	r3, #1
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b0a      	cmp	r3, #10
 8004556:	d1ed      	bne.n	8004534 <uart_request+0x2c>
 8004558:	2a02      	cmp	r2, #2
 800455a:	d9eb      	bls.n	8004534 <uart_request+0x2c>
		switch(rx_buffer[1]){
 800455c:	7863      	ldrb	r3, [r4, #1]
 800455e:	3b41      	subs	r3, #65	; 0x41
 8004560:	b2da      	uxtb	r2, r3
 8004562:	2a17      	cmp	r2, #23
 8004564:	d8e6      	bhi.n	8004534 <uart_request+0x2c>
 8004566:	0093      	lsls	r3, r2, #2
 8004568:	4a55      	ldr	r2, [pc, #340]	; (80046c0 <uart_request+0x1b8>)
 800456a:	58d3      	ldr	r3, [r2, r3]
 800456c:	469f      	mov	pc, r3
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800456e:	4b55      	ldr	r3, [pc, #340]	; (80046c4 <uart_request+0x1bc>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	6353      	str	r3, [r2, #52]	; 0x34
			enable_data_aquisition = 0;
 8004576:	4a54      	ldr	r2, [pc, #336]	; (80046c8 <uart_request+0x1c0>)
 8004578:	7013      	strb	r3, [r2, #0]
			enable_encoder_reading = 0;
 800457a:	4a54      	ldr	r2, [pc, #336]	; (80046cc <uart_request+0x1c4>)
 800457c:	7013      	strb	r3, [r2, #0]
			enable_ADC_interrupt = 0;
 800457e:	4a54      	ldr	r2, [pc, #336]	; (80046d0 <uart_request+0x1c8>)
 8004580:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8004582:	0020      	movs	r0, r4
 8004584:	f7fb fdc0 	bl	8000108 <strlen>
 8004588:	b282      	uxth	r2, r0
 800458a:	0021      	movs	r1, r4
 800458c:	484b      	ldr	r0, [pc, #300]	; (80046bc <uart_request+0x1b4>)
 800458e:	f7fe fe45 	bl	800321c <HAL_UART_Transmit_IT>
			break;
 8004592:	e7cf      	b.n	8004534 <uart_request+0x2c>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)acrobat),strlen((char*)acrobat));
 8004594:	4b4f      	ldr	r3, [pc, #316]	; (80046d4 <uart_request+0x1cc>)
 8004596:	681c      	ldr	r4, [r3, #0]
 8004598:	0020      	movs	r0, r4
 800459a:	f7fb fdb5 	bl	8000108 <strlen>
 800459e:	b282      	uxth	r2, r0
 80045a0:	0021      	movs	r1, r4
 80045a2:	4846      	ldr	r0, [pc, #280]	; (80046bc <uart_request+0x1b4>)
 80045a4:	f7fe fe3a 	bl	800321c <HAL_UART_Transmit_IT>
			break;
 80045a8:	e7c4      	b.n	8004534 <uart_request+0x2c>
			if(*(rx_buffer+3) == '1'){
 80045aa:	78e3      	ldrb	r3, [r4, #3]
 80045ac:	2b31      	cmp	r3, #49	; 0x31
 80045ae:	d005      	beq.n	80045bc <uart_request+0xb4>
			else if(rx_buffer[3] == '0'){
 80045b0:	2b30      	cmp	r3, #48	; 0x30
 80045b2:	d1bf      	bne.n	8004534 <uart_request+0x2c>
				enable_data_aquisition = 0;
 80045b4:	2200      	movs	r2, #0
 80045b6:	4b44      	ldr	r3, [pc, #272]	; (80046c8 <uart_request+0x1c0>)
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e7bb      	b.n	8004534 <uart_request+0x2c>
				HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 80045bc:	0020      	movs	r0, r4
 80045be:	f7fb fda3 	bl	8000108 <strlen>
 80045c2:	b282      	uxth	r2, r0
 80045c4:	0021      	movs	r1, r4
 80045c6:	483d      	ldr	r0, [pc, #244]	; (80046bc <uart_request+0x1b4>)
 80045c8:	f7fe fe28 	bl	800321c <HAL_UART_Transmit_IT>
				enable_data_aquisition = 1;
 80045cc:	2201      	movs	r2, #1
 80045ce:	4b3e      	ldr	r3, [pc, #248]	; (80046c8 <uart_request+0x1c0>)
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	e7af      	b.n	8004534 <uart_request+0x2c>
			if(rx_buffer[2] == 1){
 80045d4:	78a3      	ldrb	r3, [r4, #2]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d005      	beq.n	80045e6 <uart_request+0xde>
			else if(rx_buffer[2] == 0){
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1aa      	bne.n	8004534 <uart_request+0x2c>
				start = 0;
 80045de:	2200      	movs	r2, #0
 80045e0:	4b3d      	ldr	r3, [pc, #244]	; (80046d8 <uart_request+0x1d0>)
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e7a6      	b.n	8004534 <uart_request+0x2c>
				start = 1;
 80045e6:	2201      	movs	r2, #1
 80045e8:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <uart_request+0x1d0>)
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e7a2      	b.n	8004534 <uart_request+0x2c>
			memcpy(scratchpad, rx_buffer+3, strlen((char*)rx_buffer)-4);
 80045ee:	1ce5      	adds	r5, r4, #3
 80045f0:	0020      	movs	r0, r4
 80045f2:	f7fb fd89 	bl	8000108 <strlen>
 80045f6:	4c39      	ldr	r4, [pc, #228]	; (80046dc <uart_request+0x1d4>)
 80045f8:	1f02      	subs	r2, r0, #4
 80045fa:	0029      	movs	r1, r5
 80045fc:	6820      	ldr	r0, [r4, #0]
 80045fe:	f000 f939 	bl	8004874 <memcpy>
			duty_cycle = (uint8_t)strtol(scratchpad, (char**)NULL,10);
 8004602:	6820      	ldr	r0, [r4, #0]
 8004604:	220a      	movs	r2, #10
 8004606:	2100      	movs	r1, #0
 8004608:	f000 faa8 	bl	8004b5c <strtol>
 800460c:	b2c0      	uxtb	r0, r0
 800460e:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <uart_request+0x1d8>)
 8004610:	7018      	strb	r0, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 8004612:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <uart_request+0x1bc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6398      	str	r0, [r3, #56]	; 0x38
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <uart_request+0x1a8>)
 800461a:	681c      	ldr	r4, [r3, #0]
 800461c:	0020      	movs	r0, r4
 800461e:	f7fb fd73 	bl	8000108 <strlen>
 8004622:	b282      	uxth	r2, r0
 8004624:	0021      	movs	r1, r4
 8004626:	4825      	ldr	r0, [pc, #148]	; (80046bc <uart_request+0x1b4>)
 8004628:	f7fe fdf8 	bl	800321c <HAL_UART_Transmit_IT>
			break;
 800462c:	e782      	b.n	8004534 <uart_request+0x2c>
			if(rx_buffer[3] == 1){
 800462e:	78e3      	ldrb	r3, [r4, #3]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d006      	beq.n	8004642 <uart_request+0x13a>
			else if(rx_buffer[3] == 0){
 8004634:	2b00      	cmp	r3, #0
 8004636:	d000      	beq.n	800463a <uart_request+0x132>
 8004638:	e77c      	b.n	8004534 <uart_request+0x2c>
				enable_encoder_reading = 0;
 800463a:	2200      	movs	r2, #0
 800463c:	4b23      	ldr	r3, [pc, #140]	; (80046cc <uart_request+0x1c4>)
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e778      	b.n	8004534 <uart_request+0x2c>
				enable_encoder_reading = 1;
 8004642:	2201      	movs	r2, #1
 8004644:	4b21      	ldr	r3, [pc, #132]	; (80046cc <uart_request+0x1c4>)
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e774      	b.n	8004534 <uart_request+0x2c>
			if(rx_buffer[3] == '1'){
 800464a:	78e3      	ldrb	r3, [r4, #3]
 800464c:	2b31      	cmp	r3, #49	; 0x31
 800464e:	d006      	beq.n	800465e <uart_request+0x156>
			else if(rx_buffer[3] == '0'){
 8004650:	2b30      	cmp	r3, #48	; 0x30
 8004652:	d000      	beq.n	8004656 <uart_request+0x14e>
 8004654:	e76e      	b.n	8004534 <uart_request+0x2c>
				enable_ADC_interrupt = 0;
 8004656:	2200      	movs	r2, #0
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <uart_request+0x1c8>)
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e76a      	b.n	8004534 <uart_request+0x2c>
				enable_ADC_interrupt = 1;
 800465e:	2201      	movs	r2, #1
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <uart_request+0x1c8>)
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e766      	b.n	8004534 <uart_request+0x2c>
			if(rx_buffer[3] == '1'){
 8004666:	78e3      	ldrb	r3, [r4, #3]
 8004668:	2b31      	cmp	r3, #49	; 0x31
 800466a:	d00c      	beq.n	8004686 <uart_request+0x17e>
			else if(rx_buffer[3] == '0'){
 800466c:	2b30      	cmp	r3, #48	; 0x30
 800466e:	d014      	beq.n	800469a <uart_request+0x192>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <uart_request+0x1a8>)
 8004672:	681c      	ldr	r4, [r3, #0]
 8004674:	0020      	movs	r0, r4
 8004676:	f7fb fd47 	bl	8000108 <strlen>
 800467a:	b282      	uxth	r2, r0
 800467c:	0021      	movs	r1, r4
 800467e:	480f      	ldr	r0, [pc, #60]	; (80046bc <uart_request+0x1b4>)
 8004680:	f7fe fdcc 	bl	800321c <HAL_UART_Transmit_IT>
			break;
 8004684:	e756      	b.n	8004534 <uart_request+0x2c>
				HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,1);
 8004686:	2201      	movs	r2, #1
 8004688:	2120      	movs	r1, #32
 800468a:	2090      	movs	r0, #144	; 0x90
 800468c:	05c0      	lsls	r0, r0, #23
 800468e:	f7fd ff75 	bl	800257c <HAL_GPIO_WritePin>
				motor_dir = 1;
 8004692:	2201      	movs	r2, #1
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <uart_request+0x1dc>)
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	e7ea      	b.n	8004670 <uart_request+0x168>
				HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,0);
 800469a:	2200      	movs	r2, #0
 800469c:	2120      	movs	r1, #32
 800469e:	2090      	movs	r0, #144	; 0x90
 80046a0:	05c0      	lsls	r0, r0, #23
 80046a2:	f7fd ff6b 	bl	800257c <HAL_GPIO_WritePin>
				motor_dir = 0;
 80046a6:	2200      	movs	r2, #0
 80046a8:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <uart_request+0x1dc>)
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e7e0      	b.n	8004670 <uart_request+0x168>
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	20000274 	.word	0x20000274
 80046b4:	20000278 	.word	0x20000278
 80046b8:	20000279 	.word	0x20000279
 80046bc:	20000354 	.word	0x20000354
 80046c0:	08005358 	.word	0x08005358
 80046c4:	200002d0 	.word	0x200002d0
 80046c8:	20000232 	.word	0x20000232
 80046cc:	2000001d 	.word	0x2000001d
 80046d0:	2000001c 	.word	0x2000001c
 80046d4:	20000004 	.word	0x20000004
 80046d8:	200002ac 	.word	0x200002ac
 80046dc:	20000284 	.word	0x20000284
 80046e0:	20000231 	.word	0x20000231
 80046e4:	20000235 	.word	0x20000235

080046e8 <user_main>:
#include "function.h"
#include "variables.h"

extern UART_HandleTypeDef huart1;

void user_main(){
 80046e8:	b570      	push	{r4, r5, r6, lr}

	if(uart_flag == 1){
 80046ea:	4b29      	ldr	r3, [pc, #164]	; (8004790 <user_main+0xa8>)
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	2a01      	cmp	r2, #1
 80046f0:	d049      	beq.n	8004786 <user_main+0x9e>
		uart_flag = 0;
		uart_request();

	}

	if(enable_encoder_reading == 1){
 80046f2:	4b28      	ldr	r3, [pc, #160]	; (8004794 <user_main+0xac>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d027      	beq.n	800474a <user_main+0x62>
			encoder_flag = 0;
			read_motor_position();
		}
	}

	if(enable_ADC_interrupt == 1){
 80046fa:	4b27      	ldr	r3, [pc, #156]	; (8004798 <user_main+0xb0>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d01a      	beq.n	8004738 <user_main+0x50>
			get_current_potentiometer();
		}
	}


	if(enable_data_aquisition){
 8004702:	4c26      	ldr	r4, [pc, #152]	; (800479c <user_main+0xb4>)
 8004704:	7823      	ldrb	r3, [r4, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d013      	beq.n	8004732 <user_main+0x4a>
		if(data_flag == 1){ // send system variables over UART
 800470a:	4d25      	ldr	r5, [pc, #148]	; (80047a0 <user_main+0xb8>)
 800470c:	782b      	ldrb	r3, [r5, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d024      	beq.n	800475c <user_main+0x74>
			data_flag = 0;
			data_aquisition();
		}
	}

	if(send_data_flag && enable_data_aquisition){
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <user_main+0xbc>)
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	2a00      	cmp	r2, #0
 8004718:	d00b      	beq.n	8004732 <user_main+0x4a>
		send_data_flag = 0;
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
 800471e:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <user_main+0xc0>)
 8004720:	681c      	ldr	r4, [r3, #0]
 8004722:	0020      	movs	r0, r4
 8004724:	f7fb fcf0 	bl	8000108 <strlen>
 8004728:	0021      	movs	r1, r4
 800472a:	b282      	uxth	r2, r0
 800472c:	481f      	ldr	r0, [pc, #124]	; (80047ac <user_main+0xc4>)
 800472e:	f7fe fded 	bl	800330c <HAL_UART_Transmit_DMA>
	}

	torque_output();
 8004732:	f7ff f9a9 	bl	8003a88 <torque_output>

}
 8004736:	bd70      	pop	{r4, r5, r6, pc}
		if(adc_flag == 1){
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <user_main+0xc8>)
 800473a:	781a      	ldrb	r2, [r3, #0]
 800473c:	2a01      	cmp	r2, #1
 800473e:	d1e0      	bne.n	8004702 <user_main+0x1a>
			adc_flag = 0;
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
			get_current_potentiometer();
 8004744:	f7ff f8b2 	bl	80038ac <get_current_potentiometer>
 8004748:	e7db      	b.n	8004702 <user_main+0x1a>
		if(encoder_flag == 1){
 800474a:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <user_main+0xcc>)
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	2a01      	cmp	r2, #1
 8004750:	d1d3      	bne.n	80046fa <user_main+0x12>
			encoder_flag = 0;
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
			read_motor_position();
 8004756:	f7ff f947 	bl	80039e8 <read_motor_position>
 800475a:	e7ce      	b.n	80046fa <user_main+0x12>
			time += 1;
 800475c:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <user_main+0xd0>)
			sprintf(send_time,"%lu", time);
 800475e:	4917      	ldr	r1, [pc, #92]	; (80047bc <user_main+0xd4>)
			time += 1;
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	3201      	adds	r2, #1
 8004764:	601a      	str	r2, [r3, #0]
			sprintf(send_time,"%lu", time);
 8004766:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <user_main+0xd8>)
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	f000 f94f 	bl	8004a0c <siprintf>
			data_flag = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	702b      	strb	r3, [r5, #0]
			data_aquisition();
 8004772:	f7ff fe01 	bl	8004378 <data_aquisition>
	if(send_data_flag && enable_data_aquisition){
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <user_main+0xbc>)
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	2a00      	cmp	r2, #0
 800477c:	d0d9      	beq.n	8004732 <user_main+0x4a>
 800477e:	7822      	ldrb	r2, [r4, #0]
 8004780:	2a00      	cmp	r2, #0
 8004782:	d0d6      	beq.n	8004732 <user_main+0x4a>
 8004784:	e7c9      	b.n	800471a <user_main+0x32>
		uart_flag = 0;
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
		uart_request();
 800478a:	f7ff febd 	bl	8004508 <uart_request>
 800478e:	e7b0      	b.n	80046f2 <user_main+0xa>
 8004790:	200002b8 	.word	0x200002b8
 8004794:	2000001d 	.word	0x2000001d
 8004798:	2000001c 	.word	0x2000001c
 800479c:	20000232 	.word	0x20000232
 80047a0:	20000230 	.word	0x20000230
 80047a4:	20000024 	.word	0x20000024
 80047a8:	2000022c 	.word	0x2000022c
 80047ac:	20000354 	.word	0x20000354
 80047b0:	20000220 	.word	0x20000220
 80047b4:	20000233 	.word	0x20000233
 80047b8:	200002b0 	.word	0x200002b0
 80047bc:	0800531c 	.word	0x0800531c
 80047c0:	20000290 	.word	0x20000290

080047c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047c4:	480d      	ldr	r0, [pc, #52]	; (80047fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047c8:	480d      	ldr	r0, [pc, #52]	; (8004800 <LoopForever+0x6>)
  ldr r1, =_edata
 80047ca:	490e      	ldr	r1, [pc, #56]	; (8004804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047cc:	4a0e      	ldr	r2, [pc, #56]	; (8004808 <LoopForever+0xe>)
  movs r3, #0
 80047ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047d0:	e002      	b.n	80047d8 <LoopCopyDataInit>

080047d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047d6:	3304      	adds	r3, #4

080047d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047dc:	d3f9      	bcc.n	80047d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047de:	4a0b      	ldr	r2, [pc, #44]	; (800480c <LoopForever+0x12>)
  ldr r4, =_ebss
 80047e0:	4c0b      	ldr	r4, [pc, #44]	; (8004810 <LoopForever+0x16>)
  movs r3, #0
 80047e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047e4:	e001      	b.n	80047ea <LoopFillZerobss>

080047e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047e8:	3204      	adds	r2, #4

080047ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047ec:	d3fb      	bcc.n	80047e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80047ee:	f7ff fd93 	bl	8004318 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80047f2:	f000 f811 	bl	8004818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047f6:	f7ff fb29 	bl	8003e4c <main>

080047fa <LoopForever>:

LoopForever:
    b LoopForever
 80047fa:	e7fe      	b.n	80047fa <LoopForever>
  ldr   r0, =_estack
 80047fc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8004800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004804:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8004808:	0800552c 	.word	0x0800552c
  ldr r2, =_sbss
 800480c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004810:	200004d8 	.word	0x200004d8

08004814 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004814:	e7fe      	b.n	8004814 <ADC1_IRQHandler>
	...

08004818 <__libc_init_array>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	2600      	movs	r6, #0
 800481c:	4d0c      	ldr	r5, [pc, #48]	; (8004850 <__libc_init_array+0x38>)
 800481e:	4c0d      	ldr	r4, [pc, #52]	; (8004854 <__libc_init_array+0x3c>)
 8004820:	1b64      	subs	r4, r4, r5
 8004822:	10a4      	asrs	r4, r4, #2
 8004824:	42a6      	cmp	r6, r4
 8004826:	d109      	bne.n	800483c <__libc_init_array+0x24>
 8004828:	2600      	movs	r6, #0
 800482a:	f000 fd19 	bl	8005260 <_init>
 800482e:	4d0a      	ldr	r5, [pc, #40]	; (8004858 <__libc_init_array+0x40>)
 8004830:	4c0a      	ldr	r4, [pc, #40]	; (800485c <__libc_init_array+0x44>)
 8004832:	1b64      	subs	r4, r4, r5
 8004834:	10a4      	asrs	r4, r4, #2
 8004836:	42a6      	cmp	r6, r4
 8004838:	d105      	bne.n	8004846 <__libc_init_array+0x2e>
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	00b3      	lsls	r3, r6, #2
 800483e:	58eb      	ldr	r3, [r5, r3]
 8004840:	4798      	blx	r3
 8004842:	3601      	adds	r6, #1
 8004844:	e7ee      	b.n	8004824 <__libc_init_array+0xc>
 8004846:	00b3      	lsls	r3, r6, #2
 8004848:	58eb      	ldr	r3, [r5, r3]
 800484a:	4798      	blx	r3
 800484c:	3601      	adds	r6, #1
 800484e:	e7f2      	b.n	8004836 <__libc_init_array+0x1e>
 8004850:	08005524 	.word	0x08005524
 8004854:	08005524 	.word	0x08005524
 8004858:	08005524 	.word	0x08005524
 800485c:	08005528 	.word	0x08005528

08004860 <malloc>:
 8004860:	b510      	push	{r4, lr}
 8004862:	4b03      	ldr	r3, [pc, #12]	; (8004870 <malloc+0x10>)
 8004864:	0001      	movs	r1, r0
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	f000 f860 	bl	800492c <_malloc_r>
 800486c:	bd10      	pop	{r4, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	2000002c 	.word	0x2000002c

08004874 <memcpy>:
 8004874:	2300      	movs	r3, #0
 8004876:	b510      	push	{r4, lr}
 8004878:	429a      	cmp	r2, r3
 800487a:	d100      	bne.n	800487e <memcpy+0xa>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	5ccc      	ldrb	r4, [r1, r3]
 8004880:	54c4      	strb	r4, [r0, r3]
 8004882:	3301      	adds	r3, #1
 8004884:	e7f8      	b.n	8004878 <memcpy+0x4>

08004886 <memset>:
 8004886:	0003      	movs	r3, r0
 8004888:	1882      	adds	r2, r0, r2
 800488a:	4293      	cmp	r3, r2
 800488c:	d100      	bne.n	8004890 <memset+0xa>
 800488e:	4770      	bx	lr
 8004890:	7019      	strb	r1, [r3, #0]
 8004892:	3301      	adds	r3, #1
 8004894:	e7f9      	b.n	800488a <memset+0x4>
	...

08004898 <_free_r>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	0005      	movs	r5, r0
 800489c:	2900      	cmp	r1, #0
 800489e:	d010      	beq.n	80048c2 <_free_r+0x2a>
 80048a0:	1f0c      	subs	r4, r1, #4
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da00      	bge.n	80048aa <_free_r+0x12>
 80048a8:	18e4      	adds	r4, r4, r3
 80048aa:	0028      	movs	r0, r5
 80048ac:	f000 f97f 	bl	8004bae <__malloc_lock>
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <_free_r+0x90>)
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <_free_r+0x2c>
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	6014      	str	r4, [r2, #0]
 80048bc:	0028      	movs	r0, r5
 80048be:	f000 f977 	bl	8004bb0 <__malloc_unlock>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	d909      	bls.n	80048dc <_free_r+0x44>
 80048c8:	6821      	ldr	r1, [r4, #0]
 80048ca:	1860      	adds	r0, r4, r1
 80048cc:	4283      	cmp	r3, r0
 80048ce:	d1f3      	bne.n	80048b8 <_free_r+0x20>
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	1841      	adds	r1, r0, r1
 80048d6:	6021      	str	r1, [r4, #0]
 80048d8:	e7ee      	b.n	80048b8 <_free_r+0x20>
 80048da:	0013      	movs	r3, r2
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	2a00      	cmp	r2, #0
 80048e0:	d001      	beq.n	80048e6 <_free_r+0x4e>
 80048e2:	42a2      	cmp	r2, r4
 80048e4:	d9f9      	bls.n	80048da <_free_r+0x42>
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	1858      	adds	r0, r3, r1
 80048ea:	42a0      	cmp	r0, r4
 80048ec:	d10b      	bne.n	8004906 <_free_r+0x6e>
 80048ee:	6820      	ldr	r0, [r4, #0]
 80048f0:	1809      	adds	r1, r1, r0
 80048f2:	1858      	adds	r0, r3, r1
 80048f4:	6019      	str	r1, [r3, #0]
 80048f6:	4282      	cmp	r2, r0
 80048f8:	d1e0      	bne.n	80048bc <_free_r+0x24>
 80048fa:	6810      	ldr	r0, [r2, #0]
 80048fc:	6852      	ldr	r2, [r2, #4]
 80048fe:	1841      	adds	r1, r0, r1
 8004900:	6019      	str	r1, [r3, #0]
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	e7da      	b.n	80048bc <_free_r+0x24>
 8004906:	42a0      	cmp	r0, r4
 8004908:	d902      	bls.n	8004910 <_free_r+0x78>
 800490a:	230c      	movs	r3, #12
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	e7d5      	b.n	80048bc <_free_r+0x24>
 8004910:	6821      	ldr	r1, [r4, #0]
 8004912:	1860      	adds	r0, r4, r1
 8004914:	4282      	cmp	r2, r0
 8004916:	d103      	bne.n	8004920 <_free_r+0x88>
 8004918:	6810      	ldr	r0, [r2, #0]
 800491a:	6852      	ldr	r2, [r2, #4]
 800491c:	1841      	adds	r1, r0, r1
 800491e:	6021      	str	r1, [r4, #0]
 8004920:	6062      	str	r2, [r4, #4]
 8004922:	605c      	str	r4, [r3, #4]
 8004924:	e7ca      	b.n	80048bc <_free_r+0x24>
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	200002c0 	.word	0x200002c0

0800492c <_malloc_r>:
 800492c:	2303      	movs	r3, #3
 800492e:	b570      	push	{r4, r5, r6, lr}
 8004930:	1ccd      	adds	r5, r1, #3
 8004932:	439d      	bics	r5, r3
 8004934:	3508      	adds	r5, #8
 8004936:	0006      	movs	r6, r0
 8004938:	2d0c      	cmp	r5, #12
 800493a:	d21e      	bcs.n	800497a <_malloc_r+0x4e>
 800493c:	250c      	movs	r5, #12
 800493e:	42a9      	cmp	r1, r5
 8004940:	d81d      	bhi.n	800497e <_malloc_r+0x52>
 8004942:	0030      	movs	r0, r6
 8004944:	f000 f933 	bl	8004bae <__malloc_lock>
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <_malloc_r+0xb4>)
 800494a:	6814      	ldr	r4, [r2, #0]
 800494c:	0021      	movs	r1, r4
 800494e:	2900      	cmp	r1, #0
 8004950:	d119      	bne.n	8004986 <_malloc_r+0x5a>
 8004952:	4c24      	ldr	r4, [pc, #144]	; (80049e4 <_malloc_r+0xb8>)
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <_malloc_r+0x36>
 800495a:	0030      	movs	r0, r6
 800495c:	f000 f844 	bl	80049e8 <_sbrk_r>
 8004960:	6020      	str	r0, [r4, #0]
 8004962:	0029      	movs	r1, r5
 8004964:	0030      	movs	r0, r6
 8004966:	f000 f83f 	bl	80049e8 <_sbrk_r>
 800496a:	1c43      	adds	r3, r0, #1
 800496c:	d12c      	bne.n	80049c8 <_malloc_r+0x9c>
 800496e:	230c      	movs	r3, #12
 8004970:	0030      	movs	r0, r6
 8004972:	6033      	str	r3, [r6, #0]
 8004974:	f000 f91c 	bl	8004bb0 <__malloc_unlock>
 8004978:	e003      	b.n	8004982 <_malloc_r+0x56>
 800497a:	2d00      	cmp	r5, #0
 800497c:	dadf      	bge.n	800493e <_malloc_r+0x12>
 800497e:	230c      	movs	r3, #12
 8004980:	6033      	str	r3, [r6, #0]
 8004982:	2000      	movs	r0, #0
 8004984:	bd70      	pop	{r4, r5, r6, pc}
 8004986:	680b      	ldr	r3, [r1, #0]
 8004988:	1b5b      	subs	r3, r3, r5
 800498a:	d41a      	bmi.n	80049c2 <_malloc_r+0x96>
 800498c:	2b0b      	cmp	r3, #11
 800498e:	d903      	bls.n	8004998 <_malloc_r+0x6c>
 8004990:	600b      	str	r3, [r1, #0]
 8004992:	18cc      	adds	r4, r1, r3
 8004994:	6025      	str	r5, [r4, #0]
 8004996:	e003      	b.n	80049a0 <_malloc_r+0x74>
 8004998:	428c      	cmp	r4, r1
 800499a:	d10e      	bne.n	80049ba <_malloc_r+0x8e>
 800499c:	6863      	ldr	r3, [r4, #4]
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	0030      	movs	r0, r6
 80049a2:	f000 f905 	bl	8004bb0 <__malloc_unlock>
 80049a6:	0020      	movs	r0, r4
 80049a8:	2207      	movs	r2, #7
 80049aa:	300b      	adds	r0, #11
 80049ac:	1d23      	adds	r3, r4, #4
 80049ae:	4390      	bics	r0, r2
 80049b0:	1ac3      	subs	r3, r0, r3
 80049b2:	d0e7      	beq.n	8004984 <_malloc_r+0x58>
 80049b4:	425a      	negs	r2, r3
 80049b6:	50e2      	str	r2, [r4, r3]
 80049b8:	e7e4      	b.n	8004984 <_malloc_r+0x58>
 80049ba:	684b      	ldr	r3, [r1, #4]
 80049bc:	6063      	str	r3, [r4, #4]
 80049be:	000c      	movs	r4, r1
 80049c0:	e7ee      	b.n	80049a0 <_malloc_r+0x74>
 80049c2:	000c      	movs	r4, r1
 80049c4:	6849      	ldr	r1, [r1, #4]
 80049c6:	e7c2      	b.n	800494e <_malloc_r+0x22>
 80049c8:	2303      	movs	r3, #3
 80049ca:	1cc4      	adds	r4, r0, #3
 80049cc:	439c      	bics	r4, r3
 80049ce:	42a0      	cmp	r0, r4
 80049d0:	d0e0      	beq.n	8004994 <_malloc_r+0x68>
 80049d2:	1a21      	subs	r1, r4, r0
 80049d4:	0030      	movs	r0, r6
 80049d6:	f000 f807 	bl	80049e8 <_sbrk_r>
 80049da:	1c43      	adds	r3, r0, #1
 80049dc:	d1da      	bne.n	8004994 <_malloc_r+0x68>
 80049de:	e7c6      	b.n	800496e <_malloc_r+0x42>
 80049e0:	200002c0 	.word	0x200002c0
 80049e4:	200002c4 	.word	0x200002c4

080049e8 <_sbrk_r>:
 80049e8:	2300      	movs	r3, #0
 80049ea:	b570      	push	{r4, r5, r6, lr}
 80049ec:	4c06      	ldr	r4, [pc, #24]	; (8004a08 <_sbrk_r+0x20>)
 80049ee:	0005      	movs	r5, r0
 80049f0:	0008      	movs	r0, r1
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	f000 fc24 	bl	8005240 <_sbrk>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d103      	bne.n	8004a04 <_sbrk_r+0x1c>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d000      	beq.n	8004a04 <_sbrk_r+0x1c>
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	200004d4 	.word	0x200004d4

08004a0c <siprintf>:
 8004a0c:	b40e      	push	{r1, r2, r3}
 8004a0e:	b510      	push	{r4, lr}
 8004a10:	b09d      	sub	sp, #116	; 0x74
 8004a12:	a902      	add	r1, sp, #8
 8004a14:	9002      	str	r0, [sp, #8]
 8004a16:	6108      	str	r0, [r1, #16]
 8004a18:	480b      	ldr	r0, [pc, #44]	; (8004a48 <siprintf+0x3c>)
 8004a1a:	2482      	movs	r4, #130	; 0x82
 8004a1c:	6088      	str	r0, [r1, #8]
 8004a1e:	6148      	str	r0, [r1, #20]
 8004a20:	2001      	movs	r0, #1
 8004a22:	4240      	negs	r0, r0
 8004a24:	ab1f      	add	r3, sp, #124	; 0x7c
 8004a26:	81c8      	strh	r0, [r1, #14]
 8004a28:	4808      	ldr	r0, [pc, #32]	; (8004a4c <siprintf+0x40>)
 8004a2a:	cb04      	ldmia	r3!, {r2}
 8004a2c:	00a4      	lsls	r4, r4, #2
 8004a2e:	6800      	ldr	r0, [r0, #0]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	818c      	strh	r4, [r1, #12]
 8004a34:	f000 f920 	bl	8004c78 <_svfiprintf_r>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9a02      	ldr	r2, [sp, #8]
 8004a3c:	7013      	strb	r3, [r2, #0]
 8004a3e:	b01d      	add	sp, #116	; 0x74
 8004a40:	bc10      	pop	{r4}
 8004a42:	bc08      	pop	{r3}
 8004a44:	b003      	add	sp, #12
 8004a46:	4718      	bx	r3
 8004a48:	7fffffff 	.word	0x7fffffff
 8004a4c:	2000002c 	.word	0x2000002c

08004a50 <_strtol_l.isra.0>:
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a52:	001f      	movs	r7, r3
 8004a54:	000e      	movs	r6, r1
 8004a56:	b087      	sub	sp, #28
 8004a58:	9005      	str	r0, [sp, #20]
 8004a5a:	9103      	str	r1, [sp, #12]
 8004a5c:	9202      	str	r2, [sp, #8]
 8004a5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a60:	7834      	ldrb	r4, [r6, #0]
 8004a62:	f000 f88f 	bl	8004b84 <__locale_ctype_ptr_l>
 8004a66:	2208      	movs	r2, #8
 8004a68:	1900      	adds	r0, r0, r4
 8004a6a:	7843      	ldrb	r3, [r0, #1]
 8004a6c:	1c75      	adds	r5, r6, #1
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d10c      	bne.n	8004a8c <_strtol_l.isra.0+0x3c>
 8004a72:	2c2d      	cmp	r4, #45	; 0x2d
 8004a74:	d10c      	bne.n	8004a90 <_strtol_l.isra.0+0x40>
 8004a76:	3301      	adds	r3, #1
 8004a78:	782c      	ldrb	r4, [r5, #0]
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	1cb5      	adds	r5, r6, #2
 8004a7e:	2f00      	cmp	r7, #0
 8004a80:	d00c      	beq.n	8004a9c <_strtol_l.isra.0+0x4c>
 8004a82:	2f10      	cmp	r7, #16
 8004a84:	d114      	bne.n	8004ab0 <_strtol_l.isra.0+0x60>
 8004a86:	2c30      	cmp	r4, #48	; 0x30
 8004a88:	d00a      	beq.n	8004aa0 <_strtol_l.isra.0+0x50>
 8004a8a:	e011      	b.n	8004ab0 <_strtol_l.isra.0+0x60>
 8004a8c:	002e      	movs	r6, r5
 8004a8e:	e7e6      	b.n	8004a5e <_strtol_l.isra.0+0xe>
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	2c2b      	cmp	r4, #43	; 0x2b
 8004a94:	d1f3      	bne.n	8004a7e <_strtol_l.isra.0+0x2e>
 8004a96:	782c      	ldrb	r4, [r5, #0]
 8004a98:	1cb5      	adds	r5, r6, #2
 8004a9a:	e7f0      	b.n	8004a7e <_strtol_l.isra.0+0x2e>
 8004a9c:	2c30      	cmp	r4, #48	; 0x30
 8004a9e:	d12f      	bne.n	8004b00 <_strtol_l.isra.0+0xb0>
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	782b      	ldrb	r3, [r5, #0]
 8004aa4:	4393      	bics	r3, r2
 8004aa6:	2b58      	cmp	r3, #88	; 0x58
 8004aa8:	d151      	bne.n	8004b4e <_strtol_l.isra.0+0xfe>
 8004aaa:	2710      	movs	r7, #16
 8004aac:	786c      	ldrb	r4, [r5, #1]
 8004aae:	3502      	adds	r5, #2
 8004ab0:	9b01      	ldr	r3, [sp, #4]
 8004ab2:	4a29      	ldr	r2, [pc, #164]	; (8004b58 <_strtol_l.isra.0+0x108>)
 8004ab4:	0039      	movs	r1, r7
 8004ab6:	189e      	adds	r6, r3, r2
 8004ab8:	0030      	movs	r0, r6
 8004aba:	f7fb fbbd 	bl	8000238 <__aeabi_uidivmod>
 8004abe:	0030      	movs	r0, r6
 8004ac0:	9104      	str	r1, [sp, #16]
 8004ac2:	0039      	movs	r1, r7
 8004ac4:	f7fb fb32 	bl	800012c <__udivsi3>
 8004ac8:	2101      	movs	r1, #1
 8004aca:	2300      	movs	r3, #0
 8004acc:	4249      	negs	r1, r1
 8004ace:	0002      	movs	r2, r0
 8004ad0:	468c      	mov	ip, r1
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	0021      	movs	r1, r4
 8004ad6:	3930      	subs	r1, #48	; 0x30
 8004ad8:	2909      	cmp	r1, #9
 8004ada:	d813      	bhi.n	8004b04 <_strtol_l.isra.0+0xb4>
 8004adc:	000c      	movs	r4, r1
 8004ade:	42a7      	cmp	r7, r4
 8004ae0:	dd1c      	ble.n	8004b1c <_strtol_l.isra.0+0xcc>
 8004ae2:	1c59      	adds	r1, r3, #1
 8004ae4:	d009      	beq.n	8004afa <_strtol_l.isra.0+0xaa>
 8004ae6:	4663      	mov	r3, ip
 8004ae8:	4282      	cmp	r2, r0
 8004aea:	d306      	bcc.n	8004afa <_strtol_l.isra.0+0xaa>
 8004aec:	d102      	bne.n	8004af4 <_strtol_l.isra.0+0xa4>
 8004aee:	9904      	ldr	r1, [sp, #16]
 8004af0:	42a1      	cmp	r1, r4
 8004af2:	db02      	blt.n	8004afa <_strtol_l.isra.0+0xaa>
 8004af4:	2301      	movs	r3, #1
 8004af6:	4378      	muls	r0, r7
 8004af8:	1820      	adds	r0, r4, r0
 8004afa:	782c      	ldrb	r4, [r5, #0]
 8004afc:	3501      	adds	r5, #1
 8004afe:	e7e9      	b.n	8004ad4 <_strtol_l.isra.0+0x84>
 8004b00:	270a      	movs	r7, #10
 8004b02:	e7d5      	b.n	8004ab0 <_strtol_l.isra.0+0x60>
 8004b04:	0021      	movs	r1, r4
 8004b06:	3941      	subs	r1, #65	; 0x41
 8004b08:	2919      	cmp	r1, #25
 8004b0a:	d801      	bhi.n	8004b10 <_strtol_l.isra.0+0xc0>
 8004b0c:	3c37      	subs	r4, #55	; 0x37
 8004b0e:	e7e6      	b.n	8004ade <_strtol_l.isra.0+0x8e>
 8004b10:	0021      	movs	r1, r4
 8004b12:	3961      	subs	r1, #97	; 0x61
 8004b14:	2919      	cmp	r1, #25
 8004b16:	d801      	bhi.n	8004b1c <_strtol_l.isra.0+0xcc>
 8004b18:	3c57      	subs	r4, #87	; 0x57
 8004b1a:	e7e0      	b.n	8004ade <_strtol_l.isra.0+0x8e>
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	d108      	bne.n	8004b32 <_strtol_l.isra.0+0xe2>
 8004b20:	9a05      	ldr	r2, [sp, #20]
 8004b22:	3323      	adds	r3, #35	; 0x23
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	9b02      	ldr	r3, [sp, #8]
 8004b28:	0030      	movs	r0, r6
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <_strtol_l.isra.0+0xf6>
 8004b2e:	b007      	add	sp, #28
 8004b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b32:	9a01      	ldr	r2, [sp, #4]
 8004b34:	2a00      	cmp	r2, #0
 8004b36:	d000      	beq.n	8004b3a <_strtol_l.isra.0+0xea>
 8004b38:	4240      	negs	r0, r0
 8004b3a:	9a02      	ldr	r2, [sp, #8]
 8004b3c:	2a00      	cmp	r2, #0
 8004b3e:	d0f6      	beq.n	8004b2e <_strtol_l.isra.0+0xde>
 8004b40:	9a03      	ldr	r2, [sp, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d000      	beq.n	8004b48 <_strtol_l.isra.0+0xf8>
 8004b46:	1e6a      	subs	r2, r5, #1
 8004b48:	9b02      	ldr	r3, [sp, #8]
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e7ef      	b.n	8004b2e <_strtol_l.isra.0+0xde>
 8004b4e:	2430      	movs	r4, #48	; 0x30
 8004b50:	2f00      	cmp	r7, #0
 8004b52:	d1ad      	bne.n	8004ab0 <_strtol_l.isra.0+0x60>
 8004b54:	3708      	adds	r7, #8
 8004b56:	e7ab      	b.n	8004ab0 <_strtol_l.isra.0+0x60>
 8004b58:	7fffffff 	.word	0x7fffffff

08004b5c <strtol>:
 8004b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b5e:	0013      	movs	r3, r2
 8004b60:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <strtol+0x20>)
 8004b62:	0005      	movs	r5, r0
 8004b64:	6810      	ldr	r0, [r2, #0]
 8004b66:	6a04      	ldr	r4, [r0, #32]
 8004b68:	2c00      	cmp	r4, #0
 8004b6a:	d100      	bne.n	8004b6e <strtol+0x12>
 8004b6c:	4c04      	ldr	r4, [pc, #16]	; (8004b80 <strtol+0x24>)
 8004b6e:	000a      	movs	r2, r1
 8004b70:	9400      	str	r4, [sp, #0]
 8004b72:	0029      	movs	r1, r5
 8004b74:	f7ff ff6c 	bl	8004a50 <_strtol_l.isra.0>
 8004b78:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	2000002c 	.word	0x2000002c
 8004b80:	20000090 	.word	0x20000090

08004b84 <__locale_ctype_ptr_l>:
 8004b84:	30ec      	adds	r0, #236	; 0xec
 8004b86:	6800      	ldr	r0, [r0, #0]
 8004b88:	4770      	bx	lr

08004b8a <__ascii_mbtowc>:
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	d100      	bne.n	8004b92 <__ascii_mbtowc+0x8>
 8004b90:	a901      	add	r1, sp, #4
 8004b92:	1e10      	subs	r0, r2, #0
 8004b94:	d006      	beq.n	8004ba4 <__ascii_mbtowc+0x1a>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <__ascii_mbtowc+0x1e>
 8004b9a:	7813      	ldrb	r3, [r2, #0]
 8004b9c:	600b      	str	r3, [r1, #0]
 8004b9e:	7810      	ldrb	r0, [r2, #0]
 8004ba0:	1e43      	subs	r3, r0, #1
 8004ba2:	4198      	sbcs	r0, r3
 8004ba4:	b002      	add	sp, #8
 8004ba6:	4770      	bx	lr
 8004ba8:	2002      	movs	r0, #2
 8004baa:	4240      	negs	r0, r0
 8004bac:	e7fa      	b.n	8004ba4 <__ascii_mbtowc+0x1a>

08004bae <__malloc_lock>:
 8004bae:	4770      	bx	lr

08004bb0 <__malloc_unlock>:
 8004bb0:	4770      	bx	lr
	...

08004bb4 <__ssputs_r>:
 8004bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb6:	688e      	ldr	r6, [r1, #8]
 8004bb8:	b085      	sub	sp, #20
 8004bba:	0007      	movs	r7, r0
 8004bbc:	000c      	movs	r4, r1
 8004bbe:	9203      	str	r2, [sp, #12]
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	429e      	cmp	r6, r3
 8004bc4:	d839      	bhi.n	8004c3a <__ssputs_r+0x86>
 8004bc6:	2390      	movs	r3, #144	; 0x90
 8004bc8:	898a      	ldrh	r2, [r1, #12]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	421a      	tst	r2, r3
 8004bce:	d034      	beq.n	8004c3a <__ssputs_r+0x86>
 8004bd0:	2503      	movs	r5, #3
 8004bd2:	6909      	ldr	r1, [r1, #16]
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	1a5b      	subs	r3, r3, r1
 8004bd8:	9302      	str	r3, [sp, #8]
 8004bda:	6963      	ldr	r3, [r4, #20]
 8004bdc:	9802      	ldr	r0, [sp, #8]
 8004bde:	435d      	muls	r5, r3
 8004be0:	0feb      	lsrs	r3, r5, #31
 8004be2:	195d      	adds	r5, r3, r5
 8004be4:	9b01      	ldr	r3, [sp, #4]
 8004be6:	106d      	asrs	r5, r5, #1
 8004be8:	3301      	adds	r3, #1
 8004bea:	181b      	adds	r3, r3, r0
 8004bec:	42ab      	cmp	r3, r5
 8004bee:	d900      	bls.n	8004bf2 <__ssputs_r+0x3e>
 8004bf0:	001d      	movs	r5, r3
 8004bf2:	0553      	lsls	r3, r2, #21
 8004bf4:	d532      	bpl.n	8004c5c <__ssputs_r+0xa8>
 8004bf6:	0029      	movs	r1, r5
 8004bf8:	0038      	movs	r0, r7
 8004bfa:	f7ff fe97 	bl	800492c <_malloc_r>
 8004bfe:	1e06      	subs	r6, r0, #0
 8004c00:	d109      	bne.n	8004c16 <__ssputs_r+0x62>
 8004c02:	230c      	movs	r3, #12
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	2340      	movs	r3, #64	; 0x40
 8004c08:	2001      	movs	r0, #1
 8004c0a:	89a2      	ldrh	r2, [r4, #12]
 8004c0c:	4240      	negs	r0, r0
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	81a3      	strh	r3, [r4, #12]
 8004c12:	b005      	add	sp, #20
 8004c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c16:	9a02      	ldr	r2, [sp, #8]
 8004c18:	6921      	ldr	r1, [r4, #16]
 8004c1a:	f7ff fe2b 	bl	8004874 <memcpy>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	4a14      	ldr	r2, [pc, #80]	; (8004c74 <__ssputs_r+0xc0>)
 8004c22:	401a      	ands	r2, r3
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	4313      	orrs	r3, r2
 8004c28:	81a3      	strh	r3, [r4, #12]
 8004c2a:	9b02      	ldr	r3, [sp, #8]
 8004c2c:	6126      	str	r6, [r4, #16]
 8004c2e:	18f6      	adds	r6, r6, r3
 8004c30:	6026      	str	r6, [r4, #0]
 8004c32:	6165      	str	r5, [r4, #20]
 8004c34:	9e01      	ldr	r6, [sp, #4]
 8004c36:	1aed      	subs	r5, r5, r3
 8004c38:	60a5      	str	r5, [r4, #8]
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	42b3      	cmp	r3, r6
 8004c3e:	d200      	bcs.n	8004c42 <__ssputs_r+0x8e>
 8004c40:	001e      	movs	r6, r3
 8004c42:	0032      	movs	r2, r6
 8004c44:	9903      	ldr	r1, [sp, #12]
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	f000 fab9 	bl	80051be <memmove>
 8004c4c:	68a3      	ldr	r3, [r4, #8]
 8004c4e:	2000      	movs	r0, #0
 8004c50:	1b9b      	subs	r3, r3, r6
 8004c52:	60a3      	str	r3, [r4, #8]
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	199e      	adds	r6, r3, r6
 8004c58:	6026      	str	r6, [r4, #0]
 8004c5a:	e7da      	b.n	8004c12 <__ssputs_r+0x5e>
 8004c5c:	002a      	movs	r2, r5
 8004c5e:	0038      	movs	r0, r7
 8004c60:	f000 fabf 	bl	80051e2 <_realloc_r>
 8004c64:	1e06      	subs	r6, r0, #0
 8004c66:	d1e0      	bne.n	8004c2a <__ssputs_r+0x76>
 8004c68:	6921      	ldr	r1, [r4, #16]
 8004c6a:	0038      	movs	r0, r7
 8004c6c:	f7ff fe14 	bl	8004898 <_free_r>
 8004c70:	e7c7      	b.n	8004c02 <__ssputs_r+0x4e>
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	fffffb7f 	.word	0xfffffb7f

08004c78 <_svfiprintf_r>:
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7a:	b09f      	sub	sp, #124	; 0x7c
 8004c7c:	9002      	str	r0, [sp, #8]
 8004c7e:	9305      	str	r3, [sp, #20]
 8004c80:	898b      	ldrh	r3, [r1, #12]
 8004c82:	000f      	movs	r7, r1
 8004c84:	0016      	movs	r6, r2
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	d511      	bpl.n	8004cae <_svfiprintf_r+0x36>
 8004c8a:	690b      	ldr	r3, [r1, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10e      	bne.n	8004cae <_svfiprintf_r+0x36>
 8004c90:	2140      	movs	r1, #64	; 0x40
 8004c92:	f7ff fe4b 	bl	800492c <_malloc_r>
 8004c96:	6038      	str	r0, [r7, #0]
 8004c98:	6138      	str	r0, [r7, #16]
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d105      	bne.n	8004caa <_svfiprintf_r+0x32>
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	9a02      	ldr	r2, [sp, #8]
 8004ca2:	3801      	subs	r0, #1
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	b01f      	add	sp, #124	; 0x7c
 8004ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004caa:	2340      	movs	r3, #64	; 0x40
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	ad06      	add	r5, sp, #24
 8004cb2:	616b      	str	r3, [r5, #20]
 8004cb4:	3320      	adds	r3, #32
 8004cb6:	766b      	strb	r3, [r5, #25]
 8004cb8:	3310      	adds	r3, #16
 8004cba:	76ab      	strb	r3, [r5, #26]
 8004cbc:	0034      	movs	r4, r6
 8004cbe:	7823      	ldrb	r3, [r4, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d147      	bne.n	8004d54 <_svfiprintf_r+0xdc>
 8004cc4:	1ba3      	subs	r3, r4, r6
 8004cc6:	9304      	str	r3, [sp, #16]
 8004cc8:	d00d      	beq.n	8004ce6 <_svfiprintf_r+0x6e>
 8004cca:	1ba3      	subs	r3, r4, r6
 8004ccc:	0032      	movs	r2, r6
 8004cce:	0039      	movs	r1, r7
 8004cd0:	9802      	ldr	r0, [sp, #8]
 8004cd2:	f7ff ff6f 	bl	8004bb4 <__ssputs_r>
 8004cd6:	1c43      	adds	r3, r0, #1
 8004cd8:	d100      	bne.n	8004cdc <_svfiprintf_r+0x64>
 8004cda:	e0b5      	b.n	8004e48 <_svfiprintf_r+0x1d0>
 8004cdc:	696a      	ldr	r2, [r5, #20]
 8004cde:	9b04      	ldr	r3, [sp, #16]
 8004ce0:	4694      	mov	ip, r2
 8004ce2:	4463      	add	r3, ip
 8004ce4:	616b      	str	r3, [r5, #20]
 8004ce6:	7823      	ldrb	r3, [r4, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d100      	bne.n	8004cee <_svfiprintf_r+0x76>
 8004cec:	e0ac      	b.n	8004e48 <_svfiprintf_r+0x1d0>
 8004cee:	2201      	movs	r2, #1
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4252      	negs	r2, r2
 8004cf4:	606a      	str	r2, [r5, #4]
 8004cf6:	a902      	add	r1, sp, #8
 8004cf8:	3254      	adds	r2, #84	; 0x54
 8004cfa:	1852      	adds	r2, r2, r1
 8004cfc:	3401      	adds	r4, #1
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	60eb      	str	r3, [r5, #12]
 8004d02:	60ab      	str	r3, [r5, #8]
 8004d04:	7013      	strb	r3, [r2, #0]
 8004d06:	65ab      	str	r3, [r5, #88]	; 0x58
 8004d08:	4e58      	ldr	r6, [pc, #352]	; (8004e6c <_svfiprintf_r+0x1f4>)
 8004d0a:	2205      	movs	r2, #5
 8004d0c:	7821      	ldrb	r1, [r4, #0]
 8004d0e:	0030      	movs	r0, r6
 8004d10:	f000 fa4a 	bl	80051a8 <memchr>
 8004d14:	1c62      	adds	r2, r4, #1
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d120      	bne.n	8004d5c <_svfiprintf_r+0xe4>
 8004d1a:	6829      	ldr	r1, [r5, #0]
 8004d1c:	06cb      	lsls	r3, r1, #27
 8004d1e:	d504      	bpl.n	8004d2a <_svfiprintf_r+0xb2>
 8004d20:	2353      	movs	r3, #83	; 0x53
 8004d22:	ae02      	add	r6, sp, #8
 8004d24:	3020      	adds	r0, #32
 8004d26:	199b      	adds	r3, r3, r6
 8004d28:	7018      	strb	r0, [r3, #0]
 8004d2a:	070b      	lsls	r3, r1, #28
 8004d2c:	d504      	bpl.n	8004d38 <_svfiprintf_r+0xc0>
 8004d2e:	2353      	movs	r3, #83	; 0x53
 8004d30:	202b      	movs	r0, #43	; 0x2b
 8004d32:	ae02      	add	r6, sp, #8
 8004d34:	199b      	adds	r3, r3, r6
 8004d36:	7018      	strb	r0, [r3, #0]
 8004d38:	7823      	ldrb	r3, [r4, #0]
 8004d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d3c:	d016      	beq.n	8004d6c <_svfiprintf_r+0xf4>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	210a      	movs	r1, #10
 8004d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d44:	7822      	ldrb	r2, [r4, #0]
 8004d46:	3a30      	subs	r2, #48	; 0x30
 8004d48:	2a09      	cmp	r2, #9
 8004d4a:	d955      	bls.n	8004df8 <_svfiprintf_r+0x180>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d015      	beq.n	8004d7c <_svfiprintf_r+0x104>
 8004d50:	9309      	str	r3, [sp, #36]	; 0x24
 8004d52:	e013      	b.n	8004d7c <_svfiprintf_r+0x104>
 8004d54:	2b25      	cmp	r3, #37	; 0x25
 8004d56:	d0b5      	beq.n	8004cc4 <_svfiprintf_r+0x4c>
 8004d58:	3401      	adds	r4, #1
 8004d5a:	e7b0      	b.n	8004cbe <_svfiprintf_r+0x46>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	1b80      	subs	r0, r0, r6
 8004d60:	4083      	lsls	r3, r0
 8004d62:	6829      	ldr	r1, [r5, #0]
 8004d64:	0014      	movs	r4, r2
 8004d66:	430b      	orrs	r3, r1
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	e7cd      	b.n	8004d08 <_svfiprintf_r+0x90>
 8004d6c:	9b05      	ldr	r3, [sp, #20]
 8004d6e:	1d18      	adds	r0, r3, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	9005      	str	r0, [sp, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	db39      	blt.n	8004dec <_svfiprintf_r+0x174>
 8004d78:	9309      	str	r3, [sp, #36]	; 0x24
 8004d7a:	0014      	movs	r4, r2
 8004d7c:	7823      	ldrb	r3, [r4, #0]
 8004d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d80:	d10b      	bne.n	8004d9a <_svfiprintf_r+0x122>
 8004d82:	7863      	ldrb	r3, [r4, #1]
 8004d84:	1c62      	adds	r2, r4, #1
 8004d86:	2b2a      	cmp	r3, #42	; 0x2a
 8004d88:	d13e      	bne.n	8004e08 <_svfiprintf_r+0x190>
 8004d8a:	9b05      	ldr	r3, [sp, #20]
 8004d8c:	3402      	adds	r4, #2
 8004d8e:	1d1a      	adds	r2, r3, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	9205      	str	r2, [sp, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	db34      	blt.n	8004e02 <_svfiprintf_r+0x18a>
 8004d98:	9307      	str	r3, [sp, #28]
 8004d9a:	4e35      	ldr	r6, [pc, #212]	; (8004e70 <_svfiprintf_r+0x1f8>)
 8004d9c:	7821      	ldrb	r1, [r4, #0]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	0030      	movs	r0, r6
 8004da2:	f000 fa01 	bl	80051a8 <memchr>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d006      	beq.n	8004db8 <_svfiprintf_r+0x140>
 8004daa:	2340      	movs	r3, #64	; 0x40
 8004dac:	1b80      	subs	r0, r0, r6
 8004dae:	4083      	lsls	r3, r0
 8004db0:	682a      	ldr	r2, [r5, #0]
 8004db2:	3401      	adds	r4, #1
 8004db4:	4313      	orrs	r3, r2
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	7821      	ldrb	r1, [r4, #0]
 8004dba:	2206      	movs	r2, #6
 8004dbc:	482d      	ldr	r0, [pc, #180]	; (8004e74 <_svfiprintf_r+0x1fc>)
 8004dbe:	1c66      	adds	r6, r4, #1
 8004dc0:	7629      	strb	r1, [r5, #24]
 8004dc2:	f000 f9f1 	bl	80051a8 <memchr>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d046      	beq.n	8004e58 <_svfiprintf_r+0x1e0>
 8004dca:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <_svfiprintf_r+0x200>)
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d12f      	bne.n	8004e30 <_svfiprintf_r+0x1b8>
 8004dd0:	6829      	ldr	r1, [r5, #0]
 8004dd2:	9b05      	ldr	r3, [sp, #20]
 8004dd4:	2207      	movs	r2, #7
 8004dd6:	05c9      	lsls	r1, r1, #23
 8004dd8:	d528      	bpl.n	8004e2c <_svfiprintf_r+0x1b4>
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	4393      	bics	r3, r2
 8004dde:	3308      	adds	r3, #8
 8004de0:	9305      	str	r3, [sp, #20]
 8004de2:	696b      	ldr	r3, [r5, #20]
 8004de4:	9a03      	ldr	r2, [sp, #12]
 8004de6:	189b      	adds	r3, r3, r2
 8004de8:	616b      	str	r3, [r5, #20]
 8004dea:	e767      	b.n	8004cbc <_svfiprintf_r+0x44>
 8004dec:	425b      	negs	r3, r3
 8004dee:	60eb      	str	r3, [r5, #12]
 8004df0:	2302      	movs	r3, #2
 8004df2:	430b      	orrs	r3, r1
 8004df4:	602b      	str	r3, [r5, #0]
 8004df6:	e7c0      	b.n	8004d7a <_svfiprintf_r+0x102>
 8004df8:	434b      	muls	r3, r1
 8004dfa:	3401      	adds	r4, #1
 8004dfc:	189b      	adds	r3, r3, r2
 8004dfe:	2001      	movs	r0, #1
 8004e00:	e7a0      	b.n	8004d44 <_svfiprintf_r+0xcc>
 8004e02:	2301      	movs	r3, #1
 8004e04:	425b      	negs	r3, r3
 8004e06:	e7c7      	b.n	8004d98 <_svfiprintf_r+0x120>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	0014      	movs	r4, r2
 8004e0c:	200a      	movs	r0, #10
 8004e0e:	001a      	movs	r2, r3
 8004e10:	606b      	str	r3, [r5, #4]
 8004e12:	7821      	ldrb	r1, [r4, #0]
 8004e14:	3930      	subs	r1, #48	; 0x30
 8004e16:	2909      	cmp	r1, #9
 8004e18:	d903      	bls.n	8004e22 <_svfiprintf_r+0x1aa>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0bd      	beq.n	8004d9a <_svfiprintf_r+0x122>
 8004e1e:	9207      	str	r2, [sp, #28]
 8004e20:	e7bb      	b.n	8004d9a <_svfiprintf_r+0x122>
 8004e22:	4342      	muls	r2, r0
 8004e24:	3401      	adds	r4, #1
 8004e26:	1852      	adds	r2, r2, r1
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e7f2      	b.n	8004e12 <_svfiprintf_r+0x19a>
 8004e2c:	3307      	adds	r3, #7
 8004e2e:	e7d5      	b.n	8004ddc <_svfiprintf_r+0x164>
 8004e30:	ab05      	add	r3, sp, #20
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	003a      	movs	r2, r7
 8004e36:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <_svfiprintf_r+0x204>)
 8004e38:	0029      	movs	r1, r5
 8004e3a:	9802      	ldr	r0, [sp, #8]
 8004e3c:	e000      	b.n	8004e40 <_svfiprintf_r+0x1c8>
 8004e3e:	bf00      	nop
 8004e40:	9003      	str	r0, [sp, #12]
 8004e42:	9b03      	ldr	r3, [sp, #12]
 8004e44:	3301      	adds	r3, #1
 8004e46:	d1cc      	bne.n	8004de2 <_svfiprintf_r+0x16a>
 8004e48:	89bb      	ldrh	r3, [r7, #12]
 8004e4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004e4c:	065b      	lsls	r3, r3, #25
 8004e4e:	d400      	bmi.n	8004e52 <_svfiprintf_r+0x1da>
 8004e50:	e729      	b.n	8004ca6 <_svfiprintf_r+0x2e>
 8004e52:	2001      	movs	r0, #1
 8004e54:	4240      	negs	r0, r0
 8004e56:	e726      	b.n	8004ca6 <_svfiprintf_r+0x2e>
 8004e58:	ab05      	add	r3, sp, #20
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	003a      	movs	r2, r7
 8004e5e:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <_svfiprintf_r+0x204>)
 8004e60:	0029      	movs	r1, r5
 8004e62:	9802      	ldr	r0, [sp, #8]
 8004e64:	f000 f87a 	bl	8004f5c <_printf_i>
 8004e68:	e7ea      	b.n	8004e40 <_svfiprintf_r+0x1c8>
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	080053ee 	.word	0x080053ee
 8004e70:	080053f4 	.word	0x080053f4
 8004e74:	080053f8 	.word	0x080053f8
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	08004bb5 	.word	0x08004bb5

08004e80 <_printf_common>:
 8004e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e82:	0015      	movs	r5, r2
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	688a      	ldr	r2, [r1, #8]
 8004e88:	690b      	ldr	r3, [r1, #16]
 8004e8a:	9000      	str	r0, [sp, #0]
 8004e8c:	000c      	movs	r4, r1
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	da00      	bge.n	8004e94 <_printf_common+0x14>
 8004e92:	0013      	movs	r3, r2
 8004e94:	0022      	movs	r2, r4
 8004e96:	602b      	str	r3, [r5, #0]
 8004e98:	3243      	adds	r2, #67	; 0x43
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	2a00      	cmp	r2, #0
 8004e9e:	d001      	beq.n	8004ea4 <_printf_common+0x24>
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	069b      	lsls	r3, r3, #26
 8004ea8:	d502      	bpl.n	8004eb0 <_printf_common+0x30>
 8004eaa:	682b      	ldr	r3, [r5, #0]
 8004eac:	3302      	adds	r3, #2
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	2706      	movs	r7, #6
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	401f      	ands	r7, r3
 8004eb6:	d027      	beq.n	8004f08 <_printf_common+0x88>
 8004eb8:	0023      	movs	r3, r4
 8004eba:	3343      	adds	r3, #67	; 0x43
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	1e5a      	subs	r2, r3, #1
 8004ec0:	4193      	sbcs	r3, r2
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	0692      	lsls	r2, r2, #26
 8004ec6:	d430      	bmi.n	8004f2a <_printf_common+0xaa>
 8004ec8:	0022      	movs	r2, r4
 8004eca:	9901      	ldr	r1, [sp, #4]
 8004ecc:	3243      	adds	r2, #67	; 0x43
 8004ece:	9800      	ldr	r0, [sp, #0]
 8004ed0:	9e08      	ldr	r6, [sp, #32]
 8004ed2:	47b0      	blx	r6
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d025      	beq.n	8004f24 <_printf_common+0xa4>
 8004ed8:	2306      	movs	r3, #6
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	682a      	ldr	r2, [r5, #0]
 8004ede:	68e1      	ldr	r1, [r4, #12]
 8004ee0:	4003      	ands	r3, r0
 8004ee2:	2500      	movs	r5, #0
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d103      	bne.n	8004ef0 <_printf_common+0x70>
 8004ee8:	1a8d      	subs	r5, r1, r2
 8004eea:	43eb      	mvns	r3, r5
 8004eec:	17db      	asrs	r3, r3, #31
 8004eee:	401d      	ands	r5, r3
 8004ef0:	68a3      	ldr	r3, [r4, #8]
 8004ef2:	6922      	ldr	r2, [r4, #16]
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	dd01      	ble.n	8004efc <_printf_common+0x7c>
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	18ed      	adds	r5, r5, r3
 8004efc:	2700      	movs	r7, #0
 8004efe:	42bd      	cmp	r5, r7
 8004f00:	d120      	bne.n	8004f44 <_printf_common+0xc4>
 8004f02:	2000      	movs	r0, #0
 8004f04:	e010      	b.n	8004f28 <_printf_common+0xa8>
 8004f06:	3701      	adds	r7, #1
 8004f08:	68e3      	ldr	r3, [r4, #12]
 8004f0a:	682a      	ldr	r2, [r5, #0]
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	429f      	cmp	r7, r3
 8004f10:	dad2      	bge.n	8004eb8 <_printf_common+0x38>
 8004f12:	0022      	movs	r2, r4
 8004f14:	2301      	movs	r3, #1
 8004f16:	3219      	adds	r2, #25
 8004f18:	9901      	ldr	r1, [sp, #4]
 8004f1a:	9800      	ldr	r0, [sp, #0]
 8004f1c:	9e08      	ldr	r6, [sp, #32]
 8004f1e:	47b0      	blx	r6
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d1f0      	bne.n	8004f06 <_printf_common+0x86>
 8004f24:	2001      	movs	r0, #1
 8004f26:	4240      	negs	r0, r0
 8004f28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f2a:	2030      	movs	r0, #48	; 0x30
 8004f2c:	18e1      	adds	r1, r4, r3
 8004f2e:	3143      	adds	r1, #67	; 0x43
 8004f30:	7008      	strb	r0, [r1, #0]
 8004f32:	0021      	movs	r1, r4
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	3145      	adds	r1, #69	; 0x45
 8004f38:	7809      	ldrb	r1, [r1, #0]
 8004f3a:	18a2      	adds	r2, r4, r2
 8004f3c:	3243      	adds	r2, #67	; 0x43
 8004f3e:	3302      	adds	r3, #2
 8004f40:	7011      	strb	r1, [r2, #0]
 8004f42:	e7c1      	b.n	8004ec8 <_printf_common+0x48>
 8004f44:	0022      	movs	r2, r4
 8004f46:	2301      	movs	r3, #1
 8004f48:	321a      	adds	r2, #26
 8004f4a:	9901      	ldr	r1, [sp, #4]
 8004f4c:	9800      	ldr	r0, [sp, #0]
 8004f4e:	9e08      	ldr	r6, [sp, #32]
 8004f50:	47b0      	blx	r6
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	d0e6      	beq.n	8004f24 <_printf_common+0xa4>
 8004f56:	3701      	adds	r7, #1
 8004f58:	e7d1      	b.n	8004efe <_printf_common+0x7e>
	...

08004f5c <_printf_i>:
 8004f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5e:	b08b      	sub	sp, #44	; 0x2c
 8004f60:	9206      	str	r2, [sp, #24]
 8004f62:	000a      	movs	r2, r1
 8004f64:	3243      	adds	r2, #67	; 0x43
 8004f66:	9307      	str	r3, [sp, #28]
 8004f68:	9005      	str	r0, [sp, #20]
 8004f6a:	9204      	str	r2, [sp, #16]
 8004f6c:	7e0a      	ldrb	r2, [r1, #24]
 8004f6e:	000c      	movs	r4, r1
 8004f70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f72:	2a6e      	cmp	r2, #110	; 0x6e
 8004f74:	d100      	bne.n	8004f78 <_printf_i+0x1c>
 8004f76:	e08f      	b.n	8005098 <_printf_i+0x13c>
 8004f78:	d817      	bhi.n	8004faa <_printf_i+0x4e>
 8004f7a:	2a63      	cmp	r2, #99	; 0x63
 8004f7c:	d02c      	beq.n	8004fd8 <_printf_i+0x7c>
 8004f7e:	d808      	bhi.n	8004f92 <_printf_i+0x36>
 8004f80:	2a00      	cmp	r2, #0
 8004f82:	d100      	bne.n	8004f86 <_printf_i+0x2a>
 8004f84:	e099      	b.n	80050ba <_printf_i+0x15e>
 8004f86:	2a58      	cmp	r2, #88	; 0x58
 8004f88:	d054      	beq.n	8005034 <_printf_i+0xd8>
 8004f8a:	0026      	movs	r6, r4
 8004f8c:	3642      	adds	r6, #66	; 0x42
 8004f8e:	7032      	strb	r2, [r6, #0]
 8004f90:	e029      	b.n	8004fe6 <_printf_i+0x8a>
 8004f92:	2a64      	cmp	r2, #100	; 0x64
 8004f94:	d001      	beq.n	8004f9a <_printf_i+0x3e>
 8004f96:	2a69      	cmp	r2, #105	; 0x69
 8004f98:	d1f7      	bne.n	8004f8a <_printf_i+0x2e>
 8004f9a:	6821      	ldr	r1, [r4, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	0608      	lsls	r0, r1, #24
 8004fa0:	d523      	bpl.n	8004fea <_printf_i+0x8e>
 8004fa2:	1d11      	adds	r1, r2, #4
 8004fa4:	6019      	str	r1, [r3, #0]
 8004fa6:	6815      	ldr	r5, [r2, #0]
 8004fa8:	e025      	b.n	8004ff6 <_printf_i+0x9a>
 8004faa:	2a73      	cmp	r2, #115	; 0x73
 8004fac:	d100      	bne.n	8004fb0 <_printf_i+0x54>
 8004fae:	e088      	b.n	80050c2 <_printf_i+0x166>
 8004fb0:	d808      	bhi.n	8004fc4 <_printf_i+0x68>
 8004fb2:	2a6f      	cmp	r2, #111	; 0x6f
 8004fb4:	d029      	beq.n	800500a <_printf_i+0xae>
 8004fb6:	2a70      	cmp	r2, #112	; 0x70
 8004fb8:	d1e7      	bne.n	8004f8a <_printf_i+0x2e>
 8004fba:	2220      	movs	r2, #32
 8004fbc:	6809      	ldr	r1, [r1, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	6022      	str	r2, [r4, #0]
 8004fc2:	e003      	b.n	8004fcc <_printf_i+0x70>
 8004fc4:	2a75      	cmp	r2, #117	; 0x75
 8004fc6:	d020      	beq.n	800500a <_printf_i+0xae>
 8004fc8:	2a78      	cmp	r2, #120	; 0x78
 8004fca:	d1de      	bne.n	8004f8a <_printf_i+0x2e>
 8004fcc:	0022      	movs	r2, r4
 8004fce:	2178      	movs	r1, #120	; 0x78
 8004fd0:	3245      	adds	r2, #69	; 0x45
 8004fd2:	7011      	strb	r1, [r2, #0]
 8004fd4:	4a6c      	ldr	r2, [pc, #432]	; (8005188 <_printf_i+0x22c>)
 8004fd6:	e030      	b.n	800503a <_printf_i+0xde>
 8004fd8:	000e      	movs	r6, r1
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	3642      	adds	r6, #66	; 0x42
 8004fde:	1d11      	adds	r1, r2, #4
 8004fe0:	6019      	str	r1, [r3, #0]
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	7033      	strb	r3, [r6, #0]
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e079      	b.n	80050de <_printf_i+0x182>
 8004fea:	0649      	lsls	r1, r1, #25
 8004fec:	d5d9      	bpl.n	8004fa2 <_printf_i+0x46>
 8004fee:	1d11      	adds	r1, r2, #4
 8004ff0:	6019      	str	r1, [r3, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	5ed5      	ldrsh	r5, [r2, r3]
 8004ff6:	2d00      	cmp	r5, #0
 8004ff8:	da03      	bge.n	8005002 <_printf_i+0xa6>
 8004ffa:	232d      	movs	r3, #45	; 0x2d
 8004ffc:	9a04      	ldr	r2, [sp, #16]
 8004ffe:	426d      	negs	r5, r5
 8005000:	7013      	strb	r3, [r2, #0]
 8005002:	4b62      	ldr	r3, [pc, #392]	; (800518c <_printf_i+0x230>)
 8005004:	270a      	movs	r7, #10
 8005006:	9303      	str	r3, [sp, #12]
 8005008:	e02f      	b.n	800506a <_printf_i+0x10e>
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	0605      	lsls	r5, r0, #24
 8005010:	d503      	bpl.n	800501a <_printf_i+0xbe>
 8005012:	1d08      	adds	r0, r1, #4
 8005014:	6018      	str	r0, [r3, #0]
 8005016:	680d      	ldr	r5, [r1, #0]
 8005018:	e005      	b.n	8005026 <_printf_i+0xca>
 800501a:	0640      	lsls	r0, r0, #25
 800501c:	d5f9      	bpl.n	8005012 <_printf_i+0xb6>
 800501e:	680d      	ldr	r5, [r1, #0]
 8005020:	1d08      	adds	r0, r1, #4
 8005022:	6018      	str	r0, [r3, #0]
 8005024:	b2ad      	uxth	r5, r5
 8005026:	4b59      	ldr	r3, [pc, #356]	; (800518c <_printf_i+0x230>)
 8005028:	2708      	movs	r7, #8
 800502a:	9303      	str	r3, [sp, #12]
 800502c:	2a6f      	cmp	r2, #111	; 0x6f
 800502e:	d018      	beq.n	8005062 <_printf_i+0x106>
 8005030:	270a      	movs	r7, #10
 8005032:	e016      	b.n	8005062 <_printf_i+0x106>
 8005034:	3145      	adds	r1, #69	; 0x45
 8005036:	700a      	strb	r2, [r1, #0]
 8005038:	4a54      	ldr	r2, [pc, #336]	; (800518c <_printf_i+0x230>)
 800503a:	9203      	str	r2, [sp, #12]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	6821      	ldr	r1, [r4, #0]
 8005040:	1d10      	adds	r0, r2, #4
 8005042:	6018      	str	r0, [r3, #0]
 8005044:	6815      	ldr	r5, [r2, #0]
 8005046:	0608      	lsls	r0, r1, #24
 8005048:	d522      	bpl.n	8005090 <_printf_i+0x134>
 800504a:	07cb      	lsls	r3, r1, #31
 800504c:	d502      	bpl.n	8005054 <_printf_i+0xf8>
 800504e:	2320      	movs	r3, #32
 8005050:	4319      	orrs	r1, r3
 8005052:	6021      	str	r1, [r4, #0]
 8005054:	2710      	movs	r7, #16
 8005056:	2d00      	cmp	r5, #0
 8005058:	d103      	bne.n	8005062 <_printf_i+0x106>
 800505a:	2320      	movs	r3, #32
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	439a      	bics	r2, r3
 8005060:	6022      	str	r2, [r4, #0]
 8005062:	0023      	movs	r3, r4
 8005064:	2200      	movs	r2, #0
 8005066:	3343      	adds	r3, #67	; 0x43
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	6863      	ldr	r3, [r4, #4]
 800506c:	60a3      	str	r3, [r4, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	db5c      	blt.n	800512c <_printf_i+0x1d0>
 8005072:	2204      	movs	r2, #4
 8005074:	6821      	ldr	r1, [r4, #0]
 8005076:	4391      	bics	r1, r2
 8005078:	6021      	str	r1, [r4, #0]
 800507a:	2d00      	cmp	r5, #0
 800507c:	d158      	bne.n	8005130 <_printf_i+0x1d4>
 800507e:	9e04      	ldr	r6, [sp, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d064      	beq.n	800514e <_printf_i+0x1f2>
 8005084:	0026      	movs	r6, r4
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	3642      	adds	r6, #66	; 0x42
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	7033      	strb	r3, [r6, #0]
 800508e:	e05e      	b.n	800514e <_printf_i+0x1f2>
 8005090:	0648      	lsls	r0, r1, #25
 8005092:	d5da      	bpl.n	800504a <_printf_i+0xee>
 8005094:	b2ad      	uxth	r5, r5
 8005096:	e7d8      	b.n	800504a <_printf_i+0xee>
 8005098:	6809      	ldr	r1, [r1, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	0608      	lsls	r0, r1, #24
 800509e:	d505      	bpl.n	80050ac <_printf_i+0x150>
 80050a0:	1d11      	adds	r1, r2, #4
 80050a2:	6019      	str	r1, [r3, #0]
 80050a4:	6813      	ldr	r3, [r2, #0]
 80050a6:	6962      	ldr	r2, [r4, #20]
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e006      	b.n	80050ba <_printf_i+0x15e>
 80050ac:	0649      	lsls	r1, r1, #25
 80050ae:	d5f7      	bpl.n	80050a0 <_printf_i+0x144>
 80050b0:	1d11      	adds	r1, r2, #4
 80050b2:	6019      	str	r1, [r3, #0]
 80050b4:	6813      	ldr	r3, [r2, #0]
 80050b6:	8aa2      	ldrh	r2, [r4, #20]
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	2300      	movs	r3, #0
 80050bc:	9e04      	ldr	r6, [sp, #16]
 80050be:	6123      	str	r3, [r4, #16]
 80050c0:	e054      	b.n	800516c <_printf_i+0x210>
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	1d11      	adds	r1, r2, #4
 80050c6:	6019      	str	r1, [r3, #0]
 80050c8:	6816      	ldr	r6, [r2, #0]
 80050ca:	2100      	movs	r1, #0
 80050cc:	6862      	ldr	r2, [r4, #4]
 80050ce:	0030      	movs	r0, r6
 80050d0:	f000 f86a 	bl	80051a8 <memchr>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d001      	beq.n	80050dc <_printf_i+0x180>
 80050d8:	1b80      	subs	r0, r0, r6
 80050da:	6060      	str	r0, [r4, #4]
 80050dc:	6863      	ldr	r3, [r4, #4]
 80050de:	6123      	str	r3, [r4, #16]
 80050e0:	2300      	movs	r3, #0
 80050e2:	9a04      	ldr	r2, [sp, #16]
 80050e4:	7013      	strb	r3, [r2, #0]
 80050e6:	e041      	b.n	800516c <_printf_i+0x210>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	0032      	movs	r2, r6
 80050ec:	9906      	ldr	r1, [sp, #24]
 80050ee:	9805      	ldr	r0, [sp, #20]
 80050f0:	9d07      	ldr	r5, [sp, #28]
 80050f2:	47a8      	blx	r5
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d043      	beq.n	8005180 <_printf_i+0x224>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	2500      	movs	r5, #0
 80050fc:	079b      	lsls	r3, r3, #30
 80050fe:	d40f      	bmi.n	8005120 <_printf_i+0x1c4>
 8005100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005102:	68e0      	ldr	r0, [r4, #12]
 8005104:	4298      	cmp	r0, r3
 8005106:	da3d      	bge.n	8005184 <_printf_i+0x228>
 8005108:	0018      	movs	r0, r3
 800510a:	e03b      	b.n	8005184 <_printf_i+0x228>
 800510c:	0022      	movs	r2, r4
 800510e:	2301      	movs	r3, #1
 8005110:	3219      	adds	r2, #25
 8005112:	9906      	ldr	r1, [sp, #24]
 8005114:	9805      	ldr	r0, [sp, #20]
 8005116:	9e07      	ldr	r6, [sp, #28]
 8005118:	47b0      	blx	r6
 800511a:	1c43      	adds	r3, r0, #1
 800511c:	d030      	beq.n	8005180 <_printf_i+0x224>
 800511e:	3501      	adds	r5, #1
 8005120:	68e3      	ldr	r3, [r4, #12]
 8005122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	429d      	cmp	r5, r3
 8005128:	dbf0      	blt.n	800510c <_printf_i+0x1b0>
 800512a:	e7e9      	b.n	8005100 <_printf_i+0x1a4>
 800512c:	2d00      	cmp	r5, #0
 800512e:	d0a9      	beq.n	8005084 <_printf_i+0x128>
 8005130:	9e04      	ldr	r6, [sp, #16]
 8005132:	0028      	movs	r0, r5
 8005134:	0039      	movs	r1, r7
 8005136:	f7fb f87f 	bl	8000238 <__aeabi_uidivmod>
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	3e01      	subs	r6, #1
 800513e:	5c5b      	ldrb	r3, [r3, r1]
 8005140:	0028      	movs	r0, r5
 8005142:	7033      	strb	r3, [r6, #0]
 8005144:	0039      	movs	r1, r7
 8005146:	f7fa fff1 	bl	800012c <__udivsi3>
 800514a:	1e05      	subs	r5, r0, #0
 800514c:	d1f1      	bne.n	8005132 <_printf_i+0x1d6>
 800514e:	2f08      	cmp	r7, #8
 8005150:	d109      	bne.n	8005166 <_printf_i+0x20a>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	07db      	lsls	r3, r3, #31
 8005156:	d506      	bpl.n	8005166 <_printf_i+0x20a>
 8005158:	6863      	ldr	r3, [r4, #4]
 800515a:	6922      	ldr	r2, [r4, #16]
 800515c:	4293      	cmp	r3, r2
 800515e:	dc02      	bgt.n	8005166 <_printf_i+0x20a>
 8005160:	2330      	movs	r3, #48	; 0x30
 8005162:	3e01      	subs	r6, #1
 8005164:	7033      	strb	r3, [r6, #0]
 8005166:	9b04      	ldr	r3, [sp, #16]
 8005168:	1b9b      	subs	r3, r3, r6
 800516a:	6123      	str	r3, [r4, #16]
 800516c:	9b07      	ldr	r3, [sp, #28]
 800516e:	aa09      	add	r2, sp, #36	; 0x24
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	0021      	movs	r1, r4
 8005174:	9b06      	ldr	r3, [sp, #24]
 8005176:	9805      	ldr	r0, [sp, #20]
 8005178:	f7ff fe82 	bl	8004e80 <_printf_common>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d1b3      	bne.n	80050e8 <_printf_i+0x18c>
 8005180:	2001      	movs	r0, #1
 8005182:	4240      	negs	r0, r0
 8005184:	b00b      	add	sp, #44	; 0x2c
 8005186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005188:	08005410 	.word	0x08005410
 800518c:	080053ff 	.word	0x080053ff

08005190 <__ascii_wctomb>:
 8005190:	1e0b      	subs	r3, r1, #0
 8005192:	d004      	beq.n	800519e <__ascii_wctomb+0xe>
 8005194:	2aff      	cmp	r2, #255	; 0xff
 8005196:	d904      	bls.n	80051a2 <__ascii_wctomb+0x12>
 8005198:	238a      	movs	r3, #138	; 0x8a
 800519a:	6003      	str	r3, [r0, #0]
 800519c:	3b8b      	subs	r3, #139	; 0x8b
 800519e:	0018      	movs	r0, r3
 80051a0:	4770      	bx	lr
 80051a2:	700a      	strb	r2, [r1, #0]
 80051a4:	2301      	movs	r3, #1
 80051a6:	e7fa      	b.n	800519e <__ascii_wctomb+0xe>

080051a8 <memchr>:
 80051a8:	b2c9      	uxtb	r1, r1
 80051aa:	1882      	adds	r2, r0, r2
 80051ac:	4290      	cmp	r0, r2
 80051ae:	d101      	bne.n	80051b4 <memchr+0xc>
 80051b0:	2000      	movs	r0, #0
 80051b2:	4770      	bx	lr
 80051b4:	7803      	ldrb	r3, [r0, #0]
 80051b6:	428b      	cmp	r3, r1
 80051b8:	d0fb      	beq.n	80051b2 <memchr+0xa>
 80051ba:	3001      	adds	r0, #1
 80051bc:	e7f6      	b.n	80051ac <memchr+0x4>

080051be <memmove>:
 80051be:	b510      	push	{r4, lr}
 80051c0:	4288      	cmp	r0, r1
 80051c2:	d902      	bls.n	80051ca <memmove+0xc>
 80051c4:	188b      	adds	r3, r1, r2
 80051c6:	4298      	cmp	r0, r3
 80051c8:	d308      	bcc.n	80051dc <memmove+0x1e>
 80051ca:	2300      	movs	r3, #0
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d007      	beq.n	80051e0 <memmove+0x22>
 80051d0:	5ccc      	ldrb	r4, [r1, r3]
 80051d2:	54c4      	strb	r4, [r0, r3]
 80051d4:	3301      	adds	r3, #1
 80051d6:	e7f9      	b.n	80051cc <memmove+0xe>
 80051d8:	5c8b      	ldrb	r3, [r1, r2]
 80051da:	5483      	strb	r3, [r0, r2]
 80051dc:	3a01      	subs	r2, #1
 80051de:	d2fb      	bcs.n	80051d8 <memmove+0x1a>
 80051e0:	bd10      	pop	{r4, pc}

080051e2 <_realloc_r>:
 80051e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e4:	0007      	movs	r7, r0
 80051e6:	000d      	movs	r5, r1
 80051e8:	0016      	movs	r6, r2
 80051ea:	2900      	cmp	r1, #0
 80051ec:	d105      	bne.n	80051fa <_realloc_r+0x18>
 80051ee:	0011      	movs	r1, r2
 80051f0:	f7ff fb9c 	bl	800492c <_malloc_r>
 80051f4:	0004      	movs	r4, r0
 80051f6:	0020      	movs	r0, r4
 80051f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051fa:	2a00      	cmp	r2, #0
 80051fc:	d103      	bne.n	8005206 <_realloc_r+0x24>
 80051fe:	f7ff fb4b 	bl	8004898 <_free_r>
 8005202:	0034      	movs	r4, r6
 8005204:	e7f7      	b.n	80051f6 <_realloc_r+0x14>
 8005206:	f000 f812 	bl	800522e <_malloc_usable_size_r>
 800520a:	002c      	movs	r4, r5
 800520c:	4286      	cmp	r6, r0
 800520e:	d9f2      	bls.n	80051f6 <_realloc_r+0x14>
 8005210:	0031      	movs	r1, r6
 8005212:	0038      	movs	r0, r7
 8005214:	f7ff fb8a 	bl	800492c <_malloc_r>
 8005218:	1e04      	subs	r4, r0, #0
 800521a:	d0ec      	beq.n	80051f6 <_realloc_r+0x14>
 800521c:	0029      	movs	r1, r5
 800521e:	0032      	movs	r2, r6
 8005220:	f7ff fb28 	bl	8004874 <memcpy>
 8005224:	0029      	movs	r1, r5
 8005226:	0038      	movs	r0, r7
 8005228:	f7ff fb36 	bl	8004898 <_free_r>
 800522c:	e7e3      	b.n	80051f6 <_realloc_r+0x14>

0800522e <_malloc_usable_size_r>:
 800522e:	1f0b      	subs	r3, r1, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1f18      	subs	r0, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	da01      	bge.n	800523c <_malloc_usable_size_r+0xe>
 8005238:	580b      	ldr	r3, [r1, r0]
 800523a:	18c0      	adds	r0, r0, r3
 800523c:	4770      	bx	lr
	...

08005240 <_sbrk>:
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <_sbrk+0x18>)
 8005242:	0002      	movs	r2, r0
 8005244:	6819      	ldr	r1, [r3, #0]
 8005246:	2900      	cmp	r1, #0
 8005248:	d101      	bne.n	800524e <_sbrk+0xe>
 800524a:	4904      	ldr	r1, [pc, #16]	; (800525c <_sbrk+0x1c>)
 800524c:	6019      	str	r1, [r3, #0]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	1882      	adds	r2, r0, r2
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	4770      	bx	lr
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	200002c8 	.word	0x200002c8
 800525c:	200004d8 	.word	0x200004d8

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
