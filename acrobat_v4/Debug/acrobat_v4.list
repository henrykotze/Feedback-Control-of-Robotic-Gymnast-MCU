
C:\Users\Henry\Desktop\Skripsie\Feedback-Control-of-Robotic-Gymnast-MCU\acrobat_v4\Debug\acrobat_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000386c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  20000000  08003ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002b0  200001f4  08003d94  000201f4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004a4  08003d94  000204a4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c902  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000367d  00000000  00000000  0003cb1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007faf  00000000  00000000  0004019b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ac8  00000000  00000000  00048150  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ef0  00000000  00000000  00048c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007a57  00000000  00000000  00049b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0004b5d8  00000000  00000000  0005155f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009cb37  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000251c  00000000  00000000  0009cbb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000c57b  00000000  00000000  0009f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003914 	.word	0x08003914

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	08003914 	.word	0x08003914

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_fmul>:
 8000244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000246:	4657      	mov	r7, sl
 8000248:	464e      	mov	r6, r9
 800024a:	4645      	mov	r5, r8
 800024c:	46de      	mov	lr, fp
 800024e:	b5e0      	push	{r5, r6, r7, lr}
 8000250:	0247      	lsls	r7, r0, #9
 8000252:	0046      	lsls	r6, r0, #1
 8000254:	4688      	mov	r8, r1
 8000256:	0a7f      	lsrs	r7, r7, #9
 8000258:	0e36      	lsrs	r6, r6, #24
 800025a:	0fc4      	lsrs	r4, r0, #31
 800025c:	2e00      	cmp	r6, #0
 800025e:	d047      	beq.n	80002f0 <__aeabi_fmul+0xac>
 8000260:	2eff      	cmp	r6, #255	; 0xff
 8000262:	d024      	beq.n	80002ae <__aeabi_fmul+0x6a>
 8000264:	00fb      	lsls	r3, r7, #3
 8000266:	2780      	movs	r7, #128	; 0x80
 8000268:	04ff      	lsls	r7, r7, #19
 800026a:	431f      	orrs	r7, r3
 800026c:	2300      	movs	r3, #0
 800026e:	4699      	mov	r9, r3
 8000270:	469a      	mov	sl, r3
 8000272:	3e7f      	subs	r6, #127	; 0x7f
 8000274:	4643      	mov	r3, r8
 8000276:	025d      	lsls	r5, r3, #9
 8000278:	0058      	lsls	r0, r3, #1
 800027a:	0fdb      	lsrs	r3, r3, #31
 800027c:	0a6d      	lsrs	r5, r5, #9
 800027e:	0e00      	lsrs	r0, r0, #24
 8000280:	4698      	mov	r8, r3
 8000282:	d043      	beq.n	800030c <__aeabi_fmul+0xc8>
 8000284:	28ff      	cmp	r0, #255	; 0xff
 8000286:	d03b      	beq.n	8000300 <__aeabi_fmul+0xbc>
 8000288:	00eb      	lsls	r3, r5, #3
 800028a:	2580      	movs	r5, #128	; 0x80
 800028c:	2200      	movs	r2, #0
 800028e:	04ed      	lsls	r5, r5, #19
 8000290:	431d      	orrs	r5, r3
 8000292:	387f      	subs	r0, #127	; 0x7f
 8000294:	1836      	adds	r6, r6, r0
 8000296:	1c73      	adds	r3, r6, #1
 8000298:	4641      	mov	r1, r8
 800029a:	469b      	mov	fp, r3
 800029c:	464b      	mov	r3, r9
 800029e:	4061      	eors	r1, r4
 80002a0:	4313      	orrs	r3, r2
 80002a2:	2b0f      	cmp	r3, #15
 80002a4:	d864      	bhi.n	8000370 <__aeabi_fmul+0x12c>
 80002a6:	4875      	ldr	r0, [pc, #468]	; (800047c <__aeabi_fmul+0x238>)
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	58c3      	ldr	r3, [r0, r3]
 80002ac:	469f      	mov	pc, r3
 80002ae:	2f00      	cmp	r7, #0
 80002b0:	d142      	bne.n	8000338 <__aeabi_fmul+0xf4>
 80002b2:	2308      	movs	r3, #8
 80002b4:	4699      	mov	r9, r3
 80002b6:	3b06      	subs	r3, #6
 80002b8:	26ff      	movs	r6, #255	; 0xff
 80002ba:	469a      	mov	sl, r3
 80002bc:	e7da      	b.n	8000274 <__aeabi_fmul+0x30>
 80002be:	4641      	mov	r1, r8
 80002c0:	2a02      	cmp	r2, #2
 80002c2:	d028      	beq.n	8000316 <__aeabi_fmul+0xd2>
 80002c4:	2a03      	cmp	r2, #3
 80002c6:	d100      	bne.n	80002ca <__aeabi_fmul+0x86>
 80002c8:	e0ce      	b.n	8000468 <__aeabi_fmul+0x224>
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	d000      	beq.n	80002d0 <__aeabi_fmul+0x8c>
 80002ce:	e0ac      	b.n	800042a <__aeabi_fmul+0x1e6>
 80002d0:	4011      	ands	r1, r2
 80002d2:	2000      	movs	r0, #0
 80002d4:	2200      	movs	r2, #0
 80002d6:	b2cc      	uxtb	r4, r1
 80002d8:	0240      	lsls	r0, r0, #9
 80002da:	05d2      	lsls	r2, r2, #23
 80002dc:	0a40      	lsrs	r0, r0, #9
 80002de:	07e4      	lsls	r4, r4, #31
 80002e0:	4310      	orrs	r0, r2
 80002e2:	4320      	orrs	r0, r4
 80002e4:	bc3c      	pop	{r2, r3, r4, r5}
 80002e6:	4690      	mov	r8, r2
 80002e8:	4699      	mov	r9, r3
 80002ea:	46a2      	mov	sl, r4
 80002ec:	46ab      	mov	fp, r5
 80002ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002f0:	2f00      	cmp	r7, #0
 80002f2:	d115      	bne.n	8000320 <__aeabi_fmul+0xdc>
 80002f4:	2304      	movs	r3, #4
 80002f6:	4699      	mov	r9, r3
 80002f8:	3b03      	subs	r3, #3
 80002fa:	2600      	movs	r6, #0
 80002fc:	469a      	mov	sl, r3
 80002fe:	e7b9      	b.n	8000274 <__aeabi_fmul+0x30>
 8000300:	20ff      	movs	r0, #255	; 0xff
 8000302:	2202      	movs	r2, #2
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0c5      	beq.n	8000294 <__aeabi_fmul+0x50>
 8000308:	2203      	movs	r2, #3
 800030a:	e7c3      	b.n	8000294 <__aeabi_fmul+0x50>
 800030c:	2d00      	cmp	r5, #0
 800030e:	d119      	bne.n	8000344 <__aeabi_fmul+0x100>
 8000310:	2000      	movs	r0, #0
 8000312:	2201      	movs	r2, #1
 8000314:	e7be      	b.n	8000294 <__aeabi_fmul+0x50>
 8000316:	2401      	movs	r4, #1
 8000318:	22ff      	movs	r2, #255	; 0xff
 800031a:	400c      	ands	r4, r1
 800031c:	2000      	movs	r0, #0
 800031e:	e7db      	b.n	80002d8 <__aeabi_fmul+0x94>
 8000320:	0038      	movs	r0, r7
 8000322:	f000 f8ff 	bl	8000524 <__clzsi2>
 8000326:	2676      	movs	r6, #118	; 0x76
 8000328:	1f43      	subs	r3, r0, #5
 800032a:	409f      	lsls	r7, r3
 800032c:	2300      	movs	r3, #0
 800032e:	4276      	negs	r6, r6
 8000330:	1a36      	subs	r6, r6, r0
 8000332:	4699      	mov	r9, r3
 8000334:	469a      	mov	sl, r3
 8000336:	e79d      	b.n	8000274 <__aeabi_fmul+0x30>
 8000338:	230c      	movs	r3, #12
 800033a:	4699      	mov	r9, r3
 800033c:	3b09      	subs	r3, #9
 800033e:	26ff      	movs	r6, #255	; 0xff
 8000340:	469a      	mov	sl, r3
 8000342:	e797      	b.n	8000274 <__aeabi_fmul+0x30>
 8000344:	0028      	movs	r0, r5
 8000346:	f000 f8ed 	bl	8000524 <__clzsi2>
 800034a:	1f43      	subs	r3, r0, #5
 800034c:	409d      	lsls	r5, r3
 800034e:	2376      	movs	r3, #118	; 0x76
 8000350:	425b      	negs	r3, r3
 8000352:	1a18      	subs	r0, r3, r0
 8000354:	2200      	movs	r2, #0
 8000356:	e79d      	b.n	8000294 <__aeabi_fmul+0x50>
 8000358:	2080      	movs	r0, #128	; 0x80
 800035a:	2400      	movs	r4, #0
 800035c:	03c0      	lsls	r0, r0, #15
 800035e:	22ff      	movs	r2, #255	; 0xff
 8000360:	e7ba      	b.n	80002d8 <__aeabi_fmul+0x94>
 8000362:	003d      	movs	r5, r7
 8000364:	4652      	mov	r2, sl
 8000366:	e7ab      	b.n	80002c0 <__aeabi_fmul+0x7c>
 8000368:	003d      	movs	r5, r7
 800036a:	0021      	movs	r1, r4
 800036c:	4652      	mov	r2, sl
 800036e:	e7a7      	b.n	80002c0 <__aeabi_fmul+0x7c>
 8000370:	0c3b      	lsrs	r3, r7, #16
 8000372:	469c      	mov	ip, r3
 8000374:	042a      	lsls	r2, r5, #16
 8000376:	0c12      	lsrs	r2, r2, #16
 8000378:	0c2b      	lsrs	r3, r5, #16
 800037a:	0014      	movs	r4, r2
 800037c:	4660      	mov	r0, ip
 800037e:	4665      	mov	r5, ip
 8000380:	043f      	lsls	r7, r7, #16
 8000382:	0c3f      	lsrs	r7, r7, #16
 8000384:	437c      	muls	r4, r7
 8000386:	4342      	muls	r2, r0
 8000388:	435d      	muls	r5, r3
 800038a:	437b      	muls	r3, r7
 800038c:	0c27      	lsrs	r7, r4, #16
 800038e:	189b      	adds	r3, r3, r2
 8000390:	18ff      	adds	r7, r7, r3
 8000392:	42ba      	cmp	r2, r7
 8000394:	d903      	bls.n	800039e <__aeabi_fmul+0x15a>
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	025b      	lsls	r3, r3, #9
 800039a:	469c      	mov	ip, r3
 800039c:	4465      	add	r5, ip
 800039e:	0424      	lsls	r4, r4, #16
 80003a0:	043a      	lsls	r2, r7, #16
 80003a2:	0c24      	lsrs	r4, r4, #16
 80003a4:	1912      	adds	r2, r2, r4
 80003a6:	0193      	lsls	r3, r2, #6
 80003a8:	1e5c      	subs	r4, r3, #1
 80003aa:	41a3      	sbcs	r3, r4
 80003ac:	0c3f      	lsrs	r7, r7, #16
 80003ae:	0e92      	lsrs	r2, r2, #26
 80003b0:	197d      	adds	r5, r7, r5
 80003b2:	431a      	orrs	r2, r3
 80003b4:	01ad      	lsls	r5, r5, #6
 80003b6:	4315      	orrs	r5, r2
 80003b8:	012b      	lsls	r3, r5, #4
 80003ba:	d504      	bpl.n	80003c6 <__aeabi_fmul+0x182>
 80003bc:	2301      	movs	r3, #1
 80003be:	465e      	mov	r6, fp
 80003c0:	086a      	lsrs	r2, r5, #1
 80003c2:	401d      	ands	r5, r3
 80003c4:	4315      	orrs	r5, r2
 80003c6:	0032      	movs	r2, r6
 80003c8:	327f      	adds	r2, #127	; 0x7f
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	dd25      	ble.n	800041a <__aeabi_fmul+0x1d6>
 80003ce:	076b      	lsls	r3, r5, #29
 80003d0:	d004      	beq.n	80003dc <__aeabi_fmul+0x198>
 80003d2:	230f      	movs	r3, #15
 80003d4:	402b      	ands	r3, r5
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	d000      	beq.n	80003dc <__aeabi_fmul+0x198>
 80003da:	3504      	adds	r5, #4
 80003dc:	012b      	lsls	r3, r5, #4
 80003de:	d503      	bpl.n	80003e8 <__aeabi_fmul+0x1a4>
 80003e0:	0032      	movs	r2, r6
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <__aeabi_fmul+0x23c>)
 80003e4:	3280      	adds	r2, #128	; 0x80
 80003e6:	401d      	ands	r5, r3
 80003e8:	2afe      	cmp	r2, #254	; 0xfe
 80003ea:	dc94      	bgt.n	8000316 <__aeabi_fmul+0xd2>
 80003ec:	2401      	movs	r4, #1
 80003ee:	01a8      	lsls	r0, r5, #6
 80003f0:	0a40      	lsrs	r0, r0, #9
 80003f2:	b2d2      	uxtb	r2, r2
 80003f4:	400c      	ands	r4, r1
 80003f6:	e76f      	b.n	80002d8 <__aeabi_fmul+0x94>
 80003f8:	2080      	movs	r0, #128	; 0x80
 80003fa:	03c0      	lsls	r0, r0, #15
 80003fc:	4207      	tst	r7, r0
 80003fe:	d007      	beq.n	8000410 <__aeabi_fmul+0x1cc>
 8000400:	4205      	tst	r5, r0
 8000402:	d105      	bne.n	8000410 <__aeabi_fmul+0x1cc>
 8000404:	4328      	orrs	r0, r5
 8000406:	0240      	lsls	r0, r0, #9
 8000408:	0a40      	lsrs	r0, r0, #9
 800040a:	4644      	mov	r4, r8
 800040c:	22ff      	movs	r2, #255	; 0xff
 800040e:	e763      	b.n	80002d8 <__aeabi_fmul+0x94>
 8000410:	4338      	orrs	r0, r7
 8000412:	0240      	lsls	r0, r0, #9
 8000414:	0a40      	lsrs	r0, r0, #9
 8000416:	22ff      	movs	r2, #255	; 0xff
 8000418:	e75e      	b.n	80002d8 <__aeabi_fmul+0x94>
 800041a:	2401      	movs	r4, #1
 800041c:	1aa3      	subs	r3, r4, r2
 800041e:	2b1b      	cmp	r3, #27
 8000420:	dd05      	ble.n	800042e <__aeabi_fmul+0x1ea>
 8000422:	400c      	ands	r4, r1
 8000424:	2200      	movs	r2, #0
 8000426:	2000      	movs	r0, #0
 8000428:	e756      	b.n	80002d8 <__aeabi_fmul+0x94>
 800042a:	465e      	mov	r6, fp
 800042c:	e7cb      	b.n	80003c6 <__aeabi_fmul+0x182>
 800042e:	002a      	movs	r2, r5
 8000430:	2020      	movs	r0, #32
 8000432:	40da      	lsrs	r2, r3
 8000434:	1ac3      	subs	r3, r0, r3
 8000436:	409d      	lsls	r5, r3
 8000438:	002b      	movs	r3, r5
 800043a:	1e5d      	subs	r5, r3, #1
 800043c:	41ab      	sbcs	r3, r5
 800043e:	4313      	orrs	r3, r2
 8000440:	075a      	lsls	r2, r3, #29
 8000442:	d004      	beq.n	800044e <__aeabi_fmul+0x20a>
 8000444:	220f      	movs	r2, #15
 8000446:	401a      	ands	r2, r3
 8000448:	2a04      	cmp	r2, #4
 800044a:	d000      	beq.n	800044e <__aeabi_fmul+0x20a>
 800044c:	3304      	adds	r3, #4
 800044e:	015a      	lsls	r2, r3, #5
 8000450:	d504      	bpl.n	800045c <__aeabi_fmul+0x218>
 8000452:	2401      	movs	r4, #1
 8000454:	2201      	movs	r2, #1
 8000456:	400c      	ands	r4, r1
 8000458:	2000      	movs	r0, #0
 800045a:	e73d      	b.n	80002d8 <__aeabi_fmul+0x94>
 800045c:	2401      	movs	r4, #1
 800045e:	019b      	lsls	r3, r3, #6
 8000460:	0a58      	lsrs	r0, r3, #9
 8000462:	400c      	ands	r4, r1
 8000464:	2200      	movs	r2, #0
 8000466:	e737      	b.n	80002d8 <__aeabi_fmul+0x94>
 8000468:	2080      	movs	r0, #128	; 0x80
 800046a:	2401      	movs	r4, #1
 800046c:	03c0      	lsls	r0, r0, #15
 800046e:	4328      	orrs	r0, r5
 8000470:	0240      	lsls	r0, r0, #9
 8000472:	0a40      	lsrs	r0, r0, #9
 8000474:	400c      	ands	r4, r1
 8000476:	22ff      	movs	r2, #255	; 0xff
 8000478:	e72e      	b.n	80002d8 <__aeabi_fmul+0x94>
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	0800394c 	.word	0x0800394c
 8000480:	f7ffffff 	.word	0xf7ffffff

08000484 <__aeabi_i2f>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	2800      	cmp	r0, #0
 8000488:	d030      	beq.n	80004ec <__aeabi_i2f+0x68>
 800048a:	17c3      	asrs	r3, r0, #31
 800048c:	18c4      	adds	r4, r0, r3
 800048e:	405c      	eors	r4, r3
 8000490:	0fc5      	lsrs	r5, r0, #31
 8000492:	0020      	movs	r0, r4
 8000494:	f000 f846 	bl	8000524 <__clzsi2>
 8000498:	239e      	movs	r3, #158	; 0x9e
 800049a:	1a1b      	subs	r3, r3, r0
 800049c:	2b96      	cmp	r3, #150	; 0x96
 800049e:	dc0d      	bgt.n	80004bc <__aeabi_i2f+0x38>
 80004a0:	2296      	movs	r2, #150	; 0x96
 80004a2:	1ad2      	subs	r2, r2, r3
 80004a4:	4094      	lsls	r4, r2
 80004a6:	002a      	movs	r2, r5
 80004a8:	0264      	lsls	r4, r4, #9
 80004aa:	0a64      	lsrs	r4, r4, #9
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	0264      	lsls	r4, r4, #9
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	0a60      	lsrs	r0, r4, #9
 80004b4:	07d2      	lsls	r2, r2, #31
 80004b6:	4318      	orrs	r0, r3
 80004b8:	4310      	orrs	r0, r2
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	2b99      	cmp	r3, #153	; 0x99
 80004be:	dc19      	bgt.n	80004f4 <__aeabi_i2f+0x70>
 80004c0:	2299      	movs	r2, #153	; 0x99
 80004c2:	1ad2      	subs	r2, r2, r3
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	dd29      	ble.n	800051c <__aeabi_i2f+0x98>
 80004c8:	4094      	lsls	r4, r2
 80004ca:	0022      	movs	r2, r4
 80004cc:	4c14      	ldr	r4, [pc, #80]	; (8000520 <__aeabi_i2f+0x9c>)
 80004ce:	4014      	ands	r4, r2
 80004d0:	0751      	lsls	r1, r2, #29
 80004d2:	d004      	beq.n	80004de <__aeabi_i2f+0x5a>
 80004d4:	210f      	movs	r1, #15
 80004d6:	400a      	ands	r2, r1
 80004d8:	2a04      	cmp	r2, #4
 80004da:	d000      	beq.n	80004de <__aeabi_i2f+0x5a>
 80004dc:	3404      	adds	r4, #4
 80004de:	0162      	lsls	r2, r4, #5
 80004e0:	d413      	bmi.n	800050a <__aeabi_i2f+0x86>
 80004e2:	01a4      	lsls	r4, r4, #6
 80004e4:	0a64      	lsrs	r4, r4, #9
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	002a      	movs	r2, r5
 80004ea:	e7e0      	b.n	80004ae <__aeabi_i2f+0x2a>
 80004ec:	2200      	movs	r2, #0
 80004ee:	2300      	movs	r3, #0
 80004f0:	2400      	movs	r4, #0
 80004f2:	e7dc      	b.n	80004ae <__aeabi_i2f+0x2a>
 80004f4:	2205      	movs	r2, #5
 80004f6:	0021      	movs	r1, r4
 80004f8:	1a12      	subs	r2, r2, r0
 80004fa:	40d1      	lsrs	r1, r2
 80004fc:	22b9      	movs	r2, #185	; 0xb9
 80004fe:	1ad2      	subs	r2, r2, r3
 8000500:	4094      	lsls	r4, r2
 8000502:	1e62      	subs	r2, r4, #1
 8000504:	4194      	sbcs	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	e7da      	b.n	80004c0 <__aeabi_i2f+0x3c>
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <__aeabi_i2f+0x9c>)
 800050c:	002a      	movs	r2, r5
 800050e:	401c      	ands	r4, r3
 8000510:	239f      	movs	r3, #159	; 0x9f
 8000512:	01a4      	lsls	r4, r4, #6
 8000514:	1a1b      	subs	r3, r3, r0
 8000516:	0a64      	lsrs	r4, r4, #9
 8000518:	b2db      	uxtb	r3, r3
 800051a:	e7c8      	b.n	80004ae <__aeabi_i2f+0x2a>
 800051c:	0022      	movs	r2, r4
 800051e:	e7d5      	b.n	80004cc <__aeabi_i2f+0x48>
 8000520:	fbffffff 	.word	0xfbffffff

08000524 <__clzsi2>:
 8000524:	211c      	movs	r1, #28
 8000526:	2301      	movs	r3, #1
 8000528:	041b      	lsls	r3, r3, #16
 800052a:	4298      	cmp	r0, r3
 800052c:	d301      	bcc.n	8000532 <__clzsi2+0xe>
 800052e:	0c00      	lsrs	r0, r0, #16
 8000530:	3910      	subs	r1, #16
 8000532:	0a1b      	lsrs	r3, r3, #8
 8000534:	4298      	cmp	r0, r3
 8000536:	d301      	bcc.n	800053c <__clzsi2+0x18>
 8000538:	0a00      	lsrs	r0, r0, #8
 800053a:	3908      	subs	r1, #8
 800053c:	091b      	lsrs	r3, r3, #4
 800053e:	4298      	cmp	r0, r3
 8000540:	d301      	bcc.n	8000546 <__clzsi2+0x22>
 8000542:	0900      	lsrs	r0, r0, #4
 8000544:	3904      	subs	r1, #4
 8000546:	a202      	add	r2, pc, #8	; (adr r2, 8000550 <__clzsi2+0x2c>)
 8000548:	5c10      	ldrb	r0, [r2, r0]
 800054a:	1840      	adds	r0, r0, r1
 800054c:	4770      	bx	lr
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	02020304 	.word	0x02020304
 8000554:	01010101 	.word	0x01010101
	...

08000560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b510      	push	{r4, lr}
 8000562:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000564:	f000 ff38 	bl	80013d8 <HAL_RCC_GetHCLKFreq>
 8000568:	21fa      	movs	r1, #250	; 0xfa
 800056a:	0089      	lsls	r1, r1, #2
 800056c:	f7ff fdde 	bl	800012c <__udivsi3>
 8000570:	f000 fab4 	bl	8000adc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000574:	2001      	movs	r0, #1
 8000576:	2200      	movs	r2, #0
 8000578:	0021      	movs	r1, r4
 800057a:	4240      	negs	r0, r0
 800057c:	f000 fa74 	bl	8000a68 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000580:	2000      	movs	r0, #0
 8000582:	bd10      	pop	{r4, pc}

08000584 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	2310      	movs	r3, #16
 8000586:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <HAL_Init+0x1c>)
{
 8000588:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800058c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058e:	430b      	orrs	r3, r1
 8000590:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000592:	f7ff ffe5 	bl	8000560 <HAL_InitTick>
  HAL_MspInit();
 8000596:	f002 f8cd 	bl	8002734 <HAL_MspInit>
}
 800059a:	2000      	movs	r0, #0
 800059c:	bd10      	pop	{r4, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40022000 	.word	0x40022000

080005a4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005a4:	4a02      	ldr	r2, [pc, #8]	; (80005b0 <HAL_IncTick+0xc>)
 80005a6:	6813      	ldr	r3, [r2, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000298 	.word	0x20000298

080005b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <HAL_GetTick+0x8>)
 80005b6:	6818      	ldr	r0, [r3, #0]
}
 80005b8:	4770      	bx	lr
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	20000298 	.word	0x20000298

080005c0 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80005c0:	2300      	movs	r3, #0
{
 80005c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005c4:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 80005c6:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005c8:	6803      	ldr	r3, [r0, #0]
{
 80005ca:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	400a      	ands	r2, r1
 80005d0:	2a01      	cmp	r2, #1
 80005d2:	d107      	bne.n	80005e4 <ADC_Enable+0x24>
 80005d4:	6819      	ldr	r1, [r3, #0]
 80005d6:	4211      	tst	r1, r2
 80005d8:	d001      	beq.n	80005de <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80005da:	2000      	movs	r0, #0
}
 80005dc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005de:	68da      	ldr	r2, [r3, #12]
 80005e0:	0412      	lsls	r2, r2, #16
 80005e2:	d4fa      	bmi.n	80005da <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80005e4:	6899      	ldr	r1, [r3, #8]
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <ADC_Enable+0x8c>)
 80005e8:	4211      	tst	r1, r2
 80005ea:	d008      	beq.n	80005fe <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005ec:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005ee:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005f2:	4313      	orrs	r3, r2
 80005f4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005f8:	4303      	orrs	r3, r0
 80005fa:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80005fc:	e7ee      	b.n	80005dc <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80005fe:	2201      	movs	r2, #1
 8000600:	6899      	ldr	r1, [r3, #8]
 8000602:	430a      	orrs	r2, r1
 8000604:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <ADC_Enable+0x90>)
 8000608:	4912      	ldr	r1, [pc, #72]	; (8000654 <ADC_Enable+0x94>)
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	f7ff fd8e 	bl	800012c <__udivsi3>
 8000610:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000612:	9b01      	ldr	r3, [sp, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d115      	bne.n	8000644 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8000618:	f7ff ffcc 	bl	80005b4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800061c:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800061e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000620:	6823      	ldr	r3, [r4, #0]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	422b      	tst	r3, r5
 8000626:	d1d8      	bne.n	80005da <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000628:	f7ff ffc4 	bl	80005b4 <HAL_GetTick>
 800062c:	1b80      	subs	r0, r0, r6
 800062e:	2802      	cmp	r0, #2
 8000630:	d9f6      	bls.n	8000620 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000632:	2310      	movs	r3, #16
 8000634:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000636:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000638:	4313      	orrs	r3, r2
 800063a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800063c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800063e:	432b      	orrs	r3, r5
 8000640:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000642:	e7cb      	b.n	80005dc <ADC_Enable+0x1c>
      wait_loop_index--;
 8000644:	9b01      	ldr	r3, [sp, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	e7e2      	b.n	8000612 <ADC_Enable+0x52>
 800064c:	80000017 	.word	0x80000017
 8000650:	20000000 	.word	0x20000000
 8000654:	000f4240 	.word	0x000f4240

08000658 <HAL_ADC_Init>:
{
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800065c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800065e:	2c00      	cmp	r4, #0
 8000660:	d072      	beq.n	8000748 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000662:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000664:	2b00      	cmp	r3, #0
 8000666:	d106      	bne.n	8000676 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000668:	0022      	movs	r2, r4
 800066a:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800066c:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 800066e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000670:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000672:	f002 f87d 	bl	8002770 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000676:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000678:	06db      	lsls	r3, r3, #27
 800067a:	d500      	bpl.n	800067e <HAL_ADC_Init+0x26>
 800067c:	e079      	b.n	8000772 <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800067e:	2204      	movs	r2, #4
 8000680:	6823      	ldr	r3, [r4, #0]
 8000682:	6898      	ldr	r0, [r3, #8]
 8000684:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000686:	d000      	beq.n	800068a <HAL_ADC_Init+0x32>
 8000688:	e073      	b.n	8000772 <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800068a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800068c:	4942      	ldr	r1, [pc, #264]	; (8000798 <HAL_ADC_Init+0x140>)
 800068e:	4011      	ands	r1, r2
 8000690:	2202      	movs	r2, #2
 8000692:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000694:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000696:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	400a      	ands	r2, r1
 800069c:	2a01      	cmp	r2, #1
 800069e:	d000      	beq.n	80006a2 <HAL_ADC_Init+0x4a>
 80006a0:	e06d      	b.n	800077e <HAL_ADC_Init+0x126>
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	4211      	tst	r1, r2
 80006a6:	d102      	bne.n	80006ae <HAL_ADC_Init+0x56>
 80006a8:	68da      	ldr	r2, [r3, #12]
 80006aa:	0412      	lsls	r2, r2, #16
 80006ac:	d567      	bpl.n	800077e <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80006ae:	68da      	ldr	r2, [r3, #12]
 80006b0:	493a      	ldr	r1, [pc, #232]	; (800079c <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80006b2:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80006b4:	400a      	ands	r2, r1
 80006b6:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80006b8:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80006ba:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80006bc:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80006be:	69e2      	ldr	r2, [r4, #28]
 80006c0:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80006c2:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80006c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80006c6:	3a01      	subs	r2, #1
 80006c8:	1e56      	subs	r6, r2, #1
 80006ca:	41b2      	sbcs	r2, r6
 80006cc:	0316      	lsls	r6, r2, #12
 80006ce:	68e2      	ldr	r2, [r4, #12]
 80006d0:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80006d2:	6922      	ldr	r2, [r4, #16]
 80006d4:	430f      	orrs	r7, r1
 80006d6:	2a02      	cmp	r2, #2
 80006d8:	d100      	bne.n	80006dc <HAL_ADC_Init+0x84>
 80006da:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80006dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006de:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80006e0:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80006e2:	433a      	orrs	r2, r7
 80006e4:	4332      	orrs	r2, r6
 80006e6:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006e8:	2901      	cmp	r1, #1
 80006ea:	d104      	bne.n	80006f6 <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d12c      	bne.n	800074a <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0249      	lsls	r1, r1, #9
 80006f4:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006f6:	20c2      	movs	r0, #194	; 0xc2
 80006f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80006fa:	30ff      	adds	r0, #255	; 0xff
 80006fc:	4281      	cmp	r1, r0
 80006fe:	d002      	beq.n	8000706 <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000700:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000702:	4301      	orrs	r1, r0
 8000704:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000706:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000708:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800070a:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800070c:	4311      	orrs	r1, r2
 800070e:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000710:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000712:	4281      	cmp	r1, r0
 8000714:	d002      	beq.n	800071c <HAL_ADC_Init+0xc4>
 8000716:	1e48      	subs	r0, r1, #1
 8000718:	2806      	cmp	r0, #6
 800071a:	d807      	bhi.n	800072c <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800071c:	2507      	movs	r5, #7
 800071e:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000720:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000722:	43a8      	bics	r0, r5
 8000724:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000726:	6958      	ldr	r0, [r3, #20]
 8000728:	4301      	orrs	r1, r0
 800072a:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	491c      	ldr	r1, [pc, #112]	; (80007a0 <HAL_ADC_Init+0x148>)
 8000730:	400b      	ands	r3, r1
 8000732:	429a      	cmp	r2, r3
 8000734:	d111      	bne.n	800075a <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8000736:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000738:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800073a:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800073c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800073e:	4393      	bics	r3, r2
 8000740:	001a      	movs	r2, r3
 8000742:	2301      	movs	r3, #1
 8000744:	4313      	orrs	r3, r2
 8000746:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800074a:	2020      	movs	r0, #32
 800074c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800074e:	4328      	orrs	r0, r5
 8000750:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000752:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000754:	4301      	orrs	r1, r0
 8000756:	64a1      	str	r1, [r4, #72]	; 0x48
 8000758:	e7cd      	b.n	80006f6 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 800075a:	2212      	movs	r2, #18
 800075c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800075e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000760:	4393      	bics	r3, r2
 8000762:	001a      	movs	r2, r3
 8000764:	2310      	movs	r3, #16
 8000766:	4313      	orrs	r3, r2
 8000768:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800076a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800076c:	4303      	orrs	r3, r0
 800076e:	64a3      	str	r3, [r4, #72]	; 0x48
 8000770:	e7ea      	b.n	8000748 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000772:	2310      	movs	r3, #16
 8000774:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000776:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000778:	4313      	orrs	r3, r2
 800077a:	6463      	str	r3, [r4, #68]	; 0x44
 800077c:	e7e4      	b.n	8000748 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 800077e:	2118      	movs	r1, #24
 8000780:	68da      	ldr	r2, [r3, #12]
 8000782:	438a      	bics	r2, r1
 8000784:	68a1      	ldr	r1, [r4, #8]
 8000786:	430a      	orrs	r2, r1
 8000788:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800078a:	6919      	ldr	r1, [r3, #16]
 800078c:	6862      	ldr	r2, [r4, #4]
 800078e:	0089      	lsls	r1, r1, #2
 8000790:	0889      	lsrs	r1, r1, #2
 8000792:	4311      	orrs	r1, r2
 8000794:	6119      	str	r1, [r3, #16]
 8000796:	e78a      	b.n	80006ae <HAL_ADC_Init+0x56>
 8000798:	fffffefd 	.word	0xfffffefd
 800079c:	fffe0219 	.word	0xfffe0219
 80007a0:	833fffe7 	.word	0x833fffe7

080007a4 <HAL_ADC_Start_DMA>:
{
 80007a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007a6:	6803      	ldr	r3, [r0, #0]
{
 80007a8:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007aa:	689b      	ldr	r3, [r3, #8]
{
 80007ac:	000f      	movs	r7, r1
 80007ae:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 80007b0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007b2:	075b      	lsls	r3, r3, #29
 80007b4:	d430      	bmi.n	8000818 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 80007b6:	0026      	movs	r6, r4
 80007b8:	3640      	adds	r6, #64	; 0x40
 80007ba:	7833      	ldrb	r3, [r6, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d02b      	beq.n	8000818 <HAL_ADC_Start_DMA+0x74>
 80007c0:	2301      	movs	r3, #1
 80007c2:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80007c4:	69e3      	ldr	r3, [r4, #28]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d127      	bne.n	800081a <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 80007ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007cc:	4a16      	ldr	r2, [pc, #88]	; (8000828 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 80007ce:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 80007d0:	401a      	ands	r2, r3
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4313      	orrs	r3, r2
 80007d8:	6463      	str	r3, [r4, #68]	; 0x44
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 80007de:	64a5      	str	r5, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80007e0:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007e2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80007e6:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007e8:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_ADC_Start_DMA+0x90>)
 80007ec:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80007ee:	231c      	movs	r3, #28
 80007f0:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007f2:	684a      	ldr	r2, [r1, #4]
 80007f4:	3b0c      	subs	r3, #12
 80007f6:	4313      	orrs	r3, r2
 80007f8:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80007fa:	2301      	movs	r3, #1
 80007fc:	68ca      	ldr	r2, [r1, #12]
 80007fe:	4313      	orrs	r3, r2
 8000800:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000802:	003a      	movs	r2, r7
 8000804:	3140      	adds	r1, #64	; 0x40
 8000806:	9b01      	ldr	r3, [sp, #4]
 8000808:	f000 f9cc 	bl	8000ba4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800080c:	2304      	movs	r3, #4
 800080e:	0028      	movs	r0, r5
 8000810:	6822      	ldr	r2, [r4, #0]
 8000812:	6891      	ldr	r1, [r2, #8]
 8000814:	430b      	orrs	r3, r1
 8000816:	6093      	str	r3, [r2, #8]
}
 8000818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800081a:	0020      	movs	r0, r4
 800081c:	f7ff fed0 	bl	80005c0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000820:	2800      	cmp	r0, #0
 8000822:	d1f9      	bne.n	8000818 <HAL_ADC_Start_DMA+0x74>
 8000824:	e7d1      	b.n	80007ca <HAL_ADC_Start_DMA+0x26>
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	fffff0fe 	.word	0xfffff0fe
 800082c:	0800083d 	.word	0x0800083d
 8000830:	080008af 	.word	0x080008af
 8000834:	080008bb 	.word	0x080008bb

08000838 <HAL_ADC_ConvCpltCallback>:
 8000838:	4770      	bx	lr
	...

0800083c <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800083c:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800083e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000840:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000842:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000844:	4211      	tst	r1, r2
 8000846:	d12a      	bne.n	800089e <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000848:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800084a:	32b1      	adds	r2, #177	; 0xb1
 800084c:	32ff      	adds	r2, #255	; 0xff
 800084e:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000850:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000852:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	0109      	lsls	r1, r1, #4
 8000858:	68d0      	ldr	r0, [r2, #12]
 800085a:	4208      	tst	r0, r1
 800085c:	d112      	bne.n	8000884 <ADC_DMAConvCplt+0x48>
 800085e:	6a19      	ldr	r1, [r3, #32]
 8000860:	2900      	cmp	r1, #0
 8000862:	d10f      	bne.n	8000884 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000864:	6811      	ldr	r1, [r2, #0]
 8000866:	0709      	lsls	r1, r1, #28
 8000868:	d50c      	bpl.n	8000884 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800086a:	6891      	ldr	r1, [r2, #8]
 800086c:	0749      	lsls	r1, r1, #29
 800086e:	d40d      	bmi.n	800088c <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000870:	200c      	movs	r0, #12
 8000872:	6851      	ldr	r1, [r2, #4]
 8000874:	4381      	bics	r1, r0
 8000876:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800087a:	490b      	ldr	r1, [pc, #44]	; (80008a8 <ADC_DMAConvCplt+0x6c>)
 800087c:	4011      	ands	r1, r2
 800087e:	2201      	movs	r2, #1
 8000880:	430a      	orrs	r2, r1
 8000882:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff ffd7 	bl	8000838 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800088a:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800088c:	2220      	movs	r2, #32
 800088e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000890:	430a      	orrs	r2, r1
 8000892:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000894:	2201      	movs	r2, #1
 8000896:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8000898:	430a      	orrs	r2, r1
 800089a:	649a      	str	r2, [r3, #72]	; 0x48
 800089c:	e7f2      	b.n	8000884 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800089e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4798      	blx	r3
}
 80008a4:	e7f1      	b.n	800088a <ADC_DMAConvCplt+0x4e>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	fffffefe 	.word	0xfffffefe

080008ac <HAL_ADC_ConvHalfCpltCallback>:
 80008ac:	4770      	bx	lr

080008ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80008ae:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80008b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80008b2:	f7ff fffb 	bl	80008ac <HAL_ADC_ConvHalfCpltCallback>
}
 80008b6:	bd10      	pop	{r4, pc}

080008b8 <HAL_ADC_ErrorCallback>:
}
 80008b8:	4770      	bx	lr

080008ba <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80008ba:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80008bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80008be:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80008c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80008c2:	4313      	orrs	r3, r2
 80008c4:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80008c6:	2304      	movs	r3, #4
 80008c8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80008ca:	4313      	orrs	r3, r2
 80008cc:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80008ce:	f7ff fff3 	bl	80008b8 <HAL_ADC_ErrorCallback>
}
 80008d2:	bd10      	pop	{r4, pc}

080008d4 <HAL_ADC_ConfigChannel>:
{
 80008d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80008d6:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80008d8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80008da:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008dc:	3440      	adds	r4, #64	; 0x40
 80008de:	7823      	ldrb	r3, [r4, #0]
{
 80008e0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80008e2:	2002      	movs	r0, #2
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d02b      	beq.n	8000940 <HAL_ADC_ConfigChannel+0x6c>
 80008e8:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008ea:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80008ec:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008ee:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80008f0:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008f2:	0740      	lsls	r0, r0, #29
 80008f4:	d452      	bmi.n	800099c <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 80008f6:	482c      	ldr	r0, [pc, #176]	; (80009a8 <HAL_ADC_ConfigChannel+0xd4>)
 80008f8:	684f      	ldr	r7, [r1, #4]
 80008fa:	680d      	ldr	r5, [r1, #0]
 80008fc:	4287      	cmp	r7, r0
 80008fe:	d03b      	beq.n	8000978 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000900:	40ab      	lsls	r3, r5
 8000902:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000904:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000906:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000908:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800090a:	4338      	orrs	r0, r7
 800090c:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800090e:	429e      	cmp	r6, r3
 8000910:	d00f      	beq.n	8000932 <HAL_ADC_ConfigChannel+0x5e>
 8000912:	3e01      	subs	r6, #1
 8000914:	2e06      	cmp	r6, #6
 8000916:	d90c      	bls.n	8000932 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000918:	688b      	ldr	r3, [r1, #8]
 800091a:	2107      	movs	r1, #7
 800091c:	6950      	ldr	r0, [r2, #20]
 800091e:	4008      	ands	r0, r1
 8000920:	4283      	cmp	r3, r0
 8000922:	d006      	beq.n	8000932 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000924:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000926:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000928:	4388      	bics	r0, r1
 800092a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800092c:	6950      	ldr	r0, [r2, #20]
 800092e:	4303      	orrs	r3, r0
 8000930:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000932:	002b      	movs	r3, r5
 8000934:	3b10      	subs	r3, #16
 8000936:	2b01      	cmp	r3, #1
 8000938:	d903      	bls.n	8000942 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800093a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800093c:	2300      	movs	r3, #0
 800093e:	7023      	strb	r3, [r4, #0]
}
 8000940:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <HAL_ADC_ConfigChannel+0xd8>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	6819      	ldr	r1, [r3, #0]
 8000948:	2d10      	cmp	r5, #16
 800094a:	d013      	beq.n	8000974 <HAL_ADC_ConfigChannel+0xa0>
 800094c:	03d2      	lsls	r2, r2, #15
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000952:	2d10      	cmp	r5, #16
 8000954:	d1f1      	bne.n	800093a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_ADC_ConfigChannel+0xdc>)
 8000958:	4916      	ldr	r1, [pc, #88]	; (80009b4 <HAL_ADC_ConfigChannel+0xe0>)
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	f7ff fbe6 	bl	800012c <__udivsi3>
 8000960:	230a      	movs	r3, #10
 8000962:	4358      	muls	r0, r3
 8000964:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000966:	9b01      	ldr	r3, [sp, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0e6      	beq.n	800093a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 800096c:	9b01      	ldr	r3, [sp, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	e7f8      	b.n	8000966 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000974:	0412      	lsls	r2, r2, #16
 8000976:	e7ea      	b.n	800094e <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000978:	40ab      	lsls	r3, r5
 800097a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800097c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800097e:	002b      	movs	r3, r5
 8000980:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000982:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000984:	2b01      	cmp	r3, #1
 8000986:	d8d8      	bhi.n	800093a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_ADC_ConfigChannel+0xd8>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2d10      	cmp	r5, #16
 800098e:	d003      	beq.n	8000998 <HAL_ADC_ConfigChannel+0xc4>
 8000990:	4909      	ldr	r1, [pc, #36]	; (80009b8 <HAL_ADC_ConfigChannel+0xe4>)
 8000992:	400a      	ands	r2, r1
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e7d0      	b.n	800093a <HAL_ADC_ConfigChannel+0x66>
 8000998:	4908      	ldr	r1, [pc, #32]	; (80009bc <HAL_ADC_ConfigChannel+0xe8>)
 800099a:	e7fa      	b.n	8000992 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800099c:	2220      	movs	r2, #32
 800099e:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80009a0:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009a2:	430a      	orrs	r2, r1
 80009a4:	646a      	str	r2, [r5, #68]	; 0x44
 80009a6:	e7c9      	b.n	800093c <HAL_ADC_ConfigChannel+0x68>
 80009a8:	00001001 	.word	0x00001001
 80009ac:	40012708 	.word	0x40012708
 80009b0:	20000000 	.word	0x20000000
 80009b4:	000f4240 	.word	0x000f4240
 80009b8:	ffbfffff 	.word	0xffbfffff
 80009bc:	ff7fffff 	.word	0xff7fffff

080009c0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80009c2:	0006      	movs	r6, r0
 80009c4:	3640      	adds	r6, #64	; 0x40
 80009c6:	7833      	ldrb	r3, [r6, #0]
{
 80009c8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80009ca:	2002      	movs	r0, #2
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d042      	beq.n	8000a56 <HAL_ADCEx_Calibration_Start+0x96>
 80009d0:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009d2:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80009d4:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	400a      	ands	r2, r1
 80009dc:	2a01      	cmp	r2, #1
 80009de:	d105      	bne.n	80009ec <HAL_ADCEx_Calibration_Start+0x2c>
 80009e0:	6819      	ldr	r1, [r3, #0]
 80009e2:	4211      	tst	r1, r2
 80009e4:	d138      	bne.n	8000a58 <HAL_ADCEx_Calibration_Start+0x98>
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	0412      	lsls	r2, r2, #16
 80009ea:	d435      	bmi.n	8000a58 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80009ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80009ee:	491d      	ldr	r1, [pc, #116]	; (8000a64 <HAL_ADCEx_Calibration_Start+0xa4>)
 80009f0:	4011      	ands	r1, r2
 80009f2:	2202      	movs	r2, #2
 80009f4:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80009f6:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 80009f8:	6462      	str	r2, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80009fa:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80009fc:	68da      	ldr	r2, [r3, #12]
 80009fe:	438a      	bics	r2, r1
 8000a00:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	6899      	ldr	r1, [r3, #8]
 8000a06:	0612      	lsls	r2, r2, #24
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000a0c:	f7ff fdd2 	bl	80005b4 <HAL_GetTick>
 8000a10:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	db0e      	blt.n	8000a38 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000a1a:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000a1c:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000a1e:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000a20:	430d      	orrs	r5, r1
 8000a22:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a24:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a26:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8000a28:	4393      	bics	r3, r2
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a32:	2300      	movs	r3, #0
 8000a34:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8000a36:	e00e      	b.n	8000a56 <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000a38:	f7ff fdbc 	bl	80005b4 <HAL_GetTick>
 8000a3c:	1bc0      	subs	r0, r0, r7
 8000a3e:	2802      	cmp	r0, #2
 8000a40:	d9e7      	bls.n	8000a12 <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 8000a42:	2212      	movs	r2, #18
 8000a44:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000a46:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000a48:	4393      	bics	r3, r2
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8000a52:	2300      	movs	r3, #0
 8000a54:	7033      	strb	r3, [r6, #0]
}
 8000a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a58:	2320      	movs	r3, #32
 8000a5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000a5c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	6463      	str	r3, [r4, #68]	; 0x44
 8000a62:	e7e6      	b.n	8000a32 <HAL_ADCEx_Calibration_Start+0x72>
 8000a64:	fffffefd 	.word	0xfffffefd

08000a68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	da14      	bge.n	8000a9a <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a70:	230f      	movs	r3, #15
 8000a72:	b2c0      	uxtb	r0, r0
 8000a74:	4003      	ands	r3, r0
 8000a76:	3b08      	subs	r3, #8
 8000a78:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <HAL_NVIC_SetPriority+0x58>)
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	2203      	movs	r2, #3
 8000a82:	4010      	ands	r0, r2
 8000a84:	4090      	lsls	r0, r2
 8000a86:	32fc      	adds	r2, #252	; 0xfc
 8000a88:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a8a:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a8e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a90:	69dc      	ldr	r4, [r3, #28]
 8000a92:	43ac      	bics	r4, r5
 8000a94:	4321      	orrs	r1, r4
 8000a96:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000a98:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9a:	2503      	movs	r5, #3
 8000a9c:	0883      	lsrs	r3, r0, #2
 8000a9e:	4028      	ands	r0, r5
 8000aa0:	40a8      	lsls	r0, r5
 8000aa2:	35fc      	adds	r5, #252	; 0xfc
 8000aa4:	002e      	movs	r6, r5
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_NVIC_SetPriority+0x5c>)
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	189b      	adds	r3, r3, r2
 8000aac:	22c0      	movs	r2, #192	; 0xc0
 8000aae:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ab0:	4029      	ands	r1, r5
 8000ab2:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	589c      	ldr	r4, [r3, r2]
 8000ab8:	43b4      	bics	r4, r6
 8000aba:	4321      	orrs	r1, r4
 8000abc:	5099      	str	r1, [r3, r2]
 8000abe:	e7eb      	b.n	8000a98 <HAL_NVIC_SetPriority+0x30>
 8000ac0:	e000ed00 	.word	0xe000ed00
 8000ac4:	e000e100 	.word	0xe000e100

08000ac8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ac8:	231f      	movs	r3, #31
 8000aca:	4018      	ands	r0, r3
 8000acc:	3b1e      	subs	r3, #30
 8000ace:	4083      	lsls	r3, r0
 8000ad0:	4a01      	ldr	r2, [pc, #4]	; (8000ad8 <HAL_NVIC_EnableIRQ+0x10>)
 8000ad2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ad4:	4770      	bx	lr
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <HAL_SYSTICK_Config+0x28>)
 8000ade:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d80d      	bhi.n	8000b02 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae6:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aea:	4808      	ldr	r0, [pc, #32]	; (8000b0c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aec:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aee:	6a03      	ldr	r3, [r0, #32]
 8000af0:	0609      	lsls	r1, r1, #24
 8000af2:	021b      	lsls	r3, r3, #8
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	430b      	orrs	r3, r1
 8000af8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afc:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afe:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b00:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b02:	4770      	bx	lr
 8000b04:	00ffffff 	.word	0x00ffffff
 8000b08:	e000e010 	.word	0xe000e010
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b12:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b14:	2804      	cmp	r0, #4
 8000b16:	d102      	bne.n	8000b1e <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b18:	4310      	orrs	r0, r2
 8000b1a:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b1c:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b1e:	2104      	movs	r1, #4
 8000b20:	438a      	bics	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	e7fa      	b.n	8000b1c <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b2c:	4770      	bx	lr

08000b2e <HAL_SYSTICK_IRQHandler>:
{
 8000b2e:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000b30:	f7ff fffc 	bl	8000b2c <HAL_SYSTICK_Callback>
}
 8000b34:	bd10      	pop	{r4, pc}
	...

08000b38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8000b3c:	2001      	movs	r0, #1
  if(NULL == hdma)
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d028      	beq.n	8000b94 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b42:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b44:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b46:	1ca5      	adds	r5, r4, #2
 8000b48:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8000b4a:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b4e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b50:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000b52:	6863      	ldr	r3, [r4, #4]
 8000b54:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b56:	68e1      	ldr	r1, [r4, #12]
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	6921      	ldr	r1, [r4, #16]
 8000b5c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b5e:	6961      	ldr	r1, [r4, #20]
 8000b60:	430b      	orrs	r3, r1
 8000b62:	69a1      	ldr	r1, [r4, #24]
 8000b64:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b66:	69e1      	ldr	r1, [r4, #28]
 8000b68:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000b6a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000b6c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_DMA_Init+0x64>)
 8000b70:	2114      	movs	r1, #20
 8000b72:	18c0      	adds	r0, r0, r3
 8000b74:	f7ff fada 	bl	800012c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b7a:	0080      	lsls	r0, r0, #2
 8000b7c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b7e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000b80:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000b82:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8000b84:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000b86:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000b88:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000b8a:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b8c:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000b8e:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8000b90:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000b92:	77e0      	strb	r0, [r4, #31]
}  
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	ffffc00f 	.word	0xffffc00f
 8000b9c:	bffdfff8 	.word	0xbffdfff8
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_DMA_Start_IT>:
{
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000ba6:	1c46      	adds	r6, r0, #1
 8000ba8:	7ff5      	ldrb	r5, [r6, #31]
 8000baa:	2402      	movs	r4, #2
 8000bac:	2d01      	cmp	r5, #1
 8000bae:	d026      	beq.n	8000bfe <HAL_DMA_Start_IT+0x5a>
 8000bb0:	2501      	movs	r5, #1
 8000bb2:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bb4:	1905      	adds	r5, r0, r4
 8000bb6:	46ac      	mov	ip, r5
 8000bb8:	7fed      	ldrb	r5, [r5, #31]
 8000bba:	2700      	movs	r7, #0
 8000bbc:	b2ed      	uxtb	r5, r5
 8000bbe:	2d01      	cmp	r5, #1
 8000bc0:	d129      	bne.n	8000c16 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000bc2:	4666      	mov	r6, ip
 8000bc4:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bc6:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc8:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bca:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bcc:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bce:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bd0:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bd2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bd4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000bd6:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000bd8:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bda:	6843      	ldr	r3, [r0, #4]
 8000bdc:	6805      	ldr	r5, [r0, #0]
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	d10f      	bne.n	8000c02 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8000be2:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000be4:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000be6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000be8:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00c      	beq.n	8000c08 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bee:	230e      	movs	r3, #14
 8000bf0:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000bf2:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000bf4:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8000bf6:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000bf8:	682a      	ldr	r2, [r5, #0]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	602b      	str	r3, [r5, #0]
} 
 8000bfe:	0020      	movs	r0, r4
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000c02:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c04:	60e2      	str	r2, [r4, #12]
 8000c06:	e7ee      	b.n	8000be6 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c08:	230a      	movs	r3, #10
 8000c0a:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c0c:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c0e:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	4393      	bics	r3, r2
 8000c14:	e7ed      	b.n	8000bf2 <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 8000c16:	77f7      	strb	r7, [r6, #31]
 8000c18:	e7f1      	b.n	8000bfe <HAL_DMA_Start_IT+0x5a>

08000c1a <HAL_DMA_Abort_IT>:
{  
 8000c1a:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c1c:	1c84      	adds	r4, r0, #2
 8000c1e:	7fe3      	ldrb	r3, [r4, #31]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d004      	beq.n	8000c2e <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c24:	2304      	movs	r3, #4
 8000c26:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000c28:	3b03      	subs	r3, #3
}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c2e:	210e      	movs	r1, #14
 8000c30:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c32:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	438a      	bics	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	6819      	ldr	r1, [r3, #0]
 8000c3e:	4391      	bics	r1, r2
 8000c40:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c42:	0011      	movs	r1, r2
 8000c44:	40a9      	lsls	r1, r5
 8000c46:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000c48:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000c4a:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8000c50:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000c52:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000c54:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000c56:	42a2      	cmp	r2, r4
 8000c58:	d0e7      	beq.n	8000c2a <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000c5a:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000c5c:	0023      	movs	r3, r4
 8000c5e:	e7e4      	b.n	8000c2a <HAL_DMA_Abort_IT+0x10>

08000c60 <HAL_DMA_IRQHandler>:
{
 8000c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c62:	2704      	movs	r7, #4
 8000c64:	003e      	movs	r6, r7
 8000c66:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c6a:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c6c:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000c6e:	6803      	ldr	r3, [r0, #0]
 8000c70:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c72:	422e      	tst	r6, r5
 8000c74:	d00d      	beq.n	8000c92 <HAL_DMA_IRQHandler+0x32>
 8000c76:	423c      	tst	r4, r7
 8000c78:	d00b      	beq.n	8000c92 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	0689      	lsls	r1, r1, #26
 8000c7e:	d402      	bmi.n	8000c86 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c80:	6819      	ldr	r1, [r3, #0]
 8000c82:	43b9      	bics	r1, r7
 8000c84:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c88:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d019      	beq.n	8000cc2 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8000c8e:	4798      	blx	r3
}  
 8000c90:	e017      	b.n	8000cc2 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c92:	2702      	movs	r7, #2
 8000c94:	003e      	movs	r6, r7
 8000c96:	408e      	lsls	r6, r1
 8000c98:	422e      	tst	r6, r5
 8000c9a:	d013      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x64>
 8000c9c:	423c      	tst	r4, r7
 8000c9e:	d011      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ca0:	6819      	ldr	r1, [r3, #0]
 8000ca2:	0689      	lsls	r1, r1, #26
 8000ca4:	d406      	bmi.n	8000cb4 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ca6:	240a      	movs	r4, #10
 8000ca8:	6819      	ldr	r1, [r3, #0]
 8000caa:	43a1      	bics	r1, r4
 8000cac:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000cae:	2101      	movs	r1, #1
 8000cb0:	19c3      	adds	r3, r0, r7
 8000cb2:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cb4:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	1c43      	adds	r3, r0, #1
 8000cba:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8000cbc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d1e5      	bne.n	8000c8e <HAL_DMA_IRQHandler+0x2e>
}  
 8000cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cc4:	2608      	movs	r6, #8
 8000cc6:	0037      	movs	r7, r6
 8000cc8:	408f      	lsls	r7, r1
 8000cca:	423d      	tst	r5, r7
 8000ccc:	d0f9      	beq.n	8000cc2 <HAL_DMA_IRQHandler+0x62>
 8000cce:	4234      	tst	r4, r6
 8000cd0:	d0f7      	beq.n	8000cc2 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd2:	250e      	movs	r5, #14
 8000cd4:	681c      	ldr	r4, [r3, #0]
 8000cd6:	43ac      	bics	r4, r5
 8000cd8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	001c      	movs	r4, r3
 8000cde:	408c      	lsls	r4, r1
 8000ce0:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8000ce2:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ce4:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000ce6:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8000ce8:	2200      	movs	r2, #0
 8000cea:	18c3      	adds	r3, r0, r3
 8000cec:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8000cee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000cf0:	e7e5      	b.n	8000cbe <HAL_DMA_IRQHandler+0x5e>
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cf6:	680b      	ldr	r3, [r1, #0]
{ 
 8000cf8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cfa:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000cfc:	2300      	movs	r3, #0
{ 
 8000cfe:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d00:	9a02      	ldr	r2, [sp, #8]
 8000d02:	40da      	lsrs	r2, r3
 8000d04:	d101      	bne.n	8000d0a <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000d06:	b007      	add	sp, #28
 8000d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	9203      	str	r2, [sp, #12]
 8000d10:	9903      	ldr	r1, [sp, #12]
 8000d12:	9a02      	ldr	r2, [sp, #8]
 8000d14:	400a      	ands	r2, r1
 8000d16:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000d18:	d100      	bne.n	8000d1c <HAL_GPIO_Init+0x28>
 8000d1a:	e08c      	b.n	8000e36 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000d1c:	9a01      	ldr	r2, [sp, #4]
 8000d1e:	2110      	movs	r1, #16
 8000d20:	6852      	ldr	r2, [r2, #4]
 8000d22:	0016      	movs	r6, r2
 8000d24:	438e      	bics	r6, r1
 8000d26:	2e02      	cmp	r6, #2
 8000d28:	d10e      	bne.n	8000d48 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000d2a:	2507      	movs	r5, #7
 8000d2c:	401d      	ands	r5, r3
 8000d2e:	00ad      	lsls	r5, r5, #2
 8000d30:	3901      	subs	r1, #1
 8000d32:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000d34:	08dc      	lsrs	r4, r3, #3
 8000d36:	00a4      	lsls	r4, r4, #2
 8000d38:	1904      	adds	r4, r0, r4
 8000d3a:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000d3c:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000d3e:	9901      	ldr	r1, [sp, #4]
 8000d40:	6909      	ldr	r1, [r1, #16]
 8000d42:	40a9      	lsls	r1, r5
 8000d44:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000d46:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000d48:	2403      	movs	r4, #3
 8000d4a:	005f      	lsls	r7, r3, #1
 8000d4c:	40bc      	lsls	r4, r7
 8000d4e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000d50:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d52:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000d54:	4025      	ands	r5, r4
 8000d56:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d58:	2503      	movs	r5, #3
 8000d5a:	4015      	ands	r5, r2
 8000d5c:	40bd      	lsls	r5, r7
 8000d5e:	4661      	mov	r1, ip
 8000d60:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000d62:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d80f      	bhi.n	8000d88 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000d68:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000d6a:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000d6c:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d6e:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000d70:	40bd      	lsls	r5, r7
 8000d72:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000d74:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d76:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d78:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d7a:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d7c:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d7e:	2101      	movs	r1, #1
 8000d80:	400d      	ands	r5, r1
 8000d82:	409d      	lsls	r5, r3
 8000d84:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000d86:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d88:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000d8a:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000d8e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d90:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000d92:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d94:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000d96:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000d98:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d9a:	420a      	tst	r2, r1
 8000d9c:	d04b      	beq.n	8000e36 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4c26      	ldr	r4, [pc, #152]	; (8000e3c <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000da2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000da6:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da8:	430d      	orrs	r5, r1
 8000daa:	61a5      	str	r5, [r4, #24]
 8000dac:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000dae:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db0:	400c      	ands	r4, r1
 8000db2:	9405      	str	r4, [sp, #20]
 8000db4:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000db6:	240f      	movs	r4, #15
 8000db8:	4921      	ldr	r1, [pc, #132]	; (8000e40 <HAL_GPIO_Init+0x14c>)
 8000dba:	00ad      	lsls	r5, r5, #2
 8000dbc:	00b6      	lsls	r6, r6, #2
 8000dbe:	186d      	adds	r5, r5, r1
 8000dc0:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc2:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000dc4:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc6:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000dc8:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dca:	2400      	movs	r4, #0
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	d00c      	beq.n	8000dea <HAL_GPIO_Init+0xf6>
 8000dd0:	491c      	ldr	r1, [pc, #112]	; (8000e44 <HAL_GPIO_Init+0x150>)
 8000dd2:	3401      	adds	r4, #1
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	d008      	beq.n	8000dea <HAL_GPIO_Init+0xf6>
 8000dd8:	491b      	ldr	r1, [pc, #108]	; (8000e48 <HAL_GPIO_Init+0x154>)
 8000dda:	3401      	adds	r4, #1
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	d004      	beq.n	8000dea <HAL_GPIO_Init+0xf6>
 8000de0:	491a      	ldr	r1, [pc, #104]	; (8000e4c <HAL_GPIO_Init+0x158>)
 8000de2:	3403      	adds	r4, #3
 8000de4:	4288      	cmp	r0, r1
 8000de6:	d100      	bne.n	8000dea <HAL_GPIO_Init+0xf6>
 8000de8:	3c02      	subs	r4, #2
 8000dea:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dec:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000df0:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000df2:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000df4:	4c16      	ldr	r4, [pc, #88]	; (8000e50 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000df6:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000df8:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000dfa:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfc:	03d1      	lsls	r1, r2, #15
 8000dfe:	d401      	bmi.n	8000e04 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e00:	003e      	movs	r6, r7
 8000e02:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000e04:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000e06:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000e08:	9e00      	ldr	r6, [sp, #0]
 8000e0a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e0c:	0391      	lsls	r1, r2, #14
 8000e0e:	d401      	bmi.n	8000e14 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000e10:	003e      	movs	r6, r7
 8000e12:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000e14:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000e16:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000e18:	9e00      	ldr	r6, [sp, #0]
 8000e1a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e1c:	02d1      	lsls	r1, r2, #11
 8000e1e:	d401      	bmi.n	8000e24 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e20:	003e      	movs	r6, r7
 8000e22:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000e24:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000e26:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000e28:	9f00      	ldr	r7, [sp, #0]
 8000e2a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e2c:	0292      	lsls	r2, r2, #10
 8000e2e:	d401      	bmi.n	8000e34 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e30:	402e      	ands	r6, r5
 8000e32:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000e34:	60e7      	str	r7, [r4, #12]
    position++;
 8000e36:	3301      	adds	r3, #1
 8000e38:	e762      	b.n	8000d00 <HAL_GPIO_Init+0xc>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	48000800 	.word	0x48000800
 8000e4c:	48000c00 	.word	0x48000c00
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e54:	6900      	ldr	r0, [r0, #16]
 8000e56:	4008      	ands	r0, r1
 8000e58:	1e41      	subs	r1, r0, #1
 8000e5a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000e5c:	b2c0      	uxtb	r0, r0
  }
 8000e5e:	4770      	bx	lr

08000e60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e64:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e66:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e68:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000e6a:	e7fc      	b.n	8000e66 <HAL_GPIO_WritePin+0x6>

08000e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000e6e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000e70:	695a      	ldr	r2, [r3, #20]
 8000e72:	4210      	tst	r0, r2
 8000e74:	d002      	beq.n	8000e7c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e76:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e78:	f001 f9d2 	bl	8002220 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e7c:	bd10      	pop	{r4, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	40010400 	.word	0x40010400

08000e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	6803      	ldr	r3, [r0, #0]
{
 8000e88:	b085      	sub	sp, #20
 8000e8a:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8c:	07db      	lsls	r3, r3, #31
 8000e8e:	d42f      	bmi.n	8000ef0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	079b      	lsls	r3, r3, #30
 8000e94:	d500      	bpl.n	8000e98 <HAL_RCC_OscConfig+0x14>
 8000e96:	e081      	b.n	8000f9c <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	071b      	lsls	r3, r3, #28
 8000e9c:	d500      	bpl.n	8000ea0 <HAL_RCC_OscConfig+0x1c>
 8000e9e:	e0bc      	b.n	800101a <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	075b      	lsls	r3, r3, #29
 8000ea4:	d500      	bpl.n	8000ea8 <HAL_RCC_OscConfig+0x24>
 8000ea6:	e0df      	b.n	8001068 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	06db      	lsls	r3, r3, #27
 8000eac:	d51a      	bpl.n	8000ee4 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000eae:	696a      	ldr	r2, [r5, #20]
 8000eb0:	4cb5      	ldr	r4, [pc, #724]	; (8001188 <HAL_RCC_OscConfig+0x304>)
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	2a01      	cmp	r2, #1
 8000eb6:	d000      	beq.n	8000eba <HAL_RCC_OscConfig+0x36>
 8000eb8:	e14b      	b.n	8001152 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eba:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ebc:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fb74 	bl	80005b4 <HAL_GetTick>
 8000ecc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ed0:	4233      	tst	r3, r6
 8000ed2:	d100      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x52>
 8000ed4:	e136      	b.n	8001144 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ed6:	21f8      	movs	r1, #248	; 0xf8
 8000ed8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000eda:	69ab      	ldr	r3, [r5, #24]
 8000edc:	438a      	bics	r2, r1
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ee4:	6a29      	ldr	r1, [r5, #32]
 8000ee6:	2900      	cmp	r1, #0
 8000ee8:	d000      	beq.n	8000eec <HAL_RCC_OscConfig+0x68>
 8000eea:	e159      	b.n	80011a0 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000eec:	2000      	movs	r0, #0
 8000eee:	e013      	b.n	8000f18 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ef0:	210c      	movs	r1, #12
 8000ef2:	4ca5      	ldr	r4, [pc, #660]	; (8001188 <HAL_RCC_OscConfig+0x304>)
 8000ef4:	6862      	ldr	r2, [r4, #4]
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	2a04      	cmp	r2, #4
 8000efa:	d006      	beq.n	8000f0a <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	400b      	ands	r3, r1
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d10b      	bne.n	8000f1c <HAL_RCC_OscConfig+0x98>
 8000f04:	6863      	ldr	r3, [r4, #4]
 8000f06:	03db      	lsls	r3, r3, #15
 8000f08:	d508      	bpl.n	8000f1c <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	039b      	lsls	r3, r3, #14
 8000f0e:	d5bf      	bpl.n	8000e90 <HAL_RCC_OscConfig+0xc>
 8000f10:	686b      	ldr	r3, [r5, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1bc      	bne.n	8000e90 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000f16:	2001      	movs	r0, #1
}
 8000f18:	b005      	add	sp, #20
 8000f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1c:	686b      	ldr	r3, [r5, #4]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d113      	bne.n	8000f4a <HAL_RCC_OscConfig+0xc6>
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	6822      	ldr	r2, [r4, #0]
 8000f26:	025b      	lsls	r3, r3, #9
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fb42 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f30:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f32:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f34:	02b6      	lsls	r6, r6, #10
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	4233      	tst	r3, r6
 8000f3a:	d1a9      	bne.n	8000e90 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fb3a 	bl	80005b4 <HAL_GetTick>
 8000f40:	1bc0      	subs	r0, r0, r7
 8000f42:	2864      	cmp	r0, #100	; 0x64
 8000f44:	d9f7      	bls.n	8000f36 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000f46:	2003      	movs	r0, #3
 8000f48:	e7e6      	b.n	8000f18 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d116      	bne.n	8000f7c <HAL_RCC_OscConfig+0xf8>
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	4a8e      	ldr	r2, [pc, #568]	; (800118c <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	4013      	ands	r3, r2
 8000f56:	6023      	str	r3, [r4, #0]
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	4a8d      	ldr	r2, [pc, #564]	; (8001190 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5e:	4013      	ands	r3, r2
 8000f60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb27 	bl	80005b4 <HAL_GetTick>
 8000f66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	4233      	tst	r3, r6
 8000f6c:	d100      	bne.n	8000f70 <HAL_RCC_OscConfig+0xec>
 8000f6e:	e78f      	b.n	8000e90 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fb20 	bl	80005b4 <HAL_GetTick>
 8000f74:	1bc0      	subs	r0, r0, r7
 8000f76:	2864      	cmp	r0, #100	; 0x64
 8000f78:	d9f6      	bls.n	8000f68 <HAL_RCC_OscConfig+0xe4>
 8000f7a:	e7e4      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d105      	bne.n	8000f8c <HAL_RCC_OscConfig+0x108>
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	6822      	ldr	r2, [r4, #0]
 8000f84:	02db      	lsls	r3, r3, #11
 8000f86:	4313      	orrs	r3, r2
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	e7ca      	b.n	8000f22 <HAL_RCC_OscConfig+0x9e>
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	4a7f      	ldr	r2, [pc, #508]	; (800118c <HAL_RCC_OscConfig+0x308>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	6023      	str	r3, [r4, #0]
 8000f94:	6823      	ldr	r3, [r4, #0]
 8000f96:	4a7e      	ldr	r2, [pc, #504]	; (8001190 <HAL_RCC_OscConfig+0x30c>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	e7c6      	b.n	8000f2a <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f9c:	220c      	movs	r2, #12
 8000f9e:	4c7a      	ldr	r4, [pc, #488]	; (8001188 <HAL_RCC_OscConfig+0x304>)
 8000fa0:	6863      	ldr	r3, [r4, #4]
 8000fa2:	4213      	tst	r3, r2
 8000fa4:	d006      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fa6:	6863      	ldr	r3, [r4, #4]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d110      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x14c>
 8000fae:	6863      	ldr	r3, [r4, #4]
 8000fb0:	03db      	lsls	r3, r3, #15
 8000fb2:	d40d      	bmi.n	8000fd0 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	079b      	lsls	r3, r3, #30
 8000fb8:	d502      	bpl.n	8000fc0 <HAL_RCC_OscConfig+0x13c>
 8000fba:	68eb      	ldr	r3, [r5, #12]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d1aa      	bne.n	8000f16 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	21f8      	movs	r1, #248	; 0xf8
 8000fc2:	6822      	ldr	r2, [r4, #0]
 8000fc4:	692b      	ldr	r3, [r5, #16]
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	e763      	b.n	8000e98 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd0:	68ea      	ldr	r2, [r5, #12]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	d00f      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000fd8:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fda:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fae8 	bl	80005b4 <HAL_GetTick>
 8000fe4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	4233      	tst	r3, r6
 8000fea:	d1e9      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fec:	f7ff fae2 	bl	80005b4 <HAL_GetTick>
 8000ff0:	1bc0      	subs	r0, r0, r7
 8000ff2:	2802      	cmp	r0, #2
 8000ff4:	d9f7      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x162>
 8000ff6:	e7a6      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000ff8:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffa:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000ffc:	439a      	bics	r2, r3
 8000ffe:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8001000:	f7ff fad8 	bl	80005b4 <HAL_GetTick>
 8001004:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	4233      	tst	r3, r6
 800100a:	d100      	bne.n	800100e <HAL_RCC_OscConfig+0x18a>
 800100c:	e744      	b.n	8000e98 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fad1 	bl	80005b4 <HAL_GetTick>
 8001012:	1bc0      	subs	r0, r0, r7
 8001014:	2802      	cmp	r0, #2
 8001016:	d9f6      	bls.n	8001006 <HAL_RCC_OscConfig+0x182>
 8001018:	e795      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101a:	69ea      	ldr	r2, [r5, #28]
 800101c:	2301      	movs	r3, #1
 800101e:	4c5a      	ldr	r4, [pc, #360]	; (8001188 <HAL_RCC_OscConfig+0x304>)
 8001020:	2a00      	cmp	r2, #0
 8001022:	d010      	beq.n	8001046 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8001024:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001026:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001028:	4313      	orrs	r3, r2
 800102a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800102c:	f7ff fac2 	bl	80005b4 <HAL_GetTick>
 8001030:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001034:	4233      	tst	r3, r6
 8001036:	d000      	beq.n	800103a <HAL_RCC_OscConfig+0x1b6>
 8001038:	e732      	b.n	8000ea0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103a:	f7ff fabb 	bl	80005b4 <HAL_GetTick>
 800103e:	1bc0      	subs	r0, r0, r7
 8001040:	2802      	cmp	r0, #2
 8001042:	d9f6      	bls.n	8001032 <HAL_RCC_OscConfig+0x1ae>
 8001044:	e77f      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8001046:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001048:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800104a:	439a      	bics	r2, r3
 800104c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800104e:	f7ff fab1 	bl	80005b4 <HAL_GetTick>
 8001052:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001056:	4233      	tst	r3, r6
 8001058:	d100      	bne.n	800105c <HAL_RCC_OscConfig+0x1d8>
 800105a:	e721      	b.n	8000ea0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800105c:	f7ff faaa 	bl	80005b4 <HAL_GetTick>
 8001060:	1bc0      	subs	r0, r0, r7
 8001062:	2802      	cmp	r0, #2
 8001064:	d9f6      	bls.n	8001054 <HAL_RCC_OscConfig+0x1d0>
 8001066:	e76e      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001068:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800106a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106c:	4c46      	ldr	r4, [pc, #280]	; (8001188 <HAL_RCC_OscConfig+0x304>)
 800106e:	0552      	lsls	r2, r2, #21
 8001070:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001072:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001074:	4213      	tst	r3, r2
 8001076:	d108      	bne.n	800108a <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	69e3      	ldr	r3, [r4, #28]
 800107a:	4313      	orrs	r3, r2
 800107c:	61e3      	str	r3, [r4, #28]
 800107e:	69e3      	ldr	r3, [r4, #28]
 8001080:	4013      	ands	r3, r2
 8001082:	9303      	str	r3, [sp, #12]
 8001084:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001086:	2301      	movs	r3, #1
 8001088:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108a:	2780      	movs	r7, #128	; 0x80
 800108c:	4e41      	ldr	r6, [pc, #260]	; (8001194 <HAL_RCC_OscConfig+0x310>)
 800108e:	007f      	lsls	r7, r7, #1
 8001090:	6833      	ldr	r3, [r6, #0]
 8001092:	423b      	tst	r3, r7
 8001094:	d006      	beq.n	80010a4 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001096:	68ab      	ldr	r3, [r5, #8]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d113      	bne.n	80010c4 <HAL_RCC_OscConfig+0x240>
 800109c:	6a22      	ldr	r2, [r4, #32]
 800109e:	4313      	orrs	r3, r2
 80010a0:	6223      	str	r3, [r4, #32]
 80010a2:	e030      	b.n	8001106 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a4:	6833      	ldr	r3, [r6, #0]
 80010a6:	433b      	orrs	r3, r7
 80010a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010aa:	f7ff fa83 	bl	80005b4 <HAL_GetTick>
 80010ae:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b0:	6833      	ldr	r3, [r6, #0]
 80010b2:	423b      	tst	r3, r7
 80010b4:	d1ef      	bne.n	8001096 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b6:	f7ff fa7d 	bl	80005b4 <HAL_GetTick>
 80010ba:	9b01      	ldr	r3, [sp, #4]
 80010bc:	1ac0      	subs	r0, r0, r3
 80010be:	2864      	cmp	r0, #100	; 0x64
 80010c0:	d9f6      	bls.n	80010b0 <HAL_RCC_OscConfig+0x22c>
 80010c2:	e740      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
 80010c4:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d114      	bne.n	80010f4 <HAL_RCC_OscConfig+0x270>
 80010ca:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010cc:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ce:	4393      	bics	r3, r2
 80010d0:	6223      	str	r3, [r4, #32]
 80010d2:	6a23      	ldr	r3, [r4, #32]
 80010d4:	3203      	adds	r2, #3
 80010d6:	4393      	bics	r3, r2
 80010d8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010da:	f7ff fa6b 	bl	80005b4 <HAL_GetTick>
 80010de:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e0:	6a23      	ldr	r3, [r4, #32]
 80010e2:	423b      	tst	r3, r7
 80010e4:	d025      	beq.n	8001132 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff fa65 	bl	80005b4 <HAL_GetTick>
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_RCC_OscConfig+0x314>)
 80010ec:	1b80      	subs	r0, r0, r6
 80010ee:	4298      	cmp	r0, r3
 80010f0:	d9f6      	bls.n	80010e0 <HAL_RCC_OscConfig+0x25c>
 80010f2:	e728      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_OscConfig+0x28c>
 80010f8:	6a21      	ldr	r1, [r4, #32]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	430b      	orrs	r3, r1
 80010fe:	6223      	str	r3, [r4, #32]
 8001100:	6a23      	ldr	r3, [r4, #32]
 8001102:	431a      	orrs	r2, r3
 8001104:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8001106:	f7ff fa55 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800110c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110e:	e00d      	b.n	800112c <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001110:	6a23      	ldr	r3, [r4, #32]
 8001112:	4393      	bics	r3, r2
 8001114:	2204      	movs	r2, #4
 8001116:	6223      	str	r3, [r4, #32]
 8001118:	6a23      	ldr	r3, [r4, #32]
 800111a:	4393      	bics	r3, r2
 800111c:	e7c0      	b.n	80010a0 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fa49 	bl	80005b4 <HAL_GetTick>
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_RCC_OscConfig+0x314>)
 8001124:	1b80      	subs	r0, r0, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d900      	bls.n	800112c <HAL_RCC_OscConfig+0x2a8>
 800112a:	e70c      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112c:	6a23      	ldr	r3, [r4, #32]
 800112e:	423b      	tst	r3, r7
 8001130:	d0f5      	beq.n	800111e <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8001132:	9b00      	ldr	r3, [sp, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d000      	beq.n	800113a <HAL_RCC_OscConfig+0x2b6>
 8001138:	e6b6      	b.n	8000ea8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800113a:	69e3      	ldr	r3, [r4, #28]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_RCC_OscConfig+0x318>)
 800113e:	4013      	ands	r3, r2
 8001140:	61e3      	str	r3, [r4, #28]
 8001142:	e6b1      	b.n	8000ea8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001144:	f7ff fa36 	bl	80005b4 <HAL_GetTick>
 8001148:	1bc0      	subs	r0, r0, r7
 800114a:	2802      	cmp	r0, #2
 800114c:	d800      	bhi.n	8001150 <HAL_RCC_OscConfig+0x2cc>
 800114e:	e6be      	b.n	8000ece <HAL_RCC_OscConfig+0x4a>
 8001150:	e6f9      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001152:	3205      	adds	r2, #5
 8001154:	d103      	bne.n	800115e <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001156:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001158:	439a      	bics	r2, r3
 800115a:	6362      	str	r2, [r4, #52]	; 0x34
 800115c:	e6bb      	b.n	8000ed6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 800115e:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001160:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001162:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001164:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001166:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800116a:	4393      	bics	r3, r2
 800116c:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800116e:	f7ff fa21 	bl	80005b4 <HAL_GetTick>
 8001172:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001176:	4233      	tst	r3, r6
 8001178:	d100      	bne.n	800117c <HAL_RCC_OscConfig+0x2f8>
 800117a:	e6b3      	b.n	8000ee4 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800117c:	f7ff fa1a 	bl	80005b4 <HAL_GetTick>
 8001180:	1bc0      	subs	r0, r0, r7
 8001182:	2802      	cmp	r0, #2
 8001184:	d9f6      	bls.n	8001174 <HAL_RCC_OscConfig+0x2f0>
 8001186:	e6de      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
 8001188:	40021000 	.word	0x40021000
 800118c:	fffeffff 	.word	0xfffeffff
 8001190:	fffbffff 	.word	0xfffbffff
 8001194:	40007000 	.word	0x40007000
 8001198:	00001388 	.word	0x00001388
 800119c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a0:	220c      	movs	r2, #12
 80011a2:	4c26      	ldr	r4, [pc, #152]	; (800123c <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80011a4:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a6:	6863      	ldr	r3, [r4, #4]
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d100      	bne.n	80011b0 <HAL_RCC_OscConfig+0x32c>
 80011ae:	e6b3      	b.n	8000f18 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <HAL_RCC_OscConfig+0x3bc>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b8:	2902      	cmp	r1, #2
 80011ba:	d12f      	bne.n	800121c <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80011bc:	f7ff f9fa 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80011c2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	04b6      	lsls	r6, r6, #18
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	4233      	tst	r3, r6
 80011ca:	d121      	bne.n	8001210 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011cc:	220f      	movs	r2, #15
 80011ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011d0:	4393      	bics	r3, r2
 80011d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80011d4:	4313      	orrs	r3, r2
 80011d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80011da:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80011dc:	6862      	ldr	r2, [r4, #4]
 80011de:	430b      	orrs	r3, r1
 80011e0:	4918      	ldr	r1, [pc, #96]	; (8001244 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011e4:	400a      	ands	r2, r1
 80011e6:	4313      	orrs	r3, r2
 80011e8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	6822      	ldr	r2, [r4, #0]
 80011ee:	045b      	lsls	r3, r3, #17
 80011f0:	4313      	orrs	r3, r2
 80011f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011f4:	f7ff f9de 	bl	80005b4 <HAL_GetTick>
 80011f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011fa:	04ad      	lsls	r5, r5, #18
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	422b      	tst	r3, r5
 8001200:	d000      	beq.n	8001204 <HAL_RCC_OscConfig+0x380>
 8001202:	e673      	b.n	8000eec <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff f9d6 	bl	80005b4 <HAL_GetTick>
 8001208:	1b80      	subs	r0, r0, r6
 800120a:	2802      	cmp	r0, #2
 800120c:	d9f6      	bls.n	80011fc <HAL_RCC_OscConfig+0x378>
 800120e:	e69a      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001210:	f7ff f9d0 	bl	80005b4 <HAL_GetTick>
 8001214:	1bc0      	subs	r0, r0, r7
 8001216:	2802      	cmp	r0, #2
 8001218:	d9d5      	bls.n	80011c6 <HAL_RCC_OscConfig+0x342>
 800121a:	e694      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800121c:	f7ff f9ca 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001220:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001222:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001224:	04ad      	lsls	r5, r5, #18
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	422b      	tst	r3, r5
 800122a:	d100      	bne.n	800122e <HAL_RCC_OscConfig+0x3aa>
 800122c:	e65e      	b.n	8000eec <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122e:	f7ff f9c1 	bl	80005b4 <HAL_GetTick>
 8001232:	1b80      	subs	r0, r0, r6
 8001234:	2802      	cmp	r0, #2
 8001236:	d9f6      	bls.n	8001226 <HAL_RCC_OscConfig+0x3a2>
 8001238:	e685      	b.n	8000f46 <HAL_RCC_OscConfig+0xc2>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40021000 	.word	0x40021000
 8001240:	feffffff 	.word	0xfeffffff
 8001244:	ffc2ffff 	.word	0xffc2ffff

08001248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001248:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800124a:	4c14      	ldr	r4, [pc, #80]	; (800129c <HAL_RCC_GetSysClockFreq+0x54>)
{
 800124c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800124e:	2210      	movs	r2, #16
 8001250:	0021      	movs	r1, r4
 8001252:	4668      	mov	r0, sp
 8001254:	f001 fe68 	bl	8002f28 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001258:	0021      	movs	r1, r4
 800125a:	ad04      	add	r5, sp, #16
 800125c:	2210      	movs	r2, #16
 800125e:	3110      	adds	r1, #16
 8001260:	0028      	movs	r0, r5
 8001262:	f001 fe61 	bl	8002f28 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001266:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001268:	4e0d      	ldr	r6, [pc, #52]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x58>)
 800126a:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800126c:	401a      	ands	r2, r3
 800126e:	2a08      	cmp	r2, #8
 8001270:	d111      	bne.n	8001296 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001272:	200f      	movs	r0, #15
 8001274:	466a      	mov	r2, sp
 8001276:	0c99      	lsrs	r1, r3, #18
 8001278:	4001      	ands	r1, r0
 800127a:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800127c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800127e:	4002      	ands	r2, r0
 8001280:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001282:	03db      	lsls	r3, r3, #15
 8001284:	d505      	bpl.n	8001292 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001288:	f7fe ff50 	bl	800012c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800128c:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800128e:	b008      	add	sp, #32
 8001290:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_RCC_GetSysClockFreq+0x60>)
 8001294:	e7fa      	b.n	800128c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001298:	e7f9      	b.n	800128e <HAL_RCC_GetSysClockFreq+0x46>
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	0800392c 	.word	0x0800392c
 80012a0:	40021000 	.word	0x40021000
 80012a4:	007a1200 	.word	0x007a1200
 80012a8:	003d0900 	.word	0x003d0900

080012ac <HAL_RCC_ClockConfig>:
{
 80012ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012ae:	2201      	movs	r2, #1
 80012b0:	4c43      	ldr	r4, [pc, #268]	; (80013c0 <HAL_RCC_ClockConfig+0x114>)
{
 80012b2:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012b4:	6823      	ldr	r3, [r4, #0]
{
 80012b6:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012b8:	4013      	ands	r3, r2
 80012ba:	428b      	cmp	r3, r1
 80012bc:	d31c      	bcc.n	80012f8 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012be:	6832      	ldr	r2, [r6, #0]
 80012c0:	0793      	lsls	r3, r2, #30
 80012c2:	d423      	bmi.n	800130c <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012c4:	07d3      	lsls	r3, r2, #31
 80012c6:	d429      	bmi.n	800131c <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80012c8:	2301      	movs	r3, #1
 80012ca:	6822      	ldr	r2, [r4, #0]
 80012cc:	401a      	ands	r2, r3
 80012ce:	4297      	cmp	r7, r2
 80012d0:	d367      	bcc.n	80013a2 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d2:	6833      	ldr	r3, [r6, #0]
 80012d4:	4c3b      	ldr	r4, [pc, #236]	; (80013c4 <HAL_RCC_ClockConfig+0x118>)
 80012d6:	075b      	lsls	r3, r3, #29
 80012d8:	d46a      	bmi.n	80013b0 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012da:	f7ff ffb5 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 80012de:	6863      	ldr	r3, [r4, #4]
 80012e0:	4a39      	ldr	r2, [pc, #228]	; (80013c8 <HAL_RCC_ClockConfig+0x11c>)
 80012e2:	061b      	lsls	r3, r3, #24
 80012e4:	0f1b      	lsrs	r3, r3, #28
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	40d8      	lsrs	r0, r3
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_RCC_ClockConfig+0x120>)
 80012ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff f936 	bl	8000560 <HAL_InitTick>
  return HAL_OK;
 80012f4:	2000      	movs	r0, #0
 80012f6:	e008      	b.n	800130a <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	4393      	bics	r3, r2
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	4013      	ands	r3, r2
 8001304:	4299      	cmp	r1, r3
 8001306:	d0da      	beq.n	80012be <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8001308:	2001      	movs	r0, #1
}
 800130a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800130c:	20f0      	movs	r0, #240	; 0xf0
 800130e:	492d      	ldr	r1, [pc, #180]	; (80013c4 <HAL_RCC_ClockConfig+0x118>)
 8001310:	684b      	ldr	r3, [r1, #4]
 8001312:	4383      	bics	r3, r0
 8001314:	68b0      	ldr	r0, [r6, #8]
 8001316:	4303      	orrs	r3, r0
 8001318:	604b      	str	r3, [r1, #4]
 800131a:	e7d3      	b.n	80012c4 <HAL_RCC_ClockConfig+0x18>
 800131c:	4d29      	ldr	r5, [pc, #164]	; (80013c4 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001320:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001322:	2a01      	cmp	r2, #1
 8001324:	d11a      	bne.n	800135c <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	d5ee      	bpl.n	8001308 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132a:	2103      	movs	r1, #3
 800132c:	686b      	ldr	r3, [r5, #4]
 800132e:	438b      	bics	r3, r1
 8001330:	4313      	orrs	r3, r2
 8001332:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001334:	f7ff f93e 	bl	80005b4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001338:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800133a:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800133c:	2b01      	cmp	r3, #1
 800133e:	d115      	bne.n	800136c <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001340:	220c      	movs	r2, #12
 8001342:	686b      	ldr	r3, [r5, #4]
 8001344:	4013      	ands	r3, r2
 8001346:	2b04      	cmp	r3, #4
 8001348:	d0be      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134a:	f7ff f933 	bl	80005b4 <HAL_GetTick>
 800134e:	9b01      	ldr	r3, [sp, #4]
 8001350:	1ac0      	subs	r0, r0, r3
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_RCC_ClockConfig+0x124>)
 8001354:	4298      	cmp	r0, r3
 8001356:	d9f3      	bls.n	8001340 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001358:	2003      	movs	r0, #3
 800135a:	e7d6      	b.n	800130a <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800135c:	2a02      	cmp	r2, #2
 800135e:	d102      	bne.n	8001366 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001360:	019b      	lsls	r3, r3, #6
 8001362:	d4e2      	bmi.n	800132a <HAL_RCC_ClockConfig+0x7e>
 8001364:	e7d0      	b.n	8001308 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	079b      	lsls	r3, r3, #30
 8001368:	d4df      	bmi.n	800132a <HAL_RCC_ClockConfig+0x7e>
 800136a:	e7cd      	b.n	8001308 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800136c:	2b02      	cmp	r3, #2
 800136e:	d012      	beq.n	8001396 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001370:	220c      	movs	r2, #12
 8001372:	686b      	ldr	r3, [r5, #4]
 8001374:	4213      	tst	r3, r2
 8001376:	d0a7      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001378:	f7ff f91c 	bl	80005b4 <HAL_GetTick>
 800137c:	9b01      	ldr	r3, [sp, #4]
 800137e:	1ac0      	subs	r0, r0, r3
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_RCC_ClockConfig+0x124>)
 8001382:	4298      	cmp	r0, r3
 8001384:	d9f4      	bls.n	8001370 <HAL_RCC_ClockConfig+0xc4>
 8001386:	e7e7      	b.n	8001358 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001388:	f7ff f914 	bl	80005b4 <HAL_GetTick>
 800138c:	9b01      	ldr	r3, [sp, #4]
 800138e:	1ac0      	subs	r0, r0, r3
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_RCC_ClockConfig+0x124>)
 8001392:	4298      	cmp	r0, r3
 8001394:	d8e0      	bhi.n	8001358 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001396:	220c      	movs	r2, #12
 8001398:	686b      	ldr	r3, [r5, #4]
 800139a:	4013      	ands	r3, r2
 800139c:	2b08      	cmp	r3, #8
 800139e:	d1f3      	bne.n	8001388 <HAL_RCC_ClockConfig+0xdc>
 80013a0:	e792      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	6822      	ldr	r2, [r4, #0]
 80013a4:	439a      	bics	r2, r3
 80013a6:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013a8:	6822      	ldr	r2, [r4, #0]
 80013aa:	421a      	tst	r2, r3
 80013ac:	d1ac      	bne.n	8001308 <HAL_RCC_ClockConfig+0x5c>
 80013ae:	e790      	b.n	80012d2 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	6863      	ldr	r3, [r4, #4]
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_RCC_ClockConfig+0x128>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	68f2      	ldr	r2, [r6, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	6063      	str	r3, [r4, #4]
 80013bc:	e78d      	b.n	80012da <HAL_RCC_ClockConfig+0x2e>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40022000 	.word	0x40022000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	080039b2 	.word	0x080039b2
 80013cc:	20000000 	.word	0x20000000
 80013d0:	00001388 	.word	0x00001388
 80013d4:	fffff8ff 	.word	0xfffff8ff

080013d8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80013d8:	4b01      	ldr	r3, [pc, #4]	; (80013e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80013da:	6818      	ldr	r0, [r3, #0]
}
 80013dc:	4770      	bx	lr
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	20000000 	.word	0x20000000

080013e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	055b      	lsls	r3, r3, #21
 80013ec:	0f5b      	lsrs	r3, r3, #29
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013f2:	6810      	ldr	r0, [r2, #0]
 80013f4:	40d8      	lsrs	r0, r3
}    
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000
 80013fc:	080039c2 	.word	0x080039c2
 8001400:	20000000 	.word	0x20000000

08001404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001406:	6803      	ldr	r3, [r0, #0]
{
 8001408:	b085      	sub	sp, #20
 800140a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800140c:	03db      	lsls	r3, r3, #15
 800140e:	d528      	bpl.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001410:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001412:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001414:	4c37      	ldr	r4, [pc, #220]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001416:	0552      	lsls	r2, r2, #21
 8001418:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800141a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141c:	4213      	tst	r3, r2
 800141e:	d108      	bne.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	69e3      	ldr	r3, [r4, #28]
 8001422:	4313      	orrs	r3, r2
 8001424:	61e3      	str	r3, [r4, #28]
 8001426:	69e3      	ldr	r3, [r4, #28]
 8001428:	4013      	ands	r3, r2
 800142a:	9303      	str	r3, [sp, #12]
 800142c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	2780      	movs	r7, #128	; 0x80
 8001434:	4e30      	ldr	r6, [pc, #192]	; (80014f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001436:	007f      	lsls	r7, r7, #1
 8001438:	6833      	ldr	r3, [r6, #0]
 800143a:	423b      	tst	r3, r7
 800143c:	d026      	beq.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800143e:	22c0      	movs	r2, #192	; 0xc0
 8001440:	6a23      	ldr	r3, [r4, #32]
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	4e2d      	ldr	r6, [pc, #180]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001448:	d132      	bne.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800144a:	6a23      	ldr	r3, [r4, #32]
 800144c:	401e      	ands	r6, r3
 800144e:	686b      	ldr	r3, [r5, #4]
 8001450:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001452:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001454:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001456:	2b01      	cmp	r3, #1
 8001458:	d103      	bne.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800145a:	69e3      	ldr	r3, [r4, #28]
 800145c:	4a28      	ldr	r2, [pc, #160]	; (8001500 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800145e:	4013      	ands	r3, r2
 8001460:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001462:	682a      	ldr	r2, [r5, #0]
 8001464:	07d3      	lsls	r3, r2, #31
 8001466:	d506      	bpl.n	8001476 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001468:	2003      	movs	r0, #3
 800146a:	4922      	ldr	r1, [pc, #136]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 800146c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800146e:	4383      	bics	r3, r0
 8001470:	68a8      	ldr	r0, [r5, #8]
 8001472:	4303      	orrs	r3, r0
 8001474:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001476:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001478:	0693      	lsls	r3, r2, #26
 800147a:	d517      	bpl.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800147c:	2110      	movs	r1, #16
 800147e:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001480:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001482:	438b      	bics	r3, r1
 8001484:	68e9      	ldr	r1, [r5, #12]
 8001486:	430b      	orrs	r3, r1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	e00f      	b.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148c:	6833      	ldr	r3, [r6, #0]
 800148e:	433b      	orrs	r3, r7
 8001490:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001492:	f7ff f88f 	bl	80005b4 <HAL_GetTick>
 8001496:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	6833      	ldr	r3, [r6, #0]
 800149a:	423b      	tst	r3, r7
 800149c:	d1cf      	bne.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149e:	f7ff f889 	bl	80005b4 <HAL_GetTick>
 80014a2:	9b01      	ldr	r3, [sp, #4]
 80014a4:	1ac0      	subs	r0, r0, r3
 80014a6:	2864      	cmp	r0, #100	; 0x64
 80014a8:	d9f6      	bls.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 80014aa:	2003      	movs	r0, #3
}
 80014ac:	b005      	add	sp, #20
 80014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014b0:	6869      	ldr	r1, [r5, #4]
 80014b2:	400a      	ands	r2, r1
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d0c8      	beq.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 80014b8:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014ba:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80014bc:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014be:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4303      	orrs	r3, r0
 80014c4:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014c6:	6a23      	ldr	r3, [r4, #32]
 80014c8:	480e      	ldr	r0, [pc, #56]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014ca:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014cc:	4003      	ands	r3, r0
 80014ce:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80014d0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014d2:	07d3      	lsls	r3, r2, #31
 80014d4:	d5b9      	bpl.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80014d6:	f7ff f86d 	bl	80005b4 <HAL_GetTick>
 80014da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	2202      	movs	r2, #2
 80014de:	6a23      	ldr	r3, [r4, #32]
 80014e0:	4213      	tst	r3, r2
 80014e2:	d1b2      	bne.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff f866 	bl	80005b4 <HAL_GetTick>
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80014ea:	1bc0      	subs	r0, r0, r7
 80014ec:	4298      	cmp	r0, r3
 80014ee:	d9f5      	bls.n	80014dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80014f0:	e7db      	b.n	80014aa <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40007000 	.word	0x40007000
 80014fc:	fffffcff 	.word	0xfffffcff
 8001500:	efffffff 	.word	0xefffffff
 8001504:	fffeffff 	.word	0xfffeffff
 8001508:	00001388 	.word	0x00001388

0800150c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800150c:	2201      	movs	r2, #1
 800150e:	6a03      	ldr	r3, [r0, #32]
{
 8001510:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001512:	4393      	bics	r3, r2
 8001514:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001516:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001518:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800151a:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800151c:	3272      	adds	r2, #114	; 0x72
 800151e:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001520:	680a      	ldr	r2, [r1, #0]
 8001522:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001524:	2202      	movs	r2, #2
 8001526:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001528:	688a      	ldr	r2, [r1, #8]
 800152a:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <TIM_OC1_SetConfig+0x68>)
 800152e:	4290      	cmp	r0, r2
 8001530:	d005      	beq.n	800153e <TIM_OC1_SetConfig+0x32>
 8001532:	4e11      	ldr	r6, [pc, #68]	; (8001578 <TIM_OC1_SetConfig+0x6c>)
 8001534:	42b0      	cmp	r0, r6
 8001536:	d002      	beq.n	800153e <TIM_OC1_SetConfig+0x32>
 8001538:	4e10      	ldr	r6, [pc, #64]	; (800157c <TIM_OC1_SetConfig+0x70>)
 800153a:	42b0      	cmp	r0, r6
 800153c:	d113      	bne.n	8001566 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800153e:	2608      	movs	r6, #8
 8001540:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001542:	68ce      	ldr	r6, [r1, #12]
 8001544:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001546:	2604      	movs	r6, #4
 8001548:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800154a:	4290      	cmp	r0, r2
 800154c:	d005      	beq.n	800155a <TIM_OC1_SetConfig+0x4e>
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <TIM_OC1_SetConfig+0x6c>)
 8001550:	4290      	cmp	r0, r2
 8001552:	d002      	beq.n	800155a <TIM_OC1_SetConfig+0x4e>
 8001554:	4a09      	ldr	r2, [pc, #36]	; (800157c <TIM_OC1_SetConfig+0x70>)
 8001556:	4290      	cmp	r0, r2
 8001558:	d105      	bne.n	8001566 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800155c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800155e:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001560:	694c      	ldr	r4, [r1, #20]
 8001562:	4334      	orrs	r4, r6
 8001564:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001566:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001568:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800156a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800156c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800156e:	6203      	str	r3, [r0, #32]
}
 8001570:	bd70      	pop	{r4, r5, r6, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	40012c00 	.word	0x40012c00
 8001578:	40014400 	.word	0x40014400
 800157c:	40014800 	.word	0x40014800
 8001580:	fffffcff 	.word	0xfffffcff

08001584 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001584:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001586:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001588:	6a03      	ldr	r3, [r0, #32]
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <TIM_OC3_SetConfig+0x60>)
 800158c:	4013      	ands	r3, r2
 800158e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001590:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001592:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001594:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001596:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001598:	680d      	ldr	r5, [r1, #0]
 800159a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800159c:	4d12      	ldr	r5, [pc, #72]	; (80015e8 <TIM_OC3_SetConfig+0x64>)
 800159e:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80015a0:	688d      	ldr	r5, [r1, #8]
 80015a2:	022d      	lsls	r5, r5, #8
 80015a4:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80015a6:	4d11      	ldr	r5, [pc, #68]	; (80015ec <TIM_OC3_SetConfig+0x68>)
 80015a8:	42a8      	cmp	r0, r5
 80015aa:	d10e      	bne.n	80015ca <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80015ac:	4d10      	ldr	r5, [pc, #64]	; (80015f0 <TIM_OC3_SetConfig+0x6c>)
 80015ae:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80015b0:	68cb      	ldr	r3, [r1, #12]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80015b6:	4d0f      	ldr	r5, [pc, #60]	; (80015f4 <TIM_OC3_SetConfig+0x70>)
 80015b8:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80015ba:	4d0f      	ldr	r5, [pc, #60]	; (80015f8 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80015bc:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80015be:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80015c0:	698a      	ldr	r2, [r1, #24]
 80015c2:	4332      	orrs	r2, r6
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	432a      	orrs	r2, r5
 80015c8:	e005      	b.n	80015d6 <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015ca:	4d0c      	ldr	r5, [pc, #48]	; (80015fc <TIM_OC3_SetConfig+0x78>)
 80015cc:	42a8      	cmp	r0, r5
 80015ce:	d0f4      	beq.n	80015ba <TIM_OC3_SetConfig+0x36>
 80015d0:	4d0b      	ldr	r5, [pc, #44]	; (8001600 <TIM_OC3_SetConfig+0x7c>)
 80015d2:	42a8      	cmp	r0, r5
 80015d4:	d0f1      	beq.n	80015ba <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015d6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80015d8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80015da:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80015dc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015de:	6203      	str	r3, [r0, #32]
}
 80015e0:	bd70      	pop	{r4, r5, r6, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	fffffeff 	.word	0xfffffeff
 80015e8:	fffffdff 	.word	0xfffffdff
 80015ec:	40012c00 	.word	0x40012c00
 80015f0:	fffff7ff 	.word	0xfffff7ff
 80015f4:	fffffbff 	.word	0xfffffbff
 80015f8:	ffffcfff 	.word	0xffffcfff
 80015fc:	40014400 	.word	0x40014400
 8001600:	40014800 	.word	0x40014800

08001604 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001604:	6a03      	ldr	r3, [r0, #32]
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <TIM_OC4_SetConfig+0x4c>)
{
 8001608:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800160a:	4013      	ands	r3, r2
 800160c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800160e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001610:	4c10      	ldr	r4, [pc, #64]	; (8001654 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8001612:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001614:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001616:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001618:	680c      	ldr	r4, [r1, #0]
 800161a:	0224      	lsls	r4, r4, #8
 800161c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800161e:	4c0e      	ldr	r4, [pc, #56]	; (8001658 <TIM_OC4_SetConfig+0x54>)
 8001620:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001622:	688c      	ldr	r4, [r1, #8]
 8001624:	0324      	lsls	r4, r4, #12
 8001626:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001628:	4c0c      	ldr	r4, [pc, #48]	; (800165c <TIM_OC4_SetConfig+0x58>)
 800162a:	42a0      	cmp	r0, r4
 800162c:	d005      	beq.n	800163a <TIM_OC4_SetConfig+0x36>
 800162e:	4c0c      	ldr	r4, [pc, #48]	; (8001660 <TIM_OC4_SetConfig+0x5c>)
 8001630:	42a0      	cmp	r0, r4
 8001632:	d002      	beq.n	800163a <TIM_OC4_SetConfig+0x36>
 8001634:	4c0b      	ldr	r4, [pc, #44]	; (8001664 <TIM_OC4_SetConfig+0x60>)
 8001636:	42a0      	cmp	r0, r4
 8001638:	d104      	bne.n	8001644 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800163a:	4c0b      	ldr	r4, [pc, #44]	; (8001668 <TIM_OC4_SetConfig+0x64>)
 800163c:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800163e:	694c      	ldr	r4, [r1, #20]
 8001640:	01a4      	lsls	r4, r4, #6
 8001642:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001644:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001646:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001648:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800164a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800164c:	6202      	str	r2, [r0, #32]
}
 800164e:	bd30      	pop	{r4, r5, pc}
 8001650:	ffffefff 	.word	0xffffefff
 8001654:	ffff8cff 	.word	0xffff8cff
 8001658:	ffffdfff 	.word	0xffffdfff
 800165c:	40012c00 	.word	0x40012c00
 8001660:	40014400 	.word	0x40014400
 8001664:	40014800 	.word	0x40014800
 8001668:	ffffbfff 	.word	0xffffbfff

0800166c <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800166c:	2201      	movs	r2, #1
 800166e:	6803      	ldr	r3, [r0, #0]
 8001670:	68d9      	ldr	r1, [r3, #12]
}
 8001672:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001674:	4311      	orrs	r1, r2
 8001676:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	4770      	bx	lr

08001680 <HAL_TIM_TriggerCallback>:
 8001680:	4770      	bx	lr

08001682 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001682:	2202      	movs	r2, #2
 8001684:	6803      	ldr	r3, [r0, #0]
{
 8001686:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001688:	6919      	ldr	r1, [r3, #16]
{
 800168a:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800168c:	4211      	tst	r1, r2
 800168e:	d00e      	beq.n	80016ae <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001690:	68d9      	ldr	r1, [r3, #12]
 8001692:	4211      	tst	r1, r2
 8001694:	d00b      	beq.n	80016ae <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001696:	3a05      	subs	r2, #5
 8001698:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800169a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800169c:	3204      	adds	r2, #4
 800169e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016a0:	079b      	lsls	r3, r3, #30
 80016a2:	d100      	bne.n	80016a6 <HAL_TIM_IRQHandler+0x24>
 80016a4:	e079      	b.n	800179a <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 80016a6:	f000 fde5 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016aa:	2300      	movs	r3, #0
 80016ac:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016ae:	2204      	movs	r2, #4
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	6919      	ldr	r1, [r3, #16]
 80016b4:	4211      	tst	r1, r2
 80016b6:	d010      	beq.n	80016da <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80016b8:	68d9      	ldr	r1, [r3, #12]
 80016ba:	4211      	tst	r1, r2
 80016bc:	d00d      	beq.n	80016da <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016be:	3a09      	subs	r2, #9
 80016c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016c2:	3207      	adds	r2, #7
 80016c4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	23c0      	movs	r3, #192	; 0xc0
 80016ca:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80016cc:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016ce:	421a      	tst	r2, r3
 80016d0:	d069      	beq.n	80017a6 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80016d2:	f000 fdcf 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d6:	2300      	movs	r3, #0
 80016d8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016da:	2208      	movs	r2, #8
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	6919      	ldr	r1, [r3, #16]
 80016e0:	4211      	tst	r1, r2
 80016e2:	d00e      	beq.n	8001702 <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80016e4:	68d9      	ldr	r1, [r3, #12]
 80016e6:	4211      	tst	r1, r2
 80016e8:	d00b      	beq.n	8001702 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016ea:	3a11      	subs	r2, #17
 80016ec:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016f0:	320d      	adds	r2, #13
 80016f2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80016f4:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016f6:	079b      	lsls	r3, r3, #30
 80016f8:	d05b      	beq.n	80017b2 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80016fa:	f000 fdbb 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fe:	2300      	movs	r3, #0
 8001700:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001702:	2210      	movs	r2, #16
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	6919      	ldr	r1, [r3, #16]
 8001708:	4211      	tst	r1, r2
 800170a:	d010      	beq.n	800172e <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800170c:	68d9      	ldr	r1, [r3, #12]
 800170e:	4211      	tst	r1, r2
 8001710:	d00d      	beq.n	800172e <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001712:	3a21      	subs	r2, #33	; 0x21
 8001714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001716:	3219      	adds	r2, #25
 8001718:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	23c0      	movs	r3, #192	; 0xc0
 800171e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001720:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001722:	421a      	tst	r2, r3
 8001724:	d04b      	beq.n	80017be <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8001726:	f000 fda5 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172a:	2300      	movs	r3, #0
 800172c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800172e:	2201      	movs	r2, #1
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	6919      	ldr	r1, [r3, #16]
 8001734:	4211      	tst	r1, r2
 8001736:	d007      	beq.n	8001748 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001738:	68d9      	ldr	r1, [r3, #12]
 800173a:	4211      	tst	r1, r2
 800173c:	d004      	beq.n	8001748 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800173e:	3a03      	subs	r2, #3
 8001740:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001742:	0020      	movs	r0, r4
 8001744:	f000 fd72 	bl	800222c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	6919      	ldr	r1, [r3, #16]
 800174e:	4211      	tst	r1, r2
 8001750:	d008      	beq.n	8001764 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001752:	68d9      	ldr	r1, [r3, #12]
 8001754:	4211      	tst	r1, r2
 8001756:	d005      	beq.n	8001764 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001758:	3a02      	subs	r2, #2
 800175a:	3aff      	subs	r2, #255	; 0xff
 800175c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800175e:	0020      	movs	r0, r4
 8001760:	f000 f9bc 	bl	8001adc <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001764:	2240      	movs	r2, #64	; 0x40
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	6919      	ldr	r1, [r3, #16]
 800176a:	4211      	tst	r1, r2
 800176c:	d007      	beq.n	800177e <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800176e:	68d9      	ldr	r1, [r3, #12]
 8001770:	4211      	tst	r1, r2
 8001772:	d004      	beq.n	800177e <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001774:	3a81      	subs	r2, #129	; 0x81
 8001776:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001778:	0020      	movs	r0, r4
 800177a:	f7ff ff81 	bl	8001680 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800177e:	2220      	movs	r2, #32
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	6919      	ldr	r1, [r3, #16]
 8001784:	4211      	tst	r1, r2
 8001786:	d007      	beq.n	8001798 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001788:	68d9      	ldr	r1, [r3, #12]
 800178a:	4211      	tst	r1, r2
 800178c:	d004      	beq.n	8001798 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800178e:	3a41      	subs	r2, #65	; 0x41
 8001790:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001792:	0020      	movs	r0, r4
 8001794:	f000 f9a1 	bl	8001ada <HAL_TIMEx_CommutationCallback>
}
 8001798:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800179a:	f000 fd65 	bl	8002268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179e:	0020      	movs	r0, r4
 80017a0:	f000 fd6e 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
 80017a4:	e781      	b.n	80016aa <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a6:	f000 fd5f 	bl	8002268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017aa:	0020      	movs	r0, r4
 80017ac:	f000 fd68 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
 80017b0:	e791      	b.n	80016d6 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b2:	f000 fd59 	bl	8002268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b6:	0020      	movs	r0, r4
 80017b8:	f000 fd62 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
 80017bc:	e79f      	b.n	80016fe <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017be:	f000 fd53 	bl	8002268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c2:	0020      	movs	r0, r4
 80017c4:	f000 fd5c 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
 80017c8:	e7af      	b.n	800172a <HAL_TIM_IRQHandler+0xa8>
	...

080017cc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <TIM_Base_SetConfig+0x68>)
{
 80017ce:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80017d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d2:	4290      	cmp	r0, r2
 80017d4:	d002      	beq.n	80017dc <TIM_Base_SetConfig+0x10>
 80017d6:	4c18      	ldr	r4, [pc, #96]	; (8001838 <TIM_Base_SetConfig+0x6c>)
 80017d8:	42a0      	cmp	r0, r4
 80017da:	d108      	bne.n	80017ee <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017dc:	2470      	movs	r4, #112	; 0x70
 80017de:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80017e0:	684c      	ldr	r4, [r1, #4]
 80017e2:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017e4:	4290      	cmp	r0, r2
 80017e6:	d00b      	beq.n	8001800 <TIM_Base_SetConfig+0x34>
 80017e8:	4c13      	ldr	r4, [pc, #76]	; (8001838 <TIM_Base_SetConfig+0x6c>)
 80017ea:	42a0      	cmp	r0, r4
 80017ec:	d008      	beq.n	8001800 <TIM_Base_SetConfig+0x34>
 80017ee:	4c13      	ldr	r4, [pc, #76]	; (800183c <TIM_Base_SetConfig+0x70>)
 80017f0:	42a0      	cmp	r0, r4
 80017f2:	d005      	beq.n	8001800 <TIM_Base_SetConfig+0x34>
 80017f4:	4c12      	ldr	r4, [pc, #72]	; (8001840 <TIM_Base_SetConfig+0x74>)
 80017f6:	42a0      	cmp	r0, r4
 80017f8:	d002      	beq.n	8001800 <TIM_Base_SetConfig+0x34>
 80017fa:	4c12      	ldr	r4, [pc, #72]	; (8001844 <TIM_Base_SetConfig+0x78>)
 80017fc:	42a0      	cmp	r0, r4
 80017fe:	d103      	bne.n	8001808 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001800:	4c11      	ldr	r4, [pc, #68]	; (8001848 <TIM_Base_SetConfig+0x7c>)
 8001802:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001804:	68cc      	ldr	r4, [r1, #12]
 8001806:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001808:	2480      	movs	r4, #128	; 0x80
 800180a:	43a3      	bics	r3, r4
 800180c:	694c      	ldr	r4, [r1, #20]
 800180e:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001810:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001812:	688b      	ldr	r3, [r1, #8]
 8001814:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001816:	680b      	ldr	r3, [r1, #0]
 8001818:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800181a:	4290      	cmp	r0, r2
 800181c:	d005      	beq.n	800182a <TIM_Base_SetConfig+0x5e>
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <TIM_Base_SetConfig+0x74>)
 8001820:	4298      	cmp	r0, r3
 8001822:	d002      	beq.n	800182a <TIM_Base_SetConfig+0x5e>
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <TIM_Base_SetConfig+0x78>)
 8001826:	4298      	cmp	r0, r3
 8001828:	d101      	bne.n	800182e <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 800182a:	690b      	ldr	r3, [r1, #16]
 800182c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800182e:	2301      	movs	r3, #1
 8001830:	6143      	str	r3, [r0, #20]
}
 8001832:	bd10      	pop	{r4, pc}
 8001834:	40012c00 	.word	0x40012c00
 8001838:	40000400 	.word	0x40000400
 800183c:	40002000 	.word	0x40002000
 8001840:	40014400 	.word	0x40014400
 8001844:	40014800 	.word	0x40014800
 8001848:	fffffcff 	.word	0xfffffcff

0800184c <HAL_TIM_Base_Init>:
{
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001850:	2001      	movs	r0, #1
  if(htim == NULL)
 8001852:	2c00      	cmp	r4, #0
 8001854:	d014      	beq.n	8001880 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001856:	0025      	movs	r5, r4
 8001858:	353d      	adds	r5, #61	; 0x3d
 800185a:	782b      	ldrb	r3, [r5, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d105      	bne.n	800186e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001862:	0022      	movs	r2, r4
 8001864:	323c      	adds	r2, #60	; 0x3c
 8001866:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001868:	0020      	movs	r0, r4
 800186a:	f000 ffe1 	bl	8002830 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800186e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001870:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001872:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001874:	1d21      	adds	r1, r4, #4
 8001876:	f7ff ffa9 	bl	80017cc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800187a:	2301      	movs	r3, #1
  return HAL_OK;
 800187c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800187e:	702b      	strb	r3, [r5, #0]
}
 8001880:	bd70      	pop	{r4, r5, r6, pc}

08001882 <HAL_TIM_PWM_Init>:
{
 8001882:	b570      	push	{r4, r5, r6, lr}
 8001884:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
  if(htim == NULL)
 8001888:	2c00      	cmp	r4, #0
 800188a:	d014      	beq.n	80018b6 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 800188c:	0025      	movs	r5, r4
 800188e:	353d      	adds	r5, #61	; 0x3d
 8001890:	782b      	ldrb	r3, [r5, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001898:	0022      	movs	r2, r4
 800189a:	323c      	adds	r2, #60	; 0x3c
 800189c:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 800189e:	0020      	movs	r0, r4
 80018a0:	f000 ffaa 	bl	80027f8 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80018a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018a6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80018a8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018aa:	1d21      	adds	r1, r4, #4
 80018ac:	f7ff ff8e 	bl	80017cc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80018b0:	2301      	movs	r3, #1
  return HAL_OK;
 80018b2:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80018b4:	702b      	strb	r3, [r5, #0]
}
 80018b6:	bd70      	pop	{r4, r5, r6, pc}

080018b8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018b8:	2210      	movs	r2, #16
 80018ba:	6a03      	ldr	r3, [r0, #32]
{
 80018bc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018be:	4393      	bics	r3, r2
 80018c0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80018c2:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80018c4:	4d15      	ldr	r5, [pc, #84]	; (800191c <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 80018c6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80018c8:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80018ca:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80018cc:	680d      	ldr	r5, [r1, #0]
 80018ce:	022d      	lsls	r5, r5, #8
 80018d0:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 80018d2:	2520      	movs	r5, #32
 80018d4:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80018d6:	688d      	ldr	r5, [r1, #8]
 80018d8:	012d      	lsls	r5, r5, #4
 80018da:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80018dc:	4d10      	ldr	r5, [pc, #64]	; (8001920 <TIM_OC2_SetConfig+0x68>)
 80018de:	42a8      	cmp	r0, r5
 80018e0:	d10f      	bne.n	8001902 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80018e2:	2580      	movs	r5, #128	; 0x80
 80018e4:	43aa      	bics	r2, r5
 80018e6:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80018e8:	68ca      	ldr	r2, [r1, #12]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80018ee:	2540      	movs	r5, #64	; 0x40
 80018f0:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80018f2:	4d0c      	ldr	r5, [pc, #48]	; (8001924 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80018f4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80018f6:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80018f8:	698b      	ldr	r3, [r1, #24]
 80018fa:	4333      	orrs	r3, r6
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	432b      	orrs	r3, r5
 8001900:	e005      	b.n	800190e <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001902:	4d09      	ldr	r5, [pc, #36]	; (8001928 <TIM_OC2_SetConfig+0x70>)
 8001904:	42a8      	cmp	r0, r5
 8001906:	d0f4      	beq.n	80018f2 <TIM_OC2_SetConfig+0x3a>
 8001908:	4d08      	ldr	r5, [pc, #32]	; (800192c <TIM_OC2_SetConfig+0x74>)
 800190a:	42a8      	cmp	r0, r5
 800190c:	d0f1      	beq.n	80018f2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800190e:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001910:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001912:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001914:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001916:	6202      	str	r2, [r0, #32]
}
 8001918:	bd70      	pop	{r4, r5, r6, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	ffff8cff 	.word	0xffff8cff
 8001920:	40012c00 	.word	0x40012c00
 8001924:	fffff3ff 	.word	0xfffff3ff
 8001928:	40014400 	.word	0x40014400
 800192c:	40014800 	.word	0x40014800

08001930 <HAL_TIM_PWM_ConfigChannel>:
{
 8001930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001932:	0006      	movs	r6, r0
 8001934:	2302      	movs	r3, #2
 8001936:	363c      	adds	r6, #60	; 0x3c
{
 8001938:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800193a:	7831      	ldrb	r1, [r6, #0]
{
 800193c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800193e:	0018      	movs	r0, r3
 8001940:	2901      	cmp	r1, #1
 8001942:	d025      	beq.n	8001990 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8001944:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8001946:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 800194a:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800194c:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 800194e:	2a0c      	cmp	r2, #12
 8001950:	d81a      	bhi.n	8001988 <HAL_TIM_PWM_ConfigChannel+0x58>
 8001952:	0010      	movs	r0, r2
 8001954:	f7fe fbe0 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001958:	18181807 	.word	0x18181807
 800195c:	1818181d 	.word	0x1818181d
 8001960:	1818182f 	.word	0x1818182f
 8001964:	41          	.byte	0x41
 8001965:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001966:	0029      	movs	r1, r5
 8001968:	6820      	ldr	r0, [r4, #0]
 800196a:	f7ff fdcf 	bl	800150c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800196e:	2208      	movs	r2, #8
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	6999      	ldr	r1, [r3, #24]
 8001974:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001976:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001978:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	438a      	bics	r2, r1
 800197e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001984:	430a      	orrs	r2, r1
 8001986:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001988:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800198a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800198c:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 800198e:	7030      	strb	r0, [r6, #0]
}
 8001990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001992:	0029      	movs	r1, r5
 8001994:	6820      	ldr	r0, [r4, #0]
 8001996:	f7ff ff8f 	bl	80018b8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	6999      	ldr	r1, [r3, #24]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	4915      	ldr	r1, [pc, #84]	; (8001a00 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019ae:	692a      	ldr	r2, [r5, #16]
 80019b0:	6999      	ldr	r1, [r3, #24]
 80019b2:	0212      	lsls	r2, r2, #8
 80019b4:	e7e6      	b.n	8001984 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019b6:	0029      	movs	r1, r5
 80019b8:	6820      	ldr	r0, [r4, #0]
 80019ba:	f7ff fde3 	bl	8001584 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019be:	2208      	movs	r2, #8
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	69d9      	ldr	r1, [r3, #28]
 80019c4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019c6:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019ca:	69da      	ldr	r2, [r3, #28]
 80019cc:	438a      	bics	r2, r1
 80019ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019d4:	430a      	orrs	r2, r1
 80019d6:	61da      	str	r2, [r3, #28]
    break;
 80019d8:	e7d6      	b.n	8001988 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019da:	0029      	movs	r1, r5
 80019dc:	6820      	ldr	r0, [r4, #0]
 80019de:	f7ff fe11 	bl	8001604 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	69d9      	ldr	r1, [r3, #28]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	4903      	ldr	r1, [pc, #12]	; (8001a00 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019f6:	692a      	ldr	r2, [r5, #16]
 80019f8:	69d9      	ldr	r1, [r3, #28]
 80019fa:	0212      	lsls	r2, r2, #8
 80019fc:	e7ea      	b.n	80019d4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	fffffbff 	.word	0xfffffbff

08001a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001a04:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a06:	2401      	movs	r4, #1
 8001a08:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a0a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8001a0c:	6a03      	ldr	r3, [r0, #32]
 8001a0e:	43a3      	bics	r3, r4
 8001a10:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a12:	6a03      	ldr	r3, [r0, #32]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	6202      	str	r2, [r0, #32]
}
 8001a18:	bd10      	pop	{r4, pc}
	...

08001a1c <HAL_TIM_PWM_Start_IT>:
{
 8001a1c:	b510      	push	{r4, lr}
 8001a1e:	0004      	movs	r4, r0
  switch (Channel)
 8001a20:	290c      	cmp	r1, #12
 8001a22:	d80e      	bhi.n	8001a42 <HAL_TIM_PWM_Start_IT+0x26>
 8001a24:	0008      	movs	r0, r1
 8001a26:	f7fe fb77 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001a2a:	0c07      	.short	0x0c07
 8001a2c:	0c250c0c 	.word	0x0c250c0c
 8001a30:	0c290c0c 	.word	0x0c290c0c
 8001a34:	0c0c      	.short	0x0c0c
 8001a36:	2d          	.byte	0x2d
 8001a37:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001a38:	2302      	movs	r3, #2
 8001a3a:	6822      	ldr	r2, [r4, #0]
 8001a3c:	68d0      	ldr	r0, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a42:	2201      	movs	r2, #1
 8001a44:	6820      	ldr	r0, [r4, #0]
 8001a46:	f7ff ffdd 	bl	8001a04 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_TIM_PWM_Start_IT+0x70>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d005      	beq.n	8001a5e <HAL_TIM_PWM_Start_IT+0x42>
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <HAL_TIM_PWM_Start_IT+0x74>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d002      	beq.n	8001a5e <HAL_TIM_PWM_Start_IT+0x42>
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_TIM_PWM_Start_IT+0x78>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d104      	bne.n	8001a68 <HAL_TIM_PWM_Start_IT+0x4c>
    __HAL_TIM_MOE_ENABLE(htim);
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a62:	0212      	lsls	r2, r2, #8
 8001a64:	430a      	orrs	r2, r1
 8001a66:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	6819      	ldr	r1, [r3, #0]
}
 8001a6c:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]
}
 8001a72:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001a74:	6822      	ldr	r2, [r4, #0]
 8001a76:	2304      	movs	r3, #4
 8001a78:	68d0      	ldr	r0, [r2, #12]
 8001a7a:	e7e0      	b.n	8001a3e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001a7c:	6822      	ldr	r2, [r4, #0]
 8001a7e:	2308      	movs	r3, #8
 8001a80:	68d0      	ldr	r0, [r2, #12]
 8001a82:	e7dc      	b.n	8001a3e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001a84:	6822      	ldr	r2, [r4, #0]
 8001a86:	2310      	movs	r3, #16
 8001a88:	68d0      	ldr	r0, [r2, #12]
 8001a8a:	e7d8      	b.n	8001a3e <HAL_TIM_PWM_Start_IT+0x22>
 8001a8c:	40012c00 	.word	0x40012c00
 8001a90:	40014400 	.word	0x40014400
 8001a94:	40014800 	.word	0x40014800

08001a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001a98:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001a9a:	0004      	movs	r4, r0
 8001a9c:	343c      	adds	r4, #60	; 0x3c
 8001a9e:	7822      	ldrb	r2, [r4, #0]
{
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001aa4:	2a01      	cmp	r2, #1
 8001aa6:	d017      	beq.n	8001ad8 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001aaa:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	353d      	adds	r5, #61	; 0x3d
 8001aae:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	306e      	adds	r0, #110	; 0x6e
 8001ab4:	4382      	bics	r2, r0
 8001ab6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001abc:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001abe:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001ac0:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001ac2:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	4382      	bics	r2, r0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001aca:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001acc:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001ad6:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001ad8:	bd30      	pop	{r4, r5, pc}

08001ada <HAL_TIMEx_CommutationCallback>:
 8001ada:	4770      	bx	lr

08001adc <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001adc:	4770      	bx	lr
	...

08001ae0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ae0:	6803      	ldr	r3, [r0, #0]
 8001ae2:	4906      	ldr	r1, [pc, #24]	; (8001afc <UART_EndRxTransfer+0x1c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ae6:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ae8:	400a      	ands	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	3123      	adds	r1, #35	; 0x23
 8001af0:	31ff      	adds	r1, #255	; 0xff
 8001af2:	438a      	bics	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8001af6:	2320      	movs	r3, #32
 8001af8:	7003      	strb	r3, [r0, #0]
}
 8001afa:	4770      	bx	lr
 8001afc:	fffffedf 	.word	0xfffffedf

08001b00 <HAL_UART_Transmit_IT>:
{
 8001b00:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8001b02:	0006      	movs	r6, r0
 8001b04:	3669      	adds	r6, #105	; 0x69
 8001b06:	7833      	ldrb	r3, [r6, #0]
{
 8001b08:	0004      	movs	r4, r0
    return HAL_BUSY;
 8001b0a:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	d124      	bne.n	8001b5a <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8001b10:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001b12:	2900      	cmp	r1, #0
 8001b14:	d021      	beq.n	8001b5a <HAL_UART_Transmit_IT+0x5a>
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d01f      	beq.n	8001b5a <HAL_UART_Transmit_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	68a5      	ldr	r5, [r4, #8]
 8001b1e:	015b      	lsls	r3, r3, #5
 8001b20:	429d      	cmp	r5, r3
 8001b22:	d104      	bne.n	8001b2e <HAL_UART_Transmit_IT+0x2e>
 8001b24:	6923      	ldr	r3, [r4, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_UART_Transmit_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8001b2a:	4201      	tst	r1, r0
 8001b2c:	d115      	bne.n	8001b5a <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8001b2e:	0025      	movs	r5, r4
 8001b30:	3568      	adds	r5, #104	; 0x68
 8001b32:	782b      	ldrb	r3, [r5, #0]
    return HAL_BUSY;
 8001b34:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d00f      	beq.n	8001b5a <HAL_UART_Transmit_IT+0x5a>
    huart->TxXferSize = Size;
 8001b3a:	0023      	movs	r3, r4
 8001b3c:	3350      	adds	r3, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8001b3e:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferCount = Size;
 8001b40:	805a      	strh	r2, [r3, #2]
    huart->TxXferSize = Size;
 8001b42:	801a      	strh	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b44:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b46:	2221      	movs	r2, #33	; 0x21
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b48:	6821      	ldr	r1, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b4c:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b4e:	6808      	ldr	r0, [r1, #0]
 8001b50:	325f      	adds	r2, #95	; 0x5f
 8001b52:	4302      	orrs	r2, r0
    return HAL_OK;
 8001b54:	0018      	movs	r0, r3
    __HAL_UNLOCK(huart);
 8001b56:	702b      	strb	r3, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b58:	600a      	str	r2, [r1, #0]
}
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}

08001b5c <HAL_UART_Receive_IT>:
{
 8001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8001b5e:	0006      	movs	r6, r0
 8001b60:	366a      	adds	r6, #106	; 0x6a
 8001b62:	7834      	ldrb	r4, [r6, #0]
{
 8001b64:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001b66:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001b68:	2c20      	cmp	r4, #32
 8001b6a:	d135      	bne.n	8001bd8 <HAL_UART_Receive_IT+0x7c>
      return HAL_ERROR;
 8001b6c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001b6e:	2900      	cmp	r1, #0
 8001b70:	d032      	beq.n	8001bd8 <HAL_UART_Receive_IT+0x7c>
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d030      	beq.n	8001bd8 <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b76:	2480      	movs	r4, #128	; 0x80
 8001b78:	689d      	ldr	r5, [r3, #8]
 8001b7a:	0164      	lsls	r4, r4, #5
 8001b7c:	42a5      	cmp	r5, r4
 8001b7e:	d104      	bne.n	8001b8a <HAL_UART_Receive_IT+0x2e>
 8001b80:	691c      	ldr	r4, [r3, #16]
 8001b82:	2c00      	cmp	r4, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_UART_Receive_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8001b86:	4201      	tst	r1, r0
 8001b88:	d126      	bne.n	8001bd8 <HAL_UART_Receive_IT+0x7c>
    __HAL_LOCK(huart);
 8001b8a:	001c      	movs	r4, r3
 8001b8c:	3468      	adds	r4, #104	; 0x68
 8001b8e:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 8001b90:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001b92:	2f01      	cmp	r7, #1
 8001b94:	d020      	beq.n	8001bd8 <HAL_UART_Receive_IT+0x7c>
 8001b96:	3801      	subs	r0, #1
 8001b98:	7020      	strb	r0, [r4, #0]
    huart->pRxBuffPtr = pData;
 8001b9a:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	3158      	adds	r1, #88	; 0x58
 8001ba0:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8001ba2:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	0152      	lsls	r2, r2, #5
 8001ba8:	4295      	cmp	r5, r2
 8001baa:	d118      	bne.n	8001bde <HAL_UART_Receive_IT+0x82>
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d113      	bne.n	8001bda <HAL_UART_Receive_IT+0x7e>
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <HAL_UART_Receive_IT+0x90>)
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	325c      	adds	r2, #92	; 0x5c
 8001bb8:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bba:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bbc:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbe:	66d8      	str	r0, [r3, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc0:	681b      	ldr	r3, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bc2:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	3a21      	subs	r2, #33	; 0x21
 8001bc8:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8001bca:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bcc:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001bce:	2290      	movs	r2, #144	; 0x90
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	0052      	lsls	r2, r2, #1
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8001bda:	21ff      	movs	r1, #255	; 0xff
 8001bdc:	e7ea      	b.n	8001bb4 <HAL_UART_Receive_IT+0x58>
 8001bde:	2d00      	cmp	r5, #0
 8001be0:	d1eb      	bne.n	8001bba <HAL_UART_Receive_IT+0x5e>
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d0f8      	beq.n	8001bda <HAL_UART_Receive_IT+0x7e>
 8001be8:	217f      	movs	r1, #127	; 0x7f
 8001bea:	e7e3      	b.n	8001bb4 <HAL_UART_Receive_IT+0x58>
 8001bec:	000001ff 	.word	0x000001ff

08001bf0 <HAL_UART_Transmit_DMA>:
{
 8001bf0:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001bf2:	0002      	movs	r2, r0
{
 8001bf4:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8001bf6:	3269      	adds	r2, #105	; 0x69
 8001bf8:	7814      	ldrb	r4, [r2, #0]
{
 8001bfa:	0005      	movs	r5, r0
    return HAL_BUSY;
 8001bfc:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001bfe:	2c20      	cmp	r4, #32
 8001c00:	d134      	bne.n	8001c6c <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8001c02:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001c04:	2900      	cmp	r1, #0
 8001c06:	d031      	beq.n	8001c6c <HAL_UART_Transmit_DMA+0x7c>
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02f      	beq.n	8001c6c <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c0c:	2480      	movs	r4, #128	; 0x80
 8001c0e:	68ae      	ldr	r6, [r5, #8]
 8001c10:	0164      	lsls	r4, r4, #5
 8001c12:	42a6      	cmp	r6, r4
 8001c14:	d104      	bne.n	8001c20 <HAL_UART_Transmit_DMA+0x30>
 8001c16:	692c      	ldr	r4, [r5, #16]
 8001c18:	2c00      	cmp	r4, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1U) != 0U)
 8001c1c:	4201      	tst	r1, r0
 8001c1e:	d125      	bne.n	8001c6c <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8001c20:	002e      	movs	r6, r5
 8001c22:	3668      	adds	r6, #104	; 0x68
 8001c24:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 8001c26:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001c28:	2c01      	cmp	r4, #1
 8001c2a:	d01f      	beq.n	8001c6c <HAL_UART_Transmit_DMA+0x7c>
 8001c2c:	3801      	subs	r0, #1
 8001c2e:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 8001c30:	0028      	movs	r0, r5
 8001c32:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8001c34:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c36:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 8001c38:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 8001c3a:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c3c:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c3e:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c40:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c42:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 8001c46:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c48:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_UART_Transmit_DMA+0x84>)
 8001c4c:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_UART_Transmit_DMA+0x88>)
 8001c50:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001c52:	682a      	ldr	r2, [r5, #0]
 8001c54:	3228      	adds	r2, #40	; 0x28
 8001c56:	f7fe ffa5 	bl	8000ba4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001c5a:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 8001c5c:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001c5e:	682b      	ldr	r3, [r5, #0]
 8001c60:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	1892      	adds	r2, r2, r2
 8001c66:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8001c68:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c6a:	609a      	str	r2, [r3, #8]
}
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	08001c7d 	.word	0x08001c7d
 8001c74:	08001caf 	.word	0x08001caf
 8001c78:	08001cbb 	.word	0x08001cbb

08001c7c <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	6803      	ldr	r3, [r0, #0]
{
 8001c80:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001c82:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001c84:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001c86:	400b      	ands	r3, r1
 8001c88:	d10c      	bne.n	8001ca4 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0;
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	3152      	adds	r1, #82	; 0x52
 8001c8e:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c90:	2180      	movs	r1, #128	; 0x80
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	438a      	bics	r2, r1
 8001c98:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c9a:	2240      	movs	r2, #64	; 0x40
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8001ca2:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	f000 faf1 	bl	800228c <HAL_UART_TxCpltCallback>
}
 8001caa:	e7fa      	b.n	8001ca2 <UART_DMATransmitCplt+0x26>

08001cac <HAL_UART_TxHalfCpltCallback>:
 8001cac:	4770      	bx	lr

08001cae <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001cae:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8001cb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001cb2:	f7ff fffb 	bl	8001cac <HAL_UART_TxHalfCpltCallback>
}
 8001cb6:	bd10      	pop	{r4, pc}

08001cb8 <HAL_UART_ErrorCallback>:
 8001cb8:	4770      	bx	lr

08001cba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cba:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001cbc:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001cbe:	0021      	movs	r1, r4
 8001cc0:	3169      	adds	r1, #105	; 0x69
 8001cc2:	780b      	ldrb	r3, [r1, #0]
 8001cc4:	2b21      	cmp	r3, #33	; 0x21
 8001cc6:	d10d      	bne.n	8001ce4 <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	0612      	lsls	r2, r2, #24
 8001cce:	d509      	bpl.n	8001ce4 <UART_DMAError+0x2a>
  {
    huart->TxXferCount = 0U;
 8001cd0:	0022      	movs	r2, r4
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	3252      	adds	r2, #82	; 0x52
 8001cd6:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	30c0      	adds	r0, #192	; 0xc0
 8001cdc:	4382      	bics	r2, r0
 8001cde:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	700b      	strb	r3, [r1, #0]
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ce4:	0023      	movs	r3, r4
 8001ce6:	336a      	adds	r3, #106	; 0x6a
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b22      	cmp	r3, #34	; 0x22
 8001cec:	d10a      	bne.n	8001d04 <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	065b      	lsls	r3, r3, #25
 8001cf4:	d506      	bpl.n	8001d04 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
 8001cf6:	0023      	movs	r3, r4
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	335a      	adds	r3, #90	; 0x5a
 8001cfc:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8001cfe:	0020      	movs	r0, r4
 8001d00:	f7ff feee 	bl	8001ae0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001d04:	2310      	movs	r3, #16
 8001d06:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8001d08:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8001d0e:	f7ff ffd3 	bl	8001cb8 <HAL_UART_ErrorCallback>
}
 8001d12:	bd10      	pop	{r4, pc}

08001d14 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001d14:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	0002      	movs	r2, r0
{
 8001d1a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001d1c:	325a      	adds	r2, #90	; 0x5a
 8001d1e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001d20:	3a08      	subs	r2, #8
 8001d22:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8001d24:	f7ff ffc8 	bl	8001cb8 <HAL_UART_ErrorCallback>
}
 8001d28:	bd10      	pop	{r4, pc}
	...

08001d2c <UART_SetConfig>:
{
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d30:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d32:	69c2      	ldr	r2, [r0, #28]
 8001d34:	6883      	ldr	r3, [r0, #8]
 8001d36:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d38:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d3a:	4303      	orrs	r3, r0
 8001d3c:	6960      	ldr	r0, [r4, #20]
 8001d3e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d40:	4835      	ldr	r0, [pc, #212]	; (8001e18 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d42:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d44:	4001      	ands	r1, r0
 8001d46:	430b      	orrs	r3, r1
 8001d48:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d4a:	686b      	ldr	r3, [r5, #4]
 8001d4c:	4933      	ldr	r1, [pc, #204]	; (8001e1c <UART_SetConfig+0xf0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001d4e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d50:	400b      	ands	r3, r1
 8001d52:	68e1      	ldr	r1, [r4, #12]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001d58:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001d5a:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001d5c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001d5e:	4830      	ldr	r0, [pc, #192]	; (8001e20 <UART_SetConfig+0xf4>)
 8001d60:	4001      	ands	r1, r0
 8001d62:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d64:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001d66:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <UART_SetConfig+0xf8>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	400b      	ands	r3, r1
 8001d6e:	492e      	ldr	r1, [pc, #184]	; (8001e28 <UART_SetConfig+0xfc>)
 8001d70:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d12c      	bne.n	8001dd4 <UART_SetConfig+0xa8>
    switch (clocksource)
 8001d7a:	2808      	cmp	r0, #8
 8001d7c:	d827      	bhi.n	8001dce <UART_SetConfig+0xa2>
 8001d7e:	f7fe f9cb 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001d82:	2605      	.short	0x2605
 8001d84:	261e260b 	.word	0x261e260b
 8001d88:	2626      	.short	0x2626
 8001d8a:	21          	.byte	0x21
 8001d8b:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d8c:	f7ff fb2a 	bl	80013e4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d90:	6863      	ldr	r3, [r4, #4]
 8001d92:	0040      	lsls	r0, r0, #1
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	e002      	b.n	8001d9e <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001d98:	6863      	ldr	r3, [r4, #4]
 8001d9a:	0858      	lsrs	r0, r3, #1
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <UART_SetConfig+0x100>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d9e:	18c0      	adds	r0, r0, r3
 8001da0:	6861      	ldr	r1, [r4, #4]
 8001da2:	f7fe f9c3 	bl	800012c <__udivsi3>
 8001da6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001da8:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001daa:	220f      	movs	r2, #15
 8001dac:	0019      	movs	r1, r3
 8001dae:	4391      	bics	r1, r2
 8001db0:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001db2:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001db4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001db6:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
}
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dbe:	f7ff fa43 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 8001dc2:	e7e5      	b.n	8001d90 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001dc4:	6863      	ldr	r3, [r4, #4]
 8001dc6:	0858      	lsrs	r0, r3, #1
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	025b      	lsls	r3, r3, #9
 8001dcc:	e7e7      	b.n	8001d9e <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e7ea      	b.n	8001daa <UART_SetConfig+0x7e>
    switch (clocksource)
 8001dd4:	2808      	cmp	r0, #8
 8001dd6:	d81d      	bhi.n	8001e14 <UART_SetConfig+0xe8>
 8001dd8:	f7fe f99e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001ddc:	1c0a1c05 	.word	0x1c0a1c05
 8001de0:	1c1c1c14 	.word	0x1c1c1c14
 8001de4:	17          	.byte	0x17
 8001de5:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001de6:	f7ff fafd 	bl	80013e4 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dea:	6861      	ldr	r1, [r4, #4]
 8001dec:	084b      	lsrs	r3, r1, #1
 8001dee:	e002      	b.n	8001df6 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001df0:	6861      	ldr	r1, [r4, #4]
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <UART_SetConfig+0x104>)
 8001df4:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001df6:	18c0      	adds	r0, r0, r3
 8001df8:	f7fe f998 	bl	800012c <__udivsi3>
 8001dfc:	b280      	uxth	r0, r0
 8001dfe:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e00:	2000      	movs	r0, #0
        break;
 8001e02:	e7db      	b.n	8001dbc <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e04:	f7ff fa20 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 8001e08:	e7ef      	b.n	8001dea <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	6861      	ldr	r1, [r4, #4]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	0848      	lsrs	r0, r1, #1
 8001e12:	e7f0      	b.n	8001df6 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001e14:	2001      	movs	r0, #1
 8001e16:	e7d1      	b.n	8001dbc <UART_SetConfig+0x90>
 8001e18:	ffff69f3 	.word	0xffff69f3
 8001e1c:	ffffcfff 	.word	0xffffcfff
 8001e20:	fffff4ff 	.word	0xfffff4ff
 8001e24:	40021000 	.word	0x40021000
 8001e28:	0800398c 	.word	0x0800398c
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	007a1200 	.word	0x007a1200

08001e34 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e34:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001e36:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e38:	07da      	lsls	r2, r3, #31
 8001e3a:	d506      	bpl.n	8001e4a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e3c:	6801      	ldr	r1, [r0, #0]
 8001e3e:	4c28      	ldr	r4, [pc, #160]	; (8001ee0 <UART_AdvFeatureConfig+0xac>)
 8001e40:	684a      	ldr	r2, [r1, #4]
 8001e42:	4022      	ands	r2, r4
 8001e44:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e46:	4322      	orrs	r2, r4
 8001e48:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e4a:	079a      	lsls	r2, r3, #30
 8001e4c:	d506      	bpl.n	8001e5c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e4e:	6801      	ldr	r1, [r0, #0]
 8001e50:	4c24      	ldr	r4, [pc, #144]	; (8001ee4 <UART_AdvFeatureConfig+0xb0>)
 8001e52:	684a      	ldr	r2, [r1, #4]
 8001e54:	4022      	ands	r2, r4
 8001e56:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001e58:	4322      	orrs	r2, r4
 8001e5a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e5c:	075a      	lsls	r2, r3, #29
 8001e5e:	d506      	bpl.n	8001e6e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e60:	6801      	ldr	r1, [r0, #0]
 8001e62:	4c21      	ldr	r4, [pc, #132]	; (8001ee8 <UART_AdvFeatureConfig+0xb4>)
 8001e64:	684a      	ldr	r2, [r1, #4]
 8001e66:	4022      	ands	r2, r4
 8001e68:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001e6a:	4322      	orrs	r2, r4
 8001e6c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e6e:	071a      	lsls	r2, r3, #28
 8001e70:	d506      	bpl.n	8001e80 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e72:	6801      	ldr	r1, [r0, #0]
 8001e74:	4c1d      	ldr	r4, [pc, #116]	; (8001eec <UART_AdvFeatureConfig+0xb8>)
 8001e76:	684a      	ldr	r2, [r1, #4]
 8001e78:	4022      	ands	r2, r4
 8001e7a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001e7c:	4322      	orrs	r2, r4
 8001e7e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e80:	06da      	lsls	r2, r3, #27
 8001e82:	d506      	bpl.n	8001e92 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e84:	6801      	ldr	r1, [r0, #0]
 8001e86:	4c1a      	ldr	r4, [pc, #104]	; (8001ef0 <UART_AdvFeatureConfig+0xbc>)
 8001e88:	688a      	ldr	r2, [r1, #8]
 8001e8a:	4022      	ands	r2, r4
 8001e8c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001e8e:	4322      	orrs	r2, r4
 8001e90:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e92:	069a      	lsls	r2, r3, #26
 8001e94:	d506      	bpl.n	8001ea4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e96:	6801      	ldr	r1, [r0, #0]
 8001e98:	4c16      	ldr	r4, [pc, #88]	; (8001ef4 <UART_AdvFeatureConfig+0xc0>)
 8001e9a:	688a      	ldr	r2, [r1, #8]
 8001e9c:	4022      	ands	r2, r4
 8001e9e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ea0:	4322      	orrs	r2, r4
 8001ea2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ea4:	065a      	lsls	r2, r3, #25
 8001ea6:	d510      	bpl.n	8001eca <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ea8:	6801      	ldr	r1, [r0, #0]
 8001eaa:	4d13      	ldr	r5, [pc, #76]	; (8001ef8 <UART_AdvFeatureConfig+0xc4>)
 8001eac:	684a      	ldr	r2, [r1, #4]
 8001eae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001eb0:	402a      	ands	r2, r5
 8001eb2:	4322      	orrs	r2, r4
 8001eb4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	0352      	lsls	r2, r2, #13
 8001eba:	4294      	cmp	r4, r2
 8001ebc:	d105      	bne.n	8001eca <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ebe:	684a      	ldr	r2, [r1, #4]
 8001ec0:	4c0e      	ldr	r4, [pc, #56]	; (8001efc <UART_AdvFeatureConfig+0xc8>)
 8001ec2:	4022      	ands	r2, r4
 8001ec4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ec6:	4322      	orrs	r2, r4
 8001ec8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001eca:	061b      	lsls	r3, r3, #24
 8001ecc:	d506      	bpl.n	8001edc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ece:	6802      	ldr	r2, [r0, #0]
 8001ed0:	490b      	ldr	r1, [pc, #44]	; (8001f00 <UART_AdvFeatureConfig+0xcc>)
 8001ed2:	6853      	ldr	r3, [r2, #4]
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6053      	str	r3, [r2, #4]
}
 8001edc:	bd30      	pop	{r4, r5, pc}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	fffdffff 	.word	0xfffdffff
 8001ee4:	fffeffff 	.word	0xfffeffff
 8001ee8:	fffbffff 	.word	0xfffbffff
 8001eec:	ffff7fff 	.word	0xffff7fff
 8001ef0:	ffffefff 	.word	0xffffefff
 8001ef4:	ffffdfff 	.word	0xffffdfff
 8001ef8:	ffefffff 	.word	0xffefffff
 8001efc:	ff9fffff 	.word	0xff9fffff
 8001f00:	fff7ffff 	.word	0xfff7ffff

08001f04 <HAL_UART_Init>:
{
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001f08:	d101      	bne.n	8001f0e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001f0a:	2001      	movs	r0, #1
}
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f0e:	0005      	movs	r5, r0
 8001f10:	3569      	adds	r5, #105	; 0x69
 8001f12:	782b      	ldrb	r3, [r5, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d104      	bne.n	8001f24 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	3268      	adds	r2, #104	; 0x68
 8001f1e:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001f20:	f000 fcd0 	bl	80028c4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001f24:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001f26:	2101      	movs	r1, #1
 8001f28:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f2a:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001f2c:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f2e:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001f30:	438b      	bics	r3, r1
 8001f32:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f34:	f7ff fefa 	bl	8001d2c <UART_SetConfig>
 8001f38:	2801      	cmp	r0, #1
 8001f3a:	d0e6      	beq.n	8001f0a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001f42:	0020      	movs	r0, r4
 8001f44:	f7ff ff76 	bl	8001e34 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	490b      	ldr	r1, [pc, #44]	; (8001f78 <HAL_UART_Init+0x74>)
 8001f4c:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f50:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001f52:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	438a      	bics	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001f64:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8001f66:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f68:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001f6a:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8001f6c:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001f6e:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001f70:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8001f72:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001f74:	e7ca      	b.n	8001f0c <HAL_UART_Init+0x8>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	fffff7ff 	.word	0xfffff7ff

08001f7c <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f7c:	0003      	movs	r3, r0
{
 8001f7e:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f80:	3369      	adds	r3, #105	; 0x69
 8001f82:	781b      	ldrb	r3, [r3, #0]
{
 8001f84:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8001f86:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f88:	2b21      	cmp	r3, #33	; 0x21
 8001f8a:	d10f      	bne.n	8001fac <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8001f8c:	0014      	movs	r4, r2
 8001f8e:	3452      	adds	r4, #82	; 0x52
 8001f90:	8823      	ldrh	r3, [r4, #0]
 8001f92:	6811      	ldr	r1, [r2, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001f9a:	680a      	ldr	r2, [r1, #0]
 8001f9c:	307e      	adds	r0, #126	; 0x7e
 8001f9e:	4382      	bics	r2, r0
 8001fa0:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	6808      	ldr	r0, [r1, #0]
 8001fa6:	4302      	orrs	r2, r0
 8001fa8:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 8001faa:	2000      	movs	r0, #0
  }
}
 8001fac:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fae:	2080      	movs	r0, #128	; 0x80
 8001fb0:	6895      	ldr	r5, [r2, #8]
 8001fb2:	0140      	lsls	r0, r0, #5
 8001fb4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001fb6:	4285      	cmp	r5, r0
 8001fb8:	d10d      	bne.n	8001fd6 <UART_Transmit_IT+0x5a>
 8001fba:	6910      	ldr	r0, [r2, #16]
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d10a      	bne.n	8001fd6 <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001fc0:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 8001fc2:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001fc4:	05c0      	lsls	r0, r0, #23
 8001fc6:	0dc0      	lsrs	r0, r0, #23
 8001fc8:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001fca:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 8001fcc:	8823      	ldrh	r3, [r4, #0]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	8023      	strh	r3, [r4, #0]
 8001fd4:	e7e9      	b.n	8001faa <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001fd6:	1c58      	adds	r0, r3, #1
 8001fd8:	64d0      	str	r0, [r2, #76]	; 0x4c
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	850b      	strh	r3, [r1, #40]	; 0x28
 8001fde:	e7f5      	b.n	8001fcc <UART_Transmit_IT+0x50>

08001fe0 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fe0:	2140      	movs	r1, #64	; 0x40
 8001fe2:	6802      	ldr	r2, [r0, #0]
{
 8001fe4:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	438b      	bics	r3, r1
 8001fea:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fec:	0003      	movs	r3, r0
 8001fee:	2220      	movs	r2, #32
 8001ff0:	3369      	adds	r3, #105	; 0x69
 8001ff2:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 8001ff4:	f000 f94a 	bl	800228c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	bd10      	pop	{r4, pc}

08001ffc <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ffc:	0002      	movs	r2, r0
{
 8001ffe:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002000:	326a      	adds	r2, #106	; 0x6a
 8002002:	7811      	ldrb	r1, [r2, #0]
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	2922      	cmp	r1, #34	; 0x22
 8002008:	d12d      	bne.n	8002066 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 800200a:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800200c:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 800200e:	315c      	adds	r1, #92	; 0x5c
 8002010:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002012:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002014:	0164      	lsls	r4, r4, #5
 8002016:	4029      	ands	r1, r5
 8002018:	6885      	ldr	r5, [r0, #8]
 800201a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800201c:	42a5      	cmp	r5, r4
 800201e:	d11e      	bne.n	800205e <UART_Receive_IT+0x62>
 8002020:	6904      	ldr	r4, [r0, #16]
 8002022:	2c00      	cmp	r4, #0
 8002024:	d11b      	bne.n	800205e <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8002026:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8002028:	3302      	adds	r3, #2
 800202a:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 800202c:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 800202e:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8002030:	315a      	adds	r1, #90	; 0x5a
 8002032:	880b      	ldrh	r3, [r1, #0]
 8002034:	3b01      	subs	r3, #1
 8002036:	b29b      	uxth	r3, r3
 8002038:	800b      	strh	r3, [r1, #0]
 800203a:	42a3      	cmp	r3, r4
 800203c:	d10d      	bne.n	800205a <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800203e:	6803      	ldr	r3, [r0, #0]
 8002040:	4d0c      	ldr	r5, [pc, #48]	; (8002074 <UART_Receive_IT+0x78>)
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	4029      	ands	r1, r5
 8002046:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	3523      	adds	r5, #35	; 0x23
 800204c:	35ff      	adds	r5, #255	; 0xff
 800204e:	43a9      	bics	r1, r5
 8002050:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002052:	2320      	movs	r3, #32
 8002054:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8002056:	f000 f8dd 	bl	8002214 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800205a:	0020      	movs	r0, r4
 800205c:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800205e:	1c5c      	adds	r4, r3, #1
 8002060:	6544      	str	r4, [r0, #84]	; 0x54
 8002062:	7019      	strb	r1, [r3, #0]
 8002064:	e7e2      	b.n	800202c <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002066:	2208      	movs	r2, #8
 8002068:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 800206a:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800206c:	430a      	orrs	r2, r1
 800206e:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8002070:	e7f3      	b.n	800205a <UART_Receive_IT+0x5e>
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	fffffedf 	.word	0xfffffedf

08002078 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002078:	220f      	movs	r2, #15
{
 800207a:	b570      	push	{r4, r5, r6, lr}
 800207c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800207e:	6800      	ldr	r0, [r0, #0]
 8002080:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002082:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002084:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8002086:	d108      	bne.n	800209a <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002088:	2520      	movs	r5, #32
 800208a:	422b      	tst	r3, r5
 800208c:	d005      	beq.n	800209a <HAL_UART_IRQHandler+0x22>
 800208e:	4229      	tst	r1, r5
 8002090:	d003      	beq.n	800209a <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8002092:	0020      	movs	r0, r4
 8002094:	f7ff ffb2 	bl	8001ffc <UART_Receive_IT>
}
 8002098:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 800209a:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 800209c:	2a00      	cmp	r2, #0
 800209e:	d060      	beq.n	8002162 <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80020a0:	2201      	movs	r2, #1
 80020a2:	4015      	ands	r5, r2
 80020a4:	d103      	bne.n	80020ae <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80020a6:	2690      	movs	r6, #144	; 0x90
 80020a8:	0076      	lsls	r6, r6, #1
 80020aa:	4231      	tst	r1, r6
 80020ac:	d059      	beq.n	8002162 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020ae:	4213      	tst	r3, r2
 80020b0:	d005      	beq.n	80020be <HAL_UART_IRQHandler+0x46>
 80020b2:	05ce      	lsls	r6, r1, #23
 80020b4:	d503      	bpl.n	80020be <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80020b6:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020b8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80020ba:	4332      	orrs	r2, r6
 80020bc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020be:	2202      	movs	r2, #2
 80020c0:	4213      	tst	r3, r2
 80020c2:	d006      	beq.n	80020d2 <HAL_UART_IRQHandler+0x5a>
 80020c4:	2d00      	cmp	r5, #0
 80020c6:	d004      	beq.n	80020d2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80020c8:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020ca:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80020cc:	1892      	adds	r2, r2, r2
 80020ce:	4332      	orrs	r2, r6
 80020d0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020d2:	2204      	movs	r2, #4
 80020d4:	4213      	tst	r3, r2
 80020d6:	d006      	beq.n	80020e6 <HAL_UART_IRQHandler+0x6e>
 80020d8:	2d00      	cmp	r5, #0
 80020da:	d004      	beq.n	80020e6 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80020dc:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020de:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80020e0:	3a02      	subs	r2, #2
 80020e2:	4332      	orrs	r2, r6
 80020e4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80020e6:	071a      	lsls	r2, r3, #28
 80020e8:	d508      	bpl.n	80020fc <HAL_UART_IRQHandler+0x84>
 80020ea:	068a      	lsls	r2, r1, #26
 80020ec:	d401      	bmi.n	80020f2 <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ee:	2d00      	cmp	r5, #0
 80020f0:	d004      	beq.n	80020fc <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80020f2:	2208      	movs	r2, #8
 80020f4:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80020f8:	4302      	orrs	r2, r0
 80020fa:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80020fe:	2a00      	cmp	r2, #0
 8002100:	d0ca      	beq.n	8002098 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002102:	2220      	movs	r2, #32
 8002104:	4213      	tst	r3, r2
 8002106:	d004      	beq.n	8002112 <HAL_UART_IRQHandler+0x9a>
 8002108:	4211      	tst	r1, r2
 800210a:	d002      	beq.n	8002112 <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 800210c:	0020      	movs	r0, r4
 800210e:	f7ff ff75 	bl	8001ffc <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002112:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8002114:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002116:	071b      	lsls	r3, r3, #28
 8002118:	d404      	bmi.n	8002124 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	689d      	ldr	r5, [r3, #8]
 800211e:	2340      	movs	r3, #64	; 0x40
 8002120:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002122:	d01a      	beq.n	800215a <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8002124:	f7ff fcdc 	bl	8001ae0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002128:	2140      	movs	r1, #64	; 0x40
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	420a      	tst	r2, r1
 8002130:	d00f      	beq.n	8002152 <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002132:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002134:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002136:	438a      	bics	r2, r1
 8002138:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800213a:	2800      	cmp	r0, #0
 800213c:	d009      	beq.n	8002152 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_UART_IRQHandler+0x114>)
 8002140:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002142:	f7fe fd6a 	bl	8000c1a <HAL_DMA_Abort_IT>
 8002146:	2800      	cmp	r0, #0
 8002148:	d0a6      	beq.n	8002098 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800214a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800214c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800214e:	4798      	blx	r3
 8002150:	e7a2      	b.n	8002098 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8002152:	0020      	movs	r0, r4
 8002154:	f7ff fdb0 	bl	8001cb8 <HAL_UART_ErrorCallback>
 8002158:	e79e      	b.n	8002098 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 800215a:	f7ff fdad 	bl	8001cb8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002160:	e79a      	b.n	8002098 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	4213      	tst	r3, r2
 8002166:	d005      	beq.n	8002174 <HAL_UART_IRQHandler+0xfc>
 8002168:	4211      	tst	r1, r2
 800216a:	d003      	beq.n	8002174 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 800216c:	0020      	movs	r0, r4
 800216e:	f7ff ff05 	bl	8001f7c <UART_Transmit_IT>
    return;
 8002172:	e791      	b.n	8002098 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002174:	2240      	movs	r2, #64	; 0x40
 8002176:	4213      	tst	r3, r2
 8002178:	d100      	bne.n	800217c <HAL_UART_IRQHandler+0x104>
 800217a:	e78d      	b.n	8002098 <HAL_UART_IRQHandler+0x20>
 800217c:	4211      	tst	r1, r2
 800217e:	d100      	bne.n	8002182 <HAL_UART_IRQHandler+0x10a>
 8002180:	e78a      	b.n	8002098 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8002182:	0020      	movs	r0, r4
 8002184:	f7ff ff2c 	bl	8001fe0 <UART_EndTransmit_IT>
    return;
 8002188:	e786      	b.n	8002098 <HAL_UART_IRQHandler+0x20>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	08001d15 	.word	0x08001d15

08002190 <get_current_potentiometer>:
#include "function.h"
#include "variables.h"
#define R 155		// Resistor chosen in H-brigde circuit to transform proportional current to a voltage

void get_current_potentiometer(){
	sampledCurrent = ADC_buffer[1];
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <get_current_potentiometer+0x54>)
void get_current_potentiometer(){
 8002192:	b570      	push	{r4, r5, r6, lr}
	sampledCurrent = ADC_buffer[1];
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <get_current_potentiometer+0x58>)
 8002198:	685d      	ldr	r5, [r3, #4]
	sampledPotentiometer = ADC_buffer[0];



	prevprev_q1 = prev_q1;
	prev_q1 = q1;
 800219a:	4e14      	ldr	r6, [pc, #80]	; (80021ec <get_current_potentiometer+0x5c>)
	sampledCurrent = ADC_buffer[1];
 800219c:	6015      	str	r5, [r2, #0]
	sampledPotentiometer = ADC_buffer[0];
 800219e:	6818      	ldr	r0, [r3, #0]
	prevprev_q1 = prev_q1;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <get_current_potentiometer+0x60>)
 80021a2:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <get_current_potentiometer+0x64>)
 80021a4:	6819      	ldr	r1, [r3, #0]
	sampledPotentiometer = ADC_buffer[0];
 80021a6:	4c14      	ldr	r4, [pc, #80]	; (80021f8 <get_current_potentiometer+0x68>)
	prevprev_q1 = prev_q1;
 80021a8:	6011      	str	r1, [r2, #0]
	prev_q1 = q1;
 80021aa:	6832      	ldr	r2, [r6, #0]
	sampledPotentiometer = ADC_buffer[0];
 80021ac:	6020      	str	r0, [r4, #0]
	prev_q1 = q1;
 80021ae:	601a      	str	r2, [r3, #0]
	q1 = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <get_current_potentiometer+0x6c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1ac0      	subs	r0, r0, r3
 80021b6:	f7fe f965 	bl	8000484 <__aeabi_i2f>
 80021ba:	4911      	ldr	r1, [pc, #68]	; (8002200 <get_current_potentiometer+0x70>)
 80021bc:	f7fe f842 	bl	8000244 <__aeabi_fmul>
	torque = (sampledCurrent<<9);
 80021c0:	2200      	movs	r2, #0
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <get_current_potentiometer+0x74>)
	q1 = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 80021c4:	6030      	str	r0, [r6, #0]
	torque = (sampledCurrent<<9);
 80021c6:	701a      	strb	r2, [r3, #0]
//	q1dot = (prevprev_q1 - prev_q1<<2+3*q1)/(time<<2); // time variable needs to change




	sprintf(send_torque,"%lu", sampledCurrent);
 80021c8:	4e0f      	ldr	r6, [pc, #60]	; (8002208 <get_current_potentiometer+0x78>)
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <get_current_potentiometer+0x7c>)
 80021cc:	002a      	movs	r2, r5
 80021ce:	0031      	movs	r1, r6
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	f000 ff75 	bl	80030c0 <siprintf>
	sprintf(send_q1,"%lu", sampledPotentiometer);
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <get_current_potentiometer+0x80>)
 80021d8:	0031      	movs	r1, r6
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	f000 ff6f 	bl	80030c0 <siprintf>
	// Do conversion equation to get 'real' value



	// store in buffer to be send across UART
}
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	20000210 	.word	0x20000210
 80021e8:	2000024c 	.word	0x2000024c
 80021ec:	20000238 	.word	0x20000238
 80021f0:	20000224 	.word	0x20000224
 80021f4:	2000022c 	.word	0x2000022c
 80021f8:	20000250 	.word	0x20000250
 80021fc:	20000020 	.word	0x20000020
 8002200:	3ac88a48 	.word	0x3ac88a48
 8002204:	20000284 	.word	0x20000284
 8002208:	08003990 	.word	0x08003990
 800220c:	20000264 	.word	0x20000264
 8002210:	20000258 	.word	0x20000258

08002214 <HAL_UART_RxCpltCallback>:
#define KI


// interrupt when byte is received on UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	uart_flag = 1;
 8002214:	2201      	movs	r2, #1
 8002216:	4b01      	ldr	r3, [pc, #4]	; (800221c <HAL_UART_RxCpltCallback+0x8>)
 8002218:	701a      	strb	r2, [r3, #0]
}
 800221a:	4770      	bx	lr
 800221c:	20000285 	.word	0x20000285

08002220 <HAL_GPIO_EXTI_Callback>:

//interrupt when encoder is experiencing an rising or falling edge
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	encoder_flag = 1;
 8002220:	2201      	movs	r2, #1
 8002222:	4b01      	ldr	r3, [pc, #4]	; (8002228 <HAL_GPIO_EXTI_Callback+0x8>)
 8002224:	701a      	strb	r2, [r3, #0]

}
 8002226:	4770      	bx	lr
 8002228:	2000021f 	.word	0x2000021f

0800222c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance == htim16.Instance){
 800222c:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800222e:	6803      	ldr	r3, [r0, #0]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	4293      	cmp	r3, r2
 8002234:	d103      	bne.n	800223e <HAL_TIM_PeriodElapsedCallback+0x12>
		send_data_flag = 1;
 8002236:	2201      	movs	r2, #1
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800223a:	701a      	strb	r2, [r3, #0]
		adc_flag = 1;
		data_flag = 1;
	}
//	data_flag = 1;
//	adc_flag = 1;
}
 800223c:	4770      	bx	lr
	else if(htim->Instance == htim14.Instance){
 800223e:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	4293      	cmp	r3, r2
 8002244:	d1fa      	bne.n	800223c <HAL_TIM_PeriodElapsedCallback+0x10>
		adc_flag = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800224a:	7013      	strb	r3, [r2, #0]
		data_flag = 1;
 800224c:	4a05      	ldr	r2, [pc, #20]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800224e:	7013      	strb	r3, [r2, #0]
}
 8002250:	e7f4      	b.n	800223c <HAL_TIM_PeriodElapsedCallback+0x10>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	20000460 	.word	0x20000460
 8002258:	2000001c 	.word	0x2000001c
 800225c:	20000390 	.word	0x20000390
 8002260:	20000214 	.word	0x20000214
 8002264:	2000021c 	.word	0x2000021c

08002268 <HAL_TIM_OC_DelayElapsedCallback>:
 8002268:	2201      	movs	r2, #1
 800226a:	4b01      	ldr	r3, [pc, #4]	; (8002270 <HAL_TIM_OC_DelayElapsedCallback+0x8>)
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	4770      	bx	lr
 8002270:	20000234 	.word	0x20000234

08002274 <HAL_TIM_IC_CaptureCallback>:
 8002274:	2201      	movs	r2, #1
 8002276:	4b01      	ldr	r3, [pc, #4]	; (800227c <HAL_TIM_IC_CaptureCallback+0x8>)
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	4770      	bx	lr
 800227c:	20000234 	.word	0x20000234

08002280 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
 8002280:	2201      	movs	r2, #1
 8002282:	4b01      	ldr	r3, [pc, #4]	; (8002288 <HAL_TIM_PWM_PulseFinishedCallback+0x8>)
 8002284:	701a      	strb	r2, [r3, #0]
}
 8002286:	4770      	bx	lr
 8002288:	20000234 	.word	0x20000234

0800228c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
	memset(rx_buffer,0x00, 8);
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_UART_TxCpltCallback+0x20>)
void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 800228e:	b510      	push	{r4, lr}
	memset(rx_buffer,0x00, 8);
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	2208      	movs	r2, #8
 8002294:	2100      	movs	r1, #0
 8002296:	f000 fe50 	bl	8002f3a <memset>
	rx_buffer_cntr = 0;
 800229a:	2100      	movs	r1, #0
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <HAL_UART_TxCpltCallback+0x24>)
	memset(data_buffer,0x00,40);
 800229e:	2228      	movs	r2, #40	; 0x28
	rx_buffer_cntr = 0;
 80022a0:	7019      	strb	r1, [r3, #0]
	memset(data_buffer,0x00,40);
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <HAL_UART_TxCpltCallback+0x28>)
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	f000 fe48 	bl	8002f3a <memset>
}
 80022aa:	bd10      	pop	{r4, pc}
 80022ac:	20000244 	.word	0x20000244
 80022b0:	20000248 	.word	0x20000248
 80022b4:	20000218 	.word	0x20000218

080022b8 <read_motor_position>:


void read_motor_position(){

	prevprev_q2 = prev_q2;
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <read_motor_position+0x44>)
void read_motor_position(){
 80022ba:	b570      	push	{r4, r5, r6, lr}
	prevprev_q2 = prev_q2;
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	4a10      	ldr	r2, [pc, #64]	; (8002300 <read_motor_position+0x48>)
	prev_q2 = q2;
 80022c0:	4d10      	ldr	r5, [pc, #64]	; (8002304 <read_motor_position+0x4c>)
	prevprev_q2 = prev_q2;
 80022c2:	6011      	str	r1, [r2, #0]
	prev_q2 = q2;
 80022c4:	682a      	ldr	r2, [r5, #0]

	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 80022c6:	2120      	movs	r1, #32
 80022c8:	480f      	ldr	r0, [pc, #60]	; (8002308 <read_motor_position+0x50>)
	prev_q2 = q2;
 80022ca:	601a      	str	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 80022cc:	f7fe fdc2 	bl	8000e54 <HAL_GPIO_ReadPin>
 80022d0:	4c0e      	ldr	r4, [pc, #56]	; (800230c <read_motor_position+0x54>)
 80022d2:	4e0f      	ldr	r6, [pc, #60]	; (8002310 <read_motor_position+0x58>)
		q2_steps -= 1;
 80022d4:	6823      	ldr	r3, [r4, #0]
	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 80022d6:	2801      	cmp	r0, #1
 80022d8:	d10e      	bne.n	80022f8 <read_motor_position+0x40>
		q2_steps -= 1;
 80022da:	1e58      	subs	r0, r3, #1
		q2 = q2_steps*dir_increment_size;
	}
	else{ // actuated pendulum is turning anti-clockwise
		q2_steps += 1;
 80022dc:	6020      	str	r0, [r4, #0]
		q2 = q2_steps*dir_increment_size;
 80022de:	f7fe f8d1 	bl	8000484 <__aeabi_i2f>
 80022e2:	6831      	ldr	r1, [r6, #0]
 80022e4:	f7fd ffae 	bl	8000244 <__aeabi_fmul>
	}
	sprintf(send_q2,"%d", q2_steps);
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <read_motor_position+0x5c>)
		q2 = q2_steps*dir_increment_size;
 80022ea:	6028      	str	r0, [r5, #0]
	sprintf(send_q2,"%d", q2_steps);
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	490a      	ldr	r1, [pc, #40]	; (8002318 <read_motor_position+0x60>)
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	f000 fee5 	bl	80030c0 <siprintf>

	//three point backward difference
//	q2dot = (prevprev_q2 - prev_q2<<2+3*q2)/(2*time); // time variable needs to change

}
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
		q2_steps += 1;
 80022f8:	1c58      	adds	r0, r3, #1
 80022fa:	e7ef      	b.n	80022dc <read_motor_position+0x24>
 80022fc:	20000228 	.word	0x20000228
 8002300:	20000230 	.word	0x20000230
 8002304:	2000023c 	.word	0x2000023c
 8002308:	48000400 	.word	0x48000400
 800230c:	20000240 	.word	0x20000240
 8002310:	2000000c 	.word	0x2000000c
 8002314:	2000025c 	.word	0x2000025c
 8002318:	08003994 	.word	0x08003994

0800231c <output_torque>:

void output_torque(uint8_t dir, uint8_t duty_cycle){
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	0002      	movs	r2, r0
 8002320:	000c      	movs	r4, r1
 8002322:	4d07      	ldr	r5, [pc, #28]	; (8002340 <output_torque+0x24>)
	if(duty_cycle < 30){ // safety percaustion to ensure safety
 8002324:	291d      	cmp	r1, #29
 8002326:	d803      	bhi.n	8002330 <output_torque+0x14>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100 ); // stop motor
 8002328:	2264      	movs	r2, #100	; 0x64
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,dir);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
	}
}
 800232e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,dir);
 8002330:	2090      	movs	r0, #144	; 0x90
 8002332:	2120      	movs	r1, #32
 8002334:	05c0      	lsls	r0, r0, #23
 8002336:	f7fe fd93 	bl	8000e60 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
 800233a:	682b      	ldr	r3, [r5, #0]
 800233c:	639c      	str	r4, [r3, #56]	; 0x38
}
 800233e:	e7f6      	b.n	800232e <output_torque+0x12>
 8002340:	2000029c 	.word	0x2000029c

08002344 <startPeripherals>:
extern ADC_HandleTypeDef hadc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim16;

void startPeripherals(){
 8002344:	b510      	push	{r4, lr}

	HAL_ADCEx_Calibration_Start(&hadc);					// Calibrate the ADC
 8002346:	4c12      	ldr	r4, [pc, #72]	; (8002390 <startPeripherals+0x4c>)
 8002348:	0020      	movs	r0, r4
 800234a:	f7fe fb39 	bl	80009c0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, ADC_buffer, 2);			// Start to capture the ADC with DMA
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <startPeripherals+0x50>)
 8002350:	2202      	movs	r2, #2
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	0020      	movs	r0, r4
 8002356:	f7fe fa25 	bl	80007a4 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim14);						// Timer responsible for time-keeping and triggers system state to be send
 800235a:	480f      	ldr	r0, [pc, #60]	; (8002398 <startPeripherals+0x54>)
 800235c:	f7ff f986 	bl	800166c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);						// Timer responsible for time-keeping and triggers system state to be send
 8002360:	480e      	ldr	r0, [pc, #56]	; (800239c <startPeripherals+0x58>)
 8002362:	f7ff f983 	bl	800166c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);			// Start the Timer Module with PWM
 8002366:	4c0e      	ldr	r4, [pc, #56]	; (80023a0 <startPeripherals+0x5c>)
 8002368:	2104      	movs	r1, #4
 800236a:	0020      	movs	r0, r4
 800236c:	f7ff fb56 	bl	8001a1c <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8002370:	2200      	movs	r2, #0
 8002372:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8002374:	490b      	ldr	r1, [pc, #44]	; (80023a4 <startPeripherals+0x60>)
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8002376:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <startPeripherals+0x64>)
 800237a:	3201      	adds	r2, #1
 800237c:	f7ff fbee 	bl	8001b5c <HAL_UART_Receive_IT>


//	HAL_Delay(500);										// Delay for peripherals to settle
	HAL_GPIO_WritePin(DEBUG_LED1_GPIO_Port,DEBUG_LED1_Pin,1); // LED ON indicates system is ready
 8002380:	2090      	movs	r0, #144	; 0x90
 8002382:	2201      	movs	r2, #1
 8002384:	2108      	movs	r1, #8
 8002386:	05c0      	lsls	r0, r0, #23
 8002388:	f7fe fd6a 	bl	8000e60 <HAL_GPIO_WritePin>

	//startval_sampledPotentiometer = ADC_buffer[1];

}
 800238c:	bd10      	pop	{r4, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	20000414 	.word	0x20000414
 8002394:	20000210 	.word	0x20000210
 8002398:	20000390 	.word	0x20000390
 800239c:	20000460 	.word	0x20000460
 80023a0:	2000029c 	.word	0x2000029c
 80023a4:	20000249 	.word	0x20000249
 80023a8:	20000320 	.word	0x20000320

080023ac <init_variables>:


void init_variables(){
 80023ac:	b570      	push	{r4, r5, r6, lr}

	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 80023ae:	2008      	movs	r0, #8
	memset(rx_buffer,0x00,8);
 80023b0:	2408      	movs	r4, #8
	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 80023b2:	f000 fdaf 	bl	8002f14 <malloc>
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <init_variables+0xbc>)
	memset(rx_buffer,0x00,8);
 80023b8:	0022      	movs	r2, r4
 80023ba:	2100      	movs	r1, #0
	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 80023bc:	6018      	str	r0, [r3, #0]
	memset(rx_buffer,0x00,8);
 80023be:	f000 fdbc 	bl	8002f3a <memset>

	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 80023c2:	0020      	movs	r0, r4
 80023c4:	f000 fda6 	bl	8002f14 <malloc>
 80023c8:	4b28      	ldr	r3, [pc, #160]	; (800246c <init_variables+0xc0>)
	memset(verification,0x00,8);
 80023ca:	0022      	movs	r2, r4
 80023cc:	2100      	movs	r1, #0
	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 80023ce:	6018      	str	r0, [r3, #0]
	memset(verification,0x00,8);
 80023d0:	f000 fdb3 	bl	8002f3a <memset>

	// might to be larger to account for decimals
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 80023d4:	2048      	movs	r0, #72	; 0x48
 80023d6:	f000 fd9d 	bl	8002f14 <malloc>
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <init_variables+0xc4>)
	memset(data_buffer,0x00,72);
 80023dc:	2248      	movs	r2, #72	; 0x48
 80023de:	2100      	movs	r1, #0
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 80023e0:	0005      	movs	r5, r0
 80023e2:	6018      	str	r0, [r3, #0]
	memset(data_buffer,0x00,72);
 80023e4:	f000 fda9 	bl	8002f3a <memset>

	// forming dat structure to be send
	memcpy(data_buffer, dollar, strlen((char*)dollar));
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <init_variables+0xc8>)
 80023ea:	681e      	ldr	r6, [r3, #0]
 80023ec:	0030      	movs	r0, r6
 80023ee:	f7fd fe8b 	bl	8000108 <strlen>
 80023f2:	0031      	movs	r1, r6
 80023f4:	0002      	movs	r2, r0
 80023f6:	0028      	movs	r0, r5
 80023f8:	f000 fd96 	bl	8002f28 <memcpy>


	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 80023fc:	0020      	movs	r0, r4
 80023fe:	f000 fd89 	bl	8002f14 <malloc>
	memset(ADC_buffer,0x00,2);
 8002402:	2400      	movs	r4, #0
	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8002404:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <init_variables+0xcc>)
	memset(ADC_buffer,0x00,2);
 8002406:	8004      	strh	r4, [r0, #0]
	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8002408:	6018      	str	r0, [r3, #0]

	//atan_vals = (float*)malloc(100*sizeof(double));
	//memset(atan_vals,0x00,100);

	scratchpad = (char*)malloc(5*sizeof(char));
 800240a:	2005      	movs	r0, #5
 800240c:	f000 fd82 	bl	8002f14 <malloc>
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <init_variables+0xd0>)
	memset(scratchpad,0x00,5);
 8002412:	0021      	movs	r1, r4
 8002414:	2205      	movs	r2, #5
	scratchpad = (char*)malloc(5*sizeof(char));
 8002416:	6018      	str	r0, [r3, #0]
	memset(scratchpad,0x00,5);
 8002418:	f000 fd8f 	bl	8002f3a <memset>

	send_q1 = (char*)malloc(10*sizeof(char));
 800241c:	200a      	movs	r0, #10
 800241e:	f000 fd79 	bl	8002f14 <malloc>
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <init_variables+0xd4>)
	memset(send_q1,0x00,10);
 8002424:	0021      	movs	r1, r4
 8002426:	220a      	movs	r2, #10
	send_q1 = (char*)malloc(10*sizeof(char));
 8002428:	6018      	str	r0, [r3, #0]
	memset(send_q1,0x00,10);
 800242a:	f000 fd86 	bl	8002f3a <memset>
	send_q2 = (char*)malloc(32*sizeof(char));
 800242e:	2020      	movs	r0, #32
 8002430:	f000 fd70 	bl	8002f14 <malloc>
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <init_variables+0xd8>)
	memset(send_q2,0x00,32);
 8002436:	0021      	movs	r1, r4
 8002438:	2220      	movs	r2, #32
	send_q2 = (char*)malloc(32*sizeof(char));
 800243a:	0005      	movs	r5, r0
 800243c:	6018      	str	r0, [r3, #0]
	memset(send_q2,0x00,32);
 800243e:	f000 fd7c 	bl	8002f3a <memset>
	send_torque = (char*)malloc(4*sizeof(char));
 8002442:	2004      	movs	r0, #4
 8002444:	f000 fd66 	bl	8002f14 <malloc>
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <init_variables+0xdc>)
	memset(send_torque,0x00,4);
 800244a:	6004      	str	r4, [r0, #0]
	send_torque = (char*)malloc(4*sizeof(char));
 800244c:	6018      	str	r0, [r3, #0]
	send_time = (char*)malloc(4*sizeof(char));
 800244e:	2004      	movs	r0, #4
 8002450:	f000 fd60 	bl	8002f14 <malloc>
 8002454:	4b0d      	ldr	r3, [pc, #52]	; (800248c <init_variables+0xe0>)
	memset(send_time,0x00,4);
 8002456:	6004      	str	r4, [r0, #0]
	send_time = (char*)malloc(4*sizeof(char));
 8002458:	6018      	str	r0, [r3, #0]


	sprintf(send_q2,"%d", q2_steps);
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <init_variables+0xe4>)
 800245c:	0028      	movs	r0, r5
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <init_variables+0xe8>)
 8002462:	f000 fe2d 	bl	80030c0 <siprintf>

	// temporary, this should be done where the variables are measured

}
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	20000244 	.word	0x20000244
 800246c:	20000288 	.word	0x20000288
 8002470:	20000218 	.word	0x20000218
 8002474:	20000010 	.word	0x20000010
 8002478:	20000210 	.word	0x20000210
 800247c:	20000254 	.word	0x20000254
 8002480:	20000258 	.word	0x20000258
 8002484:	2000025c 	.word	0x2000025c
 8002488:	20000264 	.word	0x20000264
 800248c:	20000260 	.word	0x20000260
 8002490:	20000240 	.word	0x20000240
 8002494:	08003994 	.word	0x08003994

08002498 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002498:	2312      	movs	r3, #18
{
 800249a:	b530      	push	{r4, r5, lr}
 800249c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800249e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80024a0:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80024a2:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024a4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80024a6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80024a8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024aa:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024ac:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80024ae:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b2:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80024b4:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b6:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024b8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80024ba:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80024bc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024be:	f7fe fce1 	bl	8000e84 <HAL_RCC_OscConfig>
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d000      	beq.n	80024c8 <SystemClock_Config+0x30>
 80024c6:	e7fe      	b.n	80024c6 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c8:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ca:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024cc:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024ce:	0021      	movs	r1, r4
 80024d0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d4:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024d6:	f7fe fee9 	bl	80012ac <HAL_RCC_ClockConfig>
 80024da:	2800      	cmp	r0, #0
 80024dc:	d000      	beq.n	80024e0 <SystemClock_Config+0x48>
 80024de:	e7fe      	b.n	80024de <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80024e0:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e2:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024e4:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e6:	f7fe ff8d 	bl	8001404 <HAL_RCCEx_PeriphCLKConfig>
 80024ea:	1e04      	subs	r4, r0, #0
 80024ec:	d000      	beq.n	80024f0 <SystemClock_Config+0x58>
 80024ee:	e7fe      	b.n	80024ee <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80024f0:	f7fe ff72 	bl	80013d8 <HAL_RCC_GetHCLKFreq>
 80024f4:	21fa      	movs	r1, #250	; 0xfa
 80024f6:	0089      	lsls	r1, r1, #2
 80024f8:	f7fd fe18 	bl	800012c <__udivsi3>
 80024fc:	f7fe faee 	bl	8000adc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002500:	2004      	movs	r0, #4
 8002502:	f7fe fb05 	bl	8000b10 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002506:	2001      	movs	r0, #1
 8002508:	0022      	movs	r2, r4
 800250a:	0021      	movs	r1, r4
 800250c:	4240      	negs	r0, r0
 800250e:	f7fe faab 	bl	8000a68 <HAL_NVIC_SetPriority>
}
 8002512:	b015      	add	sp, #84	; 0x54
 8002514:	bd30      	pop	{r4, r5, pc}
	...

08002518 <main>:
{
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 800251c:	f7fe f832 	bl	8000584 <HAL_Init>
  SystemClock_Config();
 8002520:	f7ff ffba 	bl	8002498 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	4c75      	ldr	r4, [pc, #468]	; (80026fc <main+0x1e4>)
 8002528:	0289      	lsls	r1, r1, #10
 800252a:	6962      	ldr	r2, [r4, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800252c:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	430a      	orrs	r2, r1
 8002530:	6162      	str	r2, [r4, #20]
 8002532:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002534:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002538:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	6962      	ldr	r2, [r4, #20]
 8002540:	02c9      	lsls	r1, r1, #11
 8002542:	430a      	orrs	r2, r1
 8002544:	6162      	str	r2, [r4, #20]
 8002546:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	400b      	ands	r3, r1
 800254c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800254e:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002552:	f7fe fc85 	bl	8000e60 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : DEBUG_LED1_Pin DEBUG_LED2_Pin MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 800255c:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	a905      	add	r1, sp, #20
 8002560:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 8002562:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f7fe fbc3 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Pin */
  GPIO_InitStruct.Pin = ENCODER_Pin;
 800256e:	2310      	movs	r3, #16
 8002570:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <main+0x1e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8002574:	a905      	add	r1, sp, #20
 8002576:	4863      	ldr	r0, [pc, #396]	; (8002704 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002578:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 800257c:	f7fe fbba 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8002580:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8002582:	a905      	add	r1, sp, #20
 8002584:	485f      	ldr	r0, [pc, #380]	; (8002704 <main+0x1ec>)
  GPIO_InitStruct.Pin = DIR_Pin;
 8002586:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002588:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800258c:	f7fe fbb2 	bl	8000cf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002590:	002a      	movs	r2, r5
 8002592:	0029      	movs	r1, r5
 8002594:	2007      	movs	r0, #7
 8002596:	f7fe fa67 	bl	8000a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800259a:	2007      	movs	r0, #7
 800259c:	f7fe fa94 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025a0:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80025a2:	002a      	movs	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025a4:	433b      	orrs	r3, r7
 80025a6:	6163      	str	r3, [r4, #20]
 80025a8:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80025aa:	0039      	movs	r1, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ac:	403b      	ands	r3, r7
 80025ae:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80025b0:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025b2:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80025b4:	f7fe fa58 	bl	8000a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025b8:	2009      	movs	r0, #9
 80025ba:	f7fe fa85 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80025be:	002a      	movs	r2, r5
 80025c0:	0039      	movs	r1, r7
 80025c2:	200a      	movs	r0, #10
 80025c4:	f7fe fa50 	bl	8000a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80025c8:	200a      	movs	r0, #10
 80025ca:	f7fe fa7d 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 80025ce:	4c4e      	ldr	r4, [pc, #312]	; (8002708 <main+0x1f0>)
 80025d0:	4b4e      	ldr	r3, [pc, #312]	; (800270c <main+0x1f4>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025d2:	2604      	movs	r6, #4
  hadc.Instance = ADC1;
 80025d4:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025d6:	23c2      	movs	r3, #194	; 0xc2
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025d8:	0020      	movs	r0, r4
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025da:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025dc:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80025de:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025e0:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025e2:	6127      	str	r7, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025e4:	6166      	str	r6, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80025e6:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80025e8:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 80025ea:	6227      	str	r7, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80025ec:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025ee:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025f0:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 80025f2:	6327      	str	r7, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025f4:	6367      	str	r7, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025f6:	f7fe f82f 	bl	8000658 <HAL_ADC_Init>
 80025fa:	42a8      	cmp	r0, r5
 80025fc:	d000      	beq.n	8002600 <main+0xe8>
 80025fe:	e7fe      	b.n	80025fe <main+0xe6>
  sConfig.Channel = ADC_CHANNEL_8;
 8002600:	2308      	movs	r3, #8
 8002602:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	015b      	lsls	r3, r3, #5
 8002608:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800260a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800260c:	a905      	add	r1, sp, #20
 800260e:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002610:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002612:	f7fe f95f 	bl	80008d4 <HAL_ADC_ConfigChannel>
 8002616:	2800      	cmp	r0, #0
 8002618:	d000      	beq.n	800261c <main+0x104>
 800261a:	e7fe      	b.n	800261a <main+0x102>
  sConfig.Channel = ADC_CHANNEL_9;
 800261c:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800261e:	a905      	add	r1, sp, #20
 8002620:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8002622:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002624:	f7fe f956 	bl	80008d4 <HAL_ADC_ConfigChannel>
 8002628:	2800      	cmp	r0, #0
 800262a:	d000      	beq.n	800262e <main+0x116>
 800262c:	e7fe      	b.n	800262c <main+0x114>
  huart1.Instance = USART1;
 800262e:	4b38      	ldr	r3, [pc, #224]	; (8002710 <main+0x1f8>)
 8002630:	4a38      	ldr	r2, [pc, #224]	; (8002714 <main+0x1fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002632:	6098      	str	r0, [r3, #8]
  huart1.Instance = USART1;
 8002634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8002636:	22e1      	movs	r2, #225	; 0xe1
 8002638:	0292      	lsls	r2, r2, #10
 800263a:	605a      	str	r2, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800263c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800263e:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002640:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002644:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002646:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002648:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800264a:	0018      	movs	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800264c:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800264e:	f7ff fc59 	bl	8001f04 <HAL_UART_Init>
 8002652:	2800      	cmp	r0, #0
 8002654:	d000      	beq.n	8002658 <main+0x140>
 8002656:	e7fe      	b.n	8002656 <main+0x13e>
  htim3.Instance = TIM3;
 8002658:	4c2f      	ldr	r4, [pc, #188]	; (8002718 <main+0x200>)
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <main+0x204>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265c:	60a0      	str	r0, [r4, #8]
  htim3.Instance = TIM3;
 800265e:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48;
 8002660:	2330      	movs	r3, #48	; 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002662:	6120      	str	r0, [r4, #16]
  htim3.Init.Prescaler = 48;
 8002664:	6063      	str	r3, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002666:	61a0      	str	r0, [r4, #24]
  htim3.Init.Period = 99;
 8002668:	3333      	adds	r3, #51	; 0x33
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800266a:	0020      	movs	r0, r4
  htim3.Init.Period = 99;
 800266c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800266e:	f7ff f908 	bl	8001882 <HAL_TIM_PWM_Init>
 8002672:	2800      	cmp	r0, #0
 8002674:	d000      	beq.n	8002678 <main+0x160>
 8002676:	e7fe      	b.n	8002676 <main+0x15e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002678:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267a:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800267c:	a903      	add	r1, sp, #12
 800267e:	0020      	movs	r0, r4
 8002680:	f7ff fa0a 	bl	8001a98 <HAL_TIMEx_MasterConfigSynchronization>
 8002684:	2800      	cmp	r0, #0
 8002686:	d000      	beq.n	800268a <main+0x172>
 8002688:	e7fe      	b.n	8002688 <main+0x170>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800268a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800268c:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800268e:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002690:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002692:	0032      	movs	r2, r6
 8002694:	a905      	add	r1, sp, #20
 8002696:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002698:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800269a:	f7ff f949 	bl	8001930 <HAL_TIM_PWM_ConfigChannel>
 800269e:	1e05      	subs	r5, r0, #0
 80026a0:	d000      	beq.n	80026a4 <main+0x18c>
 80026a2:	e7fe      	b.n	80026a2 <main+0x18a>
  HAL_TIM_MspPostInit(&htim3);
 80026a4:	0020      	movs	r0, r4
 80026a6:	f000 f8f5 	bl	8002894 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 80026aa:	481d      	ldr	r0, [pc, #116]	; (8002720 <main+0x208>)
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <main+0x20c>)
  htim14.Init.Period = 2000;
 80026ae:	24fa      	movs	r4, #250	; 0xfa
  htim14.Instance = TIM14;
 80026b0:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 192;
 80026b2:	23c0      	movs	r3, #192	; 0xc0
  htim14.Init.Period = 2000;
 80026b4:	00e4      	lsls	r4, r4, #3
  htim14.Init.Prescaler = 192;
 80026b6:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b8:	6085      	str	r5, [r0, #8]
  htim14.Init.Period = 2000;
 80026ba:	60c4      	str	r4, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026bc:	6105      	str	r5, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026be:	6185      	str	r5, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80026c0:	f7ff f8c4 	bl	800184c <HAL_TIM_Base_Init>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d000      	beq.n	80026ca <main+0x1b2>
 80026c8:	e7fe      	b.n	80026c8 <main+0x1b0>
  htim16.Instance = TIM16;
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <main+0x210>)
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <main+0x214>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ce:	6098      	str	r0, [r3, #8]
  htim16.Instance = TIM16;
 80026d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 384;
 80026d2:	22c0      	movs	r2, #192	; 0xc0
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d4:	6118      	str	r0, [r3, #16]
  htim16.Init.Prescaler = 384;
 80026d6:	0052      	lsls	r2, r2, #1
  htim16.Init.RepetitionCounter = 0;
 80026d8:	6158      	str	r0, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026da:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80026dc:	0018      	movs	r0, r3
  htim16.Init.Prescaler = 384;
 80026de:	605a      	str	r2, [r3, #4]
  htim16.Init.Period = 2000;
 80026e0:	60dc      	str	r4, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80026e2:	f7ff f8b3 	bl	800184c <HAL_TIM_Base_Init>
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d000      	beq.n	80026ec <main+0x1d4>
 80026ea:	e7fe      	b.n	80026ea <main+0x1d2>
  init_variables();
 80026ec:	f7ff fe5e 	bl	80023ac <init_variables>
  startPeripherals();
 80026f0:	f7ff fe28 	bl	8002344 <startPeripherals>
	  user_main();
 80026f4:	f000 fb5c 	bl	8002db0 <user_main>
 80026f8:	e7fc      	b.n	80026f4 <main+0x1dc>
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	40021000 	.word	0x40021000
 8002700:	10310000 	.word	0x10310000
 8002704:	48000400 	.word	0x48000400
 8002708:	20000414 	.word	0x20000414
 800270c:	40012400 	.word	0x40012400
 8002710:	20000320 	.word	0x20000320
 8002714:	40013800 	.word	0x40013800
 8002718:	2000029c 	.word	0x2000029c
 800271c:	40000400 	.word	0x40000400
 8002720:	20000390 	.word	0x20000390
 8002724:	40002000 	.word	0x40002000
 8002728:	20000460 	.word	0x20000460
 800272c:	40014400 	.word	0x40014400

08002730 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002730:	e7fe      	b.n	8002730 <_Error_Handler>
	...

08002734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002734:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2001      	movs	r0, #1
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_MspInit+0x38>)
 800273a:	6991      	ldr	r1, [r2, #24]
 800273c:	4301      	orrs	r1, r0
 800273e:	6191      	str	r1, [r2, #24]
 8002740:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002744:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002746:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002748:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800274a:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800274e:	f7fe f98b 	bl	8000a68 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2002      	movs	r0, #2
 8002756:	0011      	movs	r1, r2
 8002758:	4240      	negs	r0, r0
 800275a:	f7fe f985 	bl	8000a68 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2001      	movs	r0, #1
 8002762:	0011      	movs	r1, r2
 8002764:	4240      	negs	r0, r0
 8002766:	f7fe f97f 	bl	8000a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276a:	bd07      	pop	{r0, r1, r2, pc}
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002770:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_ADC_MspInit+0x70>)
 8002774:	6802      	ldr	r2, [r0, #0]
{
 8002776:	b087      	sub	sp, #28
 8002778:	0005      	movs	r5, r0
  if(hadc->Instance==ADC1)
 800277a:	429a      	cmp	r2, r3
 800277c:	d12d      	bne.n	80027da <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800277e:	2680      	movs	r6, #128	; 0x80
 8002780:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_ADC_MspInit+0x74>)
 8002782:	00b6      	lsls	r6, r6, #2
 8002784:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2700      	movs	r7, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002788:	4332      	orrs	r2, r6
 800278a:	619a      	str	r2, [r3, #24]
 800278c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	4816      	ldr	r0, [pc, #88]	; (80027e8 <HAL_ADC_MspInit+0x78>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002790:	4033      	ands	r3, r6
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 8002796:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002798:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 800279a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f7fe faa8 	bl	8000cf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80027a4:	4c11      	ldr	r4, [pc, #68]	; (80027ec <HAL_ADC_MspInit+0x7c>)
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_ADC_MspInit+0x80>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80027a8:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 80027aa:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80027b6:	2320      	movs	r3, #32
 80027b8:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027be:	6067      	str	r7, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c0:	60a7      	str	r7, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027c2:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80027c4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80027c6:	f7fe f9b7 	bl	8000b38 <HAL_DMA_Init>
 80027ca:	42b8      	cmp	r0, r7
 80027cc:	d003      	beq.n	80027d6 <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 80027ce:	216b      	movs	r1, #107	; 0x6b
 80027d0:	4808      	ldr	r0, [pc, #32]	; (80027f4 <HAL_ADC_MspInit+0x84>)
 80027d2:	f7ff ffad 	bl	8002730 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80027d6:	63ec      	str	r4, [r5, #60]	; 0x3c
 80027d8:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027da:	b007      	add	sp, #28
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	40012400 	.word	0x40012400
 80027e4:	40021000 	.word	0x40021000
 80027e8:	48000400 	.word	0x48000400
 80027ec:	200003d0 	.word	0x200003d0
 80027f0:	40020008 	.word	0x40020008
 80027f4:	08003997 	.word	0x08003997

080027f8 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027f8:	b507      	push	{r0, r1, r2, lr}

  if(htim_pwm->Instance==TIM3)
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_TIM_PWM_MspInit+0x30>)
 80027fc:	6802      	ldr	r2, [r0, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d110      	bne.n	8002824 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002802:	2002      	movs	r0, #2
 8002804:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_TIM_PWM_MspInit+0x34>)
 8002806:	69d1      	ldr	r1, [r2, #28]
 8002808:	4301      	orrs	r1, r0
 800280a:	61d1      	str	r1, [r2, #28]
 800280c:	69d3      	ldr	r3, [r2, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800280e:	2101      	movs	r1, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002810:	4003      	ands	r3, r0
 8002812:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002814:	300e      	adds	r0, #14
 8002816:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002818:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800281a:	f7fe f925 	bl	8000a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800281e:	2010      	movs	r0, #16
 8002820:	f7fe f952 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002824:	bd07      	pop	{r0, r1, r2, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	40000400 	.word	0x40000400
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002830:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM14)
 8002832:	6803      	ldr	r3, [r0, #0]
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_TIM_Base_MspInit+0x58>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d112      	bne.n	8002860 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800283a:	2080      	movs	r0, #128	; 0x80
 800283c:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_TIM_Base_MspInit+0x5c>)
 800283e:	0040      	lsls	r0, r0, #1
 8002840:	69d1      	ldr	r1, [r2, #28]
 8002842:	4301      	orrs	r1, r0
 8002844:	61d1      	str	r1, [r2, #28]
 8002846:	69d3      	ldr	r3, [r2, #28]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8002848:	2101      	movs	r1, #1
    __HAL_RCC_TIM14_CLK_ENABLE();
 800284a:	4003      	ands	r3, r0
 800284c:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 800284e:	38ed      	subs	r0, #237	; 0xed
 8002850:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002852:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8002854:	f7fe f908 	bl	8000a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002858:	2013      	movs	r0, #19
  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800285a:	f7fe f935 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800285e:	bd07      	pop	{r0, r1, r2, pc}
  else if(htim_base->Instance==TIM16)
 8002860:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_TIM_Base_MspInit+0x60>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d1fb      	bne.n	800285e <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002866:	2080      	movs	r0, #128	; 0x80
 8002868:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_TIM_Base_MspInit+0x5c>)
 800286a:	0280      	lsls	r0, r0, #10
 800286c:	6991      	ldr	r1, [r2, #24]
 800286e:	4301      	orrs	r1, r0
 8002870:	6191      	str	r1, [r2, #24]
 8002872:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002874:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002876:	4003      	ands	r3, r0
 8002878:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800287a:	2015      	movs	r0, #21
 800287c:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 800287e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002880:	f7fe f8f2 	bl	8000a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002884:	2015      	movs	r0, #21
 8002886:	e7e8      	b.n	800285a <HAL_TIM_Base_MspInit+0x2a>
 8002888:	40002000 	.word	0x40002000
 800288c:	40021000 	.word	0x40021000
 8002890:	40014400 	.word	0x40014400

08002894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_TIM_MspPostInit+0x2c>)
 8002898:	6802      	ldr	r2, [r0, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d10d      	bne.n	80028ba <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM3_MspPostInit 0 */
  
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = PWM_SIGNAL_Pin;
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	3b7e      	subs	r3, #126	; 0x7e
 80028a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80028a6:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80028aa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80028b0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80028b2:	3301      	adds	r3, #1
 80028b4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80028b6:	f7fe fa1d 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028ba:	b007      	add	sp, #28
 80028bc:	bd00      	pop	{pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	40000400 	.word	0x40000400

080028c4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_UART_MspInit+0x8c>)
 80028c8:	6802      	ldr	r2, [r0, #0]
{
 80028ca:	b086      	sub	sp, #24
 80028cc:	0006      	movs	r6, r0
  if(huart->Instance==USART1)
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d13b      	bne.n	800294a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028d2:	2080      	movs	r0, #128	; 0x80
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_UART_MspInit+0x90>)
 80028d6:	01c0      	lsls	r0, r0, #7
 80028d8:	6991      	ldr	r1, [r2, #24]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80028dc:	4301      	orrs	r1, r0
 80028de:	6191      	str	r1, [r2, #24]
 80028e0:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80028e4:	4003      	ands	r3, r0
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028ea:	23c0      	movs	r3, #192	; 0xc0
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f6:	3301      	adds	r3, #1
 80028f8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80028fc:	3b02      	subs	r3, #2
 80028fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f7fe f9f7 	bl	8000cf4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002906:	4c14      	ldr	r4, [pc, #80]	; (8002958 <HAL_UART_MspInit+0x94>)
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_UART_MspInit+0x98>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800290a:	0020      	movs	r0, r4
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800290c:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800290e:	2310      	movs	r3, #16
 8002910:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002912:	3370      	adds	r3, #112	; 0x70
 8002914:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800291a:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800291c:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800291e:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002920:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002922:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002924:	f7fe f908 	bl	8000b38 <HAL_DMA_Init>
 8002928:	42a8      	cmp	r0, r5
 800292a:	d004      	beq.n	8002936 <HAL_UART_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 800292c:	213c      	movs	r1, #60	; 0x3c
 800292e:	480c      	ldr	r0, [pc, #48]	; (8002960 <HAL_UART_MspInit+0x9c>)
 8002930:	31ff      	adds	r1, #255	; 0xff
 8002932:	f7ff fefd 	bl	8002730 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800293a:	6634      	str	r4, [r6, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800293c:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800293e:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002940:	f7fe f892 	bl	8000a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002944:	201b      	movs	r0, #27
 8002946:	f7fe f8bf 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800294a:	b006      	add	sp, #24
 800294c:	bd70      	pop	{r4, r5, r6, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40013800 	.word	0x40013800
 8002954:	40021000 	.word	0x40021000
 8002958:	200002dc 	.word	0x200002dc
 800295c:	4002001c 	.word	0x4002001c
 8002960:	08003997 	.word	0x08003997

08002964 <NMI_Handler>:
 8002964:	4770      	bx	lr

08002966 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002966:	e7fe      	b.n	8002966 <HardFault_Handler>

08002968 <SVC_Handler>:
 8002968:	4770      	bx	lr

0800296a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296a:	4770      	bx	lr

0800296c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800296c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800296e:	f7fd fe19 	bl	80005a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002972:	f7fe f8dc 	bl	8000b2e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002976:	bd10      	pop	{r4, pc}

08002978 <EXTI4_15_IRQHandler>:

/**
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
 8002978:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800297a:	2010      	movs	r0, #16
 800297c:	f7fe fa76 	bl	8000e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002980:	bd10      	pop	{r4, pc}
	...

08002984 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8002984:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002986:	4802      	ldr	r0, [pc, #8]	; (8002990 <DMA1_Channel1_IRQHandler+0xc>)
 8002988:	f7fe f96a 	bl	8000c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800298c:	bd10      	pop	{r4, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	200003d0 	.word	0x200003d0

08002994 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 8002994:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002996:	4802      	ldr	r0, [pc, #8]	; (80029a0 <DMA1_Channel2_3_IRQHandler+0xc>)
 8002998:	f7fe f962 	bl	8000c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800299c:	bd10      	pop	{r4, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	200002dc 	.word	0x200002dc

080029a4 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 80029a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029a6:	4802      	ldr	r0, [pc, #8]	; (80029b0 <TIM3_IRQHandler+0xc>)
 80029a8:	f7fe fe6b 	bl	8001682 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	2000029c 	.word	0x2000029c

080029b4 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 80029b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80029b6:	4802      	ldr	r0, [pc, #8]	; (80029c0 <TIM14_IRQHandler+0xc>)
 80029b8:	f7fe fe63 	bl	8001682 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	20000390 	.word	0x20000390

080029c4 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 80029c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80029c6:	4802      	ldr	r0, [pc, #8]	; (80029d0 <TIM16_IRQHandler+0xc>)
 80029c8:	f7fe fe5b 	bl	8001682 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	20000460 	.word	0x20000460

080029d4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 80029d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d6:	4802      	ldr	r0, [pc, #8]	; (80029e0 <USART1_IRQHandler+0xc>)
 80029d8:	f7ff fb4e 	bl	8002078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029dc:	bd10      	pop	{r4, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	20000320 	.word	0x20000320

080029e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80029e4:	2101      	movs	r1, #1
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80029e8:	4811      	ldr	r0, [pc, #68]	; (8002a30 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	4002      	ands	r2, r0
 80029f4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	480e      	ldr	r0, [pc, #56]	; (8002a34 <SystemInit+0x50>)
 80029fa:	4002      	ands	r2, r0
 80029fc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <SystemInit+0x54>)
 8002a02:	4002      	ands	r2, r0
 8002a04:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <SystemInit+0x58>)
 8002a0a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002a0c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002a0e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a12:	4382      	bics	r2, r0
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a18:	4809      	ldr	r0, [pc, #36]	; (8002a40 <SystemInit+0x5c>)
 8002a1a:	4002      	ands	r2, r0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a20:	438a      	bics	r2, r1
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]

}
 8002a28:	4770      	bx	lr
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	08ffb80c 	.word	0x08ffb80c
 8002a34:	fef6ffff 	.word	0xfef6ffff
 8002a38:	fffbffff 	.word	0xfffbffff
 8002a3c:	ffc0ffff 	.word	0xffc0ffff
 8002a40:	fffffeec 	.word	0xfffffeec

08002a44 <data_aquisition>:
#include "function.h"
#include "variables.h"
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim3;

void data_aquisition(){
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a46:	46de      	mov	lr, fp
 8002a48:	4657      	mov	r7, sl
 8002a4a:	464e      	mov	r6, r9
 8002a4c:	4645      	mov	r5, r8
 8002a4e:	b5e0      	push	{r5, r6, r7, lr}
 8002a50:	b085      	sub	sp, #20
	size_data_buffer = strlen((char*)data_buffer);
 8002a52:	4e54      	ldr	r6, [pc, #336]	; (8002ba4 <data_aquisition+0x160>)
 8002a54:	6833      	ldr	r3, [r6, #0]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7fd fb55 	bl	8000108 <strlen>
 8002a5e:	4682      	mov	sl, r0
 8002a60:	4c51      	ldr	r4, [pc, #324]	; (8002ba8 <data_aquisition+0x164>)
 8002a62:	6020      	str	r0, [r4, #0]
	size_time = strlen((char*)send_time);
 8002a64:	4b51      	ldr	r3, [pc, #324]	; (8002bac <data_aquisition+0x168>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7fd fb4c 	bl	8000108 <strlen>
 8002a70:	4d4f      	ldr	r5, [pc, #316]	; (8002bb0 <data_aquisition+0x16c>)
 8002a72:	9002      	str	r0, [sp, #8]
 8002a74:	6028      	str	r0, [r5, #0]
	size_q1 = strlen((char*)send_q1);
 8002a76:	4f4f      	ldr	r7, [pc, #316]	; (8002bb4 <data_aquisition+0x170>)
 8002a78:	46bb      	mov	fp, r7
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	f7fd fb44 	bl	8000108 <strlen>
 8002a80:	4f4d      	ldr	r7, [pc, #308]	; (8002bb8 <data_aquisition+0x174>)
 8002a82:	6038      	str	r0, [r7, #0]
	size_q2 = strlen((char*)send_q2);
 8002a84:	494d      	ldr	r1, [pc, #308]	; (8002bbc <data_aquisition+0x178>)
 8002a86:	6809      	ldr	r1, [r1, #0]
 8002a88:	9103      	str	r1, [sp, #12]
 8002a8a:	0008      	movs	r0, r1
 8002a8c:	f7fd fb3c 	bl	8000108 <strlen>
 8002a90:	494b      	ldr	r1, [pc, #300]	; (8002bc0 <data_aquisition+0x17c>)
 8002a92:	4688      	mov	r8, r1
 8002a94:	6008      	str	r0, [r1, #0]
	size_torque = strlen((char*)send_torque);
 8002a96:	494b      	ldr	r1, [pc, #300]	; (8002bc4 <data_aquisition+0x180>)
 8002a98:	6809      	ldr	r1, [r1, #0]
 8002a9a:	9103      	str	r1, [sp, #12]
 8002a9c:	0008      	movs	r0, r1
 8002a9e:	f7fd fb33 	bl	8000108 <strlen>
 8002aa2:	4949      	ldr	r1, [pc, #292]	; (8002bc8 <data_aquisition+0x184>)
 8002aa4:	4689      	mov	r9, r1
 8002aa6:	6008      	str	r0, [r1, #0]

	//memset(data_buffer,0x00,40);
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 8002aa8:	9b00      	ldr	r3, [sp, #0]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	4450      	add	r0, sl
 8002aae:	9a02      	ldr	r2, [sp, #8]
 8002ab0:	9901      	ldr	r1, [sp, #4]
 8002ab2:	f000 fa39 	bl	8002f28 <memcpy>
	memcpy(data_buffer+size_time+size_data_buffer, comma, 1);
 8002ab6:	682b      	ldr	r3, [r5, #0]
 8002ab8:	6822      	ldr	r2, [r4, #0]
 8002aba:	4694      	mov	ip, r2
 8002abc:	4463      	add	r3, ip
 8002abe:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <data_aquisition+0x188>)
 8002ac0:	4692      	mov	sl, r2
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	6831      	ldr	r1, [r6, #0]
 8002ac8:	54ca      	strb	r2, [r1, r3]
	memcpy(data_buffer+1+size_time+size_data_buffer, send_q1, size_q1);
 8002aca:	682b      	ldr	r3, [r5, #0]
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	4694      	mov	ip, r2
 8002ad0:	4463      	add	r3, ip
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	6833      	ldr	r3, [r6, #0]
 8002ad8:	469c      	mov	ip, r3
 8002ada:	4460      	add	r0, ip
 8002adc:	465b      	mov	r3, fp
 8002ade:	6819      	ldr	r1, [r3, #0]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	f000 fa21 	bl	8002f28 <memcpy>
	memcpy(data_buffer+1+size_q1+size_time+size_data_buffer, comma, 1);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	682a      	ldr	r2, [r5, #0]
 8002aea:	4694      	mov	ip, r2
 8002aec:	4463      	add	r3, ip
 8002aee:	6822      	ldr	r2, [r4, #0]
 8002af0:	4694      	mov	ip, r2
 8002af2:	4463      	add	r3, ip
 8002af4:	3301      	adds	r3, #1
 8002af6:	4652      	mov	r2, sl
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	6831      	ldr	r1, [r6, #0]
 8002afe:	54ca      	strb	r2, [r1, r3]
	memcpy(data_buffer+2+size_q1+size_time+size_data_buffer, send_q2, size_q2);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	682a      	ldr	r2, [r5, #0]
 8002b04:	4694      	mov	ip, r2
 8002b06:	4463      	add	r3, ip
 8002b08:	0018      	movs	r0, r3
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	469c      	mov	ip, r3
 8002b0e:	4460      	add	r0, ip
 8002b10:	3002      	adds	r0, #2
 8002b12:	6833      	ldr	r3, [r6, #0]
 8002b14:	469c      	mov	ip, r3
 8002b16:	4460      	add	r0, ip
 8002b18:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <data_aquisition+0x178>)
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	4643      	mov	r3, r8
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	f000 fa02 	bl	8002f28 <memcpy>
	memcpy(data_buffer+2+size_q1+size_time+size_q2+size_data_buffer, comma, 1);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	682a      	ldr	r2, [r5, #0]
 8002b28:	4694      	mov	ip, r2
 8002b2a:	4463      	add	r3, ip
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	4694      	mov	ip, r2
 8002b32:	4463      	add	r3, ip
 8002b34:	6822      	ldr	r2, [r4, #0]
 8002b36:	4694      	mov	ip, r2
 8002b38:	4463      	add	r3, ip
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	4652      	mov	r2, sl
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	6831      	ldr	r1, [r6, #0]
 8002b44:	54ca      	strb	r2, [r1, r3]
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_data_buffer, send_torque, size_torque);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	682a      	ldr	r2, [r5, #0]
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	4463      	add	r3, ip
 8002b4e:	0018      	movs	r0, r3
 8002b50:	4643      	mov	r3, r8
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	469c      	mov	ip, r3
 8002b56:	4460      	add	r0, ip
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	469c      	mov	ip, r3
 8002b5c:	4460      	add	r0, ip
 8002b5e:	3003      	adds	r0, #3
 8002b60:	6833      	ldr	r3, [r6, #0]
 8002b62:	469c      	mov	ip, r3
 8002b64:	4460      	add	r0, ip
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <data_aquisition+0x180>)
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f000 f9db 	bl	8002f28 <memcpy>
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_torque+size_data_buffer, endSymbol, 1);
 8002b72:	6832      	ldr	r2, [r6, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6829      	ldr	r1, [r5, #0]
 8002b78:	185b      	adds	r3, r3, r1
 8002b7a:	4641      	mov	r1, r8
 8002b7c:	6809      	ldr	r1, [r1, #0]
 8002b7e:	185b      	adds	r3, r3, r1
 8002b80:	4649      	mov	r1, r9
 8002b82:	6809      	ldr	r1, [r1, #0]
 8002b84:	185b      	adds	r3, r3, r1
 8002b86:	6821      	ldr	r1, [r4, #0]
 8002b88:	185b      	adds	r3, r3, r1
 8002b8a:	3303      	adds	r3, #3
 8002b8c:	4910      	ldr	r1, [pc, #64]	; (8002bd0 <data_aquisition+0x18c>)
 8002b8e:	6809      	ldr	r1, [r1, #0]
 8002b90:	7809      	ldrb	r1, [r1, #0]
 8002b92:	54d1      	strb	r1, [r2, r3]

//	HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
}
 8002b94:	b005      	add	sp, #20
 8002b96:	bc3c      	pop	{r2, r3, r4, r5}
 8002b98:	4690      	mov	r8, r2
 8002b9a:	4699      	mov	r9, r3
 8002b9c:	46a2      	mov	sl, r4
 8002b9e:	46ab      	mov	fp, r5
 8002ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	20000218 	.word	0x20000218
 8002ba8:	20000268 	.word	0x20000268
 8002bac:	20000260 	.word	0x20000260
 8002bb0:	20000274 	.word	0x20000274
 8002bb4:	20000258 	.word	0x20000258
 8002bb8:	2000026c 	.word	0x2000026c
 8002bbc:	2000025c 	.word	0x2000025c
 8002bc0:	20000270 	.word	0x20000270
 8002bc4:	20000264 	.word	0x20000264
 8002bc8:	20000278 	.word	0x20000278
 8002bcc:	20000008 	.word	0x20000008
 8002bd0:	20000018 	.word	0x20000018

08002bd4 <uart_request>:


void uart_request(){
 8002bd4:	b570      	push	{r4, r5, r6, lr}

	rx_buffer[rx_buffer_cntr] = rx_byte;
 8002bd6:	4b68      	ldr	r3, [pc, #416]	; (8002d78 <uart_request+0x1a4>)
 8002bd8:	4a68      	ldr	r2, [pc, #416]	; (8002d7c <uart_request+0x1a8>)
 8002bda:	7812      	ldrb	r2, [r2, #0]
 8002bdc:	4968      	ldr	r1, [pc, #416]	; (8002d80 <uart_request+0x1ac>)
 8002bde:	7809      	ldrb	r1, [r1, #0]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	5481      	strb	r1, [r0, r2]
	if(*rx_buffer == '$'){
 8002be4:	681c      	ldr	r4, [r3, #0]
 8002be6:	7823      	ldrb	r3, [r4, #0]
 8002be8:	2b24      	cmp	r3, #36	; 0x24
 8002bea:	d00f      	beq.n	8002c0c <uart_request+0x38>
		rx_buffer_cntr += 1;
	}
	if(rx_buffer_cntr > 10){
 8002bec:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <uart_request+0x1a8>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b0a      	cmp	r3, #10
 8002bf2:	d902      	bls.n	8002bfa <uart_request+0x26>
		rx_buffer_cntr = 0;
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <uart_request+0x1a8>)
 8002bf8:	701a      	strb	r2, [r3, #0]
	}
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 8002bfa:	7823      	ldrb	r3, [r4, #0]
 8002bfc:	2b24      	cmp	r3, #36	; 0x24
 8002bfe:	d00a      	beq.n	8002c16 <uart_request+0x42>

		}

	}

	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8002c00:	2201      	movs	r2, #1
 8002c02:	495f      	ldr	r1, [pc, #380]	; (8002d80 <uart_request+0x1ac>)
 8002c04:	485f      	ldr	r0, [pc, #380]	; (8002d84 <uart_request+0x1b0>)
 8002c06:	f7fe ffa9 	bl	8001b5c <HAL_UART_Receive_IT>


}
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
		rx_buffer_cntr += 1;
 8002c0c:	4a5b      	ldr	r2, [pc, #364]	; (8002d7c <uart_request+0x1a8>)
 8002c0e:	7813      	ldrb	r3, [r2, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	7013      	strb	r3, [r2, #0]
 8002c14:	e7ea      	b.n	8002bec <uart_request+0x18>
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 8002c16:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <uart_request+0x1a8>)
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	18a3      	adds	r3, r4, r2
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b0a      	cmp	r3, #10
 8002c22:	d1ed      	bne.n	8002c00 <uart_request+0x2c>
 8002c24:	2a02      	cmp	r2, #2
 8002c26:	d9eb      	bls.n	8002c00 <uart_request+0x2c>
		switch(rx_buffer[1]){
 8002c28:	7863      	ldrb	r3, [r4, #1]
 8002c2a:	3b41      	subs	r3, #65	; 0x41
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	2a17      	cmp	r2, #23
 8002c30:	d8e6      	bhi.n	8002c00 <uart_request+0x2c>
 8002c32:	0093      	lsls	r3, r2, #2
 8002c34:	4a54      	ldr	r2, [pc, #336]	; (8002d88 <uart_request+0x1b4>)
 8002c36:	58d3      	ldr	r3, [r2, r3]
 8002c38:	469f      	mov	pc, r3
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002c3a:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <uart_request+0x1b8>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	6353      	str	r3, [r2, #52]	; 0x34
			enable_data_aquisition = 0;
 8002c42:	4a53      	ldr	r2, [pc, #332]	; (8002d90 <uart_request+0x1bc>)
 8002c44:	7013      	strb	r3, [r2, #0]
			enable_encoder_reading = 0;
 8002c46:	4a53      	ldr	r2, [pc, #332]	; (8002d94 <uart_request+0x1c0>)
 8002c48:	7013      	strb	r3, [r2, #0]
			enable_ADC_interrupt = 0;
 8002c4a:	4a53      	ldr	r2, [pc, #332]	; (8002d98 <uart_request+0x1c4>)
 8002c4c:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8002c4e:	0020      	movs	r0, r4
 8002c50:	f7fd fa5a 	bl	8000108 <strlen>
 8002c54:	b282      	uxth	r2, r0
 8002c56:	0021      	movs	r1, r4
 8002c58:	484a      	ldr	r0, [pc, #296]	; (8002d84 <uart_request+0x1b0>)
 8002c5a:	f7fe ff51 	bl	8001b00 <HAL_UART_Transmit_IT>
			break;
 8002c5e:	e7cf      	b.n	8002c00 <uart_request+0x2c>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)acrobat),strlen((char*)acrobat));
 8002c60:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <uart_request+0x1c8>)
 8002c62:	681c      	ldr	r4, [r3, #0]
 8002c64:	0020      	movs	r0, r4
 8002c66:	f7fd fa4f 	bl	8000108 <strlen>
 8002c6a:	b282      	uxth	r2, r0
 8002c6c:	0021      	movs	r1, r4
 8002c6e:	4845      	ldr	r0, [pc, #276]	; (8002d84 <uart_request+0x1b0>)
 8002c70:	f7fe ff46 	bl	8001b00 <HAL_UART_Transmit_IT>
			break;
 8002c74:	e7c4      	b.n	8002c00 <uart_request+0x2c>
			if(*(rx_buffer+3) == '1'){
 8002c76:	78e3      	ldrb	r3, [r4, #3]
 8002c78:	2b31      	cmp	r3, #49	; 0x31
 8002c7a:	d005      	beq.n	8002c88 <uart_request+0xb4>
			else if(rx_buffer[3] == '0'){
 8002c7c:	2b30      	cmp	r3, #48	; 0x30
 8002c7e:	d1bf      	bne.n	8002c00 <uart_request+0x2c>
				enable_data_aquisition = 0;
 8002c80:	2200      	movs	r2, #0
 8002c82:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <uart_request+0x1bc>)
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e7bb      	b.n	8002c00 <uart_request+0x2c>
				HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8002c88:	0020      	movs	r0, r4
 8002c8a:	f7fd fa3d 	bl	8000108 <strlen>
 8002c8e:	b282      	uxth	r2, r0
 8002c90:	0021      	movs	r1, r4
 8002c92:	483c      	ldr	r0, [pc, #240]	; (8002d84 <uart_request+0x1b0>)
 8002c94:	f7fe ff34 	bl	8001b00 <HAL_UART_Transmit_IT>
				enable_data_aquisition = 1;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <uart_request+0x1bc>)
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e7af      	b.n	8002c00 <uart_request+0x2c>
			if(rx_buffer[2] == 1){
 8002ca0:	78a3      	ldrb	r3, [r4, #2]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d005      	beq.n	8002cb2 <uart_request+0xde>
			else if(rx_buffer[2] == 0){
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1aa      	bne.n	8002c00 <uart_request+0x2c>
				start = 0;
 8002caa:	2200      	movs	r2, #0
 8002cac:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <uart_request+0x1cc>)
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e7a6      	b.n	8002c00 <uart_request+0x2c>
				start = 1;
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <uart_request+0x1cc>)
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e7a2      	b.n	8002c00 <uart_request+0x2c>
			memcpy(scratchpad, rx_buffer+3, strlen((char*)rx_buffer)-4);
 8002cba:	1ce5      	adds	r5, r4, #3
 8002cbc:	0020      	movs	r0, r4
 8002cbe:	f7fd fa23 	bl	8000108 <strlen>
 8002cc2:	4c38      	ldr	r4, [pc, #224]	; (8002da4 <uart_request+0x1d0>)
 8002cc4:	1f02      	subs	r2, r0, #4
 8002cc6:	0029      	movs	r1, r5
 8002cc8:	6820      	ldr	r0, [r4, #0]
 8002cca:	f000 f92d 	bl	8002f28 <memcpy>
			duty_cycle = (uint8_t)strtol(scratchpad, (char**)NULL,10);
 8002cce:	6820      	ldr	r0, [r4, #0]
 8002cd0:	220a      	movs	r2, #10
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f000 fa9c 	bl	8003210 <strtol>
 8002cd8:	b2c0      	uxtb	r0, r0
 8002cda:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <uart_request+0x1d4>)
 8002cdc:	7018      	strb	r0, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <uart_request+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6398      	str	r0, [r3, #56]	; 0x38
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <uart_request+0x1a4>)
 8002ce6:	681c      	ldr	r4, [r3, #0]
 8002ce8:	0020      	movs	r0, r4
 8002cea:	f7fd fa0d 	bl	8000108 <strlen>
 8002cee:	b282      	uxth	r2, r0
 8002cf0:	0021      	movs	r1, r4
 8002cf2:	4824      	ldr	r0, [pc, #144]	; (8002d84 <uart_request+0x1b0>)
 8002cf4:	f7fe ff04 	bl	8001b00 <HAL_UART_Transmit_IT>
			break;
 8002cf8:	e782      	b.n	8002c00 <uart_request+0x2c>
			if(rx_buffer[3] == 1){
 8002cfa:	78e3      	ldrb	r3, [r4, #3]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d006      	beq.n	8002d0e <uart_request+0x13a>
			else if(rx_buffer[3] == 0){
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d000      	beq.n	8002d06 <uart_request+0x132>
 8002d04:	e77c      	b.n	8002c00 <uart_request+0x2c>
				enable_encoder_reading = 0;
 8002d06:	2200      	movs	r2, #0
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <uart_request+0x1c0>)
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e778      	b.n	8002c00 <uart_request+0x2c>
				enable_encoder_reading = 1;
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <uart_request+0x1c0>)
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e774      	b.n	8002c00 <uart_request+0x2c>
			if(rx_buffer[3] == '1'){
 8002d16:	78e3      	ldrb	r3, [r4, #3]
 8002d18:	2b31      	cmp	r3, #49	; 0x31
 8002d1a:	d006      	beq.n	8002d2a <uart_request+0x156>
			else if(rx_buffer[3] == '0'){
 8002d1c:	2b30      	cmp	r3, #48	; 0x30
 8002d1e:	d000      	beq.n	8002d22 <uart_request+0x14e>
 8002d20:	e76e      	b.n	8002c00 <uart_request+0x2c>
				enable_ADC_interrupt = 0;
 8002d22:	2200      	movs	r2, #0
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <uart_request+0x1c4>)
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e76a      	b.n	8002c00 <uart_request+0x2c>
				enable_ADC_interrupt = 1;
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <uart_request+0x1c4>)
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e766      	b.n	8002c00 <uart_request+0x2c>
			if(rx_buffer[3] == '1'){
 8002d32:	78e3      	ldrb	r3, [r4, #3]
 8002d34:	2b31      	cmp	r3, #49	; 0x31
 8002d36:	d00c      	beq.n	8002d52 <uart_request+0x17e>
			else if(rx_buffer[3] == '0'){
 8002d38:	2b30      	cmp	r3, #48	; 0x30
 8002d3a:	d013      	beq.n	8002d64 <uart_request+0x190>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <uart_request+0x1a4>)
 8002d3e:	681c      	ldr	r4, [r3, #0]
 8002d40:	0020      	movs	r0, r4
 8002d42:	f7fd f9e1 	bl	8000108 <strlen>
 8002d46:	b282      	uxth	r2, r0
 8002d48:	0021      	movs	r1, r4
 8002d4a:	480e      	ldr	r0, [pc, #56]	; (8002d84 <uart_request+0x1b0>)
 8002d4c:	f7fe fed8 	bl	8001b00 <HAL_UART_Transmit_IT>
			break;
 8002d50:	e756      	b.n	8002c00 <uart_request+0x2c>
				motor_dir = 1;
 8002d52:	2201      	movs	r2, #1
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <uart_request+0x1d8>)
 8002d56:	701a      	strb	r2, [r3, #0]
				output_torque(motor_dir, duty_cycle);
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <uart_request+0x1d4>)
 8002d5a:	7819      	ldrb	r1, [r3, #0]
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f7ff fadd 	bl	800231c <output_torque>
 8002d62:	e7eb      	b.n	8002d3c <uart_request+0x168>
				motor_dir = 0;
 8002d64:	2200      	movs	r2, #0
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <uart_request+0x1d8>)
 8002d68:	701a      	strb	r2, [r3, #0]
				output_torque(motor_dir, duty_cycle);
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <uart_request+0x1d4>)
 8002d6c:	7819      	ldrb	r1, [r3, #0]
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7ff fad4 	bl	800231c <output_torque>
 8002d74:	e7e2      	b.n	8002d3c <uart_request+0x168>
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	20000244 	.word	0x20000244
 8002d7c:	20000248 	.word	0x20000248
 8002d80:	20000249 	.word	0x20000249
 8002d84:	20000320 	.word	0x20000320
 8002d88:	080039cc 	.word	0x080039cc
 8002d8c:	2000029c 	.word	0x2000029c
 8002d90:	2000021e 	.word	0x2000021e
 8002d94:	20000015 	.word	0x20000015
 8002d98:	20000014 	.word	0x20000014
 8002d9c:	20000004 	.word	0x20000004
 8002da0:	2000027c 	.word	0x2000027c
 8002da4:	20000254 	.word	0x20000254
 8002da8:	2000021d 	.word	0x2000021d
 8002dac:	20000220 	.word	0x20000220

08002db0 <user_main>:
#include "function.h"
#include "variables.h"

extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim14;
void user_main(){
 8002db0:	b570      	push	{r4, r5, r6, lr}

	if(uart_flag == 1){
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <user_main+0x94>)
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	2a01      	cmp	r2, #1
 8002db8:	d103      	bne.n	8002dc2 <user_main+0x12>
		uart_flag = 0;
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
		uart_request();
 8002dbe:	f7ff ff09 	bl	8002bd4 <uart_request>

	}

	if(enable_encoder_reading == 1){
 8002dc2:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <user_main+0x98>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <user_main+0x2a>
		if(encoder_flag == 1){
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <user_main+0x9c>)
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	2a01      	cmp	r2, #1
 8002dd0:	d103      	bne.n	8002dda <user_main+0x2a>
			encoder_flag = 0;
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
			read_motor_position();
 8002dd6:	f7ff fa6f 	bl	80022b8 <read_motor_position>
		}
	}

	if(enable_ADC_interrupt == 1){
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <user_main+0xa0>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <user_main+0x42>
		if(adc_flag == 1){
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <user_main+0xa4>)
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	2a01      	cmp	r2, #1
 8002de8:	d103      	bne.n	8002df2 <user_main+0x42>
			adc_flag = 0;
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
			get_current_potentiometer();
 8002dee:	f7ff f9cf 	bl	8002190 <get_current_potentiometer>
	//		control_law();
		}
	}


	if(enable_data_aquisition){
 8002df2:	4c19      	ldr	r4, [pc, #100]	; (8002e58 <user_main+0xa8>)
 8002df4:	7823      	ldrb	r3, [r4, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d010      	beq.n	8002e1c <user_main+0x6c>
		if(data_flag == 1){ // send system variables over UART
 8002dfa:	4d18      	ldr	r5, [pc, #96]	; (8002e5c <user_main+0xac>)
 8002dfc:	782b      	ldrb	r3, [r5, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10c      	bne.n	8002e1c <user_main+0x6c>
			time += 1;
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <user_main+0xb0>)
			sprintf(send_time,"%lu", time);
 8002e04:	4917      	ldr	r1, [pc, #92]	; (8002e64 <user_main+0xb4>)
			time += 1;
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	3201      	adds	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
			sprintf(send_time,"%lu", time);
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <user_main+0xb8>)
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	f000 f956 	bl	80030c0 <siprintf>
			data_flag = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	702b      	strb	r3, [r5, #0]
			data_aquisition();
 8002e18:	f7ff fe14 	bl	8002a44 <data_aquisition>
		}
	}

	if(send_data_flag && enable_data_aquisition){
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <user_main+0xbc>)
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	2a00      	cmp	r2, #0
 8002e22:	d00e      	beq.n	8002e42 <user_main+0x92>
 8002e24:	7822      	ldrb	r2, [r4, #0]
 8002e26:	2a00      	cmp	r2, #0
 8002e28:	d00b      	beq.n	8002e42 <user_main+0x92>
		send_data_flag = 0;
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <user_main+0xc0>)
 8002e30:	681c      	ldr	r4, [r3, #0]
 8002e32:	0020      	movs	r0, r4
 8002e34:	f7fd f968 	bl	8000108 <strlen>
 8002e38:	0021      	movs	r1, r4
 8002e3a:	b282      	uxth	r2, r0
 8002e3c:	480d      	ldr	r0, [pc, #52]	; (8002e74 <user_main+0xc4>)
 8002e3e:	f7fe fed7 	bl	8001bf0 <HAL_UART_Transmit_DMA>
	}

//	time = htim14.Instance->CNT;


}
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	20000285 	.word	0x20000285
 8002e48:	20000015 	.word	0x20000015
 8002e4c:	2000021f 	.word	0x2000021f
 8002e50:	20000014 	.word	0x20000014
 8002e54:	20000214 	.word	0x20000214
 8002e58:	2000021e 	.word	0x2000021e
 8002e5c:	2000021c 	.word	0x2000021c
 8002e60:	20000280 	.word	0x20000280
 8002e64:	08003990 	.word	0x08003990
 8002e68:	20000260 	.word	0x20000260
 8002e6c:	2000001c 	.word	0x2000001c
 8002e70:	20000218 	.word	0x20000218
 8002e74:	20000320 	.word	0x20000320

08002e78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e78:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e7c:	480d      	ldr	r0, [pc, #52]	; (8002eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e7e:	490e      	ldr	r1, [pc, #56]	; (8002eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e80:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <LoopForever+0xe>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e84:	e002      	b.n	8002e8c <LoopCopyDataInit>

08002e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8a:	3304      	adds	r3, #4

08002e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e90:	d3f9      	bcc.n	8002e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e92:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e94:	4c0b      	ldr	r4, [pc, #44]	; (8002ec4 <LoopForever+0x16>)
  movs r3, #0
 8002e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e98:	e001      	b.n	8002e9e <LoopFillZerobss>

08002e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e9c:	3204      	adds	r2, #4

08002e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea0:	d3fb      	bcc.n	8002e9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ea2:	f7ff fd9f 	bl	80029e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ea6:	f000 f811 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eaa:	f7ff fb35 	bl	8002518 <main>

08002eae <LoopForever>:

LoopForever:
    b LoopForever
 8002eae:	e7fe      	b.n	8002eae <LoopForever>
  ldr   r0, =_estack
 8002eb0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002ebc:	08003ba0 	.word	0x08003ba0
  ldr r2, =_sbss
 8002ec0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002ec4:	200004a4 	.word	0x200004a4

08002ec8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC1_IRQHandler>
	...

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	2600      	movs	r6, #0
 8002ed0:	4d0c      	ldr	r5, [pc, #48]	; (8002f04 <__libc_init_array+0x38>)
 8002ed2:	4c0d      	ldr	r4, [pc, #52]	; (8002f08 <__libc_init_array+0x3c>)
 8002ed4:	1b64      	subs	r4, r4, r5
 8002ed6:	10a4      	asrs	r4, r4, #2
 8002ed8:	42a6      	cmp	r6, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	2600      	movs	r6, #0
 8002ede:	f000 fd19 	bl	8003914 <_init>
 8002ee2:	4d0a      	ldr	r5, [pc, #40]	; (8002f0c <__libc_init_array+0x40>)
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	; (8002f10 <__libc_init_array+0x44>)
 8002ee6:	1b64      	subs	r4, r4, r5
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	42a6      	cmp	r6, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	00b3      	lsls	r3, r6, #2
 8002ef2:	58eb      	ldr	r3, [r5, r3]
 8002ef4:	4798      	blx	r3
 8002ef6:	3601      	adds	r6, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	00b3      	lsls	r3, r6, #2
 8002efc:	58eb      	ldr	r3, [r5, r3]
 8002efe:	4798      	blx	r3
 8002f00:	3601      	adds	r6, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	08003b98 	.word	0x08003b98
 8002f08:	08003b98 	.word	0x08003b98
 8002f0c:	08003b98 	.word	0x08003b98
 8002f10:	08003b9c 	.word	0x08003b9c

08002f14 <malloc>:
 8002f14:	b510      	push	{r4, lr}
 8002f16:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <malloc+0x10>)
 8002f18:	0001      	movs	r1, r0
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	f000 f860 	bl	8002fe0 <_malloc_r>
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	20000024 	.word	0x20000024

08002f28 <memcpy>:
 8002f28:	2300      	movs	r3, #0
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d100      	bne.n	8002f32 <memcpy+0xa>
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	5ccc      	ldrb	r4, [r1, r3]
 8002f34:	54c4      	strb	r4, [r0, r3]
 8002f36:	3301      	adds	r3, #1
 8002f38:	e7f8      	b.n	8002f2c <memcpy+0x4>

08002f3a <memset>:
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	1882      	adds	r2, r0, r2
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d100      	bne.n	8002f44 <memset+0xa>
 8002f42:	4770      	bx	lr
 8002f44:	7019      	strb	r1, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	e7f9      	b.n	8002f3e <memset+0x4>
	...

08002f4c <_free_r>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	0005      	movs	r5, r0
 8002f50:	2900      	cmp	r1, #0
 8002f52:	d010      	beq.n	8002f76 <_free_r+0x2a>
 8002f54:	1f0c      	subs	r4, r1, #4
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da00      	bge.n	8002f5e <_free_r+0x12>
 8002f5c:	18e4      	adds	r4, r4, r3
 8002f5e:	0028      	movs	r0, r5
 8002f60:	f000 f97f 	bl	8003262 <__malloc_lock>
 8002f64:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <_free_r+0x90>)
 8002f66:	6813      	ldr	r3, [r2, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <_free_r+0x2c>
 8002f6c:	6063      	str	r3, [r4, #4]
 8002f6e:	6014      	str	r4, [r2, #0]
 8002f70:	0028      	movs	r0, r5
 8002f72:	f000 f977 	bl	8003264 <__malloc_unlock>
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	42a3      	cmp	r3, r4
 8002f7a:	d909      	bls.n	8002f90 <_free_r+0x44>
 8002f7c:	6821      	ldr	r1, [r4, #0]
 8002f7e:	1860      	adds	r0, r4, r1
 8002f80:	4283      	cmp	r3, r0
 8002f82:	d1f3      	bne.n	8002f6c <_free_r+0x20>
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	1841      	adds	r1, r0, r1
 8002f8a:	6021      	str	r1, [r4, #0]
 8002f8c:	e7ee      	b.n	8002f6c <_free_r+0x20>
 8002f8e:	0013      	movs	r3, r2
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	d001      	beq.n	8002f9a <_free_r+0x4e>
 8002f96:	42a2      	cmp	r2, r4
 8002f98:	d9f9      	bls.n	8002f8e <_free_r+0x42>
 8002f9a:	6819      	ldr	r1, [r3, #0]
 8002f9c:	1858      	adds	r0, r3, r1
 8002f9e:	42a0      	cmp	r0, r4
 8002fa0:	d10b      	bne.n	8002fba <_free_r+0x6e>
 8002fa2:	6820      	ldr	r0, [r4, #0]
 8002fa4:	1809      	adds	r1, r1, r0
 8002fa6:	1858      	adds	r0, r3, r1
 8002fa8:	6019      	str	r1, [r3, #0]
 8002faa:	4282      	cmp	r2, r0
 8002fac:	d1e0      	bne.n	8002f70 <_free_r+0x24>
 8002fae:	6810      	ldr	r0, [r2, #0]
 8002fb0:	6852      	ldr	r2, [r2, #4]
 8002fb2:	1841      	adds	r1, r0, r1
 8002fb4:	6019      	str	r1, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	e7da      	b.n	8002f70 <_free_r+0x24>
 8002fba:	42a0      	cmp	r0, r4
 8002fbc:	d902      	bls.n	8002fc4 <_free_r+0x78>
 8002fbe:	230c      	movs	r3, #12
 8002fc0:	602b      	str	r3, [r5, #0]
 8002fc2:	e7d5      	b.n	8002f70 <_free_r+0x24>
 8002fc4:	6821      	ldr	r1, [r4, #0]
 8002fc6:	1860      	adds	r0, r4, r1
 8002fc8:	4282      	cmp	r2, r0
 8002fca:	d103      	bne.n	8002fd4 <_free_r+0x88>
 8002fcc:	6810      	ldr	r0, [r2, #0]
 8002fce:	6852      	ldr	r2, [r2, #4]
 8002fd0:	1841      	adds	r1, r0, r1
 8002fd2:	6021      	str	r1, [r4, #0]
 8002fd4:	6062      	str	r2, [r4, #4]
 8002fd6:	605c      	str	r4, [r3, #4]
 8002fd8:	e7ca      	b.n	8002f70 <_free_r+0x24>
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	2000028c 	.word	0x2000028c

08002fe0 <_malloc_r>:
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	b570      	push	{r4, r5, r6, lr}
 8002fe4:	1ccd      	adds	r5, r1, #3
 8002fe6:	439d      	bics	r5, r3
 8002fe8:	3508      	adds	r5, #8
 8002fea:	0006      	movs	r6, r0
 8002fec:	2d0c      	cmp	r5, #12
 8002fee:	d21e      	bcs.n	800302e <_malloc_r+0x4e>
 8002ff0:	250c      	movs	r5, #12
 8002ff2:	42a9      	cmp	r1, r5
 8002ff4:	d81d      	bhi.n	8003032 <_malloc_r+0x52>
 8002ff6:	0030      	movs	r0, r6
 8002ff8:	f000 f933 	bl	8003262 <__malloc_lock>
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <_malloc_r+0xb4>)
 8002ffe:	6814      	ldr	r4, [r2, #0]
 8003000:	0021      	movs	r1, r4
 8003002:	2900      	cmp	r1, #0
 8003004:	d119      	bne.n	800303a <_malloc_r+0x5a>
 8003006:	4c24      	ldr	r4, [pc, #144]	; (8003098 <_malloc_r+0xb8>)
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <_malloc_r+0x36>
 800300e:	0030      	movs	r0, r6
 8003010:	f000 f844 	bl	800309c <_sbrk_r>
 8003014:	6020      	str	r0, [r4, #0]
 8003016:	0029      	movs	r1, r5
 8003018:	0030      	movs	r0, r6
 800301a:	f000 f83f 	bl	800309c <_sbrk_r>
 800301e:	1c43      	adds	r3, r0, #1
 8003020:	d12c      	bne.n	800307c <_malloc_r+0x9c>
 8003022:	230c      	movs	r3, #12
 8003024:	0030      	movs	r0, r6
 8003026:	6033      	str	r3, [r6, #0]
 8003028:	f000 f91c 	bl	8003264 <__malloc_unlock>
 800302c:	e003      	b.n	8003036 <_malloc_r+0x56>
 800302e:	2d00      	cmp	r5, #0
 8003030:	dadf      	bge.n	8002ff2 <_malloc_r+0x12>
 8003032:	230c      	movs	r3, #12
 8003034:	6033      	str	r3, [r6, #0]
 8003036:	2000      	movs	r0, #0
 8003038:	bd70      	pop	{r4, r5, r6, pc}
 800303a:	680b      	ldr	r3, [r1, #0]
 800303c:	1b5b      	subs	r3, r3, r5
 800303e:	d41a      	bmi.n	8003076 <_malloc_r+0x96>
 8003040:	2b0b      	cmp	r3, #11
 8003042:	d903      	bls.n	800304c <_malloc_r+0x6c>
 8003044:	600b      	str	r3, [r1, #0]
 8003046:	18cc      	adds	r4, r1, r3
 8003048:	6025      	str	r5, [r4, #0]
 800304a:	e003      	b.n	8003054 <_malloc_r+0x74>
 800304c:	428c      	cmp	r4, r1
 800304e:	d10e      	bne.n	800306e <_malloc_r+0x8e>
 8003050:	6863      	ldr	r3, [r4, #4]
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	0030      	movs	r0, r6
 8003056:	f000 f905 	bl	8003264 <__malloc_unlock>
 800305a:	0020      	movs	r0, r4
 800305c:	2207      	movs	r2, #7
 800305e:	300b      	adds	r0, #11
 8003060:	1d23      	adds	r3, r4, #4
 8003062:	4390      	bics	r0, r2
 8003064:	1ac3      	subs	r3, r0, r3
 8003066:	d0e7      	beq.n	8003038 <_malloc_r+0x58>
 8003068:	425a      	negs	r2, r3
 800306a:	50e2      	str	r2, [r4, r3]
 800306c:	e7e4      	b.n	8003038 <_malloc_r+0x58>
 800306e:	684b      	ldr	r3, [r1, #4]
 8003070:	6063      	str	r3, [r4, #4]
 8003072:	000c      	movs	r4, r1
 8003074:	e7ee      	b.n	8003054 <_malloc_r+0x74>
 8003076:	000c      	movs	r4, r1
 8003078:	6849      	ldr	r1, [r1, #4]
 800307a:	e7c2      	b.n	8003002 <_malloc_r+0x22>
 800307c:	2303      	movs	r3, #3
 800307e:	1cc4      	adds	r4, r0, #3
 8003080:	439c      	bics	r4, r3
 8003082:	42a0      	cmp	r0, r4
 8003084:	d0e0      	beq.n	8003048 <_malloc_r+0x68>
 8003086:	1a21      	subs	r1, r4, r0
 8003088:	0030      	movs	r0, r6
 800308a:	f000 f807 	bl	800309c <_sbrk_r>
 800308e:	1c43      	adds	r3, r0, #1
 8003090:	d1da      	bne.n	8003048 <_malloc_r+0x68>
 8003092:	e7c6      	b.n	8003022 <_malloc_r+0x42>
 8003094:	2000028c 	.word	0x2000028c
 8003098:	20000290 	.word	0x20000290

0800309c <_sbrk_r>:
 800309c:	2300      	movs	r3, #0
 800309e:	b570      	push	{r4, r5, r6, lr}
 80030a0:	4c06      	ldr	r4, [pc, #24]	; (80030bc <_sbrk_r+0x20>)
 80030a2:	0005      	movs	r5, r0
 80030a4:	0008      	movs	r0, r1
 80030a6:	6023      	str	r3, [r4, #0]
 80030a8:	f000 fc24 	bl	80038f4 <_sbrk>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	d103      	bne.n	80030b8 <_sbrk_r+0x1c>
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d000      	beq.n	80030b8 <_sbrk_r+0x1c>
 80030b6:	602b      	str	r3, [r5, #0]
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	200004a0 	.word	0x200004a0

080030c0 <siprintf>:
 80030c0:	b40e      	push	{r1, r2, r3}
 80030c2:	b510      	push	{r4, lr}
 80030c4:	b09d      	sub	sp, #116	; 0x74
 80030c6:	a902      	add	r1, sp, #8
 80030c8:	9002      	str	r0, [sp, #8]
 80030ca:	6108      	str	r0, [r1, #16]
 80030cc:	480b      	ldr	r0, [pc, #44]	; (80030fc <siprintf+0x3c>)
 80030ce:	2482      	movs	r4, #130	; 0x82
 80030d0:	6088      	str	r0, [r1, #8]
 80030d2:	6148      	str	r0, [r1, #20]
 80030d4:	2001      	movs	r0, #1
 80030d6:	4240      	negs	r0, r0
 80030d8:	ab1f      	add	r3, sp, #124	; 0x7c
 80030da:	81c8      	strh	r0, [r1, #14]
 80030dc:	4808      	ldr	r0, [pc, #32]	; (8003100 <siprintf+0x40>)
 80030de:	cb04      	ldmia	r3!, {r2}
 80030e0:	00a4      	lsls	r4, r4, #2
 80030e2:	6800      	ldr	r0, [r0, #0]
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	818c      	strh	r4, [r1, #12]
 80030e8:	f000 f920 	bl	800332c <_svfiprintf_r>
 80030ec:	2300      	movs	r3, #0
 80030ee:	9a02      	ldr	r2, [sp, #8]
 80030f0:	7013      	strb	r3, [r2, #0]
 80030f2:	b01d      	add	sp, #116	; 0x74
 80030f4:	bc10      	pop	{r4}
 80030f6:	bc08      	pop	{r3}
 80030f8:	b003      	add	sp, #12
 80030fa:	4718      	bx	r3
 80030fc:	7fffffff 	.word	0x7fffffff
 8003100:	20000024 	.word	0x20000024

08003104 <_strtol_l.isra.0>:
 8003104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003106:	001f      	movs	r7, r3
 8003108:	000e      	movs	r6, r1
 800310a:	b087      	sub	sp, #28
 800310c:	9005      	str	r0, [sp, #20]
 800310e:	9103      	str	r1, [sp, #12]
 8003110:	9202      	str	r2, [sp, #8]
 8003112:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003114:	7834      	ldrb	r4, [r6, #0]
 8003116:	f000 f88f 	bl	8003238 <__locale_ctype_ptr_l>
 800311a:	2208      	movs	r2, #8
 800311c:	1900      	adds	r0, r0, r4
 800311e:	7843      	ldrb	r3, [r0, #1]
 8003120:	1c75      	adds	r5, r6, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d10c      	bne.n	8003140 <_strtol_l.isra.0+0x3c>
 8003126:	2c2d      	cmp	r4, #45	; 0x2d
 8003128:	d10c      	bne.n	8003144 <_strtol_l.isra.0+0x40>
 800312a:	3301      	adds	r3, #1
 800312c:	782c      	ldrb	r4, [r5, #0]
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	1cb5      	adds	r5, r6, #2
 8003132:	2f00      	cmp	r7, #0
 8003134:	d00c      	beq.n	8003150 <_strtol_l.isra.0+0x4c>
 8003136:	2f10      	cmp	r7, #16
 8003138:	d114      	bne.n	8003164 <_strtol_l.isra.0+0x60>
 800313a:	2c30      	cmp	r4, #48	; 0x30
 800313c:	d00a      	beq.n	8003154 <_strtol_l.isra.0+0x50>
 800313e:	e011      	b.n	8003164 <_strtol_l.isra.0+0x60>
 8003140:	002e      	movs	r6, r5
 8003142:	e7e6      	b.n	8003112 <_strtol_l.isra.0+0xe>
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2c2b      	cmp	r4, #43	; 0x2b
 8003148:	d1f3      	bne.n	8003132 <_strtol_l.isra.0+0x2e>
 800314a:	782c      	ldrb	r4, [r5, #0]
 800314c:	1cb5      	adds	r5, r6, #2
 800314e:	e7f0      	b.n	8003132 <_strtol_l.isra.0+0x2e>
 8003150:	2c30      	cmp	r4, #48	; 0x30
 8003152:	d12f      	bne.n	80031b4 <_strtol_l.isra.0+0xb0>
 8003154:	2220      	movs	r2, #32
 8003156:	782b      	ldrb	r3, [r5, #0]
 8003158:	4393      	bics	r3, r2
 800315a:	2b58      	cmp	r3, #88	; 0x58
 800315c:	d151      	bne.n	8003202 <_strtol_l.isra.0+0xfe>
 800315e:	2710      	movs	r7, #16
 8003160:	786c      	ldrb	r4, [r5, #1]
 8003162:	3502      	adds	r5, #2
 8003164:	9b01      	ldr	r3, [sp, #4]
 8003166:	4a29      	ldr	r2, [pc, #164]	; (800320c <_strtol_l.isra.0+0x108>)
 8003168:	0039      	movs	r1, r7
 800316a:	189e      	adds	r6, r3, r2
 800316c:	0030      	movs	r0, r6
 800316e:	f7fd f863 	bl	8000238 <__aeabi_uidivmod>
 8003172:	0030      	movs	r0, r6
 8003174:	9104      	str	r1, [sp, #16]
 8003176:	0039      	movs	r1, r7
 8003178:	f7fc ffd8 	bl	800012c <__udivsi3>
 800317c:	2101      	movs	r1, #1
 800317e:	2300      	movs	r3, #0
 8003180:	4249      	negs	r1, r1
 8003182:	0002      	movs	r2, r0
 8003184:	468c      	mov	ip, r1
 8003186:	0018      	movs	r0, r3
 8003188:	0021      	movs	r1, r4
 800318a:	3930      	subs	r1, #48	; 0x30
 800318c:	2909      	cmp	r1, #9
 800318e:	d813      	bhi.n	80031b8 <_strtol_l.isra.0+0xb4>
 8003190:	000c      	movs	r4, r1
 8003192:	42a7      	cmp	r7, r4
 8003194:	dd1c      	ble.n	80031d0 <_strtol_l.isra.0+0xcc>
 8003196:	1c59      	adds	r1, r3, #1
 8003198:	d009      	beq.n	80031ae <_strtol_l.isra.0+0xaa>
 800319a:	4663      	mov	r3, ip
 800319c:	4282      	cmp	r2, r0
 800319e:	d306      	bcc.n	80031ae <_strtol_l.isra.0+0xaa>
 80031a0:	d102      	bne.n	80031a8 <_strtol_l.isra.0+0xa4>
 80031a2:	9904      	ldr	r1, [sp, #16]
 80031a4:	42a1      	cmp	r1, r4
 80031a6:	db02      	blt.n	80031ae <_strtol_l.isra.0+0xaa>
 80031a8:	2301      	movs	r3, #1
 80031aa:	4378      	muls	r0, r7
 80031ac:	1820      	adds	r0, r4, r0
 80031ae:	782c      	ldrb	r4, [r5, #0]
 80031b0:	3501      	adds	r5, #1
 80031b2:	e7e9      	b.n	8003188 <_strtol_l.isra.0+0x84>
 80031b4:	270a      	movs	r7, #10
 80031b6:	e7d5      	b.n	8003164 <_strtol_l.isra.0+0x60>
 80031b8:	0021      	movs	r1, r4
 80031ba:	3941      	subs	r1, #65	; 0x41
 80031bc:	2919      	cmp	r1, #25
 80031be:	d801      	bhi.n	80031c4 <_strtol_l.isra.0+0xc0>
 80031c0:	3c37      	subs	r4, #55	; 0x37
 80031c2:	e7e6      	b.n	8003192 <_strtol_l.isra.0+0x8e>
 80031c4:	0021      	movs	r1, r4
 80031c6:	3961      	subs	r1, #97	; 0x61
 80031c8:	2919      	cmp	r1, #25
 80031ca:	d801      	bhi.n	80031d0 <_strtol_l.isra.0+0xcc>
 80031cc:	3c57      	subs	r4, #87	; 0x57
 80031ce:	e7e0      	b.n	8003192 <_strtol_l.isra.0+0x8e>
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	d108      	bne.n	80031e6 <_strtol_l.isra.0+0xe2>
 80031d4:	9a05      	ldr	r2, [sp, #20]
 80031d6:	3323      	adds	r3, #35	; 0x23
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	9b02      	ldr	r3, [sp, #8]
 80031dc:	0030      	movs	r0, r6
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <_strtol_l.isra.0+0xf6>
 80031e2:	b007      	add	sp, #28
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e6:	9a01      	ldr	r2, [sp, #4]
 80031e8:	2a00      	cmp	r2, #0
 80031ea:	d000      	beq.n	80031ee <_strtol_l.isra.0+0xea>
 80031ec:	4240      	negs	r0, r0
 80031ee:	9a02      	ldr	r2, [sp, #8]
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	d0f6      	beq.n	80031e2 <_strtol_l.isra.0+0xde>
 80031f4:	9a03      	ldr	r2, [sp, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d000      	beq.n	80031fc <_strtol_l.isra.0+0xf8>
 80031fa:	1e6a      	subs	r2, r5, #1
 80031fc:	9b02      	ldr	r3, [sp, #8]
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e7ef      	b.n	80031e2 <_strtol_l.isra.0+0xde>
 8003202:	2430      	movs	r4, #48	; 0x30
 8003204:	2f00      	cmp	r7, #0
 8003206:	d1ad      	bne.n	8003164 <_strtol_l.isra.0+0x60>
 8003208:	3708      	adds	r7, #8
 800320a:	e7ab      	b.n	8003164 <_strtol_l.isra.0+0x60>
 800320c:	7fffffff 	.word	0x7fffffff

08003210 <strtol>:
 8003210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003212:	0013      	movs	r3, r2
 8003214:	4a06      	ldr	r2, [pc, #24]	; (8003230 <strtol+0x20>)
 8003216:	0005      	movs	r5, r0
 8003218:	6810      	ldr	r0, [r2, #0]
 800321a:	6a04      	ldr	r4, [r0, #32]
 800321c:	2c00      	cmp	r4, #0
 800321e:	d100      	bne.n	8003222 <strtol+0x12>
 8003220:	4c04      	ldr	r4, [pc, #16]	; (8003234 <strtol+0x24>)
 8003222:	000a      	movs	r2, r1
 8003224:	9400      	str	r4, [sp, #0]
 8003226:	0029      	movs	r1, r5
 8003228:	f7ff ff6c 	bl	8003104 <_strtol_l.isra.0>
 800322c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	20000024 	.word	0x20000024
 8003234:	20000088 	.word	0x20000088

08003238 <__locale_ctype_ptr_l>:
 8003238:	30ec      	adds	r0, #236	; 0xec
 800323a:	6800      	ldr	r0, [r0, #0]
 800323c:	4770      	bx	lr

0800323e <__ascii_mbtowc>:
 800323e:	b082      	sub	sp, #8
 8003240:	2900      	cmp	r1, #0
 8003242:	d100      	bne.n	8003246 <__ascii_mbtowc+0x8>
 8003244:	a901      	add	r1, sp, #4
 8003246:	1e10      	subs	r0, r2, #0
 8003248:	d006      	beq.n	8003258 <__ascii_mbtowc+0x1a>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <__ascii_mbtowc+0x1e>
 800324e:	7813      	ldrb	r3, [r2, #0]
 8003250:	600b      	str	r3, [r1, #0]
 8003252:	7810      	ldrb	r0, [r2, #0]
 8003254:	1e43      	subs	r3, r0, #1
 8003256:	4198      	sbcs	r0, r3
 8003258:	b002      	add	sp, #8
 800325a:	4770      	bx	lr
 800325c:	2002      	movs	r0, #2
 800325e:	4240      	negs	r0, r0
 8003260:	e7fa      	b.n	8003258 <__ascii_mbtowc+0x1a>

08003262 <__malloc_lock>:
 8003262:	4770      	bx	lr

08003264 <__malloc_unlock>:
 8003264:	4770      	bx	lr
	...

08003268 <__ssputs_r>:
 8003268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326a:	688e      	ldr	r6, [r1, #8]
 800326c:	b085      	sub	sp, #20
 800326e:	0007      	movs	r7, r0
 8003270:	000c      	movs	r4, r1
 8003272:	9203      	str	r2, [sp, #12]
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	429e      	cmp	r6, r3
 8003278:	d839      	bhi.n	80032ee <__ssputs_r+0x86>
 800327a:	2390      	movs	r3, #144	; 0x90
 800327c:	898a      	ldrh	r2, [r1, #12]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	421a      	tst	r2, r3
 8003282:	d034      	beq.n	80032ee <__ssputs_r+0x86>
 8003284:	2503      	movs	r5, #3
 8003286:	6909      	ldr	r1, [r1, #16]
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	1a5b      	subs	r3, r3, r1
 800328c:	9302      	str	r3, [sp, #8]
 800328e:	6963      	ldr	r3, [r4, #20]
 8003290:	9802      	ldr	r0, [sp, #8]
 8003292:	435d      	muls	r5, r3
 8003294:	0feb      	lsrs	r3, r5, #31
 8003296:	195d      	adds	r5, r3, r5
 8003298:	9b01      	ldr	r3, [sp, #4]
 800329a:	106d      	asrs	r5, r5, #1
 800329c:	3301      	adds	r3, #1
 800329e:	181b      	adds	r3, r3, r0
 80032a0:	42ab      	cmp	r3, r5
 80032a2:	d900      	bls.n	80032a6 <__ssputs_r+0x3e>
 80032a4:	001d      	movs	r5, r3
 80032a6:	0553      	lsls	r3, r2, #21
 80032a8:	d532      	bpl.n	8003310 <__ssputs_r+0xa8>
 80032aa:	0029      	movs	r1, r5
 80032ac:	0038      	movs	r0, r7
 80032ae:	f7ff fe97 	bl	8002fe0 <_malloc_r>
 80032b2:	1e06      	subs	r6, r0, #0
 80032b4:	d109      	bne.n	80032ca <__ssputs_r+0x62>
 80032b6:	230c      	movs	r3, #12
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	2340      	movs	r3, #64	; 0x40
 80032bc:	2001      	movs	r0, #1
 80032be:	89a2      	ldrh	r2, [r4, #12]
 80032c0:	4240      	negs	r0, r0
 80032c2:	4313      	orrs	r3, r2
 80032c4:	81a3      	strh	r3, [r4, #12]
 80032c6:	b005      	add	sp, #20
 80032c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ca:	9a02      	ldr	r2, [sp, #8]
 80032cc:	6921      	ldr	r1, [r4, #16]
 80032ce:	f7ff fe2b 	bl	8002f28 <memcpy>
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <__ssputs_r+0xc0>)
 80032d6:	401a      	ands	r2, r3
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	4313      	orrs	r3, r2
 80032dc:	81a3      	strh	r3, [r4, #12]
 80032de:	9b02      	ldr	r3, [sp, #8]
 80032e0:	6126      	str	r6, [r4, #16]
 80032e2:	18f6      	adds	r6, r6, r3
 80032e4:	6026      	str	r6, [r4, #0]
 80032e6:	6165      	str	r5, [r4, #20]
 80032e8:	9e01      	ldr	r6, [sp, #4]
 80032ea:	1aed      	subs	r5, r5, r3
 80032ec:	60a5      	str	r5, [r4, #8]
 80032ee:	9b01      	ldr	r3, [sp, #4]
 80032f0:	42b3      	cmp	r3, r6
 80032f2:	d200      	bcs.n	80032f6 <__ssputs_r+0x8e>
 80032f4:	001e      	movs	r6, r3
 80032f6:	0032      	movs	r2, r6
 80032f8:	9903      	ldr	r1, [sp, #12]
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	f000 fab9 	bl	8003872 <memmove>
 8003300:	68a3      	ldr	r3, [r4, #8]
 8003302:	2000      	movs	r0, #0
 8003304:	1b9b      	subs	r3, r3, r6
 8003306:	60a3      	str	r3, [r4, #8]
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	199e      	adds	r6, r3, r6
 800330c:	6026      	str	r6, [r4, #0]
 800330e:	e7da      	b.n	80032c6 <__ssputs_r+0x5e>
 8003310:	002a      	movs	r2, r5
 8003312:	0038      	movs	r0, r7
 8003314:	f000 fabf 	bl	8003896 <_realloc_r>
 8003318:	1e06      	subs	r6, r0, #0
 800331a:	d1e0      	bne.n	80032de <__ssputs_r+0x76>
 800331c:	6921      	ldr	r1, [r4, #16]
 800331e:	0038      	movs	r0, r7
 8003320:	f7ff fe14 	bl	8002f4c <_free_r>
 8003324:	e7c7      	b.n	80032b6 <__ssputs_r+0x4e>
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	fffffb7f 	.word	0xfffffb7f

0800332c <_svfiprintf_r>:
 800332c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332e:	b09f      	sub	sp, #124	; 0x7c
 8003330:	9002      	str	r0, [sp, #8]
 8003332:	9305      	str	r3, [sp, #20]
 8003334:	898b      	ldrh	r3, [r1, #12]
 8003336:	000f      	movs	r7, r1
 8003338:	0016      	movs	r6, r2
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	d511      	bpl.n	8003362 <_svfiprintf_r+0x36>
 800333e:	690b      	ldr	r3, [r1, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10e      	bne.n	8003362 <_svfiprintf_r+0x36>
 8003344:	2140      	movs	r1, #64	; 0x40
 8003346:	f7ff fe4b 	bl	8002fe0 <_malloc_r>
 800334a:	6038      	str	r0, [r7, #0]
 800334c:	6138      	str	r0, [r7, #16]
 800334e:	2800      	cmp	r0, #0
 8003350:	d105      	bne.n	800335e <_svfiprintf_r+0x32>
 8003352:	230c      	movs	r3, #12
 8003354:	9a02      	ldr	r2, [sp, #8]
 8003356:	3801      	subs	r0, #1
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	b01f      	add	sp, #124	; 0x7c
 800335c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335e:	2340      	movs	r3, #64	; 0x40
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	2300      	movs	r3, #0
 8003364:	ad06      	add	r5, sp, #24
 8003366:	616b      	str	r3, [r5, #20]
 8003368:	3320      	adds	r3, #32
 800336a:	766b      	strb	r3, [r5, #25]
 800336c:	3310      	adds	r3, #16
 800336e:	76ab      	strb	r3, [r5, #26]
 8003370:	0034      	movs	r4, r6
 8003372:	7823      	ldrb	r3, [r4, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d147      	bne.n	8003408 <_svfiprintf_r+0xdc>
 8003378:	1ba3      	subs	r3, r4, r6
 800337a:	9304      	str	r3, [sp, #16]
 800337c:	d00d      	beq.n	800339a <_svfiprintf_r+0x6e>
 800337e:	1ba3      	subs	r3, r4, r6
 8003380:	0032      	movs	r2, r6
 8003382:	0039      	movs	r1, r7
 8003384:	9802      	ldr	r0, [sp, #8]
 8003386:	f7ff ff6f 	bl	8003268 <__ssputs_r>
 800338a:	1c43      	adds	r3, r0, #1
 800338c:	d100      	bne.n	8003390 <_svfiprintf_r+0x64>
 800338e:	e0b5      	b.n	80034fc <_svfiprintf_r+0x1d0>
 8003390:	696a      	ldr	r2, [r5, #20]
 8003392:	9b04      	ldr	r3, [sp, #16]
 8003394:	4694      	mov	ip, r2
 8003396:	4463      	add	r3, ip
 8003398:	616b      	str	r3, [r5, #20]
 800339a:	7823      	ldrb	r3, [r4, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d100      	bne.n	80033a2 <_svfiprintf_r+0x76>
 80033a0:	e0ac      	b.n	80034fc <_svfiprintf_r+0x1d0>
 80033a2:	2201      	movs	r2, #1
 80033a4:	2300      	movs	r3, #0
 80033a6:	4252      	negs	r2, r2
 80033a8:	606a      	str	r2, [r5, #4]
 80033aa:	a902      	add	r1, sp, #8
 80033ac:	3254      	adds	r2, #84	; 0x54
 80033ae:	1852      	adds	r2, r2, r1
 80033b0:	3401      	adds	r4, #1
 80033b2:	602b      	str	r3, [r5, #0]
 80033b4:	60eb      	str	r3, [r5, #12]
 80033b6:	60ab      	str	r3, [r5, #8]
 80033b8:	7013      	strb	r3, [r2, #0]
 80033ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80033bc:	4e58      	ldr	r6, [pc, #352]	; (8003520 <_svfiprintf_r+0x1f4>)
 80033be:	2205      	movs	r2, #5
 80033c0:	7821      	ldrb	r1, [r4, #0]
 80033c2:	0030      	movs	r0, r6
 80033c4:	f000 fa4a 	bl	800385c <memchr>
 80033c8:	1c62      	adds	r2, r4, #1
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d120      	bne.n	8003410 <_svfiprintf_r+0xe4>
 80033ce:	6829      	ldr	r1, [r5, #0]
 80033d0:	06cb      	lsls	r3, r1, #27
 80033d2:	d504      	bpl.n	80033de <_svfiprintf_r+0xb2>
 80033d4:	2353      	movs	r3, #83	; 0x53
 80033d6:	ae02      	add	r6, sp, #8
 80033d8:	3020      	adds	r0, #32
 80033da:	199b      	adds	r3, r3, r6
 80033dc:	7018      	strb	r0, [r3, #0]
 80033de:	070b      	lsls	r3, r1, #28
 80033e0:	d504      	bpl.n	80033ec <_svfiprintf_r+0xc0>
 80033e2:	2353      	movs	r3, #83	; 0x53
 80033e4:	202b      	movs	r0, #43	; 0x2b
 80033e6:	ae02      	add	r6, sp, #8
 80033e8:	199b      	adds	r3, r3, r6
 80033ea:	7018      	strb	r0, [r3, #0]
 80033ec:	7823      	ldrb	r3, [r4, #0]
 80033ee:	2b2a      	cmp	r3, #42	; 0x2a
 80033f0:	d016      	beq.n	8003420 <_svfiprintf_r+0xf4>
 80033f2:	2000      	movs	r0, #0
 80033f4:	210a      	movs	r1, #10
 80033f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f8:	7822      	ldrb	r2, [r4, #0]
 80033fa:	3a30      	subs	r2, #48	; 0x30
 80033fc:	2a09      	cmp	r2, #9
 80033fe:	d955      	bls.n	80034ac <_svfiprintf_r+0x180>
 8003400:	2800      	cmp	r0, #0
 8003402:	d015      	beq.n	8003430 <_svfiprintf_r+0x104>
 8003404:	9309      	str	r3, [sp, #36]	; 0x24
 8003406:	e013      	b.n	8003430 <_svfiprintf_r+0x104>
 8003408:	2b25      	cmp	r3, #37	; 0x25
 800340a:	d0b5      	beq.n	8003378 <_svfiprintf_r+0x4c>
 800340c:	3401      	adds	r4, #1
 800340e:	e7b0      	b.n	8003372 <_svfiprintf_r+0x46>
 8003410:	2301      	movs	r3, #1
 8003412:	1b80      	subs	r0, r0, r6
 8003414:	4083      	lsls	r3, r0
 8003416:	6829      	ldr	r1, [r5, #0]
 8003418:	0014      	movs	r4, r2
 800341a:	430b      	orrs	r3, r1
 800341c:	602b      	str	r3, [r5, #0]
 800341e:	e7cd      	b.n	80033bc <_svfiprintf_r+0x90>
 8003420:	9b05      	ldr	r3, [sp, #20]
 8003422:	1d18      	adds	r0, r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	9005      	str	r0, [sp, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db39      	blt.n	80034a0 <_svfiprintf_r+0x174>
 800342c:	9309      	str	r3, [sp, #36]	; 0x24
 800342e:	0014      	movs	r4, r2
 8003430:	7823      	ldrb	r3, [r4, #0]
 8003432:	2b2e      	cmp	r3, #46	; 0x2e
 8003434:	d10b      	bne.n	800344e <_svfiprintf_r+0x122>
 8003436:	7863      	ldrb	r3, [r4, #1]
 8003438:	1c62      	adds	r2, r4, #1
 800343a:	2b2a      	cmp	r3, #42	; 0x2a
 800343c:	d13e      	bne.n	80034bc <_svfiprintf_r+0x190>
 800343e:	9b05      	ldr	r3, [sp, #20]
 8003440:	3402      	adds	r4, #2
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	9205      	str	r2, [sp, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db34      	blt.n	80034b6 <_svfiprintf_r+0x18a>
 800344c:	9307      	str	r3, [sp, #28]
 800344e:	4e35      	ldr	r6, [pc, #212]	; (8003524 <_svfiprintf_r+0x1f8>)
 8003450:	7821      	ldrb	r1, [r4, #0]
 8003452:	2203      	movs	r2, #3
 8003454:	0030      	movs	r0, r6
 8003456:	f000 fa01 	bl	800385c <memchr>
 800345a:	2800      	cmp	r0, #0
 800345c:	d006      	beq.n	800346c <_svfiprintf_r+0x140>
 800345e:	2340      	movs	r3, #64	; 0x40
 8003460:	1b80      	subs	r0, r0, r6
 8003462:	4083      	lsls	r3, r0
 8003464:	682a      	ldr	r2, [r5, #0]
 8003466:	3401      	adds	r4, #1
 8003468:	4313      	orrs	r3, r2
 800346a:	602b      	str	r3, [r5, #0]
 800346c:	7821      	ldrb	r1, [r4, #0]
 800346e:	2206      	movs	r2, #6
 8003470:	482d      	ldr	r0, [pc, #180]	; (8003528 <_svfiprintf_r+0x1fc>)
 8003472:	1c66      	adds	r6, r4, #1
 8003474:	7629      	strb	r1, [r5, #24]
 8003476:	f000 f9f1 	bl	800385c <memchr>
 800347a:	2800      	cmp	r0, #0
 800347c:	d046      	beq.n	800350c <_svfiprintf_r+0x1e0>
 800347e:	4b2b      	ldr	r3, [pc, #172]	; (800352c <_svfiprintf_r+0x200>)
 8003480:	2b00      	cmp	r3, #0
 8003482:	d12f      	bne.n	80034e4 <_svfiprintf_r+0x1b8>
 8003484:	6829      	ldr	r1, [r5, #0]
 8003486:	9b05      	ldr	r3, [sp, #20]
 8003488:	2207      	movs	r2, #7
 800348a:	05c9      	lsls	r1, r1, #23
 800348c:	d528      	bpl.n	80034e0 <_svfiprintf_r+0x1b4>
 800348e:	189b      	adds	r3, r3, r2
 8003490:	4393      	bics	r3, r2
 8003492:	3308      	adds	r3, #8
 8003494:	9305      	str	r3, [sp, #20]
 8003496:	696b      	ldr	r3, [r5, #20]
 8003498:	9a03      	ldr	r2, [sp, #12]
 800349a:	189b      	adds	r3, r3, r2
 800349c:	616b      	str	r3, [r5, #20]
 800349e:	e767      	b.n	8003370 <_svfiprintf_r+0x44>
 80034a0:	425b      	negs	r3, r3
 80034a2:	60eb      	str	r3, [r5, #12]
 80034a4:	2302      	movs	r3, #2
 80034a6:	430b      	orrs	r3, r1
 80034a8:	602b      	str	r3, [r5, #0]
 80034aa:	e7c0      	b.n	800342e <_svfiprintf_r+0x102>
 80034ac:	434b      	muls	r3, r1
 80034ae:	3401      	adds	r4, #1
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	2001      	movs	r0, #1
 80034b4:	e7a0      	b.n	80033f8 <_svfiprintf_r+0xcc>
 80034b6:	2301      	movs	r3, #1
 80034b8:	425b      	negs	r3, r3
 80034ba:	e7c7      	b.n	800344c <_svfiprintf_r+0x120>
 80034bc:	2300      	movs	r3, #0
 80034be:	0014      	movs	r4, r2
 80034c0:	200a      	movs	r0, #10
 80034c2:	001a      	movs	r2, r3
 80034c4:	606b      	str	r3, [r5, #4]
 80034c6:	7821      	ldrb	r1, [r4, #0]
 80034c8:	3930      	subs	r1, #48	; 0x30
 80034ca:	2909      	cmp	r1, #9
 80034cc:	d903      	bls.n	80034d6 <_svfiprintf_r+0x1aa>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0bd      	beq.n	800344e <_svfiprintf_r+0x122>
 80034d2:	9207      	str	r2, [sp, #28]
 80034d4:	e7bb      	b.n	800344e <_svfiprintf_r+0x122>
 80034d6:	4342      	muls	r2, r0
 80034d8:	3401      	adds	r4, #1
 80034da:	1852      	adds	r2, r2, r1
 80034dc:	2301      	movs	r3, #1
 80034de:	e7f2      	b.n	80034c6 <_svfiprintf_r+0x19a>
 80034e0:	3307      	adds	r3, #7
 80034e2:	e7d5      	b.n	8003490 <_svfiprintf_r+0x164>
 80034e4:	ab05      	add	r3, sp, #20
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	003a      	movs	r2, r7
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <_svfiprintf_r+0x204>)
 80034ec:	0029      	movs	r1, r5
 80034ee:	9802      	ldr	r0, [sp, #8]
 80034f0:	e000      	b.n	80034f4 <_svfiprintf_r+0x1c8>
 80034f2:	bf00      	nop
 80034f4:	9003      	str	r0, [sp, #12]
 80034f6:	9b03      	ldr	r3, [sp, #12]
 80034f8:	3301      	adds	r3, #1
 80034fa:	d1cc      	bne.n	8003496 <_svfiprintf_r+0x16a>
 80034fc:	89bb      	ldrh	r3, [r7, #12]
 80034fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003500:	065b      	lsls	r3, r3, #25
 8003502:	d400      	bmi.n	8003506 <_svfiprintf_r+0x1da>
 8003504:	e729      	b.n	800335a <_svfiprintf_r+0x2e>
 8003506:	2001      	movs	r0, #1
 8003508:	4240      	negs	r0, r0
 800350a:	e726      	b.n	800335a <_svfiprintf_r+0x2e>
 800350c:	ab05      	add	r3, sp, #20
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	003a      	movs	r2, r7
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <_svfiprintf_r+0x204>)
 8003514:	0029      	movs	r1, r5
 8003516:	9802      	ldr	r0, [sp, #8]
 8003518:	f000 f87a 	bl	8003610 <_printf_i>
 800351c:	e7ea      	b.n	80034f4 <_svfiprintf_r+0x1c8>
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	08003a62 	.word	0x08003a62
 8003524:	08003a68 	.word	0x08003a68
 8003528:	08003a6c 	.word	0x08003a6c
 800352c:	00000000 	.word	0x00000000
 8003530:	08003269 	.word	0x08003269

08003534 <_printf_common>:
 8003534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003536:	0015      	movs	r5, r2
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	688a      	ldr	r2, [r1, #8]
 800353c:	690b      	ldr	r3, [r1, #16]
 800353e:	9000      	str	r0, [sp, #0]
 8003540:	000c      	movs	r4, r1
 8003542:	4293      	cmp	r3, r2
 8003544:	da00      	bge.n	8003548 <_printf_common+0x14>
 8003546:	0013      	movs	r3, r2
 8003548:	0022      	movs	r2, r4
 800354a:	602b      	str	r3, [r5, #0]
 800354c:	3243      	adds	r2, #67	; 0x43
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	2a00      	cmp	r2, #0
 8003552:	d001      	beq.n	8003558 <_printf_common+0x24>
 8003554:	3301      	adds	r3, #1
 8003556:	602b      	str	r3, [r5, #0]
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	069b      	lsls	r3, r3, #26
 800355c:	d502      	bpl.n	8003564 <_printf_common+0x30>
 800355e:	682b      	ldr	r3, [r5, #0]
 8003560:	3302      	adds	r3, #2
 8003562:	602b      	str	r3, [r5, #0]
 8003564:	2706      	movs	r7, #6
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	401f      	ands	r7, r3
 800356a:	d027      	beq.n	80035bc <_printf_common+0x88>
 800356c:	0023      	movs	r3, r4
 800356e:	3343      	adds	r3, #67	; 0x43
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	1e5a      	subs	r2, r3, #1
 8003574:	4193      	sbcs	r3, r2
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	0692      	lsls	r2, r2, #26
 800357a:	d430      	bmi.n	80035de <_printf_common+0xaa>
 800357c:	0022      	movs	r2, r4
 800357e:	9901      	ldr	r1, [sp, #4]
 8003580:	3243      	adds	r2, #67	; 0x43
 8003582:	9800      	ldr	r0, [sp, #0]
 8003584:	9e08      	ldr	r6, [sp, #32]
 8003586:	47b0      	blx	r6
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d025      	beq.n	80035d8 <_printf_common+0xa4>
 800358c:	2306      	movs	r3, #6
 800358e:	6820      	ldr	r0, [r4, #0]
 8003590:	682a      	ldr	r2, [r5, #0]
 8003592:	68e1      	ldr	r1, [r4, #12]
 8003594:	4003      	ands	r3, r0
 8003596:	2500      	movs	r5, #0
 8003598:	2b04      	cmp	r3, #4
 800359a:	d103      	bne.n	80035a4 <_printf_common+0x70>
 800359c:	1a8d      	subs	r5, r1, r2
 800359e:	43eb      	mvns	r3, r5
 80035a0:	17db      	asrs	r3, r3, #31
 80035a2:	401d      	ands	r5, r3
 80035a4:	68a3      	ldr	r3, [r4, #8]
 80035a6:	6922      	ldr	r2, [r4, #16]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	dd01      	ble.n	80035b0 <_printf_common+0x7c>
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	18ed      	adds	r5, r5, r3
 80035b0:	2700      	movs	r7, #0
 80035b2:	42bd      	cmp	r5, r7
 80035b4:	d120      	bne.n	80035f8 <_printf_common+0xc4>
 80035b6:	2000      	movs	r0, #0
 80035b8:	e010      	b.n	80035dc <_printf_common+0xa8>
 80035ba:	3701      	adds	r7, #1
 80035bc:	68e3      	ldr	r3, [r4, #12]
 80035be:	682a      	ldr	r2, [r5, #0]
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	429f      	cmp	r7, r3
 80035c4:	dad2      	bge.n	800356c <_printf_common+0x38>
 80035c6:	0022      	movs	r2, r4
 80035c8:	2301      	movs	r3, #1
 80035ca:	3219      	adds	r2, #25
 80035cc:	9901      	ldr	r1, [sp, #4]
 80035ce:	9800      	ldr	r0, [sp, #0]
 80035d0:	9e08      	ldr	r6, [sp, #32]
 80035d2:	47b0      	blx	r6
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d1f0      	bne.n	80035ba <_printf_common+0x86>
 80035d8:	2001      	movs	r0, #1
 80035da:	4240      	negs	r0, r0
 80035dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035de:	2030      	movs	r0, #48	; 0x30
 80035e0:	18e1      	adds	r1, r4, r3
 80035e2:	3143      	adds	r1, #67	; 0x43
 80035e4:	7008      	strb	r0, [r1, #0]
 80035e6:	0021      	movs	r1, r4
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	3145      	adds	r1, #69	; 0x45
 80035ec:	7809      	ldrb	r1, [r1, #0]
 80035ee:	18a2      	adds	r2, r4, r2
 80035f0:	3243      	adds	r2, #67	; 0x43
 80035f2:	3302      	adds	r3, #2
 80035f4:	7011      	strb	r1, [r2, #0]
 80035f6:	e7c1      	b.n	800357c <_printf_common+0x48>
 80035f8:	0022      	movs	r2, r4
 80035fa:	2301      	movs	r3, #1
 80035fc:	321a      	adds	r2, #26
 80035fe:	9901      	ldr	r1, [sp, #4]
 8003600:	9800      	ldr	r0, [sp, #0]
 8003602:	9e08      	ldr	r6, [sp, #32]
 8003604:	47b0      	blx	r6
 8003606:	1c43      	adds	r3, r0, #1
 8003608:	d0e6      	beq.n	80035d8 <_printf_common+0xa4>
 800360a:	3701      	adds	r7, #1
 800360c:	e7d1      	b.n	80035b2 <_printf_common+0x7e>
	...

08003610 <_printf_i>:
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003612:	b08b      	sub	sp, #44	; 0x2c
 8003614:	9206      	str	r2, [sp, #24]
 8003616:	000a      	movs	r2, r1
 8003618:	3243      	adds	r2, #67	; 0x43
 800361a:	9307      	str	r3, [sp, #28]
 800361c:	9005      	str	r0, [sp, #20]
 800361e:	9204      	str	r2, [sp, #16]
 8003620:	7e0a      	ldrb	r2, [r1, #24]
 8003622:	000c      	movs	r4, r1
 8003624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003626:	2a6e      	cmp	r2, #110	; 0x6e
 8003628:	d100      	bne.n	800362c <_printf_i+0x1c>
 800362a:	e08f      	b.n	800374c <_printf_i+0x13c>
 800362c:	d817      	bhi.n	800365e <_printf_i+0x4e>
 800362e:	2a63      	cmp	r2, #99	; 0x63
 8003630:	d02c      	beq.n	800368c <_printf_i+0x7c>
 8003632:	d808      	bhi.n	8003646 <_printf_i+0x36>
 8003634:	2a00      	cmp	r2, #0
 8003636:	d100      	bne.n	800363a <_printf_i+0x2a>
 8003638:	e099      	b.n	800376e <_printf_i+0x15e>
 800363a:	2a58      	cmp	r2, #88	; 0x58
 800363c:	d054      	beq.n	80036e8 <_printf_i+0xd8>
 800363e:	0026      	movs	r6, r4
 8003640:	3642      	adds	r6, #66	; 0x42
 8003642:	7032      	strb	r2, [r6, #0]
 8003644:	e029      	b.n	800369a <_printf_i+0x8a>
 8003646:	2a64      	cmp	r2, #100	; 0x64
 8003648:	d001      	beq.n	800364e <_printf_i+0x3e>
 800364a:	2a69      	cmp	r2, #105	; 0x69
 800364c:	d1f7      	bne.n	800363e <_printf_i+0x2e>
 800364e:	6821      	ldr	r1, [r4, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	0608      	lsls	r0, r1, #24
 8003654:	d523      	bpl.n	800369e <_printf_i+0x8e>
 8003656:	1d11      	adds	r1, r2, #4
 8003658:	6019      	str	r1, [r3, #0]
 800365a:	6815      	ldr	r5, [r2, #0]
 800365c:	e025      	b.n	80036aa <_printf_i+0x9a>
 800365e:	2a73      	cmp	r2, #115	; 0x73
 8003660:	d100      	bne.n	8003664 <_printf_i+0x54>
 8003662:	e088      	b.n	8003776 <_printf_i+0x166>
 8003664:	d808      	bhi.n	8003678 <_printf_i+0x68>
 8003666:	2a6f      	cmp	r2, #111	; 0x6f
 8003668:	d029      	beq.n	80036be <_printf_i+0xae>
 800366a:	2a70      	cmp	r2, #112	; 0x70
 800366c:	d1e7      	bne.n	800363e <_printf_i+0x2e>
 800366e:	2220      	movs	r2, #32
 8003670:	6809      	ldr	r1, [r1, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	6022      	str	r2, [r4, #0]
 8003676:	e003      	b.n	8003680 <_printf_i+0x70>
 8003678:	2a75      	cmp	r2, #117	; 0x75
 800367a:	d020      	beq.n	80036be <_printf_i+0xae>
 800367c:	2a78      	cmp	r2, #120	; 0x78
 800367e:	d1de      	bne.n	800363e <_printf_i+0x2e>
 8003680:	0022      	movs	r2, r4
 8003682:	2178      	movs	r1, #120	; 0x78
 8003684:	3245      	adds	r2, #69	; 0x45
 8003686:	7011      	strb	r1, [r2, #0]
 8003688:	4a6c      	ldr	r2, [pc, #432]	; (800383c <_printf_i+0x22c>)
 800368a:	e030      	b.n	80036ee <_printf_i+0xde>
 800368c:	000e      	movs	r6, r1
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	3642      	adds	r6, #66	; 0x42
 8003692:	1d11      	adds	r1, r2, #4
 8003694:	6019      	str	r1, [r3, #0]
 8003696:	6813      	ldr	r3, [r2, #0]
 8003698:	7033      	strb	r3, [r6, #0]
 800369a:	2301      	movs	r3, #1
 800369c:	e079      	b.n	8003792 <_printf_i+0x182>
 800369e:	0649      	lsls	r1, r1, #25
 80036a0:	d5d9      	bpl.n	8003656 <_printf_i+0x46>
 80036a2:	1d11      	adds	r1, r2, #4
 80036a4:	6019      	str	r1, [r3, #0]
 80036a6:	2300      	movs	r3, #0
 80036a8:	5ed5      	ldrsh	r5, [r2, r3]
 80036aa:	2d00      	cmp	r5, #0
 80036ac:	da03      	bge.n	80036b6 <_printf_i+0xa6>
 80036ae:	232d      	movs	r3, #45	; 0x2d
 80036b0:	9a04      	ldr	r2, [sp, #16]
 80036b2:	426d      	negs	r5, r5
 80036b4:	7013      	strb	r3, [r2, #0]
 80036b6:	4b62      	ldr	r3, [pc, #392]	; (8003840 <_printf_i+0x230>)
 80036b8:	270a      	movs	r7, #10
 80036ba:	9303      	str	r3, [sp, #12]
 80036bc:	e02f      	b.n	800371e <_printf_i+0x10e>
 80036be:	6820      	ldr	r0, [r4, #0]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	0605      	lsls	r5, r0, #24
 80036c4:	d503      	bpl.n	80036ce <_printf_i+0xbe>
 80036c6:	1d08      	adds	r0, r1, #4
 80036c8:	6018      	str	r0, [r3, #0]
 80036ca:	680d      	ldr	r5, [r1, #0]
 80036cc:	e005      	b.n	80036da <_printf_i+0xca>
 80036ce:	0640      	lsls	r0, r0, #25
 80036d0:	d5f9      	bpl.n	80036c6 <_printf_i+0xb6>
 80036d2:	680d      	ldr	r5, [r1, #0]
 80036d4:	1d08      	adds	r0, r1, #4
 80036d6:	6018      	str	r0, [r3, #0]
 80036d8:	b2ad      	uxth	r5, r5
 80036da:	4b59      	ldr	r3, [pc, #356]	; (8003840 <_printf_i+0x230>)
 80036dc:	2708      	movs	r7, #8
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	2a6f      	cmp	r2, #111	; 0x6f
 80036e2:	d018      	beq.n	8003716 <_printf_i+0x106>
 80036e4:	270a      	movs	r7, #10
 80036e6:	e016      	b.n	8003716 <_printf_i+0x106>
 80036e8:	3145      	adds	r1, #69	; 0x45
 80036ea:	700a      	strb	r2, [r1, #0]
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <_printf_i+0x230>)
 80036ee:	9203      	str	r2, [sp, #12]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	6821      	ldr	r1, [r4, #0]
 80036f4:	1d10      	adds	r0, r2, #4
 80036f6:	6018      	str	r0, [r3, #0]
 80036f8:	6815      	ldr	r5, [r2, #0]
 80036fa:	0608      	lsls	r0, r1, #24
 80036fc:	d522      	bpl.n	8003744 <_printf_i+0x134>
 80036fe:	07cb      	lsls	r3, r1, #31
 8003700:	d502      	bpl.n	8003708 <_printf_i+0xf8>
 8003702:	2320      	movs	r3, #32
 8003704:	4319      	orrs	r1, r3
 8003706:	6021      	str	r1, [r4, #0]
 8003708:	2710      	movs	r7, #16
 800370a:	2d00      	cmp	r5, #0
 800370c:	d103      	bne.n	8003716 <_printf_i+0x106>
 800370e:	2320      	movs	r3, #32
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	439a      	bics	r2, r3
 8003714:	6022      	str	r2, [r4, #0]
 8003716:	0023      	movs	r3, r4
 8003718:	2200      	movs	r2, #0
 800371a:	3343      	adds	r3, #67	; 0x43
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	6863      	ldr	r3, [r4, #4]
 8003720:	60a3      	str	r3, [r4, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db5c      	blt.n	80037e0 <_printf_i+0x1d0>
 8003726:	2204      	movs	r2, #4
 8003728:	6821      	ldr	r1, [r4, #0]
 800372a:	4391      	bics	r1, r2
 800372c:	6021      	str	r1, [r4, #0]
 800372e:	2d00      	cmp	r5, #0
 8003730:	d158      	bne.n	80037e4 <_printf_i+0x1d4>
 8003732:	9e04      	ldr	r6, [sp, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d064      	beq.n	8003802 <_printf_i+0x1f2>
 8003738:	0026      	movs	r6, r4
 800373a:	9b03      	ldr	r3, [sp, #12]
 800373c:	3642      	adds	r6, #66	; 0x42
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	7033      	strb	r3, [r6, #0]
 8003742:	e05e      	b.n	8003802 <_printf_i+0x1f2>
 8003744:	0648      	lsls	r0, r1, #25
 8003746:	d5da      	bpl.n	80036fe <_printf_i+0xee>
 8003748:	b2ad      	uxth	r5, r5
 800374a:	e7d8      	b.n	80036fe <_printf_i+0xee>
 800374c:	6809      	ldr	r1, [r1, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	0608      	lsls	r0, r1, #24
 8003752:	d505      	bpl.n	8003760 <_printf_i+0x150>
 8003754:	1d11      	adds	r1, r2, #4
 8003756:	6019      	str	r1, [r3, #0]
 8003758:	6813      	ldr	r3, [r2, #0]
 800375a:	6962      	ldr	r2, [r4, #20]
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e006      	b.n	800376e <_printf_i+0x15e>
 8003760:	0649      	lsls	r1, r1, #25
 8003762:	d5f7      	bpl.n	8003754 <_printf_i+0x144>
 8003764:	1d11      	adds	r1, r2, #4
 8003766:	6019      	str	r1, [r3, #0]
 8003768:	6813      	ldr	r3, [r2, #0]
 800376a:	8aa2      	ldrh	r2, [r4, #20]
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	2300      	movs	r3, #0
 8003770:	9e04      	ldr	r6, [sp, #16]
 8003772:	6123      	str	r3, [r4, #16]
 8003774:	e054      	b.n	8003820 <_printf_i+0x210>
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	1d11      	adds	r1, r2, #4
 800377a:	6019      	str	r1, [r3, #0]
 800377c:	6816      	ldr	r6, [r2, #0]
 800377e:	2100      	movs	r1, #0
 8003780:	6862      	ldr	r2, [r4, #4]
 8003782:	0030      	movs	r0, r6
 8003784:	f000 f86a 	bl	800385c <memchr>
 8003788:	2800      	cmp	r0, #0
 800378a:	d001      	beq.n	8003790 <_printf_i+0x180>
 800378c:	1b80      	subs	r0, r0, r6
 800378e:	6060      	str	r0, [r4, #4]
 8003790:	6863      	ldr	r3, [r4, #4]
 8003792:	6123      	str	r3, [r4, #16]
 8003794:	2300      	movs	r3, #0
 8003796:	9a04      	ldr	r2, [sp, #16]
 8003798:	7013      	strb	r3, [r2, #0]
 800379a:	e041      	b.n	8003820 <_printf_i+0x210>
 800379c:	6923      	ldr	r3, [r4, #16]
 800379e:	0032      	movs	r2, r6
 80037a0:	9906      	ldr	r1, [sp, #24]
 80037a2:	9805      	ldr	r0, [sp, #20]
 80037a4:	9d07      	ldr	r5, [sp, #28]
 80037a6:	47a8      	blx	r5
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d043      	beq.n	8003834 <_printf_i+0x224>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	2500      	movs	r5, #0
 80037b0:	079b      	lsls	r3, r3, #30
 80037b2:	d40f      	bmi.n	80037d4 <_printf_i+0x1c4>
 80037b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b6:	68e0      	ldr	r0, [r4, #12]
 80037b8:	4298      	cmp	r0, r3
 80037ba:	da3d      	bge.n	8003838 <_printf_i+0x228>
 80037bc:	0018      	movs	r0, r3
 80037be:	e03b      	b.n	8003838 <_printf_i+0x228>
 80037c0:	0022      	movs	r2, r4
 80037c2:	2301      	movs	r3, #1
 80037c4:	3219      	adds	r2, #25
 80037c6:	9906      	ldr	r1, [sp, #24]
 80037c8:	9805      	ldr	r0, [sp, #20]
 80037ca:	9e07      	ldr	r6, [sp, #28]
 80037cc:	47b0      	blx	r6
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	d030      	beq.n	8003834 <_printf_i+0x224>
 80037d2:	3501      	adds	r5, #1
 80037d4:	68e3      	ldr	r3, [r4, #12]
 80037d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	429d      	cmp	r5, r3
 80037dc:	dbf0      	blt.n	80037c0 <_printf_i+0x1b0>
 80037de:	e7e9      	b.n	80037b4 <_printf_i+0x1a4>
 80037e0:	2d00      	cmp	r5, #0
 80037e2:	d0a9      	beq.n	8003738 <_printf_i+0x128>
 80037e4:	9e04      	ldr	r6, [sp, #16]
 80037e6:	0028      	movs	r0, r5
 80037e8:	0039      	movs	r1, r7
 80037ea:	f7fc fd25 	bl	8000238 <__aeabi_uidivmod>
 80037ee:	9b03      	ldr	r3, [sp, #12]
 80037f0:	3e01      	subs	r6, #1
 80037f2:	5c5b      	ldrb	r3, [r3, r1]
 80037f4:	0028      	movs	r0, r5
 80037f6:	7033      	strb	r3, [r6, #0]
 80037f8:	0039      	movs	r1, r7
 80037fa:	f7fc fc97 	bl	800012c <__udivsi3>
 80037fe:	1e05      	subs	r5, r0, #0
 8003800:	d1f1      	bne.n	80037e6 <_printf_i+0x1d6>
 8003802:	2f08      	cmp	r7, #8
 8003804:	d109      	bne.n	800381a <_printf_i+0x20a>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	07db      	lsls	r3, r3, #31
 800380a:	d506      	bpl.n	800381a <_printf_i+0x20a>
 800380c:	6863      	ldr	r3, [r4, #4]
 800380e:	6922      	ldr	r2, [r4, #16]
 8003810:	4293      	cmp	r3, r2
 8003812:	dc02      	bgt.n	800381a <_printf_i+0x20a>
 8003814:	2330      	movs	r3, #48	; 0x30
 8003816:	3e01      	subs	r6, #1
 8003818:	7033      	strb	r3, [r6, #0]
 800381a:	9b04      	ldr	r3, [sp, #16]
 800381c:	1b9b      	subs	r3, r3, r6
 800381e:	6123      	str	r3, [r4, #16]
 8003820:	9b07      	ldr	r3, [sp, #28]
 8003822:	aa09      	add	r2, sp, #36	; 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	0021      	movs	r1, r4
 8003828:	9b06      	ldr	r3, [sp, #24]
 800382a:	9805      	ldr	r0, [sp, #20]
 800382c:	f7ff fe82 	bl	8003534 <_printf_common>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d1b3      	bne.n	800379c <_printf_i+0x18c>
 8003834:	2001      	movs	r0, #1
 8003836:	4240      	negs	r0, r0
 8003838:	b00b      	add	sp, #44	; 0x2c
 800383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800383c:	08003a84 	.word	0x08003a84
 8003840:	08003a73 	.word	0x08003a73

08003844 <__ascii_wctomb>:
 8003844:	1e0b      	subs	r3, r1, #0
 8003846:	d004      	beq.n	8003852 <__ascii_wctomb+0xe>
 8003848:	2aff      	cmp	r2, #255	; 0xff
 800384a:	d904      	bls.n	8003856 <__ascii_wctomb+0x12>
 800384c:	238a      	movs	r3, #138	; 0x8a
 800384e:	6003      	str	r3, [r0, #0]
 8003850:	3b8b      	subs	r3, #139	; 0x8b
 8003852:	0018      	movs	r0, r3
 8003854:	4770      	bx	lr
 8003856:	700a      	strb	r2, [r1, #0]
 8003858:	2301      	movs	r3, #1
 800385a:	e7fa      	b.n	8003852 <__ascii_wctomb+0xe>

0800385c <memchr>:
 800385c:	b2c9      	uxtb	r1, r1
 800385e:	1882      	adds	r2, r0, r2
 8003860:	4290      	cmp	r0, r2
 8003862:	d101      	bne.n	8003868 <memchr+0xc>
 8003864:	2000      	movs	r0, #0
 8003866:	4770      	bx	lr
 8003868:	7803      	ldrb	r3, [r0, #0]
 800386a:	428b      	cmp	r3, r1
 800386c:	d0fb      	beq.n	8003866 <memchr+0xa>
 800386e:	3001      	adds	r0, #1
 8003870:	e7f6      	b.n	8003860 <memchr+0x4>

08003872 <memmove>:
 8003872:	b510      	push	{r4, lr}
 8003874:	4288      	cmp	r0, r1
 8003876:	d902      	bls.n	800387e <memmove+0xc>
 8003878:	188b      	adds	r3, r1, r2
 800387a:	4298      	cmp	r0, r3
 800387c:	d308      	bcc.n	8003890 <memmove+0x1e>
 800387e:	2300      	movs	r3, #0
 8003880:	429a      	cmp	r2, r3
 8003882:	d007      	beq.n	8003894 <memmove+0x22>
 8003884:	5ccc      	ldrb	r4, [r1, r3]
 8003886:	54c4      	strb	r4, [r0, r3]
 8003888:	3301      	adds	r3, #1
 800388a:	e7f9      	b.n	8003880 <memmove+0xe>
 800388c:	5c8b      	ldrb	r3, [r1, r2]
 800388e:	5483      	strb	r3, [r0, r2]
 8003890:	3a01      	subs	r2, #1
 8003892:	d2fb      	bcs.n	800388c <memmove+0x1a>
 8003894:	bd10      	pop	{r4, pc}

08003896 <_realloc_r>:
 8003896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003898:	0007      	movs	r7, r0
 800389a:	000d      	movs	r5, r1
 800389c:	0016      	movs	r6, r2
 800389e:	2900      	cmp	r1, #0
 80038a0:	d105      	bne.n	80038ae <_realloc_r+0x18>
 80038a2:	0011      	movs	r1, r2
 80038a4:	f7ff fb9c 	bl	8002fe0 <_malloc_r>
 80038a8:	0004      	movs	r4, r0
 80038aa:	0020      	movs	r0, r4
 80038ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	d103      	bne.n	80038ba <_realloc_r+0x24>
 80038b2:	f7ff fb4b 	bl	8002f4c <_free_r>
 80038b6:	0034      	movs	r4, r6
 80038b8:	e7f7      	b.n	80038aa <_realloc_r+0x14>
 80038ba:	f000 f812 	bl	80038e2 <_malloc_usable_size_r>
 80038be:	002c      	movs	r4, r5
 80038c0:	4286      	cmp	r6, r0
 80038c2:	d9f2      	bls.n	80038aa <_realloc_r+0x14>
 80038c4:	0031      	movs	r1, r6
 80038c6:	0038      	movs	r0, r7
 80038c8:	f7ff fb8a 	bl	8002fe0 <_malloc_r>
 80038cc:	1e04      	subs	r4, r0, #0
 80038ce:	d0ec      	beq.n	80038aa <_realloc_r+0x14>
 80038d0:	0029      	movs	r1, r5
 80038d2:	0032      	movs	r2, r6
 80038d4:	f7ff fb28 	bl	8002f28 <memcpy>
 80038d8:	0029      	movs	r1, r5
 80038da:	0038      	movs	r0, r7
 80038dc:	f7ff fb36 	bl	8002f4c <_free_r>
 80038e0:	e7e3      	b.n	80038aa <_realloc_r+0x14>

080038e2 <_malloc_usable_size_r>:
 80038e2:	1f0b      	subs	r3, r1, #4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	1f18      	subs	r0, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	da01      	bge.n	80038f0 <_malloc_usable_size_r+0xe>
 80038ec:	580b      	ldr	r3, [r1, r0]
 80038ee:	18c0      	adds	r0, r0, r3
 80038f0:	4770      	bx	lr
	...

080038f4 <_sbrk>:
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <_sbrk+0x18>)
 80038f6:	0002      	movs	r2, r0
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	2900      	cmp	r1, #0
 80038fc:	d101      	bne.n	8003902 <_sbrk+0xe>
 80038fe:	4904      	ldr	r1, [pc, #16]	; (8003910 <_sbrk+0x1c>)
 8003900:	6019      	str	r1, [r3, #0]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	1882      	adds	r2, r0, r2
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	4770      	bx	lr
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	20000294 	.word	0x20000294
 8003910:	200004a4 	.word	0x200004a4

08003914 <_init>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr

08003920 <_fini>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003926:	bc08      	pop	{r3}
 8003928:	469e      	mov	lr, r3
 800392a:	4770      	bx	lr
