
C:\Users\Henry\Desktop\Skripsie\Feedback-Control-of-Robotic-Gymnast-MCU\acrobat_v4\Debug\acrobat_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000364c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080037e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a8  20000080  08003864  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000328  08003864  00020328  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d715  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003735  00000000  00000000  0003d7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b19a  00000000  00000000  00040ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a88  00000000  00000000  0004c090  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001800  00000000  00000000  0004cb18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000839d  00000000  00000000  0004e318  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0004b59e  00000000  00000000  000566b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000a1c53  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002240  00000000  00000000  000a1cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000bcd9  00000000  00000000  000a3f10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036f4 	.word	0x080036f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080036f4 	.word	0x080036f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000230:	b510      	push	{r4, lr}
 8000232:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000234:	f001 f82c 	bl	8001290 <HAL_RCC_GetHCLKFreq>
 8000238:	21fa      	movs	r1, #250	; 0xfa
 800023a:	0089      	lsls	r1, r1, #2
 800023c:	f7ff ff6c 	bl	8000118 <__udivsi3>
 8000240:	f000 fad6 	bl	80007f0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000244:	2001      	movs	r0, #1
 8000246:	2200      	movs	r2, #0
 8000248:	0021      	movs	r1, r4
 800024a:	4240      	negs	r0, r0
 800024c:	f000 fa92 	bl	8000774 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000250:	2000      	movs	r0, #0
 8000252:	bd10      	pop	{r4, pc}

08000254 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000254:	2110      	movs	r1, #16
 8000256:	4a06      	ldr	r2, [pc, #24]	; (8000270 <HAL_Init+0x1c>)
{
 8000258:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800025c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	430b      	orrs	r3, r1
 8000260:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000262:	f7ff ffe5 	bl	8000230 <HAL_InitTick>
  HAL_MspInit();
 8000266:	f002 f9f5 	bl	8002654 <HAL_MspInit>
}
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	40022000 	.word	0x40022000

08000274 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000274:	4a02      	ldr	r2, [pc, #8]	; (8000280 <HAL_IncTick+0xc>)
 8000276:	6813      	ldr	r3, [r2, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	6013      	str	r3, [r2, #0]
}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	2000011c 	.word	0x2000011c

08000284 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000284:	4b01      	ldr	r3, [pc, #4]	; (800028c <HAL_GetTick+0x8>)
 8000286:	6818      	ldr	r0, [r3, #0]
}
 8000288:	4770      	bx	lr
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	2000011c 	.word	0x2000011c

08000290 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000290:	2300      	movs	r3, #0
{
 8000292:	b570      	push	{r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000294:	6802      	ldr	r2, [r0, #0]
{
 8000296:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000298:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800029a:	6891      	ldr	r1, [r2, #8]
 800029c:	3303      	adds	r3, #3
{
 800029e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002a0:	400b      	ands	r3, r1
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d031      	beq.n	800030a <ADC_Enable+0x7a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002a6:	6891      	ldr	r1, [r2, #8]
 80002a8:	4b20      	ldr	r3, [pc, #128]	; (800032c <ADC_Enable+0x9c>)
 80002aa:	4219      	tst	r1, r3
 80002ac:	d122      	bne.n	80002f4 <ADC_Enable+0x64>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80002ae:	2101      	movs	r1, #1
 80002b0:	6893      	ldr	r3, [r2, #8]
 80002b2:	430b      	orrs	r3, r1
 80002b4:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80002b6:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <ADC_Enable+0xa0>)
 80002b8:	491e      	ldr	r1, [pc, #120]	; (8000334 <ADC_Enable+0xa4>)
 80002ba:	6818      	ldr	r0, [r3, #0]
 80002bc:	f7ff ff2c 	bl	8000118 <__udivsi3>
 80002c0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80002c2:	9b01      	ldr	r3, [sp, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d005      	beq.n	80002d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80002ce:	9b01      	ldr	r3, [sp, #4]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d1f9      	bne.n	80002c8 <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80002d4:	f7ff ffd6 	bl	8000284 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002d8:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80002da:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002dc:	e004      	b.n	80002e8 <ADC_Enable+0x58>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80002de:	f7ff ffd1 	bl	8000284 <HAL_GetTick>
 80002e2:	1b80      	subs	r0, r0, r6
 80002e4:	2802      	cmp	r0, #2
 80002e6:	d818      	bhi.n	800031a <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002e8:	6823      	ldr	r3, [r4, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	421d      	tst	r5, r3
 80002ee:	d0f6      	beq.n	80002de <ADC_Enable+0x4e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80002f0:	2000      	movs	r0, #0
 80002f2:	e008      	b.n	8000306 <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002f4:	2210      	movs	r2, #16
      return HAL_ERROR;
 80002f6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002fa:	4313      	orrs	r3, r2
 80002fc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000300:	3a0f      	subs	r2, #15
 8000302:	4313      	orrs	r3, r2
 8000304:	64a3      	str	r3, [r4, #72]	; 0x48
}
 8000306:	b002      	add	sp, #8
 8000308:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800030a:	6811      	ldr	r1, [r2, #0]
 800030c:	420b      	tst	r3, r1
 800030e:	d1ef      	bne.n	80002f0 <ADC_Enable+0x60>
 8000310:	68d3      	ldr	r3, [r2, #12]
 8000312:	041b      	lsls	r3, r3, #16
 8000314:	d5c7      	bpl.n	80002a6 <ADC_Enable+0x16>
  return HAL_OK;
 8000316:	2000      	movs	r0, #0
 8000318:	e7f5      	b.n	8000306 <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800031a:	2210      	movs	r2, #16
 800031c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800031e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000320:	4313      	orrs	r3, r2
 8000322:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000324:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000326:	431d      	orrs	r5, r3
 8000328:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800032a:	e7ec      	b.n	8000306 <ADC_Enable+0x76>
 800032c:	80000017 	.word	0x80000017
 8000330:	20000000 	.word	0x20000000
 8000334:	000f4240 	.word	0x000f4240

08000338 <HAL_ADC_Init>:
{
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800033c:	d100      	bne.n	8000340 <HAL_ADC_Init+0x8>
 800033e:	e080      	b.n	8000442 <HAL_ADC_Init+0x10a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000340:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000342:	2b00      	cmp	r3, #0
 8000344:	d067      	beq.n	8000416 <HAL_ADC_Init+0xde>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000346:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000348:	06db      	lsls	r3, r3, #27
 800034a:	d45e      	bmi.n	800040a <HAL_ADC_Init+0xd2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800034c:	2004      	movs	r0, #4
 800034e:	6823      	ldr	r3, [r4, #0]
 8000350:	689a      	ldr	r2, [r3, #8]
 8000352:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000354:	d159      	bne.n	800040a <HAL_ADC_Init+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8000356:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000358:	4948      	ldr	r1, [pc, #288]	; (800047c <HAL_ADC_Init+0x144>)
 800035a:	400a      	ands	r2, r1
 800035c:	3106      	adds	r1, #6
 800035e:	31ff      	adds	r1, #255	; 0xff
 8000360:	430a      	orrs	r2, r1
 8000362:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000364:	2203      	movs	r2, #3
 8000366:	6899      	ldr	r1, [r3, #8]
 8000368:	400a      	ands	r2, r1
 800036a:	2a01      	cmp	r2, #1
 800036c:	d059      	beq.n	8000422 <HAL_ADC_Init+0xea>
      MODIFY_REG(hadc->Instance->CFGR1,
 800036e:	2118      	movs	r1, #24
 8000370:	68da      	ldr	r2, [r3, #12]
 8000372:	438a      	bics	r2, r1
 8000374:	68a1      	ldr	r1, [r4, #8]
 8000376:	430a      	orrs	r2, r1
 8000378:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800037a:	691a      	ldr	r2, [r3, #16]
 800037c:	6861      	ldr	r1, [r4, #4]
 800037e:	0092      	lsls	r2, r2, #2
 8000380:	0892      	lsrs	r2, r2, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000386:	68da      	ldr	r2, [r3, #12]
 8000388:	493d      	ldr	r1, [pc, #244]	; (8000480 <HAL_ADC_Init+0x148>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800038a:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800038c:	400a      	ands	r2, r1
 800038e:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000390:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000392:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000394:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000396:	69e2      	ldr	r2, [r4, #28]
 8000398:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800039a:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800039c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800039e:	3a01      	subs	r2, #1
 80003a0:	1e55      	subs	r5, r2, #1
 80003a2:	41aa      	sbcs	r2, r5
 80003a4:	0315      	lsls	r5, r2, #12
 80003a6:	68e2      	ldr	r2, [r4, #12]
 80003a8:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003aa:	6922      	ldr	r2, [r4, #16]
 80003ac:	4339      	orrs	r1, r7
 80003ae:	2a02      	cmp	r2, #2
 80003b0:	d059      	beq.n	8000466 <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80003b4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003b6:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003ba:	432a      	orrs	r2, r5
 80003bc:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003be:	2901      	cmp	r1, #1
 80003c0:	d04b      	beq.n	800045a <HAL_ADC_Init+0x122>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003c2:	20c2      	movs	r0, #194	; 0xc2
 80003c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80003c6:	30ff      	adds	r0, #255	; 0xff
 80003c8:	4281      	cmp	r1, r0
 80003ca:	d002      	beq.n	80003d2 <HAL_ADC_Init+0x9a>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80003cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80003ce:	4301      	orrs	r1, r0
 80003d0:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80003d2:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003d4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80003d6:	4311      	orrs	r1, r2
 80003d8:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003da:	2180      	movs	r1, #128	; 0x80
 80003dc:	0549      	lsls	r1, r1, #21
 80003de:	428d      	cmp	r5, r1
 80003e0:	d026      	beq.n	8000430 <HAL_ADC_Init+0xf8>
 80003e2:	1e69      	subs	r1, r5, #1
 80003e4:	2906      	cmp	r1, #6
 80003e6:	d923      	bls.n	8000430 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	4926      	ldr	r1, [pc, #152]	; (8000484 <HAL_ADC_Init+0x14c>)
 80003ec:	400b      	ands	r3, r1
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d029      	beq.n	8000446 <HAL_ADC_Init+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 80003f2:	2212      	movs	r2, #18
 80003f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 80003f6:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80003f8:	4393      	bics	r3, r2
 80003fa:	3a02      	subs	r2, #2
 80003fc:	4313      	orrs	r3, r2
 80003fe:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000400:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000402:	3a0f      	subs	r2, #15
 8000404:	4313      	orrs	r3, r2
 8000406:	64a3      	str	r3, [r4, #72]	; 0x48
 8000408:	e004      	b.n	8000414 <HAL_ADC_Init+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800040a:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800040c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800040e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000410:	4313      	orrs	r3, r2
 8000412:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 8000416:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000418:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800041a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800041c:	f002 f93c 	bl	8002698 <HAL_ADC_MspInit>
 8000420:	e791      	b.n	8000346 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	420a      	tst	r2, r1
 8000426:	d1ae      	bne.n	8000386 <HAL_ADC_Init+0x4e>
 8000428:	68da      	ldr	r2, [r3, #12]
 800042a:	0412      	lsls	r2, r2, #16
 800042c:	d59f      	bpl.n	800036e <HAL_ADC_Init+0x36>
 800042e:	e7aa      	b.n	8000386 <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000430:	2107      	movs	r1, #7
 8000432:	6958      	ldr	r0, [r3, #20]
 8000434:	4388      	bics	r0, r1
 8000436:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000438:	6958      	ldr	r0, [r3, #20]
 800043a:	4029      	ands	r1, r5
 800043c:	4301      	orrs	r1, r0
 800043e:	6159      	str	r1, [r3, #20]
 8000440:	e7d2      	b.n	80003e8 <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 8000442:	2001      	movs	r0, #1
 8000444:	e7e6      	b.n	8000414 <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000446:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000448:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800044a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800044c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800044e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000450:	4393      	bics	r3, r2
 8000452:	3a02      	subs	r2, #2
 8000454:	4313      	orrs	r3, r2
 8000456:	6463      	str	r3, [r4, #68]	; 0x44
 8000458:	e7dc      	b.n	8000414 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800045a:	2e00      	cmp	r6, #0
 800045c:	d105      	bne.n	800046a <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	0249      	lsls	r1, r1, #9
 8000462:	430a      	orrs	r2, r1
 8000464:	e7ad      	b.n	80003c2 <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000466:	2004      	movs	r0, #4
 8000468:	e7a3      	b.n	80003b2 <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800046a:	2520      	movs	r5, #32
 800046c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800046e:	4328      	orrs	r0, r5
 8000470:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000472:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000474:	4301      	orrs	r1, r0
 8000476:	64a1      	str	r1, [r4, #72]	; 0x48
 8000478:	e7a3      	b.n	80003c2 <HAL_ADC_Init+0x8a>
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	fffffefd 	.word	0xfffffefd
 8000480:	fffe0219 	.word	0xfffe0219
 8000484:	833fffe7 	.word	0x833fffe7

08000488 <HAL_ADC_Start_DMA>:
{
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	000d      	movs	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800048c:	6801      	ldr	r1, [r0, #0]
{
 800048e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000490:	688b      	ldr	r3, [r1, #8]
{
 8000492:	0016      	movs	r6, r2
    tmp_hal_status = HAL_BUSY;
 8000494:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000496:	075b      	lsls	r3, r3, #29
 8000498:	d500      	bpl.n	800049c <HAL_ADC_Start_DMA+0x14>
}
 800049a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 800049c:	2340      	movs	r3, #64	; 0x40
 800049e:	5ce2      	ldrb	r2, [r4, r3]
 80004a0:	2a01      	cmp	r2, #1
 80004a2:	d0fa      	beq.n	800049a <HAL_ADC_Start_DMA+0x12>
 80004a4:	2201      	movs	r2, #1
 80004a6:	54e2      	strb	r2, [r4, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80004a8:	69e3      	ldr	r3, [r4, #28]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d127      	bne.n	80004fe <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 80004ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004b0:	4a16      	ldr	r2, [pc, #88]	; (800050c <HAL_ADC_Start_DMA+0x84>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80004b4:	401a      	ands	r2, r3
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	4313      	orrs	r3, r2
 80004bc:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80004be:	2240      	movs	r2, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 80004c0:	2300      	movs	r3, #0
 80004c2:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80004c4:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004c8:	3a30      	subs	r2, #48	; 0x30
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004ca:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <HAL_ADC_Start_DMA+0x8c>)
 80004ce:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_ADC_Start_DMA+0x90>)
 80004d2:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004d4:	231c      	movs	r3, #28
 80004d6:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004d8:	684b      	ldr	r3, [r1, #4]
 80004da:	4313      	orrs	r3, r2
 80004dc:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80004de:	68cb      	ldr	r3, [r1, #12]
 80004e0:	3a0f      	subs	r2, #15
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004e6:	002a      	movs	r2, r5
 80004e8:	3140      	adds	r1, #64	; 0x40
 80004ea:	0033      	movs	r3, r6
 80004ec:	f000 f9e8 	bl	80008c0 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80004f0:	2104      	movs	r1, #4
 80004f2:	6822      	ldr	r2, [r4, #0]
 80004f4:	2000      	movs	r0, #0
 80004f6:	6893      	ldr	r3, [r2, #8]
 80004f8:	430b      	orrs	r3, r1
 80004fa:	6093      	str	r3, [r2, #8]
 80004fc:	e7cd      	b.n	800049a <HAL_ADC_Start_DMA+0x12>
      tmp_hal_status = ADC_Enable(hadc);
 80004fe:	0020      	movs	r0, r4
 8000500:	f7ff fec6 	bl	8000290 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000504:	2800      	cmp	r0, #0
 8000506:	d1c8      	bne.n	800049a <HAL_ADC_Start_DMA+0x12>
 8000508:	6821      	ldr	r1, [r4, #0]
 800050a:	e7d0      	b.n	80004ae <HAL_ADC_Start_DMA+0x26>
 800050c:	fffff0fe 	.word	0xfffff0fe
 8000510:	08000521 	.word	0x08000521
 8000514:	08000595 	.word	0x08000595
 8000518:	080005a5 	.word	0x080005a5

0800051c <HAL_ADC_ConvCpltCallback>:
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000520:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000522:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000524:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000528:	4211      	tst	r1, r2
 800052a:	d122      	bne.n	8000572 <ADC_DMAConvCplt+0x52>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000534:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000536:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	0109      	lsls	r1, r1, #4
 800053c:	68d0      	ldr	r0, [r2, #12]
 800053e:	4208      	tst	r0, r1
 8000540:	d113      	bne.n	800056a <ADC_DMAConvCplt+0x4a>
 8000542:	6a19      	ldr	r1, [r3, #32]
 8000544:	2900      	cmp	r1, #0
 8000546:	d110      	bne.n	800056a <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000548:	6811      	ldr	r1, [r2, #0]
 800054a:	0709      	lsls	r1, r1, #28
 800054c:	d50d      	bpl.n	800056a <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800054e:	6891      	ldr	r1, [r2, #8]
 8000550:	0749      	lsls	r1, r1, #29
 8000552:	d412      	bmi.n	800057a <ADC_DMAConvCplt+0x5a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000554:	200c      	movs	r0, #12
 8000556:	6851      	ldr	r1, [r2, #4]
 8000558:	4381      	bics	r1, r0
 800055a:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800055c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800055e:	490b      	ldr	r1, [pc, #44]	; (800058c <ADC_DMAConvCplt+0x6c>)
 8000560:	400a      	ands	r2, r1
 8000562:	3104      	adds	r1, #4
 8000564:	31ff      	adds	r1, #255	; 0xff
 8000566:	430a      	orrs	r2, r1
 8000568:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff ffd6 	bl	800051c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000570:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4798      	blx	r3
}
 8000578:	e7fa      	b.n	8000570 <ADC_DMAConvCplt+0x50>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800057a:	2120      	movs	r1, #32
 800057c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800057e:	430a      	orrs	r2, r1
 8000580:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000584:	391f      	subs	r1, #31
 8000586:	430a      	orrs	r2, r1
 8000588:	649a      	str	r2, [r3, #72]	; 0x48
 800058a:	e7ee      	b.n	800056a <ADC_DMAConvCplt+0x4a>
 800058c:	fffffefe 	.word	0xfffffefe

08000590 <HAL_ADC_ConvHalfCpltCallback>:
 8000590:	4770      	bx	lr
 8000592:	46c0      	nop			; (mov r8, r8)

08000594 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000594:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000596:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000598:	f7ff fffa 	bl	8000590 <HAL_ADC_ConvHalfCpltCallback>
}
 800059c:	bd10      	pop	{r4, pc}
 800059e:	46c0      	nop			; (mov r8, r8)

080005a0 <HAL_ADC_ErrorCallback>:
}
 80005a0:	4770      	bx	lr
 80005a2:	46c0      	nop			; (mov r8, r8)

080005a4 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80005a4:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80005a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80005a8:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80005aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80005ac:	4313      	orrs	r3, r2
 80005ae:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80005b0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005b2:	3a3c      	subs	r2, #60	; 0x3c
 80005b4:	4313      	orrs	r3, r2
 80005b6:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80005b8:	f7ff fff2 	bl	80005a0 <HAL_ADC_ErrorCallback>
}
 80005bc:	bd10      	pop	{r4, pc}
 80005be:	46c0      	nop			; (mov r8, r8)

080005c0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80005c0:	2300      	movs	r3, #0
{
 80005c2:	b570      	push	{r4, r5, r6, lr}
 80005c4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80005c6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80005c8:	3340      	adds	r3, #64	; 0x40
 80005ca:	5cc2      	ldrb	r2, [r0, r3]
{
 80005cc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80005ce:	2002      	movs	r0, #2
 80005d0:	2a01      	cmp	r2, #1
 80005d2:	d02b      	beq.n	800062c <HAL_ADC_ConfigChannel+0x6c>
 80005d4:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 80005d8:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	689d      	ldr	r5, [r3, #8]
 80005de:	076d      	lsls	r5, r5, #29
 80005e0:	d426      	bmi.n	8000630 <HAL_ADC_ConfigChannel+0x70>
    if (sConfig->Rank != ADC_RANK_NONE)
 80005e2:	4d33      	ldr	r5, [pc, #204]	; (80006b0 <HAL_ADC_ConfigChannel+0xf0>)
 80005e4:	684e      	ldr	r6, [r1, #4]
 80005e6:	42ae      	cmp	r6, r5
 80005e8:	d035      	beq.n	8000656 <HAL_ADC_ConfigChannel+0x96>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80005ea:	680d      	ldr	r5, [r1, #0]
 80005ec:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80005ee:	40aa      	lsls	r2, r5
 80005f0:	4332      	orrs	r2, r6
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	0552      	lsls	r2, r2, #21
 80005f8:	4290      	cmp	r0, r2
 80005fa:	d00f      	beq.n	800061c <HAL_ADC_ConfigChannel+0x5c>
 80005fc:	3801      	subs	r0, #1
 80005fe:	2806      	cmp	r0, #6
 8000600:	d90c      	bls.n	800061c <HAL_ADC_ConfigChannel+0x5c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000602:	2207      	movs	r2, #7
 8000604:	6888      	ldr	r0, [r1, #8]
 8000606:	6959      	ldr	r1, [r3, #20]
 8000608:	4011      	ands	r1, r2
 800060a:	4288      	cmp	r0, r1
 800060c:	d006      	beq.n	800061c <HAL_ADC_ConfigChannel+0x5c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800060e:	6959      	ldr	r1, [r3, #20]
 8000610:	4391      	bics	r1, r2
 8000612:	6159      	str	r1, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000614:	6959      	ldr	r1, [r3, #20]
 8000616:	4002      	ands	r2, r0
 8000618:	430a      	orrs	r2, r1
 800061a:	615a      	str	r2, [r3, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800061c:	002b      	movs	r3, r5
 800061e:	3b10      	subs	r3, #16
 8000620:	2b01      	cmp	r3, #1
 8000622:	d90e      	bls.n	8000642 <HAL_ADC_ConfigChannel+0x82>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000624:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000626:	2200      	movs	r2, #0
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	54e2      	strb	r2, [r4, r3]
}
 800062c:	b002      	add	sp, #8
 800062e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000630:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 8000632:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000634:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000636:	4313      	orrs	r3, r2
 8000638:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800063a:	2200      	movs	r2, #0
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	54e2      	strb	r2, [r4, r3]
  return tmp_hal_status;
 8000640:	e7f4      	b.n	800062c <HAL_ADC_ConfigChannel+0x6c>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <HAL_ADC_ConfigChannel+0xf4>)
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	2d10      	cmp	r5, #16
 8000648:	d018      	beq.n	800067c <HAL_ADC_ConfigChannel+0xbc>
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	03d2      	lsls	r2, r2, #15
 800064e:	430a      	orrs	r2, r1
 8000650:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000652:	2000      	movs	r0, #0
 8000654:	e7f1      	b.n	800063a <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000656:	6809      	ldr	r1, [r1, #0]
 8000658:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800065a:	408a      	lsls	r2, r1
 800065c:	4390      	bics	r0, r2
 800065e:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000660:	000b      	movs	r3, r1
 8000662:	3b10      	subs	r3, #16
 8000664:	2b01      	cmp	r3, #1
 8000666:	d8dd      	bhi.n	8000624 <HAL_ADC_ConfigChannel+0x64>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_ADC_ConfigChannel+0xf4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2910      	cmp	r1, #16
 800066e:	d01d      	beq.n	80006ac <HAL_ADC_ConfigChannel+0xec>
 8000670:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <HAL_ADC_ConfigChannel+0xf8>)
 8000672:	4013      	ands	r3, r2
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_ADC_ConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000676:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e7d4      	b.n	8000626 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0412      	lsls	r2, r2, #16
 8000680:	430a      	orrs	r2, r1
 8000682:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <HAL_ADC_ConfigChannel+0xfc>)
 8000686:	490e      	ldr	r1, [pc, #56]	; (80006c0 <HAL_ADC_ConfigChannel+0x100>)
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	f7ff fd45 	bl	8000118 <__udivsi3>
 800068e:	0083      	lsls	r3, r0, #2
 8000690:	1818      	adds	r0, r3, r0
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000696:	9b01      	ldr	r3, [sp, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0c3      	beq.n	8000624 <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 800069c:	9b01      	ldr	r3, [sp, #4]
 800069e:	3b01      	subs	r3, #1
 80006a0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80006a2:	9b01      	ldr	r3, [sp, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1f9      	bne.n	800069c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006a8:	2000      	movs	r0, #0
 80006aa:	e7bc      	b.n	8000626 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80006ac:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <HAL_ADC_ConfigChannel+0x104>)
 80006ae:	e7e0      	b.n	8000672 <HAL_ADC_ConfigChannel+0xb2>
 80006b0:	00001001 	.word	0x00001001
 80006b4:	40012708 	.word	0x40012708
 80006b8:	ffbfffff 	.word	0xffbfffff
 80006bc:	20000000 	.word	0x20000000
 80006c0:	000f4240 	.word	0x000f4240
 80006c4:	ff7fffff 	.word	0xff7fffff

080006c8 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80006c8:	2340      	movs	r3, #64	; 0x40
{
 80006ca:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80006cc:	5cc2      	ldrb	r2, [r0, r3]
{
 80006ce:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80006d0:	2002      	movs	r0, #2
 80006d2:	2a01      	cmp	r2, #1
 80006d4:	d033      	beq.n	800073e <HAL_ADCEx_Calibration_Start+0x76>
 80006d6:	2201      	movs	r2, #1
 80006d8:	54e2      	strb	r2, [r4, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	3202      	adds	r2, #2
 80006de:	6899      	ldr	r1, [r3, #8]
 80006e0:	400a      	ands	r2, r1
 80006e2:	2a01      	cmp	r2, #1
 80006e4:	d02c      	beq.n	8000740 <HAL_ADCEx_Calibration_Start+0x78>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80006e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006e8:	4921      	ldr	r1, [pc, #132]	; (8000770 <HAL_ADCEx_Calibration_Start+0xa8>)
 80006ea:	400a      	ands	r2, r1
 80006ec:	3106      	adds	r1, #6
 80006ee:	31ff      	adds	r1, #255	; 0xff
 80006f0:	430a      	orrs	r2, r1
 80006f2:	6462      	str	r2, [r4, #68]	; 0x44
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80006f4:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80006f6:	68da      	ldr	r2, [r3, #12]
 80006f8:	3101      	adds	r1, #1
 80006fa:	438a      	bics	r2, r1
 80006fc:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	6899      	ldr	r1, [r3, #8]
 8000702:	0612      	lsls	r2, r2, #24
 8000704:	430a      	orrs	r2, r1
 8000706:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000708:	f7ff fdbc 	bl	8000284 <HAL_GetTick>
 800070c:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800070e:	e004      	b.n	800071a <HAL_ADCEx_Calibration_Start+0x52>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000710:	f7ff fdb8 	bl	8000284 <HAL_GetTick>
 8000714:	1b40      	subs	r0, r0, r5
 8000716:	2802      	cmp	r0, #2
 8000718:	d81e      	bhi.n	8000758 <HAL_ADCEx_Calibration_Start+0x90>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	2a00      	cmp	r2, #0
 8000720:	dbf6      	blt.n	8000710 <HAL_ADCEx_Calibration_Start+0x48>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000722:	2203      	movs	r2, #3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000724:	2000      	movs	r0, #0
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000726:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000728:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800072a:	430e      	orrs	r6, r1
 800072c:	60de      	str	r6, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800072e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000730:	4393      	bics	r3, r2
 8000732:	3a02      	subs	r2, #2
 8000734:	4313      	orrs	r3, r2
 8000736:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000738:	2200      	movs	r2, #0
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800073e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000740:	6819      	ldr	r1, [r3, #0]
 8000742:	420a      	tst	r2, r1
 8000744:	d102      	bne.n	800074c <HAL_ADCEx_Calibration_Start+0x84>
 8000746:	68da      	ldr	r2, [r3, #12]
 8000748:	0412      	lsls	r2, r2, #16
 800074a:	d5cc      	bpl.n	80006e6 <HAL_ADCEx_Calibration_Start+0x1e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800074c:	2220      	movs	r2, #32
 800074e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000750:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000752:	4313      	orrs	r3, r2
 8000754:	6463      	str	r3, [r4, #68]	; 0x44
 8000756:	e7ef      	b.n	8000738 <HAL_ADCEx_Calibration_Start+0x70>
        ADC_STATE_CLR_SET(hadc->State,
 8000758:	2212      	movs	r2, #18
 800075a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800075c:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800075e:	4393      	bics	r3, r2
 8000760:	3a02      	subs	r2, #2
 8000762:	4313      	orrs	r3, r2
 8000764:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8000766:	2200      	movs	r2, #0
 8000768:	2340      	movs	r3, #64	; 0x40
 800076a:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 800076c:	e7e7      	b.n	800073e <HAL_ADCEx_Calibration_Start+0x76>
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	fffffefd 	.word	0xfffffefd

08000774 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000774:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000776:	2800      	cmp	r0, #0
 8000778:	db14      	blt.n	80007a4 <HAL_NVIC_SetPriority+0x30>
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077c:	2403      	movs	r4, #3
 800077e:	4694      	mov	ip, r2
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	0883      	lsrs	r3, r0, #2
 8000784:	4020      	ands	r0, r4
 8000786:	0014      	movs	r4, r2
 8000788:	26c0      	movs	r6, #192	; 0xc0
 800078a:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078e:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000790:	400a      	ands	r2, r1
 8000792:	4082      	lsls	r2, r0
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000798:	00b6      	lsls	r6, r6, #2
 800079a:	599d      	ldr	r5, [r3, r6]
 800079c:	43a5      	bics	r5, r4
 800079e:	432a      	orrs	r2, r5
 80007a0:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a6:	24ff      	movs	r4, #255	; 0xff
 80007a8:	4694      	mov	ip, r2
 80007aa:	230f      	movs	r3, #15
 80007ac:	2203      	movs	r2, #3
 80007ae:	b2c0      	uxtb	r0, r0
 80007b0:	4003      	ands	r3, r0
 80007b2:	4010      	ands	r0, r2
 80007b4:	0022      	movs	r2, r4
 80007b6:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b8:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ba:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007bc:	400c      	ands	r4, r1
 80007be:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c0:	3b08      	subs	r3, #8
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4463      	add	r3, ip
 80007c8:	69dd      	ldr	r5, [r3, #28]
 80007ca:	4395      	bics	r5, r2
 80007cc:	432c      	orrs	r4, r5
 80007ce:	61dc      	str	r4, [r3, #28]
 80007d0:	e7e7      	b.n	80007a2 <HAL_NVIC_SetPriority+0x2e>
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007dc:	231f      	movs	r3, #31
 80007de:	4018      	ands	r0, r3
 80007e0:	3b1e      	subs	r3, #30
 80007e2:	4083      	lsls	r3, r0
 80007e4:	4a01      	ldr	r2, [pc, #4]	; (80007ec <HAL_NVIC_EnableIRQ+0x10>)
 80007e6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007e8:	4770      	bx	lr
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f0:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_SYSTICK_Config+0x2c>)
 80007f2:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f4:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d80e      	bhi.n	8000818 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fa:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fc:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000800:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000802:	6a03      	ldr	r3, [r0, #32]
 8000804:	0609      	lsls	r1, r1, #24
 8000806:	021b      	lsls	r3, r3, #8
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	430b      	orrs	r3, r1
 800080c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080e:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000810:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000812:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000814:	3307      	adds	r3, #7
 8000816:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000818:	4770      	bx	lr
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	00ffffff 	.word	0x00ffffff
 8000820:	e000e010 	.word	0xe000e010
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800082a:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800082c:	2804      	cmp	r0, #4
 800082e:	d003      	beq.n	8000838 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000830:	2104      	movs	r1, #4
 8000832:	438b      	bics	r3, r1
 8000834:	6013      	str	r3, [r2, #0]
  }
}
 8000836:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000838:	4318      	orrs	r0, r3
 800083a:	6010      	str	r0, [r2, #0]
 800083c:	e7fb      	b.n	8000836 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	e000e010 	.word	0xe000e010

08000844 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000844:	4770      	bx	lr
 8000846:	46c0      	nop			; (mov r8, r8)

08000848 <HAL_SYSTICK_IRQHandler>:
{
 8000848:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800084a:	f7ff fffb 	bl	8000844 <HAL_SYSTICK_Callback>
}
 800084e:	bd10      	pop	{r4, pc}

08000850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000850:	b570      	push	{r4, r5, r6, lr}
 8000852:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000854:	d02b      	beq.n	80008ae <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000856:	2521      	movs	r5, #33	; 0x21
 8000858:	2302      	movs	r3, #2
 800085a:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800085c:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000860:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000862:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000864:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000866:	6863      	ldr	r3, [r4, #4]
 8000868:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800086a:	68e1      	ldr	r1, [r4, #12]
 800086c:	430b      	orrs	r3, r1
 800086e:	6921      	ldr	r1, [r4, #16]
 8000870:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000872:	6961      	ldr	r1, [r4, #20]
 8000874:	430b      	orrs	r3, r1
 8000876:	69a1      	ldr	r1, [r4, #24]
 8000878:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800087a:	69e1      	ldr	r1, [r4, #28]
 800087c:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800087e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000880:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_DMA_Init+0x68>)
 8000884:	2114      	movs	r1, #20
 8000886:	469c      	mov	ip, r3
 8000888:	4460      	add	r0, ip
 800088a:	f7ff fc45 	bl	8000118 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 8000890:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8000892:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000894:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000896:	0080      	lsls	r0, r0, #2
 8000898:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 800089a:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 800089c:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800089e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80008a0:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80008a2:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008a4:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80008a6:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 80008a8:	321f      	adds	r2, #31
 80008aa:	54a3      	strb	r3, [r4, r2]
}  
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80008ae:	2001      	movs	r0, #1
 80008b0:	e7fc      	b.n	80008ac <HAL_DMA_Init+0x5c>
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	ffffc00f 	.word	0xffffc00f
 80008b8:	bffdfff8 	.word	0xbffdfff8
 80008bc:	40020000 	.word	0x40020000

080008c0 <HAL_DMA_Start_IT>:
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80008c2:	2420      	movs	r4, #32
 80008c4:	5d05      	ldrb	r5, [r0, r4]
 80008c6:	2602      	movs	r6, #2
 80008c8:	2d01      	cmp	r5, #1
 80008ca:	d008      	beq.n	80008de <HAL_DMA_Start_IT+0x1e>
 80008cc:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80008ce:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 80008d0:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 80008d2:	5dc5      	ldrb	r5, [r0, r7]
 80008d4:	b2ed      	uxtb	r5, r5
 80008d6:	2d01      	cmp	r5, #1
 80008d8:	d003      	beq.n	80008e2 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 80008da:	2300      	movs	r3, #0
 80008dc:	5503      	strb	r3, [r0, r4]
} 
 80008de:	0030      	movs	r0, r6
 80008e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008e2:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 80008e4:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008e6:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008e8:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008ea:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008ec:	6826      	ldr	r6, [r4, #0]
 80008ee:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008f0:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008f2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008f4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80008f6:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80008f8:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008fa:	6843      	ldr	r3, [r0, #4]
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	d00e      	beq.n	800091e <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 8000900:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000902:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000904:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00c      	beq.n	8000924 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800090a:	220e      	movs	r2, #14
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	4313      	orrs	r3, r2
 8000910:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000912:	2201      	movs	r2, #1
 8000914:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000916:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000918:	4313      	orrs	r3, r2
 800091a:	6023      	str	r3, [r4, #0]
 800091c:	e7df      	b.n	80008de <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 800091e:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000920:	60e1      	str	r1, [r4, #12]
 8000922:	e7ef      	b.n	8000904 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000924:	220a      	movs	r2, #10
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	4313      	orrs	r3, r2
 800092a:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	3a06      	subs	r2, #6
 8000930:	4393      	bics	r3, r2
 8000932:	6023      	str	r3, [r4, #0]
 8000934:	e7ed      	b.n	8000912 <HAL_DMA_Start_IT+0x52>
 8000936:	46c0      	nop			; (mov r8, r8)

08000938 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000938:	2321      	movs	r3, #33	; 0x21
{  
 800093a:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800093c:	5cc2      	ldrb	r2, [r0, r3]
 800093e:	2a02      	cmp	r2, #2
 8000940:	d003      	beq.n	800094a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000942:	3b1d      	subs	r3, #29
 8000944:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000946:	2001      	movs	r0, #1
}
 8000948:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800094a:	240e      	movs	r4, #14
 800094c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800094e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000950:	6811      	ldr	r1, [r2, #0]
 8000952:	43a1      	bics	r1, r4
 8000954:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000956:	2101      	movs	r1, #1
 8000958:	6814      	ldr	r4, [r2, #0]
 800095a:	438c      	bics	r4, r1
 800095c:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800095e:	000c      	movs	r4, r1
 8000960:	40ac      	lsls	r4, r5
 8000962:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000964:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000966:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000968:	2200      	movs	r2, #0
 800096a:	2320      	movs	r3, #32
 800096c:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 800096e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8000974:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000976:	2000      	movs	r0, #0
 8000978:	e7e6      	b.n	8000948 <HAL_DMA_Abort_IT+0x10>
 800097a:	2000      	movs	r0, #0
 800097c:	e7e4      	b.n	8000948 <HAL_DMA_Abort_IT+0x10>
 800097e:	46c0      	nop			; (mov r8, r8)

08000980 <HAL_DMA_IRQHandler>:
{
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000982:	2504      	movs	r5, #4
 8000984:	002e      	movs	r6, r5
 8000986:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000988:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800098a:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800098c:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800098e:	6801      	ldr	r1, [r0, #0]
 8000990:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000992:	4216      	tst	r6, r2
 8000994:	d00d      	beq.n	80009b2 <HAL_DMA_IRQHandler+0x32>
 8000996:	423d      	tst	r5, r7
 8000998:	d00b      	beq.n	80009b2 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800099a:	680b      	ldr	r3, [r1, #0]
 800099c:	069b      	lsls	r3, r3, #26
 800099e:	d402      	bmi.n	80009a6 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80009a0:	680b      	ldr	r3, [r1, #0]
 80009a2:	43ab      	bics	r3, r5
 80009a4:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80009a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80009a8:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 80009ae:	4798      	blx	r3
}  
 80009b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80009b2:	2502      	movs	r5, #2
 80009b4:	002e      	movs	r6, r5
 80009b6:	409e      	lsls	r6, r3
 80009b8:	4216      	tst	r6, r2
 80009ba:	d014      	beq.n	80009e6 <HAL_DMA_IRQHandler+0x66>
 80009bc:	423d      	tst	r5, r7
 80009be:	d012      	beq.n	80009e6 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009c0:	680b      	ldr	r3, [r1, #0]
 80009c2:	069b      	lsls	r3, r3, #26
 80009c4:	d406      	bmi.n	80009d4 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80009c6:	220a      	movs	r2, #10
 80009c8:	680b      	ldr	r3, [r1, #0]
 80009ca:	4393      	bics	r3, r2
 80009cc:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80009ce:	2321      	movs	r3, #33	; 0x21
 80009d0:	3a09      	subs	r2, #9
 80009d2:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 80009d4:	2320      	movs	r3, #32
 80009d6:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80009d8:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 80009da:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 80009dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0e6      	beq.n	80009b0 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 80009e2:	4798      	blx	r3
 80009e4:	e7e4      	b.n	80009b0 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80009e6:	2508      	movs	r5, #8
 80009e8:	002e      	movs	r6, r5
 80009ea:	409e      	lsls	r6, r3
 80009ec:	4232      	tst	r2, r6
 80009ee:	d0df      	beq.n	80009b0 <HAL_DMA_IRQHandler+0x30>
 80009f0:	423d      	tst	r5, r7
 80009f2:	d0dd      	beq.n	80009b0 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009f4:	680a      	ldr	r2, [r1, #0]
 80009f6:	3506      	adds	r5, #6
 80009f8:	43aa      	bics	r2, r5
 80009fa:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009fc:	2201      	movs	r2, #1
 80009fe:	0011      	movs	r1, r2
 8000a00:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8000a02:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a04:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000a06:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000a08:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000a10:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0cc      	beq.n	80009b0 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000a16:	4798      	blx	r3
 8000a18:	e7ca      	b.n	80009b0 <HAL_DMA_IRQHandler+0x30>
 8000a1a:	46c0      	nop			; (mov r8, r8)

08000a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	46de      	mov	lr, fp
 8000a20:	4657      	mov	r7, sl
 8000a22:	464e      	mov	r6, r9
 8000a24:	4645      	mov	r5, r8
 8000a26:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a28:	680b      	ldr	r3, [r1, #0]
{ 
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a2e:	469c      	mov	ip, r3
 8000a30:	2200      	movs	r2, #0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <HAL_GPIO_Init+0x1c>
 8000a36:	e0b7      	b.n	8000ba8 <HAL_GPIO_Init+0x18c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a38:	4b64      	ldr	r3, [pc, #400]	; (8000bcc <HAL_GPIO_Init+0x1b0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3a:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 8000a3e:	4b64      	ldr	r3, [pc, #400]	; (8000bd0 <HAL_GPIO_Init+0x1b4>)
 8000a40:	4698      	mov	r8, r3
 8000a42:	e067      	b.n	8000b14 <HAL_GPIO_Init+0xf8>
      temp = GPIOx->MODER;
 8000a44:	6803      	ldr	r3, [r0, #0]
 8000a46:	0056      	lsls	r6, r2, #1
 8000a48:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000a4a:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a4c:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000a4e:	40b3      	lsls	r3, r6
 8000a50:	4664      	mov	r4, ip
 8000a52:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a54:	400f      	ands	r7, r1
 8000a56:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000a58:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a5a:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5c:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8000a5e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a60:	3f01      	subs	r7, #1
 8000a62:	2f01      	cmp	r7, #1
 8000a64:	d800      	bhi.n	8000a68 <HAL_GPIO_Init+0x4c>
 8000a66:	e081      	b.n	8000b6c <HAL_GPIO_Init+0x150>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000a68:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 8000a6a:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a6c:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000a6e:	68a5      	ldr	r5, [r4, #8]
 8000a70:	40b5      	lsls	r5, r6
 8000a72:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8000a74:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	055b      	lsls	r3, r3, #21
 8000a7a:	4219      	tst	r1, r3
 8000a7c:	d046      	beq.n	8000b0c <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4653      	mov	r3, sl
 8000a80:	2401      	movs	r4, #1
 8000a82:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a84:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4323      	orrs	r3, r4
 8000a88:	4654      	mov	r4, sl
 8000a8a:	61a3      	str	r3, [r4, #24]
 8000a8c:	69a3      	ldr	r3, [r4, #24]
 8000a8e:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a90:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4023      	ands	r3, r4
 8000a94:	4c4f      	ldr	r4, [pc, #316]	; (8000bd4 <HAL_GPIO_Init+0x1b8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a96:	4016      	ands	r6, r2
 8000a98:	46a4      	mov	ip, r4
 8000a9a:	00b6      	lsls	r6, r6, #2
 8000a9c:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a9e:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa0:	9303      	str	r3, [sp, #12]
 8000aa2:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000aa4:	0893      	lsrs	r3, r2, #2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4463      	add	r3, ip
 8000aaa:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aac:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000aae:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ab0:	42a0      	cmp	r0, r4
 8000ab2:	d100      	bne.n	8000ab6 <HAL_GPIO_Init+0x9a>
 8000ab4:	e07f      	b.n	8000bb6 <HAL_GPIO_Init+0x19a>
 8000ab6:	4f48      	ldr	r7, [pc, #288]	; (8000bd8 <HAL_GPIO_Init+0x1bc>)
 8000ab8:	42b8      	cmp	r0, r7
 8000aba:	d100      	bne.n	8000abe <HAL_GPIO_Init+0xa2>
 8000abc:	e07d      	b.n	8000bba <HAL_GPIO_Init+0x19e>
 8000abe:	4f47      	ldr	r7, [pc, #284]	; (8000bdc <HAL_GPIO_Init+0x1c0>)
 8000ac0:	42b8      	cmp	r0, r7
 8000ac2:	d100      	bne.n	8000ac6 <HAL_GPIO_Init+0xaa>
 8000ac4:	e07c      	b.n	8000bc0 <HAL_GPIO_Init+0x1a4>
 8000ac6:	4f46      	ldr	r7, [pc, #280]	; (8000be0 <HAL_GPIO_Init+0x1c4>)
 8000ac8:	42b8      	cmp	r0, r7
 8000aca:	d100      	bne.n	8000ace <HAL_GPIO_Init+0xb2>
 8000acc:	e07b      	b.n	8000bc6 <HAL_GPIO_Init+0x1aa>
 8000ace:	2705      	movs	r7, #5
 8000ad0:	40b7      	lsls	r7, r6
 8000ad2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ad4:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8000ad6:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ad8:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000ada:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000adc:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ade:	03cc      	lsls	r4, r1, #15
 8000ae0:	d45f      	bmi.n	8000ba2 <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ae2:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8000ae4:	4644      	mov	r4, r8
 8000ae6:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8000ae8:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aea:	038c      	lsls	r4, r1, #14
 8000aec:	d456      	bmi.n	8000b9c <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000aee:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8000af0:	4644      	mov	r4, r8
 8000af2:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af4:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af6:	02cc      	lsls	r4, r1, #11
 8000af8:	d44d      	bmi.n	8000b96 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000afa:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8000afc:	4644      	mov	r4, r8
 8000afe:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8000b00:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b02:	0289      	lsls	r1, r1, #10
 8000b04:	d444      	bmi.n	8000b90 <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000b06:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8000b08:	4641      	mov	r1, r8
 8000b0a:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b0c:	464b      	mov	r3, r9
      }
    }
    
    position++;
 8000b0e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b10:	40d3      	lsrs	r3, r2
 8000b12:	d049      	beq.n	8000ba8 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b14:	2501      	movs	r5, #1
 8000b16:	464c      	mov	r4, r9
 8000b18:	4095      	lsls	r5, r2
 8000b1a:	402c      	ands	r4, r5
 8000b1c:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 8000b1e:	d0f5      	beq.n	8000b0c <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000b20:	465b      	mov	r3, fp
 8000b22:	6859      	ldr	r1, [r3, #4]
 8000b24:	2310      	movs	r3, #16
 8000b26:	000f      	movs	r7, r1
 8000b28:	439f      	bics	r7, r3
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	9701      	str	r7, [sp, #4]
 8000b2e:	2f02      	cmp	r7, #2
 8000b30:	d188      	bne.n	8000a44 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000b32:	240f      	movs	r4, #15
 8000b34:	3305      	adds	r3, #5
 8000b36:	4013      	ands	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 8000b3c:	08d6      	lsrs	r6, r2, #3
 8000b3e:	00b6      	lsls	r6, r6, #2
 8000b40:	1986      	adds	r6, r0, r6
 8000b42:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000b44:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000b46:	465c      	mov	r4, fp
 8000b48:	6924      	ldr	r4, [r4, #16]
 8000b4a:	409c      	lsls	r4, r3
 8000b4c:	0023      	movs	r3, r4
 8000b4e:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000b50:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000b52:	2303      	movs	r3, #3
 8000b54:	0056      	lsls	r6, r2, #1
 8000b56:	40b3      	lsls	r3, r6
 8000b58:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 8000b5a:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000b5c:	401f      	ands	r7, r3
 8000b5e:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b60:	2703      	movs	r7, #3
 8000b62:	400f      	ands	r7, r1
 8000b64:	40b7      	lsls	r7, r6
 8000b66:	4664      	mov	r4, ip
 8000b68:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 8000b6a:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8000b6c:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000b6e:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b70:	401f      	ands	r7, r3
 8000b72:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000b74:	68e7      	ldr	r7, [r4, #12]
 8000b76:	4664      	mov	r4, ip
 8000b78:	40b7      	lsls	r7, r6
 8000b7a:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b7c:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 8000b7e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b80:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b82:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b84:	090d      	lsrs	r5, r1, #4
 8000b86:	4025      	ands	r5, r4
 8000b88:	4095      	lsls	r5, r2
 8000b8a:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 8000b8c:	6045      	str	r5, [r0, #4]
 8000b8e:	e76b      	b.n	8000a68 <HAL_GPIO_Init+0x4c>
          SET_BIT(temp, iocurrent); 
 8000b90:	9900      	ldr	r1, [sp, #0]
 8000b92:	430b      	orrs	r3, r1
 8000b94:	e7b8      	b.n	8000b08 <HAL_GPIO_Init+0xec>
          SET_BIT(temp, iocurrent); 
 8000b96:	9c00      	ldr	r4, [sp, #0]
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	e7af      	b.n	8000afc <HAL_GPIO_Init+0xe0>
          SET_BIT(temp, iocurrent); 
 8000b9c:	9c00      	ldr	r4, [sp, #0]
 8000b9e:	4323      	orrs	r3, r4
 8000ba0:	e7a6      	b.n	8000af0 <HAL_GPIO_Init+0xd4>
          SET_BIT(temp, iocurrent); 
 8000ba2:	9c00      	ldr	r4, [sp, #0]
 8000ba4:	4323      	orrs	r3, r4
 8000ba6:	e79d      	b.n	8000ae4 <HAL_GPIO_Init+0xc8>
  } 
}
 8000ba8:	b005      	add	sp, #20
 8000baa:	bc3c      	pop	{r2, r3, r4, r5}
 8000bac:	4690      	mov	r8, r2
 8000bae:	4699      	mov	r9, r3
 8000bb0:	46a2      	mov	sl, r4
 8000bb2:	46ab      	mov	fp, r5
 8000bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb6:	2700      	movs	r7, #0
 8000bb8:	e78b      	b.n	8000ad2 <HAL_GPIO_Init+0xb6>
 8000bba:	2701      	movs	r7, #1
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	e788      	b.n	8000ad2 <HAL_GPIO_Init+0xb6>
 8000bc0:	2702      	movs	r7, #2
 8000bc2:	40b7      	lsls	r7, r6
 8000bc4:	e785      	b.n	8000ad2 <HAL_GPIO_Init+0xb6>
 8000bc6:	2703      	movs	r7, #3
 8000bc8:	40b7      	lsls	r7, r6
 8000bca:	e782      	b.n	8000ad2 <HAL_GPIO_Init+0xb6>
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010400 	.word	0x40010400
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	48000800 	.word	0x48000800
 8000be0:	48000c00 	.word	0x48000c00

08000be4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000be4:	6900      	ldr	r0, [r0, #16]
 8000be6:	4008      	ands	r0, r1
 8000be8:	1e41      	subs	r1, r0, #1
 8000bea:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000bec:	b2c0      	uxtb	r0, r0
  }
 8000bee:	4770      	bx	lr

08000bf0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bf4:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000bf6:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf8:	6181      	str	r1, [r0, #24]
 8000bfa:	e7fc      	b.n	8000bf6 <HAL_GPIO_WritePin+0x6>

08000bfc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000bfe:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	4210      	tst	r0, r2
 8000c04:	d002      	beq.n	8000c0c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c06:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c08:	f001 fab4 	bl	8002174 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40010400 	.word	0x40010400

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	46ce      	mov	lr, r9
 8000c18:	4647      	mov	r7, r8
 8000c1a:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1c:	6803      	ldr	r3, [r0, #0]
{
 8000c1e:	b083      	sub	sp, #12
 8000c20:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c22:	07da      	lsls	r2, r3, #31
 8000c24:	d52f      	bpl.n	8000c86 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c26:	220c      	movs	r2, #12
 8000c28:	48c4      	ldr	r0, [pc, #784]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000c2a:	6841      	ldr	r1, [r0, #4]
 8000c2c:	4011      	ands	r1, r2
 8000c2e:	2904      	cmp	r1, #4
 8000c30:	d100      	bne.n	8000c34 <HAL_RCC_OscConfig+0x20>
 8000c32:	e110      	b.n	8000e56 <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c34:	6841      	ldr	r1, [r0, #4]
 8000c36:	400a      	ands	r2, r1
 8000c38:	2a08      	cmp	r2, #8
 8000c3a:	d100      	bne.n	8000c3e <HAL_RCC_OscConfig+0x2a>
 8000c3c:	e107      	b.n	8000e4e <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3e:	6863      	ldr	r3, [r4, #4]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d100      	bne.n	8000c46 <HAL_RCC_OscConfig+0x32>
 8000c44:	e186      	b.n	8000f54 <HAL_RCC_OscConfig+0x340>
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d100      	bne.n	8000c4c <HAL_RCC_OscConfig+0x38>
 8000c4a:	e11a      	b.n	8000e82 <HAL_RCC_OscConfig+0x26e>
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	d100      	bne.n	8000c52 <HAL_RCC_OscConfig+0x3e>
 8000c50:	e1db      	b.n	800100a <HAL_RCC_OscConfig+0x3f6>
 8000c52:	4bba      	ldr	r3, [pc, #744]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000c54:	49ba      	ldr	r1, [pc, #744]	; (8000f40 <HAL_RCC_OscConfig+0x32c>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	400a      	ands	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	49b9      	ldr	r1, [pc, #740]	; (8000f44 <HAL_RCC_OscConfig+0x330>)
 8000c60:	400a      	ands	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c64:	f7ff fb0e 	bl	8000284 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c68:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c6a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6c:	4eb3      	ldr	r6, [pc, #716]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000c6e:	02ad      	lsls	r5, r5, #10
 8000c70:	e005      	b.n	8000c7e <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c72:	f7ff fb07 	bl	8000284 <HAL_GetTick>
 8000c76:	1bc0      	subs	r0, r0, r7
 8000c78:	2864      	cmp	r0, #100	; 0x64
 8000c7a:	d900      	bls.n	8000c7e <HAL_RCC_OscConfig+0x6a>
 8000c7c:	e12f      	b.n	8000ede <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	6833      	ldr	r3, [r6, #0]
 8000c80:	422b      	tst	r3, r5
 8000c82:	d0f6      	beq.n	8000c72 <HAL_RCC_OscConfig+0x5e>
 8000c84:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c86:	079a      	lsls	r2, r3, #30
 8000c88:	d529      	bpl.n	8000cde <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	49ab      	ldr	r1, [pc, #684]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000c8e:	6848      	ldr	r0, [r1, #4]
 8000c90:	4202      	tst	r2, r0
 8000c92:	d100      	bne.n	8000c96 <HAL_RCC_OscConfig+0x82>
 8000c94:	e0bf      	b.n	8000e16 <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c96:	6848      	ldr	r0, [r1, #4]
 8000c98:	4002      	ands	r2, r0
 8000c9a:	2a08      	cmp	r2, #8
 8000c9c:	d100      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x8c>
 8000c9e:	e0b6      	b.n	8000e0e <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca0:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca2:	4da6      	ldr	r5, [pc, #664]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d100      	bne.n	8000caa <HAL_RCC_OscConfig+0x96>
 8000ca8:	e134      	b.n	8000f14 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 8000caa:	2201      	movs	r2, #1
 8000cac:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cae:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fae6 	bl	8000284 <HAL_GetTick>
 8000cb8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cba:	e005      	b.n	8000cc8 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cbc:	f7ff fae2 	bl	8000284 <HAL_GetTick>
 8000cc0:	1bc0      	subs	r0, r0, r7
 8000cc2:	2802      	cmp	r0, #2
 8000cc4:	d900      	bls.n	8000cc8 <HAL_RCC_OscConfig+0xb4>
 8000cc6:	e10a      	b.n	8000ede <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc8:	682b      	ldr	r3, [r5, #0]
 8000cca:	421e      	tst	r6, r3
 8000ccc:	d0f6      	beq.n	8000cbc <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cce:	21f8      	movs	r1, #248	; 0xf8
 8000cd0:	682a      	ldr	r2, [r5, #0]
 8000cd2:	6923      	ldr	r3, [r4, #16]
 8000cd4:	438a      	bics	r2, r1
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	602b      	str	r3, [r5, #0]
 8000cdc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cde:	071a      	lsls	r2, r3, #28
 8000ce0:	d500      	bpl.n	8000ce4 <HAL_RCC_OscConfig+0xd0>
 8000ce2:	e07d      	b.n	8000de0 <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce4:	075a      	lsls	r2, r3, #29
 8000ce6:	d540      	bpl.n	8000d6a <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ce8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000cea:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cec:	4b93      	ldr	r3, [pc, #588]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000cee:	0552      	lsls	r2, r2, #21
 8000cf0:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000cf2:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf4:	4211      	tst	r1, r2
 8000cf6:	d108      	bne.n	8000d0a <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	69d9      	ldr	r1, [r3, #28]
 8000cfa:	4311      	orrs	r1, r2
 8000cfc:	61d9      	str	r1, [r3, #28]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	401a      	ands	r2, r3
 8000d02:	9201      	str	r2, [sp, #4]
 8000d04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d06:	2301      	movs	r3, #1
 8000d08:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0a:	2780      	movs	r7, #128	; 0x80
 8000d0c:	4e8e      	ldr	r6, [pc, #568]	; (8000f48 <HAL_RCC_OscConfig+0x334>)
 8000d0e:	007f      	lsls	r7, r7, #1
 8000d10:	6833      	ldr	r3, [r6, #0]
 8000d12:	423b      	tst	r3, r7
 8000d14:	d100      	bne.n	8000d18 <HAL_RCC_OscConfig+0x104>
 8000d16:	e0cd      	b.n	8000eb4 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d18:	68a3      	ldr	r3, [r4, #8]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d100      	bne.n	8000d20 <HAL_RCC_OscConfig+0x10c>
 8000d1e:	e0d9      	b.n	8000ed4 <HAL_RCC_OscConfig+0x2c0>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d100      	bne.n	8000d26 <HAL_RCC_OscConfig+0x112>
 8000d24:	e0dd      	b.n	8000ee2 <HAL_RCC_OscConfig+0x2ce>
 8000d26:	2b05      	cmp	r3, #5
 8000d28:	d100      	bne.n	8000d2c <HAL_RCC_OscConfig+0x118>
 8000d2a:	e198      	b.n	800105e <HAL_RCC_OscConfig+0x44a>
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4b83      	ldr	r3, [pc, #524]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000d30:	6a1a      	ldr	r2, [r3, #32]
 8000d32:	438a      	bics	r2, r1
 8000d34:	621a      	str	r2, [r3, #32]
 8000d36:	6a1a      	ldr	r2, [r3, #32]
 8000d38:	3103      	adds	r1, #3
 8000d3a:	438a      	bics	r2, r1
 8000d3c:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3e:	f7ff faa1 	bl	8000284 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d42:	4f7e      	ldr	r7, [pc, #504]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8000d44:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d46:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d48:	4d80      	ldr	r5, [pc, #512]	; (8000f4c <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d4a:	e006      	b.n	8000d5a <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fa9a 	bl	8000284 <HAL_GetTick>
 8000d50:	464b      	mov	r3, r9
 8000d52:	1ac0      	subs	r0, r0, r3
 8000d54:	42a8      	cmp	r0, r5
 8000d56:	d900      	bls.n	8000d5a <HAL_RCC_OscConfig+0x146>
 8000d58:	e0c1      	b.n	8000ede <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	421e      	tst	r6, r3
 8000d5e:	d0f5      	beq.n	8000d4c <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d60:	4643      	mov	r3, r8
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d100      	bne.n	8000d68 <HAL_RCC_OscConfig+0x154>
 8000d66:	e113      	b.n	8000f90 <HAL_RCC_OscConfig+0x37c>
 8000d68:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000d6a:	06db      	lsls	r3, r3, #27
 8000d6c:	d512      	bpl.n	8000d94 <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000d6e:	6963      	ldr	r3, [r4, #20]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d100      	bne.n	8000d76 <HAL_RCC_OscConfig+0x162>
 8000d74:	e155      	b.n	8001022 <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d76:	3305      	adds	r3, #5
 8000d78:	d000      	beq.n	8000d7c <HAL_RCC_OscConfig+0x168>
 8000d7a:	e0f2      	b.n	8000f62 <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d7c:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d7e:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d80:	4a6e      	ldr	r2, [pc, #440]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000d82:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000d84:	438b      	bics	r3, r1
 8000d86:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d88:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000d8a:	69a3      	ldr	r3, [r4, #24]
 8000d8c:	4381      	bics	r1, r0
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d94:	6a23      	ldr	r3, [r4, #32]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d01c      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	4d67      	ldr	r5, [pc, #412]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000d9e:	6869      	ldr	r1, [r5, #4]
 8000da0:	400a      	ands	r2, r1
 8000da2:	2a08      	cmp	r2, #8
 8000da4:	d03e      	beq.n	8000e24 <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d100      	bne.n	8000dac <HAL_RCC_OscConfig+0x198>
 8000daa:	e0f8      	b.n	8000f9e <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	4a68      	ldr	r2, [pc, #416]	; (8000f50 <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db0:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 8000db2:	4013      	ands	r3, r2
 8000db4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000db6:	f7ff fa65 	bl	8000284 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dba:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000dbc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dbe:	04ad      	lsls	r5, r5, #18
 8000dc0:	e005      	b.n	8000dce <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc2:	f7ff fa5f 	bl	8000284 <HAL_GetTick>
 8000dc6:	1b80      	subs	r0, r0, r6
 8000dc8:	2802      	cmp	r0, #2
 8000dca:	d900      	bls.n	8000dce <HAL_RCC_OscConfig+0x1ba>
 8000dcc:	e087      	b.n	8000ede <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	422b      	tst	r3, r5
 8000dd2:	d1f6      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000dd4:	2000      	movs	r0, #0
}
 8000dd6:	b003      	add	sp, #12
 8000dd8:	bc0c      	pop	{r2, r3}
 8000dda:	4690      	mov	r8, r2
 8000ddc:	4699      	mov	r9, r3
 8000dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de0:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8000de2:	4d56      	ldr	r5, [pc, #344]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d01f      	beq.n	8000e28 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8000de8:	2201      	movs	r2, #1
 8000dea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dec:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000dee:	4313      	orrs	r3, r2
 8000df0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000df2:	f7ff fa47 	bl	8000284 <HAL_GetTick>
 8000df6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df8:	e004      	b.n	8000e04 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fa43 	bl	8000284 <HAL_GetTick>
 8000dfe:	1bc0      	subs	r0, r0, r7
 8000e00:	2802      	cmp	r0, #2
 8000e02:	d86c      	bhi.n	8000ede <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e06:	421e      	tst	r6, r3
 8000e08:	d0f7      	beq.n	8000dfa <HAL_RCC_OscConfig+0x1e6>
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	e76a      	b.n	8000ce4 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e0e:	684a      	ldr	r2, [r1, #4]
 8000e10:	03d2      	lsls	r2, r2, #15
 8000e12:	d500      	bpl.n	8000e16 <HAL_RCC_OscConfig+0x202>
 8000e14:	e744      	b.n	8000ca0 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e16:	4a49      	ldr	r2, [pc, #292]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	0792      	lsls	r2, r2, #30
 8000e1c:	d525      	bpl.n	8000e6a <HAL_RCC_OscConfig+0x256>
 8000e1e:	68e2      	ldr	r2, [r4, #12]
 8000e20:	2a01      	cmp	r2, #1
 8000e22:	d022      	beq.n	8000e6a <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
 8000e26:	e7d6      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 8000e28:	2201      	movs	r2, #1
 8000e2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000e2e:	4393      	bics	r3, r2
 8000e30:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000e32:	f7ff fa27 	bl	8000284 <HAL_GetTick>
 8000e36:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e38:	e004      	b.n	8000e44 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3a:	f7ff fa23 	bl	8000284 <HAL_GetTick>
 8000e3e:	1bc0      	subs	r0, r0, r7
 8000e40:	2802      	cmp	r0, #2
 8000e42:	d84c      	bhi.n	8000ede <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e46:	421e      	tst	r6, r3
 8000e48:	d1f7      	bne.n	8000e3a <HAL_RCC_OscConfig+0x226>
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	e74a      	b.n	8000ce4 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e4e:	6842      	ldr	r2, [r0, #4]
 8000e50:	03d2      	lsls	r2, r2, #15
 8000e52:	d400      	bmi.n	8000e56 <HAL_RCC_OscConfig+0x242>
 8000e54:	e6f3      	b.n	8000c3e <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e56:	4a39      	ldr	r2, [pc, #228]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	0392      	lsls	r2, r2, #14
 8000e5c:	d400      	bmi.n	8000e60 <HAL_RCC_OscConfig+0x24c>
 8000e5e:	e712      	b.n	8000c86 <HAL_RCC_OscConfig+0x72>
 8000e60:	6862      	ldr	r2, [r4, #4]
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d000      	beq.n	8000e68 <HAL_RCC_OscConfig+0x254>
 8000e66:	e70e      	b.n	8000c86 <HAL_RCC_OscConfig+0x72>
 8000e68:	e7dc      	b.n	8000e24 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6a:	25f8      	movs	r5, #248	; 0xf8
 8000e6c:	4833      	ldr	r0, [pc, #204]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000e6e:	6922      	ldr	r2, [r4, #16]
 8000e70:	6801      	ldr	r1, [r0, #0]
 8000e72:	00d2      	lsls	r2, r2, #3
 8000e74:	43a9      	bics	r1, r5
 8000e76:	430a      	orrs	r2, r1
 8000e78:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e7a:	071a      	lsls	r2, r3, #28
 8000e7c:	d400      	bmi.n	8000e80 <HAL_RCC_OscConfig+0x26c>
 8000e7e:	e731      	b.n	8000ce4 <HAL_RCC_OscConfig+0xd0>
 8000e80:	e7ae      	b.n	8000de0 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	4d2e      	ldr	r5, [pc, #184]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000e84:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <HAL_RCC_OscConfig+0x32c>)
 8000e86:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e88:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	602b      	str	r3, [r5, #0]
 8000e8e:	682b      	ldr	r3, [r5, #0]
 8000e90:	4a2c      	ldr	r2, [pc, #176]	; (8000f44 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e92:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e94:	4013      	ands	r3, r2
 8000e96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e98:	f7ff f9f4 	bl	8000284 <HAL_GetTick>
 8000e9c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9e:	e004      	b.n	8000eaa <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff f9f0 	bl	8000284 <HAL_GetTick>
 8000ea4:	1bc0      	subs	r0, r0, r7
 8000ea6:	2864      	cmp	r0, #100	; 0x64
 8000ea8:	d819      	bhi.n	8000ede <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	4233      	tst	r3, r6
 8000eae:	d1f7      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x28c>
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	e6e8      	b.n	8000c86 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb4:	6833      	ldr	r3, [r6, #0]
 8000eb6:	433b      	orrs	r3, r7
 8000eb8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000eba:	f7ff f9e3 	bl	8000284 <HAL_GetTick>
 8000ebe:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec0:	e004      	b.n	8000ecc <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ec2:	f7ff f9df 	bl	8000284 <HAL_GetTick>
 8000ec6:	1b40      	subs	r0, r0, r5
 8000ec8:	2864      	cmp	r0, #100	; 0x64
 8000eca:	d808      	bhi.n	8000ede <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ecc:	6833      	ldr	r3, [r6, #0]
 8000ece:	423b      	tst	r3, r7
 8000ed0:	d0f7      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x2ae>
 8000ed2:	e721      	b.n	8000d18 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed4:	4919      	ldr	r1, [pc, #100]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
 8000ed6:	6a0a      	ldr	r2, [r1, #32]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	620b      	str	r3, [r1, #32]
 8000edc:	e72f      	b.n	8000d3e <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8000ede:	2003      	movs	r0, #3
 8000ee0:	e779      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4e15      	ldr	r6, [pc, #84]	; (8000f3c <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee6:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee8:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	4d18      	ldr	r5, [pc, #96]	; (8000f4c <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eec:	4393      	bics	r3, r2
 8000eee:	6233      	str	r3, [r6, #32]
 8000ef0:	6a33      	ldr	r3, [r6, #32]
 8000ef2:	3203      	adds	r2, #3
 8000ef4:	4393      	bics	r3, r2
 8000ef6:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000ef8:	f7ff f9c4 	bl	8000284 <HAL_GetTick>
 8000efc:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efe:	e005      	b.n	8000f0c <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f00:	f7ff f9c0 	bl	8000284 <HAL_GetTick>
 8000f04:	464b      	mov	r3, r9
 8000f06:	1ac0      	subs	r0, r0, r3
 8000f08:	42a8      	cmp	r0, r5
 8000f0a:	d8e8      	bhi.n	8000ede <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f0c:	6a33      	ldr	r3, [r6, #32]
 8000f0e:	421f      	tst	r7, r3
 8000f10:	d1f6      	bne.n	8000f00 <HAL_RCC_OscConfig+0x2ec>
 8000f12:	e725      	b.n	8000d60 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8000f14:	2201      	movs	r2, #1
 8000f16:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f18:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000f1a:	4393      	bics	r3, r2
 8000f1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f1e:	f7ff f9b1 	bl	8000284 <HAL_GetTick>
 8000f22:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f24:	e004      	b.n	8000f30 <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff f9ad 	bl	8000284 <HAL_GetTick>
 8000f2a:	1bc0      	subs	r0, r0, r7
 8000f2c:	2802      	cmp	r0, #2
 8000f2e:	d8d6      	bhi.n	8000ede <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	421e      	tst	r6, r3
 8000f34:	d1f7      	bne.n	8000f26 <HAL_RCC_OscConfig+0x312>
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	e6d1      	b.n	8000cde <HAL_RCC_OscConfig+0xca>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	fffeffff 	.word	0xfffeffff
 8000f44:	fffbffff 	.word	0xfffbffff
 8000f48:	40007000 	.word	0x40007000
 8000f4c:	00001388 	.word	0x00001388
 8000f50:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	4a47      	ldr	r2, [pc, #284]	; (8001074 <HAL_RCC_OscConfig+0x460>)
 8000f58:	025b      	lsls	r3, r3, #9
 8000f5a:	6811      	ldr	r1, [r2, #0]
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e680      	b.n	8000c64 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f62:	2204      	movs	r2, #4
 8000f64:	4d43      	ldr	r5, [pc, #268]	; (8001074 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f66:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000f6e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f70:	3a03      	subs	r2, #3
 8000f72:	4393      	bics	r3, r2
 8000f74:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000f76:	f7ff f985 	bl	8000284 <HAL_GetTick>
 8000f7a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f7c:	e004      	b.n	8000f88 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f7e:	f7ff f981 	bl	8000284 <HAL_GetTick>
 8000f82:	1bc0      	subs	r0, r0, r7
 8000f84:	2802      	cmp	r0, #2
 8000f86:	d8aa      	bhi.n	8000ede <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f8a:	421e      	tst	r6, r3
 8000f8c:	d1f7      	bne.n	8000f7e <HAL_RCC_OscConfig+0x36a>
 8000f8e:	e701      	b.n	8000d94 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f90:	4a38      	ldr	r2, [pc, #224]	; (8001074 <HAL_RCC_OscConfig+0x460>)
 8000f92:	4939      	ldr	r1, [pc, #228]	; (8001078 <HAL_RCC_OscConfig+0x464>)
 8000f94:	69d3      	ldr	r3, [r2, #28]
 8000f96:	400b      	ands	r3, r1
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	e6e5      	b.n	8000d6a <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 8000f9e:	682b      	ldr	r3, [r5, #0]
 8000fa0:	4a36      	ldr	r2, [pc, #216]	; (800107c <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fa8:	f7ff f96c 	bl	8000284 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fac:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8000fae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb0:	e004      	b.n	8000fbc <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb2:	f7ff f967 	bl	8000284 <HAL_GetTick>
 8000fb6:	1bc0      	subs	r0, r0, r7
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d890      	bhi.n	8000ede <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	4233      	tst	r3, r6
 8000fc0:	d1f7      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000fc6:	4393      	bics	r3, r2
 8000fc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000fce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000fd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fd2:	686a      	ldr	r2, [r5, #4]
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	492a      	ldr	r1, [pc, #168]	; (8001080 <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fda:	400a      	ands	r2, r1
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	682a      	ldr	r2, [r5, #0]
 8000fe4:	045b      	lsls	r3, r3, #17
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fea:	f7ff f94b 	bl	8000284 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fee:	4d21      	ldr	r5, [pc, #132]	; (8001074 <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 8000ff0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff2:	04a4      	lsls	r4, r4, #18
 8000ff4:	e005      	b.n	8001002 <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff6:	f7ff f945 	bl	8000284 <HAL_GetTick>
 8000ffa:	1b80      	subs	r0, r0, r6
 8000ffc:	2802      	cmp	r0, #2
 8000ffe:	d900      	bls.n	8001002 <HAL_RCC_OscConfig+0x3ee>
 8001000:	e76d      	b.n	8000ede <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	4223      	tst	r3, r4
 8001006:	d0f6      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x3e2>
 8001008:	e6e4      	b.n	8000dd4 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_RCC_OscConfig+0x460>)
 800100e:	02d2      	lsls	r2, r2, #11
 8001010:	6819      	ldr	r1, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	0252      	lsls	r2, r2, #9
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e620      	b.n	8000c64 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001022:	2104      	movs	r1, #4
 8001024:	4d13      	ldr	r5, [pc, #76]	; (8001074 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001026:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001028:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800102a:	430a      	orrs	r2, r1
 800102c:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800102e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001030:	4313      	orrs	r3, r2
 8001032:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001034:	f7ff f926 	bl	8000284 <HAL_GetTick>
 8001038:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800103a:	e005      	b.n	8001048 <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800103c:	f7ff f922 	bl	8000284 <HAL_GetTick>
 8001040:	1bc0      	subs	r0, r0, r7
 8001042:	2802      	cmp	r0, #2
 8001044:	d900      	bls.n	8001048 <HAL_RCC_OscConfig+0x434>
 8001046:	e74a      	b.n	8000ede <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001048:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800104a:	421e      	tst	r6, r3
 800104c:	d0f6      	beq.n	800103c <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800104e:	21f8      	movs	r1, #248	; 0xf8
 8001050:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001052:	69a3      	ldr	r3, [r4, #24]
 8001054:	438a      	bics	r2, r1
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4313      	orrs	r3, r2
 800105a:	636b      	str	r3, [r5, #52]	; 0x34
 800105c:	e69a      	b.n	8000d94 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105e:	2104      	movs	r1, #4
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_RCC_OscConfig+0x460>)
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	430a      	orrs	r2, r1
 8001066:	621a      	str	r2, [r3, #32]
 8001068:	6a1a      	ldr	r2, [r3, #32]
 800106a:	3903      	subs	r1, #3
 800106c:	430a      	orrs	r2, r1
 800106e:	621a      	str	r2, [r3, #32]
 8001070:	e665      	b.n	8000d3e <HAL_RCC_OscConfig+0x12a>
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40021000 	.word	0x40021000
 8001078:	efffffff 	.word	0xefffffff
 800107c:	feffffff 	.word	0xfeffffff
 8001080:	ffc2ffff 	.word	0xffc2ffff

08001084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	46ce      	mov	lr, r9
 8001088:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800108a:	2201      	movs	r2, #1
{
 800108c:	b580      	push	{r7, lr}
 800108e:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001090:	495c      	ldr	r1, [pc, #368]	; (8001204 <HAL_RCC_ClockConfig+0x180>)
{
 8001092:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001094:	680b      	ldr	r3, [r1, #0]
{
 8001096:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001098:	4013      	ands	r3, r2
 800109a:	42a3      	cmp	r3, r4
 800109c:	d20d      	bcs.n	80010ba <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	680b      	ldr	r3, [r1, #0]
 80010a0:	4393      	bics	r3, r2
 80010a2:	4323      	orrs	r3, r4
 80010a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010a6:	680b      	ldr	r3, [r1, #0]
 80010a8:	401a      	ands	r2, r3
 80010aa:	4294      	cmp	r4, r2
 80010ac:	d005      	beq.n	80010ba <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 80010ae:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80010b0:	b009      	add	sp, #36	; 0x24
 80010b2:	bc0c      	pop	{r2, r3}
 80010b4:	4690      	mov	r8, r2
 80010b6:	4699      	mov	r9, r3
 80010b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ba:	682b      	ldr	r3, [r5, #0]
 80010bc:	079a      	lsls	r2, r3, #30
 80010be:	d506      	bpl.n	80010ce <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c0:	20f0      	movs	r0, #240	; 0xf0
 80010c2:	4951      	ldr	r1, [pc, #324]	; (8001208 <HAL_RCC_ClockConfig+0x184>)
 80010c4:	684a      	ldr	r2, [r1, #4]
 80010c6:	4382      	bics	r2, r0
 80010c8:	68a8      	ldr	r0, [r5, #8]
 80010ca:	4302      	orrs	r2, r0
 80010cc:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ce:	07db      	lsls	r3, r3, #31
 80010d0:	d524      	bpl.n	800111c <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d4:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d8:	2a01      	cmp	r2, #1
 80010da:	d06a      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010dc:	2a02      	cmp	r2, #2
 80010de:	d063      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e0:	079b      	lsls	r3, r3, #30
 80010e2:	d5e4      	bpl.n	80010ae <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e4:	2103      	movs	r1, #3
 80010e6:	4e48      	ldr	r6, [pc, #288]	; (8001208 <HAL_RCC_ClockConfig+0x184>)
 80010e8:	6873      	ldr	r3, [r6, #4]
 80010ea:	438b      	bics	r3, r1
 80010ec:	4313      	orrs	r3, r2
 80010ee:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80010f0:	f7ff f8c8 	bl	8000284 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80010f6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d05d      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d06b      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001100:	230c      	movs	r3, #12
 8001102:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001104:	4b41      	ldr	r3, [pc, #260]	; (800120c <HAL_RCC_ClockConfig+0x188>)
 8001106:	4699      	mov	r9, r3
 8001108:	e004      	b.n	8001114 <HAL_RCC_ClockConfig+0x90>
 800110a:	f7ff f8bb 	bl	8000284 <HAL_GetTick>
 800110e:	1bc0      	subs	r0, r0, r7
 8001110:	4548      	cmp	r0, r9
 8001112:	d84c      	bhi.n	80011ae <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001114:	4642      	mov	r2, r8
 8001116:	6873      	ldr	r3, [r6, #4]
 8001118:	421a      	tst	r2, r3
 800111a:	d1f6      	bne.n	800110a <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800111c:	2101      	movs	r1, #1
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <HAL_RCC_ClockConfig+0x180>)
 8001120:	6813      	ldr	r3, [r2, #0]
 8001122:	400b      	ands	r3, r1
 8001124:	429c      	cmp	r4, r3
 8001126:	d205      	bcs.n	8001134 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001128:	6813      	ldr	r3, [r2, #0]
 800112a:	438b      	bics	r3, r1
 800112c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800112e:	6813      	ldr	r3, [r2, #0]
 8001130:	4219      	tst	r1, r3
 8001132:	d1bc      	bne.n	80010ae <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001134:	682b      	ldr	r3, [r5, #0]
 8001136:	075b      	lsls	r3, r3, #29
 8001138:	d506      	bpl.n	8001148 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800113a:	4a33      	ldr	r2, [pc, #204]	; (8001208 <HAL_RCC_ClockConfig+0x184>)
 800113c:	4934      	ldr	r1, [pc, #208]	; (8001210 <HAL_RCC_ClockConfig+0x18c>)
 800113e:	6853      	ldr	r3, [r2, #4]
 8001140:	400b      	ands	r3, r1
 8001142:	68e9      	ldr	r1, [r5, #12]
 8001144:	430b      	orrs	r3, r1
 8001146:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001148:	4b32      	ldr	r3, [pc, #200]	; (8001214 <HAL_RCC_ClockConfig+0x190>)
 800114a:	466a      	mov	r2, sp
 800114c:	0018      	movs	r0, r3
 800114e:	c870      	ldmia	r0!, {r4, r5, r6}
 8001150:	c270      	stmia	r2!, {r4, r5, r6}
 8001152:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001154:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001156:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001158:	aa04      	add	r2, sp, #16
 800115a:	0010      	movs	r0, r2
 800115c:	cb70      	ldmia	r3!, {r4, r5, r6}
 800115e:	c070      	stmia	r0!, {r4, r5, r6}
 8001160:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001162:	4d29      	ldr	r5, [pc, #164]	; (8001208 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001164:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001166:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001168:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800116a:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 800116c:	4003      	ands	r3, r0
 800116e:	2b08      	cmp	r3, #8
 8001170:	d10b      	bne.n	800118a <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001172:	3307      	adds	r3, #7
 8001174:	0c84      	lsrs	r4, r0, #18
 8001176:	401c      	ands	r4, r3
 8001178:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800117a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800117c:	400b      	ands	r3, r1
 800117e:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001180:	03c3      	lsls	r3, r0, #15
 8001182:	d439      	bmi.n	80011f8 <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001184:	4824      	ldr	r0, [pc, #144]	; (8001218 <HAL_RCC_ClockConfig+0x194>)
 8001186:	4360      	muls	r0, r4
 8001188:	e000      	b.n	800118c <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 800118a:	4824      	ldr	r0, [pc, #144]	; (800121c <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <HAL_RCC_ClockConfig+0x184>)
 800118e:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_RCC_ClockConfig+0x19c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	061b      	lsls	r3, r3, #24
 8001194:	0f1b      	lsrs	r3, r3, #28
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	40d8      	lsrs	r0, r3
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_RCC_ClockConfig+0x1a0>)
 800119c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff f846 	bl	8000230 <HAL_InitTick>
  return HAL_OK;
 80011a4:	2000      	movs	r0, #0
 80011a6:	e783      	b.n	80010b0 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	d49b      	bmi.n	80010e4 <HAL_RCC_ClockConfig+0x60>
 80011ac:	e77f      	b.n	80010ae <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 80011ae:	2003      	movs	r0, #3
 80011b0:	e77e      	b.n	80010b0 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	039b      	lsls	r3, r3, #14
 80011b4:	d496      	bmi.n	80010e4 <HAL_RCC_ClockConfig+0x60>
 80011b6:	e77a      	b.n	80010ae <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b8:	330b      	adds	r3, #11
 80011ba:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_RCC_ClockConfig+0x188>)
 80011be:	4699      	mov	r9, r3
 80011c0:	e004      	b.n	80011cc <HAL_RCC_ClockConfig+0x148>
 80011c2:	f7ff f85f 	bl	8000284 <HAL_GetTick>
 80011c6:	1bc0      	subs	r0, r0, r7
 80011c8:	4548      	cmp	r0, r9
 80011ca:	d8f0      	bhi.n	80011ae <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011cc:	4642      	mov	r2, r8
 80011ce:	6873      	ldr	r3, [r6, #4]
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d1f5      	bne.n	80011c2 <HAL_RCC_ClockConfig+0x13e>
 80011d6:	e7a1      	b.n	800111c <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d8:	330a      	adds	r3, #10
 80011da:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_RCC_ClockConfig+0x188>)
 80011de:	4699      	mov	r9, r3
 80011e0:	e004      	b.n	80011ec <HAL_RCC_ClockConfig+0x168>
 80011e2:	f7ff f84f 	bl	8000284 <HAL_GetTick>
 80011e6:	1bc0      	subs	r0, r0, r7
 80011e8:	4548      	cmp	r0, r9
 80011ea:	d8e0      	bhi.n	80011ae <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ec:	4642      	mov	r2, r8
 80011ee:	6873      	ldr	r3, [r6, #4]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d1f5      	bne.n	80011e2 <HAL_RCC_ClockConfig+0x15e>
 80011f6:	e791      	b.n	800111c <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <HAL_RCC_ClockConfig+0x198>)
 80011fa:	f7fe ff8d 	bl	8000118 <__udivsi3>
 80011fe:	4360      	muls	r0, r4
 8001200:	e7c4      	b.n	800118c <HAL_RCC_ClockConfig+0x108>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	40022000 	.word	0x40022000
 8001208:	40021000 	.word	0x40021000
 800120c:	00001388 	.word	0x00001388
 8001210:	fffff8ff 	.word	0xfffff8ff
 8001214:	0800370c 	.word	0x0800370c
 8001218:	003d0900 	.word	0x003d0900
 800121c:	007a1200 	.word	0x007a1200
 8001220:	08003754 	.word	0x08003754
 8001224:	20000000 	.word	0x20000000

08001228 <HAL_RCC_GetSysClockFreq>:
{
 8001228:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_RCC_GetSysClockFreq+0x58>)
{
 800122c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800122e:	0018      	movs	r0, r3
 8001230:	466a      	mov	r2, sp
 8001232:	c870      	ldmia	r0!, {r4, r5, r6}
 8001234:	c270      	stmia	r2!, {r4, r5, r6}
 8001236:	6800      	ldr	r0, [r0, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001238:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800123a:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800123c:	aa04      	add	r2, sp, #16
 800123e:	0010      	movs	r0, r2
 8001240:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001242:	c070      	stmia	r0!, {r4, r5, r6}
 8001244:	681b      	ldr	r3, [r3, #0]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001246:	4669      	mov	r1, sp
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001248:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 800124a:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <HAL_RCC_GetSysClockFreq+0x5c>)
 800124e:	6844      	ldr	r4, [r0, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001250:	4023      	ands	r3, r4
 8001252:	2b08      	cmp	r3, #8
 8001254:	d10b      	bne.n	800126e <HAL_RCC_GetSysClockFreq+0x46>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001256:	3307      	adds	r3, #7
 8001258:	0ca5      	lsrs	r5, r4, #18
 800125a:	401d      	ands	r5, r3
 800125c:	5d4d      	ldrb	r5, [r1, r5]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800125e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001260:	400b      	ands	r3, r1
 8001262:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001264:	03e3      	lsls	r3, r4, #15
 8001266:	d405      	bmi.n	8001274 <HAL_RCC_GetSysClockFreq+0x4c>
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <HAL_RCC_GetSysClockFreq+0x60>)
 800126a:	4368      	muls	r0, r5
 800126c:	e000      	b.n	8001270 <HAL_RCC_GetSysClockFreq+0x48>
      sysclockfreq = HSE_VALUE;
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001270:	b008      	add	sp, #32
 8001272:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_RCC_GetSysClockFreq+0x64>)
 8001276:	f7fe ff4f 	bl	8000118 <__udivsi3>
 800127a:	4368      	muls	r0, r5
 800127c:	e7f8      	b.n	8001270 <HAL_RCC_GetSysClockFreq+0x48>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	0800370c 	.word	0x0800370c
 8001284:	40021000 	.word	0x40021000
 8001288:	003d0900 	.word	0x003d0900
 800128c:	007a1200 	.word	0x007a1200

08001290 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001290:	4b01      	ldr	r3, [pc, #4]	; (8001298 <HAL_RCC_GetHCLKFreq+0x8>)
 8001292:	6818      	ldr	r0, [r3, #0]
}
 8001294:	4770      	bx	lr
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	20000000 	.word	0x20000000

0800129c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	055b      	lsls	r3, r3, #21
 80012a4:	0f5b      	lsrs	r3, r3, #29
 80012a6:	5cd3      	ldrb	r3, [r2, r3]
 80012a8:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012aa:	6810      	ldr	r0, [r2, #0]
 80012ac:	40d8      	lsrs	r0, r3
}    
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	08003764 	.word	0x08003764
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	46ce      	mov	lr, r9
 80012c0:	4647      	mov	r7, r8
 80012c2:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012c4:	6803      	ldr	r3, [r0, #0]
{
 80012c6:	b083      	sub	sp, #12
 80012c8:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012ca:	03da      	lsls	r2, r3, #15
 80012cc:	d539      	bpl.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ce:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80012d0:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80012d4:	0552      	lsls	r2, r2, #21
 80012d6:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80012d8:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4211      	tst	r1, r2
 80012dc:	d108      	bne.n	80012f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	69d9      	ldr	r1, [r3, #28]
 80012e0:	4311      	orrs	r1, r2
 80012e2:	61d9      	str	r1, [r3, #28]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	401a      	ands	r2, r3
 80012e8:	9201      	str	r2, [sp, #4]
 80012ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012ec:	2301      	movs	r3, #1
 80012ee:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	2680      	movs	r6, #128	; 0x80
 80012f2:	4d36      	ldr	r5, [pc, #216]	; (80013cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80012f4:	0076      	lsls	r6, r6, #1
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	4233      	tst	r3, r6
 80012fa:	d04c      	beq.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0xda>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012fc:	21c0      	movs	r1, #192	; 0xc0
 80012fe:	4d32      	ldr	r5, [pc, #200]	; (80013c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001300:	0089      	lsls	r1, r1, #2
 8001302:	6a2a      	ldr	r2, [r5, #32]
 8001304:	400a      	ands	r2, r1
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001306:	d044      	beq.n	8001392 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8001308:	6860      	ldr	r0, [r4, #4]
 800130a:	4001      	ands	r1, r0
 800130c:	428a      	cmp	r2, r1
 800130e:	d00e      	beq.n	800132e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001310:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001312:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001314:	6a2e      	ldr	r6, [r5, #32]
 8001316:	0252      	lsls	r2, r2, #9
 8001318:	4332      	orrs	r2, r6
 800131a:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800131c:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001320:	4e2c      	ldr	r6, [pc, #176]	; (80013d4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001322:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001324:	4032      	ands	r2, r6
 8001326:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001328:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800132a:	07cb      	lsls	r3, r1, #31
 800132c:	d422      	bmi.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0xb8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800132e:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001330:	4927      	ldr	r1, [pc, #156]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001332:	6a13      	ldr	r3, [r2, #32]
 8001334:	400b      	ands	r3, r1
 8001336:	4303      	orrs	r3, r0
 8001338:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800133a:	4643      	mov	r3, r8
 800133c:	2b01      	cmp	r3, #1
 800133e:	d03a      	beq.n	80013b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001340:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001342:	07da      	lsls	r2, r3, #31
 8001344:	d40e      	bmi.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001346:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001348:	069b      	lsls	r3, r3, #26
 800134a:	d506      	bpl.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800134c:	2110      	movs	r1, #16
 800134e:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001350:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001352:	438b      	bics	r3, r1
 8001354:	68e1      	ldr	r1, [r4, #12]
 8001356:	430b      	orrs	r3, r1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
}
 800135a:	b003      	add	sp, #12
 800135c:	bc0c      	pop	{r2, r3}
 800135e:	4690      	mov	r8, r2
 8001360:	4699      	mov	r9, r3
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001364:	2003      	movs	r0, #3
 8001366:	4918      	ldr	r1, [pc, #96]	; (80013c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001368:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800136a:	4382      	bics	r2, r0
 800136c:	68a0      	ldr	r0, [r4, #8]
 800136e:	4302      	orrs	r2, r0
 8001370:	630a      	str	r2, [r1, #48]	; 0x30
 8001372:	e7e8      	b.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        tickstart = HAL_GetTick();
 8001374:	f7fe ff86 	bl	8000284 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
        tickstart = HAL_GetTick();
 800137a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137c:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	e004      	b.n	800138c <HAL_RCCEx_PeriphCLKConfig+0xd0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7fe ff7f 	bl	8000284 <HAL_GetTick>
 8001386:	1bc0      	subs	r0, r0, r7
 8001388:	4548      	cmp	r0, r9
 800138a:	d81a      	bhi.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	6a2b      	ldr	r3, [r5, #32]
 800138e:	421e      	tst	r6, r3
 8001390:	d0f7      	beq.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8001392:	6860      	ldr	r0, [r4, #4]
 8001394:	e7cb      	b.n	800132e <HAL_RCCEx_PeriphCLKConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	4333      	orrs	r3, r6
 800139a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800139c:	f7fe ff72 	bl	8000284 <HAL_GetTick>
 80013a0:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	e004      	b.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0xf2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a4:	f7fe ff6e 	bl	8000284 <HAL_GetTick>
 80013a8:	1bc0      	subs	r0, r0, r7
 80013aa:	2864      	cmp	r0, #100	; 0x64
 80013ac:	d809      	bhi.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	682b      	ldr	r3, [r5, #0]
 80013b0:	4233      	tst	r3, r6
 80013b2:	d0f7      	beq.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80013b4:	e7a2      	b.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b6:	69d3      	ldr	r3, [r2, #28]
 80013b8:	4908      	ldr	r1, [pc, #32]	; (80013dc <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80013ba:	400b      	ands	r3, r1
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	e7bf      	b.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x86>
          return HAL_TIMEOUT;
 80013c2:	2003      	movs	r0, #3
 80013c4:	e7c9      	b.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40007000 	.word	0x40007000
 80013d0:	fffffcff 	.word	0xfffffcff
 80013d4:	fffeffff 	.word	0xfffeffff
 80013d8:	00001388 	.word	0x00001388
 80013dc:	efffffff 	.word	0xefffffff

080013e0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013e0:	b510      	push	{r4, lr}
 80013e2:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80013e4:	d049      	beq.n	800147a <HAL_TIM_Base_Init+0x9a>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80013e6:	233d      	movs	r3, #61	; 0x3d
 80013e8:	5cc3      	ldrb	r3, [r0, r3]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d036      	beq.n	800145e <HAL_TIM_Base_Init+0x7e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80013f0:	2202      	movs	r2, #2
 80013f2:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013f4:	4922      	ldr	r1, [pc, #136]	; (8001480 <HAL_TIM_Base_Init+0xa0>)
  htim->State= HAL_TIM_STATE_BUSY;
 80013f6:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f8:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 80013fa:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013fc:	428b      	cmp	r3, r1
 80013fe:	d01a      	beq.n	8001436 <HAL_TIM_Base_Init+0x56>
 8001400:	4920      	ldr	r1, [pc, #128]	; (8001484 <HAL_TIM_Base_Init+0xa4>)
 8001402:	428b      	cmp	r3, r1
 8001404:	d030      	beq.n	8001468 <HAL_TIM_Base_Init+0x88>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001406:	4920      	ldr	r1, [pc, #128]	; (8001488 <HAL_TIM_Base_Init+0xa8>)
 8001408:	428b      	cmp	r3, r1
 800140a:	d031      	beq.n	8001470 <HAL_TIM_Base_Init+0x90>
 800140c:	491f      	ldr	r1, [pc, #124]	; (800148c <HAL_TIM_Base_Init+0xac>)
 800140e:	428b      	cmp	r3, r1
 8001410:	d015      	beq.n	800143e <HAL_TIM_Base_Init+0x5e>
 8001412:	491f      	ldr	r1, [pc, #124]	; (8001490 <HAL_TIM_Base_Init+0xb0>)
 8001414:	428b      	cmp	r3, r1
 8001416:	d012      	beq.n	800143e <HAL_TIM_Base_Init+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	438a      	bics	r2, r1
 800141c:	69a1      	ldr	r1, [r4, #24]
 800141e:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 8001420:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001422:	68e2      	ldr	r2, [r4, #12]
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001426:	6862      	ldr	r2, [r4, #4]
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800142a:	2201      	movs	r2, #1
 800142c:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 800142e:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001430:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001432:	54e2      	strb	r2, [r4, r3]
}
 8001434:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001436:	2170      	movs	r1, #112	; 0x70
 8001438:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800143a:	68a1      	ldr	r1, [r4, #8]
 800143c:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800143e:	4915      	ldr	r1, [pc, #84]	; (8001494 <HAL_TIM_Base_Init+0xb4>)
 8001440:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001442:	6921      	ldr	r1, [r4, #16]
 8001444:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	438a      	bics	r2, r1
 800144a:	69a1      	ldr	r1, [r4, #24]
 800144c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800144e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001450:	68e2      	ldr	r2, [r4, #12]
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001454:	6862      	ldr	r2, [r4, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001458:	6962      	ldr	r2, [r4, #20]
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
 800145c:	e7e5      	b.n	800142a <HAL_TIM_Base_Init+0x4a>
    htim->Lock = HAL_UNLOCKED;
 800145e:	223c      	movs	r2, #60	; 0x3c
 8001460:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8001462:	f001 f97d 	bl	8002760 <HAL_TIM_Base_MspInit>
 8001466:	e7c3      	b.n	80013f0 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001468:	2170      	movs	r1, #112	; 0x70
 800146a:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800146c:	68a1      	ldr	r1, [r4, #8]
 800146e:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001470:	4908      	ldr	r1, [pc, #32]	; (8001494 <HAL_TIM_Base_Init+0xb4>)
 8001472:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001474:	6921      	ldr	r1, [r4, #16]
 8001476:	430a      	orrs	r2, r1
 8001478:	e7ce      	b.n	8001418 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	e7da      	b.n	8001434 <HAL_TIM_Base_Init+0x54>
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	40012c00 	.word	0x40012c00
 8001484:	40000400 	.word	0x40000400
 8001488:	40002000 	.word	0x40002000
 800148c:	40014400 	.word	0x40014400
 8001490:	40014800 	.word	0x40014800
 8001494:	fffffcff 	.word	0xfffffcff

08001498 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001498:	6803      	ldr	r3, [r0, #0]
 800149a:	2001      	movs	r0, #1
 800149c:	68d9      	ldr	r1, [r3, #12]
 800149e:	4301      	orrs	r1, r0
 80014a0:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4302      	orrs	r2, r0
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	2000      	movs	r0, #0
 80014aa:	4770      	bx	lr

080014ac <HAL_TIM_PWM_Init>:
{
 80014ac:	b510      	push	{r4, lr}
 80014ae:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80014b0:	d049      	beq.n	8001546 <HAL_TIM_PWM_Init+0x9a>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014b2:	233d      	movs	r3, #61	; 0x3d
 80014b4:	5cc3      	ldrb	r3, [r0, r3]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d036      	beq.n	800152a <HAL_TIM_PWM_Init+0x7e>
  htim->State= HAL_TIM_STATE_BUSY;
 80014bc:	2202      	movs	r2, #2
 80014be:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014c0:	4922      	ldr	r1, [pc, #136]	; (800154c <HAL_TIM_PWM_Init+0xa0>)
  htim->State= HAL_TIM_STATE_BUSY;
 80014c2:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014c4:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 80014c6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014c8:	428b      	cmp	r3, r1
 80014ca:	d01a      	beq.n	8001502 <HAL_TIM_PWM_Init+0x56>
 80014cc:	4920      	ldr	r1, [pc, #128]	; (8001550 <HAL_TIM_PWM_Init+0xa4>)
 80014ce:	428b      	cmp	r3, r1
 80014d0:	d030      	beq.n	8001534 <HAL_TIM_PWM_Init+0x88>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014d2:	4920      	ldr	r1, [pc, #128]	; (8001554 <HAL_TIM_PWM_Init+0xa8>)
 80014d4:	428b      	cmp	r3, r1
 80014d6:	d031      	beq.n	800153c <HAL_TIM_PWM_Init+0x90>
 80014d8:	491f      	ldr	r1, [pc, #124]	; (8001558 <HAL_TIM_PWM_Init+0xac>)
 80014da:	428b      	cmp	r3, r1
 80014dc:	d015      	beq.n	800150a <HAL_TIM_PWM_Init+0x5e>
 80014de:	491f      	ldr	r1, [pc, #124]	; (800155c <HAL_TIM_PWM_Init+0xb0>)
 80014e0:	428b      	cmp	r3, r1
 80014e2:	d012      	beq.n	800150a <HAL_TIM_PWM_Init+0x5e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	438a      	bics	r2, r1
 80014e8:	69a1      	ldr	r1, [r4, #24]
 80014ea:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80014ec:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014ee:	68e2      	ldr	r2, [r4, #12]
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80014f2:	6862      	ldr	r2, [r4, #4]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80014f6:	2201      	movs	r2, #1
 80014f8:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 80014fa:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 80014fc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80014fe:	54e2      	strb	r2, [r4, r3]
}
 8001500:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001502:	2170      	movs	r1, #112	; 0x70
 8001504:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001506:	68a1      	ldr	r1, [r4, #8]
 8001508:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800150a:	4915      	ldr	r1, [pc, #84]	; (8001560 <HAL_TIM_PWM_Init+0xb4>)
 800150c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800150e:	6921      	ldr	r1, [r4, #16]
 8001510:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	438a      	bics	r2, r1
 8001516:	69a1      	ldr	r1, [r4, #24]
 8001518:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800151a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800151c:	68e2      	ldr	r2, [r4, #12]
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001520:	6862      	ldr	r2, [r4, #4]
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001524:	6962      	ldr	r2, [r4, #20]
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
 8001528:	e7e5      	b.n	80014f6 <HAL_TIM_PWM_Init+0x4a>
    htim->Lock = HAL_UNLOCKED;
 800152a:	223c      	movs	r2, #60	; 0x3c
 800152c:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 800152e:	f001 f8f9 	bl	8002724 <HAL_TIM_PWM_MspInit>
 8001532:	e7c3      	b.n	80014bc <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001534:	2170      	movs	r1, #112	; 0x70
 8001536:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001538:	68a1      	ldr	r1, [r4, #8]
 800153a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800153c:	4908      	ldr	r1, [pc, #32]	; (8001560 <HAL_TIM_PWM_Init+0xb4>)
 800153e:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001540:	6921      	ldr	r1, [r4, #16]
 8001542:	430a      	orrs	r2, r1
 8001544:	e7ce      	b.n	80014e4 <HAL_TIM_PWM_Init+0x38>
    return HAL_ERROR;
 8001546:	2001      	movs	r0, #1
 8001548:	e7da      	b.n	8001500 <HAL_TIM_PWM_Init+0x54>
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40012c00 	.word	0x40012c00
 8001550:	40000400 	.word	0x40000400
 8001554:	40002000 	.word	0x40002000
 8001558:	40014400 	.word	0x40014400
 800155c:	40014800 	.word	0x40014800
 8001560:	fffffcff 	.word	0xfffffcff

08001564 <HAL_TIM_PWM_Start_IT>:
  switch (Channel)
 8001564:	2904      	cmp	r1, #4
 8001566:	d020      	beq.n	80015aa <HAL_TIM_PWM_Start_IT+0x46>
 8001568:	d92a      	bls.n	80015c0 <HAL_TIM_PWM_Start_IT+0x5c>
 800156a:	2908      	cmp	r1, #8
 800156c:	d01d      	beq.n	80015aa <HAL_TIM_PWM_Start_IT+0x46>
 800156e:	290c      	cmp	r1, #12
 8001570:	d12e      	bne.n	80015d0 <HAL_TIM_PWM_Start_IT+0x6c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001572:	6803      	ldr	r3, [r0, #0]
 8001574:	2010      	movs	r0, #16
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	4302      	orrs	r2, r0
 800157a:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800157c:	2201      	movs	r2, #1
 800157e:	408a      	lsls	r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001580:	6a19      	ldr	r1, [r3, #32]
 8001582:	4391      	bics	r1, r2
 8001584:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001586:	6a19      	ldr	r1, [r3, #32]
 8001588:	430a      	orrs	r2, r1
 800158a:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800158c:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <HAL_TIM_PWM_Start_IT+0x70>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d010      	beq.n	80015b4 <HAL_TIM_PWM_Start_IT+0x50>
 8001592:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_TIM_PWM_Start_IT+0x74>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d00d      	beq.n	80015b4 <HAL_TIM_PWM_Start_IT+0x50>
 8001598:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_TIM_PWM_Start_IT+0x78>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d00a      	beq.n	80015b4 <HAL_TIM_PWM_Start_IT+0x50>
  __HAL_TIM_ENABLE(htim);
 800159e:	2101      	movs	r1, #1
 80015a0:	681a      	ldr	r2, [r3, #0]
}
 80015a2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80015aa:	6803      	ldr	r3, [r0, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	60da      	str	r2, [r3, #12]
    break;
 80015b2:	e7e3      	b.n	800157c <HAL_TIM_PWM_Start_IT+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015b8:	0212      	lsls	r2, r2, #8
 80015ba:	430a      	orrs	r2, r1
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
 80015be:	e7ee      	b.n	800159e <HAL_TIM_PWM_Start_IT+0x3a>
  switch (Channel)
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d105      	bne.n	80015d0 <HAL_TIM_PWM_Start_IT+0x6c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80015c4:	6803      	ldr	r3, [r0, #0]
 80015c6:	2002      	movs	r0, #2
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	4302      	orrs	r2, r0
 80015cc:	60da      	str	r2, [r3, #12]
    break;
 80015ce:	e7d5      	b.n	800157c <HAL_TIM_PWM_Start_IT+0x18>
 80015d0:	6803      	ldr	r3, [r0, #0]
 80015d2:	e7d3      	b.n	800157c <HAL_TIM_PWM_Start_IT+0x18>
 80015d4:	40012c00 	.word	0x40012c00
 80015d8:	40014400 	.word	0x40014400
 80015dc:	40014800 	.word	0x40014800

080015e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80015e2:	243c      	movs	r4, #60	; 0x3c
 80015e4:	5d05      	ldrb	r5, [r0, r4]
{
 80015e6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80015e8:	2002      	movs	r0, #2
 80015ea:	2d01      	cmp	r5, #1
 80015ec:	d044      	beq.n	8001678 <HAL_TIM_PWM_ConfigChannel+0x98>
 80015ee:	2501      	movs	r5, #1
 80015f0:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 80015f2:	3401      	adds	r4, #1
 80015f4:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 80015f6:	2a04      	cmp	r2, #4
 80015f8:	d100      	bne.n	80015fc <HAL_TIM_PWM_ConfigChannel+0x1c>
 80015fa:	e06d      	b.n	80016d8 <HAL_TIM_PWM_ConfigChannel+0xf8>
 80015fc:	d800      	bhi.n	8001600 <HAL_TIM_PWM_ConfigChannel+0x20>
 80015fe:	e09a      	b.n	8001736 <HAL_TIM_PWM_ConfigChannel+0x156>
 8001600:	2a08      	cmp	r2, #8
 8001602:	d03a      	beq.n	800167a <HAL_TIM_PWM_ConfigChannel+0x9a>
 8001604:	2a0c      	cmp	r2, #12
 8001606:	d130      	bne.n	800166a <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001608:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800160a:	4c7a      	ldr	r4, [pc, #488]	; (80017f4 <HAL_TIM_PWM_ConfigChannel+0x214>)
 800160c:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800160e:	4d7a      	ldr	r5, [pc, #488]	; (80017f8 <HAL_TIM_PWM_ConfigChannel+0x218>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001610:	4020      	ands	r0, r4
 8001612:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001614:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001616:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001618:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800161a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800161c:	680d      	ldr	r5, [r1, #0]
 800161e:	022d      	lsls	r5, r5, #8
 8001620:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8001622:	4c76      	ldr	r4, [pc, #472]	; (80017fc <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8001624:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001626:	6888      	ldr	r0, [r1, #8]
 8001628:	0300      	lsls	r0, r0, #12
 800162a:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800162c:	4c74      	ldr	r4, [pc, #464]	; (8001800 <HAL_TIM_PWM_ConfigChannel+0x220>)
 800162e:	42a2      	cmp	r2, r4
 8001630:	d100      	bne.n	8001634 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001632:	e0ac      	b.n	800178e <HAL_TIM_PWM_ConfigChannel+0x1ae>
 8001634:	4c73      	ldr	r4, [pc, #460]	; (8001804 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8001636:	42a2      	cmp	r2, r4
 8001638:	d100      	bne.n	800163c <HAL_TIM_PWM_ConfigChannel+0x5c>
 800163a:	e0a8      	b.n	800178e <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800163c:	4c72      	ldr	r4, [pc, #456]	; (8001808 <HAL_TIM_PWM_ConfigChannel+0x228>)
 800163e:	42a2      	cmp	r2, r4
 8001640:	d100      	bne.n	8001644 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001642:	e0a4      	b.n	800178e <HAL_TIM_PWM_ConfigChannel+0x1ae>
  TIMx->CCR4 = OC_Config->Pulse;
 8001644:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001646:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001648:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800164a:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800164c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800164e:	2080      	movs	r0, #128	; 0x80
 8001650:	69d4      	ldr	r4, [r2, #28]
 8001652:	0100      	lsls	r0, r0, #4
 8001654:	4320      	orrs	r0, r4
 8001656:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001658:	69d0      	ldr	r0, [r2, #28]
 800165a:	4c6c      	ldr	r4, [pc, #432]	; (800180c <HAL_TIM_PWM_ConfigChannel+0x22c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800165c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800165e:	4020      	ands	r0, r4
 8001660:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001662:	69d0      	ldr	r0, [r2, #28]
 8001664:	0209      	lsls	r1, r1, #8
 8001666:	4301      	orrs	r1, r0
 8001668:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800166a:	2101      	movs	r1, #1
 800166c:	223d      	movs	r2, #61	; 0x3d
 800166e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001670:	2100      	movs	r1, #0
  return HAL_OK;
 8001672:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001674:	3a01      	subs	r2, #1
 8001676:	5499      	strb	r1, [r3, r2]
}
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800167a:	2573      	movs	r5, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800167c:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800167e:	4c64      	ldr	r4, [pc, #400]	; (8001810 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8001680:	6a10      	ldr	r0, [r2, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001682:	4f5f      	ldr	r7, [pc, #380]	; (8001800 <HAL_TIM_PWM_ConfigChannel+0x220>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001684:	4020      	ands	r0, r4
 8001686:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001688:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800168a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800168c:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800168e:	43ac      	bics	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 8001690:	680d      	ldr	r5, [r1, #0]
 8001692:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001694:	4c5f      	ldr	r4, [pc, #380]	; (8001814 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8001696:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001698:	688c      	ldr	r4, [r1, #8]
 800169a:	0224      	lsls	r4, r4, #8
 800169c:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800169e:	42ba      	cmp	r2, r7
 80016a0:	d100      	bne.n	80016a4 <HAL_TIM_PWM_ConfigChannel+0xc4>
 80016a2:	e08a      	b.n	80017ba <HAL_TIM_PWM_ConfigChannel+0x1da>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016a4:	4f57      	ldr	r7, [pc, #348]	; (8001804 <HAL_TIM_PWM_ConfigChannel+0x224>)
 80016a6:	42ba      	cmp	r2, r7
 80016a8:	d100      	bne.n	80016ac <HAL_TIM_PWM_ConfigChannel+0xcc>
 80016aa:	e08d      	b.n	80017c8 <HAL_TIM_PWM_ConfigChannel+0x1e8>
 80016ac:	4f56      	ldr	r7, [pc, #344]	; (8001808 <HAL_TIM_PWM_ConfigChannel+0x228>)
 80016ae:	42ba      	cmp	r2, r7
 80016b0:	d100      	bne.n	80016b4 <HAL_TIM_PWM_ConfigChannel+0xd4>
 80016b2:	e089      	b.n	80017c8 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CCR3 = OC_Config->Pulse;
 80016b4:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80016b6:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80016b8:	61d5      	str	r5, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80016ba:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016bc:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 80016be:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016c0:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016c4:	4320      	orrs	r0, r4
 80016c6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80016c8:	69d0      	ldr	r0, [r2, #28]
 80016ca:	3c04      	subs	r4, #4
 80016cc:	43a0      	bics	r0, r4
 80016ce:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016d0:	69d0      	ldr	r0, [r2, #28]
 80016d2:	4301      	orrs	r1, r0
 80016d4:	61d1      	str	r1, [r2, #28]
    break;
 80016d6:	e7c8      	b.n	800166a <HAL_TIM_PWM_ConfigChannel+0x8a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016d8:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80016da:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80016dc:	4d46      	ldr	r5, [pc, #280]	; (80017f8 <HAL_TIM_PWM_ConfigChannel+0x218>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016de:	6a10      	ldr	r0, [r2, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016e0:	4f47      	ldr	r7, [pc, #284]	; (8001800 <HAL_TIM_PWM_ConfigChannel+0x220>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016e2:	43a0      	bics	r0, r4
 80016e4:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80016e6:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80016e8:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80016ea:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80016ec:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016ee:	680d      	ldr	r5, [r1, #0]
 80016f0:	022d      	lsls	r5, r5, #8
 80016f2:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80016f4:	2420      	movs	r4, #32
 80016f6:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016f8:	688c      	ldr	r4, [r1, #8]
 80016fa:	0124      	lsls	r4, r4, #4
 80016fc:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016fe:	42ba      	cmp	r2, r7
 8001700:	d04b      	beq.n	800179a <HAL_TIM_PWM_ConfigChannel+0x1ba>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001702:	4f40      	ldr	r7, [pc, #256]	; (8001804 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8001704:	42ba      	cmp	r2, r7
 8001706:	d050      	beq.n	80017aa <HAL_TIM_PWM_ConfigChannel+0x1ca>
 8001708:	4f3f      	ldr	r7, [pc, #252]	; (8001808 <HAL_TIM_PWM_ConfigChannel+0x228>)
 800170a:	42ba      	cmp	r2, r7
 800170c:	d04d      	beq.n	80017aa <HAL_TIM_PWM_ConfigChannel+0x1ca>
  TIMx->CCR2 = OC_Config->Pulse;
 800170e:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001710:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001712:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001714:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001716:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	6994      	ldr	r4, [r2, #24]
 800171c:	0100      	lsls	r0, r0, #4
 800171e:	4320      	orrs	r0, r4
 8001720:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001722:	6990      	ldr	r0, [r2, #24]
 8001724:	4c39      	ldr	r4, [pc, #228]	; (800180c <HAL_TIM_PWM_ConfigChannel+0x22c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001726:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001728:	4020      	ands	r0, r4
 800172a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800172c:	6990      	ldr	r0, [r2, #24]
 800172e:	0209      	lsls	r1, r1, #8
 8001730:	4301      	orrs	r1, r0
 8001732:	6191      	str	r1, [r2, #24]
    break;
 8001734:	e799      	b.n	800166a <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 8001736:	2a00      	cmp	r2, #0
 8001738:	d197      	bne.n	800166a <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800173a:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800173c:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800173e:	6a14      	ldr	r4, [r2, #32]
 8001740:	43ac      	bics	r4, r5
 8001742:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 8001744:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001746:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8001748:	4384      	bics	r4, r0
 800174a:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 800174c:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 800174e:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001750:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 8001752:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 8001754:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001756:	4c2a      	ldr	r4, [pc, #168]	; (8001800 <HAL_TIM_PWM_ConfigChannel+0x220>)
  tmpccmrx |= OC_Config->OCMode;
 8001758:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800175a:	42a2      	cmp	r2, r4
 800175c:	d03c      	beq.n	80017d8 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 800175e:	4c29      	ldr	r4, [pc, #164]	; (8001804 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8001760:	42a2      	cmp	r2, r4
 8001762:	d039      	beq.n	80017d8 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8001764:	4c28      	ldr	r4, [pc, #160]	; (8001808 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8001766:	42a2      	cmp	r2, r4
 8001768:	d036      	beq.n	80017d8 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR1 = OC_Config->Pulse;
 800176a:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800176c:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800176e:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001770:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001772:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001774:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001776:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001778:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800177a:	4320      	orrs	r0, r4
 800177c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800177e:	6990      	ldr	r0, [r2, #24]
 8001780:	3c04      	subs	r4, #4
 8001782:	43a0      	bics	r0, r4
 8001784:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001786:	6990      	ldr	r0, [r2, #24]
 8001788:	4301      	orrs	r1, r0
 800178a:	6191      	str	r1, [r2, #24]
    break;
 800178c:	e76d      	b.n	800166a <HAL_TIM_PWM_ConfigChannel+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800178e:	4c22      	ldr	r4, [pc, #136]	; (8001818 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8001790:	4026      	ands	r6, r4
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001792:	694c      	ldr	r4, [r1, #20]
 8001794:	01a4      	lsls	r4, r4, #6
 8001796:	4326      	orrs	r6, r4
 8001798:	e754      	b.n	8001644 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpccer &= ~TIM_CCER_CC2NP;
 800179a:	2480      	movs	r4, #128	; 0x80
 800179c:	43a0      	bics	r0, r4
 800179e:	0004      	movs	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80017a0:	68c8      	ldr	r0, [r1, #12]
 80017a2:	0100      	lsls	r0, r0, #4
 80017a4:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 80017a6:	2440      	movs	r4, #64	; 0x40
 80017a8:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80017aa:	4f1c      	ldr	r7, [pc, #112]	; (800181c <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80017ac:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80017ae:	4037      	ands	r7, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80017b0:	698e      	ldr	r6, [r1, #24]
 80017b2:	4326      	orrs	r6, r4
 80017b4:	00b6      	lsls	r6, r6, #2
 80017b6:	433e      	orrs	r6, r7
 80017b8:	e7a9      	b.n	800170e <HAL_TIM_PWM_ConfigChannel+0x12e>
    tmpccer &= ~TIM_CCER_CC3NP;
 80017ba:	4c19      	ldr	r4, [pc, #100]	; (8001820 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80017bc:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017be:	68c8      	ldr	r0, [r1, #12]
 80017c0:	0200      	lsls	r0, r0, #8
 80017c2:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 80017c4:	4c11      	ldr	r4, [pc, #68]	; (800180c <HAL_TIM_PWM_ConfigChannel+0x22c>)
 80017c6:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80017c8:	4f16      	ldr	r7, [pc, #88]	; (8001824 <HAL_TIM_PWM_ConfigChannel+0x244>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017ca:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80017cc:	4037      	ands	r7, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017ce:	698e      	ldr	r6, [r1, #24]
 80017d0:	4326      	orrs	r6, r4
 80017d2:	0136      	lsls	r6, r6, #4
 80017d4:	433e      	orrs	r6, r7
 80017d6:	e76d      	b.n	80016b4 <HAL_TIM_PWM_ConfigChannel+0xd4>
    tmpccer &= ~TIM_CCER_CC1NP;
 80017d8:	2408      	movs	r4, #8
 80017da:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 80017dc:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80017de:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80017e0:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80017e2:	2404      	movs	r4, #4
 80017e4:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80017e6:	4c10      	ldr	r4, [pc, #64]	; (8001828 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80017e8:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80017ea:	694c      	ldr	r4, [r1, #20]
 80017ec:	433c      	orrs	r4, r7
 80017ee:	4326      	orrs	r6, r4
 80017f0:	e7bb      	b.n	800176a <HAL_TIM_PWM_ConfigChannel+0x18a>
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	ffffefff 	.word	0xffffefff
 80017f8:	ffff8cff 	.word	0xffff8cff
 80017fc:	ffffdfff 	.word	0xffffdfff
 8001800:	40012c00 	.word	0x40012c00
 8001804:	40014400 	.word	0x40014400
 8001808:	40014800 	.word	0x40014800
 800180c:	fffffbff 	.word	0xfffffbff
 8001810:	fffffeff 	.word	0xfffffeff
 8001814:	fffffdff 	.word	0xfffffdff
 8001818:	ffffbfff 	.word	0xffffbfff
 800181c:	fffff3ff 	.word	0xfffff3ff
 8001820:	fffff7ff 	.word	0xfffff7ff
 8001824:	ffffcfff 	.word	0xffffcfff
 8001828:	fffffcff 	.word	0xfffffcff

0800182c <HAL_TIM_TriggerCallback>:
 800182c:	4770      	bx	lr
 800182e:	46c0      	nop			; (mov r8, r8)

08001830 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001830:	2202      	movs	r2, #2
 8001832:	6803      	ldr	r3, [r0, #0]
{
 8001834:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001836:	6919      	ldr	r1, [r3, #16]
{
 8001838:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800183a:	420a      	tst	r2, r1
 800183c:	d002      	beq.n	8001844 <HAL_TIM_IRQHandler+0x14>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800183e:	68d9      	ldr	r1, [r3, #12]
 8001840:	420a      	tst	r2, r1
 8001842:	d168      	bne.n	8001916 <HAL_TIM_IRQHandler+0xe6>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001844:	2204      	movs	r2, #4
 8001846:	6919      	ldr	r1, [r3, #16]
 8001848:	420a      	tst	r2, r1
 800184a:	d002      	beq.n	8001852 <HAL_TIM_IRQHandler+0x22>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800184c:	68d9      	ldr	r1, [r3, #12]
 800184e:	420a      	tst	r2, r1
 8001850:	d14e      	bne.n	80018f0 <HAL_TIM_IRQHandler+0xc0>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001852:	2208      	movs	r2, #8
 8001854:	6919      	ldr	r1, [r3, #16]
 8001856:	420a      	tst	r2, r1
 8001858:	d002      	beq.n	8001860 <HAL_TIM_IRQHandler+0x30>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800185a:	68d9      	ldr	r1, [r3, #12]
 800185c:	420a      	tst	r2, r1
 800185e:	d136      	bne.n	80018ce <HAL_TIM_IRQHandler+0x9e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001860:	2210      	movs	r2, #16
 8001862:	6919      	ldr	r1, [r3, #16]
 8001864:	420a      	tst	r2, r1
 8001866:	d002      	beq.n	800186e <HAL_TIM_IRQHandler+0x3e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001868:	68d9      	ldr	r1, [r3, #12]
 800186a:	420a      	tst	r2, r1
 800186c:	d11c      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x78>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800186e:	2201      	movs	r2, #1
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	420a      	tst	r2, r1
 8001874:	d002      	beq.n	800187c <HAL_TIM_IRQHandler+0x4c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001876:	68d9      	ldr	r1, [r3, #12]
 8001878:	420a      	tst	r2, r1
 800187a:	d169      	bne.n	8001950 <HAL_TIM_IRQHandler+0x120>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	6919      	ldr	r1, [r3, #16]
 8001880:	420a      	tst	r2, r1
 8001882:	d002      	beq.n	800188a <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001884:	68d9      	ldr	r1, [r3, #12]
 8001886:	420a      	tst	r2, r1
 8001888:	d169      	bne.n	800195e <HAL_TIM_IRQHandler+0x12e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800188a:	2240      	movs	r2, #64	; 0x40
 800188c:	6919      	ldr	r1, [r3, #16]
 800188e:	420a      	tst	r2, r1
 8001890:	d002      	beq.n	8001898 <HAL_TIM_IRQHandler+0x68>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001892:	68d9      	ldr	r1, [r3, #12]
 8001894:	420a      	tst	r2, r1
 8001896:	d154      	bne.n	8001942 <HAL_TIM_IRQHandler+0x112>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001898:	2220      	movs	r2, #32
 800189a:	6919      	ldr	r1, [r3, #16]
 800189c:	420a      	tst	r2, r1
 800189e:	d002      	beq.n	80018a6 <HAL_TIM_IRQHandler+0x76>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018a0:	68d9      	ldr	r1, [r3, #12]
 80018a2:	420a      	tst	r2, r1
 80018a4:	d147      	bne.n	8001936 <HAL_TIM_IRQHandler+0x106>
}
 80018a6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018a8:	3a21      	subs	r2, #33	; 0x21
 80018aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018ac:	3219      	adds	r2, #25
 80018ae:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	23c0      	movs	r3, #192	; 0xc0
 80018b4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80018b6:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018b8:	421a      	tst	r2, r3
 80018ba:	d15b      	bne.n	8001974 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018bc:	f000 fc7e 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c0:	0020      	movs	r0, r4
 80018c2:	f000 fc87 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c6:	2300      	movs	r3, #0
 80018c8:	7723      	strb	r3, [r4, #28]
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	e7cf      	b.n	800186e <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018ce:	3a11      	subs	r2, #17
 80018d0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018d4:	320d      	adds	r2, #13
 80018d6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018d8:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018da:	079b      	lsls	r3, r3, #30
 80018dc:	d150      	bne.n	8001980 <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018de:	f000 fc6d 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e2:	0020      	movs	r0, r4
 80018e4:	f000 fc76 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e8:	2300      	movs	r3, #0
 80018ea:	7723      	strb	r3, [r4, #28]
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	e7b7      	b.n	8001860 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018f0:	3a09      	subs	r2, #9
 80018f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f4:	3207      	adds	r2, #7
 80018f6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	23c0      	movs	r3, #192	; 0xc0
 80018fc:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80018fe:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001900:	421a      	tst	r2, r3
 8001902:	d13a      	bne.n	800197a <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001904:	f000 fc5a 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001908:	0020      	movs	r0, r4
 800190a:	f000 fc63 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800190e:	2300      	movs	r3, #0
 8001910:	7723      	strb	r3, [r4, #28]
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	e79d      	b.n	8001852 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001916:	3a05      	subs	r2, #5
 8001918:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800191a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800191c:	3204      	adds	r2, #4
 800191e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001920:	079b      	lsls	r3, r3, #30
 8001922:	d124      	bne.n	800196e <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001924:	f000 fc4a 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001928:	0020      	movs	r0, r4
 800192a:	f000 fc53 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192e:	2300      	movs	r3, #0
 8001930:	7723      	strb	r3, [r4, #28]
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	e786      	b.n	8001844 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001936:	3a41      	subs	r2, #65	; 0x41
 8001938:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800193a:	0020      	movs	r0, r4
 800193c:	f000 f844 	bl	80019c8 <HAL_TIMEx_CommutationCallback>
}
 8001940:	e7b1      	b.n	80018a6 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001942:	3a81      	subs	r2, #129	; 0x81
 8001944:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001946:	0020      	movs	r0, r4
 8001948:	f7ff ff70 	bl	800182c <HAL_TIM_TriggerCallback>
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	e7a3      	b.n	8001898 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001950:	3a03      	subs	r2, #3
 8001952:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001954:	0020      	movs	r0, r4
 8001956:	f000 fc13 	bl	8002180 <HAL_TIM_PeriodElapsedCallback>
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	e78e      	b.n	800187c <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800195e:	3a02      	subs	r2, #2
 8001960:	3aff      	subs	r2, #255	; 0xff
 8001962:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001964:	0020      	movs	r0, r4
 8001966:	f000 f831 	bl	80019cc <HAL_TIMEx_BreakCallback>
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	e78d      	b.n	800188a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 800196e:	f000 fc2b 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8001972:	e7dc      	b.n	800192e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8001974:	f000 fc28 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8001978:	e7a5      	b.n	80018c6 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 800197a:	f000 fc25 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 800197e:	e7c6      	b.n	800190e <HAL_TIM_IRQHandler+0xde>
        HAL_TIM_IC_CaptureCallback(htim);
 8001980:	f000 fc22 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8001984:	e7b0      	b.n	80018e8 <HAL_TIM_IRQHandler+0xb8>
 8001986:	46c0      	nop			; (mov r8, r8)

08001988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001988:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800198a:	243c      	movs	r4, #60	; 0x3c
 800198c:	5d03      	ldrb	r3, [r0, r4]
{
 800198e:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8001990:	2002      	movs	r0, #2
 8001992:	2b01      	cmp	r3, #1
 8001994:	d017      	beq.n	80019c6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8001996:	253d      	movs	r5, #61	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001998:	2670      	movs	r6, #112	; 0x70
 800199a:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800199c:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800199e:	6858      	ldr	r0, [r3, #4]
 80019a0:	43b0      	bics	r0, r6
 80019a2:	6058      	str	r0, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80019a4:	6858      	ldr	r0, [r3, #4]
 80019a6:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80019a8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80019aa:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80019ac:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80019ae:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80019b0:	6898      	ldr	r0, [r3, #8]
 80019b2:	43b0      	bics	r0, r6
 80019b4:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80019b6:	6898      	ldr	r0, [r3, #8]
 80019b8:	4301      	orrs	r1, r0
 80019ba:	6099      	str	r1, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80019bc:	2301      	movs	r3, #1
 80019be:	5553      	strb	r3, [r2, r5]

  __HAL_UNLOCK(htim);
 80019c0:	2300      	movs	r3, #0

  return HAL_OK;
 80019c2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80019c4:	5513      	strb	r3, [r2, r4]
}
 80019c6:	bd70      	pop	{r4, r5, r6, pc}

080019c8 <HAL_TIMEx_CommutationCallback>:
 80019c8:	4770      	bx	lr
 80019ca:	46c0      	nop			; (mov r8, r8)

080019cc <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019cc:	4770      	bx	lr
 80019ce:	46c0      	nop			; (mov r8, r8)

080019d0 <HAL_UART_Transmit_IT>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80019d0:	0003      	movs	r3, r0
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80019d2:	2069      	movs	r0, #105	; 0x69
{
 80019d4:	b530      	push	{r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80019d6:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80019d8:	3867      	subs	r0, #103	; 0x67
  if(huart->gState == HAL_UART_STATE_READY)
 80019da:	2c20      	cmp	r4, #32
 80019dc:	d000      	beq.n	80019e0 <HAL_UART_Transmit_IT+0x10>
  }
}
 80019de:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d024      	beq.n	8001a2e <HAL_UART_Transmit_IT+0x5e>
      return HAL_ERROR;
 80019e4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d0f9      	beq.n	80019de <HAL_UART_Transmit_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ea:	2480      	movs	r4, #128	; 0x80
 80019ec:	689d      	ldr	r5, [r3, #8]
 80019ee:	0164      	lsls	r4, r4, #5
 80019f0:	42a5      	cmp	r5, r4
 80019f2:	d016      	beq.n	8001a22 <HAL_UART_Transmit_IT+0x52>
    __HAL_LOCK(huart);
 80019f4:	2468      	movs	r4, #104	; 0x68
 80019f6:	5d1d      	ldrb	r5, [r3, r4]
    return HAL_BUSY;
 80019f8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80019fa:	2d01      	cmp	r5, #1
 80019fc:	d0ef      	beq.n	80019de <HAL_UART_Transmit_IT+0xe>
    huart->pTxBuffPtr = pData;
 80019fe:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8001a00:	2150      	movs	r1, #80	; 0x50
 8001a02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001a04:	3102      	adds	r1, #2
 8001a06:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a08:	2200      	movs	r2, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a0a:	301f      	adds	r0, #31
 8001a0c:	3117      	adds	r1, #23
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a10:	5458      	strb	r0, [r3, r1]
    __HAL_UNLOCK(huart);
 8001a12:	551a      	strb	r2, [r3, r4]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	3117      	adds	r1, #23
 8001a18:	6813      	ldr	r3, [r2, #0]
    return HAL_OK;
 8001a1a:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8001a20:	e7dd      	b.n	80019de <HAL_UART_Transmit_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a22:	691c      	ldr	r4, [r3, #16]
 8001a24:	2c00      	cmp	r4, #0
 8001a26:	d1e5      	bne.n	80019f4 <HAL_UART_Transmit_IT+0x24>
      if((((uint32_t)pData)&1U) != 0U)
 8001a28:	4201      	tst	r1, r0
 8001a2a:	d0e3      	beq.n	80019f4 <HAL_UART_Transmit_IT+0x24>
 8001a2c:	e7d7      	b.n	80019de <HAL_UART_Transmit_IT+0xe>
      return HAL_ERROR;
 8001a2e:	2001      	movs	r0, #1
 8001a30:	e7d5      	b.n	80019de <HAL_UART_Transmit_IT+0xe>
 8001a32:	46c0      	nop			; (mov r8, r8)

08001a34 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a34:	0003      	movs	r3, r0
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001a36:	206a      	movs	r0, #106	; 0x6a
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8001a3a:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001a3c:	3868      	subs	r0, #104	; 0x68
  if(huart->RxState == HAL_UART_STATE_READY)
 8001a3e:	2c20      	cmp	r4, #32
 8001a40:	d000      	beq.n	8001a44 <HAL_UART_Receive_IT+0x10>
  }
}
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == NULL ) || (Size == 0U))
 8001a44:	2900      	cmp	r1, #0
 8001a46:	d040      	beq.n	8001aca <HAL_UART_Receive_IT+0x96>
      return HAL_ERROR;
 8001a48:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d0f9      	beq.n	8001a42 <HAL_UART_Receive_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a4e:	2580      	movs	r5, #128	; 0x80
 8001a50:	689c      	ldr	r4, [r3, #8]
 8001a52:	016d      	lsls	r5, r5, #5
 8001a54:	42ac      	cmp	r4, r5
 8001a56:	d026      	beq.n	8001aa6 <HAL_UART_Receive_IT+0x72>
    __HAL_LOCK(huart);
 8001a58:	2568      	movs	r5, #104	; 0x68
 8001a5a:	5d5e      	ldrb	r6, [r3, r5]
    return HAL_BUSY;
 8001a5c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001a5e:	2e01      	cmp	r6, #1
 8001a60:	d0ef      	beq.n	8001a42 <HAL_UART_Receive_IT+0xe>
 8001a62:	2001      	movs	r0, #1
 8001a64:	5558      	strb	r0, [r3, r5]
    huart->pRxBuffPtr = pData;
 8001a66:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001a68:	2158      	movs	r1, #88	; 0x58
 8001a6a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001a6c:	3102      	adds	r1, #2
 8001a6e:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8001a70:	2c00      	cmp	r4, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_UART_Receive_IT+0x4c>
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	d033      	beq.n	8001ae2 <HAL_UART_Receive_IT+0xae>
 8001a7a:	217f      	movs	r1, #127	; 0x7f
 8001a7c:	225c      	movs	r2, #92	; 0x5c
 8001a7e:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a80:	2200      	movs	r2, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a82:	2022      	movs	r0, #34	; 0x22
 8001a84:	216a      	movs	r1, #106	; 0x6a
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a86:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a88:	5458      	strb	r0, [r3, r1]
    __HAL_UNLOCK(huart);
 8001a8a:	3902      	subs	r1, #2
 8001a8c:	545a      	strb	r2, [r3, r1]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3967      	subs	r1, #103	; 0x67
 8001a92:	689a      	ldr	r2, [r3, #8]
    return HAL_OK;
 8001a94:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001a9a:	2290      	movs	r2, #144	; 0x90
 8001a9c:	6819      	ldr	r1, [r3, #0]
 8001a9e:	0052      	lsls	r2, r2, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8001aa4:	e7cd      	b.n	8001a42 <HAL_UART_Receive_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa6:	691c      	ldr	r4, [r3, #16]
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d110      	bne.n	8001ace <HAL_UART_Receive_IT+0x9a>
      if((((uint32_t)pData)&1U) != 0U)
 8001aac:	4201      	tst	r1, r0
 8001aae:	d1c8      	bne.n	8001a42 <HAL_UART_Receive_IT+0xe>
    __HAL_LOCK(huart);
 8001ab0:	2068      	movs	r0, #104	; 0x68
 8001ab2:	5c18      	ldrb	r0, [r3, r0]
 8001ab4:	2801      	cmp	r0, #1
 8001ab6:	d018      	beq.n	8001aea <HAL_UART_Receive_IT+0xb6>
    huart->pRxBuffPtr = pData;
 8001ab8:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001aba:	2158      	movs	r1, #88	; 0x58
 8001abc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001abe:	3102      	adds	r1, #2
 8001ac0:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8001ac2:	225c      	movs	r2, #92	; 0x5c
 8001ac4:	490a      	ldr	r1, [pc, #40]	; (8001af0 <HAL_UART_Receive_IT+0xbc>)
 8001ac6:	5299      	strh	r1, [r3, r2]
 8001ac8:	e7da      	b.n	8001a80 <HAL_UART_Receive_IT+0x4c>
      return HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
 8001acc:	e7b9      	b.n	8001a42 <HAL_UART_Receive_IT+0xe>
    __HAL_LOCK(huart);
 8001ace:	2068      	movs	r0, #104	; 0x68
 8001ad0:	5c1c      	ldrb	r4, [r3, r0]
    return HAL_BUSY;
 8001ad2:	3866      	subs	r0, #102	; 0x66
    __HAL_LOCK(huart);
 8001ad4:	2c01      	cmp	r4, #1
 8001ad6:	d0b4      	beq.n	8001a42 <HAL_UART_Receive_IT+0xe>
    huart->pRxBuffPtr = pData;
 8001ad8:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001ada:	2158      	movs	r1, #88	; 0x58
 8001adc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001ade:	3102      	adds	r1, #2
 8001ae0:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8001ae2:	21ff      	movs	r1, #255	; 0xff
 8001ae4:	225c      	movs	r2, #92	; 0x5c
 8001ae6:	5299      	strh	r1, [r3, r2]
 8001ae8:	e7ca      	b.n	8001a80 <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 8001aea:	2002      	movs	r0, #2
 8001aec:	e7a9      	b.n	8001a42 <HAL_UART_Receive_IT+0xe>
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	000001ff 	.word	0x000001ff

08001af4 <HAL_UART_Transmit_DMA>:
  *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	0004      	movs	r4, r0
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001af8:	2069      	movs	r0, #105	; 0x69
 8001afa:	5c25      	ldrb	r5, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001afc:	3867      	subs	r0, #103	; 0x67
  if(huart->gState == HAL_UART_STATE_READY)
 8001afe:	2d20      	cmp	r5, #32
 8001b00:	d000      	beq.n	8001b04 <HAL_UART_Transmit_DMA+0x10>
  }
}
 8001b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8001b04:	2900      	cmp	r1, #0
 8001b06:	d036      	beq.n	8001b76 <HAL_UART_Transmit_DMA+0x82>
      return HAL_ERROR;
 8001b08:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001b0a:	2a00      	cmp	r2, #0
 8001b0c:	d0f9      	beq.n	8001b02 <HAL_UART_Transmit_DMA+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	68a5      	ldr	r5, [r4, #8]
 8001b12:	015b      	lsls	r3, r3, #5
 8001b14:	429d      	cmp	r5, r3
 8001b16:	d028      	beq.n	8001b6a <HAL_UART_Transmit_DMA+0x76>
    __HAL_LOCK(huart);
 8001b18:	2568      	movs	r5, #104	; 0x68
 8001b1a:	5d63      	ldrb	r3, [r4, r5]
    return HAL_BUSY;
 8001b1c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d0ef      	beq.n	8001b02 <HAL_UART_Transmit_DMA+0xe>
 8001b22:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b24:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8001b26:	5563      	strb	r3, [r4, r5]
    huart->TxXferSize = Size;
 8001b28:	334f      	adds	r3, #79	; 0x4f
    huart->pTxBuffPtr = pData;
 8001b2a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8001b2c:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8001b2e:	3302      	adds	r3, #2
 8001b30:	52e2      	strh	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b32:	301f      	adds	r0, #31
 8001b34:	3317      	adds	r3, #23
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b36:	66e6      	str	r6, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b38:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001b3a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_UART_Transmit_DMA+0x88>)
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001b3e:	6827      	ldr	r7, [r4, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001b40:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_UART_Transmit_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001b44:	3728      	adds	r7, #40	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001b46:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_UART_Transmit_DMA+0x90>)
    huart->hdmatx->XferAbortCallback = NULL;
 8001b4a:	6346      	str	r6, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001b4c:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001b4e:	0013      	movs	r3, r2
 8001b50:	003a      	movs	r2, r7
 8001b52:	f7fe feb5 	bl	80008c0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001b56:	2240      	movs	r2, #64	; 0x40
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b58:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001b5a:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8001b5c:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001b5e:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b60:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8001b62:	5566      	strb	r6, [r4, r5]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b64:	430a      	orrs	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8001b68:	e7cb      	b.n	8001b02 <HAL_UART_Transmit_DMA+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b6a:	6923      	ldr	r3, [r4, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1d3      	bne.n	8001b18 <HAL_UART_Transmit_DMA+0x24>
      if((((uint32_t)pData)&1U) != 0U)
 8001b70:	4201      	tst	r1, r0
 8001b72:	d0d1      	beq.n	8001b18 <HAL_UART_Transmit_DMA+0x24>
 8001b74:	e7c5      	b.n	8001b02 <HAL_UART_Transmit_DMA+0xe>
      return HAL_ERROR;
 8001b76:	2001      	movs	r0, #1
 8001b78:	e7c3      	b.n	8001b02 <HAL_UART_Transmit_DMA+0xe>
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	08001b89 	.word	0x08001b89
 8001b80:	08001bbd 	.word	0x08001bbd
 8001b84:	08001bcd 	.word	0x08001bcd

08001b88 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001b88:	6803      	ldr	r3, [r0, #0]
{
 8001b8a:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001b90:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001b92:	400b      	ands	r3, r1
 8001b94:	d10b      	bne.n	8001bae <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0;
 8001b96:	2152      	movs	r1, #82	; 0x52
 8001b98:	5253      	strh	r3, [r2, r1]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	312e      	adds	r1, #46	; 0x2e
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	3940      	subs	r1, #64	; 0x40
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8001bac:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8001bae:	0010      	movs	r0, r2
 8001bb0:	f000 fb16 	bl	80021e0 <HAL_UART_TxCpltCallback>
}
 8001bb4:	e7fa      	b.n	8001bac <UART_DMATransmitCplt+0x24>
 8001bb6:	46c0      	nop			; (mov r8, r8)

08001bb8 <HAL_UART_TxHalfCpltCallback>:
 8001bb8:	4770      	bx	lr
 8001bba:	46c0      	nop			; (mov r8, r8)

08001bbc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8001bbe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001bc0:	f7ff fffa 	bl	8001bb8 <HAL_UART_TxHalfCpltCallback>
}
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)

08001bc8 <HAL_UART_ErrorCallback>:
 8001bc8:	4770      	bx	lr
 8001bca:	46c0      	nop			; (mov r8, r8)

08001bcc <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001bcc:	2369      	movs	r3, #105	; 0x69
{
 8001bce:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001bd0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001bd2:	5cc2      	ldrb	r2, [r0, r3]
 8001bd4:	2a21      	cmp	r2, #33	; 0x21
 8001bd6:	d01d      	beq.n	8001c14 <UART_DMAError+0x48>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001bd8:	236a      	movs	r3, #106	; 0x6a
 8001bda:	5cc2      	ldrb	r2, [r0, r3]
 8001bdc:	2a22      	cmp	r2, #34	; 0x22
 8001bde:	d006      	beq.n	8001bee <UART_DMAError+0x22>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001be0:	2210      	movs	r2, #16
 8001be2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001be4:	4313      	orrs	r3, r2
 8001be6:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8001be8:	f7ff ffee 	bl	8001bc8 <HAL_UART_ErrorCallback>
}
 8001bec:	bd10      	pop	{r4, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8001bee:	6802      	ldr	r2, [r0, #0]
 8001bf0:	6891      	ldr	r1, [r2, #8]
 8001bf2:	0649      	lsls	r1, r1, #25
 8001bf4:	d5f4      	bpl.n	8001be0 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8001bf6:	2400      	movs	r4, #0
 8001bf8:	215a      	movs	r1, #90	; 0x5a
 8001bfa:	5244      	strh	r4, [r0, r1]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bfc:	6811      	ldr	r1, [r2, #0]
 8001bfe:	4c0c      	ldr	r4, [pc, #48]	; (8001c30 <UART_DMAError+0x64>)
 8001c00:	4021      	ands	r1, r4
 8001c02:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c04:	6891      	ldr	r1, [r2, #8]
 8001c06:	3423      	adds	r4, #35	; 0x23
 8001c08:	34ff      	adds	r4, #255	; 0xff
 8001c0a:	43a1      	bics	r1, r4
 8001c0c:	6091      	str	r1, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8001c0e:	2220      	movs	r2, #32
 8001c10:	54c2      	strb	r2, [r0, r3]
 8001c12:	e7e5      	b.n	8001be0 <UART_DMAError+0x14>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8001c14:	6802      	ldr	r2, [r0, #0]
 8001c16:	6891      	ldr	r1, [r2, #8]
 8001c18:	0609      	lsls	r1, r1, #24
 8001c1a:	d5dd      	bpl.n	8001bd8 <UART_DMAError+0xc>
    huart->TxXferCount = 0U;
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	2152      	movs	r1, #82	; 0x52
 8001c20:	5244      	strh	r4, [r0, r1]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001c22:	6811      	ldr	r1, [r2, #0]
 8001c24:	34c0      	adds	r4, #192	; 0xc0
 8001c26:	43a1      	bics	r1, r4
 8001c28:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	54c2      	strb	r2, [r0, r3]
 8001c2e:	e7d3      	b.n	8001bd8 <UART_DMAError+0xc>
 8001c30:	fffffedf 	.word	0xfffffedf

08001c34 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  huart->RxXferCount = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	225a      	movs	r2, #90	; 0x5a
{
 8001c38:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001c3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001c3c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8001c3e:	3a08      	subs	r2, #8
 8001c40:	5283      	strh	r3, [r0, r2]

  HAL_UART_ErrorCallback(huart);
 8001c42:	f7ff ffc1 	bl	8001bc8 <HAL_UART_ErrorCallback>
}
 8001c46:	bd10      	pop	{r4, pc}

08001c48 <HAL_UART_IRQHandler>:
{
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c4a:	6803      	ldr	r3, [r0, #0]
{
 8001c4c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	0018      	movs	r0, r3
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c52:	6819      	ldr	r1, [r3, #0]
  if (errorflags == RESET)
 8001c54:	0715      	lsls	r5, r2, #28
 8001c56:	d110      	bne.n	8001c7a <HAL_UART_IRQHandler+0x32>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c58:	2020      	movs	r0, #32
 8001c5a:	4210      	tst	r0, r2
 8001c5c:	d15d      	bne.n	8001d1a <HAL_UART_IRQHandler+0xd2>
  cr3its = READ_REG(huart->Instance->CR3);
 8001c5e:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c60:	2080      	movs	r0, #128	; 0x80
 8001c62:	4210      	tst	r0, r2
 8001c64:	d002      	beq.n	8001c6c <HAL_UART_IRQHandler+0x24>
 8001c66:	4208      	tst	r0, r1
 8001c68:	d000      	beq.n	8001c6c <HAL_UART_IRQHandler+0x24>
 8001c6a:	e085      	b.n	8001d78 <HAL_UART_IRQHandler+0x130>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c6c:	2040      	movs	r0, #64	; 0x40
 8001c6e:	4210      	tst	r0, r2
 8001c70:	d002      	beq.n	8001c78 <HAL_UART_IRQHandler+0x30>
 8001c72:	4208      	tst	r0, r1
 8001c74:	d000      	beq.n	8001c78 <HAL_UART_IRQHandler+0x30>
 8001c76:	e06f      	b.n	8001d58 <HAL_UART_IRQHandler+0x110>
}
 8001c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001c7a:	2601      	movs	r6, #1
  cr3its = READ_REG(huart->Instance->CR3);
 8001c7c:	689d      	ldr	r5, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001c7e:	4035      	ands	r5, r6
 8001c80:	d056      	beq.n	8001d30 <HAL_UART_IRQHandler+0xe8>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c82:	2601      	movs	r6, #1
 8001c84:	4216      	tst	r6, r2
 8001c86:	d005      	beq.n	8001c94 <HAL_UART_IRQHandler+0x4c>
 8001c88:	05cf      	lsls	r7, r1, #23
 8001c8a:	d503      	bpl.n	8001c94 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001c8c:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c8e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8001c90:	433e      	orrs	r6, r7
 8001c92:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c94:	2602      	movs	r6, #2
 8001c96:	4216      	tst	r6, r2
 8001c98:	d053      	beq.n	8001d42 <HAL_UART_IRQHandler+0xfa>
 8001c9a:	2d00      	cmp	r5, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c9e:	2704      	movs	r7, #4
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001ca0:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ca2:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8001ca4:	433e      	orrs	r6, r7
 8001ca6:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ca8:	4217      	tst	r7, r2
 8001caa:	d14e      	bne.n	8001d4a <HAL_UART_IRQHandler+0x102>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001cac:	0716      	lsls	r6, r2, #28
 8001cae:	d503      	bpl.n	8001cb8 <HAL_UART_IRQHandler+0x70>
 8001cb0:	068e      	lsls	r6, r1, #26
 8001cb2:	d45b      	bmi.n	8001d6c <HAL_UART_IRQHandler+0x124>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cb4:	2d00      	cmp	r5, #0
 8001cb6:	d159      	bne.n	8001d6c <HAL_UART_IRQHandler+0x124>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cb8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001cba:	2d00      	cmp	r5, #0
 8001cbc:	d0dc      	beq.n	8001c78 <HAL_UART_IRQHandler+0x30>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cbe:	2520      	movs	r5, #32
 8001cc0:	4215      	tst	r5, r2
 8001cc2:	d002      	beq.n	8001cca <HAL_UART_IRQHandler+0x82>
 8001cc4:	420d      	tst	r5, r1
 8001cc6:	d000      	beq.n	8001cca <HAL_UART_IRQHandler+0x82>
 8001cc8:	e09a      	b.n	8001e00 <HAL_UART_IRQHandler+0x1b8>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001cca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001ccc:	071b      	lsls	r3, r3, #28
 8001cce:	d404      	bmi.n	8001cda <HAL_UART_IRQHandler+0x92>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001cd0:	2540      	movs	r5, #64	; 0x40
 8001cd2:	6883      	ldr	r3, [r0, #8]
 8001cd4:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001cd6:	d100      	bne.n	8001cda <HAL_UART_IRQHandler+0x92>
 8001cd8:	e09b      	b.n	8001e12 <HAL_UART_IRQHandler+0x1ca>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cda:	6803      	ldr	r3, [r0, #0]
 8001cdc:	4a76      	ldr	r2, [pc, #472]	; (8001eb8 <HAL_UART_IRQHandler+0x270>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce2:	6883      	ldr	r3, [r0, #8]
 8001ce4:	3223      	adds	r2, #35	; 0x23
 8001ce6:	32ff      	adds	r2, #255	; 0xff
 8001ce8:	4393      	bics	r3, r2
 8001cea:	6083      	str	r3, [r0, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8001cec:	236a      	movs	r3, #106	; 0x6a
 8001cee:	321f      	adds	r2, #31
 8001cf0:	54e2      	strb	r2, [r4, r3]
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf2:	6883      	ldr	r3, [r0, #8]
 8001cf4:	3220      	adds	r2, #32
 8001cf6:	421a      	tst	r2, r3
 8001cf8:	d057      	beq.n	8001daa <HAL_UART_IRQHandler+0x162>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cfa:	6883      	ldr	r3, [r0, #8]
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	6083      	str	r3, [r0, #8]
          if(huart->hdmarx != NULL)
 8001d00:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001d02:	2800      	cmp	r0, #0
 8001d04:	d051      	beq.n	8001daa <HAL_UART_IRQHandler+0x162>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d06:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <HAL_UART_IRQHandler+0x274>)
 8001d08:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d0a:	f7fe fe15 	bl	8000938 <HAL_DMA_Abort_IT>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d0b2      	beq.n	8001c78 <HAL_UART_IRQHandler+0x30>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d12:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001d14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d16:	4798      	blx	r3
 8001d18:	e7ae      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d1a:	4208      	tst	r0, r1
 8001d1c:	d09f      	beq.n	8001c5e <HAL_UART_IRQHandler+0x16>
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d1e:	226a      	movs	r2, #106	; 0x6a
 8001d20:	5ca2      	ldrb	r2, [r4, r2]
 8001d22:	2a22      	cmp	r2, #34	; 0x22
 8001d24:	d045      	beq.n	8001db2 <HAL_UART_IRQHandler+0x16a>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001d26:	2108      	movs	r1, #8
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	619a      	str	r2, [r3, #24]
 8001d2e:	e7a3      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001d30:	2690      	movs	r6, #144	; 0x90
 8001d32:	0076      	lsls	r6, r6, #1
 8001d34:	4231      	tst	r1, r6
 8001d36:	d100      	bne.n	8001d3a <HAL_UART_IRQHandler+0xf2>
 8001d38:	e792      	b.n	8001c60 <HAL_UART_IRQHandler+0x18>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d3a:	2601      	movs	r6, #1
 8001d3c:	4216      	tst	r6, r2
 8001d3e:	d0a9      	beq.n	8001c94 <HAL_UART_IRQHandler+0x4c>
 8001d40:	e7a2      	b.n	8001c88 <HAL_UART_IRQHandler+0x40>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d42:	0756      	lsls	r6, r2, #29
 8001d44:	d5b2      	bpl.n	8001cac <HAL_UART_IRQHandler+0x64>
 8001d46:	2d00      	cmp	r5, #0
 8001d48:	d0b0      	beq.n	8001cac <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001d4a:	2604      	movs	r6, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d4c:	2702      	movs	r7, #2
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001d4e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d50:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8001d52:	433e      	orrs	r6, r7
 8001d54:	66e6      	str	r6, [r4, #108]	; 0x6c
 8001d56:	e7a9      	b.n	8001cac <HAL_UART_IRQHandler+0x64>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4382      	bics	r2, r0
 8001d5c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001d5e:	2220      	movs	r2, #32
 8001d60:	2369      	movs	r3, #105	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8001d62:	0020      	movs	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8001d64:	54e2      	strb	r2, [r4, r3]
  HAL_UART_TxCpltCallback(huart);
 8001d66:	f000 fa3b 	bl	80021e0 <HAL_UART_TxCpltCallback>
 8001d6a:	e785      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001d6c:	2608      	movs	r6, #8
 8001d6e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d70:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001d72:	4335      	orrs	r5, r6
 8001d74:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001d76:	e79f      	b.n	8001cb8 <HAL_UART_IRQHandler+0x70>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d78:	2269      	movs	r2, #105	; 0x69
 8001d7a:	5ca2      	ldrb	r2, [r4, r2]
 8001d7c:	2a21      	cmp	r2, #33	; 0x21
 8001d7e:	d000      	beq.n	8001d82 <HAL_UART_IRQHandler+0x13a>
 8001d80:	e77a      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
    if(huart->TxXferCount == 0U)
 8001d82:	3231      	adds	r2, #49	; 0x31
 8001d84:	5aa2      	ldrh	r2, [r4, r2]
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d060      	beq.n	8001e4c <HAL_UART_IRQHandler+0x204>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	68a1      	ldr	r1, [r4, #8]
 8001d8e:	0152      	lsls	r2, r2, #5
 8001d90:	4291      	cmp	r1, r2
 8001d92:	d06c      	beq.n	8001e6e <HAL_UART_IRQHandler+0x226>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001d94:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001d96:	1c51      	adds	r1, r2, #1
 8001d98:	64e1      	str	r1, [r4, #76]	; 0x4c
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8001d9e:	2252      	movs	r2, #82	; 0x52
 8001da0:	5aa3      	ldrh	r3, [r4, r2]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	52a3      	strh	r3, [r4, r2]
 8001da8:	e766      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
            HAL_UART_ErrorCallback(huart);
 8001daa:	0020      	movs	r0, r4
 8001dac:	f7ff ff0c 	bl	8001bc8 <HAL_UART_ErrorCallback>
 8001db0:	e762      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
  uint16_t  uhMask = huart->Mask;
 8001db2:	323a      	adds	r2, #58	; 0x3a
 8001db4:	5aa1      	ldrh	r1, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db6:	2280      	movs	r2, #128	; 0x80
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001db8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dba:	68a0      	ldr	r0, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001dbc:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dbe:	0152      	lsls	r2, r2, #5
 8001dc0:	4290      	cmp	r0, r2
 8001dc2:	d04b      	beq.n	8001e5c <HAL_UART_IRQHandler+0x214>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001dc4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	1c50      	adds	r0, r2, #1
 8001dca:	6560      	str	r0, [r4, #84]	; 0x54
 8001dcc:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8001dce:	225a      	movs	r2, #90	; 0x5a
 8001dd0:	5aa3      	ldrh	r3, [r4, r2]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	52a3      	strh	r3, [r4, r2]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d000      	beq.n	8001dde <HAL_UART_IRQHandler+0x196>
 8001ddc:	e74c      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	4935      	ldr	r1, [pc, #212]	; (8001eb8 <HAL_UART_IRQHandler+0x270>)
 8001de2:	681a      	ldr	r2, [r3, #0]
      HAL_UART_RxCpltCallback(huart);
 8001de4:	0020      	movs	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001de6:	400a      	ands	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	3123      	adds	r1, #35	; 0x23
 8001dee:	31ff      	adds	r1, #255	; 0xff
 8001df0:	438a      	bics	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001df4:	2220      	movs	r2, #32
 8001df6:	236a      	movs	r3, #106	; 0x6a
 8001df8:	54e2      	strb	r2, [r4, r3]
      HAL_UART_RxCpltCallback(huart);
 8001dfa:	f000 f9b5 	bl	8002168 <HAL_UART_RxCpltCallback>
 8001dfe:	e73b      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e00:	226a      	movs	r2, #106	; 0x6a
 8001e02:	5ca2      	ldrb	r2, [r4, r2]
 8001e04:	2a22      	cmp	r2, #34	; 0x22
 8001e06:	d009      	beq.n	8001e1c <HAL_UART_IRQHandler+0x1d4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001e08:	2108      	movs	r1, #8
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	619a      	str	r2, [r3, #24]
 8001e10:	e75b      	b.n	8001cca <HAL_UART_IRQHandler+0x82>
        HAL_UART_ErrorCallback(huart);
 8001e12:	0020      	movs	r0, r4
 8001e14:	f7ff fed8 	bl	8001bc8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001e1a:	e72d      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e1c:	2080      	movs	r0, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 8001e1e:	323a      	adds	r2, #58	; 0x3a
 8001e20:	5aa1      	ldrh	r1, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e22:	68a5      	ldr	r5, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001e24:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e26:	0140      	lsls	r0, r0, #5
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001e28:	b292      	uxth	r2, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e2a:	4285      	cmp	r5, r0
 8001e2c:	d03b      	beq.n	8001ea6 <HAL_UART_IRQHandler+0x25e>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001e2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e30:	400a      	ands	r2, r1
 8001e32:	1c58      	adds	r0, r3, #1
 8001e34:	6560      	str	r0, [r4, #84]	; 0x54
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0U)
 8001e3a:	215a      	movs	r1, #90	; 0x5a
 8001e3c:	5a62      	ldrh	r2, [r4, r1]
 8001e3e:	3a01      	subs	r2, #1
 8001e40:	b292      	uxth	r2, r2
 8001e42:	5262      	strh	r2, [r4, r1]
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	d01d      	beq.n	8001e84 <HAL_UART_IRQHandler+0x23c>
 8001e48:	0018      	movs	r0, r3
 8001e4a:	e73e      	b.n	8001cca <HAL_UART_IRQHandler+0x82>
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e4c:	2140      	movs	r1, #64	; 0x40
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4382      	bics	r2, r0
 8001e52:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e70d      	b.n	8001c78 <HAL_UART_IRQHandler+0x30>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e5c:	6922      	ldr	r2, [r4, #16]
 8001e5e:	2a00      	cmp	r2, #0
 8001e60:	d1b0      	bne.n	8001dc4 <HAL_UART_IRQHandler+0x17c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8001e62:	6d62      	ldr	r2, [r4, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8001e64:	400b      	ands	r3, r1
 8001e66:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2U;
 8001e68:	3202      	adds	r2, #2
 8001e6a:	6562      	str	r2, [r4, #84]	; 0x54
 8001e6c:	e7af      	b.n	8001dce <HAL_UART_IRQHandler+0x186>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e6e:	6922      	ldr	r2, [r4, #16]
 8001e70:	2a00      	cmp	r2, #0
 8001e72:	d18f      	bne.n	8001d94 <HAL_UART_IRQHandler+0x14c>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8001e74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e76:	880a      	ldrh	r2, [r1, #0]
        huart->pTxBuffPtr += 2U;
 8001e78:	3102      	adds	r1, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e7a:	05d2      	lsls	r2, r2, #23
 8001e7c:	0dd2      	lsrs	r2, r2, #23
 8001e7e:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001e80:	64e1      	str	r1, [r4, #76]	; 0x4c
 8001e82:	e78c      	b.n	8001d9e <HAL_UART_IRQHandler+0x156>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <HAL_UART_IRQHandler+0x270>)
      HAL_UART_RxCpltCallback(huart);
 8001e88:	0020      	movs	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	3123      	adds	r1, #35	; 0x23
 8001e92:	31ff      	adds	r1, #255	; 0xff
 8001e94:	438a      	bics	r2, r1
 8001e96:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001e98:	2220      	movs	r2, #32
 8001e9a:	236a      	movs	r3, #106	; 0x6a
 8001e9c:	54e2      	strb	r2, [r4, r3]
      HAL_UART_RxCpltCallback(huart);
 8001e9e:	f000 f963 	bl	8002168 <HAL_UART_RxCpltCallback>
 8001ea2:	6820      	ldr	r0, [r4, #0]
 8001ea4:	e711      	b.n	8001cca <HAL_UART_IRQHandler+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ea6:	6920      	ldr	r0, [r4, #16]
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d1c0      	bne.n	8001e2e <HAL_UART_IRQHandler+0x1e6>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8001eac:	6d60      	ldr	r0, [r4, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8001eae:	400a      	ands	r2, r1
 8001eb0:	8002      	strh	r2, [r0, #0]
      huart->pRxBuffPtr +=2U;
 8001eb2:	3002      	adds	r0, #2
 8001eb4:	6560      	str	r0, [r4, #84]	; 0x54
 8001eb6:	e7c0      	b.n	8001e3a <HAL_UART_IRQHandler+0x1f2>
 8001eb8:	fffffedf 	.word	0xfffffedf
 8001ebc:	08001c35 	.word	0x08001c35

08001ec0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ec0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001ec2:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ec4:	07da      	lsls	r2, r3, #31
 8001ec6:	d506      	bpl.n	8001ed6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ec8:	6801      	ldr	r1, [r0, #0]
 8001eca:	4c28      	ldr	r4, [pc, #160]	; (8001f6c <UART_AdvFeatureConfig+0xac>)
 8001ecc:	684a      	ldr	r2, [r1, #4]
 8001ece:	4022      	ands	r2, r4
 8001ed0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ed2:	4322      	orrs	r2, r4
 8001ed4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ed6:	079a      	lsls	r2, r3, #30
 8001ed8:	d506      	bpl.n	8001ee8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001eda:	6801      	ldr	r1, [r0, #0]
 8001edc:	4c24      	ldr	r4, [pc, #144]	; (8001f70 <UART_AdvFeatureConfig+0xb0>)
 8001ede:	684a      	ldr	r2, [r1, #4]
 8001ee0:	4022      	ands	r2, r4
 8001ee2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001ee4:	4322      	orrs	r2, r4
 8001ee6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ee8:	075a      	lsls	r2, r3, #29
 8001eea:	d506      	bpl.n	8001efa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001eec:	6801      	ldr	r1, [r0, #0]
 8001eee:	4c21      	ldr	r4, [pc, #132]	; (8001f74 <UART_AdvFeatureConfig+0xb4>)
 8001ef0:	684a      	ldr	r2, [r1, #4]
 8001ef2:	4022      	ands	r2, r4
 8001ef4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ef6:	4322      	orrs	r2, r4
 8001ef8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001efa:	071a      	lsls	r2, r3, #28
 8001efc:	d506      	bpl.n	8001f0c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001efe:	6801      	ldr	r1, [r0, #0]
 8001f00:	4c1d      	ldr	r4, [pc, #116]	; (8001f78 <UART_AdvFeatureConfig+0xb8>)
 8001f02:	684a      	ldr	r2, [r1, #4]
 8001f04:	4022      	ands	r2, r4
 8001f06:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f0c:	06da      	lsls	r2, r3, #27
 8001f0e:	d506      	bpl.n	8001f1e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f10:	6801      	ldr	r1, [r0, #0]
 8001f12:	4c1a      	ldr	r4, [pc, #104]	; (8001f7c <UART_AdvFeatureConfig+0xbc>)
 8001f14:	688a      	ldr	r2, [r1, #8]
 8001f16:	4022      	ands	r2, r4
 8001f18:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f1a:	4322      	orrs	r2, r4
 8001f1c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f1e:	069a      	lsls	r2, r3, #26
 8001f20:	d506      	bpl.n	8001f30 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f22:	6801      	ldr	r1, [r0, #0]
 8001f24:	4c16      	ldr	r4, [pc, #88]	; (8001f80 <UART_AdvFeatureConfig+0xc0>)
 8001f26:	688a      	ldr	r2, [r1, #8]
 8001f28:	4022      	ands	r2, r4
 8001f2a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001f2c:	4322      	orrs	r2, r4
 8001f2e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f30:	065a      	lsls	r2, r3, #25
 8001f32:	d50a      	bpl.n	8001f4a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f34:	6801      	ldr	r1, [r0, #0]
 8001f36:	4d13      	ldr	r5, [pc, #76]	; (8001f84 <UART_AdvFeatureConfig+0xc4>)
 8001f38:	684a      	ldr	r2, [r1, #4]
 8001f3a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f3c:	402a      	ands	r2, r5
 8001f3e:	4322      	orrs	r2, r4
 8001f40:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f42:	2280      	movs	r2, #128	; 0x80
 8001f44:	0352      	lsls	r2, r2, #13
 8001f46:	4294      	cmp	r4, r2
 8001f48:	d009      	beq.n	8001f5e <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f4a:	061b      	lsls	r3, r3, #24
 8001f4c:	d506      	bpl.n	8001f5c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f4e:	6802      	ldr	r2, [r0, #0]
 8001f50:	490d      	ldr	r1, [pc, #52]	; (8001f88 <UART_AdvFeatureConfig+0xc8>)
 8001f52:	6853      	ldr	r3, [r2, #4]
 8001f54:	400b      	ands	r3, r1
 8001f56:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6053      	str	r3, [r2, #4]
}
 8001f5c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f5e:	684a      	ldr	r2, [r1, #4]
 8001f60:	4c0a      	ldr	r4, [pc, #40]	; (8001f8c <UART_AdvFeatureConfig+0xcc>)
 8001f62:	4022      	ands	r2, r4
 8001f64:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f66:	4322      	orrs	r2, r4
 8001f68:	604a      	str	r2, [r1, #4]
 8001f6a:	e7ee      	b.n	8001f4a <UART_AdvFeatureConfig+0x8a>
 8001f6c:	fffdffff 	.word	0xfffdffff
 8001f70:	fffeffff 	.word	0xfffeffff
 8001f74:	fffbffff 	.word	0xfffbffff
 8001f78:	ffff7fff 	.word	0xffff7fff
 8001f7c:	ffffefff 	.word	0xffffefff
 8001f80:	ffffdfff 	.word	0xffffdfff
 8001f84:	ffefffff 	.word	0xffefffff
 8001f88:	fff7ffff 	.word	0xfff7ffff
 8001f8c:	ff9fffff 	.word	0xff9fffff

08001f90 <HAL_UART_Init>:
{
 8001f90:	b570      	push	{r4, r5, r6, lr}
 8001f92:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001f94:	d100      	bne.n	8001f98 <HAL_UART_Init+0x8>
 8001f96:	e082      	b.n	800209e <HAL_UART_Init+0x10e>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f98:	2369      	movs	r3, #105	; 0x69
 8001f9a:	5cc3      	ldrb	r3, [r0, r3]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d078      	beq.n	8002094 <HAL_UART_Init+0x104>
  huart->gState = HAL_UART_STATE_BUSY;
 8001fa2:	2224      	movs	r2, #36	; 0x24
 8001fa4:	2369      	movs	r3, #105	; 0x69
  __HAL_UART_DISABLE(huart);
 8001fa6:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001fa8:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8001faa:	682b      	ldr	r3, [r5, #0]
 8001fac:	3a23      	subs	r2, #35	; 0x23
 8001fae:	4393      	bics	r3, r2
 8001fb0:	602b      	str	r3, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fb2:	6920      	ldr	r0, [r4, #16]
 8001fb4:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fb6:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fb8:	4303      	orrs	r3, r0
 8001fba:	6960      	ldr	r0, [r4, #20]
 8001fbc:	69e2      	ldr	r2, [r4, #28]
 8001fbe:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fc0:	484d      	ldr	r0, [pc, #308]	; (80020f8 <HAL_UART_Init+0x168>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fc2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fc4:	4001      	ands	r1, r0
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fca:	686b      	ldr	r3, [r5, #4]
 8001fcc:	494b      	ldr	r1, [pc, #300]	; (80020fc <HAL_UART_Init+0x16c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001fce:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd0:	400b      	ands	r3, r1
 8001fd2:	68e1      	ldr	r1, [r4, #12]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001fd8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001fda:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001fdc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001fde:	4848      	ldr	r0, [pc, #288]	; (8002100 <HAL_UART_Init+0x170>)
 8001fe0:	4001      	ands	r1, r0
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_UART_Init+0x174>)
 8001fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fea:	2303      	movs	r3, #3
 8001fec:	400b      	ands	r3, r1
 8001fee:	4946      	ldr	r1, [pc, #280]	; (8002108 <HAL_UART_Init+0x178>)
 8001ff0:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	0209      	lsls	r1, r1, #8
 8001ff6:	428a      	cmp	r2, r1
 8001ff8:	d02d      	beq.n	8002056 <HAL_UART_Init+0xc6>
    switch (clocksource)
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d063      	beq.n	80020c6 <HAL_UART_Init+0x136>
 8001ffe:	d950      	bls.n	80020a2 <HAL_UART_Init+0x112>
 8002000:	2b04      	cmp	r3, #4
 8002002:	d056      	beq.n	80020b2 <HAL_UART_Init+0x122>
 8002004:	2b08      	cmp	r3, #8
 8002006:	d14a      	bne.n	800209e <HAL_UART_Init+0x10e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002008:	6863      	ldr	r3, [r4, #4]
 800200a:	0858      	lsrs	r0, r3, #1
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	469c      	mov	ip, r3
 8002012:	4460      	add	r0, ip
 8002014:	6861      	ldr	r1, [r4, #4]
 8002016:	f7fe f87f 	bl	8000118 <__udivsi3>
 800201a:	0400      	lsls	r0, r0, #16
 800201c:	0c00      	lsrs	r0, r0, #16
 800201e:	60e8      	str	r0, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002022:	2b00      	cmp	r3, #0
 8002024:	d132      	bne.n	800208c <HAL_UART_Init+0xfc>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	4938      	ldr	r1, [pc, #224]	; (800210c <HAL_UART_Init+0x17c>)
 800202a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800202c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800202e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002030:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	438a      	bics	r2, r1
 8002038:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	3907      	subs	r1, #7
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
  huart->gState  = HAL_UART_STATE_READY;
 8002042:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002044:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002046:	3168      	adds	r1, #104	; 0x68
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002048:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->gState  = HAL_UART_STATE_READY;
 800204a:	5462      	strb	r2, [r4, r1]
  huart->RxState = HAL_UART_STATE_READY;
 800204c:	3101      	adds	r1, #1
 800204e:	5462      	strb	r2, [r4, r1]
  __HAL_UNLOCK(huart);
 8002050:	3248      	adds	r2, #72	; 0x48
 8002052:	54a3      	strb	r3, [r4, r2]
  return (UART_CheckIdleState(huart));
 8002054:	e024      	b.n	80020a0 <HAL_UART_Init+0x110>
    switch (clocksource)
 8002056:	2b02      	cmp	r3, #2
 8002058:	d031      	beq.n	80020be <HAL_UART_Init+0x12e>
 800205a:	d948      	bls.n	80020ee <HAL_UART_Init+0x15e>
 800205c:	2b04      	cmp	r3, #4
 800205e:	d03a      	beq.n	80020d6 <HAL_UART_Init+0x146>
 8002060:	2b08      	cmp	r3, #8
 8002062:	d134      	bne.n	80020ce <HAL_UART_Init+0x13e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002064:	6863      	ldr	r3, [r4, #4]
 8002066:	0858      	lsrs	r0, r3, #1
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	025b      	lsls	r3, r3, #9
 800206c:	469c      	mov	ip, r3
 800206e:	6861      	ldr	r1, [r4, #4]
 8002070:	4460      	add	r0, ip
 8002072:	f7fe f851 	bl	8000118 <__udivsi3>
 8002076:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 8002078:	230f      	movs	r3, #15
 800207a:	0002      	movs	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800207c:	0700      	lsls	r0, r0, #28
    brrtemp = usartdiv & 0xFFF0U;
 800207e:	439a      	bics	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002080:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8002082:	4310      	orrs	r0, r2
 8002084:	60e8      	str	r0, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0cc      	beq.n	8002026 <HAL_UART_Init+0x96>
    UART_AdvFeatureConfig(huart);
 800208c:	0020      	movs	r0, r4
 800208e:	f7ff ff17 	bl	8001ec0 <UART_AdvFeatureConfig>
 8002092:	e7c8      	b.n	8002026 <HAL_UART_Init+0x96>
    huart->Lock = HAL_UNLOCKED;
 8002094:	2268      	movs	r2, #104	; 0x68
 8002096:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002098:	f000 fbb4 	bl	8002804 <HAL_UART_MspInit>
 800209c:	e781      	b.n	8001fa2 <HAL_UART_Init+0x12>
    return HAL_ERROR;
 800209e:	2001      	movs	r0, #1
}
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1fb      	bne.n	800209e <HAL_UART_Init+0x10e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80020a6:	f7ff f8f9 	bl	800129c <HAL_RCC_GetPCLK1Freq>
 80020aa:	6863      	ldr	r3, [r4, #4]
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	1818      	adds	r0, r3, r0
 80020b0:	e7b0      	b.n	8002014 <HAL_UART_Init+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80020b2:	f7ff f8b9 	bl	8001228 <HAL_RCC_GetSysClockFreq>
 80020b6:	6863      	ldr	r3, [r4, #4]
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	1818      	adds	r0, r3, r0
 80020bc:	e7aa      	b.n	8002014 <HAL_UART_Init+0x84>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	0858      	lsrs	r0, r3, #1
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_UART_Init+0x180>)
 80020c4:	e7d2      	b.n	800206c <HAL_UART_Init+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80020c6:	6863      	ldr	r3, [r4, #4]
 80020c8:	0858      	lsrs	r0, r3, #1
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_UART_Init+0x184>)
 80020cc:	e7a0      	b.n	8002010 <HAL_UART_Init+0x80>
    huart->Instance->BRR = brrtemp;
 80020ce:	2300      	movs	r3, #0
    return HAL_ERROR;
 80020d0:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80020d2:	60eb      	str	r3, [r5, #12]
 80020d4:	e7e4      	b.n	80020a0 <HAL_UART_Init+0x110>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80020d6:	f7ff f8a7 	bl	8001228 <HAL_RCC_GetSysClockFreq>
 80020da:	6863      	ldr	r3, [r4, #4]
 80020dc:	0040      	lsls	r0, r0, #1
 80020de:	085b      	lsrs	r3, r3, #1
 80020e0:	18c0      	adds	r0, r0, r3
 80020e2:	6861      	ldr	r1, [r4, #4]
 80020e4:	f7fe f818 	bl	8000118 <__udivsi3>
 80020e8:	6825      	ldr	r5, [r4, #0]
 80020ea:	b280      	uxth	r0, r0
 80020ec:	e7c4      	b.n	8002078 <HAL_UART_Init+0xe8>
    switch (clocksource)
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ed      	bne.n	80020ce <HAL_UART_Init+0x13e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80020f2:	f7ff f8d3 	bl	800129c <HAL_RCC_GetPCLK1Freq>
 80020f6:	e7f0      	b.n	80020da <HAL_UART_Init+0x14a>
 80020f8:	ffff69f3 	.word	0xffff69f3
 80020fc:	ffffcfff 	.word	0xffffcfff
 8002100:	fffff4ff 	.word	0xfffff4ff
 8002104:	40021000 	.word	0x40021000
 8002108:	0800372c 	.word	0x0800372c
 800210c:	fffff7ff 	.word	0xfffff7ff
 8002110:	00f42400 	.word	0x00f42400
 8002114:	007a1200 	.word	0x007a1200

08002118 <get_current_potentiometer>:
#include "function.h"
#include "variables.h"
#define R 155		// Resistor chosen in H-brigde circuit to transform proportional current to a voltage

void get_current_potentiometer(){
	sampledCurrent = ADC_buffer[1];
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <get_current_potentiometer+0x34>)
 800211a:	490d      	ldr	r1, [pc, #52]	; (8002150 <get_current_potentiometer+0x38>)
 800211c:	681b      	ldr	r3, [r3, #0]
void get_current_potentiometer(){
 800211e:	b570      	push	{r4, r5, r6, lr}
	sampledCurrent = ADC_buffer[1];
 8002120:	685a      	ldr	r2, [r3, #4]
	sampledPotentiometer = ADC_buffer[0];
 8002122:	4d0c      	ldr	r5, [pc, #48]	; (8002154 <get_current_potentiometer+0x3c>)
	sampledCurrent = ADC_buffer[1];
 8002124:	600a      	str	r2, [r1, #0]

	//if (q1_new - prev_q1 > 0.05 || prev_q1 - q1_new > 0.05){
	//	q1 = q1_new;
	//}

	torque = (sampledCurrent<<9);
 8002126:	2100      	movs	r1, #0
	sampledPotentiometer = ADC_buffer[0];
 8002128:	681b      	ldr	r3, [r3, #0]
//	q1dot = (prevprev_q1 - prev_q1<<2+3*q1)/(time<<2); // time variable needs to change




	sprintf(send_torque,"%lu", sampledCurrent);
 800212a:	4c0b      	ldr	r4, [pc, #44]	; (8002158 <get_current_potentiometer+0x40>)
	sampledPotentiometer = ADC_buffer[0];
 800212c:	602b      	str	r3, [r5, #0]
	torque = (sampledCurrent<<9);
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <get_current_potentiometer+0x44>)
 8002130:	7019      	strb	r1, [r3, #0]
	sprintf(send_torque,"%lu", sampledCurrent);
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <get_current_potentiometer+0x48>)
 8002134:	0021      	movs	r1, r4
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	f000 ff18 	bl	8002f6c <siprintf>
	sprintf(send_q1,"%lu", sampledPotentiometer);
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <get_current_potentiometer+0x4c>)
 800213e:	682a      	ldr	r2, [r5, #0]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	0021      	movs	r1, r4
 8002144:	f000 ff12 	bl	8002f6c <siprintf>
	// Do conversion equation to get 'real' value



	// store in buffer to be send across UART
}
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	2000009c 	.word	0x2000009c
 8002150:	200000cc 	.word	0x200000cc
 8002154:	200000d0 	.word	0x200000d0
 8002158:	08003730 	.word	0x08003730
 800215c:	20000100 	.word	0x20000100
 8002160:	200000e4 	.word	0x200000e4
 8002164:	200000d8 	.word	0x200000d8

08002168 <HAL_UART_RxCpltCallback>:
#define KI


// interrupt when byte is received on UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	uart_flag = 1;
 8002168:	2201      	movs	r2, #1
 800216a:	4b01      	ldr	r3, [pc, #4]	; (8002170 <HAL_UART_RxCpltCallback+0x8>)
 800216c:	701a      	strb	r2, [r3, #0]
}
 800216e:	4770      	bx	lr
 8002170:	20000108 	.word	0x20000108

08002174 <HAL_GPIO_EXTI_Callback>:

//interrupt when encoder is experiencing an rising or falling edge
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	encoder_flag = 1;
 8002174:	2201      	movs	r2, #1
 8002176:	4b01      	ldr	r3, [pc, #4]	; (800217c <HAL_GPIO_EXTI_Callback+0x8>)
 8002178:	701a      	strb	r2, [r3, #0]

}
 800217a:	4770      	bx	lr
 800217c:	200000aa 	.word	0x200000aa

08002180 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance == htim16.Instance){
 8002180:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002182:	6803      	ldr	r3, [r0, #0]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	4293      	cmp	r3, r2
 8002188:	d00a      	beq.n	80021a0 <HAL_TIM_PeriodElapsedCallback+0x20>
		send_data_flag = 1;
	}
	else if(htim->Instance == htim14.Instance){
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	4293      	cmp	r3, r2
 8002190:	d000      	beq.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x14>
		adc_flag = 1;
		data_flag = 1;
	}

}
 8002192:	4770      	bx	lr
		adc_flag = 1;
 8002194:	2301      	movs	r3, #1
 8002196:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002198:	7013      	strb	r3, [r2, #0]
		data_flag = 1;
 800219a:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800219c:	7013      	strb	r3, [r2, #0]
}
 800219e:	e7f8      	b.n	8002192 <HAL_TIM_PeriodElapsedCallback+0x12>
		send_data_flag = 1;
 80021a0:	2201      	movs	r2, #1
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e7f4      	b.n	8002192 <HAL_TIM_PeriodElapsedCallback+0x12>
 80021a8:	200002e4 	.word	0x200002e4
 80021ac:	20000214 	.word	0x20000214
 80021b0:	200000a0 	.word	0x200000a0
 80021b4:	200000a8 	.word	0x200000a8
 80021b8:	20000018 	.word	0x20000018

080021bc <HAL_TIM_OC_DelayElapsedCallback>:
 80021bc:	2201      	movs	r2, #1
 80021be:	4b01      	ldr	r3, [pc, #4]	; (80021c4 <HAL_TIM_OC_DelayElapsedCallback+0x8>)
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	4770      	bx	lr
 80021c4:	200000b0 	.word	0x200000b0

080021c8 <HAL_TIM_IC_CaptureCallback>:
 80021c8:	2201      	movs	r2, #1
 80021ca:	4b01      	ldr	r3, [pc, #4]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x8>)
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	4770      	bx	lr
 80021d0:	200000b0 	.word	0x200000b0

080021d4 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
 80021d4:	2201      	movs	r2, #1
 80021d6:	4b01      	ldr	r3, [pc, #4]	; (80021dc <HAL_TIM_PWM_PulseFinishedCallback+0x8>)
 80021d8:	701a      	strb	r2, [r3, #0]
}
 80021da:	4770      	bx	lr
 80021dc:	200000b0 	.word	0x200000b0

080021e0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
	memset(rx_buffer,0x00, 16);
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_UART_TxCpltCallback+0x28>)
void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 80021e2:	b510      	push	{r4, lr}
	memset(rx_buffer,0x00, 16);
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	2210      	movs	r2, #16
 80021e8:	2100      	movs	r1, #0
 80021ea:	f000 fdee 	bl	8002dca <memset>
	memset(rx_buffer_copy,0x00, 16);
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_UART_TxCpltCallback+0x2c>)
 80021f0:	2210      	movs	r2, #16
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	2100      	movs	r1, #0
 80021f6:	f000 fde8 	bl	8002dca <memset>
//	rx_buffer_cntr = 0;
	memset(data_buffer,0x00,40);
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_UART_TxCpltCallback+0x30>)
 80021fc:	2228      	movs	r2, #40	; 0x28
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	2100      	movs	r1, #0
 8002202:	f000 fde2 	bl	8002dca <memset>
}
 8002206:	bd10      	pop	{r4, pc}
 8002208:	200000bc 	.word	0x200000bc
 800220c:	200000c4 	.word	0x200000c4
 8002210:	200000a4 	.word	0x200000a4

08002214 <read_motor_position>:


void read_motor_position(){
 8002214:	b510      	push	{r4, lr}

	//prevprev_q2 = prev_q2;
	//prev_q2 = q2;

	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8002216:	2120      	movs	r1, #32
 8002218:	4808      	ldr	r0, [pc, #32]	; (800223c <read_motor_position+0x28>)
 800221a:	f7fe fce3 	bl	8000be4 <HAL_GPIO_ReadPin>
		q2_steps -= 1;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <read_motor_position+0x2c>)
 8002220:	681a      	ldr	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8002222:	2801      	cmp	r0, #1
 8002224:	d007      	beq.n	8002236 <read_motor_position+0x22>
		//q2 = q2_steps*dir_increment_size;
	}
	else{ // actuated pendulum is turning anti-clockwise
		q2_steps += 1;
 8002226:	3201      	adds	r2, #1
 8002228:	601a      	str	r2, [r3, #0]
		//q2 = q2_steps*dir_increment_size;
	}
	sprintf(send_q2,"%d", q2_steps);
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <read_motor_position+0x30>)
 800222c:	4906      	ldr	r1, [pc, #24]	; (8002248 <read_motor_position+0x34>)
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	f000 fe9c 	bl	8002f6c <siprintf>

	//three point backward difference
//	q2dot = (prevprev_q2 - prev_q2<<2+3*q2)/(2*time); // time variable needs to change

}
 8002234:	bd10      	pop	{r4, pc}
		q2_steps -= 1;
 8002236:	3a01      	subs	r2, #1
 8002238:	e7f6      	b.n	8002228 <read_motor_position+0x14>
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	48000400 	.word	0x48000400
 8002240:	200000b4 	.word	0x200000b4
 8002244:	200000dc 	.word	0x200000dc
 8002248:	08003734 	.word	0x08003734

0800224c <startPeripherals>:
extern ADC_HandleTypeDef hadc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim16;

void startPeripherals(){
 800224c:	b510      	push	{r4, lr}

	HAL_ADCEx_Calibration_Start(&hadc);					// Calibrate the ADC
 800224e:	4c12      	ldr	r4, [pc, #72]	; (8002298 <startPeripherals+0x4c>)
 8002250:	0020      	movs	r0, r4
 8002252:	f7fe fa39 	bl	80006c8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, ADC_buffer, 2);			// Start to capture the ADC with DMA
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <startPeripherals+0x50>)
 8002258:	2202      	movs	r2, #2
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	0020      	movs	r0, r4
 800225e:	f7fe f913 	bl	8000488 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim14);						// Timer responsible for time-keeping and triggers system state to be send
 8002262:	480f      	ldr	r0, [pc, #60]	; (80022a0 <startPeripherals+0x54>)
 8002264:	f7ff f918 	bl	8001498 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);						// Timer responsible for time-keeping and triggers system state to be send
 8002268:	480e      	ldr	r0, [pc, #56]	; (80022a4 <startPeripherals+0x58>)
 800226a:	f7ff f915 	bl	8001498 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);			// Start the Timer Module with PWM
 800226e:	4c0e      	ldr	r4, [pc, #56]	; (80022a8 <startPeripherals+0x5c>)
 8002270:	2104      	movs	r1, #4
 8002272:	0020      	movs	r0, r4
 8002274:	f7ff f976 	bl	8001564 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8002278:	2200      	movs	r2, #0
 800227a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 800227c:	490b      	ldr	r1, [pc, #44]	; (80022ac <startPeripherals+0x60>)
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <startPeripherals+0x64>)
 8002282:	3201      	adds	r2, #1
 8002284:	f7ff fbd6 	bl	8001a34 <HAL_UART_Receive_IT>


//	HAL_Delay(500);										// Delay for peripherals to settle
	HAL_GPIO_WritePin(DEBUG_LED1_GPIO_Port,DEBUG_LED1_Pin,1); // LED ON indicates system is ready
 8002288:	2090      	movs	r0, #144	; 0x90
 800228a:	2201      	movs	r2, #1
 800228c:	2108      	movs	r1, #8
 800228e:	05c0      	lsls	r0, r0, #23
 8002290:	f7fe fcae 	bl	8000bf0 <HAL_GPIO_WritePin>

	//startval_sampledPotentiometer = ADC_buffer[1];

}
 8002294:	bd10      	pop	{r4, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	20000298 	.word	0x20000298
 800229c:	2000009c 	.word	0x2000009c
 80022a0:	20000214 	.word	0x20000214
 80022a4:	200002e4 	.word	0x200002e4
 80022a8:	20000120 	.word	0x20000120
 80022ac:	200000c8 	.word	0x200000c8
 80022b0:	200001a4 	.word	0x200001a4

080022b4 <init_variables>:


void init_variables(){
 80022b4:	b570      	push	{r4, r5, r6, lr}

	rx_buffer = (uint8_t*)malloc(16*sizeof(uint8_t));
 80022b6:	2010      	movs	r0, #16
 80022b8:	f000 fd74 	bl	8002da4 <malloc>
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <init_variables+0xc8>)
	memset(rx_buffer,0x00,32);
 80022be:	2220      	movs	r2, #32
 80022c0:	2100      	movs	r1, #0
	rx_buffer = (uint8_t*)malloc(16*sizeof(uint8_t));
 80022c2:	6018      	str	r0, [r3, #0]
	memset(rx_buffer,0x00,32);
 80022c4:	f000 fd81 	bl	8002dca <memset>

	rx_buffer_copy = (uint8_t*)malloc(16*sizeof(uint8_t));
 80022c8:	2010      	movs	r0, #16
 80022ca:	f000 fd6b 	bl	8002da4 <malloc>
 80022ce:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <init_variables+0xcc>)
	memset(rx_buffer_copy,0x00,32);
 80022d0:	2220      	movs	r2, #32
 80022d2:	2100      	movs	r1, #0
	rx_buffer_copy = (uint8_t*)malloc(16*sizeof(uint8_t));
 80022d4:	6018      	str	r0, [r3, #0]
	memset(rx_buffer_copy,0x00,32);
 80022d6:	f000 fd78 	bl	8002dca <memset>


	torque_received = (char*)malloc(8*sizeof(char));
 80022da:	2101      	movs	r1, #1
 80022dc:	2008      	movs	r0, #8
 80022de:	f000 fd33 	bl	8002d48 <calloc>
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <init_variables+0xd0>)
	memset(torque_received,0x00,8);

	motor_dir = (char*)malloc(8*sizeof(char));
 80022e4:	2101      	movs	r1, #1
	torque_received = (char*)malloc(8*sizeof(char));
 80022e6:	6018      	str	r0, [r3, #0]
	motor_dir = (char*)malloc(8*sizeof(char));
 80022e8:	2008      	movs	r0, #8
 80022ea:	f000 fd2d 	bl	8002d48 <calloc>
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <init_variables+0xd4>)
	memset(motor_dir,0x00,8);


	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 80022f0:	2101      	movs	r1, #1
	motor_dir = (char*)malloc(8*sizeof(char));
 80022f2:	6018      	str	r0, [r3, #0]
	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 80022f4:	2008      	movs	r0, #8
 80022f6:	f000 fd27 	bl	8002d48 <calloc>
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <init_variables+0xd8>)
	memset(verification,0x00,8);

	// might to be larger to account for decimals
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 80022fc:	2101      	movs	r1, #1
	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 80022fe:	6018      	str	r0, [r3, #0]
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 8002300:	2048      	movs	r0, #72	; 0x48
 8002302:	f000 fd21 	bl	8002d48 <calloc>
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <init_variables+0xdc>)
 8002308:	0004      	movs	r4, r0
 800230a:	6018      	str	r0, [r3, #0]
	memset(data_buffer,0x00,72);

	// forming dat structure to be send
	memcpy(data_buffer, dollar, strlen((char*)dollar));
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <init_variables+0xe0>)
 800230e:	681d      	ldr	r5, [r3, #0]
 8002310:	0028      	movs	r0, r5
 8002312:	f7fd fef9 	bl	8000108 <strlen>
 8002316:	0029      	movs	r1, r5
 8002318:	0002      	movs	r2, r0
 800231a:	0020      	movs	r0, r4
 800231c:	f000 fd4c 	bl	8002db8 <memcpy>


	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8002320:	2008      	movs	r0, #8
 8002322:	f000 fd3f 	bl	8002da4 <malloc>
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <init_variables+0xe4>)
	memset(ADC_buffer,0x00,2);

	//atan_vals = (float*)malloc(100*sizeof(double));
	//memset(atan_vals,0x00,100);

	scratchpad = (char*)malloc(5*sizeof(char));
 8002328:	2101      	movs	r1, #1
	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 800232a:	6018      	str	r0, [r3, #0]
	memset(ADC_buffer,0x00,2);
 800232c:	2300      	movs	r3, #0
 800232e:	8003      	strh	r3, [r0, #0]
	scratchpad = (char*)malloc(5*sizeof(char));
 8002330:	2005      	movs	r0, #5
 8002332:	f000 fd09 	bl	8002d48 <calloc>
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <init_variables+0xe8>)
	memset(scratchpad,0x00,5);

	send_q1 = (char*)malloc(10*sizeof(char));
 8002338:	2101      	movs	r1, #1
	scratchpad = (char*)malloc(5*sizeof(char));
 800233a:	6018      	str	r0, [r3, #0]
	send_q1 = (char*)malloc(10*sizeof(char));
 800233c:	200a      	movs	r0, #10
 800233e:	f000 fd03 	bl	8002d48 <calloc>
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <init_variables+0xec>)
	memset(send_q1,0x00,10);
	send_q2 = (char*)malloc(32*sizeof(char));
 8002344:	2101      	movs	r1, #1
	send_q1 = (char*)malloc(10*sizeof(char));
 8002346:	6018      	str	r0, [r3, #0]
	send_q2 = (char*)malloc(32*sizeof(char));
 8002348:	2020      	movs	r0, #32
 800234a:	f000 fcfd 	bl	8002d48 <calloc>
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <init_variables+0xf0>)
 8002350:	0004      	movs	r4, r0
 8002352:	6018      	str	r0, [r3, #0]
	memset(send_q2,0x00,32);
	send_torque = (char*)malloc(4*sizeof(char));
 8002354:	2101      	movs	r1, #1
 8002356:	2004      	movs	r0, #4
 8002358:	f000 fcf6 	bl	8002d48 <calloc>
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <init_variables+0xf4>)
	memset(send_torque,0x00,4);
	send_time = (char*)malloc(4*sizeof(char));
 800235e:	2101      	movs	r1, #1
	send_torque = (char*)malloc(4*sizeof(char));
 8002360:	6018      	str	r0, [r3, #0]
	send_time = (char*)malloc(4*sizeof(char));
 8002362:	2004      	movs	r0, #4
 8002364:	f000 fcf0 	bl	8002d48 <calloc>
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <init_variables+0xf8>)
	memset(send_time,0x00,4);


	sprintf(send_q2,"%d", q2_steps);
 800236a:	4911      	ldr	r1, [pc, #68]	; (80023b0 <init_variables+0xfc>)
	send_time = (char*)malloc(4*sizeof(char));
 800236c:	6018      	str	r0, [r3, #0]
	sprintf(send_q2,"%d", q2_steps);
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <init_variables+0x100>)
 8002370:	0020      	movs	r0, r4
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f000 fdfa 	bl	8002f6c <siprintf>

	// temporary, this should be done where the variables are measured

}
 8002378:	bd70      	pop	{r4, r5, r6, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	200000bc 	.word	0x200000bc
 8002380:	200000c4 	.word	0x200000c4
 8002384:	20000104 	.word	0x20000104
 8002388:	200000ac 	.word	0x200000ac
 800238c:	2000010c 	.word	0x2000010c
 8002390:	200000a4 	.word	0x200000a4
 8002394:	2000000c 	.word	0x2000000c
 8002398:	2000009c 	.word	0x2000009c
 800239c:	200000d4 	.word	0x200000d4
 80023a0:	200000d8 	.word	0x200000d8
 80023a4:	200000dc 	.word	0x200000dc
 80023a8:	200000e4 	.word	0x200000e4
 80023ac:	200000e0 	.word	0x200000e0
 80023b0:	08003734 	.word	0x08003734
 80023b4:	200000b4 	.word	0x200000b4

080023b8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80023b8:	2312      	movs	r3, #18
{
 80023ba:	b530      	push	{r4, r5, lr}
 80023bc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80023be:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80023c0:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80023c2:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80023c6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80023c8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ca:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023cc:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80023ce:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d2:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80023d4:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d6:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023d8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80023da:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80023dc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023de:	f7fe fc19 	bl	8000c14 <HAL_RCC_OscConfig>
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d000      	beq.n	80023e8 <SystemClock_Config+0x30>
 80023e6:	e7fe      	b.n	80023e6 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e8:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ea:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ec:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023ee:	2101      	movs	r1, #1
 80023f0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f4:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023f6:	f7fe fe45 	bl	8001084 <HAL_RCC_ClockConfig>
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d000      	beq.n	8002400 <SystemClock_Config+0x48>
 80023fe:	e7fe      	b.n	80023fe <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002400:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002402:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002404:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002406:	f7fe ff59 	bl	80012bc <HAL_RCCEx_PeriphCLKConfig>
 800240a:	2800      	cmp	r0, #0
 800240c:	d000      	beq.n	8002410 <SystemClock_Config+0x58>
 800240e:	e7fe      	b.n	800240e <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002410:	f7fe ff3e 	bl	8001290 <HAL_RCC_GetHCLKFreq>
 8002414:	21fa      	movs	r1, #250	; 0xfa
 8002416:	0089      	lsls	r1, r1, #2
 8002418:	f7fd fe7e 	bl	8000118 <__udivsi3>
 800241c:	f7fe f9e8 	bl	80007f0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002420:	2004      	movs	r0, #4
 8002422:	f7fe fa01 	bl	8000828 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002426:	2001      	movs	r0, #1
 8002428:	2200      	movs	r2, #0
 800242a:	2100      	movs	r1, #0
 800242c:	4240      	negs	r0, r0
 800242e:	f7fe f9a1 	bl	8000774 <HAL_NVIC_SetPriority>
}
 8002432:	b015      	add	sp, #84	; 0x54
 8002434:	bd30      	pop	{r4, r5, pc}
 8002436:	46c0      	nop			; (mov r8, r8)

08002438 <main>:
{
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800243c:	f7fd ff0a 	bl	8000254 <HAL_Init>
  SystemClock_Config();
 8002440:	f7ff ffba 	bl	80023b8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	4c75      	ldr	r4, [pc, #468]	; (800261c <main+0x1e4>)
 8002448:	0289      	lsls	r1, r1, #10
 800244a:	6962      	ldr	r2, [r4, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800244c:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	430a      	orrs	r2, r1
 8002450:	6162      	str	r2, [r4, #20]
 8002452:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002454:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	6962      	ldr	r2, [r4, #20]
 8002460:	02c9      	lsls	r1, r1, #11
 8002462:	430a      	orrs	r2, r1
 8002464:	6162      	str	r2, [r4, #20]
 8002466:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002468:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	400b      	ands	r3, r1
 800246c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800246e:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002470:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002472:	f7fe fbbd 	bl	8000bf0 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : DEBUG_LED1_Pin DEBUG_LED2_Pin MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 800247c:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	a905      	add	r1, sp, #20
 8002480:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 8002482:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f7fe fac7 	bl	8000a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Pin */
  GPIO_InitStruct.Pin = ENCODER_Pin;
 800248e:	2310      	movs	r3, #16
 8002490:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002492:	4b63      	ldr	r3, [pc, #396]	; (8002620 <main+0x1e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8002494:	a905      	add	r1, sp, #20
 8002496:	4863      	ldr	r0, [pc, #396]	; (8002624 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002498:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 800249c:	f7fe fabe 	bl	8000a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 80024a0:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80024a2:	a905      	add	r1, sp, #20
 80024a4:	485f      	ldr	r0, [pc, #380]	; (8002624 <main+0x1ec>)
  GPIO_InitStruct.Pin = DIR_Pin;
 80024a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f7fe fab6 	bl	8000a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2007      	movs	r0, #7
 80024b6:	f7fe f95d 	bl	8000774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80024ba:	2007      	movs	r0, #7
 80024bc:	f7fe f98e 	bl	80007dc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024c0:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80024c2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024c4:	4333      	orrs	r3, r6
 80024c6:	6163      	str	r3, [r4, #20]
 80024c8:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80024ca:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024cc:	4033      	ands	r3, r6
 80024ce:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80024d0:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024d2:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80024d4:	f7fe f94e 	bl	8000774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024d8:	2009      	movs	r0, #9
 80024da:	f7fe f97f 	bl	80007dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2101      	movs	r1, #1
 80024e2:	200a      	movs	r0, #10
 80024e4:	f7fe f946 	bl	8000774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80024e8:	200a      	movs	r0, #10
 80024ea:	f7fe f977 	bl	80007dc <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 80024ee:	4c4e      	ldr	r4, [pc, #312]	; (8002628 <main+0x1f0>)
 80024f0:	4b4e      	ldr	r3, [pc, #312]	; (800262c <main+0x1f4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80024f2:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80024f4:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024f6:	2304      	movs	r3, #4
 80024f8:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024fa:	23c2      	movs	r3, #194	; 0xc2
 80024fc:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80024fe:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002500:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002502:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002504:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002506:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002508:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 800250a:	6226      	str	r6, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800250c:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800250e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002510:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002512:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002514:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002516:	f7fd ff0f 	bl	8000338 <HAL_ADC_Init>
 800251a:	2800      	cmp	r0, #0
 800251c:	d000      	beq.n	8002520 <main+0xe8>
 800251e:	e7fe      	b.n	800251e <main+0xe6>
  sConfig.Channel = ADC_CHANNEL_8;
 8002520:	2308      	movs	r3, #8
 8002522:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	015b      	lsls	r3, r3, #5
 8002528:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800252a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800252c:	a905      	add	r1, sp, #20
 800252e:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002530:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002532:	f7fe f845 	bl	80005c0 <HAL_ADC_ConfigChannel>
 8002536:	2800      	cmp	r0, #0
 8002538:	d000      	beq.n	800253c <main+0x104>
 800253a:	e7fe      	b.n	800253a <main+0x102>
  sConfig.Channel = ADC_CHANNEL_9;
 800253c:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800253e:	a905      	add	r1, sp, #20
 8002540:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8002542:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002544:	f7fe f83c 	bl	80005c0 <HAL_ADC_ConfigChannel>
 8002548:	2800      	cmp	r0, #0
 800254a:	d000      	beq.n	800254e <main+0x116>
 800254c:	e7fe      	b.n	800254c <main+0x114>
  huart1.Instance = USART1;
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <main+0x1f8>)
 8002550:	4a38      	ldr	r2, [pc, #224]	; (8002634 <main+0x1fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002552:	6098      	str	r0, [r3, #8]
  huart1.Instance = USART1;
 8002554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002556:	22e1      	movs	r2, #225	; 0xe1
 8002558:	0252      	lsls	r2, r2, #9
 800255a:	605a      	str	r2, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800255c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800255e:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002560:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002562:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002564:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002566:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002568:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800256a:	0018      	movs	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800256c:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800256e:	f7ff fd0f 	bl	8001f90 <HAL_UART_Init>
 8002572:	2800      	cmp	r0, #0
 8002574:	d000      	beq.n	8002578 <main+0x140>
 8002576:	e7fe      	b.n	8002576 <main+0x13e>
  htim3.Instance = TIM3;
 8002578:	4c2f      	ldr	r4, [pc, #188]	; (8002638 <main+0x200>)
 800257a:	4b30      	ldr	r3, [pc, #192]	; (800263c <main+0x204>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257c:	60a0      	str	r0, [r4, #8]
  htim3.Instance = TIM3;
 800257e:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48;
 8002580:	2330      	movs	r3, #48	; 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	6120      	str	r0, [r4, #16]
  htim3.Init.Prescaler = 48;
 8002584:	6063      	str	r3, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	61a0      	str	r0, [r4, #24]
  htim3.Init.Period = 99;
 8002588:	3333      	adds	r3, #51	; 0x33
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800258a:	0020      	movs	r0, r4
  htim3.Init.Period = 99;
 800258c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800258e:	f7fe ff8d 	bl	80014ac <HAL_TIM_PWM_Init>
 8002592:	2800      	cmp	r0, #0
 8002594:	d000      	beq.n	8002598 <main+0x160>
 8002596:	e7fe      	b.n	8002596 <main+0x15e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002598:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800259c:	a903      	add	r1, sp, #12
 800259e:	0020      	movs	r0, r4
 80025a0:	f7ff f9f2 	bl	8001988 <HAL_TIMEx_MasterConfigSynchronization>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d000      	beq.n	80025aa <main+0x172>
 80025a8:	e7fe      	b.n	80025a8 <main+0x170>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025aa:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80025ac:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ae:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b0:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025b2:	2204      	movs	r2, #4
 80025b4:	a905      	add	r1, sp, #20
 80025b6:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b8:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025ba:	f7ff f811 	bl	80015e0 <HAL_TIM_PWM_ConfigChannel>
 80025be:	1e05      	subs	r5, r0, #0
 80025c0:	d000      	beq.n	80025c4 <main+0x18c>
 80025c2:	e7fe      	b.n	80025c2 <main+0x18a>
  HAL_TIM_MspPostInit(&htim3);
 80025c4:	0020      	movs	r0, r4
 80025c6:	f000 f903 	bl	80027d0 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 80025ca:	481d      	ldr	r0, [pc, #116]	; (8002640 <main+0x208>)
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <main+0x20c>)
  htim14.Init.Period = 1000;
 80025ce:	24fa      	movs	r4, #250	; 0xfa
  htim14.Instance = TIM14;
 80025d0:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 192;
 80025d2:	23c0      	movs	r3, #192	; 0xc0
  htim14.Init.Period = 1000;
 80025d4:	00a4      	lsls	r4, r4, #2
  htim14.Init.Prescaler = 192;
 80025d6:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	6085      	str	r5, [r0, #8]
  htim14.Init.Period = 1000;
 80025da:	60c4      	str	r4, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025dc:	6105      	str	r5, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025de:	6185      	str	r5, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025e0:	f7fe fefe 	bl	80013e0 <HAL_TIM_Base_Init>
 80025e4:	2800      	cmp	r0, #0
 80025e6:	d000      	beq.n	80025ea <main+0x1b2>
 80025e8:	e7fe      	b.n	80025e8 <main+0x1b0>
  htim16.Instance = TIM16;
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <main+0x210>)
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <main+0x214>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	6098      	str	r0, [r3, #8]
  htim16.Instance = TIM16;
 80025f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 384;
 80025f2:	22c0      	movs	r2, #192	; 0xc0
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f4:	6118      	str	r0, [r3, #16]
  htim16.Init.Prescaler = 384;
 80025f6:	0052      	lsls	r2, r2, #1
  htim16.Init.RepetitionCounter = 0;
 80025f8:	6158      	str	r0, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fa:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025fc:	0018      	movs	r0, r3
  htim16.Init.Prescaler = 384;
 80025fe:	605a      	str	r2, [r3, #4]
  htim16.Init.Period = 1000;
 8002600:	60dc      	str	r4, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002602:	f7fe feed 	bl	80013e0 <HAL_TIM_Base_Init>
 8002606:	2800      	cmp	r0, #0
 8002608:	d000      	beq.n	800260c <main+0x1d4>
 800260a:	e7fe      	b.n	800260a <main+0x1d2>
  init_variables();
 800260c:	f7ff fe52 	bl	80022b4 <init_variables>
  startPeripherals();
 8002610:	f7ff fe1c 	bl	800224c <startPeripherals>
	  user_main();
 8002614:	f000 fb10 	bl	8002c38 <user_main>
 8002618:	e7fc      	b.n	8002614 <main+0x1dc>
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40021000 	.word	0x40021000
 8002620:	10310000 	.word	0x10310000
 8002624:	48000400 	.word	0x48000400
 8002628:	20000298 	.word	0x20000298
 800262c:	40012400 	.word	0x40012400
 8002630:	200001a4 	.word	0x200001a4
 8002634:	40013800 	.word	0x40013800
 8002638:	20000120 	.word	0x20000120
 800263c:	40000400 	.word	0x40000400
 8002640:	20000214 	.word	0x20000214
 8002644:	40002000 	.word	0x40002000
 8002648:	200002e4 	.word	0x200002e4
 800264c:	40014400 	.word	0x40014400

08002650 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002650:	e7fe      	b.n	8002650 <_Error_Handler>
 8002652:	46c0      	nop			; (mov r8, r8)

08002654 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002654:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002656:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002658:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <HAL_MspInit+0x40>)
{
 800265a:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265c:	6991      	ldr	r1, [r2, #24]
{
 800265e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4319      	orrs	r1, r3
 8002662:	6191      	str	r1, [r2, #24]
 8002664:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002666:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002668:	4013      	ands	r3, r2
 800266a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800266c:	2200      	movs	r2, #0
 800266e:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002670:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002672:	f7fe f87f 	bl	8000774 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002676:	2002      	movs	r0, #2
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	4240      	negs	r0, r0
 800267e:	f7fe f879 	bl	8000774 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002682:	2001      	movs	r0, #1
 8002684:	2200      	movs	r2, #0
 8002686:	2100      	movs	r1, #0
 8002688:	4240      	negs	r0, r0
 800268a:	f7fe f873 	bl	8000774 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268e:	b003      	add	sp, #12
 8002690:	bd00      	pop	{pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000

08002698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002698:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800269a:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_ADC_MspInit+0x74>)
 800269c:	6802      	ldr	r2, [r0, #0]
{
 800269e:	b087      	sub	sp, #28
 80026a0:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d001      	beq.n	80026aa <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026a6:	b007      	add	sp, #28
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026aa:	2680      	movs	r6, #128	; 0x80
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_ADC_MspInit+0x78>)
 80026ae:	00b6      	lsls	r6, r6, #2
 80026b0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2700      	movs	r7, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026b4:	4332      	orrs	r2, r6
 80026b6:	619a      	str	r2, [r3, #24]
 80026b8:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ba:	4816      	ldr	r0, [pc, #88]	; (8002714 <HAL_ADC_MspInit+0x7c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026bc:	4033      	ands	r3, r6
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 80026c2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 80026c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f7fe f9a6 	bl	8000a1c <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80026d0:	4d11      	ldr	r5, [pc, #68]	; (8002718 <HAL_ADC_MspInit+0x80>)
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_ADC_MspInit+0x84>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80026d4:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 80026d6:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80026e2:	2320      	movs	r3, #32
 80026e4:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ea:	606f      	str	r7, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ec:	60af      	str	r7, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026ee:	612e      	str	r6, [r5, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80026f0:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80026f2:	f7fe f8ad 	bl	8000850 <HAL_DMA_Init>
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d102      	bne.n	8002700 <HAL_ADC_MspInit+0x68>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80026fa:	63e5      	str	r5, [r4, #60]	; 0x3c
 80026fc:	626c      	str	r4, [r5, #36]	; 0x24
}
 80026fe:	e7d2      	b.n	80026a6 <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8002700:	216b      	movs	r1, #107	; 0x6b
 8002702:	4807      	ldr	r0, [pc, #28]	; (8002720 <HAL_ADC_MspInit+0x88>)
 8002704:	f7ff ffa4 	bl	8002650 <_Error_Handler>
 8002708:	e7f7      	b.n	80026fa <HAL_ADC_MspInit+0x62>
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	40012400 	.word	0x40012400
 8002710:	40021000 	.word	0x40021000
 8002714:	48000400 	.word	0x48000400
 8002718:	20000254 	.word	0x20000254
 800271c:	40020008 	.word	0x40020008
 8002720:	08003738 	.word	0x08003738

08002724 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002724:	b500      	push	{lr}

  if(htim_pwm->Instance==TIM3)
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_TIM_PWM_MspInit+0x34>)
 8002728:	6802      	ldr	r2, [r0, #0]
{
 800272a:	b083      	sub	sp, #12
  if(htim_pwm->Instance==TIM3)
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_TIM_PWM_MspInit+0x10>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002730:	b003      	add	sp, #12
 8002732:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002734:	2302      	movs	r3, #2
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <HAL_TIM_PWM_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002738:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 800273a:	69d1      	ldr	r1, [r2, #28]
 800273c:	4319      	orrs	r1, r3
 800273e:	61d1      	str	r1, [r2, #28]
 8002740:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002742:	2101      	movs	r1, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002744:	4013      	ands	r3, r2
 8002746:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002748:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800274a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800274c:	f7fe f812 	bl	8000774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002750:	2010      	movs	r0, #16
 8002752:	f7fe f843 	bl	80007dc <HAL_NVIC_EnableIRQ>
}
 8002756:	e7eb      	b.n	8002730 <HAL_TIM_PWM_MspInit+0xc>
 8002758:	40000400 	.word	0x40000400
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002760:	b500      	push	{lr}

  if(htim_base->Instance==TIM14)
 8002762:	6803      	ldr	r3, [r0, #0]
 8002764:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <HAL_TIM_Base_MspInit+0x64>)
{
 8002766:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 8002768:	4293      	cmp	r3, r2
 800276a:	d017      	beq.n	800279c <HAL_TIM_Base_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <HAL_TIM_Base_MspInit+0x68>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d001      	beq.n	8002776 <HAL_TIM_Base_MspInit+0x16>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002772:	b003      	add	sp, #12
 8002774:	bd00      	pop	{pc}
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002776:	2080      	movs	r0, #128	; 0x80
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <HAL_TIM_Base_MspInit+0x6c>)
 800277a:	0280      	lsls	r0, r0, #10
 800277c:	6991      	ldr	r1, [r2, #24]
 800277e:	4301      	orrs	r1, r0
 8002780:	6191      	str	r1, [r2, #24]
 8002782:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002784:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002786:	4003      	ands	r3, r0
 8002788:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 800278e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002790:	f7fd fff0 	bl	8000774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002794:	2015      	movs	r0, #21
 8002796:	f7fe f821 	bl	80007dc <HAL_NVIC_EnableIRQ>
}
 800279a:	e7ea      	b.n	8002772 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800279c:	2080      	movs	r0, #128	; 0x80
 800279e:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_TIM_Base_MspInit+0x6c>)
 80027a0:	0040      	lsls	r0, r0, #1
 80027a2:	69d1      	ldr	r1, [r2, #28]
 80027a4:	4301      	orrs	r1, r0
 80027a6:	61d1      	str	r1, [r2, #28]
 80027a8:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80027aa:	2101      	movs	r1, #1
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027ac:	4003      	ands	r3, r0
 80027ae:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	38ed      	subs	r0, #237	; 0xed
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027b4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80027b6:	f7fd ffdd 	bl	8000774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80027ba:	2013      	movs	r0, #19
 80027bc:	f7fe f80e 	bl	80007dc <HAL_NVIC_EnableIRQ>
 80027c0:	e7d7      	b.n	8002772 <HAL_TIM_Base_MspInit+0x12>
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	40002000 	.word	0x40002000
 80027c8:	40014400 	.word	0x40014400
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027d0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_TIM_MspPostInit+0x30>)
 80027d4:	6802      	ldr	r2, [r0, #0]
{
 80027d6:	b087      	sub	sp, #28
  if(htim->Instance==TIM3)
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027dc:	b007      	add	sp, #28
 80027de:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = PWM_SIGNAL_Pin;
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	3b7e      	subs	r3, #126	; 0x7e
 80027e6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80027e8:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80027ec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80027f2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80027f4:	3301      	adds	r3, #1
 80027f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f7fe f910 	bl	8000a1c <HAL_GPIO_Init>
}
 80027fc:	e7ee      	b.n	80027dc <HAL_TIM_MspPostInit+0xc>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	40000400 	.word	0x40000400

08002804 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002804:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002806:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_UART_MspInit+0x90>)
 8002808:	6802      	ldr	r2, [r0, #0]
{
 800280a:	b086      	sub	sp, #24
 800280c:	0004      	movs	r4, r0
  if(huart->Instance==USART1)
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <HAL_UART_MspInit+0x12>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002812:	b006      	add	sp, #24
 8002814:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002816:	2080      	movs	r0, #128	; 0x80
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_UART_MspInit+0x94>)
 800281a:	01c0      	lsls	r0, r0, #7
 800281c:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002820:	4301      	orrs	r1, r0
 8002822:	6191      	str	r1, [r2, #24]
 8002824:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002828:	4003      	ands	r3, r0
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283a:	3301      	adds	r3, #1
 800283c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002840:	3b02      	subs	r3, #2
 8002842:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f7fe f8e9 	bl	8000a1c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800284a:	4d14      	ldr	r5, [pc, #80]	; (800289c <HAL_UART_MspInit+0x98>)
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <HAL_UART_MspInit+0x9c>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800284e:	0028      	movs	r0, r5
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002850:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002852:	2310      	movs	r3, #16
 8002854:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002856:	3370      	adds	r3, #112	; 0x70
 8002858:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800285e:	60ae      	str	r6, [r5, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002860:	612e      	str	r6, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002862:	616e      	str	r6, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002864:	61ae      	str	r6, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002866:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002868:	f7fd fff2 	bl	8000850 <HAL_DMA_Init>
 800286c:	2800      	cmp	r0, #0
 800286e:	d10a      	bne.n	8002886 <HAL_UART_MspInit+0x82>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002870:	6625      	str	r5, [r4, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002878:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800287a:	f7fd ff7b 	bl	8000774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800287e:	201b      	movs	r0, #27
 8002880:	f7fd ffac 	bl	80007dc <HAL_NVIC_EnableIRQ>
}
 8002884:	e7c5      	b.n	8002812 <HAL_UART_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8002886:	213c      	movs	r1, #60	; 0x3c
 8002888:	4806      	ldr	r0, [pc, #24]	; (80028a4 <HAL_UART_MspInit+0xa0>)
 800288a:	31ff      	adds	r1, #255	; 0xff
 800288c:	f7ff fee0 	bl	8002650 <_Error_Handler>
 8002890:	e7ee      	b.n	8002870 <HAL_UART_MspInit+0x6c>
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	40013800 	.word	0x40013800
 8002898:	40021000 	.word	0x40021000
 800289c:	20000160 	.word	0x20000160
 80028a0:	4002001c 	.word	0x4002001c
 80028a4:	08003738 	.word	0x08003738

080028a8 <NMI_Handler>:
 80028a8:	4770      	bx	lr
 80028aa:	46c0      	nop			; (mov r8, r8)

080028ac <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80028ac:	e7fe      	b.n	80028ac <HardFault_Handler>
 80028ae:	46c0      	nop			; (mov r8, r8)

080028b0 <SVC_Handler>:
 80028b0:	4770      	bx	lr
 80028b2:	46c0      	nop			; (mov r8, r8)

080028b4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b4:	4770      	bx	lr
 80028b6:	46c0      	nop			; (mov r8, r8)

080028b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80028b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ba:	f7fd fcdb 	bl	8000274 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80028be:	f7fd ffc3 	bl	8000848 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c2:	bd10      	pop	{r4, pc}

080028c4 <EXTI4_15_IRQHandler>:

/**
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
 80028c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80028c6:	2010      	movs	r0, #16
 80028c8:	f7fe f998 	bl	8000bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)

080028d0 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80028d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80028d2:	4802      	ldr	r0, [pc, #8]	; (80028dc <DMA1_Channel1_IRQHandler+0xc>)
 80028d4:	f7fe f854 	bl	8000980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028d8:	bd10      	pop	{r4, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	20000254 	.word	0x20000254

080028e0 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 80028e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80028e2:	4802      	ldr	r0, [pc, #8]	; (80028ec <DMA1_Channel2_3_IRQHandler+0xc>)
 80028e4:	f7fe f84c 	bl	8000980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80028e8:	bd10      	pop	{r4, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	20000160 	.word	0x20000160

080028f0 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 80028f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028f2:	4802      	ldr	r0, [pc, #8]	; (80028fc <TIM3_IRQHandler+0xc>)
 80028f4:	f7fe ff9c 	bl	8001830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028f8:	bd10      	pop	{r4, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	20000120 	.word	0x20000120

08002900 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 8002900:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002902:	4802      	ldr	r0, [pc, #8]	; (800290c <TIM14_IRQHandler+0xc>)
 8002904:	f7fe ff94 	bl	8001830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002908:	bd10      	pop	{r4, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	20000214 	.word	0x20000214

08002910 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 8002910:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002912:	4802      	ldr	r0, [pc, #8]	; (800291c <TIM16_IRQHandler+0xc>)
 8002914:	f7fe ff8c 	bl	8001830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002918:	bd10      	pop	{r4, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	200002e4 	.word	0x200002e4

08002920 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8002920:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002922:	4802      	ldr	r0, [pc, #8]	; (800292c <USART1_IRQHandler+0xc>)
 8002924:	f7ff f990 	bl	8001c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002928:	bd10      	pop	{r4, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	200001a4 	.word	0x200001a4

08002930 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002930:	2101      	movs	r1, #1
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002934:	4811      	ldr	r0, [pc, #68]	; (800297c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4002      	ands	r2, r0
 8002940:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	480e      	ldr	r0, [pc, #56]	; (8002980 <SystemInit+0x50>)
 8002946:	4002      	ands	r2, r0
 8002948:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	480d      	ldr	r0, [pc, #52]	; (8002984 <SystemInit+0x54>)
 800294e:	4002      	ands	r2, r0
 8002950:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	480c      	ldr	r0, [pc, #48]	; (8002988 <SystemInit+0x58>)
 8002956:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002958:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800295a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800295c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295e:	4382      	bics	r2, r0
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002964:	4809      	ldr	r0, [pc, #36]	; (800298c <SystemInit+0x5c>)
 8002966:	4002      	ands	r2, r0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800296a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296c:	438a      	bics	r2, r1
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]

}
 8002974:	4770      	bx	lr
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	40021000 	.word	0x40021000
 800297c:	08ffb80c 	.word	0x08ffb80c
 8002980:	fef6ffff 	.word	0xfef6ffff
 8002984:	fffbffff 	.word	0xfffbffff
 8002988:	ffc0ffff 	.word	0xffc0ffff
 800298c:	fffffeec 	.word	0xfffffeec

08002990 <data_aquisition>:
#include "function.h"
#include "variables.h"
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim3;

void data_aquisition(){
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	46de      	mov	lr, fp
 8002994:	4657      	mov	r7, sl
 8002996:	464e      	mov	r6, r9
 8002998:	4645      	mov	r5, r8
 800299a:	b5e0      	push	{r5, r6, r7, lr}
	size_data_buffer = strlen((char*)data_buffer);
 800299c:	4e53      	ldr	r6, [pc, #332]	; (8002aec <data_aquisition+0x15c>)
void data_aquisition(){
 800299e:	b085      	sub	sp, #20
	size_data_buffer = strlen((char*)data_buffer);
 80029a0:	6833      	ldr	r3, [r6, #0]
 80029a2:	0018      	movs	r0, r3
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	f7fd fbaf 	bl	8000108 <strlen>
	size_time = strlen((char*)send_time);
 80029aa:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <data_aquisition+0x160>)
	size_data_buffer = strlen((char*)data_buffer);
 80029ac:	4c51      	ldr	r4, [pc, #324]	; (8002af4 <data_aquisition+0x164>)
	size_time = strlen((char*)send_time);
 80029ae:	681a      	ldr	r2, [r3, #0]
	size_data_buffer = strlen((char*)data_buffer);
 80029b0:	4682      	mov	sl, r0
 80029b2:	6020      	str	r0, [r4, #0]
	size_time = strlen((char*)send_time);
 80029b4:	0010      	movs	r0, r2
 80029b6:	9201      	str	r2, [sp, #4]
 80029b8:	f7fd fba6 	bl	8000108 <strlen>
 80029bc:	4d4e      	ldr	r5, [pc, #312]	; (8002af8 <data_aquisition+0x168>)
 80029be:	9002      	str	r0, [sp, #8]
 80029c0:	6028      	str	r0, [r5, #0]
	size_q1 = strlen((char*)send_q1);
 80029c2:	484e      	ldr	r0, [pc, #312]	; (8002afc <data_aquisition+0x16c>)
 80029c4:	4683      	mov	fp, r0
 80029c6:	6800      	ldr	r0, [r0, #0]
 80029c8:	f7fd fb9e 	bl	8000108 <strlen>
 80029cc:	4f4c      	ldr	r7, [pc, #304]	; (8002b00 <data_aquisition+0x170>)
 80029ce:	6038      	str	r0, [r7, #0]
	size_q2 = strlen((char*)send_q2);
 80029d0:	484c      	ldr	r0, [pc, #304]	; (8002b04 <data_aquisition+0x174>)
 80029d2:	6800      	ldr	r0, [r0, #0]
 80029d4:	9003      	str	r0, [sp, #12]
 80029d6:	f7fd fb97 	bl	8000108 <strlen>
 80029da:	494b      	ldr	r1, [pc, #300]	; (8002b08 <data_aquisition+0x178>)
 80029dc:	6008      	str	r0, [r1, #0]
	size_torque = strlen((char*)send_torque);
 80029de:	484b      	ldr	r0, [pc, #300]	; (8002b0c <data_aquisition+0x17c>)
	size_q2 = strlen((char*)send_q2);
 80029e0:	4688      	mov	r8, r1
	size_torque = strlen((char*)send_torque);
 80029e2:	6800      	ldr	r0, [r0, #0]
 80029e4:	9003      	str	r0, [sp, #12]
 80029e6:	f7fd fb8f 	bl	8000108 <strlen>
 80029ea:	4949      	ldr	r1, [pc, #292]	; (8002b10 <data_aquisition+0x180>)

	//memset(data_buffer,0x00,40);
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 80029ec:	9a02      	ldr	r2, [sp, #8]
	size_torque = strlen((char*)send_torque);
 80029ee:	6008      	str	r0, [r1, #0]
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 80029f0:	9800      	ldr	r0, [sp, #0]
	size_torque = strlen((char*)send_torque);
 80029f2:	4689      	mov	r9, r1
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 80029f4:	4450      	add	r0, sl
 80029f6:	9901      	ldr	r1, [sp, #4]
 80029f8:	f000 f9de 	bl	8002db8 <memcpy>
	memcpy(data_buffer+size_time+size_data_buffer, comma, 1);
 80029fc:	6829      	ldr	r1, [r5, #0]
 80029fe:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <data_aquisition+0x184>)
 8002a00:	468c      	mov	ip, r1
 8002a02:	469a      	mov	sl, r3
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6821      	ldr	r1, [r4, #0]
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	6833      	ldr	r3, [r6, #0]
 8002a0c:	4463      	add	r3, ip
 8002a0e:	545a      	strb	r2, [r3, r1]
	memcpy(data_buffer+1+size_time+size_data_buffer, send_q1, size_q1);
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	4694      	mov	ip, r2
 8002a16:	4463      	add	r3, ip
 8002a18:	0018      	movs	r0, r3
 8002a1a:	6833      	ldr	r3, [r6, #0]
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	469c      	mov	ip, r3
 8002a20:	465b      	mov	r3, fp
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	4460      	add	r0, ip
 8002a28:	f000 f9c6 	bl	8002db8 <memcpy>
	memcpy(data_buffer+1+size_q1+size_time+size_data_buffer, comma, 1);
 8002a2c:	4653      	mov	r3, sl
 8002a2e:	6839      	ldr	r1, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	468c      	mov	ip, r1
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	6829      	ldr	r1, [r5, #0]
 8002a38:	6833      	ldr	r3, [r6, #0]
 8002a3a:	4463      	add	r3, ip
 8002a3c:	468c      	mov	ip, r1
 8002a3e:	6821      	ldr	r1, [r4, #0]
 8002a40:	4463      	add	r3, ip
 8002a42:	468c      	mov	ip, r1
 8002a44:	4463      	add	r3, ip
 8002a46:	705a      	strb	r2, [r3, #1]
	memcpy(data_buffer+2+size_q1+size_time+size_data_buffer, send_q2, size_q2);
 8002a48:	682a      	ldr	r2, [r5, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	4694      	mov	ip, r2
 8002a4e:	4463      	add	r3, ip
 8002a50:	0018      	movs	r0, r3
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	3002      	adds	r0, #2
 8002a56:	469c      	mov	ip, r3
 8002a58:	6833      	ldr	r3, [r6, #0]
 8002a5a:	4460      	add	r0, ip
 8002a5c:	469c      	mov	ip, r3
 8002a5e:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <data_aquisition+0x174>)
 8002a60:	4460      	add	r0, ip
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	4643      	mov	r3, r8
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	f000 f9a6 	bl	8002db8 <memcpy>
	memcpy(data_buffer+2+size_q1+size_time+size_q2+size_data_buffer, comma, 1);
 8002a6c:	6839      	ldr	r1, [r7, #0]
 8002a6e:	4653      	mov	r3, sl
 8002a70:	468c      	mov	ip, r1
 8002a72:	4641      	mov	r1, r8
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6809      	ldr	r1, [r1, #0]
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	6833      	ldr	r3, [r6, #0]
 8002a7c:	4463      	add	r3, ip
 8002a7e:	468c      	mov	ip, r1
 8002a80:	6829      	ldr	r1, [r5, #0]
 8002a82:	4463      	add	r3, ip
 8002a84:	468c      	mov	ip, r1
 8002a86:	6821      	ldr	r1, [r4, #0]
 8002a88:	4463      	add	r3, ip
 8002a8a:	468c      	mov	ip, r1
 8002a8c:	4463      	add	r3, ip
 8002a8e:	709a      	strb	r2, [r3, #2]
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_data_buffer, send_torque, size_torque);
 8002a90:	682a      	ldr	r2, [r5, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	4694      	mov	ip, r2
 8002a96:	4463      	add	r3, ip
 8002a98:	0018      	movs	r0, r3
 8002a9a:	4643      	mov	r3, r8
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3003      	adds	r0, #3
 8002aa0:	469c      	mov	ip, r3
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	4460      	add	r0, ip
 8002aa6:	469c      	mov	ip, r3
 8002aa8:	6833      	ldr	r3, [r6, #0]
 8002aaa:	4460      	add	r0, ip
 8002aac:	469c      	mov	ip, r3
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <data_aquisition+0x17c>)
 8002ab0:	4460      	add	r0, ip
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	464b      	mov	r3, r9
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	f000 f97e 	bl	8002db8 <memcpy>
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_torque+size_data_buffer, endSymbol, 1);
 8002abc:	4648      	mov	r0, r9
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <data_aquisition+0x188>)
 8002ac0:	6832      	ldr	r2, [r6, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	682e      	ldr	r6, [r5, #0]
 8002ac6:	7819      	ldrb	r1, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6807      	ldr	r7, [r0, #0]
 8002acc:	4640      	mov	r0, r8
 8002ace:	18d3      	adds	r3, r2, r3
 8002ad0:	6805      	ldr	r5, [r0, #0]
 8002ad2:	19db      	adds	r3, r3, r7
 8002ad4:	6820      	ldr	r0, [r4, #0]
 8002ad6:	199b      	adds	r3, r3, r6
 8002ad8:	195b      	adds	r3, r3, r5
 8002ada:	181b      	adds	r3, r3, r0
 8002adc:	70d9      	strb	r1, [r3, #3]

//	HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
}
 8002ade:	b005      	add	sp, #20
 8002ae0:	bc3c      	pop	{r2, r3, r4, r5}
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	46a2      	mov	sl, r4
 8002ae8:	46ab      	mov	fp, r5
 8002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aec:	200000a4 	.word	0x200000a4
 8002af0:	200000e0 	.word	0x200000e0
 8002af4:	200000e8 	.word	0x200000e8
 8002af8:	200000f4 	.word	0x200000f4
 8002afc:	200000d8 	.word	0x200000d8
 8002b00:	200000ec 	.word	0x200000ec
 8002b04:	200000dc 	.word	0x200000dc
 8002b08:	200000f0 	.word	0x200000f0
 8002b0c:	200000e4 	.word	0x200000e4
 8002b10:	200000f8 	.word	0x200000f8
 8002b14:	20000008 	.word	0x20000008
 8002b18:	20000014 	.word	0x20000014

08002b1c <uart_request>:


void uart_request(){
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	rx_buffer[rx_buffer_cntr] = rx_byte;
 8002b1e:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <uart_request+0xe0>)
 8002b20:	4e37      	ldr	r6, [pc, #220]	; (8002c00 <uart_request+0xe4>)
 8002b22:	4c38      	ldr	r4, [pc, #224]	; (8002c04 <uart_request+0xe8>)
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	7831      	ldrb	r1, [r6, #0]
 8002b28:	7822      	ldrb	r2, [r4, #0]
 8002b2a:	5481      	strb	r1, [r0, r2]
	if(*rx_buffer == '$'){
 8002b2c:	681d      	ldr	r5, [r3, #0]
 8002b2e:	782b      	ldrb	r3, [r5, #0]
 8002b30:	2b24      	cmp	r3, #36	; 0x24
 8002b32:	d013      	beq.n	8002b5c <uart_request+0x40>
		rx_buffer_cntr += 1;
	}
	if(rx_buffer_cntr > 10){
 8002b34:	7823      	ldrb	r3, [r4, #0]
 8002b36:	2b0a      	cmp	r3, #10
 8002b38:	d909      	bls.n	8002b4e <uart_request+0x32>
		rx_buffer_cntr = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	7023      	strb	r3, [r4, #0]
	}
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 8002b3e:	782a      	ldrb	r2, [r5, #0]
 8002b40:	2a24      	cmp	r2, #36	; 0x24
 8002b42:	d104      	bne.n	8002b4e <uart_request+0x32>
 8002b44:	18ea      	adds	r2, r5, r3
 8002b46:	3a01      	subs	r2, #1
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	2a0a      	cmp	r2, #10
 8002b4c:	d00d      	beq.n	8002b6a <uart_request+0x4e>
 8002b4e:	4f2e      	ldr	r7, [pc, #184]	; (8002c08 <uart_request+0xec>)
			//memset(rx_buffer_copy,0x00, 16);

		}
		rx_buffer_cntr = 0;
	}
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8002b50:	0031      	movs	r1, r6
 8002b52:	0038      	movs	r0, r7
 8002b54:	2201      	movs	r2, #1
 8002b56:	f7fe ff6d 	bl	8001a34 <HAL_UART_Receive_IT>


}
 8002b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rx_buffer_cntr += 1;
 8002b5c:	7823      	ldrb	r3, [r4, #0]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	7023      	strb	r3, [r4, #0]
	if(rx_buffer_cntr > 10){
 8002b64:	2b0a      	cmp	r3, #10
 8002b66:	d9ea      	bls.n	8002b3e <uart_request+0x22>
 8002b68:	e7e7      	b.n	8002b3a <uart_request+0x1e>
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d9ef      	bls.n	8002b4e <uart_request+0x32>
		rx_buffer_copy = rx_buffer;
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <uart_request+0xf0>)
 8002b70:	601d      	str	r5, [r3, #0]
		switch(rx_buffer[1]){
 8002b72:	786b      	ldrb	r3, [r5, #1]
 8002b74:	2b42      	cmp	r3, #66	; 0x42
 8002b76:	d030      	beq.n	8002bda <uart_request+0xbe>
 8002b78:	d919      	bls.n	8002bae <uart_request+0x92>
 8002b7a:	2b54      	cmp	r3, #84	; 0x54
 8002b7c:	d01c      	beq.n	8002bb8 <uart_request+0x9c>
 8002b7e:	2b58      	cmp	r3, #88	; 0x58
 8002b80:	d129      	bne.n	8002bd6 <uart_request+0xba>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <uart_request+0xf4>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	6353      	str	r3, [r2, #52]	; 0x34
			enable_data_aquisition = 0;
 8002b8a:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <uart_request+0xf8>)
 8002b8c:	7013      	strb	r3, [r2, #0]
			enable_encoder_reading = 0;
 8002b8e:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <uart_request+0xfc>)
 8002b90:	7013      	strb	r3, [r2, #0]
			enable_ADC_interrupt = 0;
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <uart_request+0x100>)
 8002b94:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)acrobat),strlen((char*)acrobat));
 8002b96:	0028      	movs	r0, r5
 8002b98:	f7fd fab6 	bl	8000108 <strlen>
 8002b9c:	4f1a      	ldr	r7, [pc, #104]	; (8002c08 <uart_request+0xec>)
 8002b9e:	b282      	uxth	r2, r0
 8002ba0:	0029      	movs	r1, r5
 8002ba2:	0038      	movs	r0, r7
 8002ba4:	f7fe ff14 	bl	80019d0 <HAL_UART_Transmit_IT>
		rx_buffer_cntr = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	7023      	strb	r3, [r4, #0]
 8002bac:	e7d0      	b.n	8002b50 <uart_request+0x34>
		switch(rx_buffer[1]){
 8002bae:	2b41      	cmp	r3, #65	; 0x41
 8002bb0:	d111      	bne.n	8002bd6 <uart_request+0xba>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)acrobat),strlen((char*)acrobat));
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <uart_request+0x104>)
 8002bb4:	681d      	ldr	r5, [r3, #0]
 8002bb6:	e7ee      	b.n	8002b96 <uart_request+0x7a>
			torque_received = strtok((char*)rx_buffer_copy, "$T,");
 8002bb8:	491a      	ldr	r1, [pc, #104]	; (8002c24 <uart_request+0x108>)
 8002bba:	0028      	movs	r0, r5
 8002bbc:	f000 f9f8 	bl	8002fb0 <strtok>
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <uart_request+0x10c>)
			motor_dir = (strtok(NULL, ",\r\n"));
 8002bc2:	491a      	ldr	r1, [pc, #104]	; (8002c2c <uart_request+0x110>)
			torque_received = strtok((char*)rx_buffer_copy, "$T,");
 8002bc4:	6018      	str	r0, [r3, #0]
			motor_dir = (strtok(NULL, ",\r\n"));
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f000 f9f2 	bl	8002fb0 <strtok>
			receive_send = 1;
 8002bcc:	2201      	movs	r2, #1
			motor_dir = (strtok(NULL, ",\r\n"));
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <uart_request+0x114>)
 8002bd0:	6018      	str	r0, [r3, #0]
			receive_send = 1;
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <uart_request+0x118>)
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	4f0c      	ldr	r7, [pc, #48]	; (8002c08 <uart_request+0xec>)
			break;
 8002bd8:	e7e6      	b.n	8002ba8 <uart_request+0x8c>
			if(*(rx_buffer+3) == '1'){
 8002bda:	78eb      	ldrb	r3, [r5, #3]
 8002bdc:	2b31      	cmp	r3, #49	; 0x31
 8002bde:	d006      	beq.n	8002bee <uart_request+0xd2>
			else if(rx_buffer[3] == '0'){
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d1f8      	bne.n	8002bd6 <uart_request+0xba>
				enable_data_aquisition = 0;
 8002be4:	2200      	movs	r2, #0
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <uart_request+0xf8>)
 8002be8:	4f07      	ldr	r7, [pc, #28]	; (8002c08 <uart_request+0xec>)
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e7dc      	b.n	8002ba8 <uart_request+0x8c>
				receive_send = 1;
 8002bee:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <uart_request+0x118>)
 8002bf0:	3b30      	subs	r3, #48	; 0x30
 8002bf2:	7013      	strb	r3, [r2, #0]
				enable_data_aquisition = 1;
 8002bf4:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <uart_request+0xf8>)
 8002bf6:	4f04      	ldr	r7, [pc, #16]	; (8002c08 <uart_request+0xec>)
 8002bf8:	7013      	strb	r3, [r2, #0]
 8002bfa:	e7d5      	b.n	8002ba8 <uart_request+0x8c>
 8002bfc:	200000bc 	.word	0x200000bc
 8002c00:	200000c8 	.word	0x200000c8
 8002c04:	200000c0 	.word	0x200000c0
 8002c08:	200001a4 	.word	0x200001a4
 8002c0c:	200000c4 	.word	0x200000c4
 8002c10:	20000120 	.word	0x20000120
 8002c14:	200000a9 	.word	0x200000a9
 8002c18:	20000011 	.word	0x20000011
 8002c1c:	20000010 	.word	0x20000010
 8002c20:	20000004 	.word	0x20000004
 8002c24:	0800376c 	.word	0x0800376c
 8002c28:	20000104 	.word	0x20000104
 8002c2c:	08003770 	.word	0x08003770
 8002c30:	200000ac 	.word	0x200000ac
 8002c34:	200000b8 	.word	0x200000b8

08002c38 <user_main>:
#include "function.h"
#include "variables.h"

extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim14;
void user_main(){
 8002c38:	b570      	push	{r4, r5, r6, lr}

	if(uart_flag == 1){
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <user_main+0x90>)
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	2a01      	cmp	r2, #1
 8002c40:	d02d      	beq.n	8002c9e <user_main+0x66>
		uart_flag = 0;
		uart_request();
	}

	if(encoder_flag == 1){
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <user_main+0x94>)
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	2a01      	cmp	r2, #1
 8002c48:	d031      	beq.n	8002cae <user_main+0x76>
		encoder_flag = 0;
		read_motor_position();
	}

	if(adc_flag == 1){
 8002c4a:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <user_main+0x98>)
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	2a01      	cmp	r2, #1
 8002c50:	d035      	beq.n	8002cbe <user_main+0x86>
		adc_flag = 0;
		get_current_potentiometer();
	}

	if(enable_data_aquisition){
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <user_main+0x9c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <user_main+0x2a>
		if(data_flag == 1){ // send system variables over UART
 8002c5a:	4c1f      	ldr	r4, [pc, #124]	; (8002cd8 <user_main+0xa0>)
 8002c5c:	7823      	ldrb	r3, [r4, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d000      	beq.n	8002c64 <user_main+0x2c>
//		receive_send = 0;
//	}



}
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
			data_flag = 0;
 8002c64:	2500      	movs	r5, #0
			time += 1;
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <user_main+0xa4>)
			sprintf(send_time,"%lu", time);
 8002c68:	491d      	ldr	r1, [pc, #116]	; (8002ce0 <user_main+0xa8>)
			time += 1;
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	3201      	adds	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
			sprintf(send_time,"%lu", time);
 8002c70:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <user_main+0xac>)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	f000 f97a 	bl	8002f6c <siprintf>
			data_flag = 0;
 8002c78:	7025      	strb	r5, [r4, #0]
			if(receive_send == 1){
 8002c7a:	4c1b      	ldr	r4, [pc, #108]	; (8002ce8 <user_main+0xb0>)
 8002c7c:	7823      	ldrb	r3, [r4, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d1ef      	bne.n	8002c62 <user_main+0x2a>
			data_aquisition();
 8002c82:	f7ff fe85 	bl	8002990 <data_aquisition>
			HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <user_main+0xb4>)
 8002c88:	681e      	ldr	r6, [r3, #0]
 8002c8a:	0030      	movs	r0, r6
 8002c8c:	f7fd fa3c 	bl	8000108 <strlen>
 8002c90:	0031      	movs	r1, r6
 8002c92:	b282      	uxth	r2, r0
 8002c94:	4816      	ldr	r0, [pc, #88]	; (8002cf0 <user_main+0xb8>)
 8002c96:	f7fe ff2d 	bl	8001af4 <HAL_UART_Transmit_DMA>
			receive_send = 0;
 8002c9a:	7025      	strb	r5, [r4, #0]
}
 8002c9c:	e7e1      	b.n	8002c62 <user_main+0x2a>
		uart_flag = 0;
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
		uart_request();
 8002ca2:	f7ff ff3b 	bl	8002b1c <uart_request>
	if(encoder_flag == 1){
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <user_main+0x94>)
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	2a01      	cmp	r2, #1
 8002cac:	d1cd      	bne.n	8002c4a <user_main+0x12>
		encoder_flag = 0;
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
		read_motor_position();
 8002cb2:	f7ff faaf 	bl	8002214 <read_motor_position>
	if(adc_flag == 1){
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <user_main+0x98>)
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	2a01      	cmp	r2, #1
 8002cbc:	d1c9      	bne.n	8002c52 <user_main+0x1a>
		adc_flag = 0;
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
		get_current_potentiometer();
 8002cc2:	f7ff fa29 	bl	8002118 <get_current_potentiometer>
 8002cc6:	e7c4      	b.n	8002c52 <user_main+0x1a>
 8002cc8:	20000108 	.word	0x20000108
 8002ccc:	200000aa 	.word	0x200000aa
 8002cd0:	200000a0 	.word	0x200000a0
 8002cd4:	200000a9 	.word	0x200000a9
 8002cd8:	200000a8 	.word	0x200000a8
 8002cdc:	200000fc 	.word	0x200000fc
 8002ce0:	08003730 	.word	0x08003730
 8002ce4:	200000e0 	.word	0x200000e0
 8002ce8:	200000b8 	.word	0x200000b8
 8002cec:	200000a4 	.word	0x200000a4
 8002cf0:	200001a4 	.word	0x200001a4

08002cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cf4:	480d      	ldr	r0, [pc, #52]	; (8002d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cf6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf8:	480d      	ldr	r0, [pc, #52]	; (8002d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cfa:	490e      	ldr	r1, [pc, #56]	; (8002d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cfc:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <LoopForever+0xe>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d10:	4c0b      	ldr	r4, [pc, #44]	; (8002d40 <LoopForever+0x16>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d1e:	f7ff fe07 	bl	8002930 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d22:	f000 f81b 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d26:	f7ff fb87 	bl	8002438 <main>

08002d2a <LoopForever>:

LoopForever:
    b LoopForever
 8002d2a:	e7fe      	b.n	8002d2a <LoopForever>
  ldr   r0, =_estack
 8002d2c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d34:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002d38:	080037e4 	.word	0x080037e4
  ldr r2, =_sbss
 8002d3c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002d40:	20000328 	.word	0x20000328

08002d44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d44:	e7fe      	b.n	8002d44 <ADC1_IRQHandler>
	...

08002d48 <calloc>:
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <calloc+0x10>)
 8002d4c:	000a      	movs	r2, r1
 8002d4e:	0001      	movs	r1, r0
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	f000 f842 	bl	8002dda <_calloc_r>
 8002d56:	bd10      	pop	{r4, pc}
 8002d58:	2000001c 	.word	0x2000001c

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	2600      	movs	r6, #0
 8002d60:	4d0c      	ldr	r5, [pc, #48]	; (8002d94 <__libc_init_array+0x38>)
 8002d62:	4c0d      	ldr	r4, [pc, #52]	; (8002d98 <__libc_init_array+0x3c>)
 8002d64:	1b64      	subs	r4, r4, r5
 8002d66:	10a4      	asrs	r4, r4, #2
 8002d68:	42a6      	cmp	r6, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	f000 fcc1 	bl	80036f4 <_init>
 8002d72:	4d0a      	ldr	r5, [pc, #40]	; (8002d9c <__libc_init_array+0x40>)
 8002d74:	4c0a      	ldr	r4, [pc, #40]	; (8002da0 <__libc_init_array+0x44>)
 8002d76:	1b64      	subs	r4, r4, r5
 8002d78:	10a4      	asrs	r4, r4, #2
 8002d7a:	42a6      	cmp	r6, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	00b3      	lsls	r3, r6, #2
 8002d82:	58eb      	ldr	r3, [r5, r3]
 8002d84:	4798      	blx	r3
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	00b3      	lsls	r3, r6, #2
 8002d8c:	58eb      	ldr	r3, [r5, r3]
 8002d8e:	4798      	blx	r3
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	080037dc 	.word	0x080037dc
 8002d98:	080037dc 	.word	0x080037dc
 8002d9c:	080037dc 	.word	0x080037dc
 8002da0:	080037e0 	.word	0x080037e0

08002da4 <malloc>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <malloc+0x10>)
 8002da8:	0001      	movs	r1, r0
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	f000 f86e 	bl	8002e8c <_malloc_r>
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	2000001c 	.word	0x2000001c

08002db8 <memcpy>:
 8002db8:	2300      	movs	r3, #0
 8002dba:	b510      	push	{r4, lr}
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d100      	bne.n	8002dc2 <memcpy+0xa>
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	5ccc      	ldrb	r4, [r1, r3]
 8002dc4:	54c4      	strb	r4, [r0, r3]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	e7f8      	b.n	8002dbc <memcpy+0x4>

08002dca <memset>:
 8002dca:	0003      	movs	r3, r0
 8002dcc:	1882      	adds	r2, r0, r2
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d100      	bne.n	8002dd4 <memset+0xa>
 8002dd2:	4770      	bx	lr
 8002dd4:	7019      	strb	r1, [r3, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	e7f9      	b.n	8002dce <memset+0x4>

08002dda <_calloc_r>:
 8002dda:	434a      	muls	r2, r1
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	0011      	movs	r1, r2
 8002de0:	0014      	movs	r4, r2
 8002de2:	f000 f853 	bl	8002e8c <_malloc_r>
 8002de6:	1e05      	subs	r5, r0, #0
 8002de8:	d003      	beq.n	8002df2 <_calloc_r+0x18>
 8002dea:	0022      	movs	r2, r4
 8002dec:	2100      	movs	r1, #0
 8002dee:	f7ff ffec 	bl	8002dca <memset>
 8002df2:	0028      	movs	r0, r5
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002df8 <_free_r>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	0005      	movs	r5, r0
 8002dfc:	2900      	cmp	r1, #0
 8002dfe:	d010      	beq.n	8002e22 <_free_r+0x2a>
 8002e00:	1f0c      	subs	r4, r1, #4
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	da00      	bge.n	8002e0a <_free_r+0x12>
 8002e08:	18e4      	adds	r4, r4, r3
 8002e0a:	0028      	movs	r0, r5
 8002e0c:	f000 f926 	bl	800305c <__malloc_lock>
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <_free_r+0x90>)
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <_free_r+0x2c>
 8002e18:	6063      	str	r3, [r4, #4]
 8002e1a:	6014      	str	r4, [r2, #0]
 8002e1c:	0028      	movs	r0, r5
 8002e1e:	f000 f91e 	bl	800305e <__malloc_unlock>
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	42a3      	cmp	r3, r4
 8002e26:	d909      	bls.n	8002e3c <_free_r+0x44>
 8002e28:	6821      	ldr	r1, [r4, #0]
 8002e2a:	1860      	adds	r0, r4, r1
 8002e2c:	4283      	cmp	r3, r0
 8002e2e:	d1f3      	bne.n	8002e18 <_free_r+0x20>
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	1841      	adds	r1, r0, r1
 8002e36:	6021      	str	r1, [r4, #0]
 8002e38:	e7ee      	b.n	8002e18 <_free_r+0x20>
 8002e3a:	0013      	movs	r3, r2
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	2a00      	cmp	r2, #0
 8002e40:	d001      	beq.n	8002e46 <_free_r+0x4e>
 8002e42:	42a2      	cmp	r2, r4
 8002e44:	d9f9      	bls.n	8002e3a <_free_r+0x42>
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	1858      	adds	r0, r3, r1
 8002e4a:	42a0      	cmp	r0, r4
 8002e4c:	d10b      	bne.n	8002e66 <_free_r+0x6e>
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	1809      	adds	r1, r1, r0
 8002e52:	1858      	adds	r0, r3, r1
 8002e54:	6019      	str	r1, [r3, #0]
 8002e56:	4282      	cmp	r2, r0
 8002e58:	d1e0      	bne.n	8002e1c <_free_r+0x24>
 8002e5a:	6810      	ldr	r0, [r2, #0]
 8002e5c:	6852      	ldr	r2, [r2, #4]
 8002e5e:	1841      	adds	r1, r0, r1
 8002e60:	6019      	str	r1, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	e7da      	b.n	8002e1c <_free_r+0x24>
 8002e66:	42a0      	cmp	r0, r4
 8002e68:	d902      	bls.n	8002e70 <_free_r+0x78>
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	602b      	str	r3, [r5, #0]
 8002e6e:	e7d5      	b.n	8002e1c <_free_r+0x24>
 8002e70:	6821      	ldr	r1, [r4, #0]
 8002e72:	1860      	adds	r0, r4, r1
 8002e74:	4282      	cmp	r2, r0
 8002e76:	d103      	bne.n	8002e80 <_free_r+0x88>
 8002e78:	6810      	ldr	r0, [r2, #0]
 8002e7a:	6852      	ldr	r2, [r2, #4]
 8002e7c:	1841      	adds	r1, r0, r1
 8002e7e:	6021      	str	r1, [r4, #0]
 8002e80:	6062      	str	r2, [r4, #4]
 8002e82:	605c      	str	r4, [r3, #4]
 8002e84:	e7ca      	b.n	8002e1c <_free_r+0x24>
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000110 	.word	0x20000110

08002e8c <_malloc_r>:
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	b570      	push	{r4, r5, r6, lr}
 8002e90:	1ccd      	adds	r5, r1, #3
 8002e92:	439d      	bics	r5, r3
 8002e94:	3508      	adds	r5, #8
 8002e96:	0006      	movs	r6, r0
 8002e98:	2d0c      	cmp	r5, #12
 8002e9a:	d21e      	bcs.n	8002eda <_malloc_r+0x4e>
 8002e9c:	250c      	movs	r5, #12
 8002e9e:	42a9      	cmp	r1, r5
 8002ea0:	d81d      	bhi.n	8002ede <_malloc_r+0x52>
 8002ea2:	0030      	movs	r0, r6
 8002ea4:	f000 f8da 	bl	800305c <__malloc_lock>
 8002ea8:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <_malloc_r+0xb4>)
 8002eaa:	6814      	ldr	r4, [r2, #0]
 8002eac:	0021      	movs	r1, r4
 8002eae:	2900      	cmp	r1, #0
 8002eb0:	d119      	bne.n	8002ee6 <_malloc_r+0x5a>
 8002eb2:	4c24      	ldr	r4, [pc, #144]	; (8002f44 <_malloc_r+0xb8>)
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <_malloc_r+0x36>
 8002eba:	0030      	movs	r0, r6
 8002ebc:	f000 f844 	bl	8002f48 <_sbrk_r>
 8002ec0:	6020      	str	r0, [r4, #0]
 8002ec2:	0029      	movs	r1, r5
 8002ec4:	0030      	movs	r0, r6
 8002ec6:	f000 f83f 	bl	8002f48 <_sbrk_r>
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d12c      	bne.n	8002f28 <_malloc_r+0x9c>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	0030      	movs	r0, r6
 8002ed2:	6033      	str	r3, [r6, #0]
 8002ed4:	f000 f8c3 	bl	800305e <__malloc_unlock>
 8002ed8:	e003      	b.n	8002ee2 <_malloc_r+0x56>
 8002eda:	2d00      	cmp	r5, #0
 8002edc:	dadf      	bge.n	8002e9e <_malloc_r+0x12>
 8002ede:	230c      	movs	r3, #12
 8002ee0:	6033      	str	r3, [r6, #0]
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	bd70      	pop	{r4, r5, r6, pc}
 8002ee6:	680b      	ldr	r3, [r1, #0]
 8002ee8:	1b5b      	subs	r3, r3, r5
 8002eea:	d41a      	bmi.n	8002f22 <_malloc_r+0x96>
 8002eec:	2b0b      	cmp	r3, #11
 8002eee:	d903      	bls.n	8002ef8 <_malloc_r+0x6c>
 8002ef0:	600b      	str	r3, [r1, #0]
 8002ef2:	18cc      	adds	r4, r1, r3
 8002ef4:	6025      	str	r5, [r4, #0]
 8002ef6:	e003      	b.n	8002f00 <_malloc_r+0x74>
 8002ef8:	428c      	cmp	r4, r1
 8002efa:	d10e      	bne.n	8002f1a <_malloc_r+0x8e>
 8002efc:	6863      	ldr	r3, [r4, #4]
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	0030      	movs	r0, r6
 8002f02:	f000 f8ac 	bl	800305e <__malloc_unlock>
 8002f06:	0020      	movs	r0, r4
 8002f08:	2207      	movs	r2, #7
 8002f0a:	300b      	adds	r0, #11
 8002f0c:	1d23      	adds	r3, r4, #4
 8002f0e:	4390      	bics	r0, r2
 8002f10:	1ac3      	subs	r3, r0, r3
 8002f12:	d0e7      	beq.n	8002ee4 <_malloc_r+0x58>
 8002f14:	425a      	negs	r2, r3
 8002f16:	50e2      	str	r2, [r4, r3]
 8002f18:	e7e4      	b.n	8002ee4 <_malloc_r+0x58>
 8002f1a:	684b      	ldr	r3, [r1, #4]
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	000c      	movs	r4, r1
 8002f20:	e7ee      	b.n	8002f00 <_malloc_r+0x74>
 8002f22:	000c      	movs	r4, r1
 8002f24:	6849      	ldr	r1, [r1, #4]
 8002f26:	e7c2      	b.n	8002eae <_malloc_r+0x22>
 8002f28:	2303      	movs	r3, #3
 8002f2a:	1cc4      	adds	r4, r0, #3
 8002f2c:	439c      	bics	r4, r3
 8002f2e:	42a0      	cmp	r0, r4
 8002f30:	d0e0      	beq.n	8002ef4 <_malloc_r+0x68>
 8002f32:	1a21      	subs	r1, r4, r0
 8002f34:	0030      	movs	r0, r6
 8002f36:	f000 f807 	bl	8002f48 <_sbrk_r>
 8002f3a:	1c43      	adds	r3, r0, #1
 8002f3c:	d1da      	bne.n	8002ef4 <_malloc_r+0x68>
 8002f3e:	e7c6      	b.n	8002ece <_malloc_r+0x42>
 8002f40:	20000110 	.word	0x20000110
 8002f44:	20000114 	.word	0x20000114

08002f48 <_sbrk_r>:
 8002f48:	2300      	movs	r3, #0
 8002f4a:	b570      	push	{r4, r5, r6, lr}
 8002f4c:	4c06      	ldr	r4, [pc, #24]	; (8002f68 <_sbrk_r+0x20>)
 8002f4e:	0005      	movs	r5, r0
 8002f50:	0008      	movs	r0, r1
 8002f52:	6023      	str	r3, [r4, #0]
 8002f54:	f000 fbbe 	bl	80036d4 <_sbrk>
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	d103      	bne.n	8002f64 <_sbrk_r+0x1c>
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d000      	beq.n	8002f64 <_sbrk_r+0x1c>
 8002f62:	602b      	str	r3, [r5, #0]
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	20000324 	.word	0x20000324

08002f6c <siprintf>:
 8002f6c:	b40e      	push	{r1, r2, r3}
 8002f6e:	b510      	push	{r4, lr}
 8002f70:	b09d      	sub	sp, #116	; 0x74
 8002f72:	a902      	add	r1, sp, #8
 8002f74:	9002      	str	r0, [sp, #8]
 8002f76:	6108      	str	r0, [r1, #16]
 8002f78:	480b      	ldr	r0, [pc, #44]	; (8002fa8 <siprintf+0x3c>)
 8002f7a:	2482      	movs	r4, #130	; 0x82
 8002f7c:	6088      	str	r0, [r1, #8]
 8002f7e:	6148      	str	r0, [r1, #20]
 8002f80:	2001      	movs	r0, #1
 8002f82:	4240      	negs	r0, r0
 8002f84:	ab1f      	add	r3, sp, #124	; 0x7c
 8002f86:	81c8      	strh	r0, [r1, #14]
 8002f88:	4808      	ldr	r0, [pc, #32]	; (8002fac <siprintf+0x40>)
 8002f8a:	cb04      	ldmia	r3!, {r2}
 8002f8c:	00a4      	lsls	r4, r4, #2
 8002f8e:	6800      	ldr	r0, [r0, #0]
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	818c      	strh	r4, [r1, #12]
 8002f94:	f000 f8c6 	bl	8003124 <_svfiprintf_r>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9a02      	ldr	r2, [sp, #8]
 8002f9c:	7013      	strb	r3, [r2, #0]
 8002f9e:	b01d      	add	sp, #116	; 0x74
 8002fa0:	bc10      	pop	{r4}
 8002fa2:	bc08      	pop	{r3}
 8002fa4:	b003      	add	sp, #12
 8002fa6:	4718      	bx	r3
 8002fa8:	7fffffff 	.word	0x7fffffff
 8002fac:	2000001c 	.word	0x2000001c

08002fb0 <strtok>:
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <strtok+0x4c>)
 8002fb4:	0006      	movs	r6, r0
 8002fb6:	681d      	ldr	r5, [r3, #0]
 8002fb8:	000f      	movs	r7, r1
 8002fba:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8002fbc:	2c00      	cmp	r4, #0
 8002fbe:	d116      	bne.n	8002fee <strtok+0x3e>
 8002fc0:	2050      	movs	r0, #80	; 0x50
 8002fc2:	f7ff feef 	bl	8002da4 <malloc>
 8002fc6:	65a8      	str	r0, [r5, #88]	; 0x58
 8002fc8:	6004      	str	r4, [r0, #0]
 8002fca:	6044      	str	r4, [r0, #4]
 8002fcc:	6084      	str	r4, [r0, #8]
 8002fce:	60c4      	str	r4, [r0, #12]
 8002fd0:	6104      	str	r4, [r0, #16]
 8002fd2:	6144      	str	r4, [r0, #20]
 8002fd4:	6184      	str	r4, [r0, #24]
 8002fd6:	6284      	str	r4, [r0, #40]	; 0x28
 8002fd8:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002fda:	6304      	str	r4, [r0, #48]	; 0x30
 8002fdc:	6344      	str	r4, [r0, #52]	; 0x34
 8002fde:	6384      	str	r4, [r0, #56]	; 0x38
 8002fe0:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002fe2:	6404      	str	r4, [r0, #64]	; 0x40
 8002fe4:	6444      	str	r4, [r0, #68]	; 0x44
 8002fe6:	6484      	str	r4, [r0, #72]	; 0x48
 8002fe8:	64c4      	str	r4, [r0, #76]	; 0x4c
 8002fea:	7704      	strb	r4, [r0, #28]
 8002fec:	6244      	str	r4, [r0, #36]	; 0x24
 8002fee:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8002ff0:	0039      	movs	r1, r7
 8002ff2:	0030      	movs	r0, r6
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f000 f803 	bl	8003000 <__strtok_r>
 8002ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ffc:	2000001c 	.word	0x2000001c

08003000 <__strtok_r>:
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	2800      	cmp	r0, #0
 8003004:	d104      	bne.n	8003010 <__strtok_r+0x10>
 8003006:	6810      	ldr	r0, [r2, #0]
 8003008:	2800      	cmp	r0, #0
 800300a:	d101      	bne.n	8003010 <__strtok_r+0x10>
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300e:	0020      	movs	r0, r4
 8003010:	000e      	movs	r6, r1
 8003012:	7805      	ldrb	r5, [r0, #0]
 8003014:	1c44      	adds	r4, r0, #1
 8003016:	7837      	ldrb	r7, [r6, #0]
 8003018:	2f00      	cmp	r7, #0
 800301a:	d104      	bne.n	8003026 <__strtok_r+0x26>
 800301c:	2d00      	cmp	r5, #0
 800301e:	d110      	bne.n	8003042 <__strtok_r+0x42>
 8003020:	6015      	str	r5, [r2, #0]
 8003022:	0028      	movs	r0, r5
 8003024:	e7f2      	b.n	800300c <__strtok_r+0xc>
 8003026:	3601      	adds	r6, #1
 8003028:	42bd      	cmp	r5, r7
 800302a:	d1f4      	bne.n	8003016 <__strtok_r+0x16>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ee      	bne.n	800300e <__strtok_r+0xe>
 8003030:	6014      	str	r4, [r2, #0]
 8003032:	7003      	strb	r3, [r0, #0]
 8003034:	e7ea      	b.n	800300c <__strtok_r+0xc>
 8003036:	0033      	movs	r3, r6
 8003038:	e00e      	b.n	8003058 <__strtok_r+0x58>
 800303a:	3501      	adds	r5, #1
 800303c:	001c      	movs	r4, r3
 800303e:	2f00      	cmp	r7, #0
 8003040:	d102      	bne.n	8003048 <__strtok_r+0x48>
 8003042:	000d      	movs	r5, r1
 8003044:	7826      	ldrb	r6, [r4, #0]
 8003046:	1c63      	adds	r3, r4, #1
 8003048:	782f      	ldrb	r7, [r5, #0]
 800304a:	42be      	cmp	r6, r7
 800304c:	d1f5      	bne.n	800303a <__strtok_r+0x3a>
 800304e:	2e00      	cmp	r6, #0
 8003050:	d0f1      	beq.n	8003036 <__strtok_r+0x36>
 8003052:	2400      	movs	r4, #0
 8003054:	1e59      	subs	r1, r3, #1
 8003056:	700c      	strb	r4, [r1, #0]
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e7d7      	b.n	800300c <__strtok_r+0xc>

0800305c <__malloc_lock>:
 800305c:	4770      	bx	lr

0800305e <__malloc_unlock>:
 800305e:	4770      	bx	lr

08003060 <__ssputs_r>:
 8003060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003062:	688e      	ldr	r6, [r1, #8]
 8003064:	b085      	sub	sp, #20
 8003066:	0007      	movs	r7, r0
 8003068:	000c      	movs	r4, r1
 800306a:	9203      	str	r2, [sp, #12]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	429e      	cmp	r6, r3
 8003070:	d839      	bhi.n	80030e6 <__ssputs_r+0x86>
 8003072:	2390      	movs	r3, #144	; 0x90
 8003074:	898a      	ldrh	r2, [r1, #12]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	421a      	tst	r2, r3
 800307a:	d034      	beq.n	80030e6 <__ssputs_r+0x86>
 800307c:	2503      	movs	r5, #3
 800307e:	6909      	ldr	r1, [r1, #16]
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	1a5b      	subs	r3, r3, r1
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	6963      	ldr	r3, [r4, #20]
 8003088:	9802      	ldr	r0, [sp, #8]
 800308a:	435d      	muls	r5, r3
 800308c:	0feb      	lsrs	r3, r5, #31
 800308e:	195d      	adds	r5, r3, r5
 8003090:	9b01      	ldr	r3, [sp, #4]
 8003092:	106d      	asrs	r5, r5, #1
 8003094:	3301      	adds	r3, #1
 8003096:	181b      	adds	r3, r3, r0
 8003098:	42ab      	cmp	r3, r5
 800309a:	d900      	bls.n	800309e <__ssputs_r+0x3e>
 800309c:	001d      	movs	r5, r3
 800309e:	0553      	lsls	r3, r2, #21
 80030a0:	d532      	bpl.n	8003108 <__ssputs_r+0xa8>
 80030a2:	0029      	movs	r1, r5
 80030a4:	0038      	movs	r0, r7
 80030a6:	f7ff fef1 	bl	8002e8c <_malloc_r>
 80030aa:	1e06      	subs	r6, r0, #0
 80030ac:	d109      	bne.n	80030c2 <__ssputs_r+0x62>
 80030ae:	230c      	movs	r3, #12
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	2340      	movs	r3, #64	; 0x40
 80030b4:	2001      	movs	r0, #1
 80030b6:	89a2      	ldrh	r2, [r4, #12]
 80030b8:	4240      	negs	r0, r0
 80030ba:	4313      	orrs	r3, r2
 80030bc:	81a3      	strh	r3, [r4, #12]
 80030be:	b005      	add	sp, #20
 80030c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c2:	9a02      	ldr	r2, [sp, #8]
 80030c4:	6921      	ldr	r1, [r4, #16]
 80030c6:	f7ff fe77 	bl	8002db8 <memcpy>
 80030ca:	89a3      	ldrh	r3, [r4, #12]
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <__ssputs_r+0xc0>)
 80030ce:	401a      	ands	r2, r3
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	4313      	orrs	r3, r2
 80030d4:	81a3      	strh	r3, [r4, #12]
 80030d6:	9b02      	ldr	r3, [sp, #8]
 80030d8:	6126      	str	r6, [r4, #16]
 80030da:	18f6      	adds	r6, r6, r3
 80030dc:	6026      	str	r6, [r4, #0]
 80030de:	6165      	str	r5, [r4, #20]
 80030e0:	9e01      	ldr	r6, [sp, #4]
 80030e2:	1aed      	subs	r5, r5, r3
 80030e4:	60a5      	str	r5, [r4, #8]
 80030e6:	9b01      	ldr	r3, [sp, #4]
 80030e8:	42b3      	cmp	r3, r6
 80030ea:	d200      	bcs.n	80030ee <__ssputs_r+0x8e>
 80030ec:	001e      	movs	r6, r3
 80030ee:	0032      	movs	r2, r6
 80030f0:	9903      	ldr	r1, [sp, #12]
 80030f2:	6820      	ldr	r0, [r4, #0]
 80030f4:	f000 faad 	bl	8003652 <memmove>
 80030f8:	68a3      	ldr	r3, [r4, #8]
 80030fa:	2000      	movs	r0, #0
 80030fc:	1b9b      	subs	r3, r3, r6
 80030fe:	60a3      	str	r3, [r4, #8]
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	199e      	adds	r6, r3, r6
 8003104:	6026      	str	r6, [r4, #0]
 8003106:	e7da      	b.n	80030be <__ssputs_r+0x5e>
 8003108:	002a      	movs	r2, r5
 800310a:	0038      	movs	r0, r7
 800310c:	f000 fab3 	bl	8003676 <_realloc_r>
 8003110:	1e06      	subs	r6, r0, #0
 8003112:	d1e0      	bne.n	80030d6 <__ssputs_r+0x76>
 8003114:	6921      	ldr	r1, [r4, #16]
 8003116:	0038      	movs	r0, r7
 8003118:	f7ff fe6e 	bl	8002df8 <_free_r>
 800311c:	e7c7      	b.n	80030ae <__ssputs_r+0x4e>
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	fffffb7f 	.word	0xfffffb7f

08003124 <_svfiprintf_r>:
 8003124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003126:	b09f      	sub	sp, #124	; 0x7c
 8003128:	9002      	str	r0, [sp, #8]
 800312a:	9305      	str	r3, [sp, #20]
 800312c:	898b      	ldrh	r3, [r1, #12]
 800312e:	000f      	movs	r7, r1
 8003130:	0016      	movs	r6, r2
 8003132:	061b      	lsls	r3, r3, #24
 8003134:	d511      	bpl.n	800315a <_svfiprintf_r+0x36>
 8003136:	690b      	ldr	r3, [r1, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10e      	bne.n	800315a <_svfiprintf_r+0x36>
 800313c:	2140      	movs	r1, #64	; 0x40
 800313e:	f7ff fea5 	bl	8002e8c <_malloc_r>
 8003142:	6038      	str	r0, [r7, #0]
 8003144:	6138      	str	r0, [r7, #16]
 8003146:	2800      	cmp	r0, #0
 8003148:	d105      	bne.n	8003156 <_svfiprintf_r+0x32>
 800314a:	230c      	movs	r3, #12
 800314c:	9a02      	ldr	r2, [sp, #8]
 800314e:	3801      	subs	r0, #1
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	b01f      	add	sp, #124	; 0x7c
 8003154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003156:	2340      	movs	r3, #64	; 0x40
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	2300      	movs	r3, #0
 800315c:	ad06      	add	r5, sp, #24
 800315e:	616b      	str	r3, [r5, #20]
 8003160:	3320      	adds	r3, #32
 8003162:	766b      	strb	r3, [r5, #25]
 8003164:	3310      	adds	r3, #16
 8003166:	76ab      	strb	r3, [r5, #26]
 8003168:	0034      	movs	r4, r6
 800316a:	7823      	ldrb	r3, [r4, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d147      	bne.n	8003200 <_svfiprintf_r+0xdc>
 8003170:	1ba3      	subs	r3, r4, r6
 8003172:	9304      	str	r3, [sp, #16]
 8003174:	d00d      	beq.n	8003192 <_svfiprintf_r+0x6e>
 8003176:	1ba3      	subs	r3, r4, r6
 8003178:	0032      	movs	r2, r6
 800317a:	0039      	movs	r1, r7
 800317c:	9802      	ldr	r0, [sp, #8]
 800317e:	f7ff ff6f 	bl	8003060 <__ssputs_r>
 8003182:	1c43      	adds	r3, r0, #1
 8003184:	d100      	bne.n	8003188 <_svfiprintf_r+0x64>
 8003186:	e0b5      	b.n	80032f4 <_svfiprintf_r+0x1d0>
 8003188:	696a      	ldr	r2, [r5, #20]
 800318a:	9b04      	ldr	r3, [sp, #16]
 800318c:	4694      	mov	ip, r2
 800318e:	4463      	add	r3, ip
 8003190:	616b      	str	r3, [r5, #20]
 8003192:	7823      	ldrb	r3, [r4, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d100      	bne.n	800319a <_svfiprintf_r+0x76>
 8003198:	e0ac      	b.n	80032f4 <_svfiprintf_r+0x1d0>
 800319a:	2201      	movs	r2, #1
 800319c:	2300      	movs	r3, #0
 800319e:	4252      	negs	r2, r2
 80031a0:	606a      	str	r2, [r5, #4]
 80031a2:	a902      	add	r1, sp, #8
 80031a4:	3254      	adds	r2, #84	; 0x54
 80031a6:	1852      	adds	r2, r2, r1
 80031a8:	3401      	adds	r4, #1
 80031aa:	602b      	str	r3, [r5, #0]
 80031ac:	60eb      	str	r3, [r5, #12]
 80031ae:	60ab      	str	r3, [r5, #8]
 80031b0:	7013      	strb	r3, [r2, #0]
 80031b2:	65ab      	str	r3, [r5, #88]	; 0x58
 80031b4:	4e58      	ldr	r6, [pc, #352]	; (8003318 <_svfiprintf_r+0x1f4>)
 80031b6:	2205      	movs	r2, #5
 80031b8:	7821      	ldrb	r1, [r4, #0]
 80031ba:	0030      	movs	r0, r6
 80031bc:	f000 fa3e 	bl	800363c <memchr>
 80031c0:	1c62      	adds	r2, r4, #1
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d120      	bne.n	8003208 <_svfiprintf_r+0xe4>
 80031c6:	6829      	ldr	r1, [r5, #0]
 80031c8:	06cb      	lsls	r3, r1, #27
 80031ca:	d504      	bpl.n	80031d6 <_svfiprintf_r+0xb2>
 80031cc:	2353      	movs	r3, #83	; 0x53
 80031ce:	ae02      	add	r6, sp, #8
 80031d0:	3020      	adds	r0, #32
 80031d2:	199b      	adds	r3, r3, r6
 80031d4:	7018      	strb	r0, [r3, #0]
 80031d6:	070b      	lsls	r3, r1, #28
 80031d8:	d504      	bpl.n	80031e4 <_svfiprintf_r+0xc0>
 80031da:	2353      	movs	r3, #83	; 0x53
 80031dc:	202b      	movs	r0, #43	; 0x2b
 80031de:	ae02      	add	r6, sp, #8
 80031e0:	199b      	adds	r3, r3, r6
 80031e2:	7018      	strb	r0, [r3, #0]
 80031e4:	7823      	ldrb	r3, [r4, #0]
 80031e6:	2b2a      	cmp	r3, #42	; 0x2a
 80031e8:	d016      	beq.n	8003218 <_svfiprintf_r+0xf4>
 80031ea:	2000      	movs	r0, #0
 80031ec:	210a      	movs	r1, #10
 80031ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f0:	7822      	ldrb	r2, [r4, #0]
 80031f2:	3a30      	subs	r2, #48	; 0x30
 80031f4:	2a09      	cmp	r2, #9
 80031f6:	d955      	bls.n	80032a4 <_svfiprintf_r+0x180>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d015      	beq.n	8003228 <_svfiprintf_r+0x104>
 80031fc:	9309      	str	r3, [sp, #36]	; 0x24
 80031fe:	e013      	b.n	8003228 <_svfiprintf_r+0x104>
 8003200:	2b25      	cmp	r3, #37	; 0x25
 8003202:	d0b5      	beq.n	8003170 <_svfiprintf_r+0x4c>
 8003204:	3401      	adds	r4, #1
 8003206:	e7b0      	b.n	800316a <_svfiprintf_r+0x46>
 8003208:	2301      	movs	r3, #1
 800320a:	1b80      	subs	r0, r0, r6
 800320c:	4083      	lsls	r3, r0
 800320e:	6829      	ldr	r1, [r5, #0]
 8003210:	0014      	movs	r4, r2
 8003212:	430b      	orrs	r3, r1
 8003214:	602b      	str	r3, [r5, #0]
 8003216:	e7cd      	b.n	80031b4 <_svfiprintf_r+0x90>
 8003218:	9b05      	ldr	r3, [sp, #20]
 800321a:	1d18      	adds	r0, r3, #4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	9005      	str	r0, [sp, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db39      	blt.n	8003298 <_svfiprintf_r+0x174>
 8003224:	9309      	str	r3, [sp, #36]	; 0x24
 8003226:	0014      	movs	r4, r2
 8003228:	7823      	ldrb	r3, [r4, #0]
 800322a:	2b2e      	cmp	r3, #46	; 0x2e
 800322c:	d10b      	bne.n	8003246 <_svfiprintf_r+0x122>
 800322e:	7863      	ldrb	r3, [r4, #1]
 8003230:	1c62      	adds	r2, r4, #1
 8003232:	2b2a      	cmp	r3, #42	; 0x2a
 8003234:	d13e      	bne.n	80032b4 <_svfiprintf_r+0x190>
 8003236:	9b05      	ldr	r3, [sp, #20]
 8003238:	3402      	adds	r4, #2
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9205      	str	r2, [sp, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	db34      	blt.n	80032ae <_svfiprintf_r+0x18a>
 8003244:	9307      	str	r3, [sp, #28]
 8003246:	4e35      	ldr	r6, [pc, #212]	; (800331c <_svfiprintf_r+0x1f8>)
 8003248:	7821      	ldrb	r1, [r4, #0]
 800324a:	2203      	movs	r2, #3
 800324c:	0030      	movs	r0, r6
 800324e:	f000 f9f5 	bl	800363c <memchr>
 8003252:	2800      	cmp	r0, #0
 8003254:	d006      	beq.n	8003264 <_svfiprintf_r+0x140>
 8003256:	2340      	movs	r3, #64	; 0x40
 8003258:	1b80      	subs	r0, r0, r6
 800325a:	4083      	lsls	r3, r0
 800325c:	682a      	ldr	r2, [r5, #0]
 800325e:	3401      	adds	r4, #1
 8003260:	4313      	orrs	r3, r2
 8003262:	602b      	str	r3, [r5, #0]
 8003264:	7821      	ldrb	r1, [r4, #0]
 8003266:	2206      	movs	r2, #6
 8003268:	482d      	ldr	r0, [pc, #180]	; (8003320 <_svfiprintf_r+0x1fc>)
 800326a:	1c66      	adds	r6, r4, #1
 800326c:	7629      	strb	r1, [r5, #24]
 800326e:	f000 f9e5 	bl	800363c <memchr>
 8003272:	2800      	cmp	r0, #0
 8003274:	d046      	beq.n	8003304 <_svfiprintf_r+0x1e0>
 8003276:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <_svfiprintf_r+0x200>)
 8003278:	2b00      	cmp	r3, #0
 800327a:	d12f      	bne.n	80032dc <_svfiprintf_r+0x1b8>
 800327c:	6829      	ldr	r1, [r5, #0]
 800327e:	9b05      	ldr	r3, [sp, #20]
 8003280:	2207      	movs	r2, #7
 8003282:	05c9      	lsls	r1, r1, #23
 8003284:	d528      	bpl.n	80032d8 <_svfiprintf_r+0x1b4>
 8003286:	189b      	adds	r3, r3, r2
 8003288:	4393      	bics	r3, r2
 800328a:	3308      	adds	r3, #8
 800328c:	9305      	str	r3, [sp, #20]
 800328e:	696b      	ldr	r3, [r5, #20]
 8003290:	9a03      	ldr	r2, [sp, #12]
 8003292:	189b      	adds	r3, r3, r2
 8003294:	616b      	str	r3, [r5, #20]
 8003296:	e767      	b.n	8003168 <_svfiprintf_r+0x44>
 8003298:	425b      	negs	r3, r3
 800329a:	60eb      	str	r3, [r5, #12]
 800329c:	2302      	movs	r3, #2
 800329e:	430b      	orrs	r3, r1
 80032a0:	602b      	str	r3, [r5, #0]
 80032a2:	e7c0      	b.n	8003226 <_svfiprintf_r+0x102>
 80032a4:	434b      	muls	r3, r1
 80032a6:	3401      	adds	r4, #1
 80032a8:	189b      	adds	r3, r3, r2
 80032aa:	2001      	movs	r0, #1
 80032ac:	e7a0      	b.n	80031f0 <_svfiprintf_r+0xcc>
 80032ae:	2301      	movs	r3, #1
 80032b0:	425b      	negs	r3, r3
 80032b2:	e7c7      	b.n	8003244 <_svfiprintf_r+0x120>
 80032b4:	2300      	movs	r3, #0
 80032b6:	0014      	movs	r4, r2
 80032b8:	200a      	movs	r0, #10
 80032ba:	001a      	movs	r2, r3
 80032bc:	606b      	str	r3, [r5, #4]
 80032be:	7821      	ldrb	r1, [r4, #0]
 80032c0:	3930      	subs	r1, #48	; 0x30
 80032c2:	2909      	cmp	r1, #9
 80032c4:	d903      	bls.n	80032ce <_svfiprintf_r+0x1aa>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0bd      	beq.n	8003246 <_svfiprintf_r+0x122>
 80032ca:	9207      	str	r2, [sp, #28]
 80032cc:	e7bb      	b.n	8003246 <_svfiprintf_r+0x122>
 80032ce:	4342      	muls	r2, r0
 80032d0:	3401      	adds	r4, #1
 80032d2:	1852      	adds	r2, r2, r1
 80032d4:	2301      	movs	r3, #1
 80032d6:	e7f2      	b.n	80032be <_svfiprintf_r+0x19a>
 80032d8:	3307      	adds	r3, #7
 80032da:	e7d5      	b.n	8003288 <_svfiprintf_r+0x164>
 80032dc:	ab05      	add	r3, sp, #20
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	003a      	movs	r2, r7
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <_svfiprintf_r+0x204>)
 80032e4:	0029      	movs	r1, r5
 80032e6:	9802      	ldr	r0, [sp, #8]
 80032e8:	e000      	b.n	80032ec <_svfiprintf_r+0x1c8>
 80032ea:	bf00      	nop
 80032ec:	9003      	str	r0, [sp, #12]
 80032ee:	9b03      	ldr	r3, [sp, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	d1cc      	bne.n	800328e <_svfiprintf_r+0x16a>
 80032f4:	89bb      	ldrh	r3, [r7, #12]
 80032f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80032f8:	065b      	lsls	r3, r3, #25
 80032fa:	d400      	bmi.n	80032fe <_svfiprintf_r+0x1da>
 80032fc:	e729      	b.n	8003152 <_svfiprintf_r+0x2e>
 80032fe:	2001      	movs	r0, #1
 8003300:	4240      	negs	r0, r0
 8003302:	e726      	b.n	8003152 <_svfiprintf_r+0x2e>
 8003304:	ab05      	add	r3, sp, #20
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	003a      	movs	r2, r7
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <_svfiprintf_r+0x204>)
 800330c:	0029      	movs	r1, r5
 800330e:	9802      	ldr	r0, [sp, #8]
 8003310:	f000 f87a 	bl	8003408 <_printf_i>
 8003314:	e7ea      	b.n	80032ec <_svfiprintf_r+0x1c8>
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	080037a8 	.word	0x080037a8
 800331c:	080037ae 	.word	0x080037ae
 8003320:	080037b2 	.word	0x080037b2
 8003324:	00000000 	.word	0x00000000
 8003328:	08003061 	.word	0x08003061

0800332c <_printf_common>:
 800332c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800332e:	0015      	movs	r5, r2
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	688a      	ldr	r2, [r1, #8]
 8003334:	690b      	ldr	r3, [r1, #16]
 8003336:	9000      	str	r0, [sp, #0]
 8003338:	000c      	movs	r4, r1
 800333a:	4293      	cmp	r3, r2
 800333c:	da00      	bge.n	8003340 <_printf_common+0x14>
 800333e:	0013      	movs	r3, r2
 8003340:	0022      	movs	r2, r4
 8003342:	602b      	str	r3, [r5, #0]
 8003344:	3243      	adds	r2, #67	; 0x43
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	2a00      	cmp	r2, #0
 800334a:	d001      	beq.n	8003350 <_printf_common+0x24>
 800334c:	3301      	adds	r3, #1
 800334e:	602b      	str	r3, [r5, #0]
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	069b      	lsls	r3, r3, #26
 8003354:	d502      	bpl.n	800335c <_printf_common+0x30>
 8003356:	682b      	ldr	r3, [r5, #0]
 8003358:	3302      	adds	r3, #2
 800335a:	602b      	str	r3, [r5, #0]
 800335c:	2706      	movs	r7, #6
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	401f      	ands	r7, r3
 8003362:	d027      	beq.n	80033b4 <_printf_common+0x88>
 8003364:	0023      	movs	r3, r4
 8003366:	3343      	adds	r3, #67	; 0x43
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	4193      	sbcs	r3, r2
 800336e:	6822      	ldr	r2, [r4, #0]
 8003370:	0692      	lsls	r2, r2, #26
 8003372:	d430      	bmi.n	80033d6 <_printf_common+0xaa>
 8003374:	0022      	movs	r2, r4
 8003376:	9901      	ldr	r1, [sp, #4]
 8003378:	3243      	adds	r2, #67	; 0x43
 800337a:	9800      	ldr	r0, [sp, #0]
 800337c:	9e08      	ldr	r6, [sp, #32]
 800337e:	47b0      	blx	r6
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d025      	beq.n	80033d0 <_printf_common+0xa4>
 8003384:	2306      	movs	r3, #6
 8003386:	6820      	ldr	r0, [r4, #0]
 8003388:	682a      	ldr	r2, [r5, #0]
 800338a:	68e1      	ldr	r1, [r4, #12]
 800338c:	4003      	ands	r3, r0
 800338e:	2500      	movs	r5, #0
 8003390:	2b04      	cmp	r3, #4
 8003392:	d103      	bne.n	800339c <_printf_common+0x70>
 8003394:	1a8d      	subs	r5, r1, r2
 8003396:	43eb      	mvns	r3, r5
 8003398:	17db      	asrs	r3, r3, #31
 800339a:	401d      	ands	r5, r3
 800339c:	68a3      	ldr	r3, [r4, #8]
 800339e:	6922      	ldr	r2, [r4, #16]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	dd01      	ble.n	80033a8 <_printf_common+0x7c>
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	18ed      	adds	r5, r5, r3
 80033a8:	2700      	movs	r7, #0
 80033aa:	42bd      	cmp	r5, r7
 80033ac:	d120      	bne.n	80033f0 <_printf_common+0xc4>
 80033ae:	2000      	movs	r0, #0
 80033b0:	e010      	b.n	80033d4 <_printf_common+0xa8>
 80033b2:	3701      	adds	r7, #1
 80033b4:	68e3      	ldr	r3, [r4, #12]
 80033b6:	682a      	ldr	r2, [r5, #0]
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	429f      	cmp	r7, r3
 80033bc:	dad2      	bge.n	8003364 <_printf_common+0x38>
 80033be:	0022      	movs	r2, r4
 80033c0:	2301      	movs	r3, #1
 80033c2:	3219      	adds	r2, #25
 80033c4:	9901      	ldr	r1, [sp, #4]
 80033c6:	9800      	ldr	r0, [sp, #0]
 80033c8:	9e08      	ldr	r6, [sp, #32]
 80033ca:	47b0      	blx	r6
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d1f0      	bne.n	80033b2 <_printf_common+0x86>
 80033d0:	2001      	movs	r0, #1
 80033d2:	4240      	negs	r0, r0
 80033d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033d6:	2030      	movs	r0, #48	; 0x30
 80033d8:	18e1      	adds	r1, r4, r3
 80033da:	3143      	adds	r1, #67	; 0x43
 80033dc:	7008      	strb	r0, [r1, #0]
 80033de:	0021      	movs	r1, r4
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	3145      	adds	r1, #69	; 0x45
 80033e4:	7809      	ldrb	r1, [r1, #0]
 80033e6:	18a2      	adds	r2, r4, r2
 80033e8:	3243      	adds	r2, #67	; 0x43
 80033ea:	3302      	adds	r3, #2
 80033ec:	7011      	strb	r1, [r2, #0]
 80033ee:	e7c1      	b.n	8003374 <_printf_common+0x48>
 80033f0:	0022      	movs	r2, r4
 80033f2:	2301      	movs	r3, #1
 80033f4:	321a      	adds	r2, #26
 80033f6:	9901      	ldr	r1, [sp, #4]
 80033f8:	9800      	ldr	r0, [sp, #0]
 80033fa:	9e08      	ldr	r6, [sp, #32]
 80033fc:	47b0      	blx	r6
 80033fe:	1c43      	adds	r3, r0, #1
 8003400:	d0e6      	beq.n	80033d0 <_printf_common+0xa4>
 8003402:	3701      	adds	r7, #1
 8003404:	e7d1      	b.n	80033aa <_printf_common+0x7e>
	...

08003408 <_printf_i>:
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	b08b      	sub	sp, #44	; 0x2c
 800340c:	9206      	str	r2, [sp, #24]
 800340e:	000a      	movs	r2, r1
 8003410:	3243      	adds	r2, #67	; 0x43
 8003412:	9307      	str	r3, [sp, #28]
 8003414:	9005      	str	r0, [sp, #20]
 8003416:	9204      	str	r2, [sp, #16]
 8003418:	7e0a      	ldrb	r2, [r1, #24]
 800341a:	000c      	movs	r4, r1
 800341c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800341e:	2a6e      	cmp	r2, #110	; 0x6e
 8003420:	d100      	bne.n	8003424 <_printf_i+0x1c>
 8003422:	e08f      	b.n	8003544 <_printf_i+0x13c>
 8003424:	d817      	bhi.n	8003456 <_printf_i+0x4e>
 8003426:	2a63      	cmp	r2, #99	; 0x63
 8003428:	d02c      	beq.n	8003484 <_printf_i+0x7c>
 800342a:	d808      	bhi.n	800343e <_printf_i+0x36>
 800342c:	2a00      	cmp	r2, #0
 800342e:	d100      	bne.n	8003432 <_printf_i+0x2a>
 8003430:	e099      	b.n	8003566 <_printf_i+0x15e>
 8003432:	2a58      	cmp	r2, #88	; 0x58
 8003434:	d054      	beq.n	80034e0 <_printf_i+0xd8>
 8003436:	0026      	movs	r6, r4
 8003438:	3642      	adds	r6, #66	; 0x42
 800343a:	7032      	strb	r2, [r6, #0]
 800343c:	e029      	b.n	8003492 <_printf_i+0x8a>
 800343e:	2a64      	cmp	r2, #100	; 0x64
 8003440:	d001      	beq.n	8003446 <_printf_i+0x3e>
 8003442:	2a69      	cmp	r2, #105	; 0x69
 8003444:	d1f7      	bne.n	8003436 <_printf_i+0x2e>
 8003446:	6821      	ldr	r1, [r4, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	0608      	lsls	r0, r1, #24
 800344c:	d523      	bpl.n	8003496 <_printf_i+0x8e>
 800344e:	1d11      	adds	r1, r2, #4
 8003450:	6019      	str	r1, [r3, #0]
 8003452:	6815      	ldr	r5, [r2, #0]
 8003454:	e025      	b.n	80034a2 <_printf_i+0x9a>
 8003456:	2a73      	cmp	r2, #115	; 0x73
 8003458:	d100      	bne.n	800345c <_printf_i+0x54>
 800345a:	e088      	b.n	800356e <_printf_i+0x166>
 800345c:	d808      	bhi.n	8003470 <_printf_i+0x68>
 800345e:	2a6f      	cmp	r2, #111	; 0x6f
 8003460:	d029      	beq.n	80034b6 <_printf_i+0xae>
 8003462:	2a70      	cmp	r2, #112	; 0x70
 8003464:	d1e7      	bne.n	8003436 <_printf_i+0x2e>
 8003466:	2220      	movs	r2, #32
 8003468:	6809      	ldr	r1, [r1, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	6022      	str	r2, [r4, #0]
 800346e:	e003      	b.n	8003478 <_printf_i+0x70>
 8003470:	2a75      	cmp	r2, #117	; 0x75
 8003472:	d020      	beq.n	80034b6 <_printf_i+0xae>
 8003474:	2a78      	cmp	r2, #120	; 0x78
 8003476:	d1de      	bne.n	8003436 <_printf_i+0x2e>
 8003478:	0022      	movs	r2, r4
 800347a:	2178      	movs	r1, #120	; 0x78
 800347c:	3245      	adds	r2, #69	; 0x45
 800347e:	7011      	strb	r1, [r2, #0]
 8003480:	4a6c      	ldr	r2, [pc, #432]	; (8003634 <_printf_i+0x22c>)
 8003482:	e030      	b.n	80034e6 <_printf_i+0xde>
 8003484:	000e      	movs	r6, r1
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	3642      	adds	r6, #66	; 0x42
 800348a:	1d11      	adds	r1, r2, #4
 800348c:	6019      	str	r1, [r3, #0]
 800348e:	6813      	ldr	r3, [r2, #0]
 8003490:	7033      	strb	r3, [r6, #0]
 8003492:	2301      	movs	r3, #1
 8003494:	e079      	b.n	800358a <_printf_i+0x182>
 8003496:	0649      	lsls	r1, r1, #25
 8003498:	d5d9      	bpl.n	800344e <_printf_i+0x46>
 800349a:	1d11      	adds	r1, r2, #4
 800349c:	6019      	str	r1, [r3, #0]
 800349e:	2300      	movs	r3, #0
 80034a0:	5ed5      	ldrsh	r5, [r2, r3]
 80034a2:	2d00      	cmp	r5, #0
 80034a4:	da03      	bge.n	80034ae <_printf_i+0xa6>
 80034a6:	232d      	movs	r3, #45	; 0x2d
 80034a8:	9a04      	ldr	r2, [sp, #16]
 80034aa:	426d      	negs	r5, r5
 80034ac:	7013      	strb	r3, [r2, #0]
 80034ae:	4b62      	ldr	r3, [pc, #392]	; (8003638 <_printf_i+0x230>)
 80034b0:	270a      	movs	r7, #10
 80034b2:	9303      	str	r3, [sp, #12]
 80034b4:	e02f      	b.n	8003516 <_printf_i+0x10e>
 80034b6:	6820      	ldr	r0, [r4, #0]
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	0605      	lsls	r5, r0, #24
 80034bc:	d503      	bpl.n	80034c6 <_printf_i+0xbe>
 80034be:	1d08      	adds	r0, r1, #4
 80034c0:	6018      	str	r0, [r3, #0]
 80034c2:	680d      	ldr	r5, [r1, #0]
 80034c4:	e005      	b.n	80034d2 <_printf_i+0xca>
 80034c6:	0640      	lsls	r0, r0, #25
 80034c8:	d5f9      	bpl.n	80034be <_printf_i+0xb6>
 80034ca:	680d      	ldr	r5, [r1, #0]
 80034cc:	1d08      	adds	r0, r1, #4
 80034ce:	6018      	str	r0, [r3, #0]
 80034d0:	b2ad      	uxth	r5, r5
 80034d2:	4b59      	ldr	r3, [pc, #356]	; (8003638 <_printf_i+0x230>)
 80034d4:	2708      	movs	r7, #8
 80034d6:	9303      	str	r3, [sp, #12]
 80034d8:	2a6f      	cmp	r2, #111	; 0x6f
 80034da:	d018      	beq.n	800350e <_printf_i+0x106>
 80034dc:	270a      	movs	r7, #10
 80034de:	e016      	b.n	800350e <_printf_i+0x106>
 80034e0:	3145      	adds	r1, #69	; 0x45
 80034e2:	700a      	strb	r2, [r1, #0]
 80034e4:	4a54      	ldr	r2, [pc, #336]	; (8003638 <_printf_i+0x230>)
 80034e6:	9203      	str	r2, [sp, #12]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	6821      	ldr	r1, [r4, #0]
 80034ec:	1d10      	adds	r0, r2, #4
 80034ee:	6018      	str	r0, [r3, #0]
 80034f0:	6815      	ldr	r5, [r2, #0]
 80034f2:	0608      	lsls	r0, r1, #24
 80034f4:	d522      	bpl.n	800353c <_printf_i+0x134>
 80034f6:	07cb      	lsls	r3, r1, #31
 80034f8:	d502      	bpl.n	8003500 <_printf_i+0xf8>
 80034fa:	2320      	movs	r3, #32
 80034fc:	4319      	orrs	r1, r3
 80034fe:	6021      	str	r1, [r4, #0]
 8003500:	2710      	movs	r7, #16
 8003502:	2d00      	cmp	r5, #0
 8003504:	d103      	bne.n	800350e <_printf_i+0x106>
 8003506:	2320      	movs	r3, #32
 8003508:	6822      	ldr	r2, [r4, #0]
 800350a:	439a      	bics	r2, r3
 800350c:	6022      	str	r2, [r4, #0]
 800350e:	0023      	movs	r3, r4
 8003510:	2200      	movs	r2, #0
 8003512:	3343      	adds	r3, #67	; 0x43
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	6863      	ldr	r3, [r4, #4]
 8003518:	60a3      	str	r3, [r4, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	db5c      	blt.n	80035d8 <_printf_i+0x1d0>
 800351e:	2204      	movs	r2, #4
 8003520:	6821      	ldr	r1, [r4, #0]
 8003522:	4391      	bics	r1, r2
 8003524:	6021      	str	r1, [r4, #0]
 8003526:	2d00      	cmp	r5, #0
 8003528:	d158      	bne.n	80035dc <_printf_i+0x1d4>
 800352a:	9e04      	ldr	r6, [sp, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d064      	beq.n	80035fa <_printf_i+0x1f2>
 8003530:	0026      	movs	r6, r4
 8003532:	9b03      	ldr	r3, [sp, #12]
 8003534:	3642      	adds	r6, #66	; 0x42
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	7033      	strb	r3, [r6, #0]
 800353a:	e05e      	b.n	80035fa <_printf_i+0x1f2>
 800353c:	0648      	lsls	r0, r1, #25
 800353e:	d5da      	bpl.n	80034f6 <_printf_i+0xee>
 8003540:	b2ad      	uxth	r5, r5
 8003542:	e7d8      	b.n	80034f6 <_printf_i+0xee>
 8003544:	6809      	ldr	r1, [r1, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	0608      	lsls	r0, r1, #24
 800354a:	d505      	bpl.n	8003558 <_printf_i+0x150>
 800354c:	1d11      	adds	r1, r2, #4
 800354e:	6019      	str	r1, [r3, #0]
 8003550:	6813      	ldr	r3, [r2, #0]
 8003552:	6962      	ldr	r2, [r4, #20]
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e006      	b.n	8003566 <_printf_i+0x15e>
 8003558:	0649      	lsls	r1, r1, #25
 800355a:	d5f7      	bpl.n	800354c <_printf_i+0x144>
 800355c:	1d11      	adds	r1, r2, #4
 800355e:	6019      	str	r1, [r3, #0]
 8003560:	6813      	ldr	r3, [r2, #0]
 8003562:	8aa2      	ldrh	r2, [r4, #20]
 8003564:	801a      	strh	r2, [r3, #0]
 8003566:	2300      	movs	r3, #0
 8003568:	9e04      	ldr	r6, [sp, #16]
 800356a:	6123      	str	r3, [r4, #16]
 800356c:	e054      	b.n	8003618 <_printf_i+0x210>
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	1d11      	adds	r1, r2, #4
 8003572:	6019      	str	r1, [r3, #0]
 8003574:	6816      	ldr	r6, [r2, #0]
 8003576:	2100      	movs	r1, #0
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	0030      	movs	r0, r6
 800357c:	f000 f85e 	bl	800363c <memchr>
 8003580:	2800      	cmp	r0, #0
 8003582:	d001      	beq.n	8003588 <_printf_i+0x180>
 8003584:	1b80      	subs	r0, r0, r6
 8003586:	6060      	str	r0, [r4, #4]
 8003588:	6863      	ldr	r3, [r4, #4]
 800358a:	6123      	str	r3, [r4, #16]
 800358c:	2300      	movs	r3, #0
 800358e:	9a04      	ldr	r2, [sp, #16]
 8003590:	7013      	strb	r3, [r2, #0]
 8003592:	e041      	b.n	8003618 <_printf_i+0x210>
 8003594:	6923      	ldr	r3, [r4, #16]
 8003596:	0032      	movs	r2, r6
 8003598:	9906      	ldr	r1, [sp, #24]
 800359a:	9805      	ldr	r0, [sp, #20]
 800359c:	9d07      	ldr	r5, [sp, #28]
 800359e:	47a8      	blx	r5
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d043      	beq.n	800362c <_printf_i+0x224>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	2500      	movs	r5, #0
 80035a8:	079b      	lsls	r3, r3, #30
 80035aa:	d40f      	bmi.n	80035cc <_printf_i+0x1c4>
 80035ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ae:	68e0      	ldr	r0, [r4, #12]
 80035b0:	4298      	cmp	r0, r3
 80035b2:	da3d      	bge.n	8003630 <_printf_i+0x228>
 80035b4:	0018      	movs	r0, r3
 80035b6:	e03b      	b.n	8003630 <_printf_i+0x228>
 80035b8:	0022      	movs	r2, r4
 80035ba:	2301      	movs	r3, #1
 80035bc:	3219      	adds	r2, #25
 80035be:	9906      	ldr	r1, [sp, #24]
 80035c0:	9805      	ldr	r0, [sp, #20]
 80035c2:	9e07      	ldr	r6, [sp, #28]
 80035c4:	47b0      	blx	r6
 80035c6:	1c43      	adds	r3, r0, #1
 80035c8:	d030      	beq.n	800362c <_printf_i+0x224>
 80035ca:	3501      	adds	r5, #1
 80035cc:	68e3      	ldr	r3, [r4, #12]
 80035ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	429d      	cmp	r5, r3
 80035d4:	dbf0      	blt.n	80035b8 <_printf_i+0x1b0>
 80035d6:	e7e9      	b.n	80035ac <_printf_i+0x1a4>
 80035d8:	2d00      	cmp	r5, #0
 80035da:	d0a9      	beq.n	8003530 <_printf_i+0x128>
 80035dc:	9e04      	ldr	r6, [sp, #16]
 80035de:	0028      	movs	r0, r5
 80035e0:	0039      	movs	r1, r7
 80035e2:	f7fc fe1f 	bl	8000224 <__aeabi_uidivmod>
 80035e6:	9b03      	ldr	r3, [sp, #12]
 80035e8:	3e01      	subs	r6, #1
 80035ea:	5c5b      	ldrb	r3, [r3, r1]
 80035ec:	0028      	movs	r0, r5
 80035ee:	7033      	strb	r3, [r6, #0]
 80035f0:	0039      	movs	r1, r7
 80035f2:	f7fc fd91 	bl	8000118 <__udivsi3>
 80035f6:	1e05      	subs	r5, r0, #0
 80035f8:	d1f1      	bne.n	80035de <_printf_i+0x1d6>
 80035fa:	2f08      	cmp	r7, #8
 80035fc:	d109      	bne.n	8003612 <_printf_i+0x20a>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	07db      	lsls	r3, r3, #31
 8003602:	d506      	bpl.n	8003612 <_printf_i+0x20a>
 8003604:	6863      	ldr	r3, [r4, #4]
 8003606:	6922      	ldr	r2, [r4, #16]
 8003608:	4293      	cmp	r3, r2
 800360a:	dc02      	bgt.n	8003612 <_printf_i+0x20a>
 800360c:	2330      	movs	r3, #48	; 0x30
 800360e:	3e01      	subs	r6, #1
 8003610:	7033      	strb	r3, [r6, #0]
 8003612:	9b04      	ldr	r3, [sp, #16]
 8003614:	1b9b      	subs	r3, r3, r6
 8003616:	6123      	str	r3, [r4, #16]
 8003618:	9b07      	ldr	r3, [sp, #28]
 800361a:	aa09      	add	r2, sp, #36	; 0x24
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	0021      	movs	r1, r4
 8003620:	9b06      	ldr	r3, [sp, #24]
 8003622:	9805      	ldr	r0, [sp, #20]
 8003624:	f7ff fe82 	bl	800332c <_printf_common>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d1b3      	bne.n	8003594 <_printf_i+0x18c>
 800362c:	2001      	movs	r0, #1
 800362e:	4240      	negs	r0, r0
 8003630:	b00b      	add	sp, #44	; 0x2c
 8003632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003634:	080037ca 	.word	0x080037ca
 8003638:	080037b9 	.word	0x080037b9

0800363c <memchr>:
 800363c:	b2c9      	uxtb	r1, r1
 800363e:	1882      	adds	r2, r0, r2
 8003640:	4290      	cmp	r0, r2
 8003642:	d101      	bne.n	8003648 <memchr+0xc>
 8003644:	2000      	movs	r0, #0
 8003646:	4770      	bx	lr
 8003648:	7803      	ldrb	r3, [r0, #0]
 800364a:	428b      	cmp	r3, r1
 800364c:	d0fb      	beq.n	8003646 <memchr+0xa>
 800364e:	3001      	adds	r0, #1
 8003650:	e7f6      	b.n	8003640 <memchr+0x4>

08003652 <memmove>:
 8003652:	b510      	push	{r4, lr}
 8003654:	4288      	cmp	r0, r1
 8003656:	d902      	bls.n	800365e <memmove+0xc>
 8003658:	188b      	adds	r3, r1, r2
 800365a:	4298      	cmp	r0, r3
 800365c:	d308      	bcc.n	8003670 <memmove+0x1e>
 800365e:	2300      	movs	r3, #0
 8003660:	429a      	cmp	r2, r3
 8003662:	d007      	beq.n	8003674 <memmove+0x22>
 8003664:	5ccc      	ldrb	r4, [r1, r3]
 8003666:	54c4      	strb	r4, [r0, r3]
 8003668:	3301      	adds	r3, #1
 800366a:	e7f9      	b.n	8003660 <memmove+0xe>
 800366c:	5c8b      	ldrb	r3, [r1, r2]
 800366e:	5483      	strb	r3, [r0, r2]
 8003670:	3a01      	subs	r2, #1
 8003672:	d2fb      	bcs.n	800366c <memmove+0x1a>
 8003674:	bd10      	pop	{r4, pc}

08003676 <_realloc_r>:
 8003676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003678:	0007      	movs	r7, r0
 800367a:	000d      	movs	r5, r1
 800367c:	0016      	movs	r6, r2
 800367e:	2900      	cmp	r1, #0
 8003680:	d105      	bne.n	800368e <_realloc_r+0x18>
 8003682:	0011      	movs	r1, r2
 8003684:	f7ff fc02 	bl	8002e8c <_malloc_r>
 8003688:	0004      	movs	r4, r0
 800368a:	0020      	movs	r0, r4
 800368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800368e:	2a00      	cmp	r2, #0
 8003690:	d103      	bne.n	800369a <_realloc_r+0x24>
 8003692:	f7ff fbb1 	bl	8002df8 <_free_r>
 8003696:	0034      	movs	r4, r6
 8003698:	e7f7      	b.n	800368a <_realloc_r+0x14>
 800369a:	f000 f812 	bl	80036c2 <_malloc_usable_size_r>
 800369e:	002c      	movs	r4, r5
 80036a0:	4286      	cmp	r6, r0
 80036a2:	d9f2      	bls.n	800368a <_realloc_r+0x14>
 80036a4:	0031      	movs	r1, r6
 80036a6:	0038      	movs	r0, r7
 80036a8:	f7ff fbf0 	bl	8002e8c <_malloc_r>
 80036ac:	1e04      	subs	r4, r0, #0
 80036ae:	d0ec      	beq.n	800368a <_realloc_r+0x14>
 80036b0:	0029      	movs	r1, r5
 80036b2:	0032      	movs	r2, r6
 80036b4:	f7ff fb80 	bl	8002db8 <memcpy>
 80036b8:	0029      	movs	r1, r5
 80036ba:	0038      	movs	r0, r7
 80036bc:	f7ff fb9c 	bl	8002df8 <_free_r>
 80036c0:	e7e3      	b.n	800368a <_realloc_r+0x14>

080036c2 <_malloc_usable_size_r>:
 80036c2:	1f0b      	subs	r3, r1, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	1f18      	subs	r0, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	da01      	bge.n	80036d0 <_malloc_usable_size_r+0xe>
 80036cc:	580b      	ldr	r3, [r1, r0]
 80036ce:	18c0      	adds	r0, r0, r3
 80036d0:	4770      	bx	lr
	...

080036d4 <_sbrk>:
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <_sbrk+0x18>)
 80036d6:	0002      	movs	r2, r0
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	2900      	cmp	r1, #0
 80036dc:	d101      	bne.n	80036e2 <_sbrk+0xe>
 80036de:	4904      	ldr	r1, [pc, #16]	; (80036f0 <_sbrk+0x1c>)
 80036e0:	6019      	str	r1, [r3, #0]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	1882      	adds	r2, r0, r2
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	4770      	bx	lr
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	20000118 	.word	0x20000118
 80036f0:	20000328 	.word	0x20000328

080036f4 <_init>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr

08003700 <_fini>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr
