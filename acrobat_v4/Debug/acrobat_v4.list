
C:\Users\Henry\Desktop\Skripsie\Feedback-Control-of-Robotic-Gymnast-MCU\acrobat_v4\Debug\acrobat_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08004130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002ac  20000088  080041b8  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000334  080041b8  00020334  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d83a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003778  00000000  00000000  0003d8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b1d9  00000000  00000000  00041062  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a88  00000000  00000000  0004c240  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001818  00000000  00000000  0004ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000834c  00000000  00000000  0004e4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0004b48f  00000000  00000000  0005682c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000a1cbb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002360  00000000  00000000  000a1d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000bc1c  00000000  00000000  000a4098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004008 	.word	0x08004008

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08004008 	.word	0x08004008

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c10      	adds	r0, r2, #0
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	1c19      	adds	r1, r3, #0
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f000 fbdd 	bl	8000a00 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fb37 	bl	80008c4 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 fbcf 	bl	8000a00 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 fbc5 	bl	8000a00 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 fb57 	bl	8000938 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 fb4d 	bl	8000938 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_fmul>:
 80002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ae:	4657      	mov	r7, sl
 80002b0:	464e      	mov	r6, r9
 80002b2:	4645      	mov	r5, r8
 80002b4:	46de      	mov	lr, fp
 80002b6:	b5e0      	push	{r5, r6, r7, lr}
 80002b8:	0247      	lsls	r7, r0, #9
 80002ba:	0046      	lsls	r6, r0, #1
 80002bc:	4688      	mov	r8, r1
 80002be:	0a7f      	lsrs	r7, r7, #9
 80002c0:	0e36      	lsrs	r6, r6, #24
 80002c2:	0fc4      	lsrs	r4, r0, #31
 80002c4:	2e00      	cmp	r6, #0
 80002c6:	d047      	beq.n	8000358 <__aeabi_fmul+0xac>
 80002c8:	2eff      	cmp	r6, #255	; 0xff
 80002ca:	d024      	beq.n	8000316 <__aeabi_fmul+0x6a>
 80002cc:	00fb      	lsls	r3, r7, #3
 80002ce:	2780      	movs	r7, #128	; 0x80
 80002d0:	04ff      	lsls	r7, r7, #19
 80002d2:	431f      	orrs	r7, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	4699      	mov	r9, r3
 80002d8:	469a      	mov	sl, r3
 80002da:	3e7f      	subs	r6, #127	; 0x7f
 80002dc:	4643      	mov	r3, r8
 80002de:	025d      	lsls	r5, r3, #9
 80002e0:	0058      	lsls	r0, r3, #1
 80002e2:	0fdb      	lsrs	r3, r3, #31
 80002e4:	0a6d      	lsrs	r5, r5, #9
 80002e6:	0e00      	lsrs	r0, r0, #24
 80002e8:	4698      	mov	r8, r3
 80002ea:	d043      	beq.n	8000374 <__aeabi_fmul+0xc8>
 80002ec:	28ff      	cmp	r0, #255	; 0xff
 80002ee:	d03b      	beq.n	8000368 <__aeabi_fmul+0xbc>
 80002f0:	00eb      	lsls	r3, r5, #3
 80002f2:	2580      	movs	r5, #128	; 0x80
 80002f4:	2200      	movs	r2, #0
 80002f6:	04ed      	lsls	r5, r5, #19
 80002f8:	431d      	orrs	r5, r3
 80002fa:	387f      	subs	r0, #127	; 0x7f
 80002fc:	1836      	adds	r6, r6, r0
 80002fe:	1c73      	adds	r3, r6, #1
 8000300:	4641      	mov	r1, r8
 8000302:	469b      	mov	fp, r3
 8000304:	464b      	mov	r3, r9
 8000306:	4061      	eors	r1, r4
 8000308:	4313      	orrs	r3, r2
 800030a:	2b0f      	cmp	r3, #15
 800030c:	d864      	bhi.n	80003d8 <__aeabi_fmul+0x12c>
 800030e:	4875      	ldr	r0, [pc, #468]	; (80004e4 <__aeabi_fmul+0x238>)
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	58c3      	ldr	r3, [r0, r3]
 8000314:	469f      	mov	pc, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d142      	bne.n	80003a0 <__aeabi_fmul+0xf4>
 800031a:	2308      	movs	r3, #8
 800031c:	4699      	mov	r9, r3
 800031e:	3b06      	subs	r3, #6
 8000320:	26ff      	movs	r6, #255	; 0xff
 8000322:	469a      	mov	sl, r3
 8000324:	e7da      	b.n	80002dc <__aeabi_fmul+0x30>
 8000326:	4641      	mov	r1, r8
 8000328:	2a02      	cmp	r2, #2
 800032a:	d028      	beq.n	800037e <__aeabi_fmul+0xd2>
 800032c:	2a03      	cmp	r2, #3
 800032e:	d100      	bne.n	8000332 <__aeabi_fmul+0x86>
 8000330:	e0ce      	b.n	80004d0 <__aeabi_fmul+0x224>
 8000332:	2a01      	cmp	r2, #1
 8000334:	d000      	beq.n	8000338 <__aeabi_fmul+0x8c>
 8000336:	e0ac      	b.n	8000492 <__aeabi_fmul+0x1e6>
 8000338:	4011      	ands	r1, r2
 800033a:	2000      	movs	r0, #0
 800033c:	2200      	movs	r2, #0
 800033e:	b2cc      	uxtb	r4, r1
 8000340:	0240      	lsls	r0, r0, #9
 8000342:	05d2      	lsls	r2, r2, #23
 8000344:	0a40      	lsrs	r0, r0, #9
 8000346:	07e4      	lsls	r4, r4, #31
 8000348:	4310      	orrs	r0, r2
 800034a:	4320      	orrs	r0, r4
 800034c:	bc3c      	pop	{r2, r3, r4, r5}
 800034e:	4690      	mov	r8, r2
 8000350:	4699      	mov	r9, r3
 8000352:	46a2      	mov	sl, r4
 8000354:	46ab      	mov	fp, r5
 8000356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000358:	2f00      	cmp	r7, #0
 800035a:	d115      	bne.n	8000388 <__aeabi_fmul+0xdc>
 800035c:	2304      	movs	r3, #4
 800035e:	4699      	mov	r9, r3
 8000360:	3b03      	subs	r3, #3
 8000362:	2600      	movs	r6, #0
 8000364:	469a      	mov	sl, r3
 8000366:	e7b9      	b.n	80002dc <__aeabi_fmul+0x30>
 8000368:	20ff      	movs	r0, #255	; 0xff
 800036a:	2202      	movs	r2, #2
 800036c:	2d00      	cmp	r5, #0
 800036e:	d0c5      	beq.n	80002fc <__aeabi_fmul+0x50>
 8000370:	2203      	movs	r2, #3
 8000372:	e7c3      	b.n	80002fc <__aeabi_fmul+0x50>
 8000374:	2d00      	cmp	r5, #0
 8000376:	d119      	bne.n	80003ac <__aeabi_fmul+0x100>
 8000378:	2000      	movs	r0, #0
 800037a:	2201      	movs	r2, #1
 800037c:	e7be      	b.n	80002fc <__aeabi_fmul+0x50>
 800037e:	2401      	movs	r4, #1
 8000380:	22ff      	movs	r2, #255	; 0xff
 8000382:	400c      	ands	r4, r1
 8000384:	2000      	movs	r0, #0
 8000386:	e7db      	b.n	8000340 <__aeabi_fmul+0x94>
 8000388:	0038      	movs	r0, r7
 800038a:	f000 fbed 	bl	8000b68 <__clzsi2>
 800038e:	2676      	movs	r6, #118	; 0x76
 8000390:	1f43      	subs	r3, r0, #5
 8000392:	409f      	lsls	r7, r3
 8000394:	2300      	movs	r3, #0
 8000396:	4276      	negs	r6, r6
 8000398:	1a36      	subs	r6, r6, r0
 800039a:	4699      	mov	r9, r3
 800039c:	469a      	mov	sl, r3
 800039e:	e79d      	b.n	80002dc <__aeabi_fmul+0x30>
 80003a0:	230c      	movs	r3, #12
 80003a2:	4699      	mov	r9, r3
 80003a4:	3b09      	subs	r3, #9
 80003a6:	26ff      	movs	r6, #255	; 0xff
 80003a8:	469a      	mov	sl, r3
 80003aa:	e797      	b.n	80002dc <__aeabi_fmul+0x30>
 80003ac:	0028      	movs	r0, r5
 80003ae:	f000 fbdb 	bl	8000b68 <__clzsi2>
 80003b2:	1f43      	subs	r3, r0, #5
 80003b4:	409d      	lsls	r5, r3
 80003b6:	2376      	movs	r3, #118	; 0x76
 80003b8:	425b      	negs	r3, r3
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	2200      	movs	r2, #0
 80003be:	e79d      	b.n	80002fc <__aeabi_fmul+0x50>
 80003c0:	2080      	movs	r0, #128	; 0x80
 80003c2:	2400      	movs	r4, #0
 80003c4:	03c0      	lsls	r0, r0, #15
 80003c6:	22ff      	movs	r2, #255	; 0xff
 80003c8:	e7ba      	b.n	8000340 <__aeabi_fmul+0x94>
 80003ca:	003d      	movs	r5, r7
 80003cc:	4652      	mov	r2, sl
 80003ce:	e7ab      	b.n	8000328 <__aeabi_fmul+0x7c>
 80003d0:	003d      	movs	r5, r7
 80003d2:	0021      	movs	r1, r4
 80003d4:	4652      	mov	r2, sl
 80003d6:	e7a7      	b.n	8000328 <__aeabi_fmul+0x7c>
 80003d8:	0c3b      	lsrs	r3, r7, #16
 80003da:	469c      	mov	ip, r3
 80003dc:	042a      	lsls	r2, r5, #16
 80003de:	0c12      	lsrs	r2, r2, #16
 80003e0:	0c2b      	lsrs	r3, r5, #16
 80003e2:	0014      	movs	r4, r2
 80003e4:	4660      	mov	r0, ip
 80003e6:	4665      	mov	r5, ip
 80003e8:	043f      	lsls	r7, r7, #16
 80003ea:	0c3f      	lsrs	r7, r7, #16
 80003ec:	437c      	muls	r4, r7
 80003ee:	4342      	muls	r2, r0
 80003f0:	435d      	muls	r5, r3
 80003f2:	437b      	muls	r3, r7
 80003f4:	0c27      	lsrs	r7, r4, #16
 80003f6:	189b      	adds	r3, r3, r2
 80003f8:	18ff      	adds	r7, r7, r3
 80003fa:	42ba      	cmp	r2, r7
 80003fc:	d903      	bls.n	8000406 <__aeabi_fmul+0x15a>
 80003fe:	2380      	movs	r3, #128	; 0x80
 8000400:	025b      	lsls	r3, r3, #9
 8000402:	469c      	mov	ip, r3
 8000404:	4465      	add	r5, ip
 8000406:	0424      	lsls	r4, r4, #16
 8000408:	043a      	lsls	r2, r7, #16
 800040a:	0c24      	lsrs	r4, r4, #16
 800040c:	1912      	adds	r2, r2, r4
 800040e:	0193      	lsls	r3, r2, #6
 8000410:	1e5c      	subs	r4, r3, #1
 8000412:	41a3      	sbcs	r3, r4
 8000414:	0c3f      	lsrs	r7, r7, #16
 8000416:	0e92      	lsrs	r2, r2, #26
 8000418:	197d      	adds	r5, r7, r5
 800041a:	431a      	orrs	r2, r3
 800041c:	01ad      	lsls	r5, r5, #6
 800041e:	4315      	orrs	r5, r2
 8000420:	012b      	lsls	r3, r5, #4
 8000422:	d504      	bpl.n	800042e <__aeabi_fmul+0x182>
 8000424:	2301      	movs	r3, #1
 8000426:	465e      	mov	r6, fp
 8000428:	086a      	lsrs	r2, r5, #1
 800042a:	401d      	ands	r5, r3
 800042c:	4315      	orrs	r5, r2
 800042e:	0032      	movs	r2, r6
 8000430:	327f      	adds	r2, #127	; 0x7f
 8000432:	2a00      	cmp	r2, #0
 8000434:	dd25      	ble.n	8000482 <__aeabi_fmul+0x1d6>
 8000436:	076b      	lsls	r3, r5, #29
 8000438:	d004      	beq.n	8000444 <__aeabi_fmul+0x198>
 800043a:	230f      	movs	r3, #15
 800043c:	402b      	ands	r3, r5
 800043e:	2b04      	cmp	r3, #4
 8000440:	d000      	beq.n	8000444 <__aeabi_fmul+0x198>
 8000442:	3504      	adds	r5, #4
 8000444:	012b      	lsls	r3, r5, #4
 8000446:	d503      	bpl.n	8000450 <__aeabi_fmul+0x1a4>
 8000448:	0032      	movs	r2, r6
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <__aeabi_fmul+0x23c>)
 800044c:	3280      	adds	r2, #128	; 0x80
 800044e:	401d      	ands	r5, r3
 8000450:	2afe      	cmp	r2, #254	; 0xfe
 8000452:	dc94      	bgt.n	800037e <__aeabi_fmul+0xd2>
 8000454:	2401      	movs	r4, #1
 8000456:	01a8      	lsls	r0, r5, #6
 8000458:	0a40      	lsrs	r0, r0, #9
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	400c      	ands	r4, r1
 800045e:	e76f      	b.n	8000340 <__aeabi_fmul+0x94>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	03c0      	lsls	r0, r0, #15
 8000464:	4207      	tst	r7, r0
 8000466:	d007      	beq.n	8000478 <__aeabi_fmul+0x1cc>
 8000468:	4205      	tst	r5, r0
 800046a:	d105      	bne.n	8000478 <__aeabi_fmul+0x1cc>
 800046c:	4328      	orrs	r0, r5
 800046e:	0240      	lsls	r0, r0, #9
 8000470:	0a40      	lsrs	r0, r0, #9
 8000472:	4644      	mov	r4, r8
 8000474:	22ff      	movs	r2, #255	; 0xff
 8000476:	e763      	b.n	8000340 <__aeabi_fmul+0x94>
 8000478:	4338      	orrs	r0, r7
 800047a:	0240      	lsls	r0, r0, #9
 800047c:	0a40      	lsrs	r0, r0, #9
 800047e:	22ff      	movs	r2, #255	; 0xff
 8000480:	e75e      	b.n	8000340 <__aeabi_fmul+0x94>
 8000482:	2401      	movs	r4, #1
 8000484:	1aa3      	subs	r3, r4, r2
 8000486:	2b1b      	cmp	r3, #27
 8000488:	dd05      	ble.n	8000496 <__aeabi_fmul+0x1ea>
 800048a:	400c      	ands	r4, r1
 800048c:	2200      	movs	r2, #0
 800048e:	2000      	movs	r0, #0
 8000490:	e756      	b.n	8000340 <__aeabi_fmul+0x94>
 8000492:	465e      	mov	r6, fp
 8000494:	e7cb      	b.n	800042e <__aeabi_fmul+0x182>
 8000496:	002a      	movs	r2, r5
 8000498:	2020      	movs	r0, #32
 800049a:	40da      	lsrs	r2, r3
 800049c:	1ac3      	subs	r3, r0, r3
 800049e:	409d      	lsls	r5, r3
 80004a0:	002b      	movs	r3, r5
 80004a2:	1e5d      	subs	r5, r3, #1
 80004a4:	41ab      	sbcs	r3, r5
 80004a6:	4313      	orrs	r3, r2
 80004a8:	075a      	lsls	r2, r3, #29
 80004aa:	d004      	beq.n	80004b6 <__aeabi_fmul+0x20a>
 80004ac:	220f      	movs	r2, #15
 80004ae:	401a      	ands	r2, r3
 80004b0:	2a04      	cmp	r2, #4
 80004b2:	d000      	beq.n	80004b6 <__aeabi_fmul+0x20a>
 80004b4:	3304      	adds	r3, #4
 80004b6:	015a      	lsls	r2, r3, #5
 80004b8:	d504      	bpl.n	80004c4 <__aeabi_fmul+0x218>
 80004ba:	2401      	movs	r4, #1
 80004bc:	2201      	movs	r2, #1
 80004be:	400c      	ands	r4, r1
 80004c0:	2000      	movs	r0, #0
 80004c2:	e73d      	b.n	8000340 <__aeabi_fmul+0x94>
 80004c4:	2401      	movs	r4, #1
 80004c6:	019b      	lsls	r3, r3, #6
 80004c8:	0a58      	lsrs	r0, r3, #9
 80004ca:	400c      	ands	r4, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	e737      	b.n	8000340 <__aeabi_fmul+0x94>
 80004d0:	2080      	movs	r0, #128	; 0x80
 80004d2:	2401      	movs	r4, #1
 80004d4:	03c0      	lsls	r0, r0, #15
 80004d6:	4328      	orrs	r0, r5
 80004d8:	0240      	lsls	r0, r0, #9
 80004da:	0a40      	lsrs	r0, r0, #9
 80004dc:	400c      	ands	r4, r1
 80004de:	22ff      	movs	r2, #255	; 0xff
 80004e0:	e72e      	b.n	8000340 <__aeabi_fmul+0x94>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	08004040 	.word	0x08004040
 80004e8:	f7ffffff 	.word	0xf7ffffff

080004ec <__aeabi_fsub>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	464f      	mov	r7, r9
 80004f0:	46d6      	mov	lr, sl
 80004f2:	4646      	mov	r6, r8
 80004f4:	0044      	lsls	r4, r0, #1
 80004f6:	b5c0      	push	{r6, r7, lr}
 80004f8:	0fc2      	lsrs	r2, r0, #31
 80004fa:	0247      	lsls	r7, r0, #9
 80004fc:	0248      	lsls	r0, r1, #9
 80004fe:	0a40      	lsrs	r0, r0, #9
 8000500:	4684      	mov	ip, r0
 8000502:	4666      	mov	r6, ip
 8000504:	0a7b      	lsrs	r3, r7, #9
 8000506:	0048      	lsls	r0, r1, #1
 8000508:	0fc9      	lsrs	r1, r1, #31
 800050a:	469a      	mov	sl, r3
 800050c:	0e24      	lsrs	r4, r4, #24
 800050e:	0015      	movs	r5, r2
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	0e00      	lsrs	r0, r0, #24
 8000514:	4689      	mov	r9, r1
 8000516:	00f6      	lsls	r6, r6, #3
 8000518:	28ff      	cmp	r0, #255	; 0xff
 800051a:	d100      	bne.n	800051e <__aeabi_fsub+0x32>
 800051c:	e08f      	b.n	800063e <__aeabi_fsub+0x152>
 800051e:	2101      	movs	r1, #1
 8000520:	464f      	mov	r7, r9
 8000522:	404f      	eors	r7, r1
 8000524:	0039      	movs	r1, r7
 8000526:	4291      	cmp	r1, r2
 8000528:	d066      	beq.n	80005f8 <__aeabi_fsub+0x10c>
 800052a:	1a22      	subs	r2, r4, r0
 800052c:	2a00      	cmp	r2, #0
 800052e:	dc00      	bgt.n	8000532 <__aeabi_fsub+0x46>
 8000530:	e09d      	b.n	800066e <__aeabi_fsub+0x182>
 8000532:	2800      	cmp	r0, #0
 8000534:	d13d      	bne.n	80005b2 <__aeabi_fsub+0xc6>
 8000536:	2e00      	cmp	r6, #0
 8000538:	d100      	bne.n	800053c <__aeabi_fsub+0x50>
 800053a:	e08b      	b.n	8000654 <__aeabi_fsub+0x168>
 800053c:	1e51      	subs	r1, r2, #1
 800053e:	2900      	cmp	r1, #0
 8000540:	d000      	beq.n	8000544 <__aeabi_fsub+0x58>
 8000542:	e0b5      	b.n	80006b0 <__aeabi_fsub+0x1c4>
 8000544:	2401      	movs	r4, #1
 8000546:	1b9b      	subs	r3, r3, r6
 8000548:	015a      	lsls	r2, r3, #5
 800054a:	d544      	bpl.n	80005d6 <__aeabi_fsub+0xea>
 800054c:	019b      	lsls	r3, r3, #6
 800054e:	099f      	lsrs	r7, r3, #6
 8000550:	0038      	movs	r0, r7
 8000552:	f000 fb09 	bl	8000b68 <__clzsi2>
 8000556:	3805      	subs	r0, #5
 8000558:	4087      	lsls	r7, r0
 800055a:	4284      	cmp	r4, r0
 800055c:	dd00      	ble.n	8000560 <__aeabi_fsub+0x74>
 800055e:	e096      	b.n	800068e <__aeabi_fsub+0x1a2>
 8000560:	1b04      	subs	r4, r0, r4
 8000562:	003a      	movs	r2, r7
 8000564:	2020      	movs	r0, #32
 8000566:	3401      	adds	r4, #1
 8000568:	40e2      	lsrs	r2, r4
 800056a:	1b04      	subs	r4, r0, r4
 800056c:	40a7      	lsls	r7, r4
 800056e:	003b      	movs	r3, r7
 8000570:	1e5f      	subs	r7, r3, #1
 8000572:	41bb      	sbcs	r3, r7
 8000574:	2400      	movs	r4, #0
 8000576:	4313      	orrs	r3, r2
 8000578:	075a      	lsls	r2, r3, #29
 800057a:	d004      	beq.n	8000586 <__aeabi_fsub+0x9a>
 800057c:	220f      	movs	r2, #15
 800057e:	401a      	ands	r2, r3
 8000580:	2a04      	cmp	r2, #4
 8000582:	d000      	beq.n	8000586 <__aeabi_fsub+0x9a>
 8000584:	3304      	adds	r3, #4
 8000586:	015a      	lsls	r2, r3, #5
 8000588:	d527      	bpl.n	80005da <__aeabi_fsub+0xee>
 800058a:	3401      	adds	r4, #1
 800058c:	2cff      	cmp	r4, #255	; 0xff
 800058e:	d100      	bne.n	8000592 <__aeabi_fsub+0xa6>
 8000590:	e079      	b.n	8000686 <__aeabi_fsub+0x19a>
 8000592:	2201      	movs	r2, #1
 8000594:	019b      	lsls	r3, r3, #6
 8000596:	0a5b      	lsrs	r3, r3, #9
 8000598:	b2e4      	uxtb	r4, r4
 800059a:	402a      	ands	r2, r5
 800059c:	025b      	lsls	r3, r3, #9
 800059e:	05e4      	lsls	r4, r4, #23
 80005a0:	0a58      	lsrs	r0, r3, #9
 80005a2:	07d2      	lsls	r2, r2, #31
 80005a4:	4320      	orrs	r0, r4
 80005a6:	4310      	orrs	r0, r2
 80005a8:	bc1c      	pop	{r2, r3, r4}
 80005aa:	4690      	mov	r8, r2
 80005ac:	4699      	mov	r9, r3
 80005ae:	46a2      	mov	sl, r4
 80005b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b2:	2cff      	cmp	r4, #255	; 0xff
 80005b4:	d0e0      	beq.n	8000578 <__aeabi_fsub+0x8c>
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	04c9      	lsls	r1, r1, #19
 80005ba:	430e      	orrs	r6, r1
 80005bc:	2a1b      	cmp	r2, #27
 80005be:	dc7b      	bgt.n	80006b8 <__aeabi_fsub+0x1cc>
 80005c0:	0031      	movs	r1, r6
 80005c2:	2020      	movs	r0, #32
 80005c4:	40d1      	lsrs	r1, r2
 80005c6:	1a82      	subs	r2, r0, r2
 80005c8:	4096      	lsls	r6, r2
 80005ca:	1e72      	subs	r2, r6, #1
 80005cc:	4196      	sbcs	r6, r2
 80005ce:	430e      	orrs	r6, r1
 80005d0:	1b9b      	subs	r3, r3, r6
 80005d2:	015a      	lsls	r2, r3, #5
 80005d4:	d4ba      	bmi.n	800054c <__aeabi_fsub+0x60>
 80005d6:	075a      	lsls	r2, r3, #29
 80005d8:	d1d0      	bne.n	800057c <__aeabi_fsub+0x90>
 80005da:	2201      	movs	r2, #1
 80005dc:	08df      	lsrs	r7, r3, #3
 80005de:	402a      	ands	r2, r5
 80005e0:	2cff      	cmp	r4, #255	; 0xff
 80005e2:	d133      	bne.n	800064c <__aeabi_fsub+0x160>
 80005e4:	2f00      	cmp	r7, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_fsub+0xfe>
 80005e8:	e0a8      	b.n	800073c <__aeabi_fsub+0x250>
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	03db      	lsls	r3, r3, #15
 80005ee:	433b      	orrs	r3, r7
 80005f0:	025b      	lsls	r3, r3, #9
 80005f2:	0a5b      	lsrs	r3, r3, #9
 80005f4:	24ff      	movs	r4, #255	; 0xff
 80005f6:	e7d1      	b.n	800059c <__aeabi_fsub+0xb0>
 80005f8:	1a21      	subs	r1, r4, r0
 80005fa:	2900      	cmp	r1, #0
 80005fc:	dd4c      	ble.n	8000698 <__aeabi_fsub+0x1ac>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d02a      	beq.n	8000658 <__aeabi_fsub+0x16c>
 8000602:	2cff      	cmp	r4, #255	; 0xff
 8000604:	d0b8      	beq.n	8000578 <__aeabi_fsub+0x8c>
 8000606:	2080      	movs	r0, #128	; 0x80
 8000608:	04c0      	lsls	r0, r0, #19
 800060a:	4306      	orrs	r6, r0
 800060c:	291b      	cmp	r1, #27
 800060e:	dd00      	ble.n	8000612 <__aeabi_fsub+0x126>
 8000610:	e0af      	b.n	8000772 <__aeabi_fsub+0x286>
 8000612:	0030      	movs	r0, r6
 8000614:	2720      	movs	r7, #32
 8000616:	40c8      	lsrs	r0, r1
 8000618:	1a79      	subs	r1, r7, r1
 800061a:	408e      	lsls	r6, r1
 800061c:	1e71      	subs	r1, r6, #1
 800061e:	418e      	sbcs	r6, r1
 8000620:	4306      	orrs	r6, r0
 8000622:	199b      	adds	r3, r3, r6
 8000624:	0159      	lsls	r1, r3, #5
 8000626:	d5d6      	bpl.n	80005d6 <__aeabi_fsub+0xea>
 8000628:	3401      	adds	r4, #1
 800062a:	2cff      	cmp	r4, #255	; 0xff
 800062c:	d100      	bne.n	8000630 <__aeabi_fsub+0x144>
 800062e:	e085      	b.n	800073c <__aeabi_fsub+0x250>
 8000630:	2201      	movs	r2, #1
 8000632:	497a      	ldr	r1, [pc, #488]	; (800081c <__aeabi_fsub+0x330>)
 8000634:	401a      	ands	r2, r3
 8000636:	085b      	lsrs	r3, r3, #1
 8000638:	400b      	ands	r3, r1
 800063a:	4313      	orrs	r3, r2
 800063c:	e79c      	b.n	8000578 <__aeabi_fsub+0x8c>
 800063e:	2e00      	cmp	r6, #0
 8000640:	d000      	beq.n	8000644 <__aeabi_fsub+0x158>
 8000642:	e770      	b.n	8000526 <__aeabi_fsub+0x3a>
 8000644:	e76b      	b.n	800051e <__aeabi_fsub+0x32>
 8000646:	1e3b      	subs	r3, r7, #0
 8000648:	d1c5      	bne.n	80005d6 <__aeabi_fsub+0xea>
 800064a:	2200      	movs	r2, #0
 800064c:	027b      	lsls	r3, r7, #9
 800064e:	0a5b      	lsrs	r3, r3, #9
 8000650:	b2e4      	uxtb	r4, r4
 8000652:	e7a3      	b.n	800059c <__aeabi_fsub+0xb0>
 8000654:	0014      	movs	r4, r2
 8000656:	e78f      	b.n	8000578 <__aeabi_fsub+0x8c>
 8000658:	2e00      	cmp	r6, #0
 800065a:	d04d      	beq.n	80006f8 <__aeabi_fsub+0x20c>
 800065c:	1e48      	subs	r0, r1, #1
 800065e:	2800      	cmp	r0, #0
 8000660:	d157      	bne.n	8000712 <__aeabi_fsub+0x226>
 8000662:	199b      	adds	r3, r3, r6
 8000664:	2401      	movs	r4, #1
 8000666:	015a      	lsls	r2, r3, #5
 8000668:	d5b5      	bpl.n	80005d6 <__aeabi_fsub+0xea>
 800066a:	2402      	movs	r4, #2
 800066c:	e7e0      	b.n	8000630 <__aeabi_fsub+0x144>
 800066e:	2a00      	cmp	r2, #0
 8000670:	d125      	bne.n	80006be <__aeabi_fsub+0x1d2>
 8000672:	1c62      	adds	r2, r4, #1
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	2a01      	cmp	r2, #1
 8000678:	dd72      	ble.n	8000760 <__aeabi_fsub+0x274>
 800067a:	1b9f      	subs	r7, r3, r6
 800067c:	017a      	lsls	r2, r7, #5
 800067e:	d535      	bpl.n	80006ec <__aeabi_fsub+0x200>
 8000680:	1af7      	subs	r7, r6, r3
 8000682:	000d      	movs	r5, r1
 8000684:	e764      	b.n	8000550 <__aeabi_fsub+0x64>
 8000686:	2201      	movs	r2, #1
 8000688:	2300      	movs	r3, #0
 800068a:	402a      	ands	r2, r5
 800068c:	e786      	b.n	800059c <__aeabi_fsub+0xb0>
 800068e:	003b      	movs	r3, r7
 8000690:	4a63      	ldr	r2, [pc, #396]	; (8000820 <__aeabi_fsub+0x334>)
 8000692:	1a24      	subs	r4, r4, r0
 8000694:	4013      	ands	r3, r2
 8000696:	e76f      	b.n	8000578 <__aeabi_fsub+0x8c>
 8000698:	2900      	cmp	r1, #0
 800069a:	d16c      	bne.n	8000776 <__aeabi_fsub+0x28a>
 800069c:	1c61      	adds	r1, r4, #1
 800069e:	b2c8      	uxtb	r0, r1
 80006a0:	2801      	cmp	r0, #1
 80006a2:	dd4e      	ble.n	8000742 <__aeabi_fsub+0x256>
 80006a4:	29ff      	cmp	r1, #255	; 0xff
 80006a6:	d049      	beq.n	800073c <__aeabi_fsub+0x250>
 80006a8:	199b      	adds	r3, r3, r6
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	000c      	movs	r4, r1
 80006ae:	e763      	b.n	8000578 <__aeabi_fsub+0x8c>
 80006b0:	2aff      	cmp	r2, #255	; 0xff
 80006b2:	d041      	beq.n	8000738 <__aeabi_fsub+0x24c>
 80006b4:	000a      	movs	r2, r1
 80006b6:	e781      	b.n	80005bc <__aeabi_fsub+0xd0>
 80006b8:	2601      	movs	r6, #1
 80006ba:	1b9b      	subs	r3, r3, r6
 80006bc:	e789      	b.n	80005d2 <__aeabi_fsub+0xe6>
 80006be:	2c00      	cmp	r4, #0
 80006c0:	d01c      	beq.n	80006fc <__aeabi_fsub+0x210>
 80006c2:	28ff      	cmp	r0, #255	; 0xff
 80006c4:	d021      	beq.n	800070a <__aeabi_fsub+0x21e>
 80006c6:	2480      	movs	r4, #128	; 0x80
 80006c8:	04e4      	lsls	r4, r4, #19
 80006ca:	4252      	negs	r2, r2
 80006cc:	4323      	orrs	r3, r4
 80006ce:	2a1b      	cmp	r2, #27
 80006d0:	dd00      	ble.n	80006d4 <__aeabi_fsub+0x1e8>
 80006d2:	e096      	b.n	8000802 <__aeabi_fsub+0x316>
 80006d4:	001c      	movs	r4, r3
 80006d6:	2520      	movs	r5, #32
 80006d8:	40d4      	lsrs	r4, r2
 80006da:	1aaa      	subs	r2, r5, r2
 80006dc:	4093      	lsls	r3, r2
 80006de:	1e5a      	subs	r2, r3, #1
 80006e0:	4193      	sbcs	r3, r2
 80006e2:	4323      	orrs	r3, r4
 80006e4:	1af3      	subs	r3, r6, r3
 80006e6:	0004      	movs	r4, r0
 80006e8:	000d      	movs	r5, r1
 80006ea:	e72d      	b.n	8000548 <__aeabi_fsub+0x5c>
 80006ec:	2f00      	cmp	r7, #0
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fsub+0x206>
 80006f0:	e72e      	b.n	8000550 <__aeabi_fsub+0x64>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2400      	movs	r4, #0
 80006f6:	e7a9      	b.n	800064c <__aeabi_fsub+0x160>
 80006f8:	000c      	movs	r4, r1
 80006fa:	e73d      	b.n	8000578 <__aeabi_fsub+0x8c>
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d058      	beq.n	80007b2 <__aeabi_fsub+0x2c6>
 8000700:	43d2      	mvns	r2, r2
 8000702:	2a00      	cmp	r2, #0
 8000704:	d0ee      	beq.n	80006e4 <__aeabi_fsub+0x1f8>
 8000706:	28ff      	cmp	r0, #255	; 0xff
 8000708:	d1e1      	bne.n	80006ce <__aeabi_fsub+0x1e2>
 800070a:	0033      	movs	r3, r6
 800070c:	24ff      	movs	r4, #255	; 0xff
 800070e:	000d      	movs	r5, r1
 8000710:	e732      	b.n	8000578 <__aeabi_fsub+0x8c>
 8000712:	29ff      	cmp	r1, #255	; 0xff
 8000714:	d010      	beq.n	8000738 <__aeabi_fsub+0x24c>
 8000716:	0001      	movs	r1, r0
 8000718:	e778      	b.n	800060c <__aeabi_fsub+0x120>
 800071a:	2b00      	cmp	r3, #0
 800071c:	d06e      	beq.n	80007fc <__aeabi_fsub+0x310>
 800071e:	24ff      	movs	r4, #255	; 0xff
 8000720:	2e00      	cmp	r6, #0
 8000722:	d100      	bne.n	8000726 <__aeabi_fsub+0x23a>
 8000724:	e728      	b.n	8000578 <__aeabi_fsub+0x8c>
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	4651      	mov	r1, sl
 800072a:	03d2      	lsls	r2, r2, #15
 800072c:	4211      	tst	r1, r2
 800072e:	d003      	beq.n	8000738 <__aeabi_fsub+0x24c>
 8000730:	4661      	mov	r1, ip
 8000732:	4211      	tst	r1, r2
 8000734:	d100      	bne.n	8000738 <__aeabi_fsub+0x24c>
 8000736:	0033      	movs	r3, r6
 8000738:	24ff      	movs	r4, #255	; 0xff
 800073a:	e71d      	b.n	8000578 <__aeabi_fsub+0x8c>
 800073c:	24ff      	movs	r4, #255	; 0xff
 800073e:	2300      	movs	r3, #0
 8000740:	e72c      	b.n	800059c <__aeabi_fsub+0xb0>
 8000742:	2c00      	cmp	r4, #0
 8000744:	d1e9      	bne.n	800071a <__aeabi_fsub+0x22e>
 8000746:	2b00      	cmp	r3, #0
 8000748:	d063      	beq.n	8000812 <__aeabi_fsub+0x326>
 800074a:	2e00      	cmp	r6, #0
 800074c:	d100      	bne.n	8000750 <__aeabi_fsub+0x264>
 800074e:	e713      	b.n	8000578 <__aeabi_fsub+0x8c>
 8000750:	199b      	adds	r3, r3, r6
 8000752:	015a      	lsls	r2, r3, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fsub+0x26c>
 8000756:	e73e      	b.n	80005d6 <__aeabi_fsub+0xea>
 8000758:	4a31      	ldr	r2, [pc, #196]	; (8000820 <__aeabi_fsub+0x334>)
 800075a:	000c      	movs	r4, r1
 800075c:	4013      	ands	r3, r2
 800075e:	e70b      	b.n	8000578 <__aeabi_fsub+0x8c>
 8000760:	2c00      	cmp	r4, #0
 8000762:	d11e      	bne.n	80007a2 <__aeabi_fsub+0x2b6>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d12f      	bne.n	80007c8 <__aeabi_fsub+0x2dc>
 8000768:	2e00      	cmp	r6, #0
 800076a:	d04f      	beq.n	800080c <__aeabi_fsub+0x320>
 800076c:	0033      	movs	r3, r6
 800076e:	000d      	movs	r5, r1
 8000770:	e702      	b.n	8000578 <__aeabi_fsub+0x8c>
 8000772:	2601      	movs	r6, #1
 8000774:	e755      	b.n	8000622 <__aeabi_fsub+0x136>
 8000776:	2c00      	cmp	r4, #0
 8000778:	d11f      	bne.n	80007ba <__aeabi_fsub+0x2ce>
 800077a:	2b00      	cmp	r3, #0
 800077c:	d043      	beq.n	8000806 <__aeabi_fsub+0x31a>
 800077e:	43c9      	mvns	r1, r1
 8000780:	2900      	cmp	r1, #0
 8000782:	d00b      	beq.n	800079c <__aeabi_fsub+0x2b0>
 8000784:	28ff      	cmp	r0, #255	; 0xff
 8000786:	d039      	beq.n	80007fc <__aeabi_fsub+0x310>
 8000788:	291b      	cmp	r1, #27
 800078a:	dc44      	bgt.n	8000816 <__aeabi_fsub+0x32a>
 800078c:	001c      	movs	r4, r3
 800078e:	2720      	movs	r7, #32
 8000790:	40cc      	lsrs	r4, r1
 8000792:	1a79      	subs	r1, r7, r1
 8000794:	408b      	lsls	r3, r1
 8000796:	1e59      	subs	r1, r3, #1
 8000798:	418b      	sbcs	r3, r1
 800079a:	4323      	orrs	r3, r4
 800079c:	199b      	adds	r3, r3, r6
 800079e:	0004      	movs	r4, r0
 80007a0:	e740      	b.n	8000624 <__aeabi_fsub+0x138>
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d11a      	bne.n	80007dc <__aeabi_fsub+0x2f0>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d124      	bne.n	80007f4 <__aeabi_fsub+0x308>
 80007aa:	2780      	movs	r7, #128	; 0x80
 80007ac:	2200      	movs	r2, #0
 80007ae:	03ff      	lsls	r7, r7, #15
 80007b0:	e71b      	b.n	80005ea <__aeabi_fsub+0xfe>
 80007b2:	0033      	movs	r3, r6
 80007b4:	0004      	movs	r4, r0
 80007b6:	000d      	movs	r5, r1
 80007b8:	e6de      	b.n	8000578 <__aeabi_fsub+0x8c>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d01e      	beq.n	80007fc <__aeabi_fsub+0x310>
 80007be:	2480      	movs	r4, #128	; 0x80
 80007c0:	04e4      	lsls	r4, r4, #19
 80007c2:	4249      	negs	r1, r1
 80007c4:	4323      	orrs	r3, r4
 80007c6:	e7df      	b.n	8000788 <__aeabi_fsub+0x29c>
 80007c8:	2e00      	cmp	r6, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fsub+0x2e2>
 80007cc:	e6d4      	b.n	8000578 <__aeabi_fsub+0x8c>
 80007ce:	1b9f      	subs	r7, r3, r6
 80007d0:	017a      	lsls	r2, r7, #5
 80007d2:	d400      	bmi.n	80007d6 <__aeabi_fsub+0x2ea>
 80007d4:	e737      	b.n	8000646 <__aeabi_fsub+0x15a>
 80007d6:	1af3      	subs	r3, r6, r3
 80007d8:	000d      	movs	r5, r1
 80007da:	e6cd      	b.n	8000578 <__aeabi_fsub+0x8c>
 80007dc:	24ff      	movs	r4, #255	; 0xff
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fsub+0x2f8>
 80007e2:	e6c9      	b.n	8000578 <__aeabi_fsub+0x8c>
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	4650      	mov	r0, sl
 80007e8:	03d2      	lsls	r2, r2, #15
 80007ea:	4210      	tst	r0, r2
 80007ec:	d0a4      	beq.n	8000738 <__aeabi_fsub+0x24c>
 80007ee:	4660      	mov	r0, ip
 80007f0:	4210      	tst	r0, r2
 80007f2:	d1a1      	bne.n	8000738 <__aeabi_fsub+0x24c>
 80007f4:	0033      	movs	r3, r6
 80007f6:	000d      	movs	r5, r1
 80007f8:	24ff      	movs	r4, #255	; 0xff
 80007fa:	e6bd      	b.n	8000578 <__aeabi_fsub+0x8c>
 80007fc:	0033      	movs	r3, r6
 80007fe:	24ff      	movs	r4, #255	; 0xff
 8000800:	e6ba      	b.n	8000578 <__aeabi_fsub+0x8c>
 8000802:	2301      	movs	r3, #1
 8000804:	e76e      	b.n	80006e4 <__aeabi_fsub+0x1f8>
 8000806:	0033      	movs	r3, r6
 8000808:	0004      	movs	r4, r0
 800080a:	e6b5      	b.n	8000578 <__aeabi_fsub+0x8c>
 800080c:	2700      	movs	r7, #0
 800080e:	2200      	movs	r2, #0
 8000810:	e71c      	b.n	800064c <__aeabi_fsub+0x160>
 8000812:	0033      	movs	r3, r6
 8000814:	e6b0      	b.n	8000578 <__aeabi_fsub+0x8c>
 8000816:	2301      	movs	r3, #1
 8000818:	e7c0      	b.n	800079c <__aeabi_fsub+0x2b0>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	7dffffff 	.word	0x7dffffff
 8000820:	fbffffff 	.word	0xfbffffff

08000824 <__aeabi_i2f>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	2800      	cmp	r0, #0
 8000828:	d030      	beq.n	800088c <__aeabi_i2f+0x68>
 800082a:	17c3      	asrs	r3, r0, #31
 800082c:	18c4      	adds	r4, r0, r3
 800082e:	405c      	eors	r4, r3
 8000830:	0fc5      	lsrs	r5, r0, #31
 8000832:	0020      	movs	r0, r4
 8000834:	f000 f998 	bl	8000b68 <__clzsi2>
 8000838:	239e      	movs	r3, #158	; 0x9e
 800083a:	1a1b      	subs	r3, r3, r0
 800083c:	2b96      	cmp	r3, #150	; 0x96
 800083e:	dc0d      	bgt.n	800085c <__aeabi_i2f+0x38>
 8000840:	2296      	movs	r2, #150	; 0x96
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	4094      	lsls	r4, r2
 8000846:	002a      	movs	r2, r5
 8000848:	0264      	lsls	r4, r4, #9
 800084a:	0a64      	lsrs	r4, r4, #9
 800084c:	b2db      	uxtb	r3, r3
 800084e:	0264      	lsls	r4, r4, #9
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	0a60      	lsrs	r0, r4, #9
 8000854:	07d2      	lsls	r2, r2, #31
 8000856:	4318      	orrs	r0, r3
 8000858:	4310      	orrs	r0, r2
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	2b99      	cmp	r3, #153	; 0x99
 800085e:	dc19      	bgt.n	8000894 <__aeabi_i2f+0x70>
 8000860:	2299      	movs	r2, #153	; 0x99
 8000862:	1ad2      	subs	r2, r2, r3
 8000864:	2a00      	cmp	r2, #0
 8000866:	dd29      	ble.n	80008bc <__aeabi_i2f+0x98>
 8000868:	4094      	lsls	r4, r2
 800086a:	0022      	movs	r2, r4
 800086c:	4c14      	ldr	r4, [pc, #80]	; (80008c0 <__aeabi_i2f+0x9c>)
 800086e:	4014      	ands	r4, r2
 8000870:	0751      	lsls	r1, r2, #29
 8000872:	d004      	beq.n	800087e <__aeabi_i2f+0x5a>
 8000874:	210f      	movs	r1, #15
 8000876:	400a      	ands	r2, r1
 8000878:	2a04      	cmp	r2, #4
 800087a:	d000      	beq.n	800087e <__aeabi_i2f+0x5a>
 800087c:	3404      	adds	r4, #4
 800087e:	0162      	lsls	r2, r4, #5
 8000880:	d413      	bmi.n	80008aa <__aeabi_i2f+0x86>
 8000882:	01a4      	lsls	r4, r4, #6
 8000884:	0a64      	lsrs	r4, r4, #9
 8000886:	b2db      	uxtb	r3, r3
 8000888:	002a      	movs	r2, r5
 800088a:	e7e0      	b.n	800084e <__aeabi_i2f+0x2a>
 800088c:	2200      	movs	r2, #0
 800088e:	2300      	movs	r3, #0
 8000890:	2400      	movs	r4, #0
 8000892:	e7dc      	b.n	800084e <__aeabi_i2f+0x2a>
 8000894:	2205      	movs	r2, #5
 8000896:	0021      	movs	r1, r4
 8000898:	1a12      	subs	r2, r2, r0
 800089a:	40d1      	lsrs	r1, r2
 800089c:	22b9      	movs	r2, #185	; 0xb9
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	4094      	lsls	r4, r2
 80008a2:	1e62      	subs	r2, r4, #1
 80008a4:	4194      	sbcs	r4, r2
 80008a6:	430c      	orrs	r4, r1
 80008a8:	e7da      	b.n	8000860 <__aeabi_i2f+0x3c>
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <__aeabi_i2f+0x9c>)
 80008ac:	002a      	movs	r2, r5
 80008ae:	401c      	ands	r4, r3
 80008b0:	239f      	movs	r3, #159	; 0x9f
 80008b2:	01a4      	lsls	r4, r4, #6
 80008b4:	1a1b      	subs	r3, r3, r0
 80008b6:	0a64      	lsrs	r4, r4, #9
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	e7c8      	b.n	800084e <__aeabi_i2f+0x2a>
 80008bc:	0022      	movs	r2, r4
 80008be:	e7d5      	b.n	800086c <__aeabi_i2f+0x48>
 80008c0:	fbffffff 	.word	0xfbffffff

080008c4 <__eqdf2>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	464f      	mov	r7, r9
 80008c8:	4646      	mov	r6, r8
 80008ca:	46d6      	mov	lr, sl
 80008cc:	005c      	lsls	r4, r3, #1
 80008ce:	b5c0      	push	{r6, r7, lr}
 80008d0:	031f      	lsls	r7, r3, #12
 80008d2:	0fdb      	lsrs	r3, r3, #31
 80008d4:	469a      	mov	sl, r3
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <__eqdf2+0x70>)
 80008d8:	030e      	lsls	r6, r1, #12
 80008da:	004d      	lsls	r5, r1, #1
 80008dc:	4684      	mov	ip, r0
 80008de:	4680      	mov	r8, r0
 80008e0:	0b36      	lsrs	r6, r6, #12
 80008e2:	0d6d      	lsrs	r5, r5, #21
 80008e4:	0fc9      	lsrs	r1, r1, #31
 80008e6:	4691      	mov	r9, r2
 80008e8:	0b3f      	lsrs	r7, r7, #12
 80008ea:	0d64      	lsrs	r4, r4, #21
 80008ec:	2001      	movs	r0, #1
 80008ee:	429d      	cmp	r5, r3
 80008f0:	d008      	beq.n	8000904 <__eqdf2+0x40>
 80008f2:	429c      	cmp	r4, r3
 80008f4:	d001      	beq.n	80008fa <__eqdf2+0x36>
 80008f6:	42a5      	cmp	r5, r4
 80008f8:	d00b      	beq.n	8000912 <__eqdf2+0x4e>
 80008fa:	bc1c      	pop	{r2, r3, r4}
 80008fc:	4690      	mov	r8, r2
 80008fe:	4699      	mov	r9, r3
 8000900:	46a2      	mov	sl, r4
 8000902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000904:	4663      	mov	r3, ip
 8000906:	4333      	orrs	r3, r6
 8000908:	d1f7      	bne.n	80008fa <__eqdf2+0x36>
 800090a:	42ac      	cmp	r4, r5
 800090c:	d1f5      	bne.n	80008fa <__eqdf2+0x36>
 800090e:	433a      	orrs	r2, r7
 8000910:	d1f3      	bne.n	80008fa <__eqdf2+0x36>
 8000912:	2001      	movs	r0, #1
 8000914:	42be      	cmp	r6, r7
 8000916:	d1f0      	bne.n	80008fa <__eqdf2+0x36>
 8000918:	45c8      	cmp	r8, r9
 800091a:	d1ee      	bne.n	80008fa <__eqdf2+0x36>
 800091c:	4551      	cmp	r1, sl
 800091e:	d007      	beq.n	8000930 <__eqdf2+0x6c>
 8000920:	2d00      	cmp	r5, #0
 8000922:	d1ea      	bne.n	80008fa <__eqdf2+0x36>
 8000924:	4663      	mov	r3, ip
 8000926:	431e      	orrs	r6, r3
 8000928:	0030      	movs	r0, r6
 800092a:	1e46      	subs	r6, r0, #1
 800092c:	41b0      	sbcs	r0, r6
 800092e:	e7e4      	b.n	80008fa <__eqdf2+0x36>
 8000930:	2000      	movs	r0, #0
 8000932:	e7e2      	b.n	80008fa <__eqdf2+0x36>
 8000934:	000007ff 	.word	0x000007ff

08000938 <__gedf2>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	4645      	mov	r5, r8
 800093c:	46de      	mov	lr, fp
 800093e:	4657      	mov	r7, sl
 8000940:	464e      	mov	r6, r9
 8000942:	b5e0      	push	{r5, r6, r7, lr}
 8000944:	031f      	lsls	r7, r3, #12
 8000946:	0b3d      	lsrs	r5, r7, #12
 8000948:	4f2c      	ldr	r7, [pc, #176]	; (80009fc <__gedf2+0xc4>)
 800094a:	030e      	lsls	r6, r1, #12
 800094c:	004c      	lsls	r4, r1, #1
 800094e:	46ab      	mov	fp, r5
 8000950:	005d      	lsls	r5, r3, #1
 8000952:	4684      	mov	ip, r0
 8000954:	0b36      	lsrs	r6, r6, #12
 8000956:	0d64      	lsrs	r4, r4, #21
 8000958:	0fc9      	lsrs	r1, r1, #31
 800095a:	4690      	mov	r8, r2
 800095c:	0d6d      	lsrs	r5, r5, #21
 800095e:	0fdb      	lsrs	r3, r3, #31
 8000960:	42bc      	cmp	r4, r7
 8000962:	d02a      	beq.n	80009ba <__gedf2+0x82>
 8000964:	4f25      	ldr	r7, [pc, #148]	; (80009fc <__gedf2+0xc4>)
 8000966:	42bd      	cmp	r5, r7
 8000968:	d02d      	beq.n	80009c6 <__gedf2+0x8e>
 800096a:	2c00      	cmp	r4, #0
 800096c:	d10f      	bne.n	800098e <__gedf2+0x56>
 800096e:	4330      	orrs	r0, r6
 8000970:	0007      	movs	r7, r0
 8000972:	4681      	mov	r9, r0
 8000974:	4278      	negs	r0, r7
 8000976:	4178      	adcs	r0, r7
 8000978:	b2c0      	uxtb	r0, r0
 800097a:	2d00      	cmp	r5, #0
 800097c:	d117      	bne.n	80009ae <__gedf2+0x76>
 800097e:	465f      	mov	r7, fp
 8000980:	433a      	orrs	r2, r7
 8000982:	d114      	bne.n	80009ae <__gedf2+0x76>
 8000984:	464b      	mov	r3, r9
 8000986:	2000      	movs	r0, #0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00a      	beq.n	80009a2 <__gedf2+0x6a>
 800098c:	e006      	b.n	800099c <__gedf2+0x64>
 800098e:	2d00      	cmp	r5, #0
 8000990:	d102      	bne.n	8000998 <__gedf2+0x60>
 8000992:	4658      	mov	r0, fp
 8000994:	4302      	orrs	r2, r0
 8000996:	d001      	beq.n	800099c <__gedf2+0x64>
 8000998:	4299      	cmp	r1, r3
 800099a:	d018      	beq.n	80009ce <__gedf2+0x96>
 800099c:	4248      	negs	r0, r1
 800099e:	2101      	movs	r1, #1
 80009a0:	4308      	orrs	r0, r1
 80009a2:	bc3c      	pop	{r2, r3, r4, r5}
 80009a4:	4690      	mov	r8, r2
 80009a6:	4699      	mov	r9, r3
 80009a8:	46a2      	mov	sl, r4
 80009aa:	46ab      	mov	fp, r5
 80009ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d0f2      	beq.n	8000998 <__gedf2+0x60>
 80009b2:	2001      	movs	r0, #1
 80009b4:	3b01      	subs	r3, #1
 80009b6:	4318      	orrs	r0, r3
 80009b8:	e7f3      	b.n	80009a2 <__gedf2+0x6a>
 80009ba:	0037      	movs	r7, r6
 80009bc:	4307      	orrs	r7, r0
 80009be:	d0d1      	beq.n	8000964 <__gedf2+0x2c>
 80009c0:	2002      	movs	r0, #2
 80009c2:	4240      	negs	r0, r0
 80009c4:	e7ed      	b.n	80009a2 <__gedf2+0x6a>
 80009c6:	465f      	mov	r7, fp
 80009c8:	4317      	orrs	r7, r2
 80009ca:	d0ce      	beq.n	800096a <__gedf2+0x32>
 80009cc:	e7f8      	b.n	80009c0 <__gedf2+0x88>
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	dce4      	bgt.n	800099c <__gedf2+0x64>
 80009d2:	da03      	bge.n	80009dc <__gedf2+0xa4>
 80009d4:	1e48      	subs	r0, r1, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	4308      	orrs	r0, r1
 80009da:	e7e2      	b.n	80009a2 <__gedf2+0x6a>
 80009dc:	455e      	cmp	r6, fp
 80009de:	d8dd      	bhi.n	800099c <__gedf2+0x64>
 80009e0:	d006      	beq.n	80009f0 <__gedf2+0xb8>
 80009e2:	2000      	movs	r0, #0
 80009e4:	455e      	cmp	r6, fp
 80009e6:	d2dc      	bcs.n	80009a2 <__gedf2+0x6a>
 80009e8:	2301      	movs	r3, #1
 80009ea:	1e48      	subs	r0, r1, #1
 80009ec:	4318      	orrs	r0, r3
 80009ee:	e7d8      	b.n	80009a2 <__gedf2+0x6a>
 80009f0:	45c4      	cmp	ip, r8
 80009f2:	d8d3      	bhi.n	800099c <__gedf2+0x64>
 80009f4:	2000      	movs	r0, #0
 80009f6:	45c4      	cmp	ip, r8
 80009f8:	d3f6      	bcc.n	80009e8 <__gedf2+0xb0>
 80009fa:	e7d2      	b.n	80009a2 <__gedf2+0x6a>
 80009fc:	000007ff 	.word	0x000007ff

08000a00 <__ledf2>:
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	464e      	mov	r6, r9
 8000a04:	4645      	mov	r5, r8
 8000a06:	46de      	mov	lr, fp
 8000a08:	4657      	mov	r7, sl
 8000a0a:	005c      	lsls	r4, r3, #1
 8000a0c:	b5e0      	push	{r5, r6, r7, lr}
 8000a0e:	031f      	lsls	r7, r3, #12
 8000a10:	0fdb      	lsrs	r3, r3, #31
 8000a12:	4699      	mov	r9, r3
 8000a14:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <__ledf2+0xc0>)
 8000a16:	030e      	lsls	r6, r1, #12
 8000a18:	004d      	lsls	r5, r1, #1
 8000a1a:	0fc9      	lsrs	r1, r1, #31
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	0b36      	lsrs	r6, r6, #12
 8000a20:	0d6d      	lsrs	r5, r5, #21
 8000a22:	468b      	mov	fp, r1
 8000a24:	4690      	mov	r8, r2
 8000a26:	0b3f      	lsrs	r7, r7, #12
 8000a28:	0d64      	lsrs	r4, r4, #21
 8000a2a:	429d      	cmp	r5, r3
 8000a2c:	d020      	beq.n	8000a70 <__ledf2+0x70>
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <__ledf2+0xc0>)
 8000a30:	429c      	cmp	r4, r3
 8000a32:	d022      	beq.n	8000a7a <__ledf2+0x7a>
 8000a34:	2d00      	cmp	r5, #0
 8000a36:	d112      	bne.n	8000a5e <__ledf2+0x5e>
 8000a38:	4330      	orrs	r0, r6
 8000a3a:	4243      	negs	r3, r0
 8000a3c:	4143      	adcs	r3, r0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2c00      	cmp	r4, #0
 8000a42:	d01f      	beq.n	8000a84 <__ledf2+0x84>
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d00c      	beq.n	8000a62 <__ledf2+0x62>
 8000a48:	464b      	mov	r3, r9
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	4303      	orrs	r3, r0
 8000a50:	0018      	movs	r0, r3
 8000a52:	bc3c      	pop	{r2, r3, r4, r5}
 8000a54:	4690      	mov	r8, r2
 8000a56:	4699      	mov	r9, r3
 8000a58:	46a2      	mov	sl, r4
 8000a5a:	46ab      	mov	fp, r5
 8000a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d016      	beq.n	8000a90 <__ledf2+0x90>
 8000a62:	45cb      	cmp	fp, r9
 8000a64:	d017      	beq.n	8000a96 <__ledf2+0x96>
 8000a66:	465b      	mov	r3, fp
 8000a68:	4259      	negs	r1, r3
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	e7ef      	b.n	8000a50 <__ledf2+0x50>
 8000a70:	0031      	movs	r1, r6
 8000a72:	2302      	movs	r3, #2
 8000a74:	4301      	orrs	r1, r0
 8000a76:	d1eb      	bne.n	8000a50 <__ledf2+0x50>
 8000a78:	e7d9      	b.n	8000a2e <__ledf2+0x2e>
 8000a7a:	0039      	movs	r1, r7
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	4311      	orrs	r1, r2
 8000a80:	d1e6      	bne.n	8000a50 <__ledf2+0x50>
 8000a82:	e7d7      	b.n	8000a34 <__ledf2+0x34>
 8000a84:	433a      	orrs	r2, r7
 8000a86:	d1dd      	bne.n	8000a44 <__ledf2+0x44>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d0e0      	beq.n	8000a50 <__ledf2+0x50>
 8000a8e:	e7ea      	b.n	8000a66 <__ledf2+0x66>
 8000a90:	433a      	orrs	r2, r7
 8000a92:	d1e6      	bne.n	8000a62 <__ledf2+0x62>
 8000a94:	e7e7      	b.n	8000a66 <__ledf2+0x66>
 8000a96:	42a5      	cmp	r5, r4
 8000a98:	dce5      	bgt.n	8000a66 <__ledf2+0x66>
 8000a9a:	db05      	blt.n	8000aa8 <__ledf2+0xa8>
 8000a9c:	42be      	cmp	r6, r7
 8000a9e:	d8e2      	bhi.n	8000a66 <__ledf2+0x66>
 8000aa0:	d007      	beq.n	8000ab2 <__ledf2+0xb2>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	42be      	cmp	r6, r7
 8000aa6:	d2d3      	bcs.n	8000a50 <__ledf2+0x50>
 8000aa8:	4659      	mov	r1, fp
 8000aaa:	2301      	movs	r3, #1
 8000aac:	3901      	subs	r1, #1
 8000aae:	430b      	orrs	r3, r1
 8000ab0:	e7ce      	b.n	8000a50 <__ledf2+0x50>
 8000ab2:	45c4      	cmp	ip, r8
 8000ab4:	d8d7      	bhi.n	8000a66 <__ledf2+0x66>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	45c4      	cmp	ip, r8
 8000aba:	d3f5      	bcc.n	8000aa8 <__ledf2+0xa8>
 8000abc:	e7c8      	b.n	8000a50 <__ledf2+0x50>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	000007ff 	.word	0x000007ff

08000ac4 <__aeabi_f2d>:
 8000ac4:	0041      	lsls	r1, r0, #1
 8000ac6:	0e09      	lsrs	r1, r1, #24
 8000ac8:	1c4b      	adds	r3, r1, #1
 8000aca:	b570      	push	{r4, r5, r6, lr}
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	0246      	lsls	r6, r0, #9
 8000ad0:	0a75      	lsrs	r5, r6, #9
 8000ad2:	0fc4      	lsrs	r4, r0, #31
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	dd14      	ble.n	8000b02 <__aeabi_f2d+0x3e>
 8000ad8:	23e0      	movs	r3, #224	; 0xe0
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	076d      	lsls	r5, r5, #29
 8000ade:	0b36      	lsrs	r6, r6, #12
 8000ae0:	18cb      	adds	r3, r1, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	0d0a      	lsrs	r2, r1, #20
 8000ae6:	0028      	movs	r0, r5
 8000ae8:	0512      	lsls	r2, r2, #20
 8000aea:	4d1c      	ldr	r5, [pc, #112]	; (8000b5c <__aeabi_f2d+0x98>)
 8000aec:	4332      	orrs	r2, r6
 8000aee:	055b      	lsls	r3, r3, #21
 8000af0:	402a      	ands	r2, r5
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	4313      	orrs	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	07e4      	lsls	r4, r4, #31
 8000afa:	085b      	lsrs	r3, r3, #1
 8000afc:	4323      	orrs	r3, r4
 8000afe:	0019      	movs	r1, r3
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d114      	bne.n	8000b30 <__aeabi_f2d+0x6c>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d01e      	beq.n	8000b48 <__aeabi_f2d+0x84>
 8000b0a:	0028      	movs	r0, r5
 8000b0c:	f000 f82c 	bl	8000b68 <__clzsi2>
 8000b10:	280a      	cmp	r0, #10
 8000b12:	dc1c      	bgt.n	8000b4e <__aeabi_f2d+0x8a>
 8000b14:	230b      	movs	r3, #11
 8000b16:	002a      	movs	r2, r5
 8000b18:	1a1b      	subs	r3, r3, r0
 8000b1a:	40da      	lsrs	r2, r3
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	3315      	adds	r3, #21
 8000b20:	409d      	lsls	r5, r3
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <__aeabi_f2d+0x9c>)
 8000b24:	0312      	lsls	r2, r2, #12
 8000b26:	1a1b      	subs	r3, r3, r0
 8000b28:	055b      	lsls	r3, r3, #21
 8000b2a:	0b16      	lsrs	r6, r2, #12
 8000b2c:	0d5b      	lsrs	r3, r3, #21
 8000b2e:	e7d8      	b.n	8000ae2 <__aeabi_f2d+0x1e>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d006      	beq.n	8000b42 <__aeabi_f2d+0x7e>
 8000b34:	0b32      	lsrs	r2, r6, #12
 8000b36:	2680      	movs	r6, #128	; 0x80
 8000b38:	0336      	lsls	r6, r6, #12
 8000b3a:	076d      	lsls	r5, r5, #29
 8000b3c:	4316      	orrs	r6, r2
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <__aeabi_f2d+0xa0>)
 8000b40:	e7cf      	b.n	8000ae2 <__aeabi_f2d+0x1e>
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <__aeabi_f2d+0xa0>)
 8000b44:	2600      	movs	r6, #0
 8000b46:	e7cc      	b.n	8000ae2 <__aeabi_f2d+0x1e>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2600      	movs	r6, #0
 8000b4c:	e7c9      	b.n	8000ae2 <__aeabi_f2d+0x1e>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	002a      	movs	r2, r5
 8000b52:	3b0b      	subs	r3, #11
 8000b54:	409a      	lsls	r2, r3
 8000b56:	2500      	movs	r5, #0
 8000b58:	e7e3      	b.n	8000b22 <__aeabi_f2d+0x5e>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	800fffff 	.word	0x800fffff
 8000b60:	00000389 	.word	0x00000389
 8000b64:	000007ff 	.word	0x000007ff

08000b68 <__clzsi2>:
 8000b68:	211c      	movs	r1, #28
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	041b      	lsls	r3, r3, #16
 8000b6e:	4298      	cmp	r0, r3
 8000b70:	d301      	bcc.n	8000b76 <__clzsi2+0xe>
 8000b72:	0c00      	lsrs	r0, r0, #16
 8000b74:	3910      	subs	r1, #16
 8000b76:	0a1b      	lsrs	r3, r3, #8
 8000b78:	4298      	cmp	r0, r3
 8000b7a:	d301      	bcc.n	8000b80 <__clzsi2+0x18>
 8000b7c:	0a00      	lsrs	r0, r0, #8
 8000b7e:	3908      	subs	r1, #8
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d301      	bcc.n	8000b8a <__clzsi2+0x22>
 8000b86:	0900      	lsrs	r0, r0, #4
 8000b88:	3904      	subs	r1, #4
 8000b8a:	a202      	add	r2, pc, #8	; (adr r2, 8000b94 <__clzsi2+0x2c>)
 8000b8c:	5c10      	ldrb	r0, [r2, r0]
 8000b8e:	1840      	adds	r0, r0, r1
 8000b90:	4770      	bx	lr
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	02020304 	.word	0x02020304
 8000b98:	01010101 	.word	0x01010101
	...

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000ba8:	f001 f82c 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8000bac:	21fa      	movs	r1, #250	; 0xfa
 8000bae:	0089      	lsls	r1, r1, #2
 8000bb0:	f7ff fab2 	bl	8000118 <__udivsi3>
 8000bb4:	f000 fad6 	bl	8001164 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	0021      	movs	r1, r4
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	f000 fa92 	bl	80010e8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	bd10      	pop	{r4, pc}

08000bc8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	2110      	movs	r1, #16
 8000bca:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_Init+0x1c>)
{
 8000bcc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bce:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd0:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	f7ff ffe5 	bl	8000ba4 <HAL_InitTick>
  HAL_MspInit();
 8000bda:	f002 fa2b 	bl	8003034 <HAL_MspInit>
}
 8000bde:	2000      	movs	r0, #0
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000be8:	4a02      	ldr	r2, [pc, #8]	; (8000bf4 <HAL_IncTick+0xc>)
 8000bea:	6813      	ldr	r3, [r2, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	4770      	bx	lr
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	20000128 	.word	0x20000128

08000bf8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bf8:	4b01      	ldr	r3, [pc, #4]	; (8000c00 <HAL_GetTick+0x8>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
}
 8000bfc:	4770      	bx	lr
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	20000128 	.word	0x20000128

08000c04 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000c04:	2300      	movs	r3, #0
{
 8000c06:	b570      	push	{r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c08:	6802      	ldr	r2, [r0, #0]
{
 8000c0a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000c0c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c0e:	6891      	ldr	r1, [r2, #8]
 8000c10:	3303      	adds	r3, #3
{
 8000c12:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c14:	400b      	ands	r3, r1
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d031      	beq.n	8000c7e <ADC_Enable+0x7a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000c1a:	6891      	ldr	r1, [r2, #8]
 8000c1c:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <ADC_Enable+0x9c>)
 8000c1e:	4219      	tst	r1, r3
 8000c20:	d122      	bne.n	8000c68 <ADC_Enable+0x64>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c22:	2101      	movs	r1, #1
 8000c24:	6893      	ldr	r3, [r2, #8]
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <ADC_Enable+0xa0>)
 8000c2c:	491e      	ldr	r1, [pc, #120]	; (8000ca8 <ADC_Enable+0xa4>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	f7ff fa72 	bl	8000118 <__udivsi3>
 8000c34:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000c36:	9b01      	ldr	r3, [sp, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000c3c:	9b01      	ldr	r3, [sp, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000c42:	9b01      	ldr	r3, [sp, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1f9      	bne.n	8000c3c <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c48:	f7ff ffd6 	bl	8000bf8 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c4c:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000c4e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c50:	e004      	b.n	8000c5c <ADC_Enable+0x58>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c52:	f7ff ffd1 	bl	8000bf8 <HAL_GetTick>
 8000c56:	1b80      	subs	r0, r0, r6
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	d818      	bhi.n	8000c8e <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	421d      	tst	r5, r3
 8000c62:	d0f6      	beq.n	8000c52 <ADC_Enable+0x4e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000c64:	2000      	movs	r0, #0
 8000c66:	e008      	b.n	8000c7a <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c68:	2210      	movs	r2, #16
      return HAL_ERROR;
 8000c6a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c74:	3a0f      	subs	r2, #15
 8000c76:	4313      	orrs	r3, r2
 8000c78:	64a3      	str	r3, [r4, #72]	; 0x48
}
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c7e:	6811      	ldr	r1, [r2, #0]
 8000c80:	420b      	tst	r3, r1
 8000c82:	d1ef      	bne.n	8000c64 <ADC_Enable+0x60>
 8000c84:	68d3      	ldr	r3, [r2, #12]
 8000c86:	041b      	lsls	r3, r3, #16
 8000c88:	d5c7      	bpl.n	8000c1a <ADC_Enable+0x16>
  return HAL_OK;
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	e7f5      	b.n	8000c7a <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c8e:	2210      	movs	r2, #16
 8000c90:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000c92:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c94:	4313      	orrs	r3, r2
 8000c96:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c9a:	431d      	orrs	r5, r3
 8000c9c:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000c9e:	e7ec      	b.n	8000c7a <ADC_Enable+0x76>
 8000ca0:	80000017 	.word	0x80000017
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	000f4240 	.word	0x000f4240

08000cac <HAL_ADC_Init>:
{
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000cb0:	d100      	bne.n	8000cb4 <HAL_ADC_Init+0x8>
 8000cb2:	e080      	b.n	8000db6 <HAL_ADC_Init+0x10a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cb4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d067      	beq.n	8000d8a <HAL_ADC_Init+0xde>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cbc:	06db      	lsls	r3, r3, #27
 8000cbe:	d45e      	bmi.n	8000d7e <HAL_ADC_Init+0xd2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cc0:	2004      	movs	r0, #4
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000cc8:	d159      	bne.n	8000d7e <HAL_ADC_Init+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8000cca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ccc:	4948      	ldr	r1, [pc, #288]	; (8000df0 <HAL_ADC_Init+0x144>)
 8000cce:	400a      	ands	r2, r1
 8000cd0:	3106      	adds	r1, #6
 8000cd2:	31ff      	adds	r1, #255	; 0xff
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cd8:	2203      	movs	r2, #3
 8000cda:	6899      	ldr	r1, [r3, #8]
 8000cdc:	400a      	ands	r2, r1
 8000cde:	2a01      	cmp	r2, #1
 8000ce0:	d059      	beq.n	8000d96 <HAL_ADC_Init+0xea>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ce2:	2118      	movs	r1, #24
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	438a      	bics	r2, r1
 8000ce8:	68a1      	ldr	r1, [r4, #8]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	6861      	ldr	r1, [r4, #4]
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	0892      	lsrs	r2, r2, #2
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	493d      	ldr	r1, [pc, #244]	; (8000df4 <HAL_ADC_Init+0x148>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000cfe:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000d00:	400a      	ands	r2, r1
 8000d02:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000d04:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000d06:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000d08:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000d0a:	69e2      	ldr	r2, [r4, #28]
 8000d0c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000d0e:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000d10:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d12:	3a01      	subs	r2, #1
 8000d14:	1e55      	subs	r5, r2, #1
 8000d16:	41aa      	sbcs	r2, r5
 8000d18:	0315      	lsls	r5, r2, #12
 8000d1a:	68e2      	ldr	r2, [r4, #12]
 8000d1c:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000d1e:	6922      	ldr	r2, [r4, #16]
 8000d20:	4339      	orrs	r1, r7
 8000d22:	2a02      	cmp	r2, #2
 8000d24:	d059      	beq.n	8000dda <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000d26:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d28:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000d2a:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000d2e:	432a      	orrs	r2, r5
 8000d30:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d32:	2901      	cmp	r1, #1
 8000d34:	d04b      	beq.n	8000dce <HAL_ADC_Init+0x122>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d36:	20c2      	movs	r0, #194	; 0xc2
 8000d38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d3a:	30ff      	adds	r0, #255	; 0xff
 8000d3c:	4281      	cmp	r1, r0
 8000d3e:	d002      	beq.n	8000d46 <HAL_ADC_Init+0x9a>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000d42:	4301      	orrs	r1, r0
 8000d44:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d46:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d48:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d4a:	4311      	orrs	r1, r2
 8000d4c:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	0549      	lsls	r1, r1, #21
 8000d52:	428d      	cmp	r5, r1
 8000d54:	d026      	beq.n	8000da4 <HAL_ADC_Init+0xf8>
 8000d56:	1e69      	subs	r1, r5, #1
 8000d58:	2906      	cmp	r1, #6
 8000d5a:	d923      	bls.n	8000da4 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	4926      	ldr	r1, [pc, #152]	; (8000df8 <HAL_ADC_Init+0x14c>)
 8000d60:	400b      	ands	r3, r1
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d029      	beq.n	8000dba <HAL_ADC_Init+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8000d66:	2212      	movs	r2, #18
 8000d68:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8000d6a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000d6c:	4393      	bics	r3, r2
 8000d6e:	3a02      	subs	r2, #2
 8000d70:	4313      	orrs	r3, r2
 8000d72:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d76:	3a0f      	subs	r2, #15
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	64a3      	str	r3, [r4, #72]	; 0x48
 8000d7c:	e004      	b.n	8000d88 <HAL_ADC_Init+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d7e:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 8000d80:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d84:	4313      	orrs	r3, r2
 8000d86:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 8000d8a:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000d8c:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8000d8e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000d90:	f002 f972 	bl	8003078 <HAL_ADC_MspInit>
 8000d94:	e791      	b.n	8000cba <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d96:	6819      	ldr	r1, [r3, #0]
 8000d98:	420a      	tst	r2, r1
 8000d9a:	d1ae      	bne.n	8000cfa <HAL_ADC_Init+0x4e>
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	0412      	lsls	r2, r2, #16
 8000da0:	d59f      	bpl.n	8000ce2 <HAL_ADC_Init+0x36>
 8000da2:	e7aa      	b.n	8000cfa <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000da4:	2107      	movs	r1, #7
 8000da6:	6958      	ldr	r0, [r3, #20]
 8000da8:	4388      	bics	r0, r1
 8000daa:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000dac:	6958      	ldr	r0, [r3, #20]
 8000dae:	4029      	ands	r1, r5
 8000db0:	4301      	orrs	r1, r0
 8000db2:	6159      	str	r1, [r3, #20]
 8000db4:	e7d2      	b.n	8000d5c <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
 8000db8:	e7e6      	b.n	8000d88 <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000dba:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000dbc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000dbe:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000dc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000dc4:	4393      	bics	r3, r2
 8000dc6:	3a02      	subs	r2, #2
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	6463      	str	r3, [r4, #68]	; 0x44
 8000dcc:	e7dc      	b.n	8000d88 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d105      	bne.n	8000dde <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000dd2:	2180      	movs	r1, #128	; 0x80
 8000dd4:	0249      	lsls	r1, r1, #9
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	e7ad      	b.n	8000d36 <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000dda:	2004      	movs	r0, #4
 8000ddc:	e7a3      	b.n	8000d26 <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dde:	2520      	movs	r5, #32
 8000de0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000de2:	4328      	orrs	r0, r5
 8000de4:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000de8:	4301      	orrs	r1, r0
 8000dea:	64a1      	str	r1, [r4, #72]	; 0x48
 8000dec:	e7a3      	b.n	8000d36 <HAL_ADC_Init+0x8a>
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	fffffefd 	.word	0xfffffefd
 8000df4:	fffe0219 	.word	0xfffe0219
 8000df8:	833fffe7 	.word	0x833fffe7

08000dfc <HAL_ADC_Start_DMA>:
{
 8000dfc:	b570      	push	{r4, r5, r6, lr}
 8000dfe:	000d      	movs	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e00:	6801      	ldr	r1, [r0, #0]
{
 8000e02:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e04:	688b      	ldr	r3, [r1, #8]
{
 8000e06:	0016      	movs	r6, r2
    tmp_hal_status = HAL_BUSY;
 8000e08:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e0a:	075b      	lsls	r3, r3, #29
 8000e0c:	d500      	bpl.n	8000e10 <HAL_ADC_Start_DMA+0x14>
}
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8000e10:	2340      	movs	r3, #64	; 0x40
 8000e12:	5ce2      	ldrb	r2, [r4, r3]
 8000e14:	2a01      	cmp	r2, #1
 8000e16:	d0fa      	beq.n	8000e0e <HAL_ADC_Start_DMA+0x12>
 8000e18:	2201      	movs	r2, #1
 8000e1a:	54e2      	strb	r2, [r4, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e1c:	69e3      	ldr	r3, [r4, #28]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d127      	bne.n	8000e72 <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8000e22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e24:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <HAL_ADC_Start_DMA+0x84>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000e28:	401a      	ands	r2, r3
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8000e32:	2240      	movs	r2, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 8000e34:	2300      	movs	r3, #0
 8000e36:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000e38:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e3c:	3a30      	subs	r2, #48	; 0x30
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e3e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_ADC_Start_DMA+0x8c>)
 8000e42:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_ADC_Start_DMA+0x90>)
 8000e46:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e48:	231c      	movs	r3, #28
 8000e4a:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e4c:	684b      	ldr	r3, [r1, #4]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000e52:	68cb      	ldr	r3, [r1, #12]
 8000e54:	3a0f      	subs	r2, #15
 8000e56:	4313      	orrs	r3, r2
 8000e58:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e5a:	002a      	movs	r2, r5
 8000e5c:	3140      	adds	r1, #64	; 0x40
 8000e5e:	0033      	movs	r3, r6
 8000e60:	f000 f9e8 	bl	8001234 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e64:	2104      	movs	r1, #4
 8000e66:	6822      	ldr	r2, [r4, #0]
 8000e68:	2000      	movs	r0, #0
 8000e6a:	6893      	ldr	r3, [r2, #8]
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	6093      	str	r3, [r2, #8]
 8000e70:	e7cd      	b.n	8000e0e <HAL_ADC_Start_DMA+0x12>
      tmp_hal_status = ADC_Enable(hadc);
 8000e72:	0020      	movs	r0, r4
 8000e74:	f7ff fec6 	bl	8000c04 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d1c8      	bne.n	8000e0e <HAL_ADC_Start_DMA+0x12>
 8000e7c:	6821      	ldr	r1, [r4, #0]
 8000e7e:	e7d0      	b.n	8000e22 <HAL_ADC_Start_DMA+0x26>
 8000e80:	fffff0fe 	.word	0xfffff0fe
 8000e84:	08000e95 	.word	0x08000e95
 8000e88:	08000f09 	.word	0x08000f09
 8000e8c:	08000f19 	.word	0x08000f19

08000e90 <HAL_ADC_ConvCpltCallback>:
 8000e90:	4770      	bx	lr
 8000e92:	46c0      	nop			; (mov r8, r8)

08000e94 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e94:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e96:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000e98:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e9c:	4211      	tst	r1, r2
 8000e9e:	d122      	bne.n	8000ee6 <ADC_DMAConvCplt+0x52>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ea8:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000eaa:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	0109      	lsls	r1, r1, #4
 8000eb0:	68d0      	ldr	r0, [r2, #12]
 8000eb2:	4208      	tst	r0, r1
 8000eb4:	d113      	bne.n	8000ede <ADC_DMAConvCplt+0x4a>
 8000eb6:	6a19      	ldr	r1, [r3, #32]
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d110      	bne.n	8000ede <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ebc:	6811      	ldr	r1, [r2, #0]
 8000ebe:	0709      	lsls	r1, r1, #28
 8000ec0:	d50d      	bpl.n	8000ede <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ec2:	6891      	ldr	r1, [r2, #8]
 8000ec4:	0749      	lsls	r1, r1, #29
 8000ec6:	d412      	bmi.n	8000eee <ADC_DMAConvCplt+0x5a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000ec8:	200c      	movs	r0, #12
 8000eca:	6851      	ldr	r1, [r2, #4]
 8000ecc:	4381      	bics	r1, r0
 8000ece:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ed2:	490b      	ldr	r1, [pc, #44]	; (8000f00 <ADC_DMAConvCplt+0x6c>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	3104      	adds	r1, #4
 8000ed8:	31ff      	adds	r1, #255	; 0xff
 8000eda:	430a      	orrs	r2, r1
 8000edc:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff ffd6 	bl	8000e90 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000ee4:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4798      	blx	r3
}
 8000eec:	e7fa      	b.n	8000ee4 <ADC_DMAConvCplt+0x50>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eee:	2120      	movs	r1, #32
 8000ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ef8:	391f      	subs	r1, #31
 8000efa:	430a      	orrs	r2, r1
 8000efc:	649a      	str	r2, [r3, #72]	; 0x48
 8000efe:	e7ee      	b.n	8000ede <ADC_DMAConvCplt+0x4a>
 8000f00:	fffffefe 	.word	0xfffffefe

08000f04 <HAL_ADC_ConvHalfCpltCallback>:
 8000f04:	4770      	bx	lr
 8000f06:	46c0      	nop			; (mov r8, r8)

08000f08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f08:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000f0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f0c:	f7ff fffa 	bl	8000f04 <HAL_ADC_ConvHalfCpltCallback>
}
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)

08000f14 <HAL_ADC_ErrorCallback>:
}
 8000f14:	4770      	bx	lr
 8000f16:	46c0      	nop			; (mov r8, r8)

08000f18 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f18:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f1a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000f1c:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f20:	4313      	orrs	r3, r2
 8000f22:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f24:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f26:	3a3c      	subs	r2, #60	; 0x3c
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000f2c:	f7ff fff2 	bl	8000f14 <HAL_ADC_ErrorCallback>
}
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)

08000f34 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000f34:	2300      	movs	r3, #0
{
 8000f36:	b570      	push	{r4, r5, r6, lr}
 8000f38:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000f3a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000f3c:	3340      	adds	r3, #64	; 0x40
 8000f3e:	5cc2      	ldrb	r2, [r0, r3]
{
 8000f40:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000f42:	2002      	movs	r0, #2
 8000f44:	2a01      	cmp	r2, #1
 8000f46:	d02b      	beq.n	8000fa0 <HAL_ADC_ConfigChannel+0x6c>
 8000f48:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 8000f4c:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	689d      	ldr	r5, [r3, #8]
 8000f52:	076d      	lsls	r5, r5, #29
 8000f54:	d426      	bmi.n	8000fa4 <HAL_ADC_ConfigChannel+0x70>
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f56:	4d33      	ldr	r5, [pc, #204]	; (8001024 <HAL_ADC_ConfigChannel+0xf0>)
 8000f58:	684e      	ldr	r6, [r1, #4]
 8000f5a:	42ae      	cmp	r6, r5
 8000f5c:	d035      	beq.n	8000fca <HAL_ADC_ConfigChannel+0x96>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f5e:	680d      	ldr	r5, [r1, #0]
 8000f60:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8000f62:	40aa      	lsls	r2, r5
 8000f64:	4332      	orrs	r2, r6
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0552      	lsls	r2, r2, #21
 8000f6c:	4290      	cmp	r0, r2
 8000f6e:	d00f      	beq.n	8000f90 <HAL_ADC_ConfigChannel+0x5c>
 8000f70:	3801      	subs	r0, #1
 8000f72:	2806      	cmp	r0, #6
 8000f74:	d90c      	bls.n	8000f90 <HAL_ADC_ConfigChannel+0x5c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f76:	2207      	movs	r2, #7
 8000f78:	6888      	ldr	r0, [r1, #8]
 8000f7a:	6959      	ldr	r1, [r3, #20]
 8000f7c:	4011      	ands	r1, r2
 8000f7e:	4288      	cmp	r0, r1
 8000f80:	d006      	beq.n	8000f90 <HAL_ADC_ConfigChannel+0x5c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f82:	6959      	ldr	r1, [r3, #20]
 8000f84:	4391      	bics	r1, r2
 8000f86:	6159      	str	r1, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f88:	6959      	ldr	r1, [r3, #20]
 8000f8a:	4002      	ands	r2, r0
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	615a      	str	r2, [r3, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f90:	002b      	movs	r3, r5
 8000f92:	3b10      	subs	r3, #16
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d90e      	bls.n	8000fb6 <HAL_ADC_ConfigChannel+0x82>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f98:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2340      	movs	r3, #64	; 0x40
 8000f9e:	54e2      	strb	r2, [r4, r3]
}
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa4:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000faa:	4313      	orrs	r3, r2
 8000fac:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2340      	movs	r3, #64	; 0x40
 8000fb2:	54e2      	strb	r2, [r4, r3]
  return tmp_hal_status;
 8000fb4:	e7f4      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0x6c>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <HAL_ADC_ConfigChannel+0xf4>)
 8000fb8:	6819      	ldr	r1, [r3, #0]
 8000fba:	2d10      	cmp	r5, #16
 8000fbc:	d018      	beq.n	8000ff0 <HAL_ADC_ConfigChannel+0xbc>
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	03d2      	lsls	r2, r2, #15
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	e7f1      	b.n	8000fae <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000fca:	6809      	ldr	r1, [r1, #0]
 8000fcc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fce:	408a      	lsls	r2, r1
 8000fd0:	4390      	bics	r0, r2
 8000fd2:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fd4:	000b      	movs	r3, r1
 8000fd6:	3b10      	subs	r3, #16
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d8dd      	bhi.n	8000f98 <HAL_ADC_ConfigChannel+0x64>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_ADC_ConfigChannel+0xf4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2910      	cmp	r1, #16
 8000fe2:	d01d      	beq.n	8001020 <HAL_ADC_ConfigChannel+0xec>
 8000fe4:	4a11      	ldr	r2, [pc, #68]	; (800102c <HAL_ADC_ConfigChannel+0xf8>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_ADC_ConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fea:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e7d4      	b.n	8000f9a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	0412      	lsls	r2, r2, #16
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_ADC_ConfigChannel+0xfc>)
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <HAL_ADC_ConfigChannel+0x100>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f7ff f88b 	bl	8000118 <__udivsi3>
 8001002:	0083      	lsls	r3, r0, #2
 8001004:	1818      	adds	r0, r3, r0
 8001006:	0040      	lsls	r0, r0, #1
 8001008:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 800100a:	9b01      	ldr	r3, [sp, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0c3      	beq.n	8000f98 <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 8001010:	9b01      	ldr	r3, [sp, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f9      	bne.n	8001010 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101c:	2000      	movs	r0, #0
 800101e:	e7bc      	b.n	8000f9a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <HAL_ADC_ConfigChannel+0x104>)
 8001022:	e7e0      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0xb2>
 8001024:	00001001 	.word	0x00001001
 8001028:	40012708 	.word	0x40012708
 800102c:	ffbfffff 	.word	0xffbfffff
 8001030:	20000000 	.word	0x20000000
 8001034:	000f4240 	.word	0x000f4240
 8001038:	ff7fffff 	.word	0xff7fffff

0800103c <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800103c:	2340      	movs	r3, #64	; 0x40
{
 800103e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001040:	5cc2      	ldrb	r2, [r0, r3]
{
 8001042:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001044:	2002      	movs	r0, #2
 8001046:	2a01      	cmp	r2, #1
 8001048:	d033      	beq.n	80010b2 <HAL_ADCEx_Calibration_Start+0x76>
 800104a:	2201      	movs	r2, #1
 800104c:	54e2      	strb	r2, [r4, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	3202      	adds	r2, #2
 8001052:	6899      	ldr	r1, [r3, #8]
 8001054:	400a      	ands	r2, r1
 8001056:	2a01      	cmp	r2, #1
 8001058:	d02c      	beq.n	80010b4 <HAL_ADCEx_Calibration_Start+0x78>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800105a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800105c:	4921      	ldr	r1, [pc, #132]	; (80010e4 <HAL_ADCEx_Calibration_Start+0xa8>)
 800105e:	400a      	ands	r2, r1
 8001060:	3106      	adds	r1, #6
 8001062:	31ff      	adds	r1, #255	; 0xff
 8001064:	430a      	orrs	r2, r1
 8001066:	6462      	str	r2, [r4, #68]	; 0x44
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001068:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	3101      	adds	r1, #1
 800106e:	438a      	bics	r2, r1
 8001070:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	6899      	ldr	r1, [r3, #8]
 8001076:	0612      	lsls	r2, r2, #24
 8001078:	430a      	orrs	r2, r1
 800107a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800107c:	f7ff fdbc 	bl	8000bf8 <HAL_GetTick>
 8001080:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001082:	e004      	b.n	800108e <HAL_ADCEx_Calibration_Start+0x52>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001084:	f7ff fdb8 	bl	8000bf8 <HAL_GetTick>
 8001088:	1b40      	subs	r0, r0, r5
 800108a:	2802      	cmp	r0, #2
 800108c:	d81e      	bhi.n	80010cc <HAL_ADCEx_Calibration_Start+0x90>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	2a00      	cmp	r2, #0
 8001094:	dbf6      	blt.n	8001084 <HAL_ADCEx_Calibration_Start+0x48>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001096:	2203      	movs	r2, #3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2000      	movs	r0, #0
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800109a:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800109c:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800109e:	430e      	orrs	r6, r1
 80010a0:	60de      	str	r6, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010a4:	4393      	bics	r3, r2
 80010a6:	3a02      	subs	r2, #2
 80010a8:	4313      	orrs	r3, r2
 80010aa:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010b4:	6819      	ldr	r1, [r3, #0]
 80010b6:	420a      	tst	r2, r1
 80010b8:	d102      	bne.n	80010c0 <HAL_ADCEx_Calibration_Start+0x84>
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	0412      	lsls	r2, r2, #16
 80010be:	d5cc      	bpl.n	800105a <HAL_ADCEx_Calibration_Start+0x1e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c0:	2220      	movs	r2, #32
 80010c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80010c4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c6:	4313      	orrs	r3, r2
 80010c8:	6463      	str	r3, [r4, #68]	; 0x44
 80010ca:	e7ef      	b.n	80010ac <HAL_ADCEx_Calibration_Start+0x70>
        ADC_STATE_CLR_SET(hadc->State,
 80010cc:	2212      	movs	r2, #18
 80010ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80010d0:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80010d2:	4393      	bics	r3, r2
 80010d4:	3a02      	subs	r2, #2
 80010d6:	4313      	orrs	r3, r2
 80010d8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80010da:	2200      	movs	r2, #0
 80010dc:	2340      	movs	r3, #64	; 0x40
 80010de:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80010e0:	e7e7      	b.n	80010b2 <HAL_ADCEx_Calibration_Start+0x76>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	fffffefd 	.word	0xfffffefd

080010e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e8:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80010ea:	2800      	cmp	r0, #0
 80010ec:	db14      	blt.n	8001118 <HAL_NVIC_SetPriority+0x30>
 80010ee:	4a16      	ldr	r2, [pc, #88]	; (8001148 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f0:	2403      	movs	r4, #3
 80010f2:	4694      	mov	ip, r2
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	0883      	lsrs	r3, r0, #2
 80010f8:	4020      	ands	r0, r4
 80010fa:	0014      	movs	r4, r2
 80010fc:	26c0      	movs	r6, #192	; 0xc0
 80010fe:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001100:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001102:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001104:	400a      	ands	r2, r1
 8001106:	4082      	lsls	r2, r0
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110c:	00b6      	lsls	r6, r6, #2
 800110e:	599d      	ldr	r5, [r3, r6]
 8001110:	43a5      	bics	r5, r4
 8001112:	432a      	orrs	r2, r5
 8001114:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001116:	bd70      	pop	{r4, r5, r6, pc}
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111a:	24ff      	movs	r4, #255	; 0xff
 800111c:	4694      	mov	ip, r2
 800111e:	230f      	movs	r3, #15
 8001120:	2203      	movs	r2, #3
 8001122:	b2c0      	uxtb	r0, r0
 8001124:	4003      	ands	r3, r0
 8001126:	4010      	ands	r0, r2
 8001128:	0022      	movs	r2, r4
 800112a:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112c:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112e:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001130:	400c      	ands	r4, r1
 8001132:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001134:	3b08      	subs	r3, #8
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4463      	add	r3, ip
 800113c:	69dd      	ldr	r5, [r3, #28]
 800113e:	4395      	bics	r5, r2
 8001140:	432c      	orrs	r4, r5
 8001142:	61dc      	str	r4, [r3, #28]
 8001144:	e7e7      	b.n	8001116 <HAL_NVIC_SetPriority+0x2e>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001150:	231f      	movs	r3, #31
 8001152:	4018      	ands	r0, r3
 8001154:	3b1e      	subs	r3, #30
 8001156:	4083      	lsls	r3, r0
 8001158:	4a01      	ldr	r2, [pc, #4]	; (8001160 <HAL_NVIC_EnableIRQ+0x10>)
 800115a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800115c:	4770      	bx	lr
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	e000e100 	.word	0xe000e100

08001164 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_SYSTICK_Config+0x2c>)
 8001166:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001168:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116a:	4293      	cmp	r3, r2
 800116c:	d80e      	bhi.n	800118c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001170:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001174:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001176:	6a03      	ldr	r3, [r0, #32]
 8001178:	0609      	lsls	r1, r1, #24
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	430b      	orrs	r3, r1
 8001180:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001182:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001186:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001188:	3307      	adds	r3, #7
 800118a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800118c:	4770      	bx	lr
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	00ffffff 	.word	0x00ffffff
 8001194:	e000e010 	.word	0xe000e010
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800119e:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011a0:	2804      	cmp	r0, #4
 80011a2:	d003      	beq.n	80011ac <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011a4:	2104      	movs	r1, #4
 80011a6:	438b      	bics	r3, r1
 80011a8:	6013      	str	r3, [r2, #0]
  }
}
 80011aa:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011ac:	4318      	orrs	r0, r3
 80011ae:	6010      	str	r0, [r2, #0]
 80011b0:	e7fb      	b.n	80011aa <HAL_SYSTICK_CLKSourceConfig+0xe>
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80011b8:	4770      	bx	lr
 80011ba:	46c0      	nop			; (mov r8, r8)

080011bc <HAL_SYSTICK_IRQHandler>:
{
 80011bc:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80011be:	f7ff fffb 	bl	80011b8 <HAL_SYSTICK_Callback>
}
 80011c2:	bd10      	pop	{r4, pc}

080011c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80011c8:	d02b      	beq.n	8001222 <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011ca:	2521      	movs	r5, #33	; 0x21
 80011cc:	2302      	movs	r3, #2
 80011ce:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011d0:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 80011d4:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011d6:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011d8:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011de:	68e1      	ldr	r1, [r4, #12]
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6921      	ldr	r1, [r4, #16]
 80011e4:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e6:	6961      	ldr	r1, [r4, #20]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	69a1      	ldr	r1, [r4, #24]
 80011ec:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ee:	69e1      	ldr	r1, [r4, #28]
 80011f0:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80011f2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80011f4:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_DMA_Init+0x68>)
 80011f8:	2114      	movs	r1, #20
 80011fa:	469c      	mov	ip, r3
 80011fc:	4460      	add	r0, ip
 80011fe:	f7fe ff8b 	bl	8000118 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 8001204:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8001206:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8001208:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800120a:	0080      	lsls	r0, r0, #2
 800120c:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 800120e:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 8001210:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001212:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001214:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001216:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001218:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800121a:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 800121c:	321f      	adds	r2, #31
 800121e:	54a3      	strb	r3, [r4, r2]
}  
 8001220:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001222:	2001      	movs	r0, #1
 8001224:	e7fc      	b.n	8001220 <HAL_DMA_Init+0x5c>
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	ffffc00f 	.word	0xffffc00f
 800122c:	bffdfff8 	.word	0xbffdfff8
 8001230:	40020000 	.word	0x40020000

08001234 <HAL_DMA_Start_IT>:
{
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001236:	2420      	movs	r4, #32
 8001238:	5d05      	ldrb	r5, [r0, r4]
 800123a:	2602      	movs	r6, #2
 800123c:	2d01      	cmp	r5, #1
 800123e:	d008      	beq.n	8001252 <HAL_DMA_Start_IT+0x1e>
 8001240:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001242:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8001244:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001246:	5dc5      	ldrb	r5, [r0, r7]
 8001248:	b2ed      	uxtb	r5, r5
 800124a:	2d01      	cmp	r5, #1
 800124c:	d003      	beq.n	8001256 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 800124e:	2300      	movs	r3, #0
 8001250:	5503      	strb	r3, [r0, r4]
} 
 8001252:	0030      	movs	r0, r6
 8001254:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001256:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001258:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125a:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800125c:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800125e:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001260:	6826      	ldr	r6, [r4, #0]
 8001262:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001264:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001266:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001268:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800126a:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800126c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800126e:	6843      	ldr	r3, [r0, #4]
 8001270:	2b10      	cmp	r3, #16
 8001272:	d00e      	beq.n	8001292 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 8001274:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001276:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001278:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800127e:	220e      	movs	r2, #14
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001286:	2201      	movs	r2, #1
 8001288:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800128a:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800128c:	4313      	orrs	r3, r2
 800128e:	6023      	str	r3, [r4, #0]
 8001290:	e7df      	b.n	8001252 <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 8001292:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001294:	60e1      	str	r1, [r4, #12]
 8001296:	e7ef      	b.n	8001278 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001298:	220a      	movs	r2, #10
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	4313      	orrs	r3, r2
 800129e:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	3a06      	subs	r2, #6
 80012a4:	4393      	bics	r3, r2
 80012a6:	6023      	str	r3, [r4, #0]
 80012a8:	e7ed      	b.n	8001286 <HAL_DMA_Start_IT+0x52>
 80012aa:	46c0      	nop			; (mov r8, r8)

080012ac <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012ac:	2321      	movs	r3, #33	; 0x21
{  
 80012ae:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012b0:	5cc2      	ldrb	r2, [r0, r3]
 80012b2:	2a02      	cmp	r2, #2
 80012b4:	d003      	beq.n	80012be <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b6:	3b1d      	subs	r3, #29
 80012b8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80012ba:	2001      	movs	r0, #1
}
 80012bc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012be:	240e      	movs	r4, #14
 80012c0:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012c2:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012c4:	6811      	ldr	r1, [r2, #0]
 80012c6:	43a1      	bics	r1, r4
 80012c8:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012ca:	2101      	movs	r1, #1
 80012cc:	6814      	ldr	r4, [r2, #0]
 80012ce:	438c      	bics	r4, r1
 80012d0:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012d2:	000c      	movs	r4, r1
 80012d4:	40ac      	lsls	r4, r5
 80012d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80012d8:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80012da:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 80012dc:	2200      	movs	r2, #0
 80012de:	2320      	movs	r3, #32
 80012e0:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80012e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 80012e8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012ea:	2000      	movs	r0, #0
 80012ec:	e7e6      	b.n	80012bc <HAL_DMA_Abort_IT+0x10>
 80012ee:	2000      	movs	r0, #0
 80012f0:	e7e4      	b.n	80012bc <HAL_DMA_Abort_IT+0x10>
 80012f2:	46c0      	nop			; (mov r8, r8)

080012f4 <HAL_DMA_IRQHandler>:
{
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012f6:	2504      	movs	r5, #4
 80012f8:	002e      	movs	r6, r5
 80012fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012fc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012fe:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001300:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001302:	6801      	ldr	r1, [r0, #0]
 8001304:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001306:	4216      	tst	r6, r2
 8001308:	d00d      	beq.n	8001326 <HAL_DMA_IRQHandler+0x32>
 800130a:	423d      	tst	r5, r7
 800130c:	d00b      	beq.n	8001326 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800130e:	680b      	ldr	r3, [r1, #0]
 8001310:	069b      	lsls	r3, r3, #26
 8001312:	d402      	bmi.n	800131a <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001314:	680b      	ldr	r3, [r1, #0]
 8001316:	43ab      	bics	r3, r5
 8001318:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800131a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800131c:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800131e:	2b00      	cmp	r3, #0
 8001320:	d000      	beq.n	8001324 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8001322:	4798      	blx	r3
}  
 8001324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001326:	2502      	movs	r5, #2
 8001328:	002e      	movs	r6, r5
 800132a:	409e      	lsls	r6, r3
 800132c:	4216      	tst	r6, r2
 800132e:	d014      	beq.n	800135a <HAL_DMA_IRQHandler+0x66>
 8001330:	423d      	tst	r5, r7
 8001332:	d012      	beq.n	800135a <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001334:	680b      	ldr	r3, [r1, #0]
 8001336:	069b      	lsls	r3, r3, #26
 8001338:	d406      	bmi.n	8001348 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800133a:	220a      	movs	r2, #10
 800133c:	680b      	ldr	r3, [r1, #0]
 800133e:	4393      	bics	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001342:	2321      	movs	r3, #33	; 0x21
 8001344:	3a09      	subs	r2, #9
 8001346:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8001348:	2320      	movs	r3, #32
 800134a:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800134c:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 800134e:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8001350:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0e6      	beq.n	8001324 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8001356:	4798      	blx	r3
 8001358:	e7e4      	b.n	8001324 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800135a:	2508      	movs	r5, #8
 800135c:	002e      	movs	r6, r5
 800135e:	409e      	lsls	r6, r3
 8001360:	4232      	tst	r2, r6
 8001362:	d0df      	beq.n	8001324 <HAL_DMA_IRQHandler+0x30>
 8001364:	423d      	tst	r5, r7
 8001366:	d0dd      	beq.n	8001324 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001368:	680a      	ldr	r2, [r1, #0]
 800136a:	3506      	adds	r5, #6
 800136c:	43aa      	bics	r2, r5
 800136e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001370:	2201      	movs	r2, #1
 8001372:	0011      	movs	r1, r2
 8001374:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8001376:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001378:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800137a:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800137c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 800137e:	2200      	movs	r2, #0
 8001380:	3b01      	subs	r3, #1
 8001382:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8001384:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0cc      	beq.n	8001324 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 800138a:	4798      	blx	r3
 800138c:	e7ca      	b.n	8001324 <HAL_DMA_IRQHandler+0x30>
 800138e:	46c0      	nop			; (mov r8, r8)

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	46de      	mov	lr, fp
 8001394:	4657      	mov	r7, sl
 8001396:	464e      	mov	r6, r9
 8001398:	4645      	mov	r5, r8
 800139a:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800139c:	680b      	ldr	r3, [r1, #0]
{ 
 800139e:	b085      	sub	sp, #20
 80013a0:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80013a2:	469c      	mov	ip, r3
 80013a4:	2200      	movs	r2, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d100      	bne.n	80013ac <HAL_GPIO_Init+0x1c>
 80013aa:	e0b7      	b.n	800151c <HAL_GPIO_Init+0x18c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b64      	ldr	r3, [pc, #400]	; (8001540 <HAL_GPIO_Init+0x1b0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ae:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b0:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 80013b2:	4b64      	ldr	r3, [pc, #400]	; (8001544 <HAL_GPIO_Init+0x1b4>)
 80013b4:	4698      	mov	r8, r3
 80013b6:	e067      	b.n	8001488 <HAL_GPIO_Init+0xf8>
      temp = GPIOx->MODER;
 80013b8:	6803      	ldr	r3, [r0, #0]
 80013ba:	0056      	lsls	r6, r2, #1
 80013bc:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80013be:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c0:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80013c2:	40b3      	lsls	r3, r6
 80013c4:	4664      	mov	r4, ip
 80013c6:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	400f      	ands	r7, r1
 80013ca:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80013cc:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ce:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d0:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 80013d2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d4:	3f01      	subs	r7, #1
 80013d6:	2f01      	cmp	r7, #1
 80013d8:	d800      	bhi.n	80013dc <HAL_GPIO_Init+0x4c>
 80013da:	e081      	b.n	80014e0 <HAL_GPIO_Init+0x150>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80013dc:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 80013de:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013e0:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80013e2:	68a5      	ldr	r5, [r4, #8]
 80013e4:	40b5      	lsls	r5, r6
 80013e6:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 80013e8:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	055b      	lsls	r3, r3, #21
 80013ee:	4219      	tst	r1, r3
 80013f0:	d046      	beq.n	8001480 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4653      	mov	r3, sl
 80013f4:	2401      	movs	r4, #1
 80013f6:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013f8:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	4323      	orrs	r3, r4
 80013fc:	4654      	mov	r4, sl
 80013fe:	61a3      	str	r3, [r4, #24]
 8001400:	69a3      	ldr	r3, [r4, #24]
 8001402:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001404:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	4023      	ands	r3, r4
 8001408:	4c4f      	ldr	r4, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x1b8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800140a:	4016      	ands	r6, r2
 800140c:	46a4      	mov	ip, r4
 800140e:	00b6      	lsls	r6, r6, #2
 8001410:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	9303      	str	r3, [sp, #12]
 8001416:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001418:	0893      	lsrs	r3, r2, #2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4463      	add	r3, ip
 800141e:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001420:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001422:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001424:	42a0      	cmp	r0, r4
 8001426:	d100      	bne.n	800142a <HAL_GPIO_Init+0x9a>
 8001428:	e07f      	b.n	800152a <HAL_GPIO_Init+0x19a>
 800142a:	4f48      	ldr	r7, [pc, #288]	; (800154c <HAL_GPIO_Init+0x1bc>)
 800142c:	42b8      	cmp	r0, r7
 800142e:	d100      	bne.n	8001432 <HAL_GPIO_Init+0xa2>
 8001430:	e07d      	b.n	800152e <HAL_GPIO_Init+0x19e>
 8001432:	4f47      	ldr	r7, [pc, #284]	; (8001550 <HAL_GPIO_Init+0x1c0>)
 8001434:	42b8      	cmp	r0, r7
 8001436:	d100      	bne.n	800143a <HAL_GPIO_Init+0xaa>
 8001438:	e07c      	b.n	8001534 <HAL_GPIO_Init+0x1a4>
 800143a:	4f46      	ldr	r7, [pc, #280]	; (8001554 <HAL_GPIO_Init+0x1c4>)
 800143c:	42b8      	cmp	r0, r7
 800143e:	d100      	bne.n	8001442 <HAL_GPIO_Init+0xb2>
 8001440:	e07b      	b.n	800153a <HAL_GPIO_Init+0x1aa>
 8001442:	2705      	movs	r7, #5
 8001444:	40b7      	lsls	r7, r6
 8001446:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001448:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 800144a:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800144c:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 800144e:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001450:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	03cc      	lsls	r4, r1, #15
 8001454:	d45f      	bmi.n	8001516 <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001456:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8001458:	4644      	mov	r4, r8
 800145a:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 800145c:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145e:	038c      	lsls	r4, r1, #14
 8001460:	d456      	bmi.n	8001510 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001462:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8001464:	4644      	mov	r4, r8
 8001466:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001468:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800146a:	02cc      	lsls	r4, r1, #11
 800146c:	d44d      	bmi.n	800150a <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800146e:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8001470:	4644      	mov	r4, r8
 8001472:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8001474:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001476:	0289      	lsls	r1, r1, #10
 8001478:	d444      	bmi.n	8001504 <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800147a:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 800147c:	4641      	mov	r1, r8
 800147e:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001480:	464b      	mov	r3, r9
      }
    }
    
    position++;
 8001482:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001484:	40d3      	lsrs	r3, r2
 8001486:	d049      	beq.n	800151c <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001488:	2501      	movs	r5, #1
 800148a:	464c      	mov	r4, r9
 800148c:	4095      	lsls	r5, r2
 800148e:	402c      	ands	r4, r5
 8001490:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 8001492:	d0f5      	beq.n	8001480 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001494:	465b      	mov	r3, fp
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	2310      	movs	r3, #16
 800149a:	000f      	movs	r7, r1
 800149c:	439f      	bics	r7, r3
 800149e:	003b      	movs	r3, r7
 80014a0:	9701      	str	r7, [sp, #4]
 80014a2:	2f02      	cmp	r7, #2
 80014a4:	d188      	bne.n	80013b8 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80014a6:	240f      	movs	r4, #15
 80014a8:	3305      	adds	r3, #5
 80014aa:	4013      	ands	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 80014b0:	08d6      	lsrs	r6, r2, #3
 80014b2:	00b6      	lsls	r6, r6, #2
 80014b4:	1986      	adds	r6, r0, r6
 80014b6:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80014b8:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80014ba:	465c      	mov	r4, fp
 80014bc:	6924      	ldr	r4, [r4, #16]
 80014be:	409c      	lsls	r4, r3
 80014c0:	0023      	movs	r3, r4
 80014c2:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 80014c4:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80014c6:	2303      	movs	r3, #3
 80014c8:	0056      	lsls	r6, r2, #1
 80014ca:	40b3      	lsls	r3, r6
 80014cc:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 80014ce:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80014d0:	401f      	ands	r7, r3
 80014d2:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d4:	2703      	movs	r7, #3
 80014d6:	400f      	ands	r7, r1
 80014d8:	40b7      	lsls	r7, r6
 80014da:	4664      	mov	r4, ip
 80014dc:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 80014de:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80014e0:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80014e2:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e4:	401f      	ands	r7, r3
 80014e6:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80014e8:	68e7      	ldr	r7, [r4, #12]
 80014ea:	4664      	mov	r4, ip
 80014ec:	40b7      	lsls	r7, r6
 80014ee:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014f0:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 80014f2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80014f4:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80014f6:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014f8:	090d      	lsrs	r5, r1, #4
 80014fa:	4025      	ands	r5, r4
 80014fc:	4095      	lsls	r5, r2
 80014fe:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 8001500:	6045      	str	r5, [r0, #4]
 8001502:	e76b      	b.n	80013dc <HAL_GPIO_Init+0x4c>
          SET_BIT(temp, iocurrent); 
 8001504:	9900      	ldr	r1, [sp, #0]
 8001506:	430b      	orrs	r3, r1
 8001508:	e7b8      	b.n	800147c <HAL_GPIO_Init+0xec>
          SET_BIT(temp, iocurrent); 
 800150a:	9c00      	ldr	r4, [sp, #0]
 800150c:	4323      	orrs	r3, r4
 800150e:	e7af      	b.n	8001470 <HAL_GPIO_Init+0xe0>
          SET_BIT(temp, iocurrent); 
 8001510:	9c00      	ldr	r4, [sp, #0]
 8001512:	4323      	orrs	r3, r4
 8001514:	e7a6      	b.n	8001464 <HAL_GPIO_Init+0xd4>
          SET_BIT(temp, iocurrent); 
 8001516:	9c00      	ldr	r4, [sp, #0]
 8001518:	4323      	orrs	r3, r4
 800151a:	e79d      	b.n	8001458 <HAL_GPIO_Init+0xc8>
  } 
}
 800151c:	b005      	add	sp, #20
 800151e:	bc3c      	pop	{r2, r3, r4, r5}
 8001520:	4690      	mov	r8, r2
 8001522:	4699      	mov	r9, r3
 8001524:	46a2      	mov	sl, r4
 8001526:	46ab      	mov	fp, r5
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152a:	2700      	movs	r7, #0
 800152c:	e78b      	b.n	8001446 <HAL_GPIO_Init+0xb6>
 800152e:	2701      	movs	r7, #1
 8001530:	40b7      	lsls	r7, r6
 8001532:	e788      	b.n	8001446 <HAL_GPIO_Init+0xb6>
 8001534:	2702      	movs	r7, #2
 8001536:	40b7      	lsls	r7, r6
 8001538:	e785      	b.n	8001446 <HAL_GPIO_Init+0xb6>
 800153a:	2703      	movs	r7, #3
 800153c:	40b7      	lsls	r7, r6
 800153e:	e782      	b.n	8001446 <HAL_GPIO_Init+0xb6>
 8001540:	40021000 	.word	0x40021000
 8001544:	40010400 	.word	0x40010400
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48000c00 	.word	0x48000c00

08001558 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001558:	6900      	ldr	r0, [r0, #16]
 800155a:	4008      	ands	r0, r1
 800155c:	1e41      	subs	r1, r0, #1
 800155e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001560:	b2c0      	uxtb	r0, r0
  }
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001564:	2a00      	cmp	r2, #0
 8001566:	d101      	bne.n	800156c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001568:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800156a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156c:	6181      	str	r1, [r0, #24]
 800156e:	e7fc      	b.n	800156a <HAL_GPIO_WritePin+0x6>

08001570 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001572:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	4210      	tst	r0, r2
 8001578:	d002      	beq.n	8001580 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800157a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800157c:	f001 faf4 	bl	8002b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001580:	bd10      	pop	{r4, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	46ce      	mov	lr, r9
 800158c:	4647      	mov	r7, r8
 800158e:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001590:	6803      	ldr	r3, [r0, #0]
{
 8001592:	b083      	sub	sp, #12
 8001594:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	07da      	lsls	r2, r3, #31
 8001598:	d52f      	bpl.n	80015fa <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800159a:	220c      	movs	r2, #12
 800159c:	48c4      	ldr	r0, [pc, #784]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 800159e:	6841      	ldr	r1, [r0, #4]
 80015a0:	4011      	ands	r1, r2
 80015a2:	2904      	cmp	r1, #4
 80015a4:	d100      	bne.n	80015a8 <HAL_RCC_OscConfig+0x20>
 80015a6:	e110      	b.n	80017ca <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a8:	6841      	ldr	r1, [r0, #4]
 80015aa:	400a      	ands	r2, r1
 80015ac:	2a08      	cmp	r2, #8
 80015ae:	d100      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2a>
 80015b0:	e107      	b.n	80017c2 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b2:	6863      	ldr	r3, [r4, #4]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d100      	bne.n	80015ba <HAL_RCC_OscConfig+0x32>
 80015b8:	e186      	b.n	80018c8 <HAL_RCC_OscConfig+0x340>
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_RCC_OscConfig+0x38>
 80015be:	e11a      	b.n	80017f6 <HAL_RCC_OscConfig+0x26e>
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3e>
 80015c4:	e1db      	b.n	800197e <HAL_RCC_OscConfig+0x3f6>
 80015c6:	4bba      	ldr	r3, [pc, #744]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 80015c8:	49ba      	ldr	r1, [pc, #744]	; (80018b4 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	400a      	ands	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	49b9      	ldr	r1, [pc, #740]	; (80018b8 <HAL_RCC_OscConfig+0x330>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb0e 	bl	8000bf8 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015dc:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80015de:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e0:	4eb3      	ldr	r6, [pc, #716]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 80015e2:	02ad      	lsls	r5, r5, #10
 80015e4:	e005      	b.n	80015f2 <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e6:	f7ff fb07 	bl	8000bf8 <HAL_GetTick>
 80015ea:	1bc0      	subs	r0, r0, r7
 80015ec:	2864      	cmp	r0, #100	; 0x64
 80015ee:	d900      	bls.n	80015f2 <HAL_RCC_OscConfig+0x6a>
 80015f0:	e12f      	b.n	8001852 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	6833      	ldr	r3, [r6, #0]
 80015f4:	422b      	tst	r3, r5
 80015f6:	d0f6      	beq.n	80015e6 <HAL_RCC_OscConfig+0x5e>
 80015f8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fa:	079a      	lsls	r2, r3, #30
 80015fc:	d529      	bpl.n	8001652 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015fe:	220c      	movs	r2, #12
 8001600:	49ab      	ldr	r1, [pc, #684]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 8001602:	6848      	ldr	r0, [r1, #4]
 8001604:	4202      	tst	r2, r0
 8001606:	d100      	bne.n	800160a <HAL_RCC_OscConfig+0x82>
 8001608:	e0bf      	b.n	800178a <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800160a:	6848      	ldr	r0, [r1, #4]
 800160c:	4002      	ands	r2, r0
 800160e:	2a08      	cmp	r2, #8
 8001610:	d100      	bne.n	8001614 <HAL_RCC_OscConfig+0x8c>
 8001612:	e0b6      	b.n	8001782 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001614:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001616:	4da6      	ldr	r5, [pc, #664]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001618:	2b00      	cmp	r3, #0
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x96>
 800161c:	e134      	b.n	8001888 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 800161e:	2201      	movs	r2, #1
 8001620:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001624:	4313      	orrs	r3, r2
 8001626:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001628:	f7ff fae6 	bl	8000bf8 <HAL_GetTick>
 800162c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	e005      	b.n	800163c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fae2 	bl	8000bf8 <HAL_GetTick>
 8001634:	1bc0      	subs	r0, r0, r7
 8001636:	2802      	cmp	r0, #2
 8001638:	d900      	bls.n	800163c <HAL_RCC_OscConfig+0xb4>
 800163a:	e10a      	b.n	8001852 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	421e      	tst	r6, r3
 8001640:	d0f6      	beq.n	8001630 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	21f8      	movs	r1, #248	; 0xf8
 8001644:	682a      	ldr	r2, [r5, #0]
 8001646:	6923      	ldr	r3, [r4, #16]
 8001648:	438a      	bics	r2, r1
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4313      	orrs	r3, r2
 800164e:	602b      	str	r3, [r5, #0]
 8001650:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	071a      	lsls	r2, r3, #28
 8001654:	d500      	bpl.n	8001658 <HAL_RCC_OscConfig+0xd0>
 8001656:	e07d      	b.n	8001754 <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001658:	075a      	lsls	r2, r3, #29
 800165a:	d540      	bpl.n	80016de <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001660:	4b93      	ldr	r3, [pc, #588]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 8001662:	0552      	lsls	r2, r2, #21
 8001664:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001666:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001668:	4211      	tst	r1, r2
 800166a:	d108      	bne.n	800167e <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	69d9      	ldr	r1, [r3, #28]
 800166e:	4311      	orrs	r1, r2
 8001670:	61d9      	str	r1, [r3, #28]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	401a      	ands	r2, r3
 8001676:	9201      	str	r2, [sp, #4]
 8001678:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	2780      	movs	r7, #128	; 0x80
 8001680:	4e8e      	ldr	r6, [pc, #568]	; (80018bc <HAL_RCC_OscConfig+0x334>)
 8001682:	007f      	lsls	r7, r7, #1
 8001684:	6833      	ldr	r3, [r6, #0]
 8001686:	423b      	tst	r3, r7
 8001688:	d100      	bne.n	800168c <HAL_RCC_OscConfig+0x104>
 800168a:	e0cd      	b.n	8001828 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168c:	68a3      	ldr	r3, [r4, #8]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d100      	bne.n	8001694 <HAL_RCC_OscConfig+0x10c>
 8001692:	e0d9      	b.n	8001848 <HAL_RCC_OscConfig+0x2c0>
 8001694:	2b00      	cmp	r3, #0
 8001696:	d100      	bne.n	800169a <HAL_RCC_OscConfig+0x112>
 8001698:	e0dd      	b.n	8001856 <HAL_RCC_OscConfig+0x2ce>
 800169a:	2b05      	cmp	r3, #5
 800169c:	d100      	bne.n	80016a0 <HAL_RCC_OscConfig+0x118>
 800169e:	e198      	b.n	80019d2 <HAL_RCC_OscConfig+0x44a>
 80016a0:	2101      	movs	r1, #1
 80016a2:	4b83      	ldr	r3, [pc, #524]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	438a      	bics	r2, r1
 80016a8:	621a      	str	r2, [r3, #32]
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	3103      	adds	r1, #3
 80016ae:	438a      	bics	r2, r1
 80016b0:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff faa1 	bl	8000bf8 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b6:	4f7e      	ldr	r7, [pc, #504]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80016b8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ba:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	4d80      	ldr	r5, [pc, #512]	; (80018c0 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016be:	e006      	b.n	80016ce <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7ff fa9a 	bl	8000bf8 <HAL_GetTick>
 80016c4:	464b      	mov	r3, r9
 80016c6:	1ac0      	subs	r0, r0, r3
 80016c8:	42a8      	cmp	r0, r5
 80016ca:	d900      	bls.n	80016ce <HAL_RCC_OscConfig+0x146>
 80016cc:	e0c1      	b.n	8001852 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	421e      	tst	r6, r3
 80016d2:	d0f5      	beq.n	80016c0 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d4:	4643      	mov	r3, r8
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_OscConfig+0x154>
 80016da:	e113      	b.n	8001904 <HAL_RCC_OscConfig+0x37c>
 80016dc:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016de:	06db      	lsls	r3, r3, #27
 80016e0:	d512      	bpl.n	8001708 <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016e2:	6963      	ldr	r3, [r4, #20]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x162>
 80016e8:	e155      	b.n	8001996 <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016ea:	3305      	adds	r3, #5
 80016ec:	d000      	beq.n	80016f0 <HAL_RCC_OscConfig+0x168>
 80016ee:	e0f2      	b.n	80018d6 <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016f0:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016f2:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80016f4:	4a6e      	ldr	r2, [pc, #440]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 80016f6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80016f8:	438b      	bics	r3, r1
 80016fa:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016fc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80016fe:	69a3      	ldr	r3, [r4, #24]
 8001700:	4381      	bics	r1, r0
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	430b      	orrs	r3, r1
 8001706:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001708:	6a23      	ldr	r3, [r4, #32]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01c      	beq.n	8001748 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170e:	220c      	movs	r2, #12
 8001710:	4d67      	ldr	r5, [pc, #412]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 8001712:	6869      	ldr	r1, [r5, #4]
 8001714:	400a      	ands	r2, r1
 8001716:	2a08      	cmp	r2, #8
 8001718:	d03e      	beq.n	8001798 <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171a:	2b02      	cmp	r3, #2
 800171c:	d100      	bne.n	8001720 <HAL_RCC_OscConfig+0x198>
 800171e:	e0f8      	b.n	8001912 <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	4a68      	ldr	r2, [pc, #416]	; (80018c4 <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001724:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 8001726:	4013      	ands	r3, r2
 8001728:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800172a:	f7ff fa65 	bl	8000bf8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001730:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001732:	04ad      	lsls	r5, r5, #18
 8001734:	e005      	b.n	8001742 <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff fa5f 	bl	8000bf8 <HAL_GetTick>
 800173a:	1b80      	subs	r0, r0, r6
 800173c:	2802      	cmp	r0, #2
 800173e:	d900      	bls.n	8001742 <HAL_RCC_OscConfig+0x1ba>
 8001740:	e087      	b.n	8001852 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	422b      	tst	r3, r5
 8001746:	d1f6      	bne.n	8001736 <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001748:	2000      	movs	r0, #0
}
 800174a:	b003      	add	sp, #12
 800174c:	bc0c      	pop	{r2, r3}
 800174e:	4690      	mov	r8, r2
 8001750:	4699      	mov	r9, r3
 8001752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001754:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8001756:	4d56      	ldr	r5, [pc, #344]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01f      	beq.n	800179c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 800175c:	2201      	movs	r2, #1
 800175e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001760:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001762:	4313      	orrs	r3, r2
 8001764:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001766:	f7ff fa47 	bl	8000bf8 <HAL_GetTick>
 800176a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176c:	e004      	b.n	8001778 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fa43 	bl	8000bf8 <HAL_GetTick>
 8001772:	1bc0      	subs	r0, r0, r7
 8001774:	2802      	cmp	r0, #2
 8001776:	d86c      	bhi.n	8001852 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001778:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800177a:	421e      	tst	r6, r3
 800177c:	d0f7      	beq.n	800176e <HAL_RCC_OscConfig+0x1e6>
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	e76a      	b.n	8001658 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001782:	684a      	ldr	r2, [r1, #4]
 8001784:	03d2      	lsls	r2, r2, #15
 8001786:	d500      	bpl.n	800178a <HAL_RCC_OscConfig+0x202>
 8001788:	e744      	b.n	8001614 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	4a49      	ldr	r2, [pc, #292]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	0792      	lsls	r2, r2, #30
 8001790:	d525      	bpl.n	80017de <HAL_RCC_OscConfig+0x256>
 8001792:	68e2      	ldr	r2, [r4, #12]
 8001794:	2a01      	cmp	r2, #1
 8001796:	d022      	beq.n	80017de <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 8001798:	2001      	movs	r0, #1
 800179a:	e7d6      	b.n	800174a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 800179c:	2201      	movs	r2, #1
 800179e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80017a2:	4393      	bics	r3, r2
 80017a4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80017a6:	f7ff fa27 	bl	8000bf8 <HAL_GetTick>
 80017aa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	e004      	b.n	80017b8 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fa23 	bl	8000bf8 <HAL_GetTick>
 80017b2:	1bc0      	subs	r0, r0, r7
 80017b4:	2802      	cmp	r0, #2
 80017b6:	d84c      	bhi.n	8001852 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80017ba:	421e      	tst	r6, r3
 80017bc:	d1f7      	bne.n	80017ae <HAL_RCC_OscConfig+0x226>
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	e74a      	b.n	8001658 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c2:	6842      	ldr	r2, [r0, #4]
 80017c4:	03d2      	lsls	r2, r2, #15
 80017c6:	d400      	bmi.n	80017ca <HAL_RCC_OscConfig+0x242>
 80017c8:	e6f3      	b.n	80015b2 <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	4a39      	ldr	r2, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	0392      	lsls	r2, r2, #14
 80017d0:	d400      	bmi.n	80017d4 <HAL_RCC_OscConfig+0x24c>
 80017d2:	e712      	b.n	80015fa <HAL_RCC_OscConfig+0x72>
 80017d4:	6862      	ldr	r2, [r4, #4]
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d000      	beq.n	80017dc <HAL_RCC_OscConfig+0x254>
 80017da:	e70e      	b.n	80015fa <HAL_RCC_OscConfig+0x72>
 80017dc:	e7dc      	b.n	8001798 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017de:	25f8      	movs	r5, #248	; 0xf8
 80017e0:	4833      	ldr	r0, [pc, #204]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 80017e2:	6922      	ldr	r2, [r4, #16]
 80017e4:	6801      	ldr	r1, [r0, #0]
 80017e6:	00d2      	lsls	r2, r2, #3
 80017e8:	43a9      	bics	r1, r5
 80017ea:	430a      	orrs	r2, r1
 80017ec:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ee:	071a      	lsls	r2, r3, #28
 80017f0:	d400      	bmi.n	80017f4 <HAL_RCC_OscConfig+0x26c>
 80017f2:	e731      	b.n	8001658 <HAL_RCC_OscConfig+0xd0>
 80017f4:	e7ae      	b.n	8001754 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f6:	4d2e      	ldr	r5, [pc, #184]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 80017f8:	4a2e      	ldr	r2, [pc, #184]	; (80018b4 <HAL_RCC_OscConfig+0x32c>)
 80017fa:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fc:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	4013      	ands	r3, r2
 8001800:	602b      	str	r3, [r5, #0]
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001808:	4013      	ands	r3, r2
 800180a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800180c:	f7ff f9f4 	bl	8000bf8 <HAL_GetTick>
 8001810:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e004      	b.n	800181e <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff f9f0 	bl	8000bf8 <HAL_GetTick>
 8001818:	1bc0      	subs	r0, r0, r7
 800181a:	2864      	cmp	r0, #100	; 0x64
 800181c:	d819      	bhi.n	8001852 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	682b      	ldr	r3, [r5, #0]
 8001820:	4233      	tst	r3, r6
 8001822:	d1f7      	bne.n	8001814 <HAL_RCC_OscConfig+0x28c>
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	e6e8      	b.n	80015fa <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001828:	6833      	ldr	r3, [r6, #0]
 800182a:	433b      	orrs	r3, r7
 800182c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800182e:	f7ff f9e3 	bl	8000bf8 <HAL_GetTick>
 8001832:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	e004      	b.n	8001840 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7ff f9df 	bl	8000bf8 <HAL_GetTick>
 800183a:	1b40      	subs	r0, r0, r5
 800183c:	2864      	cmp	r0, #100	; 0x64
 800183e:	d808      	bhi.n	8001852 <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	6833      	ldr	r3, [r6, #0]
 8001842:	423b      	tst	r3, r7
 8001844:	d0f7      	beq.n	8001836 <HAL_RCC_OscConfig+0x2ae>
 8001846:	e721      	b.n	800168c <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	4919      	ldr	r1, [pc, #100]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
 800184a:	6a0a      	ldr	r2, [r1, #32]
 800184c:	4313      	orrs	r3, r2
 800184e:	620b      	str	r3, [r1, #32]
 8001850:	e72f      	b.n	80016b2 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8001852:	2003      	movs	r0, #3
 8001854:	e779      	b.n	800174a <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001856:	2201      	movs	r2, #1
 8001858:	4e15      	ldr	r6, [pc, #84]	; (80018b0 <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185a:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	4d18      	ldr	r5, [pc, #96]	; (80018c0 <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001860:	4393      	bics	r3, r2
 8001862:	6233      	str	r3, [r6, #32]
 8001864:	6a33      	ldr	r3, [r6, #32]
 8001866:	3203      	adds	r2, #3
 8001868:	4393      	bics	r3, r2
 800186a:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800186c:	f7ff f9c4 	bl	8000bf8 <HAL_GetTick>
 8001870:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001872:	e005      	b.n	8001880 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff f9c0 	bl	8000bf8 <HAL_GetTick>
 8001878:	464b      	mov	r3, r9
 800187a:	1ac0      	subs	r0, r0, r3
 800187c:	42a8      	cmp	r0, r5
 800187e:	d8e8      	bhi.n	8001852 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	6a33      	ldr	r3, [r6, #32]
 8001882:	421f      	tst	r7, r3
 8001884:	d1f6      	bne.n	8001874 <HAL_RCC_OscConfig+0x2ec>
 8001886:	e725      	b.n	80016d4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8001888:	2201      	movs	r2, #1
 800188a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188c:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800188e:	4393      	bics	r3, r2
 8001890:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001892:	f7ff f9b1 	bl	8000bf8 <HAL_GetTick>
 8001896:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001898:	e004      	b.n	80018a4 <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff f9ad 	bl	8000bf8 <HAL_GetTick>
 800189e:	1bc0      	subs	r0, r0, r7
 80018a0:	2802      	cmp	r0, #2
 80018a2:	d8d6      	bhi.n	8001852 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	421e      	tst	r6, r3
 80018a8:	d1f7      	bne.n	800189a <HAL_RCC_OscConfig+0x312>
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	e6d1      	b.n	8001652 <HAL_RCC_OscConfig+0xca>
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40021000 	.word	0x40021000
 80018b4:	fffeffff 	.word	0xfffeffff
 80018b8:	fffbffff 	.word	0xfffbffff
 80018bc:	40007000 	.word	0x40007000
 80018c0:	00001388 	.word	0x00001388
 80018c4:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	4a47      	ldr	r2, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x460>)
 80018cc:	025b      	lsls	r3, r3, #9
 80018ce:	6811      	ldr	r1, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e680      	b.n	80015d8 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 80018d6:	2204      	movs	r2, #4
 80018d8:	4d43      	ldr	r5, [pc, #268]	; (80019e8 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018da:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80018dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80018de:	4313      	orrs	r3, r2
 80018e0:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80018e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80018e4:	3a03      	subs	r2, #3
 80018e6:	4393      	bics	r3, r2
 80018e8:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80018ea:	f7ff f985 	bl	8000bf8 <HAL_GetTick>
 80018ee:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018f0:	e004      	b.n	80018fc <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018f2:	f7ff f981 	bl	8000bf8 <HAL_GetTick>
 80018f6:	1bc0      	subs	r0, r0, r7
 80018f8:	2802      	cmp	r0, #2
 80018fa:	d8aa      	bhi.n	8001852 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80018fe:	421e      	tst	r6, r3
 8001900:	d1f7      	bne.n	80018f2 <HAL_RCC_OscConfig+0x36a>
 8001902:	e701      	b.n	8001708 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001904:	4a38      	ldr	r2, [pc, #224]	; (80019e8 <HAL_RCC_OscConfig+0x460>)
 8001906:	4939      	ldr	r1, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x464>)
 8001908:	69d3      	ldr	r3, [r2, #28]
 800190a:	400b      	ands	r3, r1
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	e6e5      	b.n	80016de <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 8001912:	682b      	ldr	r3, [r5, #0]
 8001914:	4a36      	ldr	r2, [pc, #216]	; (80019f0 <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001916:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001918:	4013      	ands	r3, r2
 800191a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800191c:	f7ff f96c 	bl	8000bf8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001922:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	e004      	b.n	8001930 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff f967 	bl	8000bf8 <HAL_GetTick>
 800192a:	1bc0      	subs	r0, r0, r7
 800192c:	2802      	cmp	r0, #2
 800192e:	d890      	bhi.n	8001852 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	4233      	tst	r3, r6
 8001934:	d1f7      	bne.n	8001926 <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001936:	220f      	movs	r2, #15
 8001938:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800193a:	4393      	bics	r3, r2
 800193c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800193e:	4313      	orrs	r3, r2
 8001940:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001942:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001944:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001946:	686a      	ldr	r2, [r5, #4]
 8001948:	430b      	orrs	r3, r1
 800194a:	492a      	ldr	r1, [pc, #168]	; (80019f4 <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800194c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194e:	400a      	ands	r2, r1
 8001950:	4313      	orrs	r3, r2
 8001952:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	682a      	ldr	r2, [r5, #0]
 8001958:	045b      	lsls	r3, r3, #17
 800195a:	4313      	orrs	r3, r2
 800195c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800195e:	f7ff f94b 	bl	8000bf8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001962:	4d21      	ldr	r5, [pc, #132]	; (80019e8 <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 8001964:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001966:	04a4      	lsls	r4, r4, #18
 8001968:	e005      	b.n	8001976 <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff f945 	bl	8000bf8 <HAL_GetTick>
 800196e:	1b80      	subs	r0, r0, r6
 8001970:	2802      	cmp	r0, #2
 8001972:	d900      	bls.n	8001976 <HAL_RCC_OscConfig+0x3ee>
 8001974:	e76d      	b.n	8001852 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001976:	682b      	ldr	r3, [r5, #0]
 8001978:	4223      	tst	r3, r4
 800197a:	d0f6      	beq.n	800196a <HAL_RCC_OscConfig+0x3e2>
 800197c:	e6e4      	b.n	8001748 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_OscConfig+0x460>)
 8001982:	02d2      	lsls	r2, r2, #11
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	0252      	lsls	r2, r2, #9
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e620      	b.n	80015d8 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001996:	2104      	movs	r1, #4
 8001998:	4d13      	ldr	r5, [pc, #76]	; (80019e8 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800199a:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800199c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800199e:	430a      	orrs	r2, r1
 80019a0:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80019a2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80019a4:	4313      	orrs	r3, r2
 80019a6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80019a8:	f7ff f926 	bl	8000bf8 <HAL_GetTick>
 80019ac:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ae:	e005      	b.n	80019bc <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019b0:	f7ff f922 	bl	8000bf8 <HAL_GetTick>
 80019b4:	1bc0      	subs	r0, r0, r7
 80019b6:	2802      	cmp	r0, #2
 80019b8:	d900      	bls.n	80019bc <HAL_RCC_OscConfig+0x434>
 80019ba:	e74a      	b.n	8001852 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019be:	421e      	tst	r6, r3
 80019c0:	d0f6      	beq.n	80019b0 <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019c2:	21f8      	movs	r1, #248	; 0xf8
 80019c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80019c6:	69a3      	ldr	r3, [r4, #24]
 80019c8:	438a      	bics	r2, r1
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	636b      	str	r3, [r5, #52]	; 0x34
 80019d0:	e69a      	b.n	8001708 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d2:	2104      	movs	r1, #4
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_RCC_OscConfig+0x460>)
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	430a      	orrs	r2, r1
 80019da:	621a      	str	r2, [r3, #32]
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	3903      	subs	r1, #3
 80019e0:	430a      	orrs	r2, r1
 80019e2:	621a      	str	r2, [r3, #32]
 80019e4:	e665      	b.n	80016b2 <HAL_RCC_OscConfig+0x12a>
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40021000 	.word	0x40021000
 80019ec:	efffffff 	.word	0xefffffff
 80019f0:	feffffff 	.word	0xfeffffff
 80019f4:	ffc2ffff 	.word	0xffc2ffff

080019f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	46ce      	mov	lr, r9
 80019fc:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019fe:	2201      	movs	r2, #1
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a04:	495c      	ldr	r1, [pc, #368]	; (8001b78 <HAL_RCC_ClockConfig+0x180>)
{
 8001a06:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a08:	680b      	ldr	r3, [r1, #0]
{
 8001a0a:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	42a3      	cmp	r3, r4
 8001a10:	d20d      	bcs.n	8001a2e <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	680b      	ldr	r3, [r1, #0]
 8001a14:	4393      	bics	r3, r2
 8001a16:	4323      	orrs	r3, r4
 8001a18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a1a:	680b      	ldr	r3, [r1, #0]
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	4294      	cmp	r4, r2
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8001a22:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001a24:	b009      	add	sp, #36	; 0x24
 8001a26:	bc0c      	pop	{r2, r3}
 8001a28:	4690      	mov	r8, r2
 8001a2a:	4699      	mov	r9, r3
 8001a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2e:	682b      	ldr	r3, [r5, #0]
 8001a30:	079a      	lsls	r2, r3, #30
 8001a32:	d506      	bpl.n	8001a42 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	20f0      	movs	r0, #240	; 0xf0
 8001a36:	4951      	ldr	r1, [pc, #324]	; (8001b7c <HAL_RCC_ClockConfig+0x184>)
 8001a38:	684a      	ldr	r2, [r1, #4]
 8001a3a:	4382      	bics	r2, r0
 8001a3c:	68a8      	ldr	r0, [r5, #8]
 8001a3e:	4302      	orrs	r2, r0
 8001a40:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	07db      	lsls	r3, r3, #31
 8001a44:	d524      	bpl.n	8001a90 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a48:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4c:	2a01      	cmp	r2, #1
 8001a4e:	d06a      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a50:	2a02      	cmp	r2, #2
 8001a52:	d063      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	079b      	lsls	r3, r3, #30
 8001a56:	d5e4      	bpl.n	8001a22 <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a58:	2103      	movs	r1, #3
 8001a5a:	4e48      	ldr	r6, [pc, #288]	; (8001b7c <HAL_RCC_ClockConfig+0x184>)
 8001a5c:	6873      	ldr	r3, [r6, #4]
 8001a5e:	438b      	bics	r3, r1
 8001a60:	4313      	orrs	r3, r2
 8001a62:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a64:	f7ff f8c8 	bl	8000bf8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a68:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001a6a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d05d      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d06b      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a74:	230c      	movs	r3, #12
 8001a76:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_RCC_ClockConfig+0x188>)
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	e004      	b.n	8001a88 <HAL_RCC_ClockConfig+0x90>
 8001a7e:	f7ff f8bb 	bl	8000bf8 <HAL_GetTick>
 8001a82:	1bc0      	subs	r0, r0, r7
 8001a84:	4548      	cmp	r0, r9
 8001a86:	d84c      	bhi.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a88:	4642      	mov	r2, r8
 8001a8a:	6873      	ldr	r3, [r6, #4]
 8001a8c:	421a      	tst	r2, r3
 8001a8e:	d1f6      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a90:	2101      	movs	r1, #1
 8001a92:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <HAL_RCC_ClockConfig+0x180>)
 8001a94:	6813      	ldr	r3, [r2, #0]
 8001a96:	400b      	ands	r3, r1
 8001a98:	429c      	cmp	r4, r3
 8001a9a:	d205      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	438b      	bics	r3, r1
 8001aa0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	4219      	tst	r1, r3
 8001aa6:	d1bc      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	075b      	lsls	r3, r3, #29
 8001aac:	d506      	bpl.n	8001abc <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <HAL_RCC_ClockConfig+0x184>)
 8001ab0:	4934      	ldr	r1, [pc, #208]	; (8001b84 <HAL_RCC_ClockConfig+0x18c>)
 8001ab2:	6853      	ldr	r3, [r2, #4]
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	68e9      	ldr	r1, [r5, #12]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCC_ClockConfig+0x190>)
 8001abe:	466a      	mov	r2, sp
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	c870      	ldmia	r0!, {r4, r5, r6}
 8001ac4:	c270      	stmia	r2!, {r4, r5, r6}
 8001ac6:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ac8:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001aca:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001acc:	aa04      	add	r2, sp, #16
 8001ace:	0010      	movs	r0, r2
 8001ad0:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001ad2:	c070      	stmia	r0!, {r4, r5, r6}
 8001ad4:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001ad6:	4d29      	ldr	r5, [pc, #164]	; (8001b7c <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ad8:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ada:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001adc:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ade:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae0:	4003      	ands	r3, r0
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d10b      	bne.n	8001afe <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ae6:	3307      	adds	r3, #7
 8001ae8:	0c84      	lsrs	r4, r0, #18
 8001aea:	401c      	ands	r4, r3
 8001aec:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001aee:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001af0:	400b      	ands	r3, r1
 8001af2:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001af4:	03c3      	lsls	r3, r0, #15
 8001af6:	d439      	bmi.n	8001b6c <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001af8:	4824      	ldr	r0, [pc, #144]	; (8001b8c <HAL_RCC_ClockConfig+0x194>)
 8001afa:	4360      	muls	r0, r4
 8001afc:	e000      	b.n	8001b00 <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 8001afe:	4824      	ldr	r0, [pc, #144]	; (8001b90 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_RCC_ClockConfig+0x184>)
 8001b02:	4a24      	ldr	r2, [pc, #144]	; (8001b94 <HAL_RCC_ClockConfig+0x19c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	0f1b      	lsrs	r3, r3, #28
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	40d8      	lsrs	r0, r3
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001b10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff f846 	bl	8000ba4 <HAL_InitTick>
  return HAL_OK;
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e783      	b.n	8001a24 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	d49b      	bmi.n	8001a58 <HAL_RCC_ClockConfig+0x60>
 8001b20:	e77f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 8001b22:	2003      	movs	r0, #3
 8001b24:	e77e      	b.n	8001a24 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	039b      	lsls	r3, r3, #14
 8001b28:	d496      	bmi.n	8001a58 <HAL_RCC_ClockConfig+0x60>
 8001b2a:	e77a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b2c:	330b      	adds	r3, #11
 8001b2e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_RCC_ClockConfig+0x188>)
 8001b32:	4699      	mov	r9, r3
 8001b34:	e004      	b.n	8001b40 <HAL_RCC_ClockConfig+0x148>
 8001b36:	f7ff f85f 	bl	8000bf8 <HAL_GetTick>
 8001b3a:	1bc0      	subs	r0, r0, r7
 8001b3c:	4548      	cmp	r0, r9
 8001b3e:	d8f0      	bhi.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b40:	4642      	mov	r2, r8
 8001b42:	6873      	ldr	r3, [r6, #4]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d1f5      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x13e>
 8001b4a:	e7a1      	b.n	8001a90 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	330a      	adds	r3, #10
 8001b4e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_ClockConfig+0x188>)
 8001b52:	4699      	mov	r9, r3
 8001b54:	e004      	b.n	8001b60 <HAL_RCC_ClockConfig+0x168>
 8001b56:	f7ff f84f 	bl	8000bf8 <HAL_GetTick>
 8001b5a:	1bc0      	subs	r0, r0, r7
 8001b5c:	4548      	cmp	r0, r9
 8001b5e:	d8e0      	bhi.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b60:	4642      	mov	r2, r8
 8001b62:	6873      	ldr	r3, [r6, #4]
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d1f5      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x15e>
 8001b6a:	e791      	b.n	8001a90 <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <HAL_RCC_ClockConfig+0x198>)
 8001b6e:	f7fe fad3 	bl	8000118 <__udivsi3>
 8001b72:	4360      	muls	r0, r4
 8001b74:	e7c4      	b.n	8001b00 <HAL_RCC_ClockConfig+0x108>
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	00001388 	.word	0x00001388
 8001b84:	fffff8ff 	.word	0xfffff8ff
 8001b88:	08004020 	.word	0x08004020
 8001b8c:	003d0900 	.word	0x003d0900
 8001b90:	007a1200 	.word	0x007a1200
 8001b94:	080040a8 	.word	0x080040a8
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_RCC_GetSysClockFreq>:
{
 8001b9c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x58>)
{
 8001ba0:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	466a      	mov	r2, sp
 8001ba6:	c870      	ldmia	r0!, {r4, r5, r6}
 8001ba8:	c270      	stmia	r2!, {r4, r5, r6}
 8001baa:	6800      	ldr	r0, [r0, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bac:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bae:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bb0:	aa04      	add	r2, sp, #16
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001bb6:	c070      	stmia	r0!, {r4, r5, r6}
 8001bb8:	681b      	ldr	r3, [r3, #0]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bba:	4669      	mov	r1, sp
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bbc:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 8001bbe:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001bc2:	6844      	ldr	r4, [r0, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001bc4:	4023      	ands	r3, r4
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d10b      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0x46>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bca:	3307      	adds	r3, #7
 8001bcc:	0ca5      	lsrs	r5, r4, #18
 8001bce:	401d      	ands	r5, r3
 8001bd0:	5d4d      	ldrb	r5, [r1, r5]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bd2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bd8:	03e3      	lsls	r3, r4, #15
 8001bda:	d405      	bmi.n	8001be8 <HAL_RCC_GetSysClockFreq+0x4c>
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001bdc:	4807      	ldr	r0, [pc, #28]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x60>)
 8001bde:	4368      	muls	r0, r5
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x48>
      sysclockfreq = HSE_VALUE;
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001be4:	b008      	add	sp, #32
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x64>)
 8001bea:	f7fe fa95 	bl	8000118 <__udivsi3>
 8001bee:	4368      	muls	r0, r5
 8001bf0:	e7f8      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x48>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	08004020 	.word	0x08004020
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	003d0900 	.word	0x003d0900
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001c04:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <HAL_RCC_GetHCLKFreq+0x8>)
 8001c06:	6818      	ldr	r0, [r3, #0]
}
 8001c08:	4770      	bx	lr
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	20000000 	.word	0x20000000

08001c10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	055b      	lsls	r3, r3, #21
 8001c18:	0f5b      	lsrs	r3, r3, #29
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c1e:	6810      	ldr	r0, [r2, #0]
 8001c20:	40d8      	lsrs	r0, r3
}    
 8001c22:	4770      	bx	lr
 8001c24:	40021000 	.word	0x40021000
 8001c28:	080040b8 	.word	0x080040b8
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	46ce      	mov	lr, r9
 8001c34:	4647      	mov	r7, r8
 8001c36:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c38:	6803      	ldr	r3, [r0, #0]
{
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c3e:	03da      	lsls	r2, r3, #15
 8001c40:	d539      	bpl.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001c44:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001c48:	0552      	lsls	r2, r2, #21
 8001c4a:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001c4c:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4e:	4211      	tst	r1, r2
 8001c50:	d108      	bne.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x34>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	69d9      	ldr	r1, [r3, #28]
 8001c54:	4311      	orrs	r1, r2
 8001c56:	61d9      	str	r1, [r3, #28]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	9201      	str	r2, [sp, #4]
 8001c5e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c60:	2301      	movs	r3, #1
 8001c62:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	2680      	movs	r6, #128	; 0x80
 8001c66:	4d36      	ldr	r5, [pc, #216]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001c68:	0076      	lsls	r6, r6, #1
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	4233      	tst	r3, r6
 8001c6e:	d04c      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0xda>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c70:	21c0      	movs	r1, #192	; 0xc0
 8001c72:	4d32      	ldr	r5, [pc, #200]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001c74:	0089      	lsls	r1, r1, #2
 8001c76:	6a2a      	ldr	r2, [r5, #32]
 8001c78:	400a      	ands	r2, r1
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c7a:	d044      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8001c7c:	6860      	ldr	r0, [r4, #4]
 8001c7e:	4001      	ands	r1, r0
 8001c80:	428a      	cmp	r2, r1
 8001c82:	d00e      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c84:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c86:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c88:	6a2e      	ldr	r6, [r5, #32]
 8001c8a:	0252      	lsls	r2, r2, #9
 8001c8c:	4332      	orrs	r2, r6
 8001c8e:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c90:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x114>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c94:	4e2c      	ldr	r6, [pc, #176]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c96:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c98:	4032      	ands	r2, r6
 8001c9a:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c9c:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c9e:	07cb      	lsls	r3, r1, #31
 8001ca0:	d422      	bmi.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ca2:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001ca4:	4927      	ldr	r1, [pc, #156]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001ca6:	6a13      	ldr	r3, [r2, #32]
 8001ca8:	400b      	ands	r3, r1
 8001caa:	4303      	orrs	r3, r0
 8001cac:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cae:	4643      	mov	r3, r8
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d03a      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001cb4:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cb6:	07da      	lsls	r2, r3, #31
 8001cb8:	d40e      	bmi.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001cba:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cbc:	069b      	lsls	r3, r3, #26
 8001cbe:	d506      	bpl.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001cc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001cc6:	438b      	bics	r3, r1
 8001cc8:	68e1      	ldr	r1, [r4, #12]
 8001cca:	430b      	orrs	r3, r1
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001cce:	b003      	add	sp, #12
 8001cd0:	bc0c      	pop	{r2, r3}
 8001cd2:	4690      	mov	r8, r2
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	4918      	ldr	r1, [pc, #96]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001cdc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001cde:	4382      	bics	r2, r0
 8001ce0:	68a0      	ldr	r0, [r4, #8]
 8001ce2:	4302      	orrs	r2, r0
 8001ce4:	630a      	str	r2, [r1, #48]	; 0x30
 8001ce6:	e7e8      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ff86 	bl	8000bf8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
        tickstart = HAL_GetTick();
 8001cee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	e004      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe ff7f 	bl	8000bf8 <HAL_GetTick>
 8001cfa:	1bc0      	subs	r0, r0, r7
 8001cfc:	4548      	cmp	r0, r9
 8001cfe:	d81a      	bhi.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	6a2b      	ldr	r3, [r5, #32]
 8001d02:	421e      	tst	r6, r3
 8001d04:	d0f7      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8001d06:	6860      	ldr	r0, [r4, #4]
 8001d08:	e7cb      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	682b      	ldr	r3, [r5, #0]
 8001d0c:	4333      	orrs	r3, r6
 8001d0e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001d10:	f7fe ff72 	bl	8000bf8 <HAL_GetTick>
 8001d14:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	e004      	b.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0xf2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d18:	f7fe ff6e 	bl	8000bf8 <HAL_GetTick>
 8001d1c:	1bc0      	subs	r0, r0, r7
 8001d1e:	2864      	cmp	r0, #100	; 0x64
 8001d20:	d809      	bhi.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	4233      	tst	r3, r6
 8001d26:	d0f7      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d28:	e7a2      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2a:	69d3      	ldr	r3, [r2, #28]
 8001d2c:	4908      	ldr	r1, [pc, #32]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001d2e:	400b      	ands	r3, r1
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	e7bf      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
          return HAL_TIMEOUT;
 8001d36:	2003      	movs	r0, #3
 8001d38:	e7c9      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	fffffcff 	.word	0xfffffcff
 8001d48:	fffeffff 	.word	0xfffeffff
 8001d4c:	00001388 	.word	0x00001388
 8001d50:	efffffff 	.word	0xefffffff

08001d54 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d54:	b510      	push	{r4, lr}
 8001d56:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d58:	d049      	beq.n	8001dee <HAL_TIM_Base_Init+0x9a>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001d5a:	233d      	movs	r3, #61	; 0x3d
 8001d5c:	5cc3      	ldrb	r3, [r0, r3]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d036      	beq.n	8001dd2 <HAL_TIM_Base_Init+0x7e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001d64:	2202      	movs	r2, #2
 8001d66:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d68:	4922      	ldr	r1, [pc, #136]	; (8001df4 <HAL_TIM_Base_Init+0xa0>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001d6a:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6c:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001d6e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d70:	428b      	cmp	r3, r1
 8001d72:	d01a      	beq.n	8001daa <HAL_TIM_Base_Init+0x56>
 8001d74:	4920      	ldr	r1, [pc, #128]	; (8001df8 <HAL_TIM_Base_Init+0xa4>)
 8001d76:	428b      	cmp	r3, r1
 8001d78:	d030      	beq.n	8001ddc <HAL_TIM_Base_Init+0x88>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d7a:	4920      	ldr	r1, [pc, #128]	; (8001dfc <HAL_TIM_Base_Init+0xa8>)
 8001d7c:	428b      	cmp	r3, r1
 8001d7e:	d031      	beq.n	8001de4 <HAL_TIM_Base_Init+0x90>
 8001d80:	491f      	ldr	r1, [pc, #124]	; (8001e00 <HAL_TIM_Base_Init+0xac>)
 8001d82:	428b      	cmp	r3, r1
 8001d84:	d015      	beq.n	8001db2 <HAL_TIM_Base_Init+0x5e>
 8001d86:	491f      	ldr	r1, [pc, #124]	; (8001e04 <HAL_TIM_Base_Init+0xb0>)
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	d012      	beq.n	8001db2 <HAL_TIM_Base_Init+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	438a      	bics	r2, r1
 8001d90:	69a1      	ldr	r1, [r4, #24]
 8001d92:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 8001d94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d96:	68e2      	ldr	r2, [r4, #12]
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d9a:	6862      	ldr	r2, [r4, #4]
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001d9e:	2201      	movs	r2, #1
 8001da0:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001da2:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001da4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001da6:	54e2      	strb	r2, [r4, r3]
}
 8001da8:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001daa:	2170      	movs	r1, #112	; 0x70
 8001dac:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001dae:	68a1      	ldr	r1, [r4, #8]
 8001db0:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001db2:	4915      	ldr	r1, [pc, #84]	; (8001e08 <HAL_TIM_Base_Init+0xb4>)
 8001db4:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001db6:	6921      	ldr	r1, [r4, #16]
 8001db8:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	69a1      	ldr	r1, [r4, #24]
 8001dc0:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001dc2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc4:	68e2      	ldr	r2, [r4, #12]
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001dc8:	6862      	ldr	r2, [r4, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001dcc:	6962      	ldr	r2, [r4, #20]
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd0:	e7e5      	b.n	8001d9e <HAL_TIM_Base_Init+0x4a>
    htim->Lock = HAL_UNLOCKED;
 8001dd2:	223c      	movs	r2, #60	; 0x3c
 8001dd4:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8001dd6:	f001 f9b3 	bl	8003140 <HAL_TIM_Base_MspInit>
 8001dda:	e7c3      	b.n	8001d64 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ddc:	2170      	movs	r1, #112	; 0x70
 8001dde:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001de0:	68a1      	ldr	r1, [r4, #8]
 8001de2:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001de4:	4908      	ldr	r1, [pc, #32]	; (8001e08 <HAL_TIM_Base_Init+0xb4>)
 8001de6:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001de8:	6921      	ldr	r1, [r4, #16]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	e7ce      	b.n	8001d8c <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 8001dee:	2001      	movs	r0, #1
 8001df0:	e7da      	b.n	8001da8 <HAL_TIM_Base_Init+0x54>
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40012c00 	.word	0x40012c00
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40002000 	.word	0x40002000
 8001e00:	40014400 	.word	0x40014400
 8001e04:	40014800 	.word	0x40014800
 8001e08:	fffffcff 	.word	0xfffffcff

08001e0c <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e0c:	6803      	ldr	r3, [r0, #0]
 8001e0e:	2001      	movs	r0, #1
 8001e10:	68d9      	ldr	r1, [r3, #12]
 8001e12:	4301      	orrs	r1, r0
 8001e14:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4302      	orrs	r2, r0
 8001e1a:	601a      	str	r2, [r3, #0]
}
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_PWM_Init>:
{
 8001e20:	b510      	push	{r4, lr}
 8001e22:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001e24:	d049      	beq.n	8001eba <HAL_TIM_PWM_Init+0x9a>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e26:	233d      	movs	r3, #61	; 0x3d
 8001e28:	5cc3      	ldrb	r3, [r0, r3]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d036      	beq.n	8001e9e <HAL_TIM_PWM_Init+0x7e>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e30:	2202      	movs	r2, #2
 8001e32:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e34:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_TIM_PWM_Init+0xa0>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001e36:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e38:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001e3a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	d01a      	beq.n	8001e76 <HAL_TIM_PWM_Init+0x56>
 8001e40:	4920      	ldr	r1, [pc, #128]	; (8001ec4 <HAL_TIM_PWM_Init+0xa4>)
 8001e42:	428b      	cmp	r3, r1
 8001e44:	d030      	beq.n	8001ea8 <HAL_TIM_PWM_Init+0x88>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e46:	4920      	ldr	r1, [pc, #128]	; (8001ec8 <HAL_TIM_PWM_Init+0xa8>)
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d031      	beq.n	8001eb0 <HAL_TIM_PWM_Init+0x90>
 8001e4c:	491f      	ldr	r1, [pc, #124]	; (8001ecc <HAL_TIM_PWM_Init+0xac>)
 8001e4e:	428b      	cmp	r3, r1
 8001e50:	d015      	beq.n	8001e7e <HAL_TIM_PWM_Init+0x5e>
 8001e52:	491f      	ldr	r1, [pc, #124]	; (8001ed0 <HAL_TIM_PWM_Init+0xb0>)
 8001e54:	428b      	cmp	r3, r1
 8001e56:	d012      	beq.n	8001e7e <HAL_TIM_PWM_Init+0x5e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	438a      	bics	r2, r1
 8001e5c:	69a1      	ldr	r1, [r4, #24]
 8001e5e:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001e60:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e62:	68e2      	ldr	r2, [r4, #12]
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e66:	6862      	ldr	r2, [r4, #4]
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001e6e:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001e70:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001e72:	54e2      	strb	r2, [r4, r3]
}
 8001e74:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e76:	2170      	movs	r1, #112	; 0x70
 8001e78:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001e7a:	68a1      	ldr	r1, [r4, #8]
 8001e7c:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e7e:	4915      	ldr	r1, [pc, #84]	; (8001ed4 <HAL_TIM_PWM_Init+0xb4>)
 8001e80:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e82:	6921      	ldr	r1, [r4, #16]
 8001e84:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	438a      	bics	r2, r1
 8001e8a:	69a1      	ldr	r1, [r4, #24]
 8001e8c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001e8e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e90:	68e2      	ldr	r2, [r4, #12]
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e94:	6862      	ldr	r2, [r4, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001e98:	6962      	ldr	r2, [r4, #20]
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9c:	e7e5      	b.n	8001e6a <HAL_TIM_PWM_Init+0x4a>
    htim->Lock = HAL_UNLOCKED;
 8001e9e:	223c      	movs	r2, #60	; 0x3c
 8001ea0:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 8001ea2:	f001 f92f 	bl	8003104 <HAL_TIM_PWM_MspInit>
 8001ea6:	e7c3      	b.n	8001e30 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea8:	2170      	movs	r1, #112	; 0x70
 8001eaa:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001eac:	68a1      	ldr	r1, [r4, #8]
 8001eae:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eb0:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <HAL_TIM_PWM_Init+0xb4>)
 8001eb2:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eb4:	6921      	ldr	r1, [r4, #16]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	e7ce      	b.n	8001e58 <HAL_TIM_PWM_Init+0x38>
    return HAL_ERROR;
 8001eba:	2001      	movs	r0, #1
 8001ebc:	e7da      	b.n	8001e74 <HAL_TIM_PWM_Init+0x54>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	40012c00 	.word	0x40012c00
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40002000 	.word	0x40002000
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40014800 	.word	0x40014800
 8001ed4:	fffffcff 	.word	0xfffffcff

08001ed8 <HAL_TIM_PWM_Start_IT>:
  switch (Channel)
 8001ed8:	2904      	cmp	r1, #4
 8001eda:	d020      	beq.n	8001f1e <HAL_TIM_PWM_Start_IT+0x46>
 8001edc:	d92a      	bls.n	8001f34 <HAL_TIM_PWM_Start_IT+0x5c>
 8001ede:	2908      	cmp	r1, #8
 8001ee0:	d01d      	beq.n	8001f1e <HAL_TIM_PWM_Start_IT+0x46>
 8001ee2:	290c      	cmp	r1, #12
 8001ee4:	d12e      	bne.n	8001f44 <HAL_TIM_PWM_Start_IT+0x6c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ee6:	6803      	ldr	r3, [r0, #0]
 8001ee8:	2010      	movs	r0, #16
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4302      	orrs	r2, r0
 8001eee:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	408a      	lsls	r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ef4:	6a19      	ldr	r1, [r3, #32]
 8001ef6:	4391      	bics	r1, r2
 8001ef8:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001efa:	6a19      	ldr	r1, [r3, #32]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f00:	4a11      	ldr	r2, [pc, #68]	; (8001f48 <HAL_TIM_PWM_Start_IT+0x70>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d010      	beq.n	8001f28 <HAL_TIM_PWM_Start_IT+0x50>
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_TIM_PWM_Start_IT+0x74>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00d      	beq.n	8001f28 <HAL_TIM_PWM_Start_IT+0x50>
 8001f0c:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_TIM_PWM_Start_IT+0x78>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00a      	beq.n	8001f28 <HAL_TIM_PWM_Start_IT+0x50>
  __HAL_TIM_ENABLE(htim);
 8001f12:	2101      	movs	r1, #1
 8001f14:	681a      	ldr	r2, [r3, #0]
}
 8001f16:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f1e:	6803      	ldr	r3, [r0, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	60da      	str	r2, [r3, #12]
    break;
 8001f26:	e7e3      	b.n	8001ef0 <HAL_TIM_PWM_Start_IT+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f2c:	0212      	lsls	r2, r2, #8
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
 8001f32:	e7ee      	b.n	8001f12 <HAL_TIM_PWM_Start_IT+0x3a>
  switch (Channel)
 8001f34:	2900      	cmp	r1, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_TIM_PWM_Start_IT+0x6c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f38:	6803      	ldr	r3, [r0, #0]
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	4302      	orrs	r2, r0
 8001f40:	60da      	str	r2, [r3, #12]
    break;
 8001f42:	e7d5      	b.n	8001ef0 <HAL_TIM_PWM_Start_IT+0x18>
 8001f44:	6803      	ldr	r3, [r0, #0]
 8001f46:	e7d3      	b.n	8001ef0 <HAL_TIM_PWM_Start_IT+0x18>
 8001f48:	40012c00 	.word	0x40012c00
 8001f4c:	40014400 	.word	0x40014400
 8001f50:	40014800 	.word	0x40014800

08001f54 <HAL_TIM_PWM_ConfigChannel>:
{
 8001f54:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001f56:	243c      	movs	r4, #60	; 0x3c
 8001f58:	5d05      	ldrb	r5, [r0, r4]
{
 8001f5a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	2d01      	cmp	r5, #1
 8001f60:	d044      	beq.n	8001fec <HAL_TIM_PWM_ConfigChannel+0x98>
 8001f62:	2501      	movs	r5, #1
 8001f64:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f66:	3401      	adds	r4, #1
 8001f68:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 8001f6a:	2a04      	cmp	r2, #4
 8001f6c:	d100      	bne.n	8001f70 <HAL_TIM_PWM_ConfigChannel+0x1c>
 8001f6e:	e06d      	b.n	800204c <HAL_TIM_PWM_ConfigChannel+0xf8>
 8001f70:	d800      	bhi.n	8001f74 <HAL_TIM_PWM_ConfigChannel+0x20>
 8001f72:	e09a      	b.n	80020aa <HAL_TIM_PWM_ConfigChannel+0x156>
 8001f74:	2a08      	cmp	r2, #8
 8001f76:	d03a      	beq.n	8001fee <HAL_TIM_PWM_ConfigChannel+0x9a>
 8001f78:	2a0c      	cmp	r2, #12
 8001f7a:	d130      	bne.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f7c:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f7e:	4c7a      	ldr	r4, [pc, #488]	; (8002168 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8001f80:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f82:	4d7a      	ldr	r5, [pc, #488]	; (800216c <HAL_TIM_PWM_ConfigChannel+0x218>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f84:	4020      	ands	r0, r4
 8001f86:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001f88:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001f8a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001f8c:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f8e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f90:	680d      	ldr	r5, [r1, #0]
 8001f92:	022d      	lsls	r5, r5, #8
 8001f94:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8001f96:	4c76      	ldr	r4, [pc, #472]	; (8002170 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8001f98:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f9a:	6888      	ldr	r0, [r1, #8]
 8001f9c:	0300      	lsls	r0, r0, #12
 8001f9e:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fa0:	4c74      	ldr	r4, [pc, #464]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x220>)
 8001fa2:	42a2      	cmp	r2, r4
 8001fa4:	d100      	bne.n	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001fa6:	e0ac      	b.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 8001fa8:	4c73      	ldr	r4, [pc, #460]	; (8002178 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8001faa:	42a2      	cmp	r2, r4
 8001fac:	d100      	bne.n	8001fb0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001fae:	e0a8      	b.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 8001fb0:	4c72      	ldr	r4, [pc, #456]	; (800217c <HAL_TIM_PWM_ConfigChannel+0x228>)
 8001fb2:	42a2      	cmp	r2, r4
 8001fb4:	d100      	bne.n	8001fb8 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001fb6:	e0a4      	b.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x1ae>
  TIMx->CCR4 = OC_Config->Pulse;
 8001fb8:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001fba:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001fbc:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001fbe:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001fc0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fc2:	2080      	movs	r0, #128	; 0x80
 8001fc4:	69d4      	ldr	r4, [r2, #28]
 8001fc6:	0100      	lsls	r0, r0, #4
 8001fc8:	4320      	orrs	r0, r4
 8001fca:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fcc:	69d0      	ldr	r0, [r2, #28]
 8001fce:	4c6c      	ldr	r4, [pc, #432]	; (8002180 <HAL_TIM_PWM_ConfigChannel+0x22c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fd0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fd2:	4020      	ands	r0, r4
 8001fd4:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fd6:	69d0      	ldr	r0, [r2, #28]
 8001fd8:	0209      	lsls	r1, r1, #8
 8001fda:	4301      	orrs	r1, r0
 8001fdc:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001fde:	2101      	movs	r1, #1
 8001fe0:	223d      	movs	r2, #61	; 0x3d
 8001fe2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001fe4:	2100      	movs	r1, #0
  return HAL_OK;
 8001fe6:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	5499      	strb	r1, [r3, r2]
}
 8001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fee:	2573      	movs	r5, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ff0:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ff2:	4c64      	ldr	r4, [pc, #400]	; (8002184 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8001ff4:	6a10      	ldr	r0, [r2, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ff6:	4f5f      	ldr	r7, [pc, #380]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x220>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ff8:	4020      	ands	r0, r4
 8001ffa:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001ffc:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001ffe:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8002000:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002002:	43ac      	bics	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 8002004:	680d      	ldr	r5, [r1, #0]
 8002006:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8002008:	4c5f      	ldr	r4, [pc, #380]	; (8002188 <HAL_TIM_PWM_ConfigChannel+0x234>)
 800200a:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800200c:	688c      	ldr	r4, [r1, #8]
 800200e:	0224      	lsls	r4, r4, #8
 8002010:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002012:	42ba      	cmp	r2, r7
 8002014:	d100      	bne.n	8002018 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8002016:	e08a      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x1da>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002018:	4f57      	ldr	r7, [pc, #348]	; (8002178 <HAL_TIM_PWM_ConfigChannel+0x224>)
 800201a:	42ba      	cmp	r2, r7
 800201c:	d100      	bne.n	8002020 <HAL_TIM_PWM_ConfigChannel+0xcc>
 800201e:	e08d      	b.n	800213c <HAL_TIM_PWM_ConfigChannel+0x1e8>
 8002020:	4f56      	ldr	r7, [pc, #344]	; (800217c <HAL_TIM_PWM_ConfigChannel+0x228>)
 8002022:	42ba      	cmp	r2, r7
 8002024:	d100      	bne.n	8002028 <HAL_TIM_PWM_ConfigChannel+0xd4>
 8002026:	e089      	b.n	800213c <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CCR3 = OC_Config->Pulse;
 8002028:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800202a:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 800202c:	61d5      	str	r5, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800202e:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002030:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8002032:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002034:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002036:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002038:	4320      	orrs	r0, r4
 800203a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800203c:	69d0      	ldr	r0, [r2, #28]
 800203e:	3c04      	subs	r4, #4
 8002040:	43a0      	bics	r0, r4
 8002042:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002044:	69d0      	ldr	r0, [r2, #28]
 8002046:	4301      	orrs	r1, r0
 8002048:	61d1      	str	r1, [r2, #28]
    break;
 800204a:	e7c8      	b.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x8a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800204c:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800204e:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002050:	4d46      	ldr	r5, [pc, #280]	; (800216c <HAL_TIM_PWM_ConfigChannel+0x218>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002052:	6a10      	ldr	r0, [r2, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002054:	4f47      	ldr	r7, [pc, #284]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x220>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002056:	43a0      	bics	r0, r4
 8002058:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800205a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800205c:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800205e:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002060:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002062:	680d      	ldr	r5, [r1, #0]
 8002064:	022d      	lsls	r5, r5, #8
 8002066:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8002068:	2420      	movs	r4, #32
 800206a:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800206c:	688c      	ldr	r4, [r1, #8]
 800206e:	0124      	lsls	r4, r4, #4
 8002070:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002072:	42ba      	cmp	r2, r7
 8002074:	d04b      	beq.n	800210e <HAL_TIM_PWM_ConfigChannel+0x1ba>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002076:	4f40      	ldr	r7, [pc, #256]	; (8002178 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8002078:	42ba      	cmp	r2, r7
 800207a:	d050      	beq.n	800211e <HAL_TIM_PWM_ConfigChannel+0x1ca>
 800207c:	4f3f      	ldr	r7, [pc, #252]	; (800217c <HAL_TIM_PWM_ConfigChannel+0x228>)
 800207e:	42ba      	cmp	r2, r7
 8002080:	d04d      	beq.n	800211e <HAL_TIM_PWM_ConfigChannel+0x1ca>
  TIMx->CCR2 = OC_Config->Pulse;
 8002082:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002084:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002086:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002088:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800208a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800208c:	2080      	movs	r0, #128	; 0x80
 800208e:	6994      	ldr	r4, [r2, #24]
 8002090:	0100      	lsls	r0, r0, #4
 8002092:	4320      	orrs	r0, r4
 8002094:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002096:	6990      	ldr	r0, [r2, #24]
 8002098:	4c39      	ldr	r4, [pc, #228]	; (8002180 <HAL_TIM_PWM_ConfigChannel+0x22c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800209a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800209c:	4020      	ands	r0, r4
 800209e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020a0:	6990      	ldr	r0, [r2, #24]
 80020a2:	0209      	lsls	r1, r1, #8
 80020a4:	4301      	orrs	r1, r0
 80020a6:	6191      	str	r1, [r2, #24]
    break;
 80020a8:	e799      	b.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	d197      	bne.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020ae:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020b0:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020b2:	6a14      	ldr	r4, [r2, #32]
 80020b4:	43ac      	bics	r4, r5
 80020b6:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 80020b8:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80020ba:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 80020bc:	4384      	bics	r4, r0
 80020be:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 80020c0:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 80020c2:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020c4:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 80020c6:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 80020c8:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020ca:	4c2a      	ldr	r4, [pc, #168]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x220>)
  tmpccmrx |= OC_Config->OCMode;
 80020cc:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020ce:	42a2      	cmp	r2, r4
 80020d0:	d03c      	beq.n	800214c <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80020d2:	4c29      	ldr	r4, [pc, #164]	; (8002178 <HAL_TIM_PWM_ConfigChannel+0x224>)
 80020d4:	42a2      	cmp	r2, r4
 80020d6:	d039      	beq.n	800214c <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80020d8:	4c28      	ldr	r4, [pc, #160]	; (800217c <HAL_TIM_PWM_ConfigChannel+0x228>)
 80020da:	42a2      	cmp	r2, r4
 80020dc:	d036      	beq.n	800214c <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR1 = OC_Config->Pulse;
 80020de:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80020e0:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80020e2:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80020e4:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020e6:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 80020e8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020ea:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020ec:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020ee:	4320      	orrs	r0, r4
 80020f0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020f2:	6990      	ldr	r0, [r2, #24]
 80020f4:	3c04      	subs	r4, #4
 80020f6:	43a0      	bics	r0, r4
 80020f8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020fa:	6990      	ldr	r0, [r2, #24]
 80020fc:	4301      	orrs	r1, r0
 80020fe:	6191      	str	r1, [r2, #24]
    break;
 8002100:	e76d      	b.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002102:	4c22      	ldr	r4, [pc, #136]	; (800218c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8002104:	4026      	ands	r6, r4
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002106:	694c      	ldr	r4, [r1, #20]
 8002108:	01a4      	lsls	r4, r4, #6
 800210a:	4326      	orrs	r6, r4
 800210c:	e754      	b.n	8001fb8 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpccer &= ~TIM_CCER_CC2NP;
 800210e:	2480      	movs	r4, #128	; 0x80
 8002110:	43a0      	bics	r0, r4
 8002112:	0004      	movs	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002114:	68c8      	ldr	r0, [r1, #12]
 8002116:	0100      	lsls	r0, r0, #4
 8002118:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 800211a:	2440      	movs	r4, #64	; 0x40
 800211c:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800211e:	4f1c      	ldr	r7, [pc, #112]	; (8002190 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002120:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002122:	4037      	ands	r7, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002124:	698e      	ldr	r6, [r1, #24]
 8002126:	4326      	orrs	r6, r4
 8002128:	00b6      	lsls	r6, r6, #2
 800212a:	433e      	orrs	r6, r7
 800212c:	e7a9      	b.n	8002082 <HAL_TIM_PWM_ConfigChannel+0x12e>
    tmpccer &= ~TIM_CCER_CC3NP;
 800212e:	4c19      	ldr	r4, [pc, #100]	; (8002194 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8002130:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002132:	68c8      	ldr	r0, [r1, #12]
 8002134:	0200      	lsls	r0, r0, #8
 8002136:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8002138:	4c11      	ldr	r4, [pc, #68]	; (8002180 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 800213a:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800213c:	4f16      	ldr	r7, [pc, #88]	; (8002198 <HAL_TIM_PWM_ConfigChannel+0x244>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800213e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002140:	4037      	ands	r7, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002142:	698e      	ldr	r6, [r1, #24]
 8002144:	4326      	orrs	r6, r4
 8002146:	0136      	lsls	r6, r6, #4
 8002148:	433e      	orrs	r6, r7
 800214a:	e76d      	b.n	8002028 <HAL_TIM_PWM_ConfigChannel+0xd4>
    tmpccer &= ~TIM_CCER_CC1NP;
 800214c:	2408      	movs	r4, #8
 800214e:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 8002150:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002152:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8002154:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002156:	2404      	movs	r4, #4
 8002158:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800215a:	4c10      	ldr	r4, [pc, #64]	; (800219c <HAL_TIM_PWM_ConfigChannel+0x248>)
 800215c:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800215e:	694c      	ldr	r4, [r1, #20]
 8002160:	433c      	orrs	r4, r7
 8002162:	4326      	orrs	r6, r4
 8002164:	e7bb      	b.n	80020de <HAL_TIM_PWM_ConfigChannel+0x18a>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	ffffefff 	.word	0xffffefff
 800216c:	ffff8cff 	.word	0xffff8cff
 8002170:	ffffdfff 	.word	0xffffdfff
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40014400 	.word	0x40014400
 800217c:	40014800 	.word	0x40014800
 8002180:	fffffbff 	.word	0xfffffbff
 8002184:	fffffeff 	.word	0xfffffeff
 8002188:	fffffdff 	.word	0xfffffdff
 800218c:	ffffbfff 	.word	0xffffbfff
 8002190:	fffff3ff 	.word	0xfffff3ff
 8002194:	fffff7ff 	.word	0xfffff7ff
 8002198:	ffffcfff 	.word	0xffffcfff
 800219c:	fffffcff 	.word	0xfffffcff

080021a0 <HAL_TIM_TriggerCallback>:
 80021a0:	4770      	bx	lr
 80021a2:	46c0      	nop			; (mov r8, r8)

080021a4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021a4:	2202      	movs	r2, #2
 80021a6:	6803      	ldr	r3, [r0, #0]
{
 80021a8:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021aa:	6919      	ldr	r1, [r3, #16]
{
 80021ac:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021ae:	420a      	tst	r2, r1
 80021b0:	d002      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x14>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80021b2:	68d9      	ldr	r1, [r3, #12]
 80021b4:	420a      	tst	r2, r1
 80021b6:	d168      	bne.n	800228a <HAL_TIM_IRQHandler+0xe6>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021b8:	2204      	movs	r2, #4
 80021ba:	6919      	ldr	r1, [r3, #16]
 80021bc:	420a      	tst	r2, r1
 80021be:	d002      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x22>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80021c0:	68d9      	ldr	r1, [r3, #12]
 80021c2:	420a      	tst	r2, r1
 80021c4:	d14e      	bne.n	8002264 <HAL_TIM_IRQHandler+0xc0>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021c6:	2208      	movs	r2, #8
 80021c8:	6919      	ldr	r1, [r3, #16]
 80021ca:	420a      	tst	r2, r1
 80021cc:	d002      	beq.n	80021d4 <HAL_TIM_IRQHandler+0x30>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80021ce:	68d9      	ldr	r1, [r3, #12]
 80021d0:	420a      	tst	r2, r1
 80021d2:	d136      	bne.n	8002242 <HAL_TIM_IRQHandler+0x9e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d4:	2210      	movs	r2, #16
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	420a      	tst	r2, r1
 80021da:	d002      	beq.n	80021e2 <HAL_TIM_IRQHandler+0x3e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80021dc:	68d9      	ldr	r1, [r3, #12]
 80021de:	420a      	tst	r2, r1
 80021e0:	d11c      	bne.n	800221c <HAL_TIM_IRQHandler+0x78>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e2:	2201      	movs	r2, #1
 80021e4:	6919      	ldr	r1, [r3, #16]
 80021e6:	420a      	tst	r2, r1
 80021e8:	d002      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x4c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021ea:	68d9      	ldr	r1, [r3, #12]
 80021ec:	420a      	tst	r2, r1
 80021ee:	d169      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x120>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	6919      	ldr	r1, [r3, #16]
 80021f4:	420a      	tst	r2, r1
 80021f6:	d002      	beq.n	80021fe <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021f8:	68d9      	ldr	r1, [r3, #12]
 80021fa:	420a      	tst	r2, r1
 80021fc:	d169      	bne.n	80022d2 <HAL_TIM_IRQHandler+0x12e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	6919      	ldr	r1, [r3, #16]
 8002202:	420a      	tst	r2, r1
 8002204:	d002      	beq.n	800220c <HAL_TIM_IRQHandler+0x68>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002206:	68d9      	ldr	r1, [r3, #12]
 8002208:	420a      	tst	r2, r1
 800220a:	d154      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x112>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800220c:	2220      	movs	r2, #32
 800220e:	6919      	ldr	r1, [r3, #16]
 8002210:	420a      	tst	r2, r1
 8002212:	d002      	beq.n	800221a <HAL_TIM_IRQHandler+0x76>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002214:	68d9      	ldr	r1, [r3, #12]
 8002216:	420a      	tst	r2, r1
 8002218:	d147      	bne.n	80022aa <HAL_TIM_IRQHandler+0x106>
}
 800221a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800221c:	3a21      	subs	r2, #33	; 0x21
 800221e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002220:	3219      	adds	r2, #25
 8002222:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	23c0      	movs	r3, #192	; 0xc0
 8002228:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800222a:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222c:	421a      	tst	r2, r3
 800222e:	d15b      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002230:	f000 fcbe 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	0020      	movs	r0, r4
 8002236:	f000 fcc7 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	2300      	movs	r3, #0
 800223c:	7723      	strb	r3, [r4, #28]
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	e7cf      	b.n	80021e2 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002242:	3a11      	subs	r2, #17
 8002244:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002246:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002248:	320d      	adds	r2, #13
 800224a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800224c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800224e:	079b      	lsls	r3, r3, #30
 8002250:	d150      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	f000 fcad 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002256:	0020      	movs	r0, r4
 8002258:	f000 fcb6 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225c:	2300      	movs	r3, #0
 800225e:	7723      	strb	r3, [r4, #28]
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	e7b7      	b.n	80021d4 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002264:	3a09      	subs	r2, #9
 8002266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002268:	3207      	adds	r2, #7
 800226a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002274:	421a      	tst	r2, r3
 8002276:	d13a      	bne.n	80022ee <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002278:	f000 fc9a 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	0020      	movs	r0, r4
 800227e:	f000 fca3 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002282:	2300      	movs	r3, #0
 8002284:	7723      	strb	r3, [r4, #28]
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	e79d      	b.n	80021c6 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800228a:	3a05      	subs	r2, #5
 800228c:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800228e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002290:	3204      	adds	r2, #4
 8002292:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002294:	079b      	lsls	r3, r3, #30
 8002296:	d124      	bne.n	80022e2 <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002298:	f000 fc8a 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	0020      	movs	r0, r4
 800229e:	f000 fc93 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	2300      	movs	r3, #0
 80022a4:	7723      	strb	r3, [r4, #28]
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	e786      	b.n	80021b8 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022aa:	3a41      	subs	r2, #65	; 0x41
 80022ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80022ae:	0020      	movs	r0, r4
 80022b0:	f000 f844 	bl	800233c <HAL_TIMEx_CommutationCallback>
}
 80022b4:	e7b1      	b.n	800221a <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022b6:	3a81      	subs	r2, #129	; 0x81
 80022b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022ba:	0020      	movs	r0, r4
 80022bc:	f7ff ff70 	bl	80021a0 <HAL_TIM_TriggerCallback>
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	e7a3      	b.n	800220c <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022c4:	3a03      	subs	r2, #3
 80022c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c8:	0020      	movs	r0, r4
 80022ca:	f000 fc53 	bl	8002b74 <HAL_TIM_PeriodElapsedCallback>
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	e78e      	b.n	80021f0 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d2:	3a02      	subs	r2, #2
 80022d4:	3aff      	subs	r2, #255	; 0xff
 80022d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022d8:	0020      	movs	r0, r4
 80022da:	f000 f831 	bl	8002340 <HAL_TIMEx_BreakCallback>
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	e78d      	b.n	80021fe <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	f000 fc6b 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 80022e6:	e7dc      	b.n	80022a2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80022e8:	f000 fc68 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 80022ec:	e7a5      	b.n	800223a <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 80022ee:	f000 fc65 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 80022f2:	e7c6      	b.n	8002282 <HAL_TIM_IRQHandler+0xde>
        HAL_TIM_IC_CaptureCallback(htim);
 80022f4:	f000 fc62 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 80022f8:	e7b0      	b.n	800225c <HAL_TIM_IRQHandler+0xb8>
 80022fa:	46c0      	nop			; (mov r8, r8)

080022fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80022fc:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80022fe:	243c      	movs	r4, #60	; 0x3c
 8002300:	5d03      	ldrb	r3, [r0, r4]
{
 8002302:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002304:	2002      	movs	r0, #2
 8002306:	2b01      	cmp	r3, #1
 8002308:	d017      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 800230a:	253d      	movs	r5, #61	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800230c:	2670      	movs	r6, #112	; 0x70
 800230e:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002312:	6858      	ldr	r0, [r3, #4]
 8002314:	43b0      	bics	r0, r6
 8002316:	6058      	str	r0, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002318:	6858      	ldr	r0, [r3, #4]
 800231a:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800231c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800231e:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002320:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002322:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002324:	6898      	ldr	r0, [r3, #8]
 8002326:	43b0      	bics	r0, r6
 8002328:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800232a:	6898      	ldr	r0, [r3, #8]
 800232c:	4301      	orrs	r1, r0
 800232e:	6099      	str	r1, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002330:	2301      	movs	r3, #1
 8002332:	5553      	strb	r3, [r2, r5]

  __HAL_UNLOCK(htim);
 8002334:	2300      	movs	r3, #0

  return HAL_OK;
 8002336:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8002338:	5513      	strb	r3, [r2, r4]
}
 800233a:	bd70      	pop	{r4, r5, r6, pc}

0800233c <HAL_TIMEx_CommutationCallback>:
 800233c:	4770      	bx	lr
 800233e:	46c0      	nop			; (mov r8, r8)

08002340 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002340:	4770      	bx	lr
 8002342:	46c0      	nop			; (mov r8, r8)

08002344 <HAL_UART_Transmit_IT>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002344:	0003      	movs	r3, r0
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002346:	2069      	movs	r0, #105	; 0x69
{
 8002348:	b530      	push	{r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800234a:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800234c:	3867      	subs	r0, #103	; 0x67
  if(huart->gState == HAL_UART_STATE_READY)
 800234e:	2c20      	cmp	r4, #32
 8002350:	d000      	beq.n	8002354 <HAL_UART_Transmit_IT+0x10>
  }
}
 8002352:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 8002354:	2900      	cmp	r1, #0
 8002356:	d024      	beq.n	80023a2 <HAL_UART_Transmit_IT+0x5e>
      return HAL_ERROR;
 8002358:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800235a:	2a00      	cmp	r2, #0
 800235c:	d0f9      	beq.n	8002352 <HAL_UART_Transmit_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235e:	2480      	movs	r4, #128	; 0x80
 8002360:	689d      	ldr	r5, [r3, #8]
 8002362:	0164      	lsls	r4, r4, #5
 8002364:	42a5      	cmp	r5, r4
 8002366:	d016      	beq.n	8002396 <HAL_UART_Transmit_IT+0x52>
    __HAL_LOCK(huart);
 8002368:	2468      	movs	r4, #104	; 0x68
 800236a:	5d1d      	ldrb	r5, [r3, r4]
    return HAL_BUSY;
 800236c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800236e:	2d01      	cmp	r5, #1
 8002370:	d0ef      	beq.n	8002352 <HAL_UART_Transmit_IT+0xe>
    huart->pTxBuffPtr = pData;
 8002372:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8002374:	2150      	movs	r1, #80	; 0x50
 8002376:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002378:	3102      	adds	r1, #2
 800237a:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	2200      	movs	r2, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800237e:	301f      	adds	r0, #31
 8002380:	3117      	adds	r1, #23
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002382:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002384:	5458      	strb	r0, [r3, r1]
    __HAL_UNLOCK(huart);
 8002386:	551a      	strb	r2, [r3, r4]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	3117      	adds	r1, #23
 800238c:	6813      	ldr	r3, [r2, #0]
    return HAL_OK;
 800238e:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002390:	430b      	orrs	r3, r1
 8002392:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8002394:	e7dd      	b.n	8002352 <HAL_UART_Transmit_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002396:	691c      	ldr	r4, [r3, #16]
 8002398:	2c00      	cmp	r4, #0
 800239a:	d1e5      	bne.n	8002368 <HAL_UART_Transmit_IT+0x24>
      if((((uint32_t)pData)&1U) != 0U)
 800239c:	4201      	tst	r1, r0
 800239e:	d0e3      	beq.n	8002368 <HAL_UART_Transmit_IT+0x24>
 80023a0:	e7d7      	b.n	8002352 <HAL_UART_Transmit_IT+0xe>
      return HAL_ERROR;
 80023a2:	2001      	movs	r0, #1
 80023a4:	e7d5      	b.n	8002352 <HAL_UART_Transmit_IT+0xe>
 80023a6:	46c0      	nop			; (mov r8, r8)

080023a8 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023a8:	0003      	movs	r3, r0
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80023aa:	206a      	movs	r0, #106	; 0x6a
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 80023ae:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80023b0:	3868      	subs	r0, #104	; 0x68
  if(huart->RxState == HAL_UART_STATE_READY)
 80023b2:	2c20      	cmp	r4, #32
 80023b4:	d000      	beq.n	80023b8 <HAL_UART_Receive_IT+0x10>
  }
}
 80023b6:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == NULL ) || (Size == 0U))
 80023b8:	2900      	cmp	r1, #0
 80023ba:	d040      	beq.n	800243e <HAL_UART_Receive_IT+0x96>
      return HAL_ERROR;
 80023bc:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d0f9      	beq.n	80023b6 <HAL_UART_Receive_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c2:	2580      	movs	r5, #128	; 0x80
 80023c4:	689c      	ldr	r4, [r3, #8]
 80023c6:	016d      	lsls	r5, r5, #5
 80023c8:	42ac      	cmp	r4, r5
 80023ca:	d026      	beq.n	800241a <HAL_UART_Receive_IT+0x72>
    __HAL_LOCK(huart);
 80023cc:	2568      	movs	r5, #104	; 0x68
 80023ce:	5d5e      	ldrb	r6, [r3, r5]
    return HAL_BUSY;
 80023d0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80023d2:	2e01      	cmp	r6, #1
 80023d4:	d0ef      	beq.n	80023b6 <HAL_UART_Receive_IT+0xe>
 80023d6:	2001      	movs	r0, #1
 80023d8:	5558      	strb	r0, [r3, r5]
    huart->pRxBuffPtr = pData;
 80023da:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80023dc:	2158      	movs	r1, #88	; 0x58
 80023de:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80023e0:	3102      	adds	r1, #2
 80023e2:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 80023e4:	2c00      	cmp	r4, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_UART_Receive_IT+0x4c>
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	2a00      	cmp	r2, #0
 80023ec:	d033      	beq.n	8002456 <HAL_UART_Receive_IT+0xae>
 80023ee:	217f      	movs	r1, #127	; 0x7f
 80023f0:	225c      	movs	r2, #92	; 0x5c
 80023f2:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f4:	2200      	movs	r2, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023f6:	2022      	movs	r0, #34	; 0x22
 80023f8:	216a      	movs	r1, #106	; 0x6a
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fa:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023fc:	5458      	strb	r0, [r3, r1]
    __HAL_UNLOCK(huart);
 80023fe:	3902      	subs	r1, #2
 8002400:	545a      	strb	r2, [r3, r1]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3967      	subs	r1, #103	; 0x67
 8002406:	689a      	ldr	r2, [r3, #8]
    return HAL_OK;
 8002408:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800240e:	2290      	movs	r2, #144	; 0x90
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	0052      	lsls	r2, r2, #1
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8002418:	e7cd      	b.n	80023b6 <HAL_UART_Receive_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800241a:	691c      	ldr	r4, [r3, #16]
 800241c:	2c00      	cmp	r4, #0
 800241e:	d110      	bne.n	8002442 <HAL_UART_Receive_IT+0x9a>
      if((((uint32_t)pData)&1U) != 0U)
 8002420:	4201      	tst	r1, r0
 8002422:	d1c8      	bne.n	80023b6 <HAL_UART_Receive_IT+0xe>
    __HAL_LOCK(huart);
 8002424:	2068      	movs	r0, #104	; 0x68
 8002426:	5c18      	ldrb	r0, [r3, r0]
 8002428:	2801      	cmp	r0, #1
 800242a:	d018      	beq.n	800245e <HAL_UART_Receive_IT+0xb6>
    huart->pRxBuffPtr = pData;
 800242c:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800242e:	2158      	movs	r1, #88	; 0x58
 8002430:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002432:	3102      	adds	r1, #2
 8002434:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8002436:	225c      	movs	r2, #92	; 0x5c
 8002438:	490a      	ldr	r1, [pc, #40]	; (8002464 <HAL_UART_Receive_IT+0xbc>)
 800243a:	5299      	strh	r1, [r3, r2]
 800243c:	e7da      	b.n	80023f4 <HAL_UART_Receive_IT+0x4c>
      return HAL_ERROR;
 800243e:	2001      	movs	r0, #1
 8002440:	e7b9      	b.n	80023b6 <HAL_UART_Receive_IT+0xe>
    __HAL_LOCK(huart);
 8002442:	2068      	movs	r0, #104	; 0x68
 8002444:	5c1c      	ldrb	r4, [r3, r0]
    return HAL_BUSY;
 8002446:	3866      	subs	r0, #102	; 0x66
    __HAL_LOCK(huart);
 8002448:	2c01      	cmp	r4, #1
 800244a:	d0b4      	beq.n	80023b6 <HAL_UART_Receive_IT+0xe>
    huart->pRxBuffPtr = pData;
 800244c:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800244e:	2158      	movs	r1, #88	; 0x58
 8002450:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002452:	3102      	adds	r1, #2
 8002454:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8002456:	21ff      	movs	r1, #255	; 0xff
 8002458:	225c      	movs	r2, #92	; 0x5c
 800245a:	5299      	strh	r1, [r3, r2]
 800245c:	e7ca      	b.n	80023f4 <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 800245e:	2002      	movs	r0, #2
 8002460:	e7a9      	b.n	80023b6 <HAL_UART_Receive_IT+0xe>
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	000001ff 	.word	0x000001ff

08002468 <HAL_UART_Transmit_DMA>:
  *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	0004      	movs	r4, r0
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800246c:	2069      	movs	r0, #105	; 0x69
 800246e:	5c25      	ldrb	r5, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002470:	3867      	subs	r0, #103	; 0x67
  if(huart->gState == HAL_UART_STATE_READY)
 8002472:	2d20      	cmp	r5, #32
 8002474:	d000      	beq.n	8002478 <HAL_UART_Transmit_DMA+0x10>
  }
}
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8002478:	2900      	cmp	r1, #0
 800247a:	d036      	beq.n	80024ea <HAL_UART_Transmit_DMA+0x82>
      return HAL_ERROR;
 800247c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800247e:	2a00      	cmp	r2, #0
 8002480:	d0f9      	beq.n	8002476 <HAL_UART_Transmit_DMA+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	68a5      	ldr	r5, [r4, #8]
 8002486:	015b      	lsls	r3, r3, #5
 8002488:	429d      	cmp	r5, r3
 800248a:	d028      	beq.n	80024de <HAL_UART_Transmit_DMA+0x76>
    __HAL_LOCK(huart);
 800248c:	2568      	movs	r5, #104	; 0x68
 800248e:	5d63      	ldrb	r3, [r4, r5]
    return HAL_BUSY;
 8002490:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002492:	2b01      	cmp	r3, #1
 8002494:	d0ef      	beq.n	8002476 <HAL_UART_Transmit_DMA+0xe>
 8002496:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002498:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 800249a:	5563      	strb	r3, [r4, r5]
    huart->TxXferSize = Size;
 800249c:	334f      	adds	r3, #79	; 0x4f
    huart->pTxBuffPtr = pData;
 800249e:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80024a0:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80024a2:	3302      	adds	r3, #2
 80024a4:	52e2      	strh	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a6:	301f      	adds	r0, #31
 80024a8:	3317      	adds	r3, #23
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024aa:	66e6      	str	r6, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ac:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024ae:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <HAL_UART_Transmit_DMA+0x88>)
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80024b2:	6827      	ldr	r7, [r4, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024b4:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_UART_Transmit_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80024b8:	3728      	adds	r7, #40	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80024ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_UART_Transmit_DMA+0x90>)
    huart->hdmatx->XferAbortCallback = NULL;
 80024be:	6346      	str	r6, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80024c0:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80024c2:	0013      	movs	r3, r2
 80024c4:	003a      	movs	r2, r7
 80024c6:	f7fe feb5 	bl	8001234 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80024ca:	2240      	movs	r2, #64	; 0x40
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024cc:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80024ce:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 80024d0:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80024d2:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024d4:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80024d6:	5566      	strb	r6, [r4, r5]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80024dc:	e7cb      	b.n	8002476 <HAL_UART_Transmit_DMA+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024de:	6923      	ldr	r3, [r4, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1d3      	bne.n	800248c <HAL_UART_Transmit_DMA+0x24>
      if((((uint32_t)pData)&1U) != 0U)
 80024e4:	4201      	tst	r1, r0
 80024e6:	d0d1      	beq.n	800248c <HAL_UART_Transmit_DMA+0x24>
 80024e8:	e7c5      	b.n	8002476 <HAL_UART_Transmit_DMA+0xe>
      return HAL_ERROR;
 80024ea:	2001      	movs	r0, #1
 80024ec:	e7c3      	b.n	8002476 <HAL_UART_Transmit_DMA+0xe>
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	080024fd 	.word	0x080024fd
 80024f4:	08002531 	.word	0x08002531
 80024f8:	08002541 	.word	0x08002541

080024fc <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80024fc:	6803      	ldr	r3, [r0, #0]
{
 80024fe:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002504:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002506:	400b      	ands	r3, r1
 8002508:	d10b      	bne.n	8002522 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0;
 800250a:	2152      	movs	r1, #82	; 0x52
 800250c:	5253      	strh	r3, [r2, r1]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800250e:	6813      	ldr	r3, [r2, #0]
 8002510:	312e      	adds	r1, #46	; 0x2e
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	438a      	bics	r2, r1
 8002516:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	3940      	subs	r1, #64	; 0x40
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8002520:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8002522:	0010      	movs	r0, r2
 8002524:	f000 fb56 	bl	8002bd4 <HAL_UART_TxCpltCallback>
}
 8002528:	e7fa      	b.n	8002520 <UART_DMATransmitCplt+0x24>
 800252a:	46c0      	nop			; (mov r8, r8)

0800252c <HAL_UART_TxHalfCpltCallback>:
 800252c:	4770      	bx	lr
 800252e:	46c0      	nop			; (mov r8, r8)

08002530 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002530:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8002532:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002534:	f7ff fffa 	bl	800252c <HAL_UART_TxHalfCpltCallback>
}
 8002538:	bd10      	pop	{r4, pc}
 800253a:	46c0      	nop			; (mov r8, r8)

0800253c <HAL_UART_ErrorCallback>:
 800253c:	4770      	bx	lr
 800253e:	46c0      	nop			; (mov r8, r8)

08002540 <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002540:	2369      	movs	r3, #105	; 0x69
{
 8002542:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002544:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002546:	5cc2      	ldrb	r2, [r0, r3]
 8002548:	2a21      	cmp	r2, #33	; 0x21
 800254a:	d01d      	beq.n	8002588 <UART_DMAError+0x48>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800254c:	236a      	movs	r3, #106	; 0x6a
 800254e:	5cc2      	ldrb	r2, [r0, r3]
 8002550:	2a22      	cmp	r2, #34	; 0x22
 8002552:	d006      	beq.n	8002562 <UART_DMAError+0x22>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002554:	2210      	movs	r2, #16
 8002556:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002558:	4313      	orrs	r3, r2
 800255a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800255c:	f7ff ffee 	bl	800253c <HAL_UART_ErrorCallback>
}
 8002560:	bd10      	pop	{r4, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8002562:	6802      	ldr	r2, [r0, #0]
 8002564:	6891      	ldr	r1, [r2, #8]
 8002566:	0649      	lsls	r1, r1, #25
 8002568:	d5f4      	bpl.n	8002554 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 800256a:	2400      	movs	r4, #0
 800256c:	215a      	movs	r1, #90	; 0x5a
 800256e:	5244      	strh	r4, [r0, r1]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002570:	6811      	ldr	r1, [r2, #0]
 8002572:	4c0c      	ldr	r4, [pc, #48]	; (80025a4 <UART_DMAError+0x64>)
 8002574:	4021      	ands	r1, r4
 8002576:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002578:	6891      	ldr	r1, [r2, #8]
 800257a:	3423      	adds	r4, #35	; 0x23
 800257c:	34ff      	adds	r4, #255	; 0xff
 800257e:	43a1      	bics	r1, r4
 8002580:	6091      	str	r1, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002582:	2220      	movs	r2, #32
 8002584:	54c2      	strb	r2, [r0, r3]
 8002586:	e7e5      	b.n	8002554 <UART_DMAError+0x14>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8002588:	6802      	ldr	r2, [r0, #0]
 800258a:	6891      	ldr	r1, [r2, #8]
 800258c:	0609      	lsls	r1, r1, #24
 800258e:	d5dd      	bpl.n	800254c <UART_DMAError+0xc>
    huart->TxXferCount = 0U;
 8002590:	2400      	movs	r4, #0
 8002592:	2152      	movs	r1, #82	; 0x52
 8002594:	5244      	strh	r4, [r0, r1]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002596:	6811      	ldr	r1, [r2, #0]
 8002598:	34c0      	adds	r4, #192	; 0xc0
 800259a:	43a1      	bics	r1, r4
 800259c:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800259e:	2220      	movs	r2, #32
 80025a0:	54c2      	strb	r2, [r0, r3]
 80025a2:	e7d3      	b.n	800254c <UART_DMAError+0xc>
 80025a4:	fffffedf 	.word	0xfffffedf

080025a8 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  huart->RxXferCount = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	225a      	movs	r2, #90	; 0x5a
{
 80025ac:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80025ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80025b0:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80025b2:	3a08      	subs	r2, #8
 80025b4:	5283      	strh	r3, [r0, r2]

  HAL_UART_ErrorCallback(huart);
 80025b6:	f7ff ffc1 	bl	800253c <HAL_UART_ErrorCallback>
}
 80025ba:	bd10      	pop	{r4, pc}

080025bc <HAL_UART_IRQHandler>:
{
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025be:	6803      	ldr	r3, [r0, #0]
{
 80025c0:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	0018      	movs	r0, r3
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025c6:	6819      	ldr	r1, [r3, #0]
  if (errorflags == RESET)
 80025c8:	0715      	lsls	r5, r2, #28
 80025ca:	d110      	bne.n	80025ee <HAL_UART_IRQHandler+0x32>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025cc:	2020      	movs	r0, #32
 80025ce:	4210      	tst	r0, r2
 80025d0:	d15d      	bne.n	800268e <HAL_UART_IRQHandler+0xd2>
  cr3its = READ_REG(huart->Instance->CR3);
 80025d2:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025d4:	2080      	movs	r0, #128	; 0x80
 80025d6:	4210      	tst	r0, r2
 80025d8:	d002      	beq.n	80025e0 <HAL_UART_IRQHandler+0x24>
 80025da:	4208      	tst	r0, r1
 80025dc:	d000      	beq.n	80025e0 <HAL_UART_IRQHandler+0x24>
 80025de:	e085      	b.n	80026ec <HAL_UART_IRQHandler+0x130>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025e0:	2040      	movs	r0, #64	; 0x40
 80025e2:	4210      	tst	r0, r2
 80025e4:	d002      	beq.n	80025ec <HAL_UART_IRQHandler+0x30>
 80025e6:	4208      	tst	r0, r1
 80025e8:	d000      	beq.n	80025ec <HAL_UART_IRQHandler+0x30>
 80025ea:	e06f      	b.n	80026cc <HAL_UART_IRQHandler+0x110>
}
 80025ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80025ee:	2601      	movs	r6, #1
  cr3its = READ_REG(huart->Instance->CR3);
 80025f0:	689d      	ldr	r5, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80025f2:	4035      	ands	r5, r6
 80025f4:	d056      	beq.n	80026a4 <HAL_UART_IRQHandler+0xe8>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025f6:	2601      	movs	r6, #1
 80025f8:	4216      	tst	r6, r2
 80025fa:	d005      	beq.n	8002608 <HAL_UART_IRQHandler+0x4c>
 80025fc:	05cf      	lsls	r7, r1, #23
 80025fe:	d503      	bpl.n	8002608 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002600:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002602:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8002604:	433e      	orrs	r6, r7
 8002606:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002608:	2602      	movs	r6, #2
 800260a:	4216      	tst	r6, r2
 800260c:	d053      	beq.n	80026b6 <HAL_UART_IRQHandler+0xfa>
 800260e:	2d00      	cmp	r5, #0
 8002610:	d006      	beq.n	8002620 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002612:	2704      	movs	r7, #4
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002614:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002616:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8002618:	433e      	orrs	r6, r7
 800261a:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800261c:	4217      	tst	r7, r2
 800261e:	d14e      	bne.n	80026be <HAL_UART_IRQHandler+0x102>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002620:	0716      	lsls	r6, r2, #28
 8002622:	d503      	bpl.n	800262c <HAL_UART_IRQHandler+0x70>
 8002624:	068e      	lsls	r6, r1, #26
 8002626:	d45b      	bmi.n	80026e0 <HAL_UART_IRQHandler+0x124>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002628:	2d00      	cmp	r5, #0
 800262a:	d159      	bne.n	80026e0 <HAL_UART_IRQHandler+0x124>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800262c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800262e:	2d00      	cmp	r5, #0
 8002630:	d0dc      	beq.n	80025ec <HAL_UART_IRQHandler+0x30>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002632:	2520      	movs	r5, #32
 8002634:	4215      	tst	r5, r2
 8002636:	d002      	beq.n	800263e <HAL_UART_IRQHandler+0x82>
 8002638:	420d      	tst	r5, r1
 800263a:	d000      	beq.n	800263e <HAL_UART_IRQHandler+0x82>
 800263c:	e09a      	b.n	8002774 <HAL_UART_IRQHandler+0x1b8>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800263e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002640:	071b      	lsls	r3, r3, #28
 8002642:	d404      	bmi.n	800264e <HAL_UART_IRQHandler+0x92>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002644:	2540      	movs	r5, #64	; 0x40
 8002646:	6883      	ldr	r3, [r0, #8]
 8002648:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800264a:	d100      	bne.n	800264e <HAL_UART_IRQHandler+0x92>
 800264c:	e09b      	b.n	8002786 <HAL_UART_IRQHandler+0x1ca>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	4a76      	ldr	r2, [pc, #472]	; (800282c <HAL_UART_IRQHandler+0x270>)
 8002652:	4013      	ands	r3, r2
 8002654:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002656:	6883      	ldr	r3, [r0, #8]
 8002658:	3223      	adds	r2, #35	; 0x23
 800265a:	32ff      	adds	r2, #255	; 0xff
 800265c:	4393      	bics	r3, r2
 800265e:	6083      	str	r3, [r0, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002660:	236a      	movs	r3, #106	; 0x6a
 8002662:	321f      	adds	r2, #31
 8002664:	54e2      	strb	r2, [r4, r3]
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002666:	6883      	ldr	r3, [r0, #8]
 8002668:	3220      	adds	r2, #32
 800266a:	421a      	tst	r2, r3
 800266c:	d057      	beq.n	800271e <HAL_UART_IRQHandler+0x162>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800266e:	6883      	ldr	r3, [r0, #8]
 8002670:	4393      	bics	r3, r2
 8002672:	6083      	str	r3, [r0, #8]
          if(huart->hdmarx != NULL)
 8002674:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002676:	2800      	cmp	r0, #0
 8002678:	d051      	beq.n	800271e <HAL_UART_IRQHandler+0x162>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800267a:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <HAL_UART_IRQHandler+0x274>)
 800267c:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800267e:	f7fe fe15 	bl	80012ac <HAL_DMA_Abort_IT>
 8002682:	2800      	cmp	r0, #0
 8002684:	d0b2      	beq.n	80025ec <HAL_UART_IRQHandler+0x30>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002686:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002688:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800268a:	4798      	blx	r3
 800268c:	e7ae      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800268e:	4208      	tst	r0, r1
 8002690:	d09f      	beq.n	80025d2 <HAL_UART_IRQHandler+0x16>
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002692:	226a      	movs	r2, #106	; 0x6a
 8002694:	5ca2      	ldrb	r2, [r4, r2]
 8002696:	2a22      	cmp	r2, #34	; 0x22
 8002698:	d045      	beq.n	8002726 <HAL_UART_IRQHandler+0x16a>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800269a:	2108      	movs	r1, #8
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	430a      	orrs	r2, r1
 80026a0:	619a      	str	r2, [r3, #24]
 80026a2:	e7a3      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80026a4:	2690      	movs	r6, #144	; 0x90
 80026a6:	0076      	lsls	r6, r6, #1
 80026a8:	4231      	tst	r1, r6
 80026aa:	d100      	bne.n	80026ae <HAL_UART_IRQHandler+0xf2>
 80026ac:	e792      	b.n	80025d4 <HAL_UART_IRQHandler+0x18>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026ae:	2601      	movs	r6, #1
 80026b0:	4216      	tst	r6, r2
 80026b2:	d0a9      	beq.n	8002608 <HAL_UART_IRQHandler+0x4c>
 80026b4:	e7a2      	b.n	80025fc <HAL_UART_IRQHandler+0x40>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026b6:	0756      	lsls	r6, r2, #29
 80026b8:	d5b2      	bpl.n	8002620 <HAL_UART_IRQHandler+0x64>
 80026ba:	2d00      	cmp	r5, #0
 80026bc:	d0b0      	beq.n	8002620 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80026be:	2604      	movs	r6, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026c0:	2702      	movs	r7, #2
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80026c2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026c4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80026c6:	433e      	orrs	r6, r7
 80026c8:	66e6      	str	r6, [r4, #108]	; 0x6c
 80026ca:	e7a9      	b.n	8002620 <HAL_UART_IRQHandler+0x64>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4382      	bics	r2, r0
 80026d0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80026d2:	2220      	movs	r2, #32
 80026d4:	2369      	movs	r3, #105	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80026d6:	0020      	movs	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80026d8:	54e2      	strb	r2, [r4, r3]
  HAL_UART_TxCpltCallback(huart);
 80026da:	f000 fa7b 	bl	8002bd4 <HAL_UART_TxCpltCallback>
 80026de:	e785      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80026e0:	2608      	movs	r6, #8
 80026e2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026e4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80026e6:	4335      	orrs	r5, r6
 80026e8:	66e5      	str	r5, [r4, #108]	; 0x6c
 80026ea:	e79f      	b.n	800262c <HAL_UART_IRQHandler+0x70>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026ec:	2269      	movs	r2, #105	; 0x69
 80026ee:	5ca2      	ldrb	r2, [r4, r2]
 80026f0:	2a21      	cmp	r2, #33	; 0x21
 80026f2:	d000      	beq.n	80026f6 <HAL_UART_IRQHandler+0x13a>
 80026f4:	e77a      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
    if(huart->TxXferCount == 0U)
 80026f6:	3231      	adds	r2, #49	; 0x31
 80026f8:	5aa2      	ldrh	r2, [r4, r2]
 80026fa:	2a00      	cmp	r2, #0
 80026fc:	d060      	beq.n	80027c0 <HAL_UART_IRQHandler+0x204>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	68a1      	ldr	r1, [r4, #8]
 8002702:	0152      	lsls	r2, r2, #5
 8002704:	4291      	cmp	r1, r2
 8002706:	d06c      	beq.n	80027e2 <HAL_UART_IRQHandler+0x226>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002708:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800270a:	1c51      	adds	r1, r2, #1
 800270c:	64e1      	str	r1, [r4, #76]	; 0x4c
 800270e:	7812      	ldrb	r2, [r2, #0]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8002712:	2252      	movs	r2, #82	; 0x52
 8002714:	5aa3      	ldrh	r3, [r4, r2]
 8002716:	3b01      	subs	r3, #1
 8002718:	b29b      	uxth	r3, r3
 800271a:	52a3      	strh	r3, [r4, r2]
 800271c:	e766      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
            HAL_UART_ErrorCallback(huart);
 800271e:	0020      	movs	r0, r4
 8002720:	f7ff ff0c 	bl	800253c <HAL_UART_ErrorCallback>
 8002724:	e762      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
  uint16_t  uhMask = huart->Mask;
 8002726:	323a      	adds	r2, #58	; 0x3a
 8002728:	5aa1      	ldrh	r1, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272a:	2280      	movs	r2, #128	; 0x80
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800272c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272e:	68a0      	ldr	r0, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002730:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002732:	0152      	lsls	r2, r2, #5
 8002734:	4290      	cmp	r0, r2
 8002736:	d04b      	beq.n	80027d0 <HAL_UART_IRQHandler+0x214>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002738:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800273a:	400b      	ands	r3, r1
 800273c:	1c50      	adds	r0, r2, #1
 800273e:	6560      	str	r0, [r4, #84]	; 0x54
 8002740:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8002742:	225a      	movs	r2, #90	; 0x5a
 8002744:	5aa3      	ldrh	r3, [r4, r2]
 8002746:	3b01      	subs	r3, #1
 8002748:	b29b      	uxth	r3, r3
 800274a:	52a3      	strh	r3, [r4, r2]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d000      	beq.n	8002752 <HAL_UART_IRQHandler+0x196>
 8002750:	e74c      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	4935      	ldr	r1, [pc, #212]	; (800282c <HAL_UART_IRQHandler+0x270>)
 8002756:	681a      	ldr	r2, [r3, #0]
      HAL_UART_RxCpltCallback(huart);
 8002758:	0020      	movs	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800275a:	400a      	ands	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	3123      	adds	r1, #35	; 0x23
 8002762:	31ff      	adds	r1, #255	; 0xff
 8002764:	438a      	bics	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002768:	2220      	movs	r2, #32
 800276a:	236a      	movs	r3, #106	; 0x6a
 800276c:	54e2      	strb	r2, [r4, r3]
      HAL_UART_RxCpltCallback(huart);
 800276e:	f000 f9f5 	bl	8002b5c <HAL_UART_RxCpltCallback>
 8002772:	e73b      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002774:	226a      	movs	r2, #106	; 0x6a
 8002776:	5ca2      	ldrb	r2, [r4, r2]
 8002778:	2a22      	cmp	r2, #34	; 0x22
 800277a:	d009      	beq.n	8002790 <HAL_UART_IRQHandler+0x1d4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800277c:	2108      	movs	r1, #8
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	430a      	orrs	r2, r1
 8002782:	619a      	str	r2, [r3, #24]
 8002784:	e75b      	b.n	800263e <HAL_UART_IRQHandler+0x82>
        HAL_UART_ErrorCallback(huart);
 8002786:	0020      	movs	r0, r4
 8002788:	f7ff fed8 	bl	800253c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800278e:	e72d      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002790:	2080      	movs	r0, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 8002792:	323a      	adds	r2, #58	; 0x3a
 8002794:	5aa1      	ldrh	r1, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002796:	68a5      	ldr	r5, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002798:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800279a:	0140      	lsls	r0, r0, #5
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800279c:	b292      	uxth	r2, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800279e:	4285      	cmp	r5, r0
 80027a0:	d03b      	beq.n	800281a <HAL_UART_IRQHandler+0x25e>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80027a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027a4:	400a      	ands	r2, r1
 80027a6:	1c58      	adds	r0, r3, #1
 80027a8:	6560      	str	r0, [r4, #84]	; 0x54
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0U)
 80027ae:	215a      	movs	r1, #90	; 0x5a
 80027b0:	5a62      	ldrh	r2, [r4, r1]
 80027b2:	3a01      	subs	r2, #1
 80027b4:	b292      	uxth	r2, r2
 80027b6:	5262      	strh	r2, [r4, r1]
 80027b8:	2a00      	cmp	r2, #0
 80027ba:	d01d      	beq.n	80027f8 <HAL_UART_IRQHandler+0x23c>
 80027bc:	0018      	movs	r0, r3
 80027be:	e73e      	b.n	800263e <HAL_UART_IRQHandler+0x82>
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027c0:	2140      	movs	r1, #64	; 0x40
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4382      	bics	r2, r0
 80027c6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	e70d      	b.n	80025ec <HAL_UART_IRQHandler+0x30>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d0:	6922      	ldr	r2, [r4, #16]
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	d1b0      	bne.n	8002738 <HAL_UART_IRQHandler+0x17c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80027d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 80027d8:	400b      	ands	r3, r1
 80027da:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2U;
 80027dc:	3202      	adds	r2, #2
 80027de:	6562      	str	r2, [r4, #84]	; 0x54
 80027e0:	e7af      	b.n	8002742 <HAL_UART_IRQHandler+0x186>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e2:	6922      	ldr	r2, [r4, #16]
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d18f      	bne.n	8002708 <HAL_UART_IRQHandler+0x14c>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80027e8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80027ea:	880a      	ldrh	r2, [r1, #0]
        huart->pTxBuffPtr += 2U;
 80027ec:	3102      	adds	r1, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80027ee:	05d2      	lsls	r2, r2, #23
 80027f0:	0dd2      	lsrs	r2, r2, #23
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80027f4:	64e1      	str	r1, [r4, #76]	; 0x4c
 80027f6:	e78c      	b.n	8002712 <HAL_UART_IRQHandler+0x156>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	490c      	ldr	r1, [pc, #48]	; (800282c <HAL_UART_IRQHandler+0x270>)
      HAL_UART_RxCpltCallback(huart);
 80027fc:	0020      	movs	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027fe:	400a      	ands	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	3123      	adds	r1, #35	; 0x23
 8002806:	31ff      	adds	r1, #255	; 0xff
 8002808:	438a      	bics	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800280c:	2220      	movs	r2, #32
 800280e:	236a      	movs	r3, #106	; 0x6a
 8002810:	54e2      	strb	r2, [r4, r3]
      HAL_UART_RxCpltCallback(huart);
 8002812:	f000 f9a3 	bl	8002b5c <HAL_UART_RxCpltCallback>
 8002816:	6820      	ldr	r0, [r4, #0]
 8002818:	e711      	b.n	800263e <HAL_UART_IRQHandler+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800281a:	6920      	ldr	r0, [r4, #16]
 800281c:	2800      	cmp	r0, #0
 800281e:	d1c0      	bne.n	80027a2 <HAL_UART_IRQHandler+0x1e6>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002820:	6d60      	ldr	r0, [r4, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8002822:	400a      	ands	r2, r1
 8002824:	8002      	strh	r2, [r0, #0]
      huart->pRxBuffPtr +=2U;
 8002826:	3002      	adds	r0, #2
 8002828:	6560      	str	r0, [r4, #84]	; 0x54
 800282a:	e7c0      	b.n	80027ae <HAL_UART_IRQHandler+0x1f2>
 800282c:	fffffedf 	.word	0xfffffedf
 8002830:	080025a9 	.word	0x080025a9

08002834 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002834:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002836:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002838:	07da      	lsls	r2, r3, #31
 800283a:	d506      	bpl.n	800284a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800283c:	6801      	ldr	r1, [r0, #0]
 800283e:	4c28      	ldr	r4, [pc, #160]	; (80028e0 <UART_AdvFeatureConfig+0xac>)
 8002840:	684a      	ldr	r2, [r1, #4]
 8002842:	4022      	ands	r2, r4
 8002844:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002846:	4322      	orrs	r2, r4
 8002848:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800284a:	079a      	lsls	r2, r3, #30
 800284c:	d506      	bpl.n	800285c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800284e:	6801      	ldr	r1, [r0, #0]
 8002850:	4c24      	ldr	r4, [pc, #144]	; (80028e4 <UART_AdvFeatureConfig+0xb0>)
 8002852:	684a      	ldr	r2, [r1, #4]
 8002854:	4022      	ands	r2, r4
 8002856:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002858:	4322      	orrs	r2, r4
 800285a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800285c:	075a      	lsls	r2, r3, #29
 800285e:	d506      	bpl.n	800286e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002860:	6801      	ldr	r1, [r0, #0]
 8002862:	4c21      	ldr	r4, [pc, #132]	; (80028e8 <UART_AdvFeatureConfig+0xb4>)
 8002864:	684a      	ldr	r2, [r1, #4]
 8002866:	4022      	ands	r2, r4
 8002868:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800286a:	4322      	orrs	r2, r4
 800286c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800286e:	071a      	lsls	r2, r3, #28
 8002870:	d506      	bpl.n	8002880 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002872:	6801      	ldr	r1, [r0, #0]
 8002874:	4c1d      	ldr	r4, [pc, #116]	; (80028ec <UART_AdvFeatureConfig+0xb8>)
 8002876:	684a      	ldr	r2, [r1, #4]
 8002878:	4022      	ands	r2, r4
 800287a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800287c:	4322      	orrs	r2, r4
 800287e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002880:	06da      	lsls	r2, r3, #27
 8002882:	d506      	bpl.n	8002892 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002884:	6801      	ldr	r1, [r0, #0]
 8002886:	4c1a      	ldr	r4, [pc, #104]	; (80028f0 <UART_AdvFeatureConfig+0xbc>)
 8002888:	688a      	ldr	r2, [r1, #8]
 800288a:	4022      	ands	r2, r4
 800288c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800288e:	4322      	orrs	r2, r4
 8002890:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002892:	069a      	lsls	r2, r3, #26
 8002894:	d506      	bpl.n	80028a4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002896:	6801      	ldr	r1, [r0, #0]
 8002898:	4c16      	ldr	r4, [pc, #88]	; (80028f4 <UART_AdvFeatureConfig+0xc0>)
 800289a:	688a      	ldr	r2, [r1, #8]
 800289c:	4022      	ands	r2, r4
 800289e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80028a0:	4322      	orrs	r2, r4
 80028a2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028a4:	065a      	lsls	r2, r3, #25
 80028a6:	d50a      	bpl.n	80028be <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028a8:	6801      	ldr	r1, [r0, #0]
 80028aa:	4d13      	ldr	r5, [pc, #76]	; (80028f8 <UART_AdvFeatureConfig+0xc4>)
 80028ac:	684a      	ldr	r2, [r1, #4]
 80028ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80028b0:	402a      	ands	r2, r5
 80028b2:	4322      	orrs	r2, r4
 80028b4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	0352      	lsls	r2, r2, #13
 80028ba:	4294      	cmp	r4, r2
 80028bc:	d009      	beq.n	80028d2 <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	d506      	bpl.n	80028d0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028c2:	6802      	ldr	r2, [r0, #0]
 80028c4:	490d      	ldr	r1, [pc, #52]	; (80028fc <UART_AdvFeatureConfig+0xc8>)
 80028c6:	6853      	ldr	r3, [r2, #4]
 80028c8:	400b      	ands	r3, r1
 80028ca:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6053      	str	r3, [r2, #4]
}
 80028d0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028d2:	684a      	ldr	r2, [r1, #4]
 80028d4:	4c0a      	ldr	r4, [pc, #40]	; (8002900 <UART_AdvFeatureConfig+0xcc>)
 80028d6:	4022      	ands	r2, r4
 80028d8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80028da:	4322      	orrs	r2, r4
 80028dc:	604a      	str	r2, [r1, #4]
 80028de:	e7ee      	b.n	80028be <UART_AdvFeatureConfig+0x8a>
 80028e0:	fffdffff 	.word	0xfffdffff
 80028e4:	fffeffff 	.word	0xfffeffff
 80028e8:	fffbffff 	.word	0xfffbffff
 80028ec:	ffff7fff 	.word	0xffff7fff
 80028f0:	ffffefff 	.word	0xffffefff
 80028f4:	ffffdfff 	.word	0xffffdfff
 80028f8:	ffefffff 	.word	0xffefffff
 80028fc:	fff7ffff 	.word	0xfff7ffff
 8002900:	ff9fffff 	.word	0xff9fffff

08002904 <HAL_UART_Init>:
{
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8002908:	d100      	bne.n	800290c <HAL_UART_Init+0x8>
 800290a:	e082      	b.n	8002a12 <HAL_UART_Init+0x10e>
  if(huart->gState == HAL_UART_STATE_RESET)
 800290c:	2369      	movs	r3, #105	; 0x69
 800290e:	5cc3      	ldrb	r3, [r0, r3]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d078      	beq.n	8002a08 <HAL_UART_Init+0x104>
  huart->gState = HAL_UART_STATE_BUSY;
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	2369      	movs	r3, #105	; 0x69
  __HAL_UART_DISABLE(huart);
 800291a:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800291c:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800291e:	682b      	ldr	r3, [r5, #0]
 8002920:	3a23      	subs	r2, #35	; 0x23
 8002922:	4393      	bics	r3, r2
 8002924:	602b      	str	r3, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002926:	6920      	ldr	r0, [r4, #16]
 8002928:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800292a:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800292c:	4303      	orrs	r3, r0
 800292e:	6960      	ldr	r0, [r4, #20]
 8002930:	69e2      	ldr	r2, [r4, #28]
 8002932:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002934:	484d      	ldr	r0, [pc, #308]	; (8002a6c <HAL_UART_Init+0x168>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002936:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002938:	4001      	ands	r1, r0
 800293a:	430b      	orrs	r3, r1
 800293c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800293e:	686b      	ldr	r3, [r5, #4]
 8002940:	494b      	ldr	r1, [pc, #300]	; (8002a70 <HAL_UART_Init+0x16c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002942:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002944:	400b      	ands	r3, r1
 8002946:	68e1      	ldr	r1, [r4, #12]
 8002948:	430b      	orrs	r3, r1
 800294a:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800294c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800294e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002950:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002952:	4848      	ldr	r0, [pc, #288]	; (8002a74 <HAL_UART_Init+0x170>)
 8002954:	4001      	ands	r1, r0
 8002956:	430b      	orrs	r3, r1
 8002958:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_UART_Init+0x174>)
 800295c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800295e:	2303      	movs	r3, #3
 8002960:	400b      	ands	r3, r1
 8002962:	4946      	ldr	r1, [pc, #280]	; (8002a7c <HAL_UART_Init+0x178>)
 8002964:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	0209      	lsls	r1, r1, #8
 800296a:	428a      	cmp	r2, r1
 800296c:	d02d      	beq.n	80029ca <HAL_UART_Init+0xc6>
    switch (clocksource)
 800296e:	2b02      	cmp	r3, #2
 8002970:	d063      	beq.n	8002a3a <HAL_UART_Init+0x136>
 8002972:	d950      	bls.n	8002a16 <HAL_UART_Init+0x112>
 8002974:	2b04      	cmp	r3, #4
 8002976:	d056      	beq.n	8002a26 <HAL_UART_Init+0x122>
 8002978:	2b08      	cmp	r3, #8
 800297a:	d14a      	bne.n	8002a12 <HAL_UART_Init+0x10e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800297c:	6863      	ldr	r3, [r4, #4]
 800297e:	0858      	lsrs	r0, r3, #1
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	469c      	mov	ip, r3
 8002986:	4460      	add	r0, ip
 8002988:	6861      	ldr	r1, [r4, #4]
 800298a:	f7fd fbc5 	bl	8000118 <__udivsi3>
 800298e:	0400      	lsls	r0, r0, #16
 8002990:	0c00      	lsrs	r0, r0, #16
 8002992:	60e8      	str	r0, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002996:	2b00      	cmp	r3, #0
 8002998:	d132      	bne.n	8002a00 <HAL_UART_Init+0xfc>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	4938      	ldr	r1, [pc, #224]	; (8002a80 <HAL_UART_Init+0x17c>)
 800299e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80029a0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80029a2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80029a4:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80029a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	438a      	bics	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	3907      	subs	r1, #7
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
  huart->gState  = HAL_UART_STATE_READY;
 80029b6:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b8:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 80029ba:	3168      	adds	r1, #104	; 0x68
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->gState  = HAL_UART_STATE_READY;
 80029be:	5462      	strb	r2, [r4, r1]
  huart->RxState = HAL_UART_STATE_READY;
 80029c0:	3101      	adds	r1, #1
 80029c2:	5462      	strb	r2, [r4, r1]
  __HAL_UNLOCK(huart);
 80029c4:	3248      	adds	r2, #72	; 0x48
 80029c6:	54a3      	strb	r3, [r4, r2]
  return (UART_CheckIdleState(huart));
 80029c8:	e024      	b.n	8002a14 <HAL_UART_Init+0x110>
    switch (clocksource)
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d031      	beq.n	8002a32 <HAL_UART_Init+0x12e>
 80029ce:	d948      	bls.n	8002a62 <HAL_UART_Init+0x15e>
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d03a      	beq.n	8002a4a <HAL_UART_Init+0x146>
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d134      	bne.n	8002a42 <HAL_UART_Init+0x13e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029d8:	6863      	ldr	r3, [r4, #4]
 80029da:	0858      	lsrs	r0, r3, #1
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	025b      	lsls	r3, r3, #9
 80029e0:	469c      	mov	ip, r3
 80029e2:	6861      	ldr	r1, [r4, #4]
 80029e4:	4460      	add	r0, ip
 80029e6:	f7fd fb97 	bl	8000118 <__udivsi3>
 80029ea:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 80029ec:	230f      	movs	r3, #15
 80029ee:	0002      	movs	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f0:	0700      	lsls	r0, r0, #28
    brrtemp = usartdiv & 0xFFF0U;
 80029f2:	439a      	bics	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f4:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 80029f6:	4310      	orrs	r0, r2
 80029f8:	60e8      	str	r0, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0cc      	beq.n	800299a <HAL_UART_Init+0x96>
    UART_AdvFeatureConfig(huart);
 8002a00:	0020      	movs	r0, r4
 8002a02:	f7ff ff17 	bl	8002834 <UART_AdvFeatureConfig>
 8002a06:	e7c8      	b.n	800299a <HAL_UART_Init+0x96>
    huart->Lock = HAL_UNLOCKED;
 8002a08:	2268      	movs	r2, #104	; 0x68
 8002a0a:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002a0c:	f000 fbea 	bl	80031e4 <HAL_UART_MspInit>
 8002a10:	e781      	b.n	8002916 <HAL_UART_Init+0x12>
    return HAL_ERROR;
 8002a12:	2001      	movs	r0, #1
}
 8002a14:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1fb      	bne.n	8002a12 <HAL_UART_Init+0x10e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a1a:	f7ff f8f9 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002a1e:	6863      	ldr	r3, [r4, #4]
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	1818      	adds	r0, r3, r0
 8002a24:	e7b0      	b.n	8002988 <HAL_UART_Init+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a26:	f7ff f8b9 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8002a2a:	6863      	ldr	r3, [r4, #4]
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	1818      	adds	r0, r3, r0
 8002a30:	e7aa      	b.n	8002988 <HAL_UART_Init+0x84>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a32:	6863      	ldr	r3, [r4, #4]
 8002a34:	0858      	lsrs	r0, r3, #1
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_UART_Init+0x180>)
 8002a38:	e7d2      	b.n	80029e0 <HAL_UART_Init+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a3a:	6863      	ldr	r3, [r4, #4]
 8002a3c:	0858      	lsrs	r0, r3, #1
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_UART_Init+0x184>)
 8002a40:	e7a0      	b.n	8002984 <HAL_UART_Init+0x80>
    huart->Instance->BRR = brrtemp;
 8002a42:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8002a46:	60eb      	str	r3, [r5, #12]
 8002a48:	e7e4      	b.n	8002a14 <HAL_UART_Init+0x110>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a4a:	f7ff f8a7 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8002a4e:	6863      	ldr	r3, [r4, #4]
 8002a50:	0040      	lsls	r0, r0, #1
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	18c0      	adds	r0, r0, r3
 8002a56:	6861      	ldr	r1, [r4, #4]
 8002a58:	f7fd fb5e 	bl	8000118 <__udivsi3>
 8002a5c:	6825      	ldr	r5, [r4, #0]
 8002a5e:	b280      	uxth	r0, r0
 8002a60:	e7c4      	b.n	80029ec <HAL_UART_Init+0xe8>
    switch (clocksource)
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ed      	bne.n	8002a42 <HAL_UART_Init+0x13e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a66:	f7ff f8d3 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002a6a:	e7f0      	b.n	8002a4e <HAL_UART_Init+0x14a>
 8002a6c:	ffff69f3 	.word	0xffff69f3
 8002a70:	ffffcfff 	.word	0xffffcfff
 8002a74:	fffff4ff 	.word	0xfffff4ff
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	08004080 	.word	0x08004080
 8002a80:	fffff7ff 	.word	0xfffff7ff
 8002a84:	00f42400 	.word	0x00f42400
 8002a88:	007a1200 	.word	0x007a1200

08002a8c <get_current_potentiometer>:

#include "function.h"
#include "variables.h"
#define R 155		// Resistor chosen in H-brigde circuit to transform proportional current to a voltage

void get_current_potentiometer(){
 8002a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8e:	46c6      	mov	lr, r8
	sampledCurrent = ADC_buffer[1];
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <get_current_potentiometer+0x94>)
 8002a92:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <get_current_potentiometer+0x98>)
 8002a94:	681b      	ldr	r3, [r3, #0]
void get_current_potentiometer(){
 8002a96:	b500      	push	{lr}
	sampledCurrent = ADC_buffer[1];
 8002a98:	685f      	ldr	r7, [r3, #4]
	sampledPotentiometer = ADC_buffer[0];
 8002a9a:	4e23      	ldr	r6, [pc, #140]	; (8002b28 <get_current_potentiometer+0x9c>)
	sampledCurrent = ADC_buffer[1];
 8002a9c:	6017      	str	r7, [r2, #0]
	sampledPotentiometer = ADC_buffer[0];
 8002a9e:	6818      	ldr	r0, [r3, #0]

	prevprev_q1 = prev_q1;
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <get_current_potentiometer+0xa0>)
 8002aa2:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <get_current_potentiometer+0xa4>)
 8002aa4:	6819      	ldr	r1, [r3, #0]
	sampledPotentiometer = ADC_buffer[0];
 8002aa6:	6030      	str	r0, [r6, #0]
	prevprev_q1 = prev_q1;
 8002aa8:	6011      	str	r1, [r2, #0]
	prev_q1 = q1;
 8002aaa:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <get_current_potentiometer+0xa8>)
 8002aac:	6815      	ldr	r5, [r2, #0]
 8002aae:	4690      	mov	r8, r2
 8002ab0:	601d      	str	r5, [r3, #0]
	q1_new = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <get_current_potentiometer+0xac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1ac0      	subs	r0, r0, r3
 8002ab8:	f7fd feb4 	bl	8000824 <__aeabi_i2f>
 8002abc:	491f      	ldr	r1, [pc, #124]	; (8002b3c <get_current_potentiometer+0xb0>)
 8002abe:	f7fd fbf5 	bl	80002ac <__aeabi_fmul>
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <get_current_potentiometer+0xb4>)

	if (q1_new - prev_q1 > 0.05 || prev_q1 - q1_new > 0.05){
 8002ac4:	1c29      	adds	r1, r5, #0
	q1_new = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 8002ac6:	6018      	str	r0, [r3, #0]
 8002ac8:	1c04      	adds	r4, r0, #0
	if (q1_new - prev_q1 > 0.05 || prev_q1 - q1_new > 0.05){
 8002aca:	f7fd fd0f 	bl	80004ec <__aeabi_fsub>
 8002ace:	f7fd fff9 	bl	8000ac4 <__aeabi_f2d>
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <get_current_potentiometer+0xb8>)
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <get_current_potentiometer+0xbc>)
 8002ad6:	f7fd fbd5 	bl	8000284 <__aeabi_dcmpgt>
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d10b      	bne.n	8002af6 <get_current_potentiometer+0x6a>
 8002ade:	1c21      	adds	r1, r4, #0
 8002ae0:	1c28      	adds	r0, r5, #0
 8002ae2:	f7fd fd03 	bl	80004ec <__aeabi_fsub>
 8002ae6:	f7fd ffed 	bl	8000ac4 <__aeabi_f2d>
 8002aea:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <get_current_potentiometer+0xb8>)
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <get_current_potentiometer+0xbc>)
 8002aee:	f7fd fbc9 	bl	8000284 <__aeabi_dcmpgt>
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d001      	beq.n	8002afa <get_current_potentiometer+0x6e>
		q1 = q1_new;
 8002af6:	4643      	mov	r3, r8
 8002af8:	601c      	str	r4, [r3, #0]
	}

	torque = (sampledCurrent<<9);
 8002afa:	2200      	movs	r2, #0
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <get_current_potentiometer+0xc0>)
//	q1dot = (prevprev_q1 - prev_q1<<2+3*q1)/(time<<2); // time variable needs to change




	sprintf(send_torque,"%lu", sampledCurrent);
 8002afe:	4c14      	ldr	r4, [pc, #80]	; (8002b50 <get_current_potentiometer+0xc4>)
	torque = (sampledCurrent<<9);
 8002b00:	701a      	strb	r2, [r3, #0]
	sprintf(send_torque,"%lu", sampledCurrent);
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <get_current_potentiometer+0xc8>)
 8002b04:	003a      	movs	r2, r7
 8002b06:	0021      	movs	r1, r4
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	f000 ff0f 	bl	800392c <siprintf>
	sprintf(send_q1,"%lu", sampledPotentiometer);
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <get_current_potentiometer+0xcc>)
 8002b10:	6832      	ldr	r2, [r6, #0]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	0021      	movs	r1, r4
 8002b16:	f000 ff09 	bl	800392c <siprintf>
	// Do conversion equation to get 'real' value



	// store in buffer to be send across UART
}
 8002b1a:	bc04      	pop	{r2}
 8002b1c:	4690      	mov	r8, r2
 8002b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b20:	200000a4 	.word	0x200000a4
 8002b24:	200000e0 	.word	0x200000e0
 8002b28:	200000e4 	.word	0x200000e4
 8002b2c:	200000b4 	.word	0x200000b4
 8002b30:	200000bc 	.word	0x200000bc
 8002b34:	200000c8 	.word	0x200000c8
 8002b38:	20000020 	.word	0x20000020
 8002b3c:	3ac88a48 	.word	0x3ac88a48
 8002b40:	200000cc 	.word	0x200000cc
 8002b44:	9999999a 	.word	0x9999999a
 8002b48:	3fa99999 	.word	0x3fa99999
 8002b4c:	20000114 	.word	0x20000114
 8002b50:	08004084 	.word	0x08004084
 8002b54:	200000f8 	.word	0x200000f8
 8002b58:	200000ec 	.word	0x200000ec

08002b5c <HAL_UART_RxCpltCallback>:
#define KI


// interrupt when byte is received on UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	uart_flag = 1;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4b01      	ldr	r3, [pc, #4]	; (8002b64 <HAL_UART_RxCpltCallback+0x8>)
 8002b60:	701a      	strb	r2, [r3, #0]
}
 8002b62:	4770      	bx	lr
 8002b64:	20000115 	.word	0x20000115

08002b68 <HAL_GPIO_EXTI_Callback>:

//interrupt when encoder is experiencing an rising or falling edge
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	encoder_flag = 1;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4b01      	ldr	r3, [pc, #4]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x8>)
 8002b6c:	701a      	strb	r2, [r3, #0]

}
 8002b6e:	4770      	bx	lr
 8002b70:	200000b2 	.word	0x200000b2

08002b74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance == htim16.Instance){
 8002b74:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002b76:	6803      	ldr	r3, [r0, #0]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00a      	beq.n	8002b94 <HAL_TIM_PeriodElapsedCallback+0x20>
		send_data_flag = 1;
	}
	else if(htim->Instance == htim14.Instance){
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d000      	beq.n	8002b88 <HAL_TIM_PeriodElapsedCallback+0x14>
		adc_flag = 1;
		data_flag = 1;
	}
//	data_flag = 1;
//	adc_flag = 1;
}
 8002b86:	4770      	bx	lr
		adc_flag = 1;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b8c:	7013      	strb	r3, [r2, #0]
		data_flag = 1;
 8002b8e:	4a06      	ldr	r2, [pc, #24]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b90:	7013      	strb	r3, [r2, #0]
}
 8002b92:	e7f8      	b.n	8002b86 <HAL_TIM_PeriodElapsedCallback+0x12>
		send_data_flag = 1;
 8002b94:	2201      	movs	r2, #1
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e7f4      	b.n	8002b86 <HAL_TIM_PeriodElapsedCallback+0x12>
 8002b9c:	200002f0 	.word	0x200002f0
 8002ba0:	20000220 	.word	0x20000220
 8002ba4:	200000a8 	.word	0x200000a8
 8002ba8:	200000b0 	.word	0x200000b0
 8002bac:	2000001c 	.word	0x2000001c

08002bb0 <HAL_TIM_OC_DelayElapsedCallback>:
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4b01      	ldr	r3, [pc, #4]	; (8002bb8 <HAL_TIM_OC_DelayElapsedCallback+0x8>)
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	4770      	bx	lr
 8002bb8:	200000c4 	.word	0x200000c4

08002bbc <HAL_TIM_IC_CaptureCallback>:
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4b01      	ldr	r3, [pc, #4]	; (8002bc4 <HAL_TIM_IC_CaptureCallback+0x8>)
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	4770      	bx	lr
 8002bc4:	200000c4 	.word	0x200000c4

08002bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4b01      	ldr	r3, [pc, #4]	; (8002bd0 <HAL_TIM_PWM_PulseFinishedCallback+0x8>)
 8002bcc:	701a      	strb	r2, [r3, #0]
}
 8002bce:	4770      	bx	lr
 8002bd0:	200000c4 	.word	0x200000c4

08002bd4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
	memset(rx_buffer,0x00, 8);
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_UART_TxCpltCallback+0x24>)
void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 8002bd6:	b510      	push	{r4, lr}
	memset(rx_buffer,0x00, 8);
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	2208      	movs	r2, #8
 8002bdc:	2100      	movs	r1, #0
 8002bde:	f000 fdd4 	bl	800378a <memset>
	rx_buffer_cntr = 0;
 8002be2:	2200      	movs	r2, #0
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_UART_TxCpltCallback+0x28>)
	memset(data_buffer,0x00,40);
 8002be6:	2100      	movs	r1, #0
	rx_buffer_cntr = 0;
 8002be8:	701a      	strb	r2, [r3, #0]
	memset(data_buffer,0x00,40);
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_UART_TxCpltCallback+0x2c>)
 8002bec:	3228      	adds	r2, #40	; 0x28
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	f000 fdcb 	bl	800378a <memset>
}
 8002bf4:	bd10      	pop	{r4, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	200000d8 	.word	0x200000d8
 8002bfc:	200000dc 	.word	0x200000dc
 8002c00:	200000ac 	.word	0x200000ac

08002c04 <read_motor_position>:


void read_motor_position(){

	prevprev_q2 = prev_q2;
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <read_motor_position+0x44>)
void read_motor_position(){
 8002c06:	b570      	push	{r4, r5, r6, lr}
	prevprev_q2 = prev_q2;
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <read_motor_position+0x48>)
	prev_q2 = q2;
 8002c0c:	4d10      	ldr	r5, [pc, #64]	; (8002c50 <read_motor_position+0x4c>)
	prevprev_q2 = prev_q2;
 8002c0e:	6011      	str	r1, [r2, #0]
	prev_q2 = q2;
 8002c10:	682a      	ldr	r2, [r5, #0]

	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8002c12:	2120      	movs	r1, #32
 8002c14:	480f      	ldr	r0, [pc, #60]	; (8002c54 <read_motor_position+0x50>)
	prev_q2 = q2;
 8002c16:	601a      	str	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8002c18:	f7fe fc9e 	bl	8001558 <HAL_GPIO_ReadPin>
		q2_steps -= 1;
 8002c1c:	4e0e      	ldr	r6, [pc, #56]	; (8002c58 <read_motor_position+0x54>)
 8002c1e:	6833      	ldr	r3, [r6, #0]
 8002c20:	1e5c      	subs	r4, r3, #1
	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8002c22:	2801      	cmp	r0, #1
 8002c24:	d000      	beq.n	8002c28 <read_motor_position+0x24>
		q2 = q2_steps*dir_increment_size;
	}
	else{ // actuated pendulum is turning anti-clockwise
		q2_steps += 1;
 8002c26:	1c5c      	adds	r4, r3, #1
		q2 = q2_steps*dir_increment_size;
 8002c28:	0020      	movs	r0, r4
 8002c2a:	f7fd fdfb 	bl	8000824 <__aeabi_i2f>
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <read_motor_position+0x58>)
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	f7fd fb3b 	bl	80002ac <__aeabi_fmul>
	}
	sprintf(send_q2,"%d", q2_steps);
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <read_motor_position+0x5c>)
 8002c38:	6028      	str	r0, [r5, #0]
 8002c3a:	0022      	movs	r2, r4
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	4909      	ldr	r1, [pc, #36]	; (8002c64 <read_motor_position+0x60>)
 8002c40:	6034      	str	r4, [r6, #0]
 8002c42:	f000 fe73 	bl	800392c <siprintf>

	//three point backward difference
//	q2dot = (prevprev_q2 - prev_q2<<2+3*q2)/(2*time); // time variable needs to change

}
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	200000b8 	.word	0x200000b8
 8002c4c:	200000c0 	.word	0x200000c0
 8002c50:	200000d0 	.word	0x200000d0
 8002c54:	48000400 	.word	0x48000400
 8002c58:	200000d4 	.word	0x200000d4
 8002c5c:	2000000c 	.word	0x2000000c
 8002c60:	200000f0 	.word	0x200000f0
 8002c64:	08004088 	.word	0x08004088

08002c68 <startPeripherals>:
extern ADC_HandleTypeDef hadc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim16;

void startPeripherals(){
 8002c68:	b510      	push	{r4, lr}

	HAL_ADCEx_Calibration_Start(&hadc);					// Calibrate the ADC
 8002c6a:	4c12      	ldr	r4, [pc, #72]	; (8002cb4 <startPeripherals+0x4c>)
 8002c6c:	0020      	movs	r0, r4
 8002c6e:	f7fe f9e5 	bl	800103c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, ADC_buffer, 2);			// Start to capture the ADC with DMA
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <startPeripherals+0x50>)
 8002c74:	2202      	movs	r2, #2
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	0020      	movs	r0, r4
 8002c7a:	f7fe f8bf 	bl	8000dfc <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim14);						// Timer responsible for time-keeping and triggers system state to be send
 8002c7e:	480f      	ldr	r0, [pc, #60]	; (8002cbc <startPeripherals+0x54>)
 8002c80:	f7ff f8c4 	bl	8001e0c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);						// Timer responsible for time-keeping and triggers system state to be send
 8002c84:	480e      	ldr	r0, [pc, #56]	; (8002cc0 <startPeripherals+0x58>)
 8002c86:	f7ff f8c1 	bl	8001e0c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);			// Start the Timer Module with PWM
 8002c8a:	4c0e      	ldr	r4, [pc, #56]	; (8002cc4 <startPeripherals+0x5c>)
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	0020      	movs	r0, r4
 8002c90:	f7ff f922 	bl	8001ed8 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8002c94:	2200      	movs	r2, #0
 8002c96:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8002c98:	490b      	ldr	r1, [pc, #44]	; (8002cc8 <startPeripherals+0x60>)
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8002c9c:	480b      	ldr	r0, [pc, #44]	; (8002ccc <startPeripherals+0x64>)
 8002c9e:	3201      	adds	r2, #1
 8002ca0:	f7ff fb82 	bl	80023a8 <HAL_UART_Receive_IT>


//	HAL_Delay(500);										// Delay for peripherals to settle
	HAL_GPIO_WritePin(DEBUG_LED1_GPIO_Port,DEBUG_LED1_Pin,1); // LED ON indicates system is ready
 8002ca4:	2090      	movs	r0, #144	; 0x90
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2108      	movs	r1, #8
 8002caa:	05c0      	lsls	r0, r0, #23
 8002cac:	f7fe fc5a 	bl	8001564 <HAL_GPIO_WritePin>

	//startval_sampledPotentiometer = ADC_buffer[1];

}
 8002cb0:	bd10      	pop	{r4, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	200002a4 	.word	0x200002a4
 8002cb8:	200000a4 	.word	0x200000a4
 8002cbc:	20000220 	.word	0x20000220
 8002cc0:	200002f0 	.word	0x200002f0
 8002cc4:	2000012c 	.word	0x2000012c
 8002cc8:	200000dd 	.word	0x200000dd
 8002ccc:	200001b0 	.word	0x200001b0

08002cd0 <init_variables>:


void init_variables(){
 8002cd0:	b570      	push	{r4, r5, r6, lr}

	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	2008      	movs	r0, #8
 8002cd6:	f000 fd17 	bl	8003708 <calloc>
 8002cda:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <init_variables+0x98>)
	memset(rx_buffer,0x00,8);

	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8002cdc:	2101      	movs	r1, #1
	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 8002cde:	6018      	str	r0, [r3, #0]
	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8002ce0:	2008      	movs	r0, #8
 8002ce2:	f000 fd11 	bl	8003708 <calloc>
 8002ce6:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <init_variables+0x9c>)
	memset(verification,0x00,8);

	// might to be larger to account for decimals
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 8002ce8:	2101      	movs	r1, #1
	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8002cea:	6018      	str	r0, [r3, #0]
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 8002cec:	2048      	movs	r0, #72	; 0x48
 8002cee:	f000 fd0b 	bl	8003708 <calloc>
 8002cf2:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <init_variables+0xa0>)
 8002cf4:	0004      	movs	r4, r0
 8002cf6:	6018      	str	r0, [r3, #0]
	memset(data_buffer,0x00,72);

	// forming dat structure to be send
	memcpy(data_buffer, dollar, strlen((char*)dollar));
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <init_variables+0xa4>)
 8002cfa:	681d      	ldr	r5, [r3, #0]
 8002cfc:	0028      	movs	r0, r5
 8002cfe:	f7fd fa03 	bl	8000108 <strlen>
 8002d02:	0029      	movs	r1, r5
 8002d04:	0002      	movs	r2, r0
 8002d06:	0020      	movs	r0, r4
 8002d08:	f000 fd36 	bl	8003778 <memcpy>


	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8002d0c:	2008      	movs	r0, #8
 8002d0e:	f000 fd29 	bl	8003764 <malloc>
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <init_variables+0xa8>)
	memset(ADC_buffer,0x00,2);

	//atan_vals = (float*)malloc(100*sizeof(double));
	//memset(atan_vals,0x00,100);

	scratchpad = (char*)malloc(5*sizeof(char));
 8002d14:	2101      	movs	r1, #1
	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8002d16:	6018      	str	r0, [r3, #0]
	memset(ADC_buffer,0x00,2);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	8003      	strh	r3, [r0, #0]
	scratchpad = (char*)malloc(5*sizeof(char));
 8002d1c:	2005      	movs	r0, #5
 8002d1e:	f000 fcf3 	bl	8003708 <calloc>
 8002d22:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <init_variables+0xac>)
	memset(scratchpad,0x00,5);

	send_q1 = (char*)malloc(10*sizeof(char));
 8002d24:	2101      	movs	r1, #1
	scratchpad = (char*)malloc(5*sizeof(char));
 8002d26:	6018      	str	r0, [r3, #0]
	send_q1 = (char*)malloc(10*sizeof(char));
 8002d28:	200a      	movs	r0, #10
 8002d2a:	f000 fced 	bl	8003708 <calloc>
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <init_variables+0xb0>)
	memset(send_q1,0x00,10);
	send_q2 = (char*)malloc(32*sizeof(char));
 8002d30:	2101      	movs	r1, #1
	send_q1 = (char*)malloc(10*sizeof(char));
 8002d32:	6018      	str	r0, [r3, #0]
	send_q2 = (char*)malloc(32*sizeof(char));
 8002d34:	2020      	movs	r0, #32
 8002d36:	f000 fce7 	bl	8003708 <calloc>
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <init_variables+0xb4>)
 8002d3c:	0004      	movs	r4, r0
 8002d3e:	6018      	str	r0, [r3, #0]
	memset(send_q2,0x00,32);
	send_torque = (char*)malloc(4*sizeof(char));
 8002d40:	2101      	movs	r1, #1
 8002d42:	2004      	movs	r0, #4
 8002d44:	f000 fce0 	bl	8003708 <calloc>
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <init_variables+0xb8>)
	memset(send_torque,0x00,4);
	send_time = (char*)malloc(4*sizeof(char));
 8002d4a:	2101      	movs	r1, #1
	send_torque = (char*)malloc(4*sizeof(char));
 8002d4c:	6018      	str	r0, [r3, #0]
	send_time = (char*)malloc(4*sizeof(char));
 8002d4e:	2004      	movs	r0, #4
 8002d50:	f000 fcda 	bl	8003708 <calloc>
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <init_variables+0xbc>)
	memset(send_time,0x00,4);


	sprintf(send_q2,"%d", q2_steps);
 8002d56:	490e      	ldr	r1, [pc, #56]	; (8002d90 <init_variables+0xc0>)
	send_time = (char*)malloc(4*sizeof(char));
 8002d58:	6018      	str	r0, [r3, #0]
	sprintf(send_q2,"%d", q2_steps);
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <init_variables+0xc4>)
 8002d5c:	0020      	movs	r0, r4
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f000 fde4 	bl	800392c <siprintf>

	// temporary, this should be done where the variables are measured

}
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	200000d8 	.word	0x200000d8
 8002d6c:	20000118 	.word	0x20000118
 8002d70:	200000ac 	.word	0x200000ac
 8002d74:	20000010 	.word	0x20000010
 8002d78:	200000a4 	.word	0x200000a4
 8002d7c:	200000e8 	.word	0x200000e8
 8002d80:	200000ec 	.word	0x200000ec
 8002d84:	200000f0 	.word	0x200000f0
 8002d88:	200000f8 	.word	0x200000f8
 8002d8c:	200000f4 	.word	0x200000f4
 8002d90:	08004088 	.word	0x08004088
 8002d94:	200000d4 	.word	0x200000d4

08002d98 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002d98:	2312      	movs	r3, #18
{
 8002d9a:	b530      	push	{r4, r5, lr}
 8002d9c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002d9e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002da0:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002da2:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002da4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002da6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002da8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002daa:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dac:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002dae:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002db0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002db2:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002db4:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002db6:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002db8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002dba:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002dbc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dbe:	f7fe fbe3 	bl	8001588 <HAL_RCC_OscConfig>
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d000      	beq.n	8002dc8 <SystemClock_Config+0x30>
 8002dc6:	e7fe      	b.n	8002dc6 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc8:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dca:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dcc:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dd2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dd4:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dd6:	f7fe fe0f 	bl	80019f8 <HAL_RCC_ClockConfig>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d000      	beq.n	8002de0 <SystemClock_Config+0x48>
 8002dde:	e7fe      	b.n	8002dde <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002de0:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002de2:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002de4:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002de6:	f7fe ff23 	bl	8001c30 <HAL_RCCEx_PeriphCLKConfig>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d000      	beq.n	8002df0 <SystemClock_Config+0x58>
 8002dee:	e7fe      	b.n	8002dee <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002df0:	f7fe ff08 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8002df4:	21fa      	movs	r1, #250	; 0xfa
 8002df6:	0089      	lsls	r1, r1, #2
 8002df8:	f7fd f98e 	bl	8000118 <__udivsi3>
 8002dfc:	f7fe f9b2 	bl	8001164 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e00:	2004      	movs	r0, #4
 8002e02:	f7fe f9cb 	bl	800119c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e06:	2001      	movs	r0, #1
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4240      	negs	r0, r0
 8002e0e:	f7fe f96b 	bl	80010e8 <HAL_NVIC_SetPriority>
}
 8002e12:	b015      	add	sp, #84	; 0x54
 8002e14:	bd30      	pop	{r4, r5, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)

08002e18 <main>:
{
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8002e1c:	f7fd fed4 	bl	8000bc8 <HAL_Init>
  SystemClock_Config();
 8002e20:	f7ff ffba 	bl	8002d98 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	4c75      	ldr	r4, [pc, #468]	; (8002ffc <main+0x1e4>)
 8002e28:	0289      	lsls	r1, r1, #10
 8002e2a:	6962      	ldr	r2, [r4, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002e2c:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	6162      	str	r2, [r4, #20]
 8002e32:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002e34:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e38:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	6962      	ldr	r2, [r4, #20]
 8002e40:	02c9      	lsls	r1, r1, #11
 8002e42:	430a      	orrs	r2, r1
 8002e44:	6162      	str	r2, [r4, #20]
 8002e46:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002e48:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	400b      	ands	r3, r1
 8002e4c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002e4e:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e50:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002e52:	f7fe fb87 	bl	8001564 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : DEBUG_LED1_Pin DEBUG_LED2_Pin MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 8002e5c:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	a905      	add	r1, sp, #20
 8002e60:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 8002e62:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e64:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e68:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f7fe fa91 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Pin */
  GPIO_InitStruct.Pin = ENCODER_Pin;
 8002e6e:	2310      	movs	r3, #16
 8002e70:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e72:	4b63      	ldr	r3, [pc, #396]	; (8003000 <main+0x1e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8002e74:	a905      	add	r1, sp, #20
 8002e76:	4863      	ldr	r0, [pc, #396]	; (8003004 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e78:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8002e7c:	f7fe fa88 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8002e80:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8002e82:	a905      	add	r1, sp, #20
 8002e84:	485f      	ldr	r0, [pc, #380]	; (8003004 <main+0x1ec>)
  GPIO_InitStruct.Pin = DIR_Pin;
 8002e86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e88:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	f7fe fa80 	bl	8001390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2100      	movs	r1, #0
 8002e94:	2007      	movs	r0, #7
 8002e96:	f7fe f927 	bl	80010e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e9a:	2007      	movs	r0, #7
 8002e9c:	f7fe f958 	bl	8001150 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ea0:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002ea2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ea4:	4333      	orrs	r3, r6
 8002ea6:	6163      	str	r3, [r4, #20]
 8002ea8:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002eaa:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eac:	4033      	ands	r3, r6
 8002eae:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002eb0:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eb2:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002eb4:	f7fe f918 	bl	80010e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002eb8:	2009      	movs	r0, #9
 8002eba:	f7fe f949 	bl	8001150 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	200a      	movs	r0, #10
 8002ec4:	f7fe f910 	bl	80010e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002ec8:	200a      	movs	r0, #10
 8002eca:	f7fe f941 	bl	8001150 <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 8002ece:	4c4e      	ldr	r4, [pc, #312]	; (8003008 <main+0x1f0>)
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	; (800300c <main+0x1f4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ed2:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8002ed4:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002eda:	23c2      	movs	r3, #194	; 0xc2
 8002edc:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ede:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002ee0:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ee2:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002ee4:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002ee6:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002ee8:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002eea:	6226      	str	r6, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002eec:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002eee:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ef0:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002ef2:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ef4:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ef6:	f7fd fed9 	bl	8000cac <HAL_ADC_Init>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d000      	beq.n	8002f00 <main+0xe8>
 8002efe:	e7fe      	b.n	8002efe <main+0xe6>
  sConfig.Channel = ADC_CHANNEL_8;
 8002f00:	2308      	movs	r3, #8
 8002f02:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	015b      	lsls	r3, r3, #5
 8002f08:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002f0a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f0c:	a905      	add	r1, sp, #20
 8002f0e:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002f10:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f12:	f7fe f80f 	bl	8000f34 <HAL_ADC_ConfigChannel>
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d000      	beq.n	8002f1c <main+0x104>
 8002f1a:	e7fe      	b.n	8002f1a <main+0x102>
  sConfig.Channel = ADC_CHANNEL_9;
 8002f1c:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f1e:	a905      	add	r1, sp, #20
 8002f20:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8002f22:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f24:	f7fe f806 	bl	8000f34 <HAL_ADC_ConfigChannel>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d000      	beq.n	8002f2e <main+0x116>
 8002f2c:	e7fe      	b.n	8002f2c <main+0x114>
  huart1.Instance = USART1;
 8002f2e:	4b38      	ldr	r3, [pc, #224]	; (8003010 <main+0x1f8>)
 8002f30:	4a38      	ldr	r2, [pc, #224]	; (8003014 <main+0x1fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f32:	6098      	str	r0, [r3, #8]
  huart1.Instance = USART1;
 8002f34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8002f36:	22e1      	movs	r2, #225	; 0xe1
 8002f38:	0292      	lsls	r2, r2, #10
 8002f3a:	605a      	str	r2, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f3e:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f40:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f44:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f46:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f48:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f4a:	0018      	movs	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f4e:	f7ff fcd9 	bl	8002904 <HAL_UART_Init>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d000      	beq.n	8002f58 <main+0x140>
 8002f56:	e7fe      	b.n	8002f56 <main+0x13e>
  htim3.Instance = TIM3;
 8002f58:	4c2f      	ldr	r4, [pc, #188]	; (8003018 <main+0x200>)
 8002f5a:	4b30      	ldr	r3, [pc, #192]	; (800301c <main+0x204>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5c:	60a0      	str	r0, [r4, #8]
  htim3.Instance = TIM3;
 8002f5e:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48;
 8002f60:	2330      	movs	r3, #48	; 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f62:	6120      	str	r0, [r4, #16]
  htim3.Init.Prescaler = 48;
 8002f64:	6063      	str	r3, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f66:	61a0      	str	r0, [r4, #24]
  htim3.Init.Period = 99;
 8002f68:	3333      	adds	r3, #51	; 0x33
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f6a:	0020      	movs	r0, r4
  htim3.Init.Period = 99;
 8002f6c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f6e:	f7fe ff57 	bl	8001e20 <HAL_TIM_PWM_Init>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d000      	beq.n	8002f78 <main+0x160>
 8002f76:	e7fe      	b.n	8002f76 <main+0x15e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f78:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7a:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f7c:	a903      	add	r1, sp, #12
 8002f7e:	0020      	movs	r0, r4
 8002f80:	f7ff f9bc 	bl	80022fc <HAL_TIMEx_MasterConfigSynchronization>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	d000      	beq.n	8002f8a <main+0x172>
 8002f88:	e7fe      	b.n	8002f88 <main+0x170>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f8a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002f8c:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f8e:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f90:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f92:	2204      	movs	r2, #4
 8002f94:	a905      	add	r1, sp, #20
 8002f96:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f98:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f9a:	f7fe ffdb 	bl	8001f54 <HAL_TIM_PWM_ConfigChannel>
 8002f9e:	1e05      	subs	r5, r0, #0
 8002fa0:	d000      	beq.n	8002fa4 <main+0x18c>
 8002fa2:	e7fe      	b.n	8002fa2 <main+0x18a>
  HAL_TIM_MspPostInit(&htim3);
 8002fa4:	0020      	movs	r0, r4
 8002fa6:	f000 f903 	bl	80031b0 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8002faa:	481d      	ldr	r0, [pc, #116]	; (8003020 <main+0x208>)
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <main+0x20c>)
  htim14.Init.Period = 2000;
 8002fae:	24fa      	movs	r4, #250	; 0xfa
  htim14.Instance = TIM14;
 8002fb0:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 192;
 8002fb2:	23c0      	movs	r3, #192	; 0xc0
  htim14.Init.Period = 2000;
 8002fb4:	00e4      	lsls	r4, r4, #3
  htim14.Init.Prescaler = 192;
 8002fb6:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb8:	6085      	str	r5, [r0, #8]
  htim14.Init.Period = 2000;
 8002fba:	60c4      	str	r4, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbc:	6105      	str	r5, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbe:	6185      	str	r5, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002fc0:	f7fe fec8 	bl	8001d54 <HAL_TIM_Base_Init>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d000      	beq.n	8002fca <main+0x1b2>
 8002fc8:	e7fe      	b.n	8002fc8 <main+0x1b0>
  htim16.Instance = TIM16;
 8002fca:	4b17      	ldr	r3, [pc, #92]	; (8003028 <main+0x210>)
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <main+0x214>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fce:	6098      	str	r0, [r3, #8]
  htim16.Instance = TIM16;
 8002fd0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 384;
 8002fd2:	22c0      	movs	r2, #192	; 0xc0
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd4:	6118      	str	r0, [r3, #16]
  htim16.Init.Prescaler = 384;
 8002fd6:	0052      	lsls	r2, r2, #1
  htim16.Init.RepetitionCounter = 0;
 8002fd8:	6158      	str	r0, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fda:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002fdc:	0018      	movs	r0, r3
  htim16.Init.Prescaler = 384;
 8002fde:	605a      	str	r2, [r3, #4]
  htim16.Init.Period = 2000;
 8002fe0:	60dc      	str	r4, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002fe2:	f7fe feb7 	bl	8001d54 <HAL_TIM_Base_Init>
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d000      	beq.n	8002fec <main+0x1d4>
 8002fea:	e7fe      	b.n	8002fea <main+0x1d2>
  init_variables();
 8002fec:	f7ff fe70 	bl	8002cd0 <init_variables>
  startPeripherals();
 8002ff0:	f7ff fe3a 	bl	8002c68 <startPeripherals>
	  user_main();
 8002ff4:	f000 faf2 	bl	80035dc <user_main>
 8002ff8:	e7fc      	b.n	8002ff4 <main+0x1dc>
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	40021000 	.word	0x40021000
 8003000:	10310000 	.word	0x10310000
 8003004:	48000400 	.word	0x48000400
 8003008:	200002a4 	.word	0x200002a4
 800300c:	40012400 	.word	0x40012400
 8003010:	200001b0 	.word	0x200001b0
 8003014:	40013800 	.word	0x40013800
 8003018:	2000012c 	.word	0x2000012c
 800301c:	40000400 	.word	0x40000400
 8003020:	20000220 	.word	0x20000220
 8003024:	40002000 	.word	0x40002000
 8003028:	200002f0 	.word	0x200002f0
 800302c:	40014400 	.word	0x40014400

08003030 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003030:	e7fe      	b.n	8003030 <_Error_Handler>
 8003032:	46c0      	nop			; (mov r8, r8)

08003034 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003034:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003036:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003038:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <HAL_MspInit+0x40>)
{
 800303a:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303c:	6991      	ldr	r1, [r2, #24]
{
 800303e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003040:	4319      	orrs	r1, r3
 8003042:	6191      	str	r1, [r2, #24]
 8003044:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003046:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003048:	4013      	ands	r3, r2
 800304a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003050:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003052:	f7fe f849 	bl	80010e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003056:	2002      	movs	r0, #2
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	4240      	negs	r0, r0
 800305e:	f7fe f843 	bl	80010e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003062:	2001      	movs	r0, #1
 8003064:	2200      	movs	r2, #0
 8003066:	2100      	movs	r1, #0
 8003068:	4240      	negs	r0, r0
 800306a:	f7fe f83d 	bl	80010e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800306e:	b003      	add	sp, #12
 8003070:	bd00      	pop	{pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800307a:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <HAL_ADC_MspInit+0x74>)
 800307c:	6802      	ldr	r2, [r0, #0]
{
 800307e:	b087      	sub	sp, #28
 8003080:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003086:	b007      	add	sp, #28
 8003088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800308a:	2680      	movs	r6, #128	; 0x80
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <HAL_ADC_MspInit+0x78>)
 800308e:	00b6      	lsls	r6, r6, #2
 8003090:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2700      	movs	r7, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003094:	4332      	orrs	r2, r6
 8003096:	619a      	str	r2, [r3, #24]
 8003098:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309a:	4816      	ldr	r0, [pc, #88]	; (80030f4 <HAL_ADC_MspInit+0x7c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800309c:	4033      	ands	r3, r6
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 80030a2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 80030a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030aa:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ac:	f7fe f970 	bl	8001390 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80030b0:	4d11      	ldr	r5, [pc, #68]	; (80030f8 <HAL_ADC_MspInit+0x80>)
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_ADC_MspInit+0x84>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80030b4:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 80030b6:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80030c2:	2320      	movs	r3, #32
 80030c4:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ca:	606f      	str	r7, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80030cc:	60af      	str	r7, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030ce:	612e      	str	r6, [r5, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80030d0:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80030d2:	f7fe f877 	bl	80011c4 <HAL_DMA_Init>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_ADC_MspInit+0x68>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80030da:	63e5      	str	r5, [r4, #60]	; 0x3c
 80030dc:	626c      	str	r4, [r5, #36]	; 0x24
}
 80030de:	e7d2      	b.n	8003086 <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 80030e0:	216b      	movs	r1, #107	; 0x6b
 80030e2:	4807      	ldr	r0, [pc, #28]	; (8003100 <HAL_ADC_MspInit+0x88>)
 80030e4:	f7ff ffa4 	bl	8003030 <_Error_Handler>
 80030e8:	e7f7      	b.n	80030da <HAL_ADC_MspInit+0x62>
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	40012400 	.word	0x40012400
 80030f0:	40021000 	.word	0x40021000
 80030f4:	48000400 	.word	0x48000400
 80030f8:	20000260 	.word	0x20000260
 80030fc:	40020008 	.word	0x40020008
 8003100:	0800408c 	.word	0x0800408c

08003104 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003104:	b500      	push	{lr}

  if(htim_pwm->Instance==TIM3)
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_TIM_PWM_MspInit+0x34>)
 8003108:	6802      	ldr	r2, [r0, #0]
{
 800310a:	b083      	sub	sp, #12
  if(htim_pwm->Instance==TIM3)
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_TIM_PWM_MspInit+0x10>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003110:	b003      	add	sp, #12
 8003112:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003114:	2302      	movs	r3, #2
 8003116:	4a09      	ldr	r2, [pc, #36]	; (800313c <HAL_TIM_PWM_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003118:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 800311a:	69d1      	ldr	r1, [r2, #28]
 800311c:	4319      	orrs	r1, r3
 800311e:	61d1      	str	r1, [r2, #28]
 8003120:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003122:	2101      	movs	r1, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003124:	4013      	ands	r3, r2
 8003126:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003128:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800312a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800312c:	f7fd ffdc 	bl	80010e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003130:	2010      	movs	r0, #16
 8003132:	f7fe f80d 	bl	8001150 <HAL_NVIC_EnableIRQ>
}
 8003136:	e7eb      	b.n	8003110 <HAL_TIM_PWM_MspInit+0xc>
 8003138:	40000400 	.word	0x40000400
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003140:	b500      	push	{lr}

  if(htim_base->Instance==TIM14)
 8003142:	6803      	ldr	r3, [r0, #0]
 8003144:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_TIM_Base_MspInit+0x64>)
{
 8003146:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 8003148:	4293      	cmp	r3, r2
 800314a:	d017      	beq.n	800317c <HAL_TIM_Base_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <HAL_TIM_Base_MspInit+0x68>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d001      	beq.n	8003156 <HAL_TIM_Base_MspInit+0x16>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003152:	b003      	add	sp, #12
 8003154:	bd00      	pop	{pc}
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003156:	2080      	movs	r0, #128	; 0x80
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_TIM_Base_MspInit+0x6c>)
 800315a:	0280      	lsls	r0, r0, #10
 800315c:	6991      	ldr	r1, [r2, #24]
 800315e:	4301      	orrs	r1, r0
 8003160:	6191      	str	r1, [r2, #24]
 8003162:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003164:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003166:	4003      	ands	r3, r0
 8003168:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 800316e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003170:	f7fd ffba 	bl	80010e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003174:	2015      	movs	r0, #21
 8003176:	f7fd ffeb 	bl	8001150 <HAL_NVIC_EnableIRQ>
}
 800317a:	e7ea      	b.n	8003152 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800317c:	2080      	movs	r0, #128	; 0x80
 800317e:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <HAL_TIM_Base_MspInit+0x6c>)
 8003180:	0040      	lsls	r0, r0, #1
 8003182:	69d1      	ldr	r1, [r2, #28]
 8003184:	4301      	orrs	r1, r0
 8003186:	61d1      	str	r1, [r2, #28]
 8003188:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 800318a:	2101      	movs	r1, #1
    __HAL_RCC_TIM14_CLK_ENABLE();
 800318c:	4003      	ands	r3, r0
 800318e:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8003190:	2200      	movs	r2, #0
 8003192:	38ed      	subs	r0, #237	; 0xed
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003194:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8003196:	f7fd ffa7 	bl	80010e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800319a:	2013      	movs	r0, #19
 800319c:	f7fd ffd8 	bl	8001150 <HAL_NVIC_EnableIRQ>
 80031a0:	e7d7      	b.n	8003152 <HAL_TIM_Base_MspInit+0x12>
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	40002000 	.word	0x40002000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40021000 	.word	0x40021000

080031b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031b0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_TIM_MspPostInit+0x30>)
 80031b4:	6802      	ldr	r2, [r0, #0]
{
 80031b6:	b087      	sub	sp, #28
  if(htim->Instance==TIM3)
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031bc:	b007      	add	sp, #28
 80031be:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = PWM_SIGNAL_Pin;
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	3b7e      	subs	r3, #126	; 0x7e
 80031c6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80031c8:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80031cc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80031d2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80031d4:	3301      	adds	r3, #1
 80031d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f7fe f8da 	bl	8001390 <HAL_GPIO_Init>
}
 80031dc:	e7ee      	b.n	80031bc <HAL_TIM_MspPostInit+0xc>
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	40000400 	.word	0x40000400

080031e4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031e4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_UART_MspInit+0x90>)
 80031e8:	6802      	ldr	r2, [r0, #0]
{
 80031ea:	b086      	sub	sp, #24
 80031ec:	0004      	movs	r4, r0
  if(huart->Instance==USART1)
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_UART_MspInit+0x12>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031f2:	b006      	add	sp, #24
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80031f6:	2080      	movs	r0, #128	; 0x80
 80031f8:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_UART_MspInit+0x94>)
 80031fa:	01c0      	lsls	r0, r0, #7
 80031fc:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003200:	4301      	orrs	r1, r0
 8003202:	6191      	str	r1, [r2, #24]
 8003204:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003206:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003208:	4003      	ands	r3, r0
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800320e:	23c0      	movs	r3, #192	; 0xc0
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800321a:	3301      	adds	r3, #1
 800321c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003220:	3b02      	subs	r3, #2
 8003222:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	f7fe f8b3 	bl	8001390 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800322a:	4d14      	ldr	r5, [pc, #80]	; (800327c <HAL_UART_MspInit+0x98>)
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_UART_MspInit+0x9c>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800322e:	0028      	movs	r0, r5
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003230:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003232:	2310      	movs	r3, #16
 8003234:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003236:	3370      	adds	r3, #112	; 0x70
 8003238:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800323e:	60ae      	str	r6, [r5, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003240:	612e      	str	r6, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003242:	616e      	str	r6, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003244:	61ae      	str	r6, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003246:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003248:	f7fd ffbc 	bl	80011c4 <HAL_DMA_Init>
 800324c:	2800      	cmp	r0, #0
 800324e:	d10a      	bne.n	8003266 <HAL_UART_MspInit+0x82>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003250:	6625      	str	r5, [r4, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003258:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800325a:	f7fd ff45 	bl	80010e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800325e:	201b      	movs	r0, #27
 8003260:	f7fd ff76 	bl	8001150 <HAL_NVIC_EnableIRQ>
}
 8003264:	e7c5      	b.n	80031f2 <HAL_UART_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8003266:	213c      	movs	r1, #60	; 0x3c
 8003268:	4806      	ldr	r0, [pc, #24]	; (8003284 <HAL_UART_MspInit+0xa0>)
 800326a:	31ff      	adds	r1, #255	; 0xff
 800326c:	f7ff fee0 	bl	8003030 <_Error_Handler>
 8003270:	e7ee      	b.n	8003250 <HAL_UART_MspInit+0x6c>
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	40013800 	.word	0x40013800
 8003278:	40021000 	.word	0x40021000
 800327c:	2000016c 	.word	0x2000016c
 8003280:	4002001c 	.word	0x4002001c
 8003284:	0800408c 	.word	0x0800408c

08003288 <NMI_Handler>:
 8003288:	4770      	bx	lr
 800328a:	46c0      	nop			; (mov r8, r8)

0800328c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800328c:	e7fe      	b.n	800328c <HardFault_Handler>
 800328e:	46c0      	nop			; (mov r8, r8)

08003290 <SVC_Handler>:
 8003290:	4770      	bx	lr
 8003292:	46c0      	nop			; (mov r8, r8)

08003294 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003294:	4770      	bx	lr
 8003296:	46c0      	nop			; (mov r8, r8)

08003298 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003298:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800329a:	f7fd fca5 	bl	8000be8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800329e:	f7fd ff8d 	bl	80011bc <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a2:	bd10      	pop	{r4, pc}

080032a4 <EXTI4_15_IRQHandler>:

/**
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
 80032a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80032a6:	2010      	movs	r0, #16
 80032a8:	f7fe f962 	bl	8001570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)

080032b0 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80032b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80032b2:	4802      	ldr	r0, [pc, #8]	; (80032bc <DMA1_Channel1_IRQHandler+0xc>)
 80032b4:	f7fe f81e 	bl	80012f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20000260 	.word	0x20000260

080032c0 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 80032c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80032c2:	4802      	ldr	r0, [pc, #8]	; (80032cc <DMA1_Channel2_3_IRQHandler+0xc>)
 80032c4:	f7fe f816 	bl	80012f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	2000016c 	.word	0x2000016c

080032d0 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 80032d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032d2:	4802      	ldr	r0, [pc, #8]	; (80032dc <TIM3_IRQHandler+0xc>)
 80032d4:	f7fe ff66 	bl	80021a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032d8:	bd10      	pop	{r4, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	2000012c 	.word	0x2000012c

080032e0 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 80032e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80032e2:	4802      	ldr	r0, [pc, #8]	; (80032ec <TIM14_IRQHandler+0xc>)
 80032e4:	f7fe ff5e 	bl	80021a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80032e8:	bd10      	pop	{r4, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	20000220 	.word	0x20000220

080032f0 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 80032f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80032f2:	4802      	ldr	r0, [pc, #8]	; (80032fc <TIM16_IRQHandler+0xc>)
 80032f4:	f7fe ff56 	bl	80021a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80032f8:	bd10      	pop	{r4, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	200002f0 	.word	0x200002f0

08003300 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8003300:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003302:	4802      	ldr	r0, [pc, #8]	; (800330c <USART1_IRQHandler+0xc>)
 8003304:	f7ff f95a 	bl	80025bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003308:	bd10      	pop	{r4, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	200001b0 	.word	0x200001b0

08003310 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003310:	2101      	movs	r1, #1
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003314:	4811      	ldr	r0, [pc, #68]	; (800335c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4002      	ands	r2, r0
 8003320:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	480e      	ldr	r0, [pc, #56]	; (8003360 <SystemInit+0x50>)
 8003326:	4002      	ands	r2, r0
 8003328:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	480d      	ldr	r0, [pc, #52]	; (8003364 <SystemInit+0x54>)
 800332e:	4002      	ands	r2, r0
 8003330:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	480c      	ldr	r0, [pc, #48]	; (8003368 <SystemInit+0x58>)
 8003336:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003338:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800333a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333e:	4382      	bics	r2, r0
 8003340:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8003342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003344:	4809      	ldr	r0, [pc, #36]	; (800336c <SystemInit+0x5c>)
 8003346:	4002      	ands	r2, r0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800334a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334c:	438a      	bics	r2, r1
 800334e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]

}
 8003354:	4770      	bx	lr
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	40021000 	.word	0x40021000
 800335c:	08ffb80c 	.word	0x08ffb80c
 8003360:	fef6ffff 	.word	0xfef6ffff
 8003364:	fffbffff 	.word	0xfffbffff
 8003368:	ffc0ffff 	.word	0xffc0ffff
 800336c:	fffffeec 	.word	0xfffffeec

08003370 <data_aquisition>:
#include "function.h"
#include "variables.h"
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim3;

void data_aquisition(){
 8003370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003372:	46de      	mov	lr, fp
 8003374:	4657      	mov	r7, sl
 8003376:	464e      	mov	r6, r9
 8003378:	4645      	mov	r5, r8
 800337a:	b5e0      	push	{r5, r6, r7, lr}
	size_data_buffer = strlen((char*)data_buffer);
 800337c:	4e53      	ldr	r6, [pc, #332]	; (80034cc <data_aquisition+0x15c>)
void data_aquisition(){
 800337e:	b085      	sub	sp, #20
	size_data_buffer = strlen((char*)data_buffer);
 8003380:	6833      	ldr	r3, [r6, #0]
 8003382:	0018      	movs	r0, r3
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f7fc febf 	bl	8000108 <strlen>
	size_time = strlen((char*)send_time);
 800338a:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <data_aquisition+0x160>)
	size_data_buffer = strlen((char*)data_buffer);
 800338c:	4c51      	ldr	r4, [pc, #324]	; (80034d4 <data_aquisition+0x164>)
	size_time = strlen((char*)send_time);
 800338e:	681a      	ldr	r2, [r3, #0]
	size_data_buffer = strlen((char*)data_buffer);
 8003390:	4682      	mov	sl, r0
 8003392:	6020      	str	r0, [r4, #0]
	size_time = strlen((char*)send_time);
 8003394:	0010      	movs	r0, r2
 8003396:	9201      	str	r2, [sp, #4]
 8003398:	f7fc feb6 	bl	8000108 <strlen>
 800339c:	4d4e      	ldr	r5, [pc, #312]	; (80034d8 <data_aquisition+0x168>)
 800339e:	9002      	str	r0, [sp, #8]
 80033a0:	6028      	str	r0, [r5, #0]
	size_q1 = strlen((char*)send_q1);
 80033a2:	484e      	ldr	r0, [pc, #312]	; (80034dc <data_aquisition+0x16c>)
 80033a4:	4683      	mov	fp, r0
 80033a6:	6800      	ldr	r0, [r0, #0]
 80033a8:	f7fc feae 	bl	8000108 <strlen>
 80033ac:	4f4c      	ldr	r7, [pc, #304]	; (80034e0 <data_aquisition+0x170>)
 80033ae:	6038      	str	r0, [r7, #0]
	size_q2 = strlen((char*)send_q2);
 80033b0:	484c      	ldr	r0, [pc, #304]	; (80034e4 <data_aquisition+0x174>)
 80033b2:	6800      	ldr	r0, [r0, #0]
 80033b4:	9003      	str	r0, [sp, #12]
 80033b6:	f7fc fea7 	bl	8000108 <strlen>
 80033ba:	494b      	ldr	r1, [pc, #300]	; (80034e8 <data_aquisition+0x178>)
 80033bc:	6008      	str	r0, [r1, #0]
	size_torque = strlen((char*)send_torque);
 80033be:	484b      	ldr	r0, [pc, #300]	; (80034ec <data_aquisition+0x17c>)
	size_q2 = strlen((char*)send_q2);
 80033c0:	4688      	mov	r8, r1
	size_torque = strlen((char*)send_torque);
 80033c2:	6800      	ldr	r0, [r0, #0]
 80033c4:	9003      	str	r0, [sp, #12]
 80033c6:	f7fc fe9f 	bl	8000108 <strlen>
 80033ca:	4949      	ldr	r1, [pc, #292]	; (80034f0 <data_aquisition+0x180>)

	//memset(data_buffer,0x00,40);
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 80033cc:	9a02      	ldr	r2, [sp, #8]
	size_torque = strlen((char*)send_torque);
 80033ce:	6008      	str	r0, [r1, #0]
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 80033d0:	9800      	ldr	r0, [sp, #0]
	size_torque = strlen((char*)send_torque);
 80033d2:	4689      	mov	r9, r1
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 80033d4:	4450      	add	r0, sl
 80033d6:	9901      	ldr	r1, [sp, #4]
 80033d8:	f000 f9ce 	bl	8003778 <memcpy>
	memcpy(data_buffer+size_time+size_data_buffer, comma, 1);
 80033dc:	6829      	ldr	r1, [r5, #0]
 80033de:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <data_aquisition+0x184>)
 80033e0:	468c      	mov	ip, r1
 80033e2:	469a      	mov	sl, r3
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6821      	ldr	r1, [r4, #0]
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	6833      	ldr	r3, [r6, #0]
 80033ec:	4463      	add	r3, ip
 80033ee:	545a      	strb	r2, [r3, r1]
	memcpy(data_buffer+1+size_time+size_data_buffer, send_q1, size_q1);
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	682b      	ldr	r3, [r5, #0]
 80033f4:	4694      	mov	ip, r2
 80033f6:	4463      	add	r3, ip
 80033f8:	0018      	movs	r0, r3
 80033fa:	6833      	ldr	r3, [r6, #0]
 80033fc:	3001      	adds	r0, #1
 80033fe:	469c      	mov	ip, r3
 8003400:	465b      	mov	r3, fp
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	4460      	add	r0, ip
 8003408:	f000 f9b6 	bl	8003778 <memcpy>
	memcpy(data_buffer+1+size_q1+size_time+size_data_buffer, comma, 1);
 800340c:	4653      	mov	r3, sl
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	468c      	mov	ip, r1
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	6829      	ldr	r1, [r5, #0]
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	4463      	add	r3, ip
 800341c:	468c      	mov	ip, r1
 800341e:	6821      	ldr	r1, [r4, #0]
 8003420:	4463      	add	r3, ip
 8003422:	468c      	mov	ip, r1
 8003424:	4463      	add	r3, ip
 8003426:	705a      	strb	r2, [r3, #1]
	memcpy(data_buffer+2+size_q1+size_time+size_data_buffer, send_q2, size_q2);
 8003428:	682a      	ldr	r2, [r5, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	4694      	mov	ip, r2
 800342e:	4463      	add	r3, ip
 8003430:	0018      	movs	r0, r3
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	3002      	adds	r0, #2
 8003436:	469c      	mov	ip, r3
 8003438:	6833      	ldr	r3, [r6, #0]
 800343a:	4460      	add	r0, ip
 800343c:	469c      	mov	ip, r3
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <data_aquisition+0x174>)
 8003440:	4460      	add	r0, ip
 8003442:	6819      	ldr	r1, [r3, #0]
 8003444:	4643      	mov	r3, r8
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f000 f996 	bl	8003778 <memcpy>
	memcpy(data_buffer+2+size_q1+size_time+size_q2+size_data_buffer, comma, 1);
 800344c:	6839      	ldr	r1, [r7, #0]
 800344e:	4653      	mov	r3, sl
 8003450:	468c      	mov	ip, r1
 8003452:	4641      	mov	r1, r8
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6809      	ldr	r1, [r1, #0]
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	6833      	ldr	r3, [r6, #0]
 800345c:	4463      	add	r3, ip
 800345e:	468c      	mov	ip, r1
 8003460:	6829      	ldr	r1, [r5, #0]
 8003462:	4463      	add	r3, ip
 8003464:	468c      	mov	ip, r1
 8003466:	6821      	ldr	r1, [r4, #0]
 8003468:	4463      	add	r3, ip
 800346a:	468c      	mov	ip, r1
 800346c:	4463      	add	r3, ip
 800346e:	709a      	strb	r2, [r3, #2]
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_data_buffer, send_torque, size_torque);
 8003470:	682a      	ldr	r2, [r5, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	4694      	mov	ip, r2
 8003476:	4463      	add	r3, ip
 8003478:	0018      	movs	r0, r3
 800347a:	4643      	mov	r3, r8
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3003      	adds	r0, #3
 8003480:	469c      	mov	ip, r3
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	4460      	add	r0, ip
 8003486:	469c      	mov	ip, r3
 8003488:	6833      	ldr	r3, [r6, #0]
 800348a:	4460      	add	r0, ip
 800348c:	469c      	mov	ip, r3
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <data_aquisition+0x17c>)
 8003490:	4460      	add	r0, ip
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	464b      	mov	r3, r9
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	f000 f96e 	bl	8003778 <memcpy>
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_torque+size_data_buffer, endSymbol, 1);
 800349c:	4648      	mov	r0, r9
 800349e:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <data_aquisition+0x188>)
 80034a0:	6832      	ldr	r2, [r6, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	682e      	ldr	r6, [r5, #0]
 80034a6:	7819      	ldrb	r1, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6807      	ldr	r7, [r0, #0]
 80034ac:	4640      	mov	r0, r8
 80034ae:	18d3      	adds	r3, r2, r3
 80034b0:	6805      	ldr	r5, [r0, #0]
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	199b      	adds	r3, r3, r6
 80034b8:	195b      	adds	r3, r3, r5
 80034ba:	181b      	adds	r3, r3, r0
 80034bc:	70d9      	strb	r1, [r3, #3]

//	HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
}
 80034be:	b005      	add	sp, #20
 80034c0:	bc3c      	pop	{r2, r3, r4, r5}
 80034c2:	4690      	mov	r8, r2
 80034c4:	4699      	mov	r9, r3
 80034c6:	46a2      	mov	sl, r4
 80034c8:	46ab      	mov	fp, r5
 80034ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034cc:	200000ac 	.word	0x200000ac
 80034d0:	200000f4 	.word	0x200000f4
 80034d4:	200000fc 	.word	0x200000fc
 80034d8:	20000108 	.word	0x20000108
 80034dc:	200000ec 	.word	0x200000ec
 80034e0:	20000100 	.word	0x20000100
 80034e4:	200000f0 	.word	0x200000f0
 80034e8:	20000104 	.word	0x20000104
 80034ec:	200000f8 	.word	0x200000f8
 80034f0:	2000010c 	.word	0x2000010c
 80034f4:	20000008 	.word	0x20000008
 80034f8:	20000018 	.word	0x20000018

080034fc <uart_request>:


void uart_request(){
 80034fc:	b570      	push	{r4, r5, r6, lr}

	rx_buffer[rx_buffer_cntr] = rx_byte;
 80034fe:	4a2e      	ldr	r2, [pc, #184]	; (80035b8 <uart_request+0xbc>)
 8003500:	4d2e      	ldr	r5, [pc, #184]	; (80035bc <uart_request+0xc0>)
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <uart_request+0xc4>)
 8003504:	6814      	ldr	r4, [r2, #0]
 8003506:	7828      	ldrb	r0, [r5, #0]
 8003508:	7819      	ldrb	r1, [r3, #0]
 800350a:	5460      	strb	r0, [r4, r1]
	if(*rx_buffer == '$'){
 800350c:	6814      	ldr	r4, [r2, #0]
 800350e:	7822      	ldrb	r2, [r4, #0]
 8003510:	2a24      	cmp	r2, #36	; 0x24
 8003512:	d013      	beq.n	800353c <uart_request+0x40>
		rx_buffer_cntr += 1;
	}
	if(rx_buffer_cntr > 10){
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	2a0a      	cmp	r2, #10
 8003518:	d909      	bls.n	800352e <uart_request+0x32>
		rx_buffer_cntr = 0;
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
	}
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 800351e:	7823      	ldrb	r3, [r4, #0]
 8003520:	2b24      	cmp	r3, #36	; 0x24
 8003522:	d104      	bne.n	800352e <uart_request+0x32>
 8003524:	18a3      	adds	r3, r4, r2
 8003526:	3b01      	subs	r3, #1
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b0a      	cmp	r3, #10
 800352c:	d00d      	beq.n	800354a <uart_request+0x4e>
 800352e:	4e25      	ldr	r6, [pc, #148]	; (80035c4 <uart_request+0xc8>)

		}

	}

	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8003530:	0029      	movs	r1, r5
 8003532:	0030      	movs	r0, r6
 8003534:	2201      	movs	r2, #1
 8003536:	f7fe ff37 	bl	80023a8 <HAL_UART_Receive_IT>


}
 800353a:	bd70      	pop	{r4, r5, r6, pc}
		rx_buffer_cntr += 1;
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	3201      	adds	r2, #1
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
	if(rx_buffer_cntr > 10){
 8003544:	2a0a      	cmp	r2, #10
 8003546:	d9ea      	bls.n	800351e <uart_request+0x22>
 8003548:	e7e7      	b.n	800351a <uart_request+0x1e>
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 800354a:	2a02      	cmp	r2, #2
 800354c:	d9ef      	bls.n	800352e <uart_request+0x32>
		switch(rx_buffer[1]){
 800354e:	7863      	ldrb	r3, [r4, #1]
 8003550:	2b42      	cmp	r3, #66	; 0x42
 8003552:	d01a      	beq.n	800358a <uart_request+0x8e>
 8003554:	2b58      	cmp	r3, #88	; 0x58
 8003556:	d00d      	beq.n	8003574 <uart_request+0x78>
 8003558:	2b41      	cmp	r3, #65	; 0x41
 800355a:	d1e8      	bne.n	800352e <uart_request+0x32>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)acrobat),strlen((char*)acrobat));
 800355c:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <uart_request+0xcc>)
 800355e:	681c      	ldr	r4, [r3, #0]
 8003560:	0020      	movs	r0, r4
 8003562:	f7fc fdd1 	bl	8000108 <strlen>
 8003566:	4e17      	ldr	r6, [pc, #92]	; (80035c4 <uart_request+0xc8>)
 8003568:	b282      	uxth	r2, r0
 800356a:	0021      	movs	r1, r4
 800356c:	0030      	movs	r0, r6
 800356e:	f7fe fee9 	bl	8002344 <HAL_UART_Transmit_IT>
			break;
 8003572:	e7dd      	b.n	8003530 <uart_request+0x34>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003574:	4b15      	ldr	r3, [pc, #84]	; (80035cc <uart_request+0xd0>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2300      	movs	r3, #0
 800357a:	6353      	str	r3, [r2, #52]	; 0x34
			enable_data_aquisition = 0;
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <uart_request+0xd4>)
 800357e:	7013      	strb	r3, [r2, #0]
			enable_encoder_reading = 0;
 8003580:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <uart_request+0xd8>)
 8003582:	7013      	strb	r3, [r2, #0]
			enable_ADC_interrupt = 0;
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <uart_request+0xdc>)
 8003586:	7013      	strb	r3, [r2, #0]
 8003588:	e7ea      	b.n	8003560 <uart_request+0x64>
			if(*(rx_buffer+3) == '1'){
 800358a:	78e3      	ldrb	r3, [r4, #3]
 800358c:	2b31      	cmp	r3, #49	; 0x31
 800358e:	d005      	beq.n	800359c <uart_request+0xa0>
			else if(rx_buffer[3] == '0'){
 8003590:	2b30      	cmp	r3, #48	; 0x30
 8003592:	d1cc      	bne.n	800352e <uart_request+0x32>
				enable_data_aquisition = 0;
 8003594:	2200      	movs	r2, #0
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <uart_request+0xd4>)
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e7c8      	b.n	800352e <uart_request+0x32>
				HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 800359c:	0020      	movs	r0, r4
 800359e:	f7fc fdb3 	bl	8000108 <strlen>
 80035a2:	4e08      	ldr	r6, [pc, #32]	; (80035c4 <uart_request+0xc8>)
 80035a4:	b282      	uxth	r2, r0
 80035a6:	0021      	movs	r1, r4
 80035a8:	0030      	movs	r0, r6
 80035aa:	f7fe fecb 	bl	8002344 <HAL_UART_Transmit_IT>
				enable_data_aquisition = 1;
 80035ae:	2201      	movs	r2, #1
 80035b0:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <uart_request+0xd4>)
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	e7bc      	b.n	8003530 <uart_request+0x34>
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	200000d8 	.word	0x200000d8
 80035bc:	200000dd 	.word	0x200000dd
 80035c0:	200000dc 	.word	0x200000dc
 80035c4:	200001b0 	.word	0x200001b0
 80035c8:	20000004 	.word	0x20000004
 80035cc:	2000012c 	.word	0x2000012c
 80035d0:	200000b1 	.word	0x200000b1
 80035d4:	20000015 	.word	0x20000015
 80035d8:	20000014 	.word	0x20000014

080035dc <user_main>:
#include "function.h"
#include "variables.h"

extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim14;
void user_main(){
 80035dc:	b570      	push	{r4, r5, r6, lr}

	if(uart_flag == 1){
 80035de:	4b28      	ldr	r3, [pc, #160]	; (8003680 <user_main+0xa4>)
 80035e0:	781a      	ldrb	r2, [r3, #0]
 80035e2:	2a01      	cmp	r2, #1
 80035e4:	d047      	beq.n	8003676 <user_main+0x9a>
		uart_flag = 0;
		uart_request();

	}

	if(enable_encoder_reading == 1){
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <user_main+0xa8>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d025      	beq.n	800363a <user_main+0x5e>
			encoder_flag = 0;
			read_motor_position();
		}
	}

	if(enable_ADC_interrupt == 1){
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <user_main+0xac>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d018      	beq.n	8003628 <user_main+0x4c>
			//control_law();
		}
	}


	if(enable_data_aquisition){
 80035f6:	4c25      	ldr	r4, [pc, #148]	; (800368c <user_main+0xb0>)
 80035f8:	7823      	ldrb	r3, [r4, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d013      	beq.n	8003626 <user_main+0x4a>
		if(data_flag == 1){ // send system variables over UART
 80035fe:	4d24      	ldr	r5, [pc, #144]	; (8003690 <user_main+0xb4>)
 8003600:	782b      	ldrb	r3, [r5, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d022      	beq.n	800364c <user_main+0x70>
			data_flag = 0;
			data_aquisition();
		}
	}

	if(send_data_flag && enable_data_aquisition){
 8003606:	4b23      	ldr	r3, [pc, #140]	; (8003694 <user_main+0xb8>)
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	2a00      	cmp	r2, #0
 800360c:	d00b      	beq.n	8003626 <user_main+0x4a>
		send_data_flag = 0;
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
 8003612:	4b21      	ldr	r3, [pc, #132]	; (8003698 <user_main+0xbc>)
 8003614:	681c      	ldr	r4, [r3, #0]
 8003616:	0020      	movs	r0, r4
 8003618:	f7fc fd76 	bl	8000108 <strlen>
 800361c:	0021      	movs	r1, r4
 800361e:	b282      	uxth	r2, r0
 8003620:	481e      	ldr	r0, [pc, #120]	; (800369c <user_main+0xc0>)
 8003622:	f7fe ff21 	bl	8002468 <HAL_UART_Transmit_DMA>
	}

//	time = htim14.Instance->CNT;


}
 8003626:	bd70      	pop	{r4, r5, r6, pc}
		if(adc_flag == 1){
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <user_main+0xc4>)
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	2a01      	cmp	r2, #1
 800362e:	d1e2      	bne.n	80035f6 <user_main+0x1a>
			adc_flag = 0;
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
			get_current_potentiometer();
 8003634:	f7ff fa2a 	bl	8002a8c <get_current_potentiometer>
 8003638:	e7dd      	b.n	80035f6 <user_main+0x1a>
		if(encoder_flag == 1){
 800363a:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <user_main+0xc8>)
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	2a01      	cmp	r2, #1
 8003640:	d1d5      	bne.n	80035ee <user_main+0x12>
			encoder_flag = 0;
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
			read_motor_position();
 8003646:	f7ff fadd 	bl	8002c04 <read_motor_position>
 800364a:	e7d0      	b.n	80035ee <user_main+0x12>
			time += 1;
 800364c:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <user_main+0xcc>)
			sprintf(send_time,"%lu", time);
 800364e:	4917      	ldr	r1, [pc, #92]	; (80036ac <user_main+0xd0>)
			time += 1;
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	3201      	adds	r2, #1
 8003654:	601a      	str	r2, [r3, #0]
			sprintf(send_time,"%lu", time);
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <user_main+0xd4>)
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	f000 f967 	bl	800392c <siprintf>
			data_flag = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	702b      	strb	r3, [r5, #0]
			data_aquisition();
 8003662:	f7ff fe85 	bl	8003370 <data_aquisition>
	if(send_data_flag && enable_data_aquisition){
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <user_main+0xb8>)
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	2a00      	cmp	r2, #0
 800366c:	d0db      	beq.n	8003626 <user_main+0x4a>
 800366e:	7822      	ldrb	r2, [r4, #0]
 8003670:	2a00      	cmp	r2, #0
 8003672:	d0d8      	beq.n	8003626 <user_main+0x4a>
 8003674:	e7cb      	b.n	800360e <user_main+0x32>
		uart_flag = 0;
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
		uart_request();
 800367a:	f7ff ff3f 	bl	80034fc <uart_request>
 800367e:	e7b2      	b.n	80035e6 <user_main+0xa>
 8003680:	20000115 	.word	0x20000115
 8003684:	20000015 	.word	0x20000015
 8003688:	20000014 	.word	0x20000014
 800368c:	200000b1 	.word	0x200000b1
 8003690:	200000b0 	.word	0x200000b0
 8003694:	2000001c 	.word	0x2000001c
 8003698:	200000ac 	.word	0x200000ac
 800369c:	200001b0 	.word	0x200001b0
 80036a0:	200000a8 	.word	0x200000a8
 80036a4:	200000b2 	.word	0x200000b2
 80036a8:	20000110 	.word	0x20000110
 80036ac:	08004084 	.word	0x08004084
 80036b0:	200000f4 	.word	0x200000f4

080036b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036b4:	480d      	ldr	r0, [pc, #52]	; (80036ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b8:	480d      	ldr	r0, [pc, #52]	; (80036f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80036ba:	490e      	ldr	r1, [pc, #56]	; (80036f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036bc:	4a0e      	ldr	r2, [pc, #56]	; (80036f8 <LoopForever+0xe>)
  movs r3, #0
 80036be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c0:	e002      	b.n	80036c8 <LoopCopyDataInit>

080036c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c6:	3304      	adds	r3, #4

080036c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036cc:	d3f9      	bcc.n	80036c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ce:	4a0b      	ldr	r2, [pc, #44]	; (80036fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80036d0:	4c0b      	ldr	r4, [pc, #44]	; (8003700 <LoopForever+0x16>)
  movs r3, #0
 80036d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d4:	e001      	b.n	80036da <LoopFillZerobss>

080036d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d8:	3204      	adds	r2, #4

080036da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036dc:	d3fb      	bcc.n	80036d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80036de:	f7ff fe17 	bl	8003310 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80036e2:	f000 f81b 	bl	800371c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036e6:	f7ff fb97 	bl	8002e18 <main>

080036ea <LoopForever>:

LoopForever:
    b LoopForever
 80036ea:	e7fe      	b.n	80036ea <LoopForever>
  ldr   r0, =_estack
 80036ec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80036f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80036f8:	08004130 	.word	0x08004130
  ldr r2, =_sbss
 80036fc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003700:	20000334 	.word	0x20000334

08003704 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003704:	e7fe      	b.n	8003704 <ADC1_IRQHandler>
	...

08003708 <calloc>:
 8003708:	b510      	push	{r4, lr}
 800370a:	4b03      	ldr	r3, [pc, #12]	; (8003718 <calloc+0x10>)
 800370c:	000a      	movs	r2, r1
 800370e:	0001      	movs	r1, r0
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	f000 f842 	bl	800379a <_calloc_r>
 8003716:	bd10      	pop	{r4, pc}
 8003718:	20000024 	.word	0x20000024

0800371c <__libc_init_array>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	2600      	movs	r6, #0
 8003720:	4d0c      	ldr	r5, [pc, #48]	; (8003754 <__libc_init_array+0x38>)
 8003722:	4c0d      	ldr	r4, [pc, #52]	; (8003758 <__libc_init_array+0x3c>)
 8003724:	1b64      	subs	r4, r4, r5
 8003726:	10a4      	asrs	r4, r4, #2
 8003728:	42a6      	cmp	r6, r4
 800372a:	d109      	bne.n	8003740 <__libc_init_array+0x24>
 800372c:	2600      	movs	r6, #0
 800372e:	f000 fc6b 	bl	8004008 <_init>
 8003732:	4d0a      	ldr	r5, [pc, #40]	; (800375c <__libc_init_array+0x40>)
 8003734:	4c0a      	ldr	r4, [pc, #40]	; (8003760 <__libc_init_array+0x44>)
 8003736:	1b64      	subs	r4, r4, r5
 8003738:	10a4      	asrs	r4, r4, #2
 800373a:	42a6      	cmp	r6, r4
 800373c:	d105      	bne.n	800374a <__libc_init_array+0x2e>
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	00b3      	lsls	r3, r6, #2
 8003742:	58eb      	ldr	r3, [r5, r3]
 8003744:	4798      	blx	r3
 8003746:	3601      	adds	r6, #1
 8003748:	e7ee      	b.n	8003728 <__libc_init_array+0xc>
 800374a:	00b3      	lsls	r3, r6, #2
 800374c:	58eb      	ldr	r3, [r5, r3]
 800374e:	4798      	blx	r3
 8003750:	3601      	adds	r6, #1
 8003752:	e7f2      	b.n	800373a <__libc_init_array+0x1e>
 8003754:	08004128 	.word	0x08004128
 8003758:	08004128 	.word	0x08004128
 800375c:	08004128 	.word	0x08004128
 8003760:	0800412c 	.word	0x0800412c

08003764 <malloc>:
 8003764:	b510      	push	{r4, lr}
 8003766:	4b03      	ldr	r3, [pc, #12]	; (8003774 <malloc+0x10>)
 8003768:	0001      	movs	r1, r0
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	f000 f86e 	bl	800384c <_malloc_r>
 8003770:	bd10      	pop	{r4, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	20000024 	.word	0x20000024

08003778 <memcpy>:
 8003778:	2300      	movs	r3, #0
 800377a:	b510      	push	{r4, lr}
 800377c:	429a      	cmp	r2, r3
 800377e:	d100      	bne.n	8003782 <memcpy+0xa>
 8003780:	bd10      	pop	{r4, pc}
 8003782:	5ccc      	ldrb	r4, [r1, r3]
 8003784:	54c4      	strb	r4, [r0, r3]
 8003786:	3301      	adds	r3, #1
 8003788:	e7f8      	b.n	800377c <memcpy+0x4>

0800378a <memset>:
 800378a:	0003      	movs	r3, r0
 800378c:	1882      	adds	r2, r0, r2
 800378e:	4293      	cmp	r3, r2
 8003790:	d100      	bne.n	8003794 <memset+0xa>
 8003792:	4770      	bx	lr
 8003794:	7019      	strb	r1, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	e7f9      	b.n	800378e <memset+0x4>

0800379a <_calloc_r>:
 800379a:	434a      	muls	r2, r1
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	0011      	movs	r1, r2
 80037a0:	0014      	movs	r4, r2
 80037a2:	f000 f853 	bl	800384c <_malloc_r>
 80037a6:	1e05      	subs	r5, r0, #0
 80037a8:	d003      	beq.n	80037b2 <_calloc_r+0x18>
 80037aa:	0022      	movs	r2, r4
 80037ac:	2100      	movs	r1, #0
 80037ae:	f7ff ffec 	bl	800378a <memset>
 80037b2:	0028      	movs	r0, r5
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080037b8 <_free_r>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	0005      	movs	r5, r0
 80037bc:	2900      	cmp	r1, #0
 80037be:	d010      	beq.n	80037e2 <_free_r+0x2a>
 80037c0:	1f0c      	subs	r4, r1, #4
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	da00      	bge.n	80037ca <_free_r+0x12>
 80037c8:	18e4      	adds	r4, r4, r3
 80037ca:	0028      	movs	r0, r5
 80037cc:	f000 f8d0 	bl	8003970 <__malloc_lock>
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <_free_r+0x90>)
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <_free_r+0x2c>
 80037d8:	6063      	str	r3, [r4, #4]
 80037da:	6014      	str	r4, [r2, #0]
 80037dc:	0028      	movs	r0, r5
 80037de:	f000 f8c8 	bl	8003972 <__malloc_unlock>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	d909      	bls.n	80037fc <_free_r+0x44>
 80037e8:	6821      	ldr	r1, [r4, #0]
 80037ea:	1860      	adds	r0, r4, r1
 80037ec:	4283      	cmp	r3, r0
 80037ee:	d1f3      	bne.n	80037d8 <_free_r+0x20>
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	1841      	adds	r1, r0, r1
 80037f6:	6021      	str	r1, [r4, #0]
 80037f8:	e7ee      	b.n	80037d8 <_free_r+0x20>
 80037fa:	0013      	movs	r3, r2
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	2a00      	cmp	r2, #0
 8003800:	d001      	beq.n	8003806 <_free_r+0x4e>
 8003802:	42a2      	cmp	r2, r4
 8003804:	d9f9      	bls.n	80037fa <_free_r+0x42>
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	1858      	adds	r0, r3, r1
 800380a:	42a0      	cmp	r0, r4
 800380c:	d10b      	bne.n	8003826 <_free_r+0x6e>
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	1809      	adds	r1, r1, r0
 8003812:	1858      	adds	r0, r3, r1
 8003814:	6019      	str	r1, [r3, #0]
 8003816:	4282      	cmp	r2, r0
 8003818:	d1e0      	bne.n	80037dc <_free_r+0x24>
 800381a:	6810      	ldr	r0, [r2, #0]
 800381c:	6852      	ldr	r2, [r2, #4]
 800381e:	1841      	adds	r1, r0, r1
 8003820:	6019      	str	r1, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	e7da      	b.n	80037dc <_free_r+0x24>
 8003826:	42a0      	cmp	r0, r4
 8003828:	d902      	bls.n	8003830 <_free_r+0x78>
 800382a:	230c      	movs	r3, #12
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	e7d5      	b.n	80037dc <_free_r+0x24>
 8003830:	6821      	ldr	r1, [r4, #0]
 8003832:	1860      	adds	r0, r4, r1
 8003834:	4282      	cmp	r2, r0
 8003836:	d103      	bne.n	8003840 <_free_r+0x88>
 8003838:	6810      	ldr	r0, [r2, #0]
 800383a:	6852      	ldr	r2, [r2, #4]
 800383c:	1841      	adds	r1, r0, r1
 800383e:	6021      	str	r1, [r4, #0]
 8003840:	6062      	str	r2, [r4, #4]
 8003842:	605c      	str	r4, [r3, #4]
 8003844:	e7ca      	b.n	80037dc <_free_r+0x24>
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	2000011c 	.word	0x2000011c

0800384c <_malloc_r>:
 800384c:	2303      	movs	r3, #3
 800384e:	b570      	push	{r4, r5, r6, lr}
 8003850:	1ccd      	adds	r5, r1, #3
 8003852:	439d      	bics	r5, r3
 8003854:	3508      	adds	r5, #8
 8003856:	0006      	movs	r6, r0
 8003858:	2d0c      	cmp	r5, #12
 800385a:	d21e      	bcs.n	800389a <_malloc_r+0x4e>
 800385c:	250c      	movs	r5, #12
 800385e:	42a9      	cmp	r1, r5
 8003860:	d81d      	bhi.n	800389e <_malloc_r+0x52>
 8003862:	0030      	movs	r0, r6
 8003864:	f000 f884 	bl	8003970 <__malloc_lock>
 8003868:	4a25      	ldr	r2, [pc, #148]	; (8003900 <_malloc_r+0xb4>)
 800386a:	6814      	ldr	r4, [r2, #0]
 800386c:	0021      	movs	r1, r4
 800386e:	2900      	cmp	r1, #0
 8003870:	d119      	bne.n	80038a6 <_malloc_r+0x5a>
 8003872:	4c24      	ldr	r4, [pc, #144]	; (8003904 <_malloc_r+0xb8>)
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <_malloc_r+0x36>
 800387a:	0030      	movs	r0, r6
 800387c:	f000 f844 	bl	8003908 <_sbrk_r>
 8003880:	6020      	str	r0, [r4, #0]
 8003882:	0029      	movs	r1, r5
 8003884:	0030      	movs	r0, r6
 8003886:	f000 f83f 	bl	8003908 <_sbrk_r>
 800388a:	1c43      	adds	r3, r0, #1
 800388c:	d12c      	bne.n	80038e8 <_malloc_r+0x9c>
 800388e:	230c      	movs	r3, #12
 8003890:	0030      	movs	r0, r6
 8003892:	6033      	str	r3, [r6, #0]
 8003894:	f000 f86d 	bl	8003972 <__malloc_unlock>
 8003898:	e003      	b.n	80038a2 <_malloc_r+0x56>
 800389a:	2d00      	cmp	r5, #0
 800389c:	dadf      	bge.n	800385e <_malloc_r+0x12>
 800389e:	230c      	movs	r3, #12
 80038a0:	6033      	str	r3, [r6, #0]
 80038a2:	2000      	movs	r0, #0
 80038a4:	bd70      	pop	{r4, r5, r6, pc}
 80038a6:	680b      	ldr	r3, [r1, #0]
 80038a8:	1b5b      	subs	r3, r3, r5
 80038aa:	d41a      	bmi.n	80038e2 <_malloc_r+0x96>
 80038ac:	2b0b      	cmp	r3, #11
 80038ae:	d903      	bls.n	80038b8 <_malloc_r+0x6c>
 80038b0:	600b      	str	r3, [r1, #0]
 80038b2:	18cc      	adds	r4, r1, r3
 80038b4:	6025      	str	r5, [r4, #0]
 80038b6:	e003      	b.n	80038c0 <_malloc_r+0x74>
 80038b8:	428c      	cmp	r4, r1
 80038ba:	d10e      	bne.n	80038da <_malloc_r+0x8e>
 80038bc:	6863      	ldr	r3, [r4, #4]
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	0030      	movs	r0, r6
 80038c2:	f000 f856 	bl	8003972 <__malloc_unlock>
 80038c6:	0020      	movs	r0, r4
 80038c8:	2207      	movs	r2, #7
 80038ca:	300b      	adds	r0, #11
 80038cc:	1d23      	adds	r3, r4, #4
 80038ce:	4390      	bics	r0, r2
 80038d0:	1ac3      	subs	r3, r0, r3
 80038d2:	d0e7      	beq.n	80038a4 <_malloc_r+0x58>
 80038d4:	425a      	negs	r2, r3
 80038d6:	50e2      	str	r2, [r4, r3]
 80038d8:	e7e4      	b.n	80038a4 <_malloc_r+0x58>
 80038da:	684b      	ldr	r3, [r1, #4]
 80038dc:	6063      	str	r3, [r4, #4]
 80038de:	000c      	movs	r4, r1
 80038e0:	e7ee      	b.n	80038c0 <_malloc_r+0x74>
 80038e2:	000c      	movs	r4, r1
 80038e4:	6849      	ldr	r1, [r1, #4]
 80038e6:	e7c2      	b.n	800386e <_malloc_r+0x22>
 80038e8:	2303      	movs	r3, #3
 80038ea:	1cc4      	adds	r4, r0, #3
 80038ec:	439c      	bics	r4, r3
 80038ee:	42a0      	cmp	r0, r4
 80038f0:	d0e0      	beq.n	80038b4 <_malloc_r+0x68>
 80038f2:	1a21      	subs	r1, r4, r0
 80038f4:	0030      	movs	r0, r6
 80038f6:	f000 f807 	bl	8003908 <_sbrk_r>
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	d1da      	bne.n	80038b4 <_malloc_r+0x68>
 80038fe:	e7c6      	b.n	800388e <_malloc_r+0x42>
 8003900:	2000011c 	.word	0x2000011c
 8003904:	20000120 	.word	0x20000120

08003908 <_sbrk_r>:
 8003908:	2300      	movs	r3, #0
 800390a:	b570      	push	{r4, r5, r6, lr}
 800390c:	4c06      	ldr	r4, [pc, #24]	; (8003928 <_sbrk_r+0x20>)
 800390e:	0005      	movs	r5, r0
 8003910:	0008      	movs	r0, r1
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	f000 fb68 	bl	8003fe8 <_sbrk>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d103      	bne.n	8003924 <_sbrk_r+0x1c>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d000      	beq.n	8003924 <_sbrk_r+0x1c>
 8003922:	602b      	str	r3, [r5, #0]
 8003924:	bd70      	pop	{r4, r5, r6, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000330 	.word	0x20000330

0800392c <siprintf>:
 800392c:	b40e      	push	{r1, r2, r3}
 800392e:	b510      	push	{r4, lr}
 8003930:	b09d      	sub	sp, #116	; 0x74
 8003932:	a902      	add	r1, sp, #8
 8003934:	9002      	str	r0, [sp, #8]
 8003936:	6108      	str	r0, [r1, #16]
 8003938:	480b      	ldr	r0, [pc, #44]	; (8003968 <siprintf+0x3c>)
 800393a:	2482      	movs	r4, #130	; 0x82
 800393c:	6088      	str	r0, [r1, #8]
 800393e:	6148      	str	r0, [r1, #20]
 8003940:	2001      	movs	r0, #1
 8003942:	4240      	negs	r0, r0
 8003944:	ab1f      	add	r3, sp, #124	; 0x7c
 8003946:	81c8      	strh	r0, [r1, #14]
 8003948:	4808      	ldr	r0, [pc, #32]	; (800396c <siprintf+0x40>)
 800394a:	cb04      	ldmia	r3!, {r2}
 800394c:	00a4      	lsls	r4, r4, #2
 800394e:	6800      	ldr	r0, [r0, #0]
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	818c      	strh	r4, [r1, #12]
 8003954:	f000 f870 	bl	8003a38 <_svfiprintf_r>
 8003958:	2300      	movs	r3, #0
 800395a:	9a02      	ldr	r2, [sp, #8]
 800395c:	7013      	strb	r3, [r2, #0]
 800395e:	b01d      	add	sp, #116	; 0x74
 8003960:	bc10      	pop	{r4}
 8003962:	bc08      	pop	{r3}
 8003964:	b003      	add	sp, #12
 8003966:	4718      	bx	r3
 8003968:	7fffffff 	.word	0x7fffffff
 800396c:	20000024 	.word	0x20000024

08003970 <__malloc_lock>:
 8003970:	4770      	bx	lr

08003972 <__malloc_unlock>:
 8003972:	4770      	bx	lr

08003974 <__ssputs_r>:
 8003974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003976:	688e      	ldr	r6, [r1, #8]
 8003978:	b085      	sub	sp, #20
 800397a:	0007      	movs	r7, r0
 800397c:	000c      	movs	r4, r1
 800397e:	9203      	str	r2, [sp, #12]
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	429e      	cmp	r6, r3
 8003984:	d839      	bhi.n	80039fa <__ssputs_r+0x86>
 8003986:	2390      	movs	r3, #144	; 0x90
 8003988:	898a      	ldrh	r2, [r1, #12]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	421a      	tst	r2, r3
 800398e:	d034      	beq.n	80039fa <__ssputs_r+0x86>
 8003990:	2503      	movs	r5, #3
 8003992:	6909      	ldr	r1, [r1, #16]
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	1a5b      	subs	r3, r3, r1
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	6963      	ldr	r3, [r4, #20]
 800399c:	9802      	ldr	r0, [sp, #8]
 800399e:	435d      	muls	r5, r3
 80039a0:	0feb      	lsrs	r3, r5, #31
 80039a2:	195d      	adds	r5, r3, r5
 80039a4:	9b01      	ldr	r3, [sp, #4]
 80039a6:	106d      	asrs	r5, r5, #1
 80039a8:	3301      	adds	r3, #1
 80039aa:	181b      	adds	r3, r3, r0
 80039ac:	42ab      	cmp	r3, r5
 80039ae:	d900      	bls.n	80039b2 <__ssputs_r+0x3e>
 80039b0:	001d      	movs	r5, r3
 80039b2:	0553      	lsls	r3, r2, #21
 80039b4:	d532      	bpl.n	8003a1c <__ssputs_r+0xa8>
 80039b6:	0029      	movs	r1, r5
 80039b8:	0038      	movs	r0, r7
 80039ba:	f7ff ff47 	bl	800384c <_malloc_r>
 80039be:	1e06      	subs	r6, r0, #0
 80039c0:	d109      	bne.n	80039d6 <__ssputs_r+0x62>
 80039c2:	230c      	movs	r3, #12
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	2340      	movs	r3, #64	; 0x40
 80039c8:	2001      	movs	r0, #1
 80039ca:	89a2      	ldrh	r2, [r4, #12]
 80039cc:	4240      	negs	r0, r0
 80039ce:	4313      	orrs	r3, r2
 80039d0:	81a3      	strh	r3, [r4, #12]
 80039d2:	b005      	add	sp, #20
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d6:	9a02      	ldr	r2, [sp, #8]
 80039d8:	6921      	ldr	r1, [r4, #16]
 80039da:	f7ff fecd 	bl	8003778 <memcpy>
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <__ssputs_r+0xc0>)
 80039e2:	401a      	ands	r2, r3
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	4313      	orrs	r3, r2
 80039e8:	81a3      	strh	r3, [r4, #12]
 80039ea:	9b02      	ldr	r3, [sp, #8]
 80039ec:	6126      	str	r6, [r4, #16]
 80039ee:	18f6      	adds	r6, r6, r3
 80039f0:	6026      	str	r6, [r4, #0]
 80039f2:	6165      	str	r5, [r4, #20]
 80039f4:	9e01      	ldr	r6, [sp, #4]
 80039f6:	1aed      	subs	r5, r5, r3
 80039f8:	60a5      	str	r5, [r4, #8]
 80039fa:	9b01      	ldr	r3, [sp, #4]
 80039fc:	42b3      	cmp	r3, r6
 80039fe:	d200      	bcs.n	8003a02 <__ssputs_r+0x8e>
 8003a00:	001e      	movs	r6, r3
 8003a02:	0032      	movs	r2, r6
 8003a04:	9903      	ldr	r1, [sp, #12]
 8003a06:	6820      	ldr	r0, [r4, #0]
 8003a08:	f000 faad 	bl	8003f66 <memmove>
 8003a0c:	68a3      	ldr	r3, [r4, #8]
 8003a0e:	2000      	movs	r0, #0
 8003a10:	1b9b      	subs	r3, r3, r6
 8003a12:	60a3      	str	r3, [r4, #8]
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	199e      	adds	r6, r3, r6
 8003a18:	6026      	str	r6, [r4, #0]
 8003a1a:	e7da      	b.n	80039d2 <__ssputs_r+0x5e>
 8003a1c:	002a      	movs	r2, r5
 8003a1e:	0038      	movs	r0, r7
 8003a20:	f000 fab3 	bl	8003f8a <_realloc_r>
 8003a24:	1e06      	subs	r6, r0, #0
 8003a26:	d1e0      	bne.n	80039ea <__ssputs_r+0x76>
 8003a28:	6921      	ldr	r1, [r4, #16]
 8003a2a:	0038      	movs	r0, r7
 8003a2c:	f7ff fec4 	bl	80037b8 <_free_r>
 8003a30:	e7c7      	b.n	80039c2 <__ssputs_r+0x4e>
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	fffffb7f 	.word	0xfffffb7f

08003a38 <_svfiprintf_r>:
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	b09f      	sub	sp, #124	; 0x7c
 8003a3c:	9002      	str	r0, [sp, #8]
 8003a3e:	9305      	str	r3, [sp, #20]
 8003a40:	898b      	ldrh	r3, [r1, #12]
 8003a42:	000f      	movs	r7, r1
 8003a44:	0016      	movs	r6, r2
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	d511      	bpl.n	8003a6e <_svfiprintf_r+0x36>
 8003a4a:	690b      	ldr	r3, [r1, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10e      	bne.n	8003a6e <_svfiprintf_r+0x36>
 8003a50:	2140      	movs	r1, #64	; 0x40
 8003a52:	f7ff fefb 	bl	800384c <_malloc_r>
 8003a56:	6038      	str	r0, [r7, #0]
 8003a58:	6138      	str	r0, [r7, #16]
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d105      	bne.n	8003a6a <_svfiprintf_r+0x32>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	9a02      	ldr	r2, [sp, #8]
 8003a62:	3801      	subs	r0, #1
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	b01f      	add	sp, #124	; 0x7c
 8003a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6a:	2340      	movs	r3, #64	; 0x40
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	ad06      	add	r5, sp, #24
 8003a72:	616b      	str	r3, [r5, #20]
 8003a74:	3320      	adds	r3, #32
 8003a76:	766b      	strb	r3, [r5, #25]
 8003a78:	3310      	adds	r3, #16
 8003a7a:	76ab      	strb	r3, [r5, #26]
 8003a7c:	0034      	movs	r4, r6
 8003a7e:	7823      	ldrb	r3, [r4, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d147      	bne.n	8003b14 <_svfiprintf_r+0xdc>
 8003a84:	1ba3      	subs	r3, r4, r6
 8003a86:	9304      	str	r3, [sp, #16]
 8003a88:	d00d      	beq.n	8003aa6 <_svfiprintf_r+0x6e>
 8003a8a:	1ba3      	subs	r3, r4, r6
 8003a8c:	0032      	movs	r2, r6
 8003a8e:	0039      	movs	r1, r7
 8003a90:	9802      	ldr	r0, [sp, #8]
 8003a92:	f7ff ff6f 	bl	8003974 <__ssputs_r>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	d100      	bne.n	8003a9c <_svfiprintf_r+0x64>
 8003a9a:	e0b5      	b.n	8003c08 <_svfiprintf_r+0x1d0>
 8003a9c:	696a      	ldr	r2, [r5, #20]
 8003a9e:	9b04      	ldr	r3, [sp, #16]
 8003aa0:	4694      	mov	ip, r2
 8003aa2:	4463      	add	r3, ip
 8003aa4:	616b      	str	r3, [r5, #20]
 8003aa6:	7823      	ldrb	r3, [r4, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d100      	bne.n	8003aae <_svfiprintf_r+0x76>
 8003aac:	e0ac      	b.n	8003c08 <_svfiprintf_r+0x1d0>
 8003aae:	2201      	movs	r2, #1
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4252      	negs	r2, r2
 8003ab4:	606a      	str	r2, [r5, #4]
 8003ab6:	a902      	add	r1, sp, #8
 8003ab8:	3254      	adds	r2, #84	; 0x54
 8003aba:	1852      	adds	r2, r2, r1
 8003abc:	3401      	adds	r4, #1
 8003abe:	602b      	str	r3, [r5, #0]
 8003ac0:	60eb      	str	r3, [r5, #12]
 8003ac2:	60ab      	str	r3, [r5, #8]
 8003ac4:	7013      	strb	r3, [r2, #0]
 8003ac6:	65ab      	str	r3, [r5, #88]	; 0x58
 8003ac8:	4e58      	ldr	r6, [pc, #352]	; (8003c2c <_svfiprintf_r+0x1f4>)
 8003aca:	2205      	movs	r2, #5
 8003acc:	7821      	ldrb	r1, [r4, #0]
 8003ace:	0030      	movs	r0, r6
 8003ad0:	f000 fa3e 	bl	8003f50 <memchr>
 8003ad4:	1c62      	adds	r2, r4, #1
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d120      	bne.n	8003b1c <_svfiprintf_r+0xe4>
 8003ada:	6829      	ldr	r1, [r5, #0]
 8003adc:	06cb      	lsls	r3, r1, #27
 8003ade:	d504      	bpl.n	8003aea <_svfiprintf_r+0xb2>
 8003ae0:	2353      	movs	r3, #83	; 0x53
 8003ae2:	ae02      	add	r6, sp, #8
 8003ae4:	3020      	adds	r0, #32
 8003ae6:	199b      	adds	r3, r3, r6
 8003ae8:	7018      	strb	r0, [r3, #0]
 8003aea:	070b      	lsls	r3, r1, #28
 8003aec:	d504      	bpl.n	8003af8 <_svfiprintf_r+0xc0>
 8003aee:	2353      	movs	r3, #83	; 0x53
 8003af0:	202b      	movs	r0, #43	; 0x2b
 8003af2:	ae02      	add	r6, sp, #8
 8003af4:	199b      	adds	r3, r3, r6
 8003af6:	7018      	strb	r0, [r3, #0]
 8003af8:	7823      	ldrb	r3, [r4, #0]
 8003afa:	2b2a      	cmp	r3, #42	; 0x2a
 8003afc:	d016      	beq.n	8003b2c <_svfiprintf_r+0xf4>
 8003afe:	2000      	movs	r0, #0
 8003b00:	210a      	movs	r1, #10
 8003b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b04:	7822      	ldrb	r2, [r4, #0]
 8003b06:	3a30      	subs	r2, #48	; 0x30
 8003b08:	2a09      	cmp	r2, #9
 8003b0a:	d955      	bls.n	8003bb8 <_svfiprintf_r+0x180>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d015      	beq.n	8003b3c <_svfiprintf_r+0x104>
 8003b10:	9309      	str	r3, [sp, #36]	; 0x24
 8003b12:	e013      	b.n	8003b3c <_svfiprintf_r+0x104>
 8003b14:	2b25      	cmp	r3, #37	; 0x25
 8003b16:	d0b5      	beq.n	8003a84 <_svfiprintf_r+0x4c>
 8003b18:	3401      	adds	r4, #1
 8003b1a:	e7b0      	b.n	8003a7e <_svfiprintf_r+0x46>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	1b80      	subs	r0, r0, r6
 8003b20:	4083      	lsls	r3, r0
 8003b22:	6829      	ldr	r1, [r5, #0]
 8003b24:	0014      	movs	r4, r2
 8003b26:	430b      	orrs	r3, r1
 8003b28:	602b      	str	r3, [r5, #0]
 8003b2a:	e7cd      	b.n	8003ac8 <_svfiprintf_r+0x90>
 8003b2c:	9b05      	ldr	r3, [sp, #20]
 8003b2e:	1d18      	adds	r0, r3, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	9005      	str	r0, [sp, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	db39      	blt.n	8003bac <_svfiprintf_r+0x174>
 8003b38:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3a:	0014      	movs	r4, r2
 8003b3c:	7823      	ldrb	r3, [r4, #0]
 8003b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b40:	d10b      	bne.n	8003b5a <_svfiprintf_r+0x122>
 8003b42:	7863      	ldrb	r3, [r4, #1]
 8003b44:	1c62      	adds	r2, r4, #1
 8003b46:	2b2a      	cmp	r3, #42	; 0x2a
 8003b48:	d13e      	bne.n	8003bc8 <_svfiprintf_r+0x190>
 8003b4a:	9b05      	ldr	r3, [sp, #20]
 8003b4c:	3402      	adds	r4, #2
 8003b4e:	1d1a      	adds	r2, r3, #4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	9205      	str	r2, [sp, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	db34      	blt.n	8003bc2 <_svfiprintf_r+0x18a>
 8003b58:	9307      	str	r3, [sp, #28]
 8003b5a:	4e35      	ldr	r6, [pc, #212]	; (8003c30 <_svfiprintf_r+0x1f8>)
 8003b5c:	7821      	ldrb	r1, [r4, #0]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	0030      	movs	r0, r6
 8003b62:	f000 f9f5 	bl	8003f50 <memchr>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d006      	beq.n	8003b78 <_svfiprintf_r+0x140>
 8003b6a:	2340      	movs	r3, #64	; 0x40
 8003b6c:	1b80      	subs	r0, r0, r6
 8003b6e:	4083      	lsls	r3, r0
 8003b70:	682a      	ldr	r2, [r5, #0]
 8003b72:	3401      	adds	r4, #1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	602b      	str	r3, [r5, #0]
 8003b78:	7821      	ldrb	r1, [r4, #0]
 8003b7a:	2206      	movs	r2, #6
 8003b7c:	482d      	ldr	r0, [pc, #180]	; (8003c34 <_svfiprintf_r+0x1fc>)
 8003b7e:	1c66      	adds	r6, r4, #1
 8003b80:	7629      	strb	r1, [r5, #24]
 8003b82:	f000 f9e5 	bl	8003f50 <memchr>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d046      	beq.n	8003c18 <_svfiprintf_r+0x1e0>
 8003b8a:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <_svfiprintf_r+0x200>)
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d12f      	bne.n	8003bf0 <_svfiprintf_r+0x1b8>
 8003b90:	6829      	ldr	r1, [r5, #0]
 8003b92:	9b05      	ldr	r3, [sp, #20]
 8003b94:	2207      	movs	r2, #7
 8003b96:	05c9      	lsls	r1, r1, #23
 8003b98:	d528      	bpl.n	8003bec <_svfiprintf_r+0x1b4>
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	9305      	str	r3, [sp, #20]
 8003ba2:	696b      	ldr	r3, [r5, #20]
 8003ba4:	9a03      	ldr	r2, [sp, #12]
 8003ba6:	189b      	adds	r3, r3, r2
 8003ba8:	616b      	str	r3, [r5, #20]
 8003baa:	e767      	b.n	8003a7c <_svfiprintf_r+0x44>
 8003bac:	425b      	negs	r3, r3
 8003bae:	60eb      	str	r3, [r5, #12]
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	e7c0      	b.n	8003b3a <_svfiprintf_r+0x102>
 8003bb8:	434b      	muls	r3, r1
 8003bba:	3401      	adds	r4, #1
 8003bbc:	189b      	adds	r3, r3, r2
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	e7a0      	b.n	8003b04 <_svfiprintf_r+0xcc>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	425b      	negs	r3, r3
 8003bc6:	e7c7      	b.n	8003b58 <_svfiprintf_r+0x120>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	0014      	movs	r4, r2
 8003bcc:	200a      	movs	r0, #10
 8003bce:	001a      	movs	r2, r3
 8003bd0:	606b      	str	r3, [r5, #4]
 8003bd2:	7821      	ldrb	r1, [r4, #0]
 8003bd4:	3930      	subs	r1, #48	; 0x30
 8003bd6:	2909      	cmp	r1, #9
 8003bd8:	d903      	bls.n	8003be2 <_svfiprintf_r+0x1aa>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0bd      	beq.n	8003b5a <_svfiprintf_r+0x122>
 8003bde:	9207      	str	r2, [sp, #28]
 8003be0:	e7bb      	b.n	8003b5a <_svfiprintf_r+0x122>
 8003be2:	4342      	muls	r2, r0
 8003be4:	3401      	adds	r4, #1
 8003be6:	1852      	adds	r2, r2, r1
 8003be8:	2301      	movs	r3, #1
 8003bea:	e7f2      	b.n	8003bd2 <_svfiprintf_r+0x19a>
 8003bec:	3307      	adds	r3, #7
 8003bee:	e7d5      	b.n	8003b9c <_svfiprintf_r+0x164>
 8003bf0:	ab05      	add	r3, sp, #20
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	003a      	movs	r2, r7
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <_svfiprintf_r+0x204>)
 8003bf8:	0029      	movs	r1, r5
 8003bfa:	9802      	ldr	r0, [sp, #8]
 8003bfc:	e000      	b.n	8003c00 <_svfiprintf_r+0x1c8>
 8003bfe:	bf00      	nop
 8003c00:	9003      	str	r0, [sp, #12]
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	d1cc      	bne.n	8003ba2 <_svfiprintf_r+0x16a>
 8003c08:	89bb      	ldrh	r3, [r7, #12]
 8003c0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c0c:	065b      	lsls	r3, r3, #25
 8003c0e:	d400      	bmi.n	8003c12 <_svfiprintf_r+0x1da>
 8003c10:	e729      	b.n	8003a66 <_svfiprintf_r+0x2e>
 8003c12:	2001      	movs	r0, #1
 8003c14:	4240      	negs	r0, r0
 8003c16:	e726      	b.n	8003a66 <_svfiprintf_r+0x2e>
 8003c18:	ab05      	add	r3, sp, #20
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	003a      	movs	r2, r7
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <_svfiprintf_r+0x204>)
 8003c20:	0029      	movs	r1, r5
 8003c22:	9802      	ldr	r0, [sp, #8]
 8003c24:	f000 f87a 	bl	8003d1c <_printf_i>
 8003c28:	e7ea      	b.n	8003c00 <_svfiprintf_r+0x1c8>
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	080040f4 	.word	0x080040f4
 8003c30:	080040fa 	.word	0x080040fa
 8003c34:	080040fe 	.word	0x080040fe
 8003c38:	00000000 	.word	0x00000000
 8003c3c:	08003975 	.word	0x08003975

08003c40 <_printf_common>:
 8003c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c42:	0015      	movs	r5, r2
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	688a      	ldr	r2, [r1, #8]
 8003c48:	690b      	ldr	r3, [r1, #16]
 8003c4a:	9000      	str	r0, [sp, #0]
 8003c4c:	000c      	movs	r4, r1
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	da00      	bge.n	8003c54 <_printf_common+0x14>
 8003c52:	0013      	movs	r3, r2
 8003c54:	0022      	movs	r2, r4
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	3243      	adds	r2, #67	; 0x43
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	2a00      	cmp	r2, #0
 8003c5e:	d001      	beq.n	8003c64 <_printf_common+0x24>
 8003c60:	3301      	adds	r3, #1
 8003c62:	602b      	str	r3, [r5, #0]
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	069b      	lsls	r3, r3, #26
 8003c68:	d502      	bpl.n	8003c70 <_printf_common+0x30>
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	602b      	str	r3, [r5, #0]
 8003c70:	2706      	movs	r7, #6
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	401f      	ands	r7, r3
 8003c76:	d027      	beq.n	8003cc8 <_printf_common+0x88>
 8003c78:	0023      	movs	r3, r4
 8003c7a:	3343      	adds	r3, #67	; 0x43
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	1e5a      	subs	r2, r3, #1
 8003c80:	4193      	sbcs	r3, r2
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	0692      	lsls	r2, r2, #26
 8003c86:	d430      	bmi.n	8003cea <_printf_common+0xaa>
 8003c88:	0022      	movs	r2, r4
 8003c8a:	9901      	ldr	r1, [sp, #4]
 8003c8c:	3243      	adds	r2, #67	; 0x43
 8003c8e:	9800      	ldr	r0, [sp, #0]
 8003c90:	9e08      	ldr	r6, [sp, #32]
 8003c92:	47b0      	blx	r6
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d025      	beq.n	8003ce4 <_printf_common+0xa4>
 8003c98:	2306      	movs	r3, #6
 8003c9a:	6820      	ldr	r0, [r4, #0]
 8003c9c:	682a      	ldr	r2, [r5, #0]
 8003c9e:	68e1      	ldr	r1, [r4, #12]
 8003ca0:	4003      	ands	r3, r0
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d103      	bne.n	8003cb0 <_printf_common+0x70>
 8003ca8:	1a8d      	subs	r5, r1, r2
 8003caa:	43eb      	mvns	r3, r5
 8003cac:	17db      	asrs	r3, r3, #31
 8003cae:	401d      	ands	r5, r3
 8003cb0:	68a3      	ldr	r3, [r4, #8]
 8003cb2:	6922      	ldr	r2, [r4, #16]
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	dd01      	ble.n	8003cbc <_printf_common+0x7c>
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	18ed      	adds	r5, r5, r3
 8003cbc:	2700      	movs	r7, #0
 8003cbe:	42bd      	cmp	r5, r7
 8003cc0:	d120      	bne.n	8003d04 <_printf_common+0xc4>
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	e010      	b.n	8003ce8 <_printf_common+0xa8>
 8003cc6:	3701      	adds	r7, #1
 8003cc8:	68e3      	ldr	r3, [r4, #12]
 8003cca:	682a      	ldr	r2, [r5, #0]
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	429f      	cmp	r7, r3
 8003cd0:	dad2      	bge.n	8003c78 <_printf_common+0x38>
 8003cd2:	0022      	movs	r2, r4
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	3219      	adds	r2, #25
 8003cd8:	9901      	ldr	r1, [sp, #4]
 8003cda:	9800      	ldr	r0, [sp, #0]
 8003cdc:	9e08      	ldr	r6, [sp, #32]
 8003cde:	47b0      	blx	r6
 8003ce0:	1c43      	adds	r3, r0, #1
 8003ce2:	d1f0      	bne.n	8003cc6 <_printf_common+0x86>
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	4240      	negs	r0, r0
 8003ce8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cea:	2030      	movs	r0, #48	; 0x30
 8003cec:	18e1      	adds	r1, r4, r3
 8003cee:	3143      	adds	r1, #67	; 0x43
 8003cf0:	7008      	strb	r0, [r1, #0]
 8003cf2:	0021      	movs	r1, r4
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	3145      	adds	r1, #69	; 0x45
 8003cf8:	7809      	ldrb	r1, [r1, #0]
 8003cfa:	18a2      	adds	r2, r4, r2
 8003cfc:	3243      	adds	r2, #67	; 0x43
 8003cfe:	3302      	adds	r3, #2
 8003d00:	7011      	strb	r1, [r2, #0]
 8003d02:	e7c1      	b.n	8003c88 <_printf_common+0x48>
 8003d04:	0022      	movs	r2, r4
 8003d06:	2301      	movs	r3, #1
 8003d08:	321a      	adds	r2, #26
 8003d0a:	9901      	ldr	r1, [sp, #4]
 8003d0c:	9800      	ldr	r0, [sp, #0]
 8003d0e:	9e08      	ldr	r6, [sp, #32]
 8003d10:	47b0      	blx	r6
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	d0e6      	beq.n	8003ce4 <_printf_common+0xa4>
 8003d16:	3701      	adds	r7, #1
 8003d18:	e7d1      	b.n	8003cbe <_printf_common+0x7e>
	...

08003d1c <_printf_i>:
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1e:	b08b      	sub	sp, #44	; 0x2c
 8003d20:	9206      	str	r2, [sp, #24]
 8003d22:	000a      	movs	r2, r1
 8003d24:	3243      	adds	r2, #67	; 0x43
 8003d26:	9307      	str	r3, [sp, #28]
 8003d28:	9005      	str	r0, [sp, #20]
 8003d2a:	9204      	str	r2, [sp, #16]
 8003d2c:	7e0a      	ldrb	r2, [r1, #24]
 8003d2e:	000c      	movs	r4, r1
 8003d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d32:	2a6e      	cmp	r2, #110	; 0x6e
 8003d34:	d100      	bne.n	8003d38 <_printf_i+0x1c>
 8003d36:	e08f      	b.n	8003e58 <_printf_i+0x13c>
 8003d38:	d817      	bhi.n	8003d6a <_printf_i+0x4e>
 8003d3a:	2a63      	cmp	r2, #99	; 0x63
 8003d3c:	d02c      	beq.n	8003d98 <_printf_i+0x7c>
 8003d3e:	d808      	bhi.n	8003d52 <_printf_i+0x36>
 8003d40:	2a00      	cmp	r2, #0
 8003d42:	d100      	bne.n	8003d46 <_printf_i+0x2a>
 8003d44:	e099      	b.n	8003e7a <_printf_i+0x15e>
 8003d46:	2a58      	cmp	r2, #88	; 0x58
 8003d48:	d054      	beq.n	8003df4 <_printf_i+0xd8>
 8003d4a:	0026      	movs	r6, r4
 8003d4c:	3642      	adds	r6, #66	; 0x42
 8003d4e:	7032      	strb	r2, [r6, #0]
 8003d50:	e029      	b.n	8003da6 <_printf_i+0x8a>
 8003d52:	2a64      	cmp	r2, #100	; 0x64
 8003d54:	d001      	beq.n	8003d5a <_printf_i+0x3e>
 8003d56:	2a69      	cmp	r2, #105	; 0x69
 8003d58:	d1f7      	bne.n	8003d4a <_printf_i+0x2e>
 8003d5a:	6821      	ldr	r1, [r4, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	0608      	lsls	r0, r1, #24
 8003d60:	d523      	bpl.n	8003daa <_printf_i+0x8e>
 8003d62:	1d11      	adds	r1, r2, #4
 8003d64:	6019      	str	r1, [r3, #0]
 8003d66:	6815      	ldr	r5, [r2, #0]
 8003d68:	e025      	b.n	8003db6 <_printf_i+0x9a>
 8003d6a:	2a73      	cmp	r2, #115	; 0x73
 8003d6c:	d100      	bne.n	8003d70 <_printf_i+0x54>
 8003d6e:	e088      	b.n	8003e82 <_printf_i+0x166>
 8003d70:	d808      	bhi.n	8003d84 <_printf_i+0x68>
 8003d72:	2a6f      	cmp	r2, #111	; 0x6f
 8003d74:	d029      	beq.n	8003dca <_printf_i+0xae>
 8003d76:	2a70      	cmp	r2, #112	; 0x70
 8003d78:	d1e7      	bne.n	8003d4a <_printf_i+0x2e>
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	6809      	ldr	r1, [r1, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	6022      	str	r2, [r4, #0]
 8003d82:	e003      	b.n	8003d8c <_printf_i+0x70>
 8003d84:	2a75      	cmp	r2, #117	; 0x75
 8003d86:	d020      	beq.n	8003dca <_printf_i+0xae>
 8003d88:	2a78      	cmp	r2, #120	; 0x78
 8003d8a:	d1de      	bne.n	8003d4a <_printf_i+0x2e>
 8003d8c:	0022      	movs	r2, r4
 8003d8e:	2178      	movs	r1, #120	; 0x78
 8003d90:	3245      	adds	r2, #69	; 0x45
 8003d92:	7011      	strb	r1, [r2, #0]
 8003d94:	4a6c      	ldr	r2, [pc, #432]	; (8003f48 <_printf_i+0x22c>)
 8003d96:	e030      	b.n	8003dfa <_printf_i+0xde>
 8003d98:	000e      	movs	r6, r1
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	3642      	adds	r6, #66	; 0x42
 8003d9e:	1d11      	adds	r1, r2, #4
 8003da0:	6019      	str	r1, [r3, #0]
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	7033      	strb	r3, [r6, #0]
 8003da6:	2301      	movs	r3, #1
 8003da8:	e079      	b.n	8003e9e <_printf_i+0x182>
 8003daa:	0649      	lsls	r1, r1, #25
 8003dac:	d5d9      	bpl.n	8003d62 <_printf_i+0x46>
 8003dae:	1d11      	adds	r1, r2, #4
 8003db0:	6019      	str	r1, [r3, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	5ed5      	ldrsh	r5, [r2, r3]
 8003db6:	2d00      	cmp	r5, #0
 8003db8:	da03      	bge.n	8003dc2 <_printf_i+0xa6>
 8003dba:	232d      	movs	r3, #45	; 0x2d
 8003dbc:	9a04      	ldr	r2, [sp, #16]
 8003dbe:	426d      	negs	r5, r5
 8003dc0:	7013      	strb	r3, [r2, #0]
 8003dc2:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <_printf_i+0x230>)
 8003dc4:	270a      	movs	r7, #10
 8003dc6:	9303      	str	r3, [sp, #12]
 8003dc8:	e02f      	b.n	8003e2a <_printf_i+0x10e>
 8003dca:	6820      	ldr	r0, [r4, #0]
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	0605      	lsls	r5, r0, #24
 8003dd0:	d503      	bpl.n	8003dda <_printf_i+0xbe>
 8003dd2:	1d08      	adds	r0, r1, #4
 8003dd4:	6018      	str	r0, [r3, #0]
 8003dd6:	680d      	ldr	r5, [r1, #0]
 8003dd8:	e005      	b.n	8003de6 <_printf_i+0xca>
 8003dda:	0640      	lsls	r0, r0, #25
 8003ddc:	d5f9      	bpl.n	8003dd2 <_printf_i+0xb6>
 8003dde:	680d      	ldr	r5, [r1, #0]
 8003de0:	1d08      	adds	r0, r1, #4
 8003de2:	6018      	str	r0, [r3, #0]
 8003de4:	b2ad      	uxth	r5, r5
 8003de6:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <_printf_i+0x230>)
 8003de8:	2708      	movs	r7, #8
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	2a6f      	cmp	r2, #111	; 0x6f
 8003dee:	d018      	beq.n	8003e22 <_printf_i+0x106>
 8003df0:	270a      	movs	r7, #10
 8003df2:	e016      	b.n	8003e22 <_printf_i+0x106>
 8003df4:	3145      	adds	r1, #69	; 0x45
 8003df6:	700a      	strb	r2, [r1, #0]
 8003df8:	4a54      	ldr	r2, [pc, #336]	; (8003f4c <_printf_i+0x230>)
 8003dfa:	9203      	str	r2, [sp, #12]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	6821      	ldr	r1, [r4, #0]
 8003e00:	1d10      	adds	r0, r2, #4
 8003e02:	6018      	str	r0, [r3, #0]
 8003e04:	6815      	ldr	r5, [r2, #0]
 8003e06:	0608      	lsls	r0, r1, #24
 8003e08:	d522      	bpl.n	8003e50 <_printf_i+0x134>
 8003e0a:	07cb      	lsls	r3, r1, #31
 8003e0c:	d502      	bpl.n	8003e14 <_printf_i+0xf8>
 8003e0e:	2320      	movs	r3, #32
 8003e10:	4319      	orrs	r1, r3
 8003e12:	6021      	str	r1, [r4, #0]
 8003e14:	2710      	movs	r7, #16
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	d103      	bne.n	8003e22 <_printf_i+0x106>
 8003e1a:	2320      	movs	r3, #32
 8003e1c:	6822      	ldr	r2, [r4, #0]
 8003e1e:	439a      	bics	r2, r3
 8003e20:	6022      	str	r2, [r4, #0]
 8003e22:	0023      	movs	r3, r4
 8003e24:	2200      	movs	r2, #0
 8003e26:	3343      	adds	r3, #67	; 0x43
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	6863      	ldr	r3, [r4, #4]
 8003e2c:	60a3      	str	r3, [r4, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	db5c      	blt.n	8003eec <_printf_i+0x1d0>
 8003e32:	2204      	movs	r2, #4
 8003e34:	6821      	ldr	r1, [r4, #0]
 8003e36:	4391      	bics	r1, r2
 8003e38:	6021      	str	r1, [r4, #0]
 8003e3a:	2d00      	cmp	r5, #0
 8003e3c:	d158      	bne.n	8003ef0 <_printf_i+0x1d4>
 8003e3e:	9e04      	ldr	r6, [sp, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d064      	beq.n	8003f0e <_printf_i+0x1f2>
 8003e44:	0026      	movs	r6, r4
 8003e46:	9b03      	ldr	r3, [sp, #12]
 8003e48:	3642      	adds	r6, #66	; 0x42
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	7033      	strb	r3, [r6, #0]
 8003e4e:	e05e      	b.n	8003f0e <_printf_i+0x1f2>
 8003e50:	0648      	lsls	r0, r1, #25
 8003e52:	d5da      	bpl.n	8003e0a <_printf_i+0xee>
 8003e54:	b2ad      	uxth	r5, r5
 8003e56:	e7d8      	b.n	8003e0a <_printf_i+0xee>
 8003e58:	6809      	ldr	r1, [r1, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	0608      	lsls	r0, r1, #24
 8003e5e:	d505      	bpl.n	8003e6c <_printf_i+0x150>
 8003e60:	1d11      	adds	r1, r2, #4
 8003e62:	6019      	str	r1, [r3, #0]
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	6962      	ldr	r2, [r4, #20]
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e006      	b.n	8003e7a <_printf_i+0x15e>
 8003e6c:	0649      	lsls	r1, r1, #25
 8003e6e:	d5f7      	bpl.n	8003e60 <_printf_i+0x144>
 8003e70:	1d11      	adds	r1, r2, #4
 8003e72:	6019      	str	r1, [r3, #0]
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	8aa2      	ldrh	r2, [r4, #20]
 8003e78:	801a      	strh	r2, [r3, #0]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9e04      	ldr	r6, [sp, #16]
 8003e7e:	6123      	str	r3, [r4, #16]
 8003e80:	e054      	b.n	8003f2c <_printf_i+0x210>
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	1d11      	adds	r1, r2, #4
 8003e86:	6019      	str	r1, [r3, #0]
 8003e88:	6816      	ldr	r6, [r2, #0]
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6862      	ldr	r2, [r4, #4]
 8003e8e:	0030      	movs	r0, r6
 8003e90:	f000 f85e 	bl	8003f50 <memchr>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d001      	beq.n	8003e9c <_printf_i+0x180>
 8003e98:	1b80      	subs	r0, r0, r6
 8003e9a:	6060      	str	r0, [r4, #4]
 8003e9c:	6863      	ldr	r3, [r4, #4]
 8003e9e:	6123      	str	r3, [r4, #16]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9a04      	ldr	r2, [sp, #16]
 8003ea4:	7013      	strb	r3, [r2, #0]
 8003ea6:	e041      	b.n	8003f2c <_printf_i+0x210>
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	0032      	movs	r2, r6
 8003eac:	9906      	ldr	r1, [sp, #24]
 8003eae:	9805      	ldr	r0, [sp, #20]
 8003eb0:	9d07      	ldr	r5, [sp, #28]
 8003eb2:	47a8      	blx	r5
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d043      	beq.n	8003f40 <_printf_i+0x224>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	2500      	movs	r5, #0
 8003ebc:	079b      	lsls	r3, r3, #30
 8003ebe:	d40f      	bmi.n	8003ee0 <_printf_i+0x1c4>
 8003ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec2:	68e0      	ldr	r0, [r4, #12]
 8003ec4:	4298      	cmp	r0, r3
 8003ec6:	da3d      	bge.n	8003f44 <_printf_i+0x228>
 8003ec8:	0018      	movs	r0, r3
 8003eca:	e03b      	b.n	8003f44 <_printf_i+0x228>
 8003ecc:	0022      	movs	r2, r4
 8003ece:	2301      	movs	r3, #1
 8003ed0:	3219      	adds	r2, #25
 8003ed2:	9906      	ldr	r1, [sp, #24]
 8003ed4:	9805      	ldr	r0, [sp, #20]
 8003ed6:	9e07      	ldr	r6, [sp, #28]
 8003ed8:	47b0      	blx	r6
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	d030      	beq.n	8003f40 <_printf_i+0x224>
 8003ede:	3501      	adds	r5, #1
 8003ee0:	68e3      	ldr	r3, [r4, #12]
 8003ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	429d      	cmp	r5, r3
 8003ee8:	dbf0      	blt.n	8003ecc <_printf_i+0x1b0>
 8003eea:	e7e9      	b.n	8003ec0 <_printf_i+0x1a4>
 8003eec:	2d00      	cmp	r5, #0
 8003eee:	d0a9      	beq.n	8003e44 <_printf_i+0x128>
 8003ef0:	9e04      	ldr	r6, [sp, #16]
 8003ef2:	0028      	movs	r0, r5
 8003ef4:	0039      	movs	r1, r7
 8003ef6:	f7fc f995 	bl	8000224 <__aeabi_uidivmod>
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	3e01      	subs	r6, #1
 8003efe:	5c5b      	ldrb	r3, [r3, r1]
 8003f00:	0028      	movs	r0, r5
 8003f02:	7033      	strb	r3, [r6, #0]
 8003f04:	0039      	movs	r1, r7
 8003f06:	f7fc f907 	bl	8000118 <__udivsi3>
 8003f0a:	1e05      	subs	r5, r0, #0
 8003f0c:	d1f1      	bne.n	8003ef2 <_printf_i+0x1d6>
 8003f0e:	2f08      	cmp	r7, #8
 8003f10:	d109      	bne.n	8003f26 <_printf_i+0x20a>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	07db      	lsls	r3, r3, #31
 8003f16:	d506      	bpl.n	8003f26 <_printf_i+0x20a>
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	6922      	ldr	r2, [r4, #16]
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	dc02      	bgt.n	8003f26 <_printf_i+0x20a>
 8003f20:	2330      	movs	r3, #48	; 0x30
 8003f22:	3e01      	subs	r6, #1
 8003f24:	7033      	strb	r3, [r6, #0]
 8003f26:	9b04      	ldr	r3, [sp, #16]
 8003f28:	1b9b      	subs	r3, r3, r6
 8003f2a:	6123      	str	r3, [r4, #16]
 8003f2c:	9b07      	ldr	r3, [sp, #28]
 8003f2e:	aa09      	add	r2, sp, #36	; 0x24
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	0021      	movs	r1, r4
 8003f34:	9b06      	ldr	r3, [sp, #24]
 8003f36:	9805      	ldr	r0, [sp, #20]
 8003f38:	f7ff fe82 	bl	8003c40 <_printf_common>
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d1b3      	bne.n	8003ea8 <_printf_i+0x18c>
 8003f40:	2001      	movs	r0, #1
 8003f42:	4240      	negs	r0, r0
 8003f44:	b00b      	add	sp, #44	; 0x2c
 8003f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f48:	08004116 	.word	0x08004116
 8003f4c:	08004105 	.word	0x08004105

08003f50 <memchr>:
 8003f50:	b2c9      	uxtb	r1, r1
 8003f52:	1882      	adds	r2, r0, r2
 8003f54:	4290      	cmp	r0, r2
 8003f56:	d101      	bne.n	8003f5c <memchr+0xc>
 8003f58:	2000      	movs	r0, #0
 8003f5a:	4770      	bx	lr
 8003f5c:	7803      	ldrb	r3, [r0, #0]
 8003f5e:	428b      	cmp	r3, r1
 8003f60:	d0fb      	beq.n	8003f5a <memchr+0xa>
 8003f62:	3001      	adds	r0, #1
 8003f64:	e7f6      	b.n	8003f54 <memchr+0x4>

08003f66 <memmove>:
 8003f66:	b510      	push	{r4, lr}
 8003f68:	4288      	cmp	r0, r1
 8003f6a:	d902      	bls.n	8003f72 <memmove+0xc>
 8003f6c:	188b      	adds	r3, r1, r2
 8003f6e:	4298      	cmp	r0, r3
 8003f70:	d308      	bcc.n	8003f84 <memmove+0x1e>
 8003f72:	2300      	movs	r3, #0
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d007      	beq.n	8003f88 <memmove+0x22>
 8003f78:	5ccc      	ldrb	r4, [r1, r3]
 8003f7a:	54c4      	strb	r4, [r0, r3]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	e7f9      	b.n	8003f74 <memmove+0xe>
 8003f80:	5c8b      	ldrb	r3, [r1, r2]
 8003f82:	5483      	strb	r3, [r0, r2]
 8003f84:	3a01      	subs	r2, #1
 8003f86:	d2fb      	bcs.n	8003f80 <memmove+0x1a>
 8003f88:	bd10      	pop	{r4, pc}

08003f8a <_realloc_r>:
 8003f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8c:	0007      	movs	r7, r0
 8003f8e:	000d      	movs	r5, r1
 8003f90:	0016      	movs	r6, r2
 8003f92:	2900      	cmp	r1, #0
 8003f94:	d105      	bne.n	8003fa2 <_realloc_r+0x18>
 8003f96:	0011      	movs	r1, r2
 8003f98:	f7ff fc58 	bl	800384c <_malloc_r>
 8003f9c:	0004      	movs	r4, r0
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa2:	2a00      	cmp	r2, #0
 8003fa4:	d103      	bne.n	8003fae <_realloc_r+0x24>
 8003fa6:	f7ff fc07 	bl	80037b8 <_free_r>
 8003faa:	0034      	movs	r4, r6
 8003fac:	e7f7      	b.n	8003f9e <_realloc_r+0x14>
 8003fae:	f000 f812 	bl	8003fd6 <_malloc_usable_size_r>
 8003fb2:	002c      	movs	r4, r5
 8003fb4:	4286      	cmp	r6, r0
 8003fb6:	d9f2      	bls.n	8003f9e <_realloc_r+0x14>
 8003fb8:	0031      	movs	r1, r6
 8003fba:	0038      	movs	r0, r7
 8003fbc:	f7ff fc46 	bl	800384c <_malloc_r>
 8003fc0:	1e04      	subs	r4, r0, #0
 8003fc2:	d0ec      	beq.n	8003f9e <_realloc_r+0x14>
 8003fc4:	0029      	movs	r1, r5
 8003fc6:	0032      	movs	r2, r6
 8003fc8:	f7ff fbd6 	bl	8003778 <memcpy>
 8003fcc:	0029      	movs	r1, r5
 8003fce:	0038      	movs	r0, r7
 8003fd0:	f7ff fbf2 	bl	80037b8 <_free_r>
 8003fd4:	e7e3      	b.n	8003f9e <_realloc_r+0x14>

08003fd6 <_malloc_usable_size_r>:
 8003fd6:	1f0b      	subs	r3, r1, #4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	1f18      	subs	r0, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	da01      	bge.n	8003fe4 <_malloc_usable_size_r+0xe>
 8003fe0:	580b      	ldr	r3, [r1, r0]
 8003fe2:	18c0      	adds	r0, r0, r3
 8003fe4:	4770      	bx	lr
	...

08003fe8 <_sbrk>:
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <_sbrk+0x18>)
 8003fea:	0002      	movs	r2, r0
 8003fec:	6819      	ldr	r1, [r3, #0]
 8003fee:	2900      	cmp	r1, #0
 8003ff0:	d101      	bne.n	8003ff6 <_sbrk+0xe>
 8003ff2:	4904      	ldr	r1, [pc, #16]	; (8004004 <_sbrk+0x1c>)
 8003ff4:	6019      	str	r1, [r3, #0]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	1882      	adds	r2, r0, r2
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	4770      	bx	lr
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	20000124 	.word	0x20000124
 8004004:	20000334 	.word	0x20000334

08004008 <_init>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr

08004014 <_fini>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr
