
C:\Users\Henry\Desktop\Skripsie\Feedback-Control-of-Robotic-Gymnast-MCU\acrobat_v4\Debug\acrobat_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007700  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080077c0  080077c0  000177c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007c2c  08007c2c  00017c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08007c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002c4  2000008c  08007cbc  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000350  08007cbc  00020350  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c88e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003692  00000000  00000000  0003c942  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007faf  00000000  00000000  0003ffd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ac8  00000000  00000000  00047f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ef0  00000000  00000000  00048a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000079c3  00000000  00000000  00049940  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0004b468  00000000  00000000  00051303  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009c76b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000295c  00000000  00000000  0009c7e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000bc0c  00000000  00000000  0009f144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080077a8 	.word	0x080077a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	080077a8 	.word	0x080077a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fdfb 	bl	8002024 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fd55 	bl	8001ee8 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fded 	bl	8002024 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fde3 	bl	8002024 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd75 	bl	8001f5c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd6b 	bl	8001f5c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fb91 	bl	8000bc4 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fb23 	bl	8000af8 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb83 	bl	8000bc4 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb79 	bl	8000bc4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb2f 	bl	8000b44 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb25 	bl	8000b44 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_d2uiz>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	2200      	movs	r2, #0
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <__aeabi_d2uiz+0x38>)
 800050e:	0004      	movs	r4, r0
 8000510:	000d      	movs	r5, r1
 8000512:	f7ff ffb5 	bl	8000480 <__aeabi_dcmpge>
 8000516:	2800      	cmp	r0, #0
 8000518:	d104      	bne.n	8000524 <__aeabi_d2uiz+0x1c>
 800051a:	0020      	movs	r0, r4
 800051c:	0029      	movs	r1, r5
 800051e:	f002 fb79 	bl	8002c14 <__aeabi_d2iz>
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <__aeabi_d2uiz+0x38>)
 8000526:	2200      	movs	r2, #0
 8000528:	0020      	movs	r0, r4
 800052a:	0029      	movs	r1, r5
 800052c:	f002 f85c 	bl	80025e8 <__aeabi_dsub>
 8000530:	f002 fb70 	bl	8002c14 <__aeabi_d2iz>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	061b      	lsls	r3, r3, #24
 8000538:	469c      	mov	ip, r3
 800053a:	4460      	add	r0, ip
 800053c:	e7f1      	b.n	8000522 <__aeabi_d2uiz+0x1a>
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	41e00000 	.word	0x41e00000

08000544 <__aeabi_fadd>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	46c6      	mov	lr, r8
 8000548:	024e      	lsls	r6, r1, #9
 800054a:	0247      	lsls	r7, r0, #9
 800054c:	0a76      	lsrs	r6, r6, #9
 800054e:	0a7b      	lsrs	r3, r7, #9
 8000550:	0044      	lsls	r4, r0, #1
 8000552:	0fc5      	lsrs	r5, r0, #31
 8000554:	00f7      	lsls	r7, r6, #3
 8000556:	0048      	lsls	r0, r1, #1
 8000558:	4698      	mov	r8, r3
 800055a:	b500      	push	{lr}
 800055c:	0e24      	lsrs	r4, r4, #24
 800055e:	002a      	movs	r2, r5
 8000560:	00db      	lsls	r3, r3, #3
 8000562:	0e00      	lsrs	r0, r0, #24
 8000564:	0fc9      	lsrs	r1, r1, #31
 8000566:	46bc      	mov	ip, r7
 8000568:	428d      	cmp	r5, r1
 800056a:	d067      	beq.n	800063c <__aeabi_fadd+0xf8>
 800056c:	1a22      	subs	r2, r4, r0
 800056e:	2a00      	cmp	r2, #0
 8000570:	dc00      	bgt.n	8000574 <__aeabi_fadd+0x30>
 8000572:	e0a5      	b.n	80006c0 <__aeabi_fadd+0x17c>
 8000574:	2800      	cmp	r0, #0
 8000576:	d13a      	bne.n	80005ee <__aeabi_fadd+0xaa>
 8000578:	2f00      	cmp	r7, #0
 800057a:	d100      	bne.n	800057e <__aeabi_fadd+0x3a>
 800057c:	e093      	b.n	80006a6 <__aeabi_fadd+0x162>
 800057e:	1e51      	subs	r1, r2, #1
 8000580:	2900      	cmp	r1, #0
 8000582:	d000      	beq.n	8000586 <__aeabi_fadd+0x42>
 8000584:	e0bc      	b.n	8000700 <__aeabi_fadd+0x1bc>
 8000586:	2401      	movs	r4, #1
 8000588:	1bdb      	subs	r3, r3, r7
 800058a:	015a      	lsls	r2, r3, #5
 800058c:	d546      	bpl.n	800061c <__aeabi_fadd+0xd8>
 800058e:	019b      	lsls	r3, r3, #6
 8000590:	099e      	lsrs	r6, r3, #6
 8000592:	0030      	movs	r0, r6
 8000594:	f002 fc90 	bl	8002eb8 <__clzsi2>
 8000598:	3805      	subs	r0, #5
 800059a:	4086      	lsls	r6, r0
 800059c:	4284      	cmp	r4, r0
 800059e:	dd00      	ble.n	80005a2 <__aeabi_fadd+0x5e>
 80005a0:	e09d      	b.n	80006de <__aeabi_fadd+0x19a>
 80005a2:	1b04      	subs	r4, r0, r4
 80005a4:	0032      	movs	r2, r6
 80005a6:	2020      	movs	r0, #32
 80005a8:	3401      	adds	r4, #1
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	1b04      	subs	r4, r0, r4
 80005ae:	40a6      	lsls	r6, r4
 80005b0:	0033      	movs	r3, r6
 80005b2:	1e5e      	subs	r6, r3, #1
 80005b4:	41b3      	sbcs	r3, r6
 80005b6:	2400      	movs	r4, #0
 80005b8:	4313      	orrs	r3, r2
 80005ba:	075a      	lsls	r2, r3, #29
 80005bc:	d004      	beq.n	80005c8 <__aeabi_fadd+0x84>
 80005be:	220f      	movs	r2, #15
 80005c0:	401a      	ands	r2, r3
 80005c2:	2a04      	cmp	r2, #4
 80005c4:	d000      	beq.n	80005c8 <__aeabi_fadd+0x84>
 80005c6:	3304      	adds	r3, #4
 80005c8:	015a      	lsls	r2, r3, #5
 80005ca:	d529      	bpl.n	8000620 <__aeabi_fadd+0xdc>
 80005cc:	3401      	adds	r4, #1
 80005ce:	2cff      	cmp	r4, #255	; 0xff
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fadd+0x90>
 80005d2:	e081      	b.n	80006d8 <__aeabi_fadd+0x194>
 80005d4:	002a      	movs	r2, r5
 80005d6:	019b      	lsls	r3, r3, #6
 80005d8:	0a5b      	lsrs	r3, r3, #9
 80005da:	b2e4      	uxtb	r4, r4
 80005dc:	025b      	lsls	r3, r3, #9
 80005de:	05e4      	lsls	r4, r4, #23
 80005e0:	0a58      	lsrs	r0, r3, #9
 80005e2:	07d2      	lsls	r2, r2, #31
 80005e4:	4320      	orrs	r0, r4
 80005e6:	4310      	orrs	r0, r2
 80005e8:	bc04      	pop	{r2}
 80005ea:	4690      	mov	r8, r2
 80005ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ee:	2cff      	cmp	r4, #255	; 0xff
 80005f0:	d0e3      	beq.n	80005ba <__aeabi_fadd+0x76>
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	0038      	movs	r0, r7
 80005f6:	04c9      	lsls	r1, r1, #19
 80005f8:	4308      	orrs	r0, r1
 80005fa:	4684      	mov	ip, r0
 80005fc:	2a1b      	cmp	r2, #27
 80005fe:	dd00      	ble.n	8000602 <__aeabi_fadd+0xbe>
 8000600:	e082      	b.n	8000708 <__aeabi_fadd+0x1c4>
 8000602:	2020      	movs	r0, #32
 8000604:	4661      	mov	r1, ip
 8000606:	40d1      	lsrs	r1, r2
 8000608:	1a82      	subs	r2, r0, r2
 800060a:	4660      	mov	r0, ip
 800060c:	4090      	lsls	r0, r2
 800060e:	0002      	movs	r2, r0
 8000610:	1e50      	subs	r0, r2, #1
 8000612:	4182      	sbcs	r2, r0
 8000614:	430a      	orrs	r2, r1
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	015a      	lsls	r2, r3, #5
 800061a:	d4b8      	bmi.n	800058e <__aeabi_fadd+0x4a>
 800061c:	075a      	lsls	r2, r3, #29
 800061e:	d1ce      	bne.n	80005be <__aeabi_fadd+0x7a>
 8000620:	08de      	lsrs	r6, r3, #3
 8000622:	002a      	movs	r2, r5
 8000624:	2cff      	cmp	r4, #255	; 0xff
 8000626:	d13a      	bne.n	800069e <__aeabi_fadd+0x15a>
 8000628:	2e00      	cmp	r6, #0
 800062a:	d100      	bne.n	800062e <__aeabi_fadd+0xea>
 800062c:	e0ae      	b.n	800078c <__aeabi_fadd+0x248>
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	03db      	lsls	r3, r3, #15
 8000632:	4333      	orrs	r3, r6
 8000634:	025b      	lsls	r3, r3, #9
 8000636:	0a5b      	lsrs	r3, r3, #9
 8000638:	24ff      	movs	r4, #255	; 0xff
 800063a:	e7cf      	b.n	80005dc <__aeabi_fadd+0x98>
 800063c:	1a21      	subs	r1, r4, r0
 800063e:	2900      	cmp	r1, #0
 8000640:	dd52      	ble.n	80006e8 <__aeabi_fadd+0x1a4>
 8000642:	2800      	cmp	r0, #0
 8000644:	d031      	beq.n	80006aa <__aeabi_fadd+0x166>
 8000646:	2cff      	cmp	r4, #255	; 0xff
 8000648:	d0b7      	beq.n	80005ba <__aeabi_fadd+0x76>
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	003e      	movs	r6, r7
 800064e:	04c0      	lsls	r0, r0, #19
 8000650:	4306      	orrs	r6, r0
 8000652:	46b4      	mov	ip, r6
 8000654:	291b      	cmp	r1, #27
 8000656:	dd00      	ble.n	800065a <__aeabi_fadd+0x116>
 8000658:	e0aa      	b.n	80007b0 <__aeabi_fadd+0x26c>
 800065a:	2620      	movs	r6, #32
 800065c:	4660      	mov	r0, ip
 800065e:	40c8      	lsrs	r0, r1
 8000660:	1a71      	subs	r1, r6, r1
 8000662:	4666      	mov	r6, ip
 8000664:	408e      	lsls	r6, r1
 8000666:	0031      	movs	r1, r6
 8000668:	1e4e      	subs	r6, r1, #1
 800066a:	41b1      	sbcs	r1, r6
 800066c:	4301      	orrs	r1, r0
 800066e:	185b      	adds	r3, r3, r1
 8000670:	0159      	lsls	r1, r3, #5
 8000672:	d5d3      	bpl.n	800061c <__aeabi_fadd+0xd8>
 8000674:	3401      	adds	r4, #1
 8000676:	2cff      	cmp	r4, #255	; 0xff
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x138>
 800067a:	e087      	b.n	800078c <__aeabi_fadd+0x248>
 800067c:	2201      	movs	r2, #1
 800067e:	4978      	ldr	r1, [pc, #480]	; (8000860 <__aeabi_fadd+0x31c>)
 8000680:	401a      	ands	r2, r3
 8000682:	085b      	lsrs	r3, r3, #1
 8000684:	400b      	ands	r3, r1
 8000686:	4313      	orrs	r3, r2
 8000688:	e797      	b.n	80005ba <__aeabi_fadd+0x76>
 800068a:	2c00      	cmp	r4, #0
 800068c:	d000      	beq.n	8000690 <__aeabi_fadd+0x14c>
 800068e:	e0a7      	b.n	80007e0 <__aeabi_fadd+0x29c>
 8000690:	2b00      	cmp	r3, #0
 8000692:	d000      	beq.n	8000696 <__aeabi_fadd+0x152>
 8000694:	e0b6      	b.n	8000804 <__aeabi_fadd+0x2c0>
 8000696:	1e3b      	subs	r3, r7, #0
 8000698:	d162      	bne.n	8000760 <__aeabi_fadd+0x21c>
 800069a:	2600      	movs	r6, #0
 800069c:	2200      	movs	r2, #0
 800069e:	0273      	lsls	r3, r6, #9
 80006a0:	0a5b      	lsrs	r3, r3, #9
 80006a2:	b2e4      	uxtb	r4, r4
 80006a4:	e79a      	b.n	80005dc <__aeabi_fadd+0x98>
 80006a6:	0014      	movs	r4, r2
 80006a8:	e787      	b.n	80005ba <__aeabi_fadd+0x76>
 80006aa:	2f00      	cmp	r7, #0
 80006ac:	d04d      	beq.n	800074a <__aeabi_fadd+0x206>
 80006ae:	1e48      	subs	r0, r1, #1
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d157      	bne.n	8000764 <__aeabi_fadd+0x220>
 80006b4:	4463      	add	r3, ip
 80006b6:	2401      	movs	r4, #1
 80006b8:	015a      	lsls	r2, r3, #5
 80006ba:	d5af      	bpl.n	800061c <__aeabi_fadd+0xd8>
 80006bc:	2402      	movs	r4, #2
 80006be:	e7dd      	b.n	800067c <__aeabi_fadd+0x138>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	d124      	bne.n	800070e <__aeabi_fadd+0x1ca>
 80006c4:	1c62      	adds	r2, r4, #1
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	2a01      	cmp	r2, #1
 80006ca:	ddde      	ble.n	800068a <__aeabi_fadd+0x146>
 80006cc:	1bde      	subs	r6, r3, r7
 80006ce:	0172      	lsls	r2, r6, #5
 80006d0:	d535      	bpl.n	800073e <__aeabi_fadd+0x1fa>
 80006d2:	1afe      	subs	r6, r7, r3
 80006d4:	000d      	movs	r5, r1
 80006d6:	e75c      	b.n	8000592 <__aeabi_fadd+0x4e>
 80006d8:	002a      	movs	r2, r5
 80006da:	2300      	movs	r3, #0
 80006dc:	e77e      	b.n	80005dc <__aeabi_fadd+0x98>
 80006de:	0033      	movs	r3, r6
 80006e0:	4a60      	ldr	r2, [pc, #384]	; (8000864 <__aeabi_fadd+0x320>)
 80006e2:	1a24      	subs	r4, r4, r0
 80006e4:	4013      	ands	r3, r2
 80006e6:	e768      	b.n	80005ba <__aeabi_fadd+0x76>
 80006e8:	2900      	cmp	r1, #0
 80006ea:	d163      	bne.n	80007b4 <__aeabi_fadd+0x270>
 80006ec:	1c61      	adds	r1, r4, #1
 80006ee:	b2c8      	uxtb	r0, r1
 80006f0:	2801      	cmp	r0, #1
 80006f2:	dd4e      	ble.n	8000792 <__aeabi_fadd+0x24e>
 80006f4:	29ff      	cmp	r1, #255	; 0xff
 80006f6:	d049      	beq.n	800078c <__aeabi_fadd+0x248>
 80006f8:	4463      	add	r3, ip
 80006fa:	085b      	lsrs	r3, r3, #1
 80006fc:	000c      	movs	r4, r1
 80006fe:	e75c      	b.n	80005ba <__aeabi_fadd+0x76>
 8000700:	2aff      	cmp	r2, #255	; 0xff
 8000702:	d041      	beq.n	8000788 <__aeabi_fadd+0x244>
 8000704:	000a      	movs	r2, r1
 8000706:	e779      	b.n	80005fc <__aeabi_fadd+0xb8>
 8000708:	2201      	movs	r2, #1
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	e784      	b.n	8000618 <__aeabi_fadd+0xd4>
 800070e:	2c00      	cmp	r4, #0
 8000710:	d01d      	beq.n	800074e <__aeabi_fadd+0x20a>
 8000712:	28ff      	cmp	r0, #255	; 0xff
 8000714:	d022      	beq.n	800075c <__aeabi_fadd+0x218>
 8000716:	2480      	movs	r4, #128	; 0x80
 8000718:	04e4      	lsls	r4, r4, #19
 800071a:	4252      	negs	r2, r2
 800071c:	4323      	orrs	r3, r4
 800071e:	2a1b      	cmp	r2, #27
 8000720:	dd00      	ble.n	8000724 <__aeabi_fadd+0x1e0>
 8000722:	e08a      	b.n	800083a <__aeabi_fadd+0x2f6>
 8000724:	001c      	movs	r4, r3
 8000726:	2520      	movs	r5, #32
 8000728:	40d4      	lsrs	r4, r2
 800072a:	1aaa      	subs	r2, r5, r2
 800072c:	4093      	lsls	r3, r2
 800072e:	1e5a      	subs	r2, r3, #1
 8000730:	4193      	sbcs	r3, r2
 8000732:	4323      	orrs	r3, r4
 8000734:	4662      	mov	r2, ip
 8000736:	0004      	movs	r4, r0
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	000d      	movs	r5, r1
 800073c:	e725      	b.n	800058a <__aeabi_fadd+0x46>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x200>
 8000742:	e726      	b.n	8000592 <__aeabi_fadd+0x4e>
 8000744:	2200      	movs	r2, #0
 8000746:	2400      	movs	r4, #0
 8000748:	e7a9      	b.n	800069e <__aeabi_fadd+0x15a>
 800074a:	000c      	movs	r4, r1
 800074c:	e735      	b.n	80005ba <__aeabi_fadd+0x76>
 800074e:	2b00      	cmp	r3, #0
 8000750:	d04d      	beq.n	80007ee <__aeabi_fadd+0x2aa>
 8000752:	43d2      	mvns	r2, r2
 8000754:	2a00      	cmp	r2, #0
 8000756:	d0ed      	beq.n	8000734 <__aeabi_fadd+0x1f0>
 8000758:	28ff      	cmp	r0, #255	; 0xff
 800075a:	d1e0      	bne.n	800071e <__aeabi_fadd+0x1da>
 800075c:	4663      	mov	r3, ip
 800075e:	24ff      	movs	r4, #255	; 0xff
 8000760:	000d      	movs	r5, r1
 8000762:	e72a      	b.n	80005ba <__aeabi_fadd+0x76>
 8000764:	29ff      	cmp	r1, #255	; 0xff
 8000766:	d00f      	beq.n	8000788 <__aeabi_fadd+0x244>
 8000768:	0001      	movs	r1, r0
 800076a:	e773      	b.n	8000654 <__aeabi_fadd+0x110>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d061      	beq.n	8000834 <__aeabi_fadd+0x2f0>
 8000770:	24ff      	movs	r4, #255	; 0xff
 8000772:	2f00      	cmp	r7, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x234>
 8000776:	e720      	b.n	80005ba <__aeabi_fadd+0x76>
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4641      	mov	r1, r8
 800077c:	03d2      	lsls	r2, r2, #15
 800077e:	4211      	tst	r1, r2
 8000780:	d002      	beq.n	8000788 <__aeabi_fadd+0x244>
 8000782:	4216      	tst	r6, r2
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x244>
 8000786:	003b      	movs	r3, r7
 8000788:	24ff      	movs	r4, #255	; 0xff
 800078a:	e716      	b.n	80005ba <__aeabi_fadd+0x76>
 800078c:	24ff      	movs	r4, #255	; 0xff
 800078e:	2300      	movs	r3, #0
 8000790:	e724      	b.n	80005dc <__aeabi_fadd+0x98>
 8000792:	2c00      	cmp	r4, #0
 8000794:	d1ea      	bne.n	800076c <__aeabi_fadd+0x228>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d058      	beq.n	800084c <__aeabi_fadd+0x308>
 800079a:	2f00      	cmp	r7, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fadd+0x25c>
 800079e:	e70c      	b.n	80005ba <__aeabi_fadd+0x76>
 80007a0:	4463      	add	r3, ip
 80007a2:	015a      	lsls	r2, r3, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fadd+0x264>
 80007a6:	e739      	b.n	800061c <__aeabi_fadd+0xd8>
 80007a8:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <__aeabi_fadd+0x320>)
 80007aa:	000c      	movs	r4, r1
 80007ac:	4013      	ands	r3, r2
 80007ae:	e704      	b.n	80005ba <__aeabi_fadd+0x76>
 80007b0:	2101      	movs	r1, #1
 80007b2:	e75c      	b.n	800066e <__aeabi_fadd+0x12a>
 80007b4:	2c00      	cmp	r4, #0
 80007b6:	d11e      	bne.n	80007f6 <__aeabi_fadd+0x2b2>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d040      	beq.n	800083e <__aeabi_fadd+0x2fa>
 80007bc:	43c9      	mvns	r1, r1
 80007be:	2900      	cmp	r1, #0
 80007c0:	d00b      	beq.n	80007da <__aeabi_fadd+0x296>
 80007c2:	28ff      	cmp	r0, #255	; 0xff
 80007c4:	d036      	beq.n	8000834 <__aeabi_fadd+0x2f0>
 80007c6:	291b      	cmp	r1, #27
 80007c8:	dc47      	bgt.n	800085a <__aeabi_fadd+0x316>
 80007ca:	001c      	movs	r4, r3
 80007cc:	2620      	movs	r6, #32
 80007ce:	40cc      	lsrs	r4, r1
 80007d0:	1a71      	subs	r1, r6, r1
 80007d2:	408b      	lsls	r3, r1
 80007d4:	1e59      	subs	r1, r3, #1
 80007d6:	418b      	sbcs	r3, r1
 80007d8:	4323      	orrs	r3, r4
 80007da:	4463      	add	r3, ip
 80007dc:	0004      	movs	r4, r0
 80007de:	e747      	b.n	8000670 <__aeabi_fadd+0x12c>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d118      	bne.n	8000816 <__aeabi_fadd+0x2d2>
 80007e4:	1e3b      	subs	r3, r7, #0
 80007e6:	d02d      	beq.n	8000844 <__aeabi_fadd+0x300>
 80007e8:	000d      	movs	r5, r1
 80007ea:	24ff      	movs	r4, #255	; 0xff
 80007ec:	e6e5      	b.n	80005ba <__aeabi_fadd+0x76>
 80007ee:	003b      	movs	r3, r7
 80007f0:	0004      	movs	r4, r0
 80007f2:	000d      	movs	r5, r1
 80007f4:	e6e1      	b.n	80005ba <__aeabi_fadd+0x76>
 80007f6:	28ff      	cmp	r0, #255	; 0xff
 80007f8:	d01c      	beq.n	8000834 <__aeabi_fadd+0x2f0>
 80007fa:	2480      	movs	r4, #128	; 0x80
 80007fc:	04e4      	lsls	r4, r4, #19
 80007fe:	4249      	negs	r1, r1
 8000800:	4323      	orrs	r3, r4
 8000802:	e7e0      	b.n	80007c6 <__aeabi_fadd+0x282>
 8000804:	2f00      	cmp	r7, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x2c6>
 8000808:	e6d7      	b.n	80005ba <__aeabi_fadd+0x76>
 800080a:	1bde      	subs	r6, r3, r7
 800080c:	0172      	lsls	r2, r6, #5
 800080e:	d51f      	bpl.n	8000850 <__aeabi_fadd+0x30c>
 8000810:	1afb      	subs	r3, r7, r3
 8000812:	000d      	movs	r5, r1
 8000814:	e6d1      	b.n	80005ba <__aeabi_fadd+0x76>
 8000816:	24ff      	movs	r4, #255	; 0xff
 8000818:	2f00      	cmp	r7, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x2da>
 800081c:	e6cd      	b.n	80005ba <__aeabi_fadd+0x76>
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	4640      	mov	r0, r8
 8000822:	03d2      	lsls	r2, r2, #15
 8000824:	4210      	tst	r0, r2
 8000826:	d0af      	beq.n	8000788 <__aeabi_fadd+0x244>
 8000828:	4216      	tst	r6, r2
 800082a:	d1ad      	bne.n	8000788 <__aeabi_fadd+0x244>
 800082c:	003b      	movs	r3, r7
 800082e:	000d      	movs	r5, r1
 8000830:	24ff      	movs	r4, #255	; 0xff
 8000832:	e6c2      	b.n	80005ba <__aeabi_fadd+0x76>
 8000834:	4663      	mov	r3, ip
 8000836:	24ff      	movs	r4, #255	; 0xff
 8000838:	e6bf      	b.n	80005ba <__aeabi_fadd+0x76>
 800083a:	2301      	movs	r3, #1
 800083c:	e77a      	b.n	8000734 <__aeabi_fadd+0x1f0>
 800083e:	003b      	movs	r3, r7
 8000840:	0004      	movs	r4, r0
 8000842:	e6ba      	b.n	80005ba <__aeabi_fadd+0x76>
 8000844:	2680      	movs	r6, #128	; 0x80
 8000846:	2200      	movs	r2, #0
 8000848:	03f6      	lsls	r6, r6, #15
 800084a:	e6f0      	b.n	800062e <__aeabi_fadd+0xea>
 800084c:	003b      	movs	r3, r7
 800084e:	e6b4      	b.n	80005ba <__aeabi_fadd+0x76>
 8000850:	1e33      	subs	r3, r6, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x312>
 8000854:	e6e2      	b.n	800061c <__aeabi_fadd+0xd8>
 8000856:	2200      	movs	r2, #0
 8000858:	e721      	b.n	800069e <__aeabi_fadd+0x15a>
 800085a:	2301      	movs	r3, #1
 800085c:	e7bd      	b.n	80007da <__aeabi_fadd+0x296>
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	7dffffff 	.word	0x7dffffff
 8000864:	fbffffff 	.word	0xfbffffff

08000868 <__aeabi_fdiv>:
 8000868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086a:	4657      	mov	r7, sl
 800086c:	464e      	mov	r6, r9
 800086e:	46de      	mov	lr, fp
 8000870:	4645      	mov	r5, r8
 8000872:	b5e0      	push	{r5, r6, r7, lr}
 8000874:	0244      	lsls	r4, r0, #9
 8000876:	0043      	lsls	r3, r0, #1
 8000878:	0fc6      	lsrs	r6, r0, #31
 800087a:	b083      	sub	sp, #12
 800087c:	1c0f      	adds	r7, r1, #0
 800087e:	0a64      	lsrs	r4, r4, #9
 8000880:	0e1b      	lsrs	r3, r3, #24
 8000882:	46b2      	mov	sl, r6
 8000884:	d053      	beq.n	800092e <__aeabi_fdiv+0xc6>
 8000886:	2bff      	cmp	r3, #255	; 0xff
 8000888:	d027      	beq.n	80008da <__aeabi_fdiv+0x72>
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	00e4      	lsls	r4, r4, #3
 800088e:	04d2      	lsls	r2, r2, #19
 8000890:	4314      	orrs	r4, r2
 8000892:	227f      	movs	r2, #127	; 0x7f
 8000894:	4252      	negs	r2, r2
 8000896:	4690      	mov	r8, r2
 8000898:	4498      	add	r8, r3
 800089a:	2300      	movs	r3, #0
 800089c:	4699      	mov	r9, r3
 800089e:	469b      	mov	fp, r3
 80008a0:	027d      	lsls	r5, r7, #9
 80008a2:	0078      	lsls	r0, r7, #1
 80008a4:	0ffb      	lsrs	r3, r7, #31
 80008a6:	0a6d      	lsrs	r5, r5, #9
 80008a8:	0e00      	lsrs	r0, r0, #24
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	d024      	beq.n	80008f8 <__aeabi_fdiv+0x90>
 80008ae:	28ff      	cmp	r0, #255	; 0xff
 80008b0:	d046      	beq.n	8000940 <__aeabi_fdiv+0xd8>
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	2100      	movs	r1, #0
 80008b6:	00ed      	lsls	r5, r5, #3
 80008b8:	04db      	lsls	r3, r3, #19
 80008ba:	431d      	orrs	r5, r3
 80008bc:	387f      	subs	r0, #127	; 0x7f
 80008be:	4647      	mov	r7, r8
 80008c0:	1a38      	subs	r0, r7, r0
 80008c2:	464f      	mov	r7, r9
 80008c4:	430f      	orrs	r7, r1
 80008c6:	00bf      	lsls	r7, r7, #2
 80008c8:	46b9      	mov	r9, r7
 80008ca:	0033      	movs	r3, r6
 80008cc:	9a00      	ldr	r2, [sp, #0]
 80008ce:	4f87      	ldr	r7, [pc, #540]	; (8000aec <__aeabi_fdiv+0x284>)
 80008d0:	4053      	eors	r3, r2
 80008d2:	464a      	mov	r2, r9
 80008d4:	58ba      	ldr	r2, [r7, r2]
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	4697      	mov	pc, r2
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d14e      	bne.n	800097c <__aeabi_fdiv+0x114>
 80008de:	2308      	movs	r3, #8
 80008e0:	4699      	mov	r9, r3
 80008e2:	33f7      	adds	r3, #247	; 0xf7
 80008e4:	4698      	mov	r8, r3
 80008e6:	3bfd      	subs	r3, #253	; 0xfd
 80008e8:	469b      	mov	fp, r3
 80008ea:	027d      	lsls	r5, r7, #9
 80008ec:	0078      	lsls	r0, r7, #1
 80008ee:	0ffb      	lsrs	r3, r7, #31
 80008f0:	0a6d      	lsrs	r5, r5, #9
 80008f2:	0e00      	lsrs	r0, r0, #24
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	d1da      	bne.n	80008ae <__aeabi_fdiv+0x46>
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d126      	bne.n	800094a <__aeabi_fdiv+0xe2>
 80008fc:	2000      	movs	r0, #0
 80008fe:	2101      	movs	r1, #1
 8000900:	0033      	movs	r3, r6
 8000902:	9a00      	ldr	r2, [sp, #0]
 8000904:	4f7a      	ldr	r7, [pc, #488]	; (8000af0 <__aeabi_fdiv+0x288>)
 8000906:	4053      	eors	r3, r2
 8000908:	4642      	mov	r2, r8
 800090a:	1a10      	subs	r0, r2, r0
 800090c:	464a      	mov	r2, r9
 800090e:	430a      	orrs	r2, r1
 8000910:	0092      	lsls	r2, r2, #2
 8000912:	58ba      	ldr	r2, [r7, r2]
 8000914:	001d      	movs	r5, r3
 8000916:	4697      	mov	pc, r2
 8000918:	9b00      	ldr	r3, [sp, #0]
 800091a:	002c      	movs	r4, r5
 800091c:	469a      	mov	sl, r3
 800091e:	468b      	mov	fp, r1
 8000920:	465b      	mov	r3, fp
 8000922:	2b02      	cmp	r3, #2
 8000924:	d131      	bne.n	800098a <__aeabi_fdiv+0x122>
 8000926:	4653      	mov	r3, sl
 8000928:	21ff      	movs	r1, #255	; 0xff
 800092a:	2400      	movs	r4, #0
 800092c:	e038      	b.n	80009a0 <__aeabi_fdiv+0x138>
 800092e:	2c00      	cmp	r4, #0
 8000930:	d117      	bne.n	8000962 <__aeabi_fdiv+0xfa>
 8000932:	2304      	movs	r3, #4
 8000934:	4699      	mov	r9, r3
 8000936:	2300      	movs	r3, #0
 8000938:	4698      	mov	r8, r3
 800093a:	3301      	adds	r3, #1
 800093c:	469b      	mov	fp, r3
 800093e:	e7af      	b.n	80008a0 <__aeabi_fdiv+0x38>
 8000940:	20ff      	movs	r0, #255	; 0xff
 8000942:	2d00      	cmp	r5, #0
 8000944:	d10b      	bne.n	800095e <__aeabi_fdiv+0xf6>
 8000946:	2102      	movs	r1, #2
 8000948:	e7da      	b.n	8000900 <__aeabi_fdiv+0x98>
 800094a:	0028      	movs	r0, r5
 800094c:	f002 fab4 	bl	8002eb8 <__clzsi2>
 8000950:	1f43      	subs	r3, r0, #5
 8000952:	409d      	lsls	r5, r3
 8000954:	2376      	movs	r3, #118	; 0x76
 8000956:	425b      	negs	r3, r3
 8000958:	1a18      	subs	r0, r3, r0
 800095a:	2100      	movs	r1, #0
 800095c:	e7af      	b.n	80008be <__aeabi_fdiv+0x56>
 800095e:	2103      	movs	r1, #3
 8000960:	e7ad      	b.n	80008be <__aeabi_fdiv+0x56>
 8000962:	0020      	movs	r0, r4
 8000964:	f002 faa8 	bl	8002eb8 <__clzsi2>
 8000968:	1f43      	subs	r3, r0, #5
 800096a:	409c      	lsls	r4, r3
 800096c:	2376      	movs	r3, #118	; 0x76
 800096e:	425b      	negs	r3, r3
 8000970:	1a1b      	subs	r3, r3, r0
 8000972:	4698      	mov	r8, r3
 8000974:	2300      	movs	r3, #0
 8000976:	4699      	mov	r9, r3
 8000978:	469b      	mov	fp, r3
 800097a:	e791      	b.n	80008a0 <__aeabi_fdiv+0x38>
 800097c:	230c      	movs	r3, #12
 800097e:	4699      	mov	r9, r3
 8000980:	33f3      	adds	r3, #243	; 0xf3
 8000982:	4698      	mov	r8, r3
 8000984:	3bfc      	subs	r3, #252	; 0xfc
 8000986:	469b      	mov	fp, r3
 8000988:	e78a      	b.n	80008a0 <__aeabi_fdiv+0x38>
 800098a:	2b03      	cmp	r3, #3
 800098c:	d100      	bne.n	8000990 <__aeabi_fdiv+0x128>
 800098e:	e0a5      	b.n	8000adc <__aeabi_fdiv+0x274>
 8000990:	4655      	mov	r5, sl
 8000992:	2b01      	cmp	r3, #1
 8000994:	d000      	beq.n	8000998 <__aeabi_fdiv+0x130>
 8000996:	e081      	b.n	8000a9c <__aeabi_fdiv+0x234>
 8000998:	2301      	movs	r3, #1
 800099a:	2100      	movs	r1, #0
 800099c:	2400      	movs	r4, #0
 800099e:	402b      	ands	r3, r5
 80009a0:	0264      	lsls	r4, r4, #9
 80009a2:	05c9      	lsls	r1, r1, #23
 80009a4:	0a60      	lsrs	r0, r4, #9
 80009a6:	07db      	lsls	r3, r3, #31
 80009a8:	4308      	orrs	r0, r1
 80009aa:	4318      	orrs	r0, r3
 80009ac:	b003      	add	sp, #12
 80009ae:	bc3c      	pop	{r2, r3, r4, r5}
 80009b0:	4690      	mov	r8, r2
 80009b2:	4699      	mov	r9, r3
 80009b4:	46a2      	mov	sl, r4
 80009b6:	46ab      	mov	fp, r5
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ba:	2480      	movs	r4, #128	; 0x80
 80009bc:	2300      	movs	r3, #0
 80009be:	03e4      	lsls	r4, r4, #15
 80009c0:	21ff      	movs	r1, #255	; 0xff
 80009c2:	e7ed      	b.n	80009a0 <__aeabi_fdiv+0x138>
 80009c4:	21ff      	movs	r1, #255	; 0xff
 80009c6:	2400      	movs	r4, #0
 80009c8:	e7ea      	b.n	80009a0 <__aeabi_fdiv+0x138>
 80009ca:	2301      	movs	r3, #1
 80009cc:	1a59      	subs	r1, r3, r1
 80009ce:	291b      	cmp	r1, #27
 80009d0:	dd66      	ble.n	8000aa0 <__aeabi_fdiv+0x238>
 80009d2:	9a01      	ldr	r2, [sp, #4]
 80009d4:	4013      	ands	r3, r2
 80009d6:	2100      	movs	r1, #0
 80009d8:	2400      	movs	r4, #0
 80009da:	e7e1      	b.n	80009a0 <__aeabi_fdiv+0x138>
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	03db      	lsls	r3, r3, #15
 80009e0:	421c      	tst	r4, r3
 80009e2:	d038      	beq.n	8000a56 <__aeabi_fdiv+0x1ee>
 80009e4:	421d      	tst	r5, r3
 80009e6:	d051      	beq.n	8000a8c <__aeabi_fdiv+0x224>
 80009e8:	431c      	orrs	r4, r3
 80009ea:	0264      	lsls	r4, r4, #9
 80009ec:	0a64      	lsrs	r4, r4, #9
 80009ee:	0033      	movs	r3, r6
 80009f0:	21ff      	movs	r1, #255	; 0xff
 80009f2:	e7d5      	b.n	80009a0 <__aeabi_fdiv+0x138>
 80009f4:	0163      	lsls	r3, r4, #5
 80009f6:	016c      	lsls	r4, r5, #5
 80009f8:	42a3      	cmp	r3, r4
 80009fa:	d23b      	bcs.n	8000a74 <__aeabi_fdiv+0x20c>
 80009fc:	261b      	movs	r6, #27
 80009fe:	2100      	movs	r1, #0
 8000a00:	3801      	subs	r0, #1
 8000a02:	2501      	movs	r5, #1
 8000a04:	001f      	movs	r7, r3
 8000a06:	0049      	lsls	r1, r1, #1
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2f00      	cmp	r7, #0
 8000a0c:	db01      	blt.n	8000a12 <__aeabi_fdiv+0x1aa>
 8000a0e:	429c      	cmp	r4, r3
 8000a10:	d801      	bhi.n	8000a16 <__aeabi_fdiv+0x1ae>
 8000a12:	1b1b      	subs	r3, r3, r4
 8000a14:	4329      	orrs	r1, r5
 8000a16:	3e01      	subs	r6, #1
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d1f3      	bne.n	8000a04 <__aeabi_fdiv+0x19c>
 8000a1c:	001c      	movs	r4, r3
 8000a1e:	1e63      	subs	r3, r4, #1
 8000a20:	419c      	sbcs	r4, r3
 8000a22:	430c      	orrs	r4, r1
 8000a24:	0001      	movs	r1, r0
 8000a26:	317f      	adds	r1, #127	; 0x7f
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	ddce      	ble.n	80009ca <__aeabi_fdiv+0x162>
 8000a2c:	0763      	lsls	r3, r4, #29
 8000a2e:	d004      	beq.n	8000a3a <__aeabi_fdiv+0x1d2>
 8000a30:	230f      	movs	r3, #15
 8000a32:	4023      	ands	r3, r4
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fdiv+0x1d2>
 8000a38:	3404      	adds	r4, #4
 8000a3a:	0123      	lsls	r3, r4, #4
 8000a3c:	d503      	bpl.n	8000a46 <__aeabi_fdiv+0x1de>
 8000a3e:	0001      	movs	r1, r0
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <__aeabi_fdiv+0x28c>)
 8000a42:	3180      	adds	r1, #128	; 0x80
 8000a44:	401c      	ands	r4, r3
 8000a46:	29fe      	cmp	r1, #254	; 0xfe
 8000a48:	dd0d      	ble.n	8000a66 <__aeabi_fdiv+0x1fe>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9a01      	ldr	r2, [sp, #4]
 8000a4e:	21ff      	movs	r1, #255	; 0xff
 8000a50:	4013      	ands	r3, r2
 8000a52:	2400      	movs	r4, #0
 8000a54:	e7a4      	b.n	80009a0 <__aeabi_fdiv+0x138>
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	03db      	lsls	r3, r3, #15
 8000a5a:	431c      	orrs	r4, r3
 8000a5c:	0264      	lsls	r4, r4, #9
 8000a5e:	0a64      	lsrs	r4, r4, #9
 8000a60:	0033      	movs	r3, r6
 8000a62:	21ff      	movs	r1, #255	; 0xff
 8000a64:	e79c      	b.n	80009a0 <__aeabi_fdiv+0x138>
 8000a66:	2301      	movs	r3, #1
 8000a68:	9a01      	ldr	r2, [sp, #4]
 8000a6a:	01a4      	lsls	r4, r4, #6
 8000a6c:	0a64      	lsrs	r4, r4, #9
 8000a6e:	b2c9      	uxtb	r1, r1
 8000a70:	4013      	ands	r3, r2
 8000a72:	e795      	b.n	80009a0 <__aeabi_fdiv+0x138>
 8000a74:	1b1b      	subs	r3, r3, r4
 8000a76:	261a      	movs	r6, #26
 8000a78:	2101      	movs	r1, #1
 8000a7a:	e7c2      	b.n	8000a02 <__aeabi_fdiv+0x19a>
 8000a7c:	9b00      	ldr	r3, [sp, #0]
 8000a7e:	468b      	mov	fp, r1
 8000a80:	469a      	mov	sl, r3
 8000a82:	2400      	movs	r4, #0
 8000a84:	e74c      	b.n	8000920 <__aeabi_fdiv+0xb8>
 8000a86:	0263      	lsls	r3, r4, #9
 8000a88:	d5e5      	bpl.n	8000a56 <__aeabi_fdiv+0x1ee>
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	2480      	movs	r4, #128	; 0x80
 8000a8e:	03e4      	lsls	r4, r4, #15
 8000a90:	432c      	orrs	r4, r5
 8000a92:	0264      	lsls	r4, r4, #9
 8000a94:	0a64      	lsrs	r4, r4, #9
 8000a96:	9b00      	ldr	r3, [sp, #0]
 8000a98:	21ff      	movs	r1, #255	; 0xff
 8000a9a:	e781      	b.n	80009a0 <__aeabi_fdiv+0x138>
 8000a9c:	9501      	str	r5, [sp, #4]
 8000a9e:	e7c1      	b.n	8000a24 <__aeabi_fdiv+0x1bc>
 8000aa0:	0023      	movs	r3, r4
 8000aa2:	2020      	movs	r0, #32
 8000aa4:	40cb      	lsrs	r3, r1
 8000aa6:	1a41      	subs	r1, r0, r1
 8000aa8:	408c      	lsls	r4, r1
 8000aaa:	1e61      	subs	r1, r4, #1
 8000aac:	418c      	sbcs	r4, r1
 8000aae:	431c      	orrs	r4, r3
 8000ab0:	0763      	lsls	r3, r4, #29
 8000ab2:	d004      	beq.n	8000abe <__aeabi_fdiv+0x256>
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	4023      	ands	r3, r4
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d000      	beq.n	8000abe <__aeabi_fdiv+0x256>
 8000abc:	3404      	adds	r4, #4
 8000abe:	0163      	lsls	r3, r4, #5
 8000ac0:	d505      	bpl.n	8000ace <__aeabi_fdiv+0x266>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	9a01      	ldr	r2, [sp, #4]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2400      	movs	r4, #0
 8000acc:	e768      	b.n	80009a0 <__aeabi_fdiv+0x138>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9a01      	ldr	r2, [sp, #4]
 8000ad2:	01a4      	lsls	r4, r4, #6
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2100      	movs	r1, #0
 8000ada:	e761      	b.n	80009a0 <__aeabi_fdiv+0x138>
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	03db      	lsls	r3, r3, #15
 8000ae0:	431c      	orrs	r4, r3
 8000ae2:	0264      	lsls	r4, r4, #9
 8000ae4:	0a64      	lsrs	r4, r4, #9
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	21ff      	movs	r1, #255	; 0xff
 8000aea:	e759      	b.n	80009a0 <__aeabi_fdiv+0x138>
 8000aec:	080077e0 	.word	0x080077e0
 8000af0:	08007820 	.word	0x08007820
 8000af4:	f7ffffff 	.word	0xf7ffffff

08000af8 <__eqsf2>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	0042      	lsls	r2, r0, #1
 8000afc:	0245      	lsls	r5, r0, #9
 8000afe:	024e      	lsls	r6, r1, #9
 8000b00:	004c      	lsls	r4, r1, #1
 8000b02:	0fc3      	lsrs	r3, r0, #31
 8000b04:	0a6d      	lsrs	r5, r5, #9
 8000b06:	0e12      	lsrs	r2, r2, #24
 8000b08:	0a76      	lsrs	r6, r6, #9
 8000b0a:	0e24      	lsrs	r4, r4, #24
 8000b0c:	0fc9      	lsrs	r1, r1, #31
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2aff      	cmp	r2, #255	; 0xff
 8000b12:	d006      	beq.n	8000b22 <__eqsf2+0x2a>
 8000b14:	2cff      	cmp	r4, #255	; 0xff
 8000b16:	d003      	beq.n	8000b20 <__eqsf2+0x28>
 8000b18:	42a2      	cmp	r2, r4
 8000b1a:	d101      	bne.n	8000b20 <__eqsf2+0x28>
 8000b1c:	42b5      	cmp	r5, r6
 8000b1e:	d006      	beq.n	8000b2e <__eqsf2+0x36>
 8000b20:	bd70      	pop	{r4, r5, r6, pc}
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d1fc      	bne.n	8000b20 <__eqsf2+0x28>
 8000b26:	2cff      	cmp	r4, #255	; 0xff
 8000b28:	d1fa      	bne.n	8000b20 <__eqsf2+0x28>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d1f8      	bne.n	8000b20 <__eqsf2+0x28>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d006      	beq.n	8000b40 <__eqsf2+0x48>
 8000b32:	2001      	movs	r0, #1
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d1f3      	bne.n	8000b20 <__eqsf2+0x28>
 8000b38:	0028      	movs	r0, r5
 8000b3a:	1e45      	subs	r5, r0, #1
 8000b3c:	41a8      	sbcs	r0, r5
 8000b3e:	e7ef      	b.n	8000b20 <__eqsf2+0x28>
 8000b40:	2000      	movs	r0, #0
 8000b42:	e7ed      	b.n	8000b20 <__eqsf2+0x28>

08000b44 <__gesf2>:
 8000b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b46:	0042      	lsls	r2, r0, #1
 8000b48:	0245      	lsls	r5, r0, #9
 8000b4a:	024c      	lsls	r4, r1, #9
 8000b4c:	0fc3      	lsrs	r3, r0, #31
 8000b4e:	0048      	lsls	r0, r1, #1
 8000b50:	0a6d      	lsrs	r5, r5, #9
 8000b52:	0e12      	lsrs	r2, r2, #24
 8000b54:	0a64      	lsrs	r4, r4, #9
 8000b56:	0e00      	lsrs	r0, r0, #24
 8000b58:	0fc9      	lsrs	r1, r1, #31
 8000b5a:	2aff      	cmp	r2, #255	; 0xff
 8000b5c:	d01e      	beq.n	8000b9c <__gesf2+0x58>
 8000b5e:	28ff      	cmp	r0, #255	; 0xff
 8000b60:	d021      	beq.n	8000ba6 <__gesf2+0x62>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d10a      	bne.n	8000b7c <__gesf2+0x38>
 8000b66:	426e      	negs	r6, r5
 8000b68:	416e      	adcs	r6, r5
 8000b6a:	b2f6      	uxtb	r6, r6
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d10f      	bne.n	8000b90 <__gesf2+0x4c>
 8000b70:	2c00      	cmp	r4, #0
 8000b72:	d10d      	bne.n	8000b90 <__gesf2+0x4c>
 8000b74:	2000      	movs	r0, #0
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d009      	beq.n	8000b8e <__gesf2+0x4a>
 8000b7a:	e005      	b.n	8000b88 <__gesf2+0x44>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d101      	bne.n	8000b84 <__gesf2+0x40>
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d001      	beq.n	8000b88 <__gesf2+0x44>
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d011      	beq.n	8000bac <__gesf2+0x68>
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4258      	negs	r0, r3
 8000b8c:	4308      	orrs	r0, r1
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b90:	2e00      	cmp	r6, #0
 8000b92:	d0f7      	beq.n	8000b84 <__gesf2+0x40>
 8000b94:	2001      	movs	r0, #1
 8000b96:	3901      	subs	r1, #1
 8000b98:	4308      	orrs	r0, r1
 8000b9a:	e7f8      	b.n	8000b8e <__gesf2+0x4a>
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d0de      	beq.n	8000b5e <__gesf2+0x1a>
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	e7f3      	b.n	8000b8e <__gesf2+0x4a>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d0db      	beq.n	8000b62 <__gesf2+0x1e>
 8000baa:	e7f9      	b.n	8000ba0 <__gesf2+0x5c>
 8000bac:	4282      	cmp	r2, r0
 8000bae:	dceb      	bgt.n	8000b88 <__gesf2+0x44>
 8000bb0:	db04      	blt.n	8000bbc <__gesf2+0x78>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d8e8      	bhi.n	8000b88 <__gesf2+0x44>
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	42a5      	cmp	r5, r4
 8000bba:	d2e8      	bcs.n	8000b8e <__gesf2+0x4a>
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	1e58      	subs	r0, r3, #1
 8000bc0:	4308      	orrs	r0, r1
 8000bc2:	e7e4      	b.n	8000b8e <__gesf2+0x4a>

08000bc4 <__lesf2>:
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	0042      	lsls	r2, r0, #1
 8000bc8:	024d      	lsls	r5, r1, #9
 8000bca:	004c      	lsls	r4, r1, #1
 8000bcc:	0246      	lsls	r6, r0, #9
 8000bce:	0a76      	lsrs	r6, r6, #9
 8000bd0:	0e12      	lsrs	r2, r2, #24
 8000bd2:	0fc3      	lsrs	r3, r0, #31
 8000bd4:	0a6d      	lsrs	r5, r5, #9
 8000bd6:	0e24      	lsrs	r4, r4, #24
 8000bd8:	0fc9      	lsrs	r1, r1, #31
 8000bda:	2aff      	cmp	r2, #255	; 0xff
 8000bdc:	d016      	beq.n	8000c0c <__lesf2+0x48>
 8000bde:	2cff      	cmp	r4, #255	; 0xff
 8000be0:	d018      	beq.n	8000c14 <__lesf2+0x50>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d10a      	bne.n	8000bfc <__lesf2+0x38>
 8000be6:	4270      	negs	r0, r6
 8000be8:	4170      	adcs	r0, r6
 8000bea:	b2c0      	uxtb	r0, r0
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d015      	beq.n	8000c1c <__lesf2+0x58>
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	d005      	beq.n	8000c00 <__lesf2+0x3c>
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	3901      	subs	r1, #1
 8000bf8:	4308      	orrs	r0, r1
 8000bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bfc:	2c00      	cmp	r4, #0
 8000bfe:	d013      	beq.n	8000c28 <__lesf2+0x64>
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d014      	beq.n	8000c2e <__lesf2+0x6a>
 8000c04:	2001      	movs	r0, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	4318      	orrs	r0, r3
 8000c0a:	e7f6      	b.n	8000bfa <__lesf2+0x36>
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d1f3      	bne.n	8000bfa <__lesf2+0x36>
 8000c12:	e7e4      	b.n	8000bde <__lesf2+0x1a>
 8000c14:	2002      	movs	r0, #2
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d1ef      	bne.n	8000bfa <__lesf2+0x36>
 8000c1a:	e7e2      	b.n	8000be2 <__lesf2+0x1e>
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d1e7      	bne.n	8000bf0 <__lesf2+0x2c>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d0e9      	beq.n	8000bfa <__lesf2+0x36>
 8000c26:	e7ed      	b.n	8000c04 <__lesf2+0x40>
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d1e9      	bne.n	8000c00 <__lesf2+0x3c>
 8000c2c:	e7ea      	b.n	8000c04 <__lesf2+0x40>
 8000c2e:	42a2      	cmp	r2, r4
 8000c30:	dc06      	bgt.n	8000c40 <__lesf2+0x7c>
 8000c32:	dbdf      	blt.n	8000bf4 <__lesf2+0x30>
 8000c34:	42ae      	cmp	r6, r5
 8000c36:	d803      	bhi.n	8000c40 <__lesf2+0x7c>
 8000c38:	2000      	movs	r0, #0
 8000c3a:	42ae      	cmp	r6, r5
 8000c3c:	d3da      	bcc.n	8000bf4 <__lesf2+0x30>
 8000c3e:	e7dc      	b.n	8000bfa <__lesf2+0x36>
 8000c40:	2001      	movs	r0, #1
 8000c42:	4249      	negs	r1, r1
 8000c44:	4308      	orrs	r0, r1
 8000c46:	e7d8      	b.n	8000bfa <__lesf2+0x36>

08000c48 <__aeabi_fmul>:
 8000c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4a:	4657      	mov	r7, sl
 8000c4c:	464e      	mov	r6, r9
 8000c4e:	4645      	mov	r5, r8
 8000c50:	46de      	mov	lr, fp
 8000c52:	b5e0      	push	{r5, r6, r7, lr}
 8000c54:	0247      	lsls	r7, r0, #9
 8000c56:	0046      	lsls	r6, r0, #1
 8000c58:	4688      	mov	r8, r1
 8000c5a:	0a7f      	lsrs	r7, r7, #9
 8000c5c:	0e36      	lsrs	r6, r6, #24
 8000c5e:	0fc4      	lsrs	r4, r0, #31
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d047      	beq.n	8000cf4 <__aeabi_fmul+0xac>
 8000c64:	2eff      	cmp	r6, #255	; 0xff
 8000c66:	d024      	beq.n	8000cb2 <__aeabi_fmul+0x6a>
 8000c68:	00fb      	lsls	r3, r7, #3
 8000c6a:	2780      	movs	r7, #128	; 0x80
 8000c6c:	04ff      	lsls	r7, r7, #19
 8000c6e:	431f      	orrs	r7, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	4699      	mov	r9, r3
 8000c74:	469a      	mov	sl, r3
 8000c76:	3e7f      	subs	r6, #127	; 0x7f
 8000c78:	4643      	mov	r3, r8
 8000c7a:	025d      	lsls	r5, r3, #9
 8000c7c:	0058      	lsls	r0, r3, #1
 8000c7e:	0fdb      	lsrs	r3, r3, #31
 8000c80:	0a6d      	lsrs	r5, r5, #9
 8000c82:	0e00      	lsrs	r0, r0, #24
 8000c84:	4698      	mov	r8, r3
 8000c86:	d043      	beq.n	8000d10 <__aeabi_fmul+0xc8>
 8000c88:	28ff      	cmp	r0, #255	; 0xff
 8000c8a:	d03b      	beq.n	8000d04 <__aeabi_fmul+0xbc>
 8000c8c:	00eb      	lsls	r3, r5, #3
 8000c8e:	2580      	movs	r5, #128	; 0x80
 8000c90:	2200      	movs	r2, #0
 8000c92:	04ed      	lsls	r5, r5, #19
 8000c94:	431d      	orrs	r5, r3
 8000c96:	387f      	subs	r0, #127	; 0x7f
 8000c98:	1836      	adds	r6, r6, r0
 8000c9a:	1c73      	adds	r3, r6, #1
 8000c9c:	4641      	mov	r1, r8
 8000c9e:	469b      	mov	fp, r3
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4061      	eors	r1, r4
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d864      	bhi.n	8000d74 <__aeabi_fmul+0x12c>
 8000caa:	4875      	ldr	r0, [pc, #468]	; (8000e80 <__aeabi_fmul+0x238>)
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	58c3      	ldr	r3, [r0, r3]
 8000cb0:	469f      	mov	pc, r3
 8000cb2:	2f00      	cmp	r7, #0
 8000cb4:	d142      	bne.n	8000d3c <__aeabi_fmul+0xf4>
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	4699      	mov	r9, r3
 8000cba:	3b06      	subs	r3, #6
 8000cbc:	26ff      	movs	r6, #255	; 0xff
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	e7da      	b.n	8000c78 <__aeabi_fmul+0x30>
 8000cc2:	4641      	mov	r1, r8
 8000cc4:	2a02      	cmp	r2, #2
 8000cc6:	d028      	beq.n	8000d1a <__aeabi_fmul+0xd2>
 8000cc8:	2a03      	cmp	r2, #3
 8000cca:	d100      	bne.n	8000cce <__aeabi_fmul+0x86>
 8000ccc:	e0ce      	b.n	8000e6c <__aeabi_fmul+0x224>
 8000cce:	2a01      	cmp	r2, #1
 8000cd0:	d000      	beq.n	8000cd4 <__aeabi_fmul+0x8c>
 8000cd2:	e0ac      	b.n	8000e2e <__aeabi_fmul+0x1e6>
 8000cd4:	4011      	ands	r1, r2
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	2200      	movs	r2, #0
 8000cda:	b2cc      	uxtb	r4, r1
 8000cdc:	0240      	lsls	r0, r0, #9
 8000cde:	05d2      	lsls	r2, r2, #23
 8000ce0:	0a40      	lsrs	r0, r0, #9
 8000ce2:	07e4      	lsls	r4, r4, #31
 8000ce4:	4310      	orrs	r0, r2
 8000ce6:	4320      	orrs	r0, r4
 8000ce8:	bc3c      	pop	{r2, r3, r4, r5}
 8000cea:	4690      	mov	r8, r2
 8000cec:	4699      	mov	r9, r3
 8000cee:	46a2      	mov	sl, r4
 8000cf0:	46ab      	mov	fp, r5
 8000cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cf4:	2f00      	cmp	r7, #0
 8000cf6:	d115      	bne.n	8000d24 <__aeabi_fmul+0xdc>
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	2600      	movs	r6, #0
 8000d00:	469a      	mov	sl, r3
 8000d02:	e7b9      	b.n	8000c78 <__aeabi_fmul+0x30>
 8000d04:	20ff      	movs	r0, #255	; 0xff
 8000d06:	2202      	movs	r2, #2
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	d0c5      	beq.n	8000c98 <__aeabi_fmul+0x50>
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	e7c3      	b.n	8000c98 <__aeabi_fmul+0x50>
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d119      	bne.n	8000d48 <__aeabi_fmul+0x100>
 8000d14:	2000      	movs	r0, #0
 8000d16:	2201      	movs	r2, #1
 8000d18:	e7be      	b.n	8000c98 <__aeabi_fmul+0x50>
 8000d1a:	2401      	movs	r4, #1
 8000d1c:	22ff      	movs	r2, #255	; 0xff
 8000d1e:	400c      	ands	r4, r1
 8000d20:	2000      	movs	r0, #0
 8000d22:	e7db      	b.n	8000cdc <__aeabi_fmul+0x94>
 8000d24:	0038      	movs	r0, r7
 8000d26:	f002 f8c7 	bl	8002eb8 <__clzsi2>
 8000d2a:	2676      	movs	r6, #118	; 0x76
 8000d2c:	1f43      	subs	r3, r0, #5
 8000d2e:	409f      	lsls	r7, r3
 8000d30:	2300      	movs	r3, #0
 8000d32:	4276      	negs	r6, r6
 8000d34:	1a36      	subs	r6, r6, r0
 8000d36:	4699      	mov	r9, r3
 8000d38:	469a      	mov	sl, r3
 8000d3a:	e79d      	b.n	8000c78 <__aeabi_fmul+0x30>
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	4699      	mov	r9, r3
 8000d40:	3b09      	subs	r3, #9
 8000d42:	26ff      	movs	r6, #255	; 0xff
 8000d44:	469a      	mov	sl, r3
 8000d46:	e797      	b.n	8000c78 <__aeabi_fmul+0x30>
 8000d48:	0028      	movs	r0, r5
 8000d4a:	f002 f8b5 	bl	8002eb8 <__clzsi2>
 8000d4e:	1f43      	subs	r3, r0, #5
 8000d50:	409d      	lsls	r5, r3
 8000d52:	2376      	movs	r3, #118	; 0x76
 8000d54:	425b      	negs	r3, r3
 8000d56:	1a18      	subs	r0, r3, r0
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e79d      	b.n	8000c98 <__aeabi_fmul+0x50>
 8000d5c:	2080      	movs	r0, #128	; 0x80
 8000d5e:	2400      	movs	r4, #0
 8000d60:	03c0      	lsls	r0, r0, #15
 8000d62:	22ff      	movs	r2, #255	; 0xff
 8000d64:	e7ba      	b.n	8000cdc <__aeabi_fmul+0x94>
 8000d66:	003d      	movs	r5, r7
 8000d68:	4652      	mov	r2, sl
 8000d6a:	e7ab      	b.n	8000cc4 <__aeabi_fmul+0x7c>
 8000d6c:	003d      	movs	r5, r7
 8000d6e:	0021      	movs	r1, r4
 8000d70:	4652      	mov	r2, sl
 8000d72:	e7a7      	b.n	8000cc4 <__aeabi_fmul+0x7c>
 8000d74:	0c3b      	lsrs	r3, r7, #16
 8000d76:	469c      	mov	ip, r3
 8000d78:	042a      	lsls	r2, r5, #16
 8000d7a:	0c12      	lsrs	r2, r2, #16
 8000d7c:	0c2b      	lsrs	r3, r5, #16
 8000d7e:	0014      	movs	r4, r2
 8000d80:	4660      	mov	r0, ip
 8000d82:	4665      	mov	r5, ip
 8000d84:	043f      	lsls	r7, r7, #16
 8000d86:	0c3f      	lsrs	r7, r7, #16
 8000d88:	437c      	muls	r4, r7
 8000d8a:	4342      	muls	r2, r0
 8000d8c:	435d      	muls	r5, r3
 8000d8e:	437b      	muls	r3, r7
 8000d90:	0c27      	lsrs	r7, r4, #16
 8000d92:	189b      	adds	r3, r3, r2
 8000d94:	18ff      	adds	r7, r7, r3
 8000d96:	42ba      	cmp	r2, r7
 8000d98:	d903      	bls.n	8000da2 <__aeabi_fmul+0x15a>
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	025b      	lsls	r3, r3, #9
 8000d9e:	469c      	mov	ip, r3
 8000da0:	4465      	add	r5, ip
 8000da2:	0424      	lsls	r4, r4, #16
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	0c24      	lsrs	r4, r4, #16
 8000da8:	1912      	adds	r2, r2, r4
 8000daa:	0193      	lsls	r3, r2, #6
 8000dac:	1e5c      	subs	r4, r3, #1
 8000dae:	41a3      	sbcs	r3, r4
 8000db0:	0c3f      	lsrs	r7, r7, #16
 8000db2:	0e92      	lsrs	r2, r2, #26
 8000db4:	197d      	adds	r5, r7, r5
 8000db6:	431a      	orrs	r2, r3
 8000db8:	01ad      	lsls	r5, r5, #6
 8000dba:	4315      	orrs	r5, r2
 8000dbc:	012b      	lsls	r3, r5, #4
 8000dbe:	d504      	bpl.n	8000dca <__aeabi_fmul+0x182>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	465e      	mov	r6, fp
 8000dc4:	086a      	lsrs	r2, r5, #1
 8000dc6:	401d      	ands	r5, r3
 8000dc8:	4315      	orrs	r5, r2
 8000dca:	0032      	movs	r2, r6
 8000dcc:	327f      	adds	r2, #127	; 0x7f
 8000dce:	2a00      	cmp	r2, #0
 8000dd0:	dd25      	ble.n	8000e1e <__aeabi_fmul+0x1d6>
 8000dd2:	076b      	lsls	r3, r5, #29
 8000dd4:	d004      	beq.n	8000de0 <__aeabi_fmul+0x198>
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	402b      	ands	r3, r5
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_fmul+0x198>
 8000dde:	3504      	adds	r5, #4
 8000de0:	012b      	lsls	r3, r5, #4
 8000de2:	d503      	bpl.n	8000dec <__aeabi_fmul+0x1a4>
 8000de4:	0032      	movs	r2, r6
 8000de6:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <__aeabi_fmul+0x23c>)
 8000de8:	3280      	adds	r2, #128	; 0x80
 8000dea:	401d      	ands	r5, r3
 8000dec:	2afe      	cmp	r2, #254	; 0xfe
 8000dee:	dc94      	bgt.n	8000d1a <__aeabi_fmul+0xd2>
 8000df0:	2401      	movs	r4, #1
 8000df2:	01a8      	lsls	r0, r5, #6
 8000df4:	0a40      	lsrs	r0, r0, #9
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	400c      	ands	r4, r1
 8000dfa:	e76f      	b.n	8000cdc <__aeabi_fmul+0x94>
 8000dfc:	2080      	movs	r0, #128	; 0x80
 8000dfe:	03c0      	lsls	r0, r0, #15
 8000e00:	4207      	tst	r7, r0
 8000e02:	d007      	beq.n	8000e14 <__aeabi_fmul+0x1cc>
 8000e04:	4205      	tst	r5, r0
 8000e06:	d105      	bne.n	8000e14 <__aeabi_fmul+0x1cc>
 8000e08:	4328      	orrs	r0, r5
 8000e0a:	0240      	lsls	r0, r0, #9
 8000e0c:	0a40      	lsrs	r0, r0, #9
 8000e0e:	4644      	mov	r4, r8
 8000e10:	22ff      	movs	r2, #255	; 0xff
 8000e12:	e763      	b.n	8000cdc <__aeabi_fmul+0x94>
 8000e14:	4338      	orrs	r0, r7
 8000e16:	0240      	lsls	r0, r0, #9
 8000e18:	0a40      	lsrs	r0, r0, #9
 8000e1a:	22ff      	movs	r2, #255	; 0xff
 8000e1c:	e75e      	b.n	8000cdc <__aeabi_fmul+0x94>
 8000e1e:	2401      	movs	r4, #1
 8000e20:	1aa3      	subs	r3, r4, r2
 8000e22:	2b1b      	cmp	r3, #27
 8000e24:	dd05      	ble.n	8000e32 <__aeabi_fmul+0x1ea>
 8000e26:	400c      	ands	r4, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	e756      	b.n	8000cdc <__aeabi_fmul+0x94>
 8000e2e:	465e      	mov	r6, fp
 8000e30:	e7cb      	b.n	8000dca <__aeabi_fmul+0x182>
 8000e32:	002a      	movs	r2, r5
 8000e34:	2020      	movs	r0, #32
 8000e36:	40da      	lsrs	r2, r3
 8000e38:	1ac3      	subs	r3, r0, r3
 8000e3a:	409d      	lsls	r5, r3
 8000e3c:	002b      	movs	r3, r5
 8000e3e:	1e5d      	subs	r5, r3, #1
 8000e40:	41ab      	sbcs	r3, r5
 8000e42:	4313      	orrs	r3, r2
 8000e44:	075a      	lsls	r2, r3, #29
 8000e46:	d004      	beq.n	8000e52 <__aeabi_fmul+0x20a>
 8000e48:	220f      	movs	r2, #15
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	2a04      	cmp	r2, #4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fmul+0x20a>
 8000e50:	3304      	adds	r3, #4
 8000e52:	015a      	lsls	r2, r3, #5
 8000e54:	d504      	bpl.n	8000e60 <__aeabi_fmul+0x218>
 8000e56:	2401      	movs	r4, #1
 8000e58:	2201      	movs	r2, #1
 8000e5a:	400c      	ands	r4, r1
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	e73d      	b.n	8000cdc <__aeabi_fmul+0x94>
 8000e60:	2401      	movs	r4, #1
 8000e62:	019b      	lsls	r3, r3, #6
 8000e64:	0a58      	lsrs	r0, r3, #9
 8000e66:	400c      	ands	r4, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	e737      	b.n	8000cdc <__aeabi_fmul+0x94>
 8000e6c:	2080      	movs	r0, #128	; 0x80
 8000e6e:	2401      	movs	r4, #1
 8000e70:	03c0      	lsls	r0, r0, #15
 8000e72:	4328      	orrs	r0, r5
 8000e74:	0240      	lsls	r0, r0, #9
 8000e76:	0a40      	lsrs	r0, r0, #9
 8000e78:	400c      	ands	r4, r1
 8000e7a:	22ff      	movs	r2, #255	; 0xff
 8000e7c:	e72e      	b.n	8000cdc <__aeabi_fmul+0x94>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	08007860 	.word	0x08007860
 8000e84:	f7ffffff 	.word	0xf7ffffff

08000e88 <__aeabi_fsub>:
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	464f      	mov	r7, r9
 8000e8c:	46d6      	mov	lr, sl
 8000e8e:	4646      	mov	r6, r8
 8000e90:	0044      	lsls	r4, r0, #1
 8000e92:	b5c0      	push	{r6, r7, lr}
 8000e94:	0fc2      	lsrs	r2, r0, #31
 8000e96:	0247      	lsls	r7, r0, #9
 8000e98:	0248      	lsls	r0, r1, #9
 8000e9a:	0a40      	lsrs	r0, r0, #9
 8000e9c:	4684      	mov	ip, r0
 8000e9e:	4666      	mov	r6, ip
 8000ea0:	0a7b      	lsrs	r3, r7, #9
 8000ea2:	0048      	lsls	r0, r1, #1
 8000ea4:	0fc9      	lsrs	r1, r1, #31
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	0e24      	lsrs	r4, r4, #24
 8000eaa:	0015      	movs	r5, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	0e00      	lsrs	r0, r0, #24
 8000eb0:	4689      	mov	r9, r1
 8000eb2:	00f6      	lsls	r6, r6, #3
 8000eb4:	28ff      	cmp	r0, #255	; 0xff
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fsub+0x32>
 8000eb8:	e08f      	b.n	8000fda <__aeabi_fsub+0x152>
 8000eba:	2101      	movs	r1, #1
 8000ebc:	464f      	mov	r7, r9
 8000ebe:	404f      	eors	r7, r1
 8000ec0:	0039      	movs	r1, r7
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d066      	beq.n	8000f94 <__aeabi_fsub+0x10c>
 8000ec6:	1a22      	subs	r2, r4, r0
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	dc00      	bgt.n	8000ece <__aeabi_fsub+0x46>
 8000ecc:	e09d      	b.n	800100a <__aeabi_fsub+0x182>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d13d      	bne.n	8000f4e <__aeabi_fsub+0xc6>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x50>
 8000ed6:	e08b      	b.n	8000ff0 <__aeabi_fsub+0x168>
 8000ed8:	1e51      	subs	r1, r2, #1
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_fsub+0x58>
 8000ede:	e0b5      	b.n	800104c <__aeabi_fsub+0x1c4>
 8000ee0:	2401      	movs	r4, #1
 8000ee2:	1b9b      	subs	r3, r3, r6
 8000ee4:	015a      	lsls	r2, r3, #5
 8000ee6:	d544      	bpl.n	8000f72 <__aeabi_fsub+0xea>
 8000ee8:	019b      	lsls	r3, r3, #6
 8000eea:	099f      	lsrs	r7, r3, #6
 8000eec:	0038      	movs	r0, r7
 8000eee:	f001 ffe3 	bl	8002eb8 <__clzsi2>
 8000ef2:	3805      	subs	r0, #5
 8000ef4:	4087      	lsls	r7, r0
 8000ef6:	4284      	cmp	r4, r0
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_fsub+0x74>
 8000efa:	e096      	b.n	800102a <__aeabi_fsub+0x1a2>
 8000efc:	1b04      	subs	r4, r0, r4
 8000efe:	003a      	movs	r2, r7
 8000f00:	2020      	movs	r0, #32
 8000f02:	3401      	adds	r4, #1
 8000f04:	40e2      	lsrs	r2, r4
 8000f06:	1b04      	subs	r4, r0, r4
 8000f08:	40a7      	lsls	r7, r4
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	1e5f      	subs	r7, r3, #1
 8000f0e:	41bb      	sbcs	r3, r7
 8000f10:	2400      	movs	r4, #0
 8000f12:	4313      	orrs	r3, r2
 8000f14:	075a      	lsls	r2, r3, #29
 8000f16:	d004      	beq.n	8000f22 <__aeabi_fsub+0x9a>
 8000f18:	220f      	movs	r2, #15
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	2a04      	cmp	r2, #4
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x9a>
 8000f20:	3304      	adds	r3, #4
 8000f22:	015a      	lsls	r2, r3, #5
 8000f24:	d527      	bpl.n	8000f76 <__aeabi_fsub+0xee>
 8000f26:	3401      	adds	r4, #1
 8000f28:	2cff      	cmp	r4, #255	; 0xff
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_fsub+0xa6>
 8000f2c:	e079      	b.n	8001022 <__aeabi_fsub+0x19a>
 8000f2e:	2201      	movs	r2, #1
 8000f30:	019b      	lsls	r3, r3, #6
 8000f32:	0a5b      	lsrs	r3, r3, #9
 8000f34:	b2e4      	uxtb	r4, r4
 8000f36:	402a      	ands	r2, r5
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	05e4      	lsls	r4, r4, #23
 8000f3c:	0a58      	lsrs	r0, r3, #9
 8000f3e:	07d2      	lsls	r2, r2, #31
 8000f40:	4320      	orrs	r0, r4
 8000f42:	4310      	orrs	r0, r2
 8000f44:	bc1c      	pop	{r2, r3, r4}
 8000f46:	4690      	mov	r8, r2
 8000f48:	4699      	mov	r9, r3
 8000f4a:	46a2      	mov	sl, r4
 8000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4e:	2cff      	cmp	r4, #255	; 0xff
 8000f50:	d0e0      	beq.n	8000f14 <__aeabi_fsub+0x8c>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	04c9      	lsls	r1, r1, #19
 8000f56:	430e      	orrs	r6, r1
 8000f58:	2a1b      	cmp	r2, #27
 8000f5a:	dc7b      	bgt.n	8001054 <__aeabi_fsub+0x1cc>
 8000f5c:	0031      	movs	r1, r6
 8000f5e:	2020      	movs	r0, #32
 8000f60:	40d1      	lsrs	r1, r2
 8000f62:	1a82      	subs	r2, r0, r2
 8000f64:	4096      	lsls	r6, r2
 8000f66:	1e72      	subs	r2, r6, #1
 8000f68:	4196      	sbcs	r6, r2
 8000f6a:	430e      	orrs	r6, r1
 8000f6c:	1b9b      	subs	r3, r3, r6
 8000f6e:	015a      	lsls	r2, r3, #5
 8000f70:	d4ba      	bmi.n	8000ee8 <__aeabi_fsub+0x60>
 8000f72:	075a      	lsls	r2, r3, #29
 8000f74:	d1d0      	bne.n	8000f18 <__aeabi_fsub+0x90>
 8000f76:	2201      	movs	r2, #1
 8000f78:	08df      	lsrs	r7, r3, #3
 8000f7a:	402a      	ands	r2, r5
 8000f7c:	2cff      	cmp	r4, #255	; 0xff
 8000f7e:	d133      	bne.n	8000fe8 <__aeabi_fsub+0x160>
 8000f80:	2f00      	cmp	r7, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_fsub+0xfe>
 8000f84:	e0a8      	b.n	80010d8 <__aeabi_fsub+0x250>
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	03db      	lsls	r3, r3, #15
 8000f8a:	433b      	orrs	r3, r7
 8000f8c:	025b      	lsls	r3, r3, #9
 8000f8e:	0a5b      	lsrs	r3, r3, #9
 8000f90:	24ff      	movs	r4, #255	; 0xff
 8000f92:	e7d1      	b.n	8000f38 <__aeabi_fsub+0xb0>
 8000f94:	1a21      	subs	r1, r4, r0
 8000f96:	2900      	cmp	r1, #0
 8000f98:	dd4c      	ble.n	8001034 <__aeabi_fsub+0x1ac>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d02a      	beq.n	8000ff4 <__aeabi_fsub+0x16c>
 8000f9e:	2cff      	cmp	r4, #255	; 0xff
 8000fa0:	d0b8      	beq.n	8000f14 <__aeabi_fsub+0x8c>
 8000fa2:	2080      	movs	r0, #128	; 0x80
 8000fa4:	04c0      	lsls	r0, r0, #19
 8000fa6:	4306      	orrs	r6, r0
 8000fa8:	291b      	cmp	r1, #27
 8000faa:	dd00      	ble.n	8000fae <__aeabi_fsub+0x126>
 8000fac:	e0af      	b.n	800110e <__aeabi_fsub+0x286>
 8000fae:	0030      	movs	r0, r6
 8000fb0:	2720      	movs	r7, #32
 8000fb2:	40c8      	lsrs	r0, r1
 8000fb4:	1a79      	subs	r1, r7, r1
 8000fb6:	408e      	lsls	r6, r1
 8000fb8:	1e71      	subs	r1, r6, #1
 8000fba:	418e      	sbcs	r6, r1
 8000fbc:	4306      	orrs	r6, r0
 8000fbe:	199b      	adds	r3, r3, r6
 8000fc0:	0159      	lsls	r1, r3, #5
 8000fc2:	d5d6      	bpl.n	8000f72 <__aeabi_fsub+0xea>
 8000fc4:	3401      	adds	r4, #1
 8000fc6:	2cff      	cmp	r4, #255	; 0xff
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0x144>
 8000fca:	e085      	b.n	80010d8 <__aeabi_fsub+0x250>
 8000fcc:	2201      	movs	r2, #1
 8000fce:	497a      	ldr	r1, [pc, #488]	; (80011b8 <__aeabi_fsub+0x330>)
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	e79c      	b.n	8000f14 <__aeabi_fsub+0x8c>
 8000fda:	2e00      	cmp	r6, #0
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fsub+0x158>
 8000fde:	e770      	b.n	8000ec2 <__aeabi_fsub+0x3a>
 8000fe0:	e76b      	b.n	8000eba <__aeabi_fsub+0x32>
 8000fe2:	1e3b      	subs	r3, r7, #0
 8000fe4:	d1c5      	bne.n	8000f72 <__aeabi_fsub+0xea>
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	027b      	lsls	r3, r7, #9
 8000fea:	0a5b      	lsrs	r3, r3, #9
 8000fec:	b2e4      	uxtb	r4, r4
 8000fee:	e7a3      	b.n	8000f38 <__aeabi_fsub+0xb0>
 8000ff0:	0014      	movs	r4, r2
 8000ff2:	e78f      	b.n	8000f14 <__aeabi_fsub+0x8c>
 8000ff4:	2e00      	cmp	r6, #0
 8000ff6:	d04d      	beq.n	8001094 <__aeabi_fsub+0x20c>
 8000ff8:	1e48      	subs	r0, r1, #1
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d157      	bne.n	80010ae <__aeabi_fsub+0x226>
 8000ffe:	199b      	adds	r3, r3, r6
 8001000:	2401      	movs	r4, #1
 8001002:	015a      	lsls	r2, r3, #5
 8001004:	d5b5      	bpl.n	8000f72 <__aeabi_fsub+0xea>
 8001006:	2402      	movs	r4, #2
 8001008:	e7e0      	b.n	8000fcc <__aeabi_fsub+0x144>
 800100a:	2a00      	cmp	r2, #0
 800100c:	d125      	bne.n	800105a <__aeabi_fsub+0x1d2>
 800100e:	1c62      	adds	r2, r4, #1
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	2a01      	cmp	r2, #1
 8001014:	dd72      	ble.n	80010fc <__aeabi_fsub+0x274>
 8001016:	1b9f      	subs	r7, r3, r6
 8001018:	017a      	lsls	r2, r7, #5
 800101a:	d535      	bpl.n	8001088 <__aeabi_fsub+0x200>
 800101c:	1af7      	subs	r7, r6, r3
 800101e:	000d      	movs	r5, r1
 8001020:	e764      	b.n	8000eec <__aeabi_fsub+0x64>
 8001022:	2201      	movs	r2, #1
 8001024:	2300      	movs	r3, #0
 8001026:	402a      	ands	r2, r5
 8001028:	e786      	b.n	8000f38 <__aeabi_fsub+0xb0>
 800102a:	003b      	movs	r3, r7
 800102c:	4a63      	ldr	r2, [pc, #396]	; (80011bc <__aeabi_fsub+0x334>)
 800102e:	1a24      	subs	r4, r4, r0
 8001030:	4013      	ands	r3, r2
 8001032:	e76f      	b.n	8000f14 <__aeabi_fsub+0x8c>
 8001034:	2900      	cmp	r1, #0
 8001036:	d16c      	bne.n	8001112 <__aeabi_fsub+0x28a>
 8001038:	1c61      	adds	r1, r4, #1
 800103a:	b2c8      	uxtb	r0, r1
 800103c:	2801      	cmp	r0, #1
 800103e:	dd4e      	ble.n	80010de <__aeabi_fsub+0x256>
 8001040:	29ff      	cmp	r1, #255	; 0xff
 8001042:	d049      	beq.n	80010d8 <__aeabi_fsub+0x250>
 8001044:	199b      	adds	r3, r3, r6
 8001046:	085b      	lsrs	r3, r3, #1
 8001048:	000c      	movs	r4, r1
 800104a:	e763      	b.n	8000f14 <__aeabi_fsub+0x8c>
 800104c:	2aff      	cmp	r2, #255	; 0xff
 800104e:	d041      	beq.n	80010d4 <__aeabi_fsub+0x24c>
 8001050:	000a      	movs	r2, r1
 8001052:	e781      	b.n	8000f58 <__aeabi_fsub+0xd0>
 8001054:	2601      	movs	r6, #1
 8001056:	1b9b      	subs	r3, r3, r6
 8001058:	e789      	b.n	8000f6e <__aeabi_fsub+0xe6>
 800105a:	2c00      	cmp	r4, #0
 800105c:	d01c      	beq.n	8001098 <__aeabi_fsub+0x210>
 800105e:	28ff      	cmp	r0, #255	; 0xff
 8001060:	d021      	beq.n	80010a6 <__aeabi_fsub+0x21e>
 8001062:	2480      	movs	r4, #128	; 0x80
 8001064:	04e4      	lsls	r4, r4, #19
 8001066:	4252      	negs	r2, r2
 8001068:	4323      	orrs	r3, r4
 800106a:	2a1b      	cmp	r2, #27
 800106c:	dd00      	ble.n	8001070 <__aeabi_fsub+0x1e8>
 800106e:	e096      	b.n	800119e <__aeabi_fsub+0x316>
 8001070:	001c      	movs	r4, r3
 8001072:	2520      	movs	r5, #32
 8001074:	40d4      	lsrs	r4, r2
 8001076:	1aaa      	subs	r2, r5, r2
 8001078:	4093      	lsls	r3, r2
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	4193      	sbcs	r3, r2
 800107e:	4323      	orrs	r3, r4
 8001080:	1af3      	subs	r3, r6, r3
 8001082:	0004      	movs	r4, r0
 8001084:	000d      	movs	r5, r1
 8001086:	e72d      	b.n	8000ee4 <__aeabi_fsub+0x5c>
 8001088:	2f00      	cmp	r7, #0
 800108a:	d000      	beq.n	800108e <__aeabi_fsub+0x206>
 800108c:	e72e      	b.n	8000eec <__aeabi_fsub+0x64>
 800108e:	2200      	movs	r2, #0
 8001090:	2400      	movs	r4, #0
 8001092:	e7a9      	b.n	8000fe8 <__aeabi_fsub+0x160>
 8001094:	000c      	movs	r4, r1
 8001096:	e73d      	b.n	8000f14 <__aeabi_fsub+0x8c>
 8001098:	2b00      	cmp	r3, #0
 800109a:	d058      	beq.n	800114e <__aeabi_fsub+0x2c6>
 800109c:	43d2      	mvns	r2, r2
 800109e:	2a00      	cmp	r2, #0
 80010a0:	d0ee      	beq.n	8001080 <__aeabi_fsub+0x1f8>
 80010a2:	28ff      	cmp	r0, #255	; 0xff
 80010a4:	d1e1      	bne.n	800106a <__aeabi_fsub+0x1e2>
 80010a6:	0033      	movs	r3, r6
 80010a8:	24ff      	movs	r4, #255	; 0xff
 80010aa:	000d      	movs	r5, r1
 80010ac:	e732      	b.n	8000f14 <__aeabi_fsub+0x8c>
 80010ae:	29ff      	cmp	r1, #255	; 0xff
 80010b0:	d010      	beq.n	80010d4 <__aeabi_fsub+0x24c>
 80010b2:	0001      	movs	r1, r0
 80010b4:	e778      	b.n	8000fa8 <__aeabi_fsub+0x120>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d06e      	beq.n	8001198 <__aeabi_fsub+0x310>
 80010ba:	24ff      	movs	r4, #255	; 0xff
 80010bc:	2e00      	cmp	r6, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_fsub+0x23a>
 80010c0:	e728      	b.n	8000f14 <__aeabi_fsub+0x8c>
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	4651      	mov	r1, sl
 80010c6:	03d2      	lsls	r2, r2, #15
 80010c8:	4211      	tst	r1, r2
 80010ca:	d003      	beq.n	80010d4 <__aeabi_fsub+0x24c>
 80010cc:	4661      	mov	r1, ip
 80010ce:	4211      	tst	r1, r2
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0x24c>
 80010d2:	0033      	movs	r3, r6
 80010d4:	24ff      	movs	r4, #255	; 0xff
 80010d6:	e71d      	b.n	8000f14 <__aeabi_fsub+0x8c>
 80010d8:	24ff      	movs	r4, #255	; 0xff
 80010da:	2300      	movs	r3, #0
 80010dc:	e72c      	b.n	8000f38 <__aeabi_fsub+0xb0>
 80010de:	2c00      	cmp	r4, #0
 80010e0:	d1e9      	bne.n	80010b6 <__aeabi_fsub+0x22e>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d063      	beq.n	80011ae <__aeabi_fsub+0x326>
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x264>
 80010ea:	e713      	b.n	8000f14 <__aeabi_fsub+0x8c>
 80010ec:	199b      	adds	r3, r3, r6
 80010ee:	015a      	lsls	r2, r3, #5
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_fsub+0x26c>
 80010f2:	e73e      	b.n	8000f72 <__aeabi_fsub+0xea>
 80010f4:	4a31      	ldr	r2, [pc, #196]	; (80011bc <__aeabi_fsub+0x334>)
 80010f6:	000c      	movs	r4, r1
 80010f8:	4013      	ands	r3, r2
 80010fa:	e70b      	b.n	8000f14 <__aeabi_fsub+0x8c>
 80010fc:	2c00      	cmp	r4, #0
 80010fe:	d11e      	bne.n	800113e <__aeabi_fsub+0x2b6>
 8001100:	2b00      	cmp	r3, #0
 8001102:	d12f      	bne.n	8001164 <__aeabi_fsub+0x2dc>
 8001104:	2e00      	cmp	r6, #0
 8001106:	d04f      	beq.n	80011a8 <__aeabi_fsub+0x320>
 8001108:	0033      	movs	r3, r6
 800110a:	000d      	movs	r5, r1
 800110c:	e702      	b.n	8000f14 <__aeabi_fsub+0x8c>
 800110e:	2601      	movs	r6, #1
 8001110:	e755      	b.n	8000fbe <__aeabi_fsub+0x136>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d11f      	bne.n	8001156 <__aeabi_fsub+0x2ce>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d043      	beq.n	80011a2 <__aeabi_fsub+0x31a>
 800111a:	43c9      	mvns	r1, r1
 800111c:	2900      	cmp	r1, #0
 800111e:	d00b      	beq.n	8001138 <__aeabi_fsub+0x2b0>
 8001120:	28ff      	cmp	r0, #255	; 0xff
 8001122:	d039      	beq.n	8001198 <__aeabi_fsub+0x310>
 8001124:	291b      	cmp	r1, #27
 8001126:	dc44      	bgt.n	80011b2 <__aeabi_fsub+0x32a>
 8001128:	001c      	movs	r4, r3
 800112a:	2720      	movs	r7, #32
 800112c:	40cc      	lsrs	r4, r1
 800112e:	1a79      	subs	r1, r7, r1
 8001130:	408b      	lsls	r3, r1
 8001132:	1e59      	subs	r1, r3, #1
 8001134:	418b      	sbcs	r3, r1
 8001136:	4323      	orrs	r3, r4
 8001138:	199b      	adds	r3, r3, r6
 800113a:	0004      	movs	r4, r0
 800113c:	e740      	b.n	8000fc0 <__aeabi_fsub+0x138>
 800113e:	2b00      	cmp	r3, #0
 8001140:	d11a      	bne.n	8001178 <__aeabi_fsub+0x2f0>
 8001142:	2e00      	cmp	r6, #0
 8001144:	d124      	bne.n	8001190 <__aeabi_fsub+0x308>
 8001146:	2780      	movs	r7, #128	; 0x80
 8001148:	2200      	movs	r2, #0
 800114a:	03ff      	lsls	r7, r7, #15
 800114c:	e71b      	b.n	8000f86 <__aeabi_fsub+0xfe>
 800114e:	0033      	movs	r3, r6
 8001150:	0004      	movs	r4, r0
 8001152:	000d      	movs	r5, r1
 8001154:	e6de      	b.n	8000f14 <__aeabi_fsub+0x8c>
 8001156:	28ff      	cmp	r0, #255	; 0xff
 8001158:	d01e      	beq.n	8001198 <__aeabi_fsub+0x310>
 800115a:	2480      	movs	r4, #128	; 0x80
 800115c:	04e4      	lsls	r4, r4, #19
 800115e:	4249      	negs	r1, r1
 8001160:	4323      	orrs	r3, r4
 8001162:	e7df      	b.n	8001124 <__aeabi_fsub+0x29c>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d100      	bne.n	800116a <__aeabi_fsub+0x2e2>
 8001168:	e6d4      	b.n	8000f14 <__aeabi_fsub+0x8c>
 800116a:	1b9f      	subs	r7, r3, r6
 800116c:	017a      	lsls	r2, r7, #5
 800116e:	d400      	bmi.n	8001172 <__aeabi_fsub+0x2ea>
 8001170:	e737      	b.n	8000fe2 <__aeabi_fsub+0x15a>
 8001172:	1af3      	subs	r3, r6, r3
 8001174:	000d      	movs	r5, r1
 8001176:	e6cd      	b.n	8000f14 <__aeabi_fsub+0x8c>
 8001178:	24ff      	movs	r4, #255	; 0xff
 800117a:	2e00      	cmp	r6, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_fsub+0x2f8>
 800117e:	e6c9      	b.n	8000f14 <__aeabi_fsub+0x8c>
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	4650      	mov	r0, sl
 8001184:	03d2      	lsls	r2, r2, #15
 8001186:	4210      	tst	r0, r2
 8001188:	d0a4      	beq.n	80010d4 <__aeabi_fsub+0x24c>
 800118a:	4660      	mov	r0, ip
 800118c:	4210      	tst	r0, r2
 800118e:	d1a1      	bne.n	80010d4 <__aeabi_fsub+0x24c>
 8001190:	0033      	movs	r3, r6
 8001192:	000d      	movs	r5, r1
 8001194:	24ff      	movs	r4, #255	; 0xff
 8001196:	e6bd      	b.n	8000f14 <__aeabi_fsub+0x8c>
 8001198:	0033      	movs	r3, r6
 800119a:	24ff      	movs	r4, #255	; 0xff
 800119c:	e6ba      	b.n	8000f14 <__aeabi_fsub+0x8c>
 800119e:	2301      	movs	r3, #1
 80011a0:	e76e      	b.n	8001080 <__aeabi_fsub+0x1f8>
 80011a2:	0033      	movs	r3, r6
 80011a4:	0004      	movs	r4, r0
 80011a6:	e6b5      	b.n	8000f14 <__aeabi_fsub+0x8c>
 80011a8:	2700      	movs	r7, #0
 80011aa:	2200      	movs	r2, #0
 80011ac:	e71c      	b.n	8000fe8 <__aeabi_fsub+0x160>
 80011ae:	0033      	movs	r3, r6
 80011b0:	e6b0      	b.n	8000f14 <__aeabi_fsub+0x8c>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e7c0      	b.n	8001138 <__aeabi_fsub+0x2b0>
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	7dffffff 	.word	0x7dffffff
 80011bc:	fbffffff 	.word	0xfbffffff

080011c0 <__aeabi_i2f>:
 80011c0:	b570      	push	{r4, r5, r6, lr}
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d030      	beq.n	8001228 <__aeabi_i2f+0x68>
 80011c6:	17c3      	asrs	r3, r0, #31
 80011c8:	18c4      	adds	r4, r0, r3
 80011ca:	405c      	eors	r4, r3
 80011cc:	0fc5      	lsrs	r5, r0, #31
 80011ce:	0020      	movs	r0, r4
 80011d0:	f001 fe72 	bl	8002eb8 <__clzsi2>
 80011d4:	239e      	movs	r3, #158	; 0x9e
 80011d6:	1a1b      	subs	r3, r3, r0
 80011d8:	2b96      	cmp	r3, #150	; 0x96
 80011da:	dc0d      	bgt.n	80011f8 <__aeabi_i2f+0x38>
 80011dc:	2296      	movs	r2, #150	; 0x96
 80011de:	1ad2      	subs	r2, r2, r3
 80011e0:	4094      	lsls	r4, r2
 80011e2:	002a      	movs	r2, r5
 80011e4:	0264      	lsls	r4, r4, #9
 80011e6:	0a64      	lsrs	r4, r4, #9
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	0264      	lsls	r4, r4, #9
 80011ec:	05db      	lsls	r3, r3, #23
 80011ee:	0a60      	lsrs	r0, r4, #9
 80011f0:	07d2      	lsls	r2, r2, #31
 80011f2:	4318      	orrs	r0, r3
 80011f4:	4310      	orrs	r0, r2
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	2b99      	cmp	r3, #153	; 0x99
 80011fa:	dc19      	bgt.n	8001230 <__aeabi_i2f+0x70>
 80011fc:	2299      	movs	r2, #153	; 0x99
 80011fe:	1ad2      	subs	r2, r2, r3
 8001200:	2a00      	cmp	r2, #0
 8001202:	dd29      	ble.n	8001258 <__aeabi_i2f+0x98>
 8001204:	4094      	lsls	r4, r2
 8001206:	0022      	movs	r2, r4
 8001208:	4c14      	ldr	r4, [pc, #80]	; (800125c <__aeabi_i2f+0x9c>)
 800120a:	4014      	ands	r4, r2
 800120c:	0751      	lsls	r1, r2, #29
 800120e:	d004      	beq.n	800121a <__aeabi_i2f+0x5a>
 8001210:	210f      	movs	r1, #15
 8001212:	400a      	ands	r2, r1
 8001214:	2a04      	cmp	r2, #4
 8001216:	d000      	beq.n	800121a <__aeabi_i2f+0x5a>
 8001218:	3404      	adds	r4, #4
 800121a:	0162      	lsls	r2, r4, #5
 800121c:	d413      	bmi.n	8001246 <__aeabi_i2f+0x86>
 800121e:	01a4      	lsls	r4, r4, #6
 8001220:	0a64      	lsrs	r4, r4, #9
 8001222:	b2db      	uxtb	r3, r3
 8001224:	002a      	movs	r2, r5
 8001226:	e7e0      	b.n	80011ea <__aeabi_i2f+0x2a>
 8001228:	2200      	movs	r2, #0
 800122a:	2300      	movs	r3, #0
 800122c:	2400      	movs	r4, #0
 800122e:	e7dc      	b.n	80011ea <__aeabi_i2f+0x2a>
 8001230:	2205      	movs	r2, #5
 8001232:	0021      	movs	r1, r4
 8001234:	1a12      	subs	r2, r2, r0
 8001236:	40d1      	lsrs	r1, r2
 8001238:	22b9      	movs	r2, #185	; 0xb9
 800123a:	1ad2      	subs	r2, r2, r3
 800123c:	4094      	lsls	r4, r2
 800123e:	1e62      	subs	r2, r4, #1
 8001240:	4194      	sbcs	r4, r2
 8001242:	430c      	orrs	r4, r1
 8001244:	e7da      	b.n	80011fc <__aeabi_i2f+0x3c>
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <__aeabi_i2f+0x9c>)
 8001248:	002a      	movs	r2, r5
 800124a:	401c      	ands	r4, r3
 800124c:	239f      	movs	r3, #159	; 0x9f
 800124e:	01a4      	lsls	r4, r4, #6
 8001250:	1a1b      	subs	r3, r3, r0
 8001252:	0a64      	lsrs	r4, r4, #9
 8001254:	b2db      	uxtb	r3, r3
 8001256:	e7c8      	b.n	80011ea <__aeabi_i2f+0x2a>
 8001258:	0022      	movs	r2, r4
 800125a:	e7d5      	b.n	8001208 <__aeabi_i2f+0x48>
 800125c:	fbffffff 	.word	0xfbffffff

08001260 <__aeabi_dadd>:
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	4645      	mov	r5, r8
 8001264:	46de      	mov	lr, fp
 8001266:	4657      	mov	r7, sl
 8001268:	464e      	mov	r6, r9
 800126a:	030c      	lsls	r4, r1, #12
 800126c:	b5e0      	push	{r5, r6, r7, lr}
 800126e:	004e      	lsls	r6, r1, #1
 8001270:	0fc9      	lsrs	r1, r1, #31
 8001272:	4688      	mov	r8, r1
 8001274:	000d      	movs	r5, r1
 8001276:	0a61      	lsrs	r1, r4, #9
 8001278:	0f44      	lsrs	r4, r0, #29
 800127a:	430c      	orrs	r4, r1
 800127c:	00c7      	lsls	r7, r0, #3
 800127e:	0319      	lsls	r1, r3, #12
 8001280:	0058      	lsls	r0, r3, #1
 8001282:	0fdb      	lsrs	r3, r3, #31
 8001284:	469b      	mov	fp, r3
 8001286:	0a4b      	lsrs	r3, r1, #9
 8001288:	0f51      	lsrs	r1, r2, #29
 800128a:	430b      	orrs	r3, r1
 800128c:	0d76      	lsrs	r6, r6, #21
 800128e:	0d40      	lsrs	r0, r0, #21
 8001290:	0019      	movs	r1, r3
 8001292:	00d2      	lsls	r2, r2, #3
 8001294:	45d8      	cmp	r8, fp
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x3a>
 8001298:	e0ae      	b.n	80013f8 <__aeabi_dadd+0x198>
 800129a:	1a35      	subs	r5, r6, r0
 800129c:	2d00      	cmp	r5, #0
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_dadd+0x42>
 80012a0:	e0f6      	b.n	8001490 <__aeabi_dadd+0x230>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d10f      	bne.n	80012c6 <__aeabi_dadd+0x66>
 80012a6:	4313      	orrs	r3, r2
 80012a8:	d100      	bne.n	80012ac <__aeabi_dadd+0x4c>
 80012aa:	e0db      	b.n	8001464 <__aeabi_dadd+0x204>
 80012ac:	1e6b      	subs	r3, r5, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d000      	beq.n	80012b4 <__aeabi_dadd+0x54>
 80012b2:	e137      	b.n	8001524 <__aeabi_dadd+0x2c4>
 80012b4:	1aba      	subs	r2, r7, r2
 80012b6:	4297      	cmp	r7, r2
 80012b8:	41bf      	sbcs	r7, r7
 80012ba:	1a64      	subs	r4, r4, r1
 80012bc:	427f      	negs	r7, r7
 80012be:	1be4      	subs	r4, r4, r7
 80012c0:	2601      	movs	r6, #1
 80012c2:	0017      	movs	r7, r2
 80012c4:	e024      	b.n	8001310 <__aeabi_dadd+0xb0>
 80012c6:	4bc6      	ldr	r3, [pc, #792]	; (80015e0 <__aeabi_dadd+0x380>)
 80012c8:	429e      	cmp	r6, r3
 80012ca:	d04d      	beq.n	8001368 <__aeabi_dadd+0x108>
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	041b      	lsls	r3, r3, #16
 80012d0:	4319      	orrs	r1, r3
 80012d2:	2d38      	cmp	r5, #56	; 0x38
 80012d4:	dd00      	ble.n	80012d8 <__aeabi_dadd+0x78>
 80012d6:	e107      	b.n	80014e8 <__aeabi_dadd+0x288>
 80012d8:	2d1f      	cmp	r5, #31
 80012da:	dd00      	ble.n	80012de <__aeabi_dadd+0x7e>
 80012dc:	e138      	b.n	8001550 <__aeabi_dadd+0x2f0>
 80012de:	2020      	movs	r0, #32
 80012e0:	1b43      	subs	r3, r0, r5
 80012e2:	469a      	mov	sl, r3
 80012e4:	000b      	movs	r3, r1
 80012e6:	4650      	mov	r0, sl
 80012e8:	4083      	lsls	r3, r0
 80012ea:	4699      	mov	r9, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	4648      	mov	r0, r9
 80012f0:	40eb      	lsrs	r3, r5
 80012f2:	4318      	orrs	r0, r3
 80012f4:	0003      	movs	r3, r0
 80012f6:	4650      	mov	r0, sl
 80012f8:	4082      	lsls	r2, r0
 80012fa:	1e50      	subs	r0, r2, #1
 80012fc:	4182      	sbcs	r2, r0
 80012fe:	40e9      	lsrs	r1, r5
 8001300:	431a      	orrs	r2, r3
 8001302:	1aba      	subs	r2, r7, r2
 8001304:	1a61      	subs	r1, r4, r1
 8001306:	4297      	cmp	r7, r2
 8001308:	41a4      	sbcs	r4, r4
 800130a:	0017      	movs	r7, r2
 800130c:	4264      	negs	r4, r4
 800130e:	1b0c      	subs	r4, r1, r4
 8001310:	0223      	lsls	r3, r4, #8
 8001312:	d562      	bpl.n	80013da <__aeabi_dadd+0x17a>
 8001314:	0264      	lsls	r4, r4, #9
 8001316:	0a65      	lsrs	r5, r4, #9
 8001318:	2d00      	cmp	r5, #0
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0xbe>
 800131c:	e0df      	b.n	80014de <__aeabi_dadd+0x27e>
 800131e:	0028      	movs	r0, r5
 8001320:	f001 fdca 	bl	8002eb8 <__clzsi2>
 8001324:	0003      	movs	r3, r0
 8001326:	3b08      	subs	r3, #8
 8001328:	2b1f      	cmp	r3, #31
 800132a:	dd00      	ble.n	800132e <__aeabi_dadd+0xce>
 800132c:	e0d2      	b.n	80014d4 <__aeabi_dadd+0x274>
 800132e:	2220      	movs	r2, #32
 8001330:	003c      	movs	r4, r7
 8001332:	1ad2      	subs	r2, r2, r3
 8001334:	409d      	lsls	r5, r3
 8001336:	40d4      	lsrs	r4, r2
 8001338:	409f      	lsls	r7, r3
 800133a:	4325      	orrs	r5, r4
 800133c:	429e      	cmp	r6, r3
 800133e:	dd00      	ble.n	8001342 <__aeabi_dadd+0xe2>
 8001340:	e0c4      	b.n	80014cc <__aeabi_dadd+0x26c>
 8001342:	1b9e      	subs	r6, r3, r6
 8001344:	1c73      	adds	r3, r6, #1
 8001346:	2b1f      	cmp	r3, #31
 8001348:	dd00      	ble.n	800134c <__aeabi_dadd+0xec>
 800134a:	e0f1      	b.n	8001530 <__aeabi_dadd+0x2d0>
 800134c:	2220      	movs	r2, #32
 800134e:	0038      	movs	r0, r7
 8001350:	0029      	movs	r1, r5
 8001352:	1ad2      	subs	r2, r2, r3
 8001354:	40d8      	lsrs	r0, r3
 8001356:	4091      	lsls	r1, r2
 8001358:	4097      	lsls	r7, r2
 800135a:	002c      	movs	r4, r5
 800135c:	4301      	orrs	r1, r0
 800135e:	1e78      	subs	r0, r7, #1
 8001360:	4187      	sbcs	r7, r0
 8001362:	40dc      	lsrs	r4, r3
 8001364:	2600      	movs	r6, #0
 8001366:	430f      	orrs	r7, r1
 8001368:	077b      	lsls	r3, r7, #29
 800136a:	d009      	beq.n	8001380 <__aeabi_dadd+0x120>
 800136c:	230f      	movs	r3, #15
 800136e:	403b      	ands	r3, r7
 8001370:	2b04      	cmp	r3, #4
 8001372:	d005      	beq.n	8001380 <__aeabi_dadd+0x120>
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	42bb      	cmp	r3, r7
 8001378:	41bf      	sbcs	r7, r7
 800137a:	427f      	negs	r7, r7
 800137c:	19e4      	adds	r4, r4, r7
 800137e:	001f      	movs	r7, r3
 8001380:	0223      	lsls	r3, r4, #8
 8001382:	d52c      	bpl.n	80013de <__aeabi_dadd+0x17e>
 8001384:	4b96      	ldr	r3, [pc, #600]	; (80015e0 <__aeabi_dadd+0x380>)
 8001386:	3601      	adds	r6, #1
 8001388:	429e      	cmp	r6, r3
 800138a:	d100      	bne.n	800138e <__aeabi_dadd+0x12e>
 800138c:	e09a      	b.n	80014c4 <__aeabi_dadd+0x264>
 800138e:	4645      	mov	r5, r8
 8001390:	4b94      	ldr	r3, [pc, #592]	; (80015e4 <__aeabi_dadd+0x384>)
 8001392:	08ff      	lsrs	r7, r7, #3
 8001394:	401c      	ands	r4, r3
 8001396:	0760      	lsls	r0, r4, #29
 8001398:	0576      	lsls	r6, r6, #21
 800139a:	0264      	lsls	r4, r4, #9
 800139c:	4307      	orrs	r7, r0
 800139e:	0b24      	lsrs	r4, r4, #12
 80013a0:	0d76      	lsrs	r6, r6, #21
 80013a2:	2100      	movs	r1, #0
 80013a4:	0324      	lsls	r4, r4, #12
 80013a6:	0b23      	lsrs	r3, r4, #12
 80013a8:	0d0c      	lsrs	r4, r1, #20
 80013aa:	4a8f      	ldr	r2, [pc, #572]	; (80015e8 <__aeabi_dadd+0x388>)
 80013ac:	0524      	lsls	r4, r4, #20
 80013ae:	431c      	orrs	r4, r3
 80013b0:	4014      	ands	r4, r2
 80013b2:	0533      	lsls	r3, r6, #20
 80013b4:	4323      	orrs	r3, r4
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	07ed      	lsls	r5, r5, #31
 80013ba:	085b      	lsrs	r3, r3, #1
 80013bc:	432b      	orrs	r3, r5
 80013be:	0038      	movs	r0, r7
 80013c0:	0019      	movs	r1, r3
 80013c2:	bc3c      	pop	{r2, r3, r4, r5}
 80013c4:	4690      	mov	r8, r2
 80013c6:	4699      	mov	r9, r3
 80013c8:	46a2      	mov	sl, r4
 80013ca:	46ab      	mov	fp, r5
 80013cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ce:	4664      	mov	r4, ip
 80013d0:	4304      	orrs	r4, r0
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dadd+0x176>
 80013d4:	e211      	b.n	80017fa <__aeabi_dadd+0x59a>
 80013d6:	0004      	movs	r4, r0
 80013d8:	4667      	mov	r7, ip
 80013da:	077b      	lsls	r3, r7, #29
 80013dc:	d1c6      	bne.n	800136c <__aeabi_dadd+0x10c>
 80013de:	4645      	mov	r5, r8
 80013e0:	0760      	lsls	r0, r4, #29
 80013e2:	08ff      	lsrs	r7, r7, #3
 80013e4:	4307      	orrs	r7, r0
 80013e6:	08e4      	lsrs	r4, r4, #3
 80013e8:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <__aeabi_dadd+0x380>)
 80013ea:	429e      	cmp	r6, r3
 80013ec:	d030      	beq.n	8001450 <__aeabi_dadd+0x1f0>
 80013ee:	0324      	lsls	r4, r4, #12
 80013f0:	0576      	lsls	r6, r6, #21
 80013f2:	0b24      	lsrs	r4, r4, #12
 80013f4:	0d76      	lsrs	r6, r6, #21
 80013f6:	e7d4      	b.n	80013a2 <__aeabi_dadd+0x142>
 80013f8:	1a33      	subs	r3, r6, r0
 80013fa:	469a      	mov	sl, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dd78      	ble.n	80014f2 <__aeabi_dadd+0x292>
 8001400:	2800      	cmp	r0, #0
 8001402:	d031      	beq.n	8001468 <__aeabi_dadd+0x208>
 8001404:	4876      	ldr	r0, [pc, #472]	; (80015e0 <__aeabi_dadd+0x380>)
 8001406:	4286      	cmp	r6, r0
 8001408:	d0ae      	beq.n	8001368 <__aeabi_dadd+0x108>
 800140a:	2080      	movs	r0, #128	; 0x80
 800140c:	0400      	lsls	r0, r0, #16
 800140e:	4301      	orrs	r1, r0
 8001410:	4653      	mov	r3, sl
 8001412:	2b38      	cmp	r3, #56	; 0x38
 8001414:	dc00      	bgt.n	8001418 <__aeabi_dadd+0x1b8>
 8001416:	e0e9      	b.n	80015ec <__aeabi_dadd+0x38c>
 8001418:	430a      	orrs	r2, r1
 800141a:	1e51      	subs	r1, r2, #1
 800141c:	418a      	sbcs	r2, r1
 800141e:	2100      	movs	r1, #0
 8001420:	19d2      	adds	r2, r2, r7
 8001422:	42ba      	cmp	r2, r7
 8001424:	41bf      	sbcs	r7, r7
 8001426:	1909      	adds	r1, r1, r4
 8001428:	427c      	negs	r4, r7
 800142a:	0017      	movs	r7, r2
 800142c:	190c      	adds	r4, r1, r4
 800142e:	0223      	lsls	r3, r4, #8
 8001430:	d5d3      	bpl.n	80013da <__aeabi_dadd+0x17a>
 8001432:	4b6b      	ldr	r3, [pc, #428]	; (80015e0 <__aeabi_dadd+0x380>)
 8001434:	3601      	adds	r6, #1
 8001436:	429e      	cmp	r6, r3
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x1dc>
 800143a:	e13a      	b.n	80016b2 <__aeabi_dadd+0x452>
 800143c:	2001      	movs	r0, #1
 800143e:	4b69      	ldr	r3, [pc, #420]	; (80015e4 <__aeabi_dadd+0x384>)
 8001440:	401c      	ands	r4, r3
 8001442:	087b      	lsrs	r3, r7, #1
 8001444:	4007      	ands	r7, r0
 8001446:	431f      	orrs	r7, r3
 8001448:	07e0      	lsls	r0, r4, #31
 800144a:	4307      	orrs	r7, r0
 800144c:	0864      	lsrs	r4, r4, #1
 800144e:	e78b      	b.n	8001368 <__aeabi_dadd+0x108>
 8001450:	0023      	movs	r3, r4
 8001452:	433b      	orrs	r3, r7
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x1f8>
 8001456:	e1cb      	b.n	80017f0 <__aeabi_dadd+0x590>
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	0312      	lsls	r2, r2, #12
 800145c:	4314      	orrs	r4, r2
 800145e:	0324      	lsls	r4, r4, #12
 8001460:	0b24      	lsrs	r4, r4, #12
 8001462:	e79e      	b.n	80013a2 <__aeabi_dadd+0x142>
 8001464:	002e      	movs	r6, r5
 8001466:	e77f      	b.n	8001368 <__aeabi_dadd+0x108>
 8001468:	0008      	movs	r0, r1
 800146a:	4310      	orrs	r0, r2
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x210>
 800146e:	e0b4      	b.n	80015da <__aeabi_dadd+0x37a>
 8001470:	1e58      	subs	r0, r3, #1
 8001472:	2800      	cmp	r0, #0
 8001474:	d000      	beq.n	8001478 <__aeabi_dadd+0x218>
 8001476:	e0de      	b.n	8001636 <__aeabi_dadd+0x3d6>
 8001478:	18ba      	adds	r2, r7, r2
 800147a:	42ba      	cmp	r2, r7
 800147c:	419b      	sbcs	r3, r3
 800147e:	1864      	adds	r4, r4, r1
 8001480:	425b      	negs	r3, r3
 8001482:	18e4      	adds	r4, r4, r3
 8001484:	0017      	movs	r7, r2
 8001486:	2601      	movs	r6, #1
 8001488:	0223      	lsls	r3, r4, #8
 800148a:	d5a6      	bpl.n	80013da <__aeabi_dadd+0x17a>
 800148c:	2602      	movs	r6, #2
 800148e:	e7d5      	b.n	800143c <__aeabi_dadd+0x1dc>
 8001490:	2d00      	cmp	r5, #0
 8001492:	d16e      	bne.n	8001572 <__aeabi_dadd+0x312>
 8001494:	1c70      	adds	r0, r6, #1
 8001496:	0540      	lsls	r0, r0, #21
 8001498:	0d40      	lsrs	r0, r0, #21
 800149a:	2801      	cmp	r0, #1
 800149c:	dc00      	bgt.n	80014a0 <__aeabi_dadd+0x240>
 800149e:	e0f9      	b.n	8001694 <__aeabi_dadd+0x434>
 80014a0:	1ab8      	subs	r0, r7, r2
 80014a2:	4684      	mov	ip, r0
 80014a4:	4287      	cmp	r7, r0
 80014a6:	4180      	sbcs	r0, r0
 80014a8:	1ae5      	subs	r5, r4, r3
 80014aa:	4240      	negs	r0, r0
 80014ac:	1a2d      	subs	r5, r5, r0
 80014ae:	0228      	lsls	r0, r5, #8
 80014b0:	d400      	bmi.n	80014b4 <__aeabi_dadd+0x254>
 80014b2:	e089      	b.n	80015c8 <__aeabi_dadd+0x368>
 80014b4:	1bd7      	subs	r7, r2, r7
 80014b6:	42ba      	cmp	r2, r7
 80014b8:	4192      	sbcs	r2, r2
 80014ba:	1b1c      	subs	r4, r3, r4
 80014bc:	4252      	negs	r2, r2
 80014be:	1aa5      	subs	r5, r4, r2
 80014c0:	46d8      	mov	r8, fp
 80014c2:	e729      	b.n	8001318 <__aeabi_dadd+0xb8>
 80014c4:	4645      	mov	r5, r8
 80014c6:	2400      	movs	r4, #0
 80014c8:	2700      	movs	r7, #0
 80014ca:	e76a      	b.n	80013a2 <__aeabi_dadd+0x142>
 80014cc:	4c45      	ldr	r4, [pc, #276]	; (80015e4 <__aeabi_dadd+0x384>)
 80014ce:	1af6      	subs	r6, r6, r3
 80014d0:	402c      	ands	r4, r5
 80014d2:	e749      	b.n	8001368 <__aeabi_dadd+0x108>
 80014d4:	003d      	movs	r5, r7
 80014d6:	3828      	subs	r0, #40	; 0x28
 80014d8:	4085      	lsls	r5, r0
 80014da:	2700      	movs	r7, #0
 80014dc:	e72e      	b.n	800133c <__aeabi_dadd+0xdc>
 80014de:	0038      	movs	r0, r7
 80014e0:	f001 fcea 	bl	8002eb8 <__clzsi2>
 80014e4:	3020      	adds	r0, #32
 80014e6:	e71d      	b.n	8001324 <__aeabi_dadd+0xc4>
 80014e8:	430a      	orrs	r2, r1
 80014ea:	1e51      	subs	r1, r2, #1
 80014ec:	418a      	sbcs	r2, r1
 80014ee:	2100      	movs	r1, #0
 80014f0:	e707      	b.n	8001302 <__aeabi_dadd+0xa2>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d000      	beq.n	80014f8 <__aeabi_dadd+0x298>
 80014f6:	e0f3      	b.n	80016e0 <__aeabi_dadd+0x480>
 80014f8:	1c70      	adds	r0, r6, #1
 80014fa:	0543      	lsls	r3, r0, #21
 80014fc:	0d5b      	lsrs	r3, r3, #21
 80014fe:	2b01      	cmp	r3, #1
 8001500:	dc00      	bgt.n	8001504 <__aeabi_dadd+0x2a4>
 8001502:	e0ad      	b.n	8001660 <__aeabi_dadd+0x400>
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <__aeabi_dadd+0x380>)
 8001506:	4298      	cmp	r0, r3
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x2ac>
 800150a:	e0d1      	b.n	80016b0 <__aeabi_dadd+0x450>
 800150c:	18ba      	adds	r2, r7, r2
 800150e:	42ba      	cmp	r2, r7
 8001510:	41bf      	sbcs	r7, r7
 8001512:	1864      	adds	r4, r4, r1
 8001514:	427f      	negs	r7, r7
 8001516:	19e4      	adds	r4, r4, r7
 8001518:	07e7      	lsls	r7, r4, #31
 800151a:	0852      	lsrs	r2, r2, #1
 800151c:	4317      	orrs	r7, r2
 800151e:	0864      	lsrs	r4, r4, #1
 8001520:	0006      	movs	r6, r0
 8001522:	e721      	b.n	8001368 <__aeabi_dadd+0x108>
 8001524:	482e      	ldr	r0, [pc, #184]	; (80015e0 <__aeabi_dadd+0x380>)
 8001526:	4285      	cmp	r5, r0
 8001528:	d100      	bne.n	800152c <__aeabi_dadd+0x2cc>
 800152a:	e093      	b.n	8001654 <__aeabi_dadd+0x3f4>
 800152c:	001d      	movs	r5, r3
 800152e:	e6d0      	b.n	80012d2 <__aeabi_dadd+0x72>
 8001530:	0029      	movs	r1, r5
 8001532:	3e1f      	subs	r6, #31
 8001534:	40f1      	lsrs	r1, r6
 8001536:	2b20      	cmp	r3, #32
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x2dc>
 800153a:	e08d      	b.n	8001658 <__aeabi_dadd+0x3f8>
 800153c:	2240      	movs	r2, #64	; 0x40
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	409d      	lsls	r5, r3
 8001542:	432f      	orrs	r7, r5
 8001544:	1e7d      	subs	r5, r7, #1
 8001546:	41af      	sbcs	r7, r5
 8001548:	2400      	movs	r4, #0
 800154a:	430f      	orrs	r7, r1
 800154c:	2600      	movs	r6, #0
 800154e:	e744      	b.n	80013da <__aeabi_dadd+0x17a>
 8001550:	002b      	movs	r3, r5
 8001552:	0008      	movs	r0, r1
 8001554:	3b20      	subs	r3, #32
 8001556:	40d8      	lsrs	r0, r3
 8001558:	0003      	movs	r3, r0
 800155a:	2d20      	cmp	r5, #32
 800155c:	d100      	bne.n	8001560 <__aeabi_dadd+0x300>
 800155e:	e07d      	b.n	800165c <__aeabi_dadd+0x3fc>
 8001560:	2040      	movs	r0, #64	; 0x40
 8001562:	1b45      	subs	r5, r0, r5
 8001564:	40a9      	lsls	r1, r5
 8001566:	430a      	orrs	r2, r1
 8001568:	1e51      	subs	r1, r2, #1
 800156a:	418a      	sbcs	r2, r1
 800156c:	2100      	movs	r1, #0
 800156e:	431a      	orrs	r2, r3
 8001570:	e6c7      	b.n	8001302 <__aeabi_dadd+0xa2>
 8001572:	2e00      	cmp	r6, #0
 8001574:	d050      	beq.n	8001618 <__aeabi_dadd+0x3b8>
 8001576:	4e1a      	ldr	r6, [pc, #104]	; (80015e0 <__aeabi_dadd+0x380>)
 8001578:	42b0      	cmp	r0, r6
 800157a:	d057      	beq.n	800162c <__aeabi_dadd+0x3cc>
 800157c:	2680      	movs	r6, #128	; 0x80
 800157e:	426b      	negs	r3, r5
 8001580:	4699      	mov	r9, r3
 8001582:	0436      	lsls	r6, r6, #16
 8001584:	4334      	orrs	r4, r6
 8001586:	464b      	mov	r3, r9
 8001588:	2b38      	cmp	r3, #56	; 0x38
 800158a:	dd00      	ble.n	800158e <__aeabi_dadd+0x32e>
 800158c:	e0d6      	b.n	800173c <__aeabi_dadd+0x4dc>
 800158e:	2b1f      	cmp	r3, #31
 8001590:	dd00      	ble.n	8001594 <__aeabi_dadd+0x334>
 8001592:	e135      	b.n	8001800 <__aeabi_dadd+0x5a0>
 8001594:	2620      	movs	r6, #32
 8001596:	1af5      	subs	r5, r6, r3
 8001598:	0026      	movs	r6, r4
 800159a:	40ae      	lsls	r6, r5
 800159c:	46b2      	mov	sl, r6
 800159e:	003e      	movs	r6, r7
 80015a0:	40de      	lsrs	r6, r3
 80015a2:	46ac      	mov	ip, r5
 80015a4:	0035      	movs	r5, r6
 80015a6:	4656      	mov	r6, sl
 80015a8:	432e      	orrs	r6, r5
 80015aa:	4665      	mov	r5, ip
 80015ac:	40af      	lsls	r7, r5
 80015ae:	1e7d      	subs	r5, r7, #1
 80015b0:	41af      	sbcs	r7, r5
 80015b2:	40dc      	lsrs	r4, r3
 80015b4:	4337      	orrs	r7, r6
 80015b6:	1bd7      	subs	r7, r2, r7
 80015b8:	42ba      	cmp	r2, r7
 80015ba:	4192      	sbcs	r2, r2
 80015bc:	1b0c      	subs	r4, r1, r4
 80015be:	4252      	negs	r2, r2
 80015c0:	1aa4      	subs	r4, r4, r2
 80015c2:	0006      	movs	r6, r0
 80015c4:	46d8      	mov	r8, fp
 80015c6:	e6a3      	b.n	8001310 <__aeabi_dadd+0xb0>
 80015c8:	4664      	mov	r4, ip
 80015ca:	4667      	mov	r7, ip
 80015cc:	432c      	orrs	r4, r5
 80015ce:	d000      	beq.n	80015d2 <__aeabi_dadd+0x372>
 80015d0:	e6a2      	b.n	8001318 <__aeabi_dadd+0xb8>
 80015d2:	2500      	movs	r5, #0
 80015d4:	2600      	movs	r6, #0
 80015d6:	2700      	movs	r7, #0
 80015d8:	e706      	b.n	80013e8 <__aeabi_dadd+0x188>
 80015da:	001e      	movs	r6, r3
 80015dc:	e6c4      	b.n	8001368 <__aeabi_dadd+0x108>
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	000007ff 	.word	0x000007ff
 80015e4:	ff7fffff 	.word	0xff7fffff
 80015e8:	800fffff 	.word	0x800fffff
 80015ec:	2b1f      	cmp	r3, #31
 80015ee:	dc63      	bgt.n	80016b8 <__aeabi_dadd+0x458>
 80015f0:	2020      	movs	r0, #32
 80015f2:	1ac3      	subs	r3, r0, r3
 80015f4:	0008      	movs	r0, r1
 80015f6:	4098      	lsls	r0, r3
 80015f8:	469c      	mov	ip, r3
 80015fa:	4683      	mov	fp, r0
 80015fc:	4653      	mov	r3, sl
 80015fe:	0010      	movs	r0, r2
 8001600:	40d8      	lsrs	r0, r3
 8001602:	0003      	movs	r3, r0
 8001604:	4658      	mov	r0, fp
 8001606:	4318      	orrs	r0, r3
 8001608:	4663      	mov	r3, ip
 800160a:	409a      	lsls	r2, r3
 800160c:	1e53      	subs	r3, r2, #1
 800160e:	419a      	sbcs	r2, r3
 8001610:	4653      	mov	r3, sl
 8001612:	4302      	orrs	r2, r0
 8001614:	40d9      	lsrs	r1, r3
 8001616:	e703      	b.n	8001420 <__aeabi_dadd+0x1c0>
 8001618:	0026      	movs	r6, r4
 800161a:	433e      	orrs	r6, r7
 800161c:	d006      	beq.n	800162c <__aeabi_dadd+0x3cc>
 800161e:	43eb      	mvns	r3, r5
 8001620:	4699      	mov	r9, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0c7      	beq.n	80015b6 <__aeabi_dadd+0x356>
 8001626:	4e94      	ldr	r6, [pc, #592]	; (8001878 <__aeabi_dadd+0x618>)
 8001628:	42b0      	cmp	r0, r6
 800162a:	d1ac      	bne.n	8001586 <__aeabi_dadd+0x326>
 800162c:	000c      	movs	r4, r1
 800162e:	0017      	movs	r7, r2
 8001630:	0006      	movs	r6, r0
 8001632:	46d8      	mov	r8, fp
 8001634:	e698      	b.n	8001368 <__aeabi_dadd+0x108>
 8001636:	4b90      	ldr	r3, [pc, #576]	; (8001878 <__aeabi_dadd+0x618>)
 8001638:	459a      	cmp	sl, r3
 800163a:	d00b      	beq.n	8001654 <__aeabi_dadd+0x3f4>
 800163c:	4682      	mov	sl, r0
 800163e:	e6e7      	b.n	8001410 <__aeabi_dadd+0x1b0>
 8001640:	2800      	cmp	r0, #0
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x3e6>
 8001644:	e09e      	b.n	8001784 <__aeabi_dadd+0x524>
 8001646:	0018      	movs	r0, r3
 8001648:	4310      	orrs	r0, r2
 800164a:	d100      	bne.n	800164e <__aeabi_dadd+0x3ee>
 800164c:	e0e9      	b.n	8001822 <__aeabi_dadd+0x5c2>
 800164e:	001c      	movs	r4, r3
 8001650:	0017      	movs	r7, r2
 8001652:	46d8      	mov	r8, fp
 8001654:	4e88      	ldr	r6, [pc, #544]	; (8001878 <__aeabi_dadd+0x618>)
 8001656:	e687      	b.n	8001368 <__aeabi_dadd+0x108>
 8001658:	2500      	movs	r5, #0
 800165a:	e772      	b.n	8001542 <__aeabi_dadd+0x2e2>
 800165c:	2100      	movs	r1, #0
 800165e:	e782      	b.n	8001566 <__aeabi_dadd+0x306>
 8001660:	0023      	movs	r3, r4
 8001662:	433b      	orrs	r3, r7
 8001664:	2e00      	cmp	r6, #0
 8001666:	d000      	beq.n	800166a <__aeabi_dadd+0x40a>
 8001668:	e0ab      	b.n	80017c2 <__aeabi_dadd+0x562>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dadd+0x410>
 800166e:	e0e7      	b.n	8001840 <__aeabi_dadd+0x5e0>
 8001670:	000b      	movs	r3, r1
 8001672:	4313      	orrs	r3, r2
 8001674:	d100      	bne.n	8001678 <__aeabi_dadd+0x418>
 8001676:	e677      	b.n	8001368 <__aeabi_dadd+0x108>
 8001678:	18ba      	adds	r2, r7, r2
 800167a:	42ba      	cmp	r2, r7
 800167c:	41bf      	sbcs	r7, r7
 800167e:	1864      	adds	r4, r4, r1
 8001680:	427f      	negs	r7, r7
 8001682:	19e4      	adds	r4, r4, r7
 8001684:	0223      	lsls	r3, r4, #8
 8001686:	d400      	bmi.n	800168a <__aeabi_dadd+0x42a>
 8001688:	e0f2      	b.n	8001870 <__aeabi_dadd+0x610>
 800168a:	4b7c      	ldr	r3, [pc, #496]	; (800187c <__aeabi_dadd+0x61c>)
 800168c:	0017      	movs	r7, r2
 800168e:	401c      	ands	r4, r3
 8001690:	0006      	movs	r6, r0
 8001692:	e669      	b.n	8001368 <__aeabi_dadd+0x108>
 8001694:	0020      	movs	r0, r4
 8001696:	4338      	orrs	r0, r7
 8001698:	2e00      	cmp	r6, #0
 800169a:	d1d1      	bne.n	8001640 <__aeabi_dadd+0x3e0>
 800169c:	2800      	cmp	r0, #0
 800169e:	d15b      	bne.n	8001758 <__aeabi_dadd+0x4f8>
 80016a0:	001c      	movs	r4, r3
 80016a2:	4314      	orrs	r4, r2
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dadd+0x448>
 80016a6:	e0a8      	b.n	80017fa <__aeabi_dadd+0x59a>
 80016a8:	001c      	movs	r4, r3
 80016aa:	0017      	movs	r7, r2
 80016ac:	46d8      	mov	r8, fp
 80016ae:	e65b      	b.n	8001368 <__aeabi_dadd+0x108>
 80016b0:	0006      	movs	r6, r0
 80016b2:	2400      	movs	r4, #0
 80016b4:	2700      	movs	r7, #0
 80016b6:	e697      	b.n	80013e8 <__aeabi_dadd+0x188>
 80016b8:	4650      	mov	r0, sl
 80016ba:	000b      	movs	r3, r1
 80016bc:	3820      	subs	r0, #32
 80016be:	40c3      	lsrs	r3, r0
 80016c0:	4699      	mov	r9, r3
 80016c2:	4653      	mov	r3, sl
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	d100      	bne.n	80016ca <__aeabi_dadd+0x46a>
 80016c8:	e095      	b.n	80017f6 <__aeabi_dadd+0x596>
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	4650      	mov	r0, sl
 80016ce:	1a1b      	subs	r3, r3, r0
 80016d0:	4099      	lsls	r1, r3
 80016d2:	430a      	orrs	r2, r1
 80016d4:	1e51      	subs	r1, r2, #1
 80016d6:	418a      	sbcs	r2, r1
 80016d8:	464b      	mov	r3, r9
 80016da:	2100      	movs	r1, #0
 80016dc:	431a      	orrs	r2, r3
 80016de:	e69f      	b.n	8001420 <__aeabi_dadd+0x1c0>
 80016e0:	2e00      	cmp	r6, #0
 80016e2:	d130      	bne.n	8001746 <__aeabi_dadd+0x4e6>
 80016e4:	0026      	movs	r6, r4
 80016e6:	433e      	orrs	r6, r7
 80016e8:	d067      	beq.n	80017ba <__aeabi_dadd+0x55a>
 80016ea:	43db      	mvns	r3, r3
 80016ec:	469a      	mov	sl, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d01c      	beq.n	800172c <__aeabi_dadd+0x4cc>
 80016f2:	4e61      	ldr	r6, [pc, #388]	; (8001878 <__aeabi_dadd+0x618>)
 80016f4:	42b0      	cmp	r0, r6
 80016f6:	d060      	beq.n	80017ba <__aeabi_dadd+0x55a>
 80016f8:	4653      	mov	r3, sl
 80016fa:	2b38      	cmp	r3, #56	; 0x38
 80016fc:	dd00      	ble.n	8001700 <__aeabi_dadd+0x4a0>
 80016fe:	e096      	b.n	800182e <__aeabi_dadd+0x5ce>
 8001700:	2b1f      	cmp	r3, #31
 8001702:	dd00      	ble.n	8001706 <__aeabi_dadd+0x4a6>
 8001704:	e09f      	b.n	8001846 <__aeabi_dadd+0x5e6>
 8001706:	2620      	movs	r6, #32
 8001708:	1af3      	subs	r3, r6, r3
 800170a:	0026      	movs	r6, r4
 800170c:	409e      	lsls	r6, r3
 800170e:	469c      	mov	ip, r3
 8001710:	46b3      	mov	fp, r6
 8001712:	4653      	mov	r3, sl
 8001714:	003e      	movs	r6, r7
 8001716:	40de      	lsrs	r6, r3
 8001718:	0033      	movs	r3, r6
 800171a:	465e      	mov	r6, fp
 800171c:	431e      	orrs	r6, r3
 800171e:	4663      	mov	r3, ip
 8001720:	409f      	lsls	r7, r3
 8001722:	1e7b      	subs	r3, r7, #1
 8001724:	419f      	sbcs	r7, r3
 8001726:	4653      	mov	r3, sl
 8001728:	40dc      	lsrs	r4, r3
 800172a:	4337      	orrs	r7, r6
 800172c:	18bf      	adds	r7, r7, r2
 800172e:	4297      	cmp	r7, r2
 8001730:	4192      	sbcs	r2, r2
 8001732:	1864      	adds	r4, r4, r1
 8001734:	4252      	negs	r2, r2
 8001736:	18a4      	adds	r4, r4, r2
 8001738:	0006      	movs	r6, r0
 800173a:	e678      	b.n	800142e <__aeabi_dadd+0x1ce>
 800173c:	4327      	orrs	r7, r4
 800173e:	1e7c      	subs	r4, r7, #1
 8001740:	41a7      	sbcs	r7, r4
 8001742:	2400      	movs	r4, #0
 8001744:	e737      	b.n	80015b6 <__aeabi_dadd+0x356>
 8001746:	4e4c      	ldr	r6, [pc, #304]	; (8001878 <__aeabi_dadd+0x618>)
 8001748:	42b0      	cmp	r0, r6
 800174a:	d036      	beq.n	80017ba <__aeabi_dadd+0x55a>
 800174c:	2680      	movs	r6, #128	; 0x80
 800174e:	425b      	negs	r3, r3
 8001750:	0436      	lsls	r6, r6, #16
 8001752:	469a      	mov	sl, r3
 8001754:	4334      	orrs	r4, r6
 8001756:	e7cf      	b.n	80016f8 <__aeabi_dadd+0x498>
 8001758:	0018      	movs	r0, r3
 800175a:	4310      	orrs	r0, r2
 800175c:	d100      	bne.n	8001760 <__aeabi_dadd+0x500>
 800175e:	e603      	b.n	8001368 <__aeabi_dadd+0x108>
 8001760:	1ab8      	subs	r0, r7, r2
 8001762:	4684      	mov	ip, r0
 8001764:	4567      	cmp	r7, ip
 8001766:	41ad      	sbcs	r5, r5
 8001768:	1ae0      	subs	r0, r4, r3
 800176a:	426d      	negs	r5, r5
 800176c:	1b40      	subs	r0, r0, r5
 800176e:	0205      	lsls	r5, r0, #8
 8001770:	d400      	bmi.n	8001774 <__aeabi_dadd+0x514>
 8001772:	e62c      	b.n	80013ce <__aeabi_dadd+0x16e>
 8001774:	1bd7      	subs	r7, r2, r7
 8001776:	42ba      	cmp	r2, r7
 8001778:	4192      	sbcs	r2, r2
 800177a:	1b1c      	subs	r4, r3, r4
 800177c:	4252      	negs	r2, r2
 800177e:	1aa4      	subs	r4, r4, r2
 8001780:	46d8      	mov	r8, fp
 8001782:	e5f1      	b.n	8001368 <__aeabi_dadd+0x108>
 8001784:	0018      	movs	r0, r3
 8001786:	4310      	orrs	r0, r2
 8001788:	d100      	bne.n	800178c <__aeabi_dadd+0x52c>
 800178a:	e763      	b.n	8001654 <__aeabi_dadd+0x3f4>
 800178c:	08f8      	lsrs	r0, r7, #3
 800178e:	0767      	lsls	r7, r4, #29
 8001790:	4307      	orrs	r7, r0
 8001792:	2080      	movs	r0, #128	; 0x80
 8001794:	08e4      	lsrs	r4, r4, #3
 8001796:	0300      	lsls	r0, r0, #12
 8001798:	4204      	tst	r4, r0
 800179a:	d008      	beq.n	80017ae <__aeabi_dadd+0x54e>
 800179c:	08dd      	lsrs	r5, r3, #3
 800179e:	4205      	tst	r5, r0
 80017a0:	d105      	bne.n	80017ae <__aeabi_dadd+0x54e>
 80017a2:	08d2      	lsrs	r2, r2, #3
 80017a4:	0759      	lsls	r1, r3, #29
 80017a6:	4311      	orrs	r1, r2
 80017a8:	000f      	movs	r7, r1
 80017aa:	002c      	movs	r4, r5
 80017ac:	46d8      	mov	r8, fp
 80017ae:	0f7b      	lsrs	r3, r7, #29
 80017b0:	00e4      	lsls	r4, r4, #3
 80017b2:	431c      	orrs	r4, r3
 80017b4:	00ff      	lsls	r7, r7, #3
 80017b6:	4e30      	ldr	r6, [pc, #192]	; (8001878 <__aeabi_dadd+0x618>)
 80017b8:	e5d6      	b.n	8001368 <__aeabi_dadd+0x108>
 80017ba:	000c      	movs	r4, r1
 80017bc:	0017      	movs	r7, r2
 80017be:	0006      	movs	r6, r0
 80017c0:	e5d2      	b.n	8001368 <__aeabi_dadd+0x108>
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d038      	beq.n	8001838 <__aeabi_dadd+0x5d8>
 80017c6:	000b      	movs	r3, r1
 80017c8:	4313      	orrs	r3, r2
 80017ca:	d100      	bne.n	80017ce <__aeabi_dadd+0x56e>
 80017cc:	e742      	b.n	8001654 <__aeabi_dadd+0x3f4>
 80017ce:	08f8      	lsrs	r0, r7, #3
 80017d0:	0767      	lsls	r7, r4, #29
 80017d2:	4307      	orrs	r7, r0
 80017d4:	2080      	movs	r0, #128	; 0x80
 80017d6:	08e4      	lsrs	r4, r4, #3
 80017d8:	0300      	lsls	r0, r0, #12
 80017da:	4204      	tst	r4, r0
 80017dc:	d0e7      	beq.n	80017ae <__aeabi_dadd+0x54e>
 80017de:	08cb      	lsrs	r3, r1, #3
 80017e0:	4203      	tst	r3, r0
 80017e2:	d1e4      	bne.n	80017ae <__aeabi_dadd+0x54e>
 80017e4:	08d2      	lsrs	r2, r2, #3
 80017e6:	0749      	lsls	r1, r1, #29
 80017e8:	4311      	orrs	r1, r2
 80017ea:	000f      	movs	r7, r1
 80017ec:	001c      	movs	r4, r3
 80017ee:	e7de      	b.n	80017ae <__aeabi_dadd+0x54e>
 80017f0:	2700      	movs	r7, #0
 80017f2:	2400      	movs	r4, #0
 80017f4:	e5d5      	b.n	80013a2 <__aeabi_dadd+0x142>
 80017f6:	2100      	movs	r1, #0
 80017f8:	e76b      	b.n	80016d2 <__aeabi_dadd+0x472>
 80017fa:	2500      	movs	r5, #0
 80017fc:	2700      	movs	r7, #0
 80017fe:	e5f3      	b.n	80013e8 <__aeabi_dadd+0x188>
 8001800:	464e      	mov	r6, r9
 8001802:	0025      	movs	r5, r4
 8001804:	3e20      	subs	r6, #32
 8001806:	40f5      	lsrs	r5, r6
 8001808:	464b      	mov	r3, r9
 800180a:	002e      	movs	r6, r5
 800180c:	2b20      	cmp	r3, #32
 800180e:	d02d      	beq.n	800186c <__aeabi_dadd+0x60c>
 8001810:	2540      	movs	r5, #64	; 0x40
 8001812:	1aed      	subs	r5, r5, r3
 8001814:	40ac      	lsls	r4, r5
 8001816:	4327      	orrs	r7, r4
 8001818:	1e7c      	subs	r4, r7, #1
 800181a:	41a7      	sbcs	r7, r4
 800181c:	2400      	movs	r4, #0
 800181e:	4337      	orrs	r7, r6
 8001820:	e6c9      	b.n	80015b6 <__aeabi_dadd+0x356>
 8001822:	2480      	movs	r4, #128	; 0x80
 8001824:	2500      	movs	r5, #0
 8001826:	0324      	lsls	r4, r4, #12
 8001828:	4e13      	ldr	r6, [pc, #76]	; (8001878 <__aeabi_dadd+0x618>)
 800182a:	2700      	movs	r7, #0
 800182c:	e5dc      	b.n	80013e8 <__aeabi_dadd+0x188>
 800182e:	4327      	orrs	r7, r4
 8001830:	1e7c      	subs	r4, r7, #1
 8001832:	41a7      	sbcs	r7, r4
 8001834:	2400      	movs	r4, #0
 8001836:	e779      	b.n	800172c <__aeabi_dadd+0x4cc>
 8001838:	000c      	movs	r4, r1
 800183a:	0017      	movs	r7, r2
 800183c:	4e0e      	ldr	r6, [pc, #56]	; (8001878 <__aeabi_dadd+0x618>)
 800183e:	e593      	b.n	8001368 <__aeabi_dadd+0x108>
 8001840:	000c      	movs	r4, r1
 8001842:	0017      	movs	r7, r2
 8001844:	e590      	b.n	8001368 <__aeabi_dadd+0x108>
 8001846:	4656      	mov	r6, sl
 8001848:	0023      	movs	r3, r4
 800184a:	3e20      	subs	r6, #32
 800184c:	40f3      	lsrs	r3, r6
 800184e:	4699      	mov	r9, r3
 8001850:	4653      	mov	r3, sl
 8001852:	2b20      	cmp	r3, #32
 8001854:	d00e      	beq.n	8001874 <__aeabi_dadd+0x614>
 8001856:	2340      	movs	r3, #64	; 0x40
 8001858:	4656      	mov	r6, sl
 800185a:	1b9b      	subs	r3, r3, r6
 800185c:	409c      	lsls	r4, r3
 800185e:	4327      	orrs	r7, r4
 8001860:	1e7c      	subs	r4, r7, #1
 8001862:	41a7      	sbcs	r7, r4
 8001864:	464b      	mov	r3, r9
 8001866:	2400      	movs	r4, #0
 8001868:	431f      	orrs	r7, r3
 800186a:	e75f      	b.n	800172c <__aeabi_dadd+0x4cc>
 800186c:	2400      	movs	r4, #0
 800186e:	e7d2      	b.n	8001816 <__aeabi_dadd+0x5b6>
 8001870:	0017      	movs	r7, r2
 8001872:	e5b2      	b.n	80013da <__aeabi_dadd+0x17a>
 8001874:	2400      	movs	r4, #0
 8001876:	e7f2      	b.n	800185e <__aeabi_dadd+0x5fe>
 8001878:	000007ff 	.word	0x000007ff
 800187c:	ff7fffff 	.word	0xff7fffff

08001880 <__aeabi_ddiv>:
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	4657      	mov	r7, sl
 8001884:	4645      	mov	r5, r8
 8001886:	46de      	mov	lr, fp
 8001888:	464e      	mov	r6, r9
 800188a:	b5e0      	push	{r5, r6, r7, lr}
 800188c:	004c      	lsls	r4, r1, #1
 800188e:	030e      	lsls	r6, r1, #12
 8001890:	b087      	sub	sp, #28
 8001892:	4683      	mov	fp, r0
 8001894:	4692      	mov	sl, r2
 8001896:	001d      	movs	r5, r3
 8001898:	4680      	mov	r8, r0
 800189a:	0b36      	lsrs	r6, r6, #12
 800189c:	0d64      	lsrs	r4, r4, #21
 800189e:	0fcf      	lsrs	r7, r1, #31
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d04f      	beq.n	8001944 <__aeabi_ddiv+0xc4>
 80018a4:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <__aeabi_ddiv+0x1e4>)
 80018a6:	429c      	cmp	r4, r3
 80018a8:	d035      	beq.n	8001916 <__aeabi_ddiv+0x96>
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	0f42      	lsrs	r2, r0, #29
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	00f6      	lsls	r6, r6, #3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	4333      	orrs	r3, r6
 80018b6:	4699      	mov	r9, r3
 80018b8:	00c3      	lsls	r3, r0, #3
 80018ba:	4698      	mov	r8, r3
 80018bc:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <__aeabi_ddiv+0x1e8>)
 80018be:	2600      	movs	r6, #0
 80018c0:	469c      	mov	ip, r3
 80018c2:	2300      	movs	r3, #0
 80018c4:	4464      	add	r4, ip
 80018c6:	9303      	str	r3, [sp, #12]
 80018c8:	032b      	lsls	r3, r5, #12
 80018ca:	0b1b      	lsrs	r3, r3, #12
 80018cc:	469b      	mov	fp, r3
 80018ce:	006b      	lsls	r3, r5, #1
 80018d0:	0fed      	lsrs	r5, r5, #31
 80018d2:	4650      	mov	r0, sl
 80018d4:	0d5b      	lsrs	r3, r3, #21
 80018d6:	9501      	str	r5, [sp, #4]
 80018d8:	d05e      	beq.n	8001998 <__aeabi_ddiv+0x118>
 80018da:	4a62      	ldr	r2, [pc, #392]	; (8001a64 <__aeabi_ddiv+0x1e4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d053      	beq.n	8001988 <__aeabi_ddiv+0x108>
 80018e0:	465a      	mov	r2, fp
 80018e2:	00d1      	lsls	r1, r2, #3
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	0f40      	lsrs	r0, r0, #29
 80018e8:	0412      	lsls	r2, r2, #16
 80018ea:	4302      	orrs	r2, r0
 80018ec:	430a      	orrs	r2, r1
 80018ee:	4693      	mov	fp, r2
 80018f0:	4652      	mov	r2, sl
 80018f2:	00d1      	lsls	r1, r2, #3
 80018f4:	4a5c      	ldr	r2, [pc, #368]	; (8001a68 <__aeabi_ddiv+0x1e8>)
 80018f6:	4694      	mov	ip, r2
 80018f8:	2200      	movs	r2, #0
 80018fa:	4463      	add	r3, ip
 80018fc:	0038      	movs	r0, r7
 80018fe:	4068      	eors	r0, r5
 8001900:	4684      	mov	ip, r0
 8001902:	9002      	str	r0, [sp, #8]
 8001904:	1ae4      	subs	r4, r4, r3
 8001906:	4316      	orrs	r6, r2
 8001908:	2e0f      	cmp	r6, #15
 800190a:	d900      	bls.n	800190e <__aeabi_ddiv+0x8e>
 800190c:	e0b4      	b.n	8001a78 <__aeabi_ddiv+0x1f8>
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <__aeabi_ddiv+0x1ec>)
 8001910:	00b6      	lsls	r6, r6, #2
 8001912:	599b      	ldr	r3, [r3, r6]
 8001914:	469f      	mov	pc, r3
 8001916:	0003      	movs	r3, r0
 8001918:	4333      	orrs	r3, r6
 800191a:	4699      	mov	r9, r3
 800191c:	d16c      	bne.n	80019f8 <__aeabi_ddiv+0x178>
 800191e:	2300      	movs	r3, #0
 8001920:	4698      	mov	r8, r3
 8001922:	3302      	adds	r3, #2
 8001924:	2608      	movs	r6, #8
 8001926:	9303      	str	r3, [sp, #12]
 8001928:	e7ce      	b.n	80018c8 <__aeabi_ddiv+0x48>
 800192a:	46cb      	mov	fp, r9
 800192c:	4641      	mov	r1, r8
 800192e:	9a03      	ldr	r2, [sp, #12]
 8001930:	9701      	str	r7, [sp, #4]
 8001932:	2a02      	cmp	r2, #2
 8001934:	d165      	bne.n	8001a02 <__aeabi_ddiv+0x182>
 8001936:	9b01      	ldr	r3, [sp, #4]
 8001938:	4c4a      	ldr	r4, [pc, #296]	; (8001a64 <__aeabi_ddiv+0x1e4>)
 800193a:	469c      	mov	ip, r3
 800193c:	2300      	movs	r3, #0
 800193e:	2200      	movs	r2, #0
 8001940:	4698      	mov	r8, r3
 8001942:	e06b      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001944:	0003      	movs	r3, r0
 8001946:	4333      	orrs	r3, r6
 8001948:	4699      	mov	r9, r3
 800194a:	d04e      	beq.n	80019ea <__aeabi_ddiv+0x16a>
 800194c:	2e00      	cmp	r6, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_ddiv+0xd2>
 8001950:	e1bc      	b.n	8001ccc <__aeabi_ddiv+0x44c>
 8001952:	0030      	movs	r0, r6
 8001954:	f001 fab0 	bl	8002eb8 <__clzsi2>
 8001958:	0003      	movs	r3, r0
 800195a:	3b0b      	subs	r3, #11
 800195c:	2b1c      	cmp	r3, #28
 800195e:	dd00      	ble.n	8001962 <__aeabi_ddiv+0xe2>
 8001960:	e1ac      	b.n	8001cbc <__aeabi_ddiv+0x43c>
 8001962:	221d      	movs	r2, #29
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	465a      	mov	r2, fp
 8001968:	0001      	movs	r1, r0
 800196a:	40da      	lsrs	r2, r3
 800196c:	3908      	subs	r1, #8
 800196e:	408e      	lsls	r6, r1
 8001970:	0013      	movs	r3, r2
 8001972:	4333      	orrs	r3, r6
 8001974:	4699      	mov	r9, r3
 8001976:	465b      	mov	r3, fp
 8001978:	408b      	lsls	r3, r1
 800197a:	4698      	mov	r8, r3
 800197c:	2300      	movs	r3, #0
 800197e:	4c3c      	ldr	r4, [pc, #240]	; (8001a70 <__aeabi_ddiv+0x1f0>)
 8001980:	2600      	movs	r6, #0
 8001982:	1a24      	subs	r4, r4, r0
 8001984:	9303      	str	r3, [sp, #12]
 8001986:	e79f      	b.n	80018c8 <__aeabi_ddiv+0x48>
 8001988:	4651      	mov	r1, sl
 800198a:	465a      	mov	r2, fp
 800198c:	4311      	orrs	r1, r2
 800198e:	d129      	bne.n	80019e4 <__aeabi_ddiv+0x164>
 8001990:	2200      	movs	r2, #0
 8001992:	4693      	mov	fp, r2
 8001994:	3202      	adds	r2, #2
 8001996:	e7b1      	b.n	80018fc <__aeabi_ddiv+0x7c>
 8001998:	4659      	mov	r1, fp
 800199a:	4301      	orrs	r1, r0
 800199c:	d01e      	beq.n	80019dc <__aeabi_ddiv+0x15c>
 800199e:	465b      	mov	r3, fp
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d100      	bne.n	80019a6 <__aeabi_ddiv+0x126>
 80019a4:	e19e      	b.n	8001ce4 <__aeabi_ddiv+0x464>
 80019a6:	4658      	mov	r0, fp
 80019a8:	f001 fa86 	bl	8002eb8 <__clzsi2>
 80019ac:	0003      	movs	r3, r0
 80019ae:	3b0b      	subs	r3, #11
 80019b0:	2b1c      	cmp	r3, #28
 80019b2:	dd00      	ble.n	80019b6 <__aeabi_ddiv+0x136>
 80019b4:	e18f      	b.n	8001cd6 <__aeabi_ddiv+0x456>
 80019b6:	0002      	movs	r2, r0
 80019b8:	4659      	mov	r1, fp
 80019ba:	3a08      	subs	r2, #8
 80019bc:	4091      	lsls	r1, r2
 80019be:	468b      	mov	fp, r1
 80019c0:	211d      	movs	r1, #29
 80019c2:	1acb      	subs	r3, r1, r3
 80019c4:	4651      	mov	r1, sl
 80019c6:	40d9      	lsrs	r1, r3
 80019c8:	000b      	movs	r3, r1
 80019ca:	4659      	mov	r1, fp
 80019cc:	430b      	orrs	r3, r1
 80019ce:	4651      	mov	r1, sl
 80019d0:	469b      	mov	fp, r3
 80019d2:	4091      	lsls	r1, r2
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <__aeabi_ddiv+0x1f0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	1a1b      	subs	r3, r3, r0
 80019da:	e78f      	b.n	80018fc <__aeabi_ddiv+0x7c>
 80019dc:	2300      	movs	r3, #0
 80019de:	2201      	movs	r2, #1
 80019e0:	469b      	mov	fp, r3
 80019e2:	e78b      	b.n	80018fc <__aeabi_ddiv+0x7c>
 80019e4:	4651      	mov	r1, sl
 80019e6:	2203      	movs	r2, #3
 80019e8:	e788      	b.n	80018fc <__aeabi_ddiv+0x7c>
 80019ea:	2300      	movs	r3, #0
 80019ec:	4698      	mov	r8, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	2604      	movs	r6, #4
 80019f2:	2400      	movs	r4, #0
 80019f4:	9303      	str	r3, [sp, #12]
 80019f6:	e767      	b.n	80018c8 <__aeabi_ddiv+0x48>
 80019f8:	2303      	movs	r3, #3
 80019fa:	46b1      	mov	r9, r6
 80019fc:	9303      	str	r3, [sp, #12]
 80019fe:	260c      	movs	r6, #12
 8001a00:	e762      	b.n	80018c8 <__aeabi_ddiv+0x48>
 8001a02:	2a03      	cmp	r2, #3
 8001a04:	d100      	bne.n	8001a08 <__aeabi_ddiv+0x188>
 8001a06:	e25c      	b.n	8001ec2 <__aeabi_ddiv+0x642>
 8001a08:	9b01      	ldr	r3, [sp, #4]
 8001a0a:	2a01      	cmp	r2, #1
 8001a0c:	d000      	beq.n	8001a10 <__aeabi_ddiv+0x190>
 8001a0e:	e1e4      	b.n	8001dda <__aeabi_ddiv+0x55a>
 8001a10:	4013      	ands	r3, r2
 8001a12:	469c      	mov	ip, r3
 8001a14:	2300      	movs	r3, #0
 8001a16:	2400      	movs	r4, #0
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	0312      	lsls	r2, r2, #12
 8001a20:	0b13      	lsrs	r3, r2, #12
 8001a22:	0d0a      	lsrs	r2, r1, #20
 8001a24:	0512      	lsls	r2, r2, #20
 8001a26:	431a      	orrs	r2, r3
 8001a28:	0523      	lsls	r3, r4, #20
 8001a2a:	4c12      	ldr	r4, [pc, #72]	; (8001a74 <__aeabi_ddiv+0x1f4>)
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	4022      	ands	r2, r4
 8001a30:	4313      	orrs	r3, r2
 8001a32:	4662      	mov	r2, ip
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	07d2      	lsls	r2, r2, #31
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	b007      	add	sp, #28
 8001a40:	bc3c      	pop	{r2, r3, r4, r5}
 8001a42:	4690      	mov	r8, r2
 8001a44:	4699      	mov	r9, r3
 8001a46:	46a2      	mov	sl, r4
 8001a48:	46ab      	mov	fp, r5
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	469c      	mov	ip, r3
 8001a52:	0312      	lsls	r2, r2, #12
 8001a54:	4698      	mov	r8, r3
 8001a56:	4c03      	ldr	r4, [pc, #12]	; (8001a64 <__aeabi_ddiv+0x1e4>)
 8001a58:	e7e0      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	4c01      	ldr	r4, [pc, #4]	; (8001a64 <__aeabi_ddiv+0x1e4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4698      	mov	r8, r3
 8001a62:	e7db      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001a64:	000007ff 	.word	0x000007ff
 8001a68:	fffffc01 	.word	0xfffffc01
 8001a6c:	080078a0 	.word	0x080078a0
 8001a70:	fffffc0d 	.word	0xfffffc0d
 8001a74:	800fffff 	.word	0x800fffff
 8001a78:	45d9      	cmp	r9, fp
 8001a7a:	d900      	bls.n	8001a7e <__aeabi_ddiv+0x1fe>
 8001a7c:	e139      	b.n	8001cf2 <__aeabi_ddiv+0x472>
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_ddiv+0x202>
 8001a80:	e134      	b.n	8001cec <__aeabi_ddiv+0x46c>
 8001a82:	2300      	movs	r3, #0
 8001a84:	4646      	mov	r6, r8
 8001a86:	464d      	mov	r5, r9
 8001a88:	469a      	mov	sl, r3
 8001a8a:	3c01      	subs	r4, #1
 8001a8c:	465b      	mov	r3, fp
 8001a8e:	0e0a      	lsrs	r2, r1, #24
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	431a      	orrs	r2, r3
 8001a94:	020b      	lsls	r3, r1, #8
 8001a96:	0c17      	lsrs	r7, r2, #16
 8001a98:	9303      	str	r3, [sp, #12]
 8001a9a:	0413      	lsls	r3, r2, #16
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	0039      	movs	r1, r7
 8001aa0:	0028      	movs	r0, r5
 8001aa2:	4690      	mov	r8, r2
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	f7fe fb41 	bl	800012c <__udivsi3>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	4683      	mov	fp, r0
 8001ab0:	435a      	muls	r2, r3
 8001ab2:	0028      	movs	r0, r5
 8001ab4:	0039      	movs	r1, r7
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	f7fe fbbe 	bl	8000238 <__aeabi_uidivmod>
 8001abc:	0c35      	lsrs	r5, r6, #16
 8001abe:	0409      	lsls	r1, r1, #16
 8001ac0:	430d      	orrs	r5, r1
 8001ac2:	45a9      	cmp	r9, r5
 8001ac4:	d90d      	bls.n	8001ae2 <__aeabi_ddiv+0x262>
 8001ac6:	465b      	mov	r3, fp
 8001ac8:	4445      	add	r5, r8
 8001aca:	3b01      	subs	r3, #1
 8001acc:	45a8      	cmp	r8, r5
 8001ace:	d900      	bls.n	8001ad2 <__aeabi_ddiv+0x252>
 8001ad0:	e13a      	b.n	8001d48 <__aeabi_ddiv+0x4c8>
 8001ad2:	45a9      	cmp	r9, r5
 8001ad4:	d800      	bhi.n	8001ad8 <__aeabi_ddiv+0x258>
 8001ad6:	e137      	b.n	8001d48 <__aeabi_ddiv+0x4c8>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	425b      	negs	r3, r3
 8001adc:	469c      	mov	ip, r3
 8001ade:	4445      	add	r5, r8
 8001ae0:	44e3      	add	fp, ip
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	1aeb      	subs	r3, r5, r3
 8001ae6:	0039      	movs	r1, r7
 8001ae8:	0018      	movs	r0, r3
 8001aea:	9304      	str	r3, [sp, #16]
 8001aec:	f7fe fb1e 	bl	800012c <__udivsi3>
 8001af0:	9b01      	ldr	r3, [sp, #4]
 8001af2:	0005      	movs	r5, r0
 8001af4:	4343      	muls	r3, r0
 8001af6:	0039      	movs	r1, r7
 8001af8:	9804      	ldr	r0, [sp, #16]
 8001afa:	4699      	mov	r9, r3
 8001afc:	f7fe fb9c 	bl	8000238 <__aeabi_uidivmod>
 8001b00:	0433      	lsls	r3, r6, #16
 8001b02:	0409      	lsls	r1, r1, #16
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	430b      	orrs	r3, r1
 8001b08:	4599      	cmp	r9, r3
 8001b0a:	d909      	bls.n	8001b20 <__aeabi_ddiv+0x2a0>
 8001b0c:	4443      	add	r3, r8
 8001b0e:	1e6a      	subs	r2, r5, #1
 8001b10:	4598      	cmp	r8, r3
 8001b12:	d900      	bls.n	8001b16 <__aeabi_ddiv+0x296>
 8001b14:	e11a      	b.n	8001d4c <__aeabi_ddiv+0x4cc>
 8001b16:	4599      	cmp	r9, r3
 8001b18:	d800      	bhi.n	8001b1c <__aeabi_ddiv+0x29c>
 8001b1a:	e117      	b.n	8001d4c <__aeabi_ddiv+0x4cc>
 8001b1c:	3d02      	subs	r5, #2
 8001b1e:	4443      	add	r3, r8
 8001b20:	464a      	mov	r2, r9
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	465a      	mov	r2, fp
 8001b26:	0412      	lsls	r2, r2, #16
 8001b28:	432a      	orrs	r2, r5
 8001b2a:	9903      	ldr	r1, [sp, #12]
 8001b2c:	4693      	mov	fp, r2
 8001b2e:	0c10      	lsrs	r0, r2, #16
 8001b30:	0c0a      	lsrs	r2, r1, #16
 8001b32:	4691      	mov	r9, r2
 8001b34:	0409      	lsls	r1, r1, #16
 8001b36:	465a      	mov	r2, fp
 8001b38:	0c09      	lsrs	r1, r1, #16
 8001b3a:	464e      	mov	r6, r9
 8001b3c:	000d      	movs	r5, r1
 8001b3e:	0412      	lsls	r2, r2, #16
 8001b40:	0c12      	lsrs	r2, r2, #16
 8001b42:	4345      	muls	r5, r0
 8001b44:	9105      	str	r1, [sp, #20]
 8001b46:	4351      	muls	r1, r2
 8001b48:	4372      	muls	r2, r6
 8001b4a:	4370      	muls	r0, r6
 8001b4c:	1952      	adds	r2, r2, r5
 8001b4e:	0c0e      	lsrs	r6, r1, #16
 8001b50:	18b2      	adds	r2, r6, r2
 8001b52:	4295      	cmp	r5, r2
 8001b54:	d903      	bls.n	8001b5e <__aeabi_ddiv+0x2de>
 8001b56:	2580      	movs	r5, #128	; 0x80
 8001b58:	026d      	lsls	r5, r5, #9
 8001b5a:	46ac      	mov	ip, r5
 8001b5c:	4460      	add	r0, ip
 8001b5e:	0c15      	lsrs	r5, r2, #16
 8001b60:	0409      	lsls	r1, r1, #16
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	0c09      	lsrs	r1, r1, #16
 8001b66:	1828      	adds	r0, r5, r0
 8001b68:	1852      	adds	r2, r2, r1
 8001b6a:	4283      	cmp	r3, r0
 8001b6c:	d200      	bcs.n	8001b70 <__aeabi_ddiv+0x2f0>
 8001b6e:	e0ce      	b.n	8001d0e <__aeabi_ddiv+0x48e>
 8001b70:	d100      	bne.n	8001b74 <__aeabi_ddiv+0x2f4>
 8001b72:	e0c8      	b.n	8001d06 <__aeabi_ddiv+0x486>
 8001b74:	1a1d      	subs	r5, r3, r0
 8001b76:	4653      	mov	r3, sl
 8001b78:	1a9e      	subs	r6, r3, r2
 8001b7a:	45b2      	cmp	sl, r6
 8001b7c:	4192      	sbcs	r2, r2
 8001b7e:	4252      	negs	r2, r2
 8001b80:	1aab      	subs	r3, r5, r2
 8001b82:	469a      	mov	sl, r3
 8001b84:	4598      	cmp	r8, r3
 8001b86:	d100      	bne.n	8001b8a <__aeabi_ddiv+0x30a>
 8001b88:	e117      	b.n	8001dba <__aeabi_ddiv+0x53a>
 8001b8a:	0039      	movs	r1, r7
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe facd 	bl	800012c <__udivsi3>
 8001b92:	9b01      	ldr	r3, [sp, #4]
 8001b94:	0005      	movs	r5, r0
 8001b96:	4343      	muls	r3, r0
 8001b98:	0039      	movs	r1, r7
 8001b9a:	4650      	mov	r0, sl
 8001b9c:	9304      	str	r3, [sp, #16]
 8001b9e:	f7fe fb4b 	bl	8000238 <__aeabi_uidivmod>
 8001ba2:	9804      	ldr	r0, [sp, #16]
 8001ba4:	040b      	lsls	r3, r1, #16
 8001ba6:	0c31      	lsrs	r1, r6, #16
 8001ba8:	4319      	orrs	r1, r3
 8001baa:	4288      	cmp	r0, r1
 8001bac:	d909      	bls.n	8001bc2 <__aeabi_ddiv+0x342>
 8001bae:	4441      	add	r1, r8
 8001bb0:	1e6b      	subs	r3, r5, #1
 8001bb2:	4588      	cmp	r8, r1
 8001bb4:	d900      	bls.n	8001bb8 <__aeabi_ddiv+0x338>
 8001bb6:	e107      	b.n	8001dc8 <__aeabi_ddiv+0x548>
 8001bb8:	4288      	cmp	r0, r1
 8001bba:	d800      	bhi.n	8001bbe <__aeabi_ddiv+0x33e>
 8001bbc:	e104      	b.n	8001dc8 <__aeabi_ddiv+0x548>
 8001bbe:	3d02      	subs	r5, #2
 8001bc0:	4441      	add	r1, r8
 8001bc2:	9b04      	ldr	r3, [sp, #16]
 8001bc4:	1acb      	subs	r3, r1, r3
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	0039      	movs	r1, r7
 8001bca:	9304      	str	r3, [sp, #16]
 8001bcc:	f7fe faae 	bl	800012c <__udivsi3>
 8001bd0:	9b01      	ldr	r3, [sp, #4]
 8001bd2:	4682      	mov	sl, r0
 8001bd4:	4343      	muls	r3, r0
 8001bd6:	0039      	movs	r1, r7
 8001bd8:	9804      	ldr	r0, [sp, #16]
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	f7fe fb2c 	bl	8000238 <__aeabi_uidivmod>
 8001be0:	9801      	ldr	r0, [sp, #4]
 8001be2:	040b      	lsls	r3, r1, #16
 8001be4:	0431      	lsls	r1, r6, #16
 8001be6:	0c09      	lsrs	r1, r1, #16
 8001be8:	4319      	orrs	r1, r3
 8001bea:	4288      	cmp	r0, r1
 8001bec:	d90d      	bls.n	8001c0a <__aeabi_ddiv+0x38a>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	4441      	add	r1, r8
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	4588      	cmp	r8, r1
 8001bf6:	d900      	bls.n	8001bfa <__aeabi_ddiv+0x37a>
 8001bf8:	e0e8      	b.n	8001dcc <__aeabi_ddiv+0x54c>
 8001bfa:	4288      	cmp	r0, r1
 8001bfc:	d800      	bhi.n	8001c00 <__aeabi_ddiv+0x380>
 8001bfe:	e0e5      	b.n	8001dcc <__aeabi_ddiv+0x54c>
 8001c00:	2302      	movs	r3, #2
 8001c02:	425b      	negs	r3, r3
 8001c04:	469c      	mov	ip, r3
 8001c06:	4441      	add	r1, r8
 8001c08:	44e2      	add	sl, ip
 8001c0a:	9b01      	ldr	r3, [sp, #4]
 8001c0c:	042d      	lsls	r5, r5, #16
 8001c0e:	1ace      	subs	r6, r1, r3
 8001c10:	4651      	mov	r1, sl
 8001c12:	4329      	orrs	r1, r5
 8001c14:	9d05      	ldr	r5, [sp, #20]
 8001c16:	464f      	mov	r7, r9
 8001c18:	002a      	movs	r2, r5
 8001c1a:	040b      	lsls	r3, r1, #16
 8001c1c:	0c08      	lsrs	r0, r1, #16
 8001c1e:	0c1b      	lsrs	r3, r3, #16
 8001c20:	435a      	muls	r2, r3
 8001c22:	4345      	muls	r5, r0
 8001c24:	437b      	muls	r3, r7
 8001c26:	4378      	muls	r0, r7
 8001c28:	195b      	adds	r3, r3, r5
 8001c2a:	0c17      	lsrs	r7, r2, #16
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	429d      	cmp	r5, r3
 8001c30:	d903      	bls.n	8001c3a <__aeabi_ddiv+0x3ba>
 8001c32:	2580      	movs	r5, #128	; 0x80
 8001c34:	026d      	lsls	r5, r5, #9
 8001c36:	46ac      	mov	ip, r5
 8001c38:	4460      	add	r0, ip
 8001c3a:	0c1d      	lsrs	r5, r3, #16
 8001c3c:	0412      	lsls	r2, r2, #16
 8001c3e:	041b      	lsls	r3, r3, #16
 8001c40:	0c12      	lsrs	r2, r2, #16
 8001c42:	1828      	adds	r0, r5, r0
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	4286      	cmp	r6, r0
 8001c48:	d200      	bcs.n	8001c4c <__aeabi_ddiv+0x3cc>
 8001c4a:	e093      	b.n	8001d74 <__aeabi_ddiv+0x4f4>
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_ddiv+0x3d0>
 8001c4e:	e08e      	b.n	8001d6e <__aeabi_ddiv+0x4ee>
 8001c50:	2301      	movs	r3, #1
 8001c52:	4319      	orrs	r1, r3
 8001c54:	4ba0      	ldr	r3, [pc, #640]	; (8001ed8 <__aeabi_ddiv+0x658>)
 8001c56:	18e3      	adds	r3, r4, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	dc00      	bgt.n	8001c5e <__aeabi_ddiv+0x3de>
 8001c5c:	e099      	b.n	8001d92 <__aeabi_ddiv+0x512>
 8001c5e:	074a      	lsls	r2, r1, #29
 8001c60:	d000      	beq.n	8001c64 <__aeabi_ddiv+0x3e4>
 8001c62:	e09e      	b.n	8001da2 <__aeabi_ddiv+0x522>
 8001c64:	465a      	mov	r2, fp
 8001c66:	01d2      	lsls	r2, r2, #7
 8001c68:	d506      	bpl.n	8001c78 <__aeabi_ddiv+0x3f8>
 8001c6a:	465a      	mov	r2, fp
 8001c6c:	4b9b      	ldr	r3, [pc, #620]	; (8001edc <__aeabi_ddiv+0x65c>)
 8001c6e:	401a      	ands	r2, r3
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	4693      	mov	fp, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	18e3      	adds	r3, r4, r3
 8001c78:	4a99      	ldr	r2, [pc, #612]	; (8001ee0 <__aeabi_ddiv+0x660>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	dd68      	ble.n	8001d50 <__aeabi_ddiv+0x4d0>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	9a02      	ldr	r2, [sp, #8]
 8001c82:	4c98      	ldr	r4, [pc, #608]	; (8001ee4 <__aeabi_ddiv+0x664>)
 8001c84:	401a      	ands	r2, r3
 8001c86:	2300      	movs	r3, #0
 8001c88:	4694      	mov	ip, r2
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	e6c5      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	464b      	mov	r3, r9
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4213      	tst	r3, r2
 8001c98:	d00a      	beq.n	8001cb0 <__aeabi_ddiv+0x430>
 8001c9a:	465b      	mov	r3, fp
 8001c9c:	4213      	tst	r3, r2
 8001c9e:	d106      	bne.n	8001cae <__aeabi_ddiv+0x42e>
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	0312      	lsls	r2, r2, #12
 8001ca4:	0b12      	lsrs	r2, r2, #12
 8001ca6:	46ac      	mov	ip, r5
 8001ca8:	4688      	mov	r8, r1
 8001caa:	4c8e      	ldr	r4, [pc, #568]	; (8001ee4 <__aeabi_ddiv+0x664>)
 8001cac:	e6b6      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001cae:	464b      	mov	r3, r9
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	0312      	lsls	r2, r2, #12
 8001cb4:	0b12      	lsrs	r2, r2, #12
 8001cb6:	46bc      	mov	ip, r7
 8001cb8:	4c8a      	ldr	r4, [pc, #552]	; (8001ee4 <__aeabi_ddiv+0x664>)
 8001cba:	e6af      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	465a      	mov	r2, fp
 8001cc0:	3b28      	subs	r3, #40	; 0x28
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	4691      	mov	r9, r2
 8001cc8:	4698      	mov	r8, r3
 8001cca:	e657      	b.n	800197c <__aeabi_ddiv+0xfc>
 8001ccc:	4658      	mov	r0, fp
 8001cce:	f001 f8f3 	bl	8002eb8 <__clzsi2>
 8001cd2:	3020      	adds	r0, #32
 8001cd4:	e640      	b.n	8001958 <__aeabi_ddiv+0xd8>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	4652      	mov	r2, sl
 8001cda:	3b28      	subs	r3, #40	; 0x28
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4693      	mov	fp, r2
 8001ce2:	e677      	b.n	80019d4 <__aeabi_ddiv+0x154>
 8001ce4:	f001 f8e8 	bl	8002eb8 <__clzsi2>
 8001ce8:	3020      	adds	r0, #32
 8001cea:	e65f      	b.n	80019ac <__aeabi_ddiv+0x12c>
 8001cec:	4588      	cmp	r8, r1
 8001cee:	d200      	bcs.n	8001cf2 <__aeabi_ddiv+0x472>
 8001cf0:	e6c7      	b.n	8001a82 <__aeabi_ddiv+0x202>
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	07de      	lsls	r6, r3, #31
 8001cf6:	085d      	lsrs	r5, r3, #1
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	431e      	orrs	r6, r3
 8001cfe:	4643      	mov	r3, r8
 8001d00:	07db      	lsls	r3, r3, #31
 8001d02:	469a      	mov	sl, r3
 8001d04:	e6c2      	b.n	8001a8c <__aeabi_ddiv+0x20c>
 8001d06:	2500      	movs	r5, #0
 8001d08:	4592      	cmp	sl, r2
 8001d0a:	d300      	bcc.n	8001d0e <__aeabi_ddiv+0x48e>
 8001d0c:	e733      	b.n	8001b76 <__aeabi_ddiv+0x2f6>
 8001d0e:	9e03      	ldr	r6, [sp, #12]
 8001d10:	4659      	mov	r1, fp
 8001d12:	46b4      	mov	ip, r6
 8001d14:	44e2      	add	sl, ip
 8001d16:	45b2      	cmp	sl, r6
 8001d18:	41ad      	sbcs	r5, r5
 8001d1a:	426d      	negs	r5, r5
 8001d1c:	4445      	add	r5, r8
 8001d1e:	18eb      	adds	r3, r5, r3
 8001d20:	3901      	subs	r1, #1
 8001d22:	4598      	cmp	r8, r3
 8001d24:	d207      	bcs.n	8001d36 <__aeabi_ddiv+0x4b6>
 8001d26:	4298      	cmp	r0, r3
 8001d28:	d900      	bls.n	8001d2c <__aeabi_ddiv+0x4ac>
 8001d2a:	e07f      	b.n	8001e2c <__aeabi_ddiv+0x5ac>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x4b0>
 8001d2e:	e0bc      	b.n	8001eaa <__aeabi_ddiv+0x62a>
 8001d30:	1a1d      	subs	r5, r3, r0
 8001d32:	468b      	mov	fp, r1
 8001d34:	e71f      	b.n	8001b76 <__aeabi_ddiv+0x2f6>
 8001d36:	4598      	cmp	r8, r3
 8001d38:	d1fa      	bne.n	8001d30 <__aeabi_ddiv+0x4b0>
 8001d3a:	9d03      	ldr	r5, [sp, #12]
 8001d3c:	4555      	cmp	r5, sl
 8001d3e:	d9f2      	bls.n	8001d26 <__aeabi_ddiv+0x4a6>
 8001d40:	4643      	mov	r3, r8
 8001d42:	468b      	mov	fp, r1
 8001d44:	1a1d      	subs	r5, r3, r0
 8001d46:	e716      	b.n	8001b76 <__aeabi_ddiv+0x2f6>
 8001d48:	469b      	mov	fp, r3
 8001d4a:	e6ca      	b.n	8001ae2 <__aeabi_ddiv+0x262>
 8001d4c:	0015      	movs	r5, r2
 8001d4e:	e6e7      	b.n	8001b20 <__aeabi_ddiv+0x2a0>
 8001d50:	465a      	mov	r2, fp
 8001d52:	08c9      	lsrs	r1, r1, #3
 8001d54:	0752      	lsls	r2, r2, #29
 8001d56:	430a      	orrs	r2, r1
 8001d58:	055b      	lsls	r3, r3, #21
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	0d5c      	lsrs	r4, r3, #21
 8001d5e:	465a      	mov	r2, fp
 8001d60:	2301      	movs	r3, #1
 8001d62:	9902      	ldr	r1, [sp, #8]
 8001d64:	0252      	lsls	r2, r2, #9
 8001d66:	4019      	ands	r1, r3
 8001d68:	0b12      	lsrs	r2, r2, #12
 8001d6a:	468c      	mov	ip, r1
 8001d6c:	e656      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d100      	bne.n	8001d74 <__aeabi_ddiv+0x4f4>
 8001d72:	e76f      	b.n	8001c54 <__aeabi_ddiv+0x3d4>
 8001d74:	4446      	add	r6, r8
 8001d76:	1e4a      	subs	r2, r1, #1
 8001d78:	45b0      	cmp	r8, r6
 8001d7a:	d929      	bls.n	8001dd0 <__aeabi_ddiv+0x550>
 8001d7c:	0011      	movs	r1, r2
 8001d7e:	4286      	cmp	r6, r0
 8001d80:	d000      	beq.n	8001d84 <__aeabi_ddiv+0x504>
 8001d82:	e765      	b.n	8001c50 <__aeabi_ddiv+0x3d0>
 8001d84:	9a03      	ldr	r2, [sp, #12]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d000      	beq.n	8001d8c <__aeabi_ddiv+0x50c>
 8001d8a:	e761      	b.n	8001c50 <__aeabi_ddiv+0x3d0>
 8001d8c:	e762      	b.n	8001c54 <__aeabi_ddiv+0x3d4>
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4249      	negs	r1, r1
 8001d92:	2001      	movs	r0, #1
 8001d94:	1ac2      	subs	r2, r0, r3
 8001d96:	2a38      	cmp	r2, #56	; 0x38
 8001d98:	dd21      	ble.n	8001dde <__aeabi_ddiv+0x55e>
 8001d9a:	9b02      	ldr	r3, [sp, #8]
 8001d9c:	4003      	ands	r3, r0
 8001d9e:	469c      	mov	ip, r3
 8001da0:	e638      	b.n	8001a14 <__aeabi_ddiv+0x194>
 8001da2:	220f      	movs	r2, #15
 8001da4:	400a      	ands	r2, r1
 8001da6:	2a04      	cmp	r2, #4
 8001da8:	d100      	bne.n	8001dac <__aeabi_ddiv+0x52c>
 8001daa:	e75b      	b.n	8001c64 <__aeabi_ddiv+0x3e4>
 8001dac:	000a      	movs	r2, r1
 8001dae:	1d11      	adds	r1, r2, #4
 8001db0:	4291      	cmp	r1, r2
 8001db2:	4192      	sbcs	r2, r2
 8001db4:	4252      	negs	r2, r2
 8001db6:	4493      	add	fp, r2
 8001db8:	e754      	b.n	8001c64 <__aeabi_ddiv+0x3e4>
 8001dba:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <__aeabi_ddiv+0x658>)
 8001dbc:	18e3      	adds	r3, r4, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	dde5      	ble.n	8001d8e <__aeabi_ddiv+0x50e>
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4252      	negs	r2, r2
 8001dc6:	e7f2      	b.n	8001dae <__aeabi_ddiv+0x52e>
 8001dc8:	001d      	movs	r5, r3
 8001dca:	e6fa      	b.n	8001bc2 <__aeabi_ddiv+0x342>
 8001dcc:	469a      	mov	sl, r3
 8001dce:	e71c      	b.n	8001c0a <__aeabi_ddiv+0x38a>
 8001dd0:	42b0      	cmp	r0, r6
 8001dd2:	d839      	bhi.n	8001e48 <__aeabi_ddiv+0x5c8>
 8001dd4:	d06e      	beq.n	8001eb4 <__aeabi_ddiv+0x634>
 8001dd6:	0011      	movs	r1, r2
 8001dd8:	e73a      	b.n	8001c50 <__aeabi_ddiv+0x3d0>
 8001dda:	9302      	str	r3, [sp, #8]
 8001ddc:	e73a      	b.n	8001c54 <__aeabi_ddiv+0x3d4>
 8001dde:	2a1f      	cmp	r2, #31
 8001de0:	dc3c      	bgt.n	8001e5c <__aeabi_ddiv+0x5dc>
 8001de2:	2320      	movs	r3, #32
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	000c      	movs	r4, r1
 8001de8:	4658      	mov	r0, fp
 8001dea:	4099      	lsls	r1, r3
 8001dec:	4098      	lsls	r0, r3
 8001dee:	1e4b      	subs	r3, r1, #1
 8001df0:	4199      	sbcs	r1, r3
 8001df2:	465b      	mov	r3, fp
 8001df4:	40d4      	lsrs	r4, r2
 8001df6:	40d3      	lsrs	r3, r2
 8001df8:	4320      	orrs	r0, r4
 8001dfa:	4308      	orrs	r0, r1
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	0743      	lsls	r3, r0, #29
 8001e00:	d009      	beq.n	8001e16 <__aeabi_ddiv+0x596>
 8001e02:	230f      	movs	r3, #15
 8001e04:	4003      	ands	r3, r0
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d005      	beq.n	8001e16 <__aeabi_ddiv+0x596>
 8001e0a:	0001      	movs	r1, r0
 8001e0c:	1d08      	adds	r0, r1, #4
 8001e0e:	4288      	cmp	r0, r1
 8001e10:	419b      	sbcs	r3, r3
 8001e12:	425b      	negs	r3, r3
 8001e14:	18d2      	adds	r2, r2, r3
 8001e16:	0213      	lsls	r3, r2, #8
 8001e18:	d53a      	bpl.n	8001e90 <__aeabi_ddiv+0x610>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	9a02      	ldr	r2, [sp, #8]
 8001e1e:	2401      	movs	r4, #1
 8001e20:	401a      	ands	r2, r3
 8001e22:	2300      	movs	r3, #0
 8001e24:	4694      	mov	ip, r2
 8001e26:	4698      	mov	r8, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	e5f7      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	4249      	negs	r1, r1
 8001e30:	468c      	mov	ip, r1
 8001e32:	9d03      	ldr	r5, [sp, #12]
 8001e34:	44e3      	add	fp, ip
 8001e36:	46ac      	mov	ip, r5
 8001e38:	44e2      	add	sl, ip
 8001e3a:	45aa      	cmp	sl, r5
 8001e3c:	41ad      	sbcs	r5, r5
 8001e3e:	426d      	negs	r5, r5
 8001e40:	4445      	add	r5, r8
 8001e42:	18ed      	adds	r5, r5, r3
 8001e44:	1a2d      	subs	r5, r5, r0
 8001e46:	e696      	b.n	8001b76 <__aeabi_ddiv+0x2f6>
 8001e48:	1e8a      	subs	r2, r1, #2
 8001e4a:	9903      	ldr	r1, [sp, #12]
 8001e4c:	004d      	lsls	r5, r1, #1
 8001e4e:	428d      	cmp	r5, r1
 8001e50:	4189      	sbcs	r1, r1
 8001e52:	4249      	negs	r1, r1
 8001e54:	4441      	add	r1, r8
 8001e56:	1876      	adds	r6, r6, r1
 8001e58:	9503      	str	r5, [sp, #12]
 8001e5a:	e78f      	b.n	8001d7c <__aeabi_ddiv+0x4fc>
 8001e5c:	201f      	movs	r0, #31
 8001e5e:	4240      	negs	r0, r0
 8001e60:	1ac3      	subs	r3, r0, r3
 8001e62:	4658      	mov	r0, fp
 8001e64:	40d8      	lsrs	r0, r3
 8001e66:	0003      	movs	r3, r0
 8001e68:	2a20      	cmp	r2, #32
 8001e6a:	d028      	beq.n	8001ebe <__aeabi_ddiv+0x63e>
 8001e6c:	2040      	movs	r0, #64	; 0x40
 8001e6e:	465d      	mov	r5, fp
 8001e70:	1a82      	subs	r2, r0, r2
 8001e72:	4095      	lsls	r5, r2
 8001e74:	4329      	orrs	r1, r5
 8001e76:	1e4a      	subs	r2, r1, #1
 8001e78:	4191      	sbcs	r1, r2
 8001e7a:	4319      	orrs	r1, r3
 8001e7c:	2307      	movs	r3, #7
 8001e7e:	2200      	movs	r2, #0
 8001e80:	400b      	ands	r3, r1
 8001e82:	d009      	beq.n	8001e98 <__aeabi_ddiv+0x618>
 8001e84:	230f      	movs	r3, #15
 8001e86:	2200      	movs	r2, #0
 8001e88:	400b      	ands	r3, r1
 8001e8a:	0008      	movs	r0, r1
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d1bd      	bne.n	8001e0c <__aeabi_ddiv+0x58c>
 8001e90:	0001      	movs	r1, r0
 8001e92:	0753      	lsls	r3, r2, #29
 8001e94:	0252      	lsls	r2, r2, #9
 8001e96:	0b12      	lsrs	r2, r2, #12
 8001e98:	08c9      	lsrs	r1, r1, #3
 8001e9a:	4319      	orrs	r1, r3
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	4688      	mov	r8, r1
 8001ea0:	9902      	ldr	r1, [sp, #8]
 8001ea2:	2400      	movs	r4, #0
 8001ea4:	4019      	ands	r1, r3
 8001ea6:	468c      	mov	ip, r1
 8001ea8:	e5b8      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001eaa:	4552      	cmp	r2, sl
 8001eac:	d8be      	bhi.n	8001e2c <__aeabi_ddiv+0x5ac>
 8001eae:	468b      	mov	fp, r1
 8001eb0:	2500      	movs	r5, #0
 8001eb2:	e660      	b.n	8001b76 <__aeabi_ddiv+0x2f6>
 8001eb4:	9d03      	ldr	r5, [sp, #12]
 8001eb6:	429d      	cmp	r5, r3
 8001eb8:	d3c6      	bcc.n	8001e48 <__aeabi_ddiv+0x5c8>
 8001eba:	0011      	movs	r1, r2
 8001ebc:	e762      	b.n	8001d84 <__aeabi_ddiv+0x504>
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	e7d8      	b.n	8001e74 <__aeabi_ddiv+0x5f4>
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	465b      	mov	r3, fp
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	9b01      	ldr	r3, [sp, #4]
 8001ecc:	0312      	lsls	r2, r2, #12
 8001ece:	0b12      	lsrs	r2, r2, #12
 8001ed0:	469c      	mov	ip, r3
 8001ed2:	4688      	mov	r8, r1
 8001ed4:	4c03      	ldr	r4, [pc, #12]	; (8001ee4 <__aeabi_ddiv+0x664>)
 8001ed6:	e5a1      	b.n	8001a1c <__aeabi_ddiv+0x19c>
 8001ed8:	000003ff 	.word	0x000003ff
 8001edc:	feffffff 	.word	0xfeffffff
 8001ee0:	000007fe 	.word	0x000007fe
 8001ee4:	000007ff 	.word	0x000007ff

08001ee8 <__eqdf2>:
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	464f      	mov	r7, r9
 8001eec:	4646      	mov	r6, r8
 8001eee:	46d6      	mov	lr, sl
 8001ef0:	005c      	lsls	r4, r3, #1
 8001ef2:	b5c0      	push	{r6, r7, lr}
 8001ef4:	031f      	lsls	r7, r3, #12
 8001ef6:	0fdb      	lsrs	r3, r3, #31
 8001ef8:	469a      	mov	sl, r3
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <__eqdf2+0x70>)
 8001efc:	030e      	lsls	r6, r1, #12
 8001efe:	004d      	lsls	r5, r1, #1
 8001f00:	4684      	mov	ip, r0
 8001f02:	4680      	mov	r8, r0
 8001f04:	0b36      	lsrs	r6, r6, #12
 8001f06:	0d6d      	lsrs	r5, r5, #21
 8001f08:	0fc9      	lsrs	r1, r1, #31
 8001f0a:	4691      	mov	r9, r2
 8001f0c:	0b3f      	lsrs	r7, r7, #12
 8001f0e:	0d64      	lsrs	r4, r4, #21
 8001f10:	2001      	movs	r0, #1
 8001f12:	429d      	cmp	r5, r3
 8001f14:	d008      	beq.n	8001f28 <__eqdf2+0x40>
 8001f16:	429c      	cmp	r4, r3
 8001f18:	d001      	beq.n	8001f1e <__eqdf2+0x36>
 8001f1a:	42a5      	cmp	r5, r4
 8001f1c:	d00b      	beq.n	8001f36 <__eqdf2+0x4e>
 8001f1e:	bc1c      	pop	{r2, r3, r4}
 8001f20:	4690      	mov	r8, r2
 8001f22:	4699      	mov	r9, r3
 8001f24:	46a2      	mov	sl, r4
 8001f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f28:	4663      	mov	r3, ip
 8001f2a:	4333      	orrs	r3, r6
 8001f2c:	d1f7      	bne.n	8001f1e <__eqdf2+0x36>
 8001f2e:	42ac      	cmp	r4, r5
 8001f30:	d1f5      	bne.n	8001f1e <__eqdf2+0x36>
 8001f32:	433a      	orrs	r2, r7
 8001f34:	d1f3      	bne.n	8001f1e <__eqdf2+0x36>
 8001f36:	2001      	movs	r0, #1
 8001f38:	42be      	cmp	r6, r7
 8001f3a:	d1f0      	bne.n	8001f1e <__eqdf2+0x36>
 8001f3c:	45c8      	cmp	r8, r9
 8001f3e:	d1ee      	bne.n	8001f1e <__eqdf2+0x36>
 8001f40:	4551      	cmp	r1, sl
 8001f42:	d007      	beq.n	8001f54 <__eqdf2+0x6c>
 8001f44:	2d00      	cmp	r5, #0
 8001f46:	d1ea      	bne.n	8001f1e <__eqdf2+0x36>
 8001f48:	4663      	mov	r3, ip
 8001f4a:	431e      	orrs	r6, r3
 8001f4c:	0030      	movs	r0, r6
 8001f4e:	1e46      	subs	r6, r0, #1
 8001f50:	41b0      	sbcs	r0, r6
 8001f52:	e7e4      	b.n	8001f1e <__eqdf2+0x36>
 8001f54:	2000      	movs	r0, #0
 8001f56:	e7e2      	b.n	8001f1e <__eqdf2+0x36>
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__gedf2>:
 8001f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5e:	4645      	mov	r5, r8
 8001f60:	46de      	mov	lr, fp
 8001f62:	4657      	mov	r7, sl
 8001f64:	464e      	mov	r6, r9
 8001f66:	b5e0      	push	{r5, r6, r7, lr}
 8001f68:	031f      	lsls	r7, r3, #12
 8001f6a:	0b3d      	lsrs	r5, r7, #12
 8001f6c:	4f2c      	ldr	r7, [pc, #176]	; (8002020 <__gedf2+0xc4>)
 8001f6e:	030e      	lsls	r6, r1, #12
 8001f70:	004c      	lsls	r4, r1, #1
 8001f72:	46ab      	mov	fp, r5
 8001f74:	005d      	lsls	r5, r3, #1
 8001f76:	4684      	mov	ip, r0
 8001f78:	0b36      	lsrs	r6, r6, #12
 8001f7a:	0d64      	lsrs	r4, r4, #21
 8001f7c:	0fc9      	lsrs	r1, r1, #31
 8001f7e:	4690      	mov	r8, r2
 8001f80:	0d6d      	lsrs	r5, r5, #21
 8001f82:	0fdb      	lsrs	r3, r3, #31
 8001f84:	42bc      	cmp	r4, r7
 8001f86:	d02a      	beq.n	8001fde <__gedf2+0x82>
 8001f88:	4f25      	ldr	r7, [pc, #148]	; (8002020 <__gedf2+0xc4>)
 8001f8a:	42bd      	cmp	r5, r7
 8001f8c:	d02d      	beq.n	8001fea <__gedf2+0x8e>
 8001f8e:	2c00      	cmp	r4, #0
 8001f90:	d10f      	bne.n	8001fb2 <__gedf2+0x56>
 8001f92:	4330      	orrs	r0, r6
 8001f94:	0007      	movs	r7, r0
 8001f96:	4681      	mov	r9, r0
 8001f98:	4278      	negs	r0, r7
 8001f9a:	4178      	adcs	r0, r7
 8001f9c:	b2c0      	uxtb	r0, r0
 8001f9e:	2d00      	cmp	r5, #0
 8001fa0:	d117      	bne.n	8001fd2 <__gedf2+0x76>
 8001fa2:	465f      	mov	r7, fp
 8001fa4:	433a      	orrs	r2, r7
 8001fa6:	d114      	bne.n	8001fd2 <__gedf2+0x76>
 8001fa8:	464b      	mov	r3, r9
 8001faa:	2000      	movs	r0, #0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <__gedf2+0x6a>
 8001fb0:	e006      	b.n	8001fc0 <__gedf2+0x64>
 8001fb2:	2d00      	cmp	r5, #0
 8001fb4:	d102      	bne.n	8001fbc <__gedf2+0x60>
 8001fb6:	4658      	mov	r0, fp
 8001fb8:	4302      	orrs	r2, r0
 8001fba:	d001      	beq.n	8001fc0 <__gedf2+0x64>
 8001fbc:	4299      	cmp	r1, r3
 8001fbe:	d018      	beq.n	8001ff2 <__gedf2+0x96>
 8001fc0:	4248      	negs	r0, r1
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	4308      	orrs	r0, r1
 8001fc6:	bc3c      	pop	{r2, r3, r4, r5}
 8001fc8:	4690      	mov	r8, r2
 8001fca:	4699      	mov	r9, r3
 8001fcc:	46a2      	mov	sl, r4
 8001fce:	46ab      	mov	fp, r5
 8001fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d0f2      	beq.n	8001fbc <__gedf2+0x60>
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	4318      	orrs	r0, r3
 8001fdc:	e7f3      	b.n	8001fc6 <__gedf2+0x6a>
 8001fde:	0037      	movs	r7, r6
 8001fe0:	4307      	orrs	r7, r0
 8001fe2:	d0d1      	beq.n	8001f88 <__gedf2+0x2c>
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	4240      	negs	r0, r0
 8001fe8:	e7ed      	b.n	8001fc6 <__gedf2+0x6a>
 8001fea:	465f      	mov	r7, fp
 8001fec:	4317      	orrs	r7, r2
 8001fee:	d0ce      	beq.n	8001f8e <__gedf2+0x32>
 8001ff0:	e7f8      	b.n	8001fe4 <__gedf2+0x88>
 8001ff2:	42ac      	cmp	r4, r5
 8001ff4:	dce4      	bgt.n	8001fc0 <__gedf2+0x64>
 8001ff6:	da03      	bge.n	8002000 <__gedf2+0xa4>
 8001ff8:	1e48      	subs	r0, r1, #1
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	4308      	orrs	r0, r1
 8001ffe:	e7e2      	b.n	8001fc6 <__gedf2+0x6a>
 8002000:	455e      	cmp	r6, fp
 8002002:	d8dd      	bhi.n	8001fc0 <__gedf2+0x64>
 8002004:	d006      	beq.n	8002014 <__gedf2+0xb8>
 8002006:	2000      	movs	r0, #0
 8002008:	455e      	cmp	r6, fp
 800200a:	d2dc      	bcs.n	8001fc6 <__gedf2+0x6a>
 800200c:	2301      	movs	r3, #1
 800200e:	1e48      	subs	r0, r1, #1
 8002010:	4318      	orrs	r0, r3
 8002012:	e7d8      	b.n	8001fc6 <__gedf2+0x6a>
 8002014:	45c4      	cmp	ip, r8
 8002016:	d8d3      	bhi.n	8001fc0 <__gedf2+0x64>
 8002018:	2000      	movs	r0, #0
 800201a:	45c4      	cmp	ip, r8
 800201c:	d3f6      	bcc.n	800200c <__gedf2+0xb0>
 800201e:	e7d2      	b.n	8001fc6 <__gedf2+0x6a>
 8002020:	000007ff 	.word	0x000007ff

08002024 <__ledf2>:
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	464e      	mov	r6, r9
 8002028:	4645      	mov	r5, r8
 800202a:	46de      	mov	lr, fp
 800202c:	4657      	mov	r7, sl
 800202e:	005c      	lsls	r4, r3, #1
 8002030:	b5e0      	push	{r5, r6, r7, lr}
 8002032:	031f      	lsls	r7, r3, #12
 8002034:	0fdb      	lsrs	r3, r3, #31
 8002036:	4699      	mov	r9, r3
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <__ledf2+0xc0>)
 800203a:	030e      	lsls	r6, r1, #12
 800203c:	004d      	lsls	r5, r1, #1
 800203e:	0fc9      	lsrs	r1, r1, #31
 8002040:	4684      	mov	ip, r0
 8002042:	0b36      	lsrs	r6, r6, #12
 8002044:	0d6d      	lsrs	r5, r5, #21
 8002046:	468b      	mov	fp, r1
 8002048:	4690      	mov	r8, r2
 800204a:	0b3f      	lsrs	r7, r7, #12
 800204c:	0d64      	lsrs	r4, r4, #21
 800204e:	429d      	cmp	r5, r3
 8002050:	d020      	beq.n	8002094 <__ledf2+0x70>
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <__ledf2+0xc0>)
 8002054:	429c      	cmp	r4, r3
 8002056:	d022      	beq.n	800209e <__ledf2+0x7a>
 8002058:	2d00      	cmp	r5, #0
 800205a:	d112      	bne.n	8002082 <__ledf2+0x5e>
 800205c:	4330      	orrs	r0, r6
 800205e:	4243      	negs	r3, r0
 8002060:	4143      	adcs	r3, r0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2c00      	cmp	r4, #0
 8002066:	d01f      	beq.n	80020a8 <__ledf2+0x84>
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00c      	beq.n	8002086 <__ledf2+0x62>
 800206c:	464b      	mov	r3, r9
 800206e:	2001      	movs	r0, #1
 8002070:	3b01      	subs	r3, #1
 8002072:	4303      	orrs	r3, r0
 8002074:	0018      	movs	r0, r3
 8002076:	bc3c      	pop	{r2, r3, r4, r5}
 8002078:	4690      	mov	r8, r2
 800207a:	4699      	mov	r9, r3
 800207c:	46a2      	mov	sl, r4
 800207e:	46ab      	mov	fp, r5
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002082:	2c00      	cmp	r4, #0
 8002084:	d016      	beq.n	80020b4 <__ledf2+0x90>
 8002086:	45cb      	cmp	fp, r9
 8002088:	d017      	beq.n	80020ba <__ledf2+0x96>
 800208a:	465b      	mov	r3, fp
 800208c:	4259      	negs	r1, r3
 800208e:	2301      	movs	r3, #1
 8002090:	430b      	orrs	r3, r1
 8002092:	e7ef      	b.n	8002074 <__ledf2+0x50>
 8002094:	0031      	movs	r1, r6
 8002096:	2302      	movs	r3, #2
 8002098:	4301      	orrs	r1, r0
 800209a:	d1eb      	bne.n	8002074 <__ledf2+0x50>
 800209c:	e7d9      	b.n	8002052 <__ledf2+0x2e>
 800209e:	0039      	movs	r1, r7
 80020a0:	2302      	movs	r3, #2
 80020a2:	4311      	orrs	r1, r2
 80020a4:	d1e6      	bne.n	8002074 <__ledf2+0x50>
 80020a6:	e7d7      	b.n	8002058 <__ledf2+0x34>
 80020a8:	433a      	orrs	r2, r7
 80020aa:	d1dd      	bne.n	8002068 <__ledf2+0x44>
 80020ac:	2300      	movs	r3, #0
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d0e0      	beq.n	8002074 <__ledf2+0x50>
 80020b2:	e7ea      	b.n	800208a <__ledf2+0x66>
 80020b4:	433a      	orrs	r2, r7
 80020b6:	d1e6      	bne.n	8002086 <__ledf2+0x62>
 80020b8:	e7e7      	b.n	800208a <__ledf2+0x66>
 80020ba:	42a5      	cmp	r5, r4
 80020bc:	dce5      	bgt.n	800208a <__ledf2+0x66>
 80020be:	db05      	blt.n	80020cc <__ledf2+0xa8>
 80020c0:	42be      	cmp	r6, r7
 80020c2:	d8e2      	bhi.n	800208a <__ledf2+0x66>
 80020c4:	d007      	beq.n	80020d6 <__ledf2+0xb2>
 80020c6:	2300      	movs	r3, #0
 80020c8:	42be      	cmp	r6, r7
 80020ca:	d2d3      	bcs.n	8002074 <__ledf2+0x50>
 80020cc:	4659      	mov	r1, fp
 80020ce:	2301      	movs	r3, #1
 80020d0:	3901      	subs	r1, #1
 80020d2:	430b      	orrs	r3, r1
 80020d4:	e7ce      	b.n	8002074 <__ledf2+0x50>
 80020d6:	45c4      	cmp	ip, r8
 80020d8:	d8d7      	bhi.n	800208a <__ledf2+0x66>
 80020da:	2300      	movs	r3, #0
 80020dc:	45c4      	cmp	ip, r8
 80020de:	d3f5      	bcc.n	80020cc <__ledf2+0xa8>
 80020e0:	e7c8      	b.n	8002074 <__ledf2+0x50>
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	000007ff 	.word	0x000007ff

080020e8 <__aeabi_dmul>:
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	4657      	mov	r7, sl
 80020ec:	4645      	mov	r5, r8
 80020ee:	46de      	mov	lr, fp
 80020f0:	464e      	mov	r6, r9
 80020f2:	b5e0      	push	{r5, r6, r7, lr}
 80020f4:	030c      	lsls	r4, r1, #12
 80020f6:	4698      	mov	r8, r3
 80020f8:	004e      	lsls	r6, r1, #1
 80020fa:	0b23      	lsrs	r3, r4, #12
 80020fc:	b087      	sub	sp, #28
 80020fe:	0007      	movs	r7, r0
 8002100:	4692      	mov	sl, r2
 8002102:	469b      	mov	fp, r3
 8002104:	0d76      	lsrs	r6, r6, #21
 8002106:	0fcd      	lsrs	r5, r1, #31
 8002108:	2e00      	cmp	r6, #0
 800210a:	d06b      	beq.n	80021e4 <__aeabi_dmul+0xfc>
 800210c:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <__aeabi_dmul+0x1dc>)
 800210e:	429e      	cmp	r6, r3
 8002110:	d035      	beq.n	800217e <__aeabi_dmul+0x96>
 8002112:	2480      	movs	r4, #128	; 0x80
 8002114:	465b      	mov	r3, fp
 8002116:	0f42      	lsrs	r2, r0, #29
 8002118:	0424      	lsls	r4, r4, #16
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4314      	orrs	r4, r2
 800211e:	431c      	orrs	r4, r3
 8002120:	00c3      	lsls	r3, r0, #3
 8002122:	4699      	mov	r9, r3
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <__aeabi_dmul+0x1e0>)
 8002126:	46a3      	mov	fp, r4
 8002128:	469c      	mov	ip, r3
 800212a:	2300      	movs	r3, #0
 800212c:	2700      	movs	r7, #0
 800212e:	4466      	add	r6, ip
 8002130:	9302      	str	r3, [sp, #8]
 8002132:	4643      	mov	r3, r8
 8002134:	031c      	lsls	r4, r3, #12
 8002136:	005a      	lsls	r2, r3, #1
 8002138:	0fdb      	lsrs	r3, r3, #31
 800213a:	4650      	mov	r0, sl
 800213c:	0b24      	lsrs	r4, r4, #12
 800213e:	0d52      	lsrs	r2, r2, #21
 8002140:	4698      	mov	r8, r3
 8002142:	d100      	bne.n	8002146 <__aeabi_dmul+0x5e>
 8002144:	e076      	b.n	8002234 <__aeabi_dmul+0x14c>
 8002146:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <__aeabi_dmul+0x1dc>)
 8002148:	429a      	cmp	r2, r3
 800214a:	d06d      	beq.n	8002228 <__aeabi_dmul+0x140>
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	0f41      	lsrs	r1, r0, #29
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	430b      	orrs	r3, r1
 8002154:	495c      	ldr	r1, [pc, #368]	; (80022c8 <__aeabi_dmul+0x1e0>)
 8002156:	00e4      	lsls	r4, r4, #3
 8002158:	468c      	mov	ip, r1
 800215a:	431c      	orrs	r4, r3
 800215c:	00c3      	lsls	r3, r0, #3
 800215e:	2000      	movs	r0, #0
 8002160:	4462      	add	r2, ip
 8002162:	4641      	mov	r1, r8
 8002164:	18b6      	adds	r6, r6, r2
 8002166:	4069      	eors	r1, r5
 8002168:	1c72      	adds	r2, r6, #1
 800216a:	9101      	str	r1, [sp, #4]
 800216c:	4694      	mov	ip, r2
 800216e:	4307      	orrs	r7, r0
 8002170:	2f0f      	cmp	r7, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_dmul+0x8e>
 8002174:	e0b0      	b.n	80022d8 <__aeabi_dmul+0x1f0>
 8002176:	4a55      	ldr	r2, [pc, #340]	; (80022cc <__aeabi_dmul+0x1e4>)
 8002178:	00bf      	lsls	r7, r7, #2
 800217a:	59d2      	ldr	r2, [r2, r7]
 800217c:	4697      	mov	pc, r2
 800217e:	465b      	mov	r3, fp
 8002180:	4303      	orrs	r3, r0
 8002182:	4699      	mov	r9, r3
 8002184:	d000      	beq.n	8002188 <__aeabi_dmul+0xa0>
 8002186:	e087      	b.n	8002298 <__aeabi_dmul+0x1b0>
 8002188:	2300      	movs	r3, #0
 800218a:	469b      	mov	fp, r3
 800218c:	3302      	adds	r3, #2
 800218e:	2708      	movs	r7, #8
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	e7ce      	b.n	8002132 <__aeabi_dmul+0x4a>
 8002194:	4642      	mov	r2, r8
 8002196:	9201      	str	r2, [sp, #4]
 8002198:	2802      	cmp	r0, #2
 800219a:	d067      	beq.n	800226c <__aeabi_dmul+0x184>
 800219c:	2803      	cmp	r0, #3
 800219e:	d100      	bne.n	80021a2 <__aeabi_dmul+0xba>
 80021a0:	e20e      	b.n	80025c0 <__aeabi_dmul+0x4d8>
 80021a2:	2801      	cmp	r0, #1
 80021a4:	d000      	beq.n	80021a8 <__aeabi_dmul+0xc0>
 80021a6:	e162      	b.n	800246e <__aeabi_dmul+0x386>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2400      	movs	r4, #0
 80021ac:	2200      	movs	r2, #0
 80021ae:	4699      	mov	r9, r3
 80021b0:	9901      	ldr	r1, [sp, #4]
 80021b2:	4001      	ands	r1, r0
 80021b4:	b2cd      	uxtb	r5, r1
 80021b6:	2100      	movs	r1, #0
 80021b8:	0312      	lsls	r2, r2, #12
 80021ba:	0d0b      	lsrs	r3, r1, #20
 80021bc:	0b12      	lsrs	r2, r2, #12
 80021be:	051b      	lsls	r3, r3, #20
 80021c0:	4313      	orrs	r3, r2
 80021c2:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <__aeabi_dmul+0x1e8>)
 80021c4:	0524      	lsls	r4, r4, #20
 80021c6:	4013      	ands	r3, r2
 80021c8:	431c      	orrs	r4, r3
 80021ca:	0064      	lsls	r4, r4, #1
 80021cc:	07ed      	lsls	r5, r5, #31
 80021ce:	0864      	lsrs	r4, r4, #1
 80021d0:	432c      	orrs	r4, r5
 80021d2:	4648      	mov	r0, r9
 80021d4:	0021      	movs	r1, r4
 80021d6:	b007      	add	sp, #28
 80021d8:	bc3c      	pop	{r2, r3, r4, r5}
 80021da:	4690      	mov	r8, r2
 80021dc:	4699      	mov	r9, r3
 80021de:	46a2      	mov	sl, r4
 80021e0:	46ab      	mov	fp, r5
 80021e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e4:	4303      	orrs	r3, r0
 80021e6:	4699      	mov	r9, r3
 80021e8:	d04f      	beq.n	800228a <__aeabi_dmul+0x1a2>
 80021ea:	465b      	mov	r3, fp
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dmul+0x10a>
 80021f0:	e189      	b.n	8002506 <__aeabi_dmul+0x41e>
 80021f2:	4658      	mov	r0, fp
 80021f4:	f000 fe60 	bl	8002eb8 <__clzsi2>
 80021f8:	0003      	movs	r3, r0
 80021fa:	3b0b      	subs	r3, #11
 80021fc:	2b1c      	cmp	r3, #28
 80021fe:	dd00      	ble.n	8002202 <__aeabi_dmul+0x11a>
 8002200:	e17a      	b.n	80024f8 <__aeabi_dmul+0x410>
 8002202:	221d      	movs	r2, #29
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	003a      	movs	r2, r7
 8002208:	0001      	movs	r1, r0
 800220a:	465c      	mov	r4, fp
 800220c:	40da      	lsrs	r2, r3
 800220e:	3908      	subs	r1, #8
 8002210:	408c      	lsls	r4, r1
 8002212:	0013      	movs	r3, r2
 8002214:	408f      	lsls	r7, r1
 8002216:	4323      	orrs	r3, r4
 8002218:	469b      	mov	fp, r3
 800221a:	46b9      	mov	r9, r7
 800221c:	2300      	movs	r3, #0
 800221e:	4e2d      	ldr	r6, [pc, #180]	; (80022d4 <__aeabi_dmul+0x1ec>)
 8002220:	2700      	movs	r7, #0
 8002222:	1a36      	subs	r6, r6, r0
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	e784      	b.n	8002132 <__aeabi_dmul+0x4a>
 8002228:	4653      	mov	r3, sl
 800222a:	4323      	orrs	r3, r4
 800222c:	d12a      	bne.n	8002284 <__aeabi_dmul+0x19c>
 800222e:	2400      	movs	r4, #0
 8002230:	2002      	movs	r0, #2
 8002232:	e796      	b.n	8002162 <__aeabi_dmul+0x7a>
 8002234:	4653      	mov	r3, sl
 8002236:	4323      	orrs	r3, r4
 8002238:	d020      	beq.n	800227c <__aeabi_dmul+0x194>
 800223a:	2c00      	cmp	r4, #0
 800223c:	d100      	bne.n	8002240 <__aeabi_dmul+0x158>
 800223e:	e157      	b.n	80024f0 <__aeabi_dmul+0x408>
 8002240:	0020      	movs	r0, r4
 8002242:	f000 fe39 	bl	8002eb8 <__clzsi2>
 8002246:	0003      	movs	r3, r0
 8002248:	3b0b      	subs	r3, #11
 800224a:	2b1c      	cmp	r3, #28
 800224c:	dd00      	ble.n	8002250 <__aeabi_dmul+0x168>
 800224e:	e149      	b.n	80024e4 <__aeabi_dmul+0x3fc>
 8002250:	211d      	movs	r1, #29
 8002252:	1acb      	subs	r3, r1, r3
 8002254:	4651      	mov	r1, sl
 8002256:	0002      	movs	r2, r0
 8002258:	40d9      	lsrs	r1, r3
 800225a:	4653      	mov	r3, sl
 800225c:	3a08      	subs	r2, #8
 800225e:	4094      	lsls	r4, r2
 8002260:	4093      	lsls	r3, r2
 8002262:	430c      	orrs	r4, r1
 8002264:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <__aeabi_dmul+0x1ec>)
 8002266:	1a12      	subs	r2, r2, r0
 8002268:	2000      	movs	r0, #0
 800226a:	e77a      	b.n	8002162 <__aeabi_dmul+0x7a>
 800226c:	2501      	movs	r5, #1
 800226e:	9b01      	ldr	r3, [sp, #4]
 8002270:	4c14      	ldr	r4, [pc, #80]	; (80022c4 <__aeabi_dmul+0x1dc>)
 8002272:	401d      	ands	r5, r3
 8002274:	2300      	movs	r3, #0
 8002276:	2200      	movs	r2, #0
 8002278:	4699      	mov	r9, r3
 800227a:	e79c      	b.n	80021b6 <__aeabi_dmul+0xce>
 800227c:	2400      	movs	r4, #0
 800227e:	2200      	movs	r2, #0
 8002280:	2001      	movs	r0, #1
 8002282:	e76e      	b.n	8002162 <__aeabi_dmul+0x7a>
 8002284:	4653      	mov	r3, sl
 8002286:	2003      	movs	r0, #3
 8002288:	e76b      	b.n	8002162 <__aeabi_dmul+0x7a>
 800228a:	2300      	movs	r3, #0
 800228c:	469b      	mov	fp, r3
 800228e:	3301      	adds	r3, #1
 8002290:	2704      	movs	r7, #4
 8002292:	2600      	movs	r6, #0
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	e74c      	b.n	8002132 <__aeabi_dmul+0x4a>
 8002298:	2303      	movs	r3, #3
 800229a:	4681      	mov	r9, r0
 800229c:	270c      	movs	r7, #12
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	e747      	b.n	8002132 <__aeabi_dmul+0x4a>
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	2300      	movs	r3, #0
 80022a6:	2500      	movs	r5, #0
 80022a8:	0312      	lsls	r2, r2, #12
 80022aa:	4699      	mov	r9, r3
 80022ac:	4c05      	ldr	r4, [pc, #20]	; (80022c4 <__aeabi_dmul+0x1dc>)
 80022ae:	e782      	b.n	80021b6 <__aeabi_dmul+0xce>
 80022b0:	465c      	mov	r4, fp
 80022b2:	464b      	mov	r3, r9
 80022b4:	9802      	ldr	r0, [sp, #8]
 80022b6:	e76f      	b.n	8002198 <__aeabi_dmul+0xb0>
 80022b8:	465c      	mov	r4, fp
 80022ba:	464b      	mov	r3, r9
 80022bc:	9501      	str	r5, [sp, #4]
 80022be:	9802      	ldr	r0, [sp, #8]
 80022c0:	e76a      	b.n	8002198 <__aeabi_dmul+0xb0>
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	000007ff 	.word	0x000007ff
 80022c8:	fffffc01 	.word	0xfffffc01
 80022cc:	080078e0 	.word	0x080078e0
 80022d0:	800fffff 	.word	0x800fffff
 80022d4:	fffffc0d 	.word	0xfffffc0d
 80022d8:	464a      	mov	r2, r9
 80022da:	4649      	mov	r1, r9
 80022dc:	0c17      	lsrs	r7, r2, #16
 80022de:	0c1a      	lsrs	r2, r3, #16
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	0c1b      	lsrs	r3, r3, #16
 80022e4:	0408      	lsls	r0, r1, #16
 80022e6:	0019      	movs	r1, r3
 80022e8:	0c00      	lsrs	r0, r0, #16
 80022ea:	4341      	muls	r1, r0
 80022ec:	0015      	movs	r5, r2
 80022ee:	4688      	mov	r8, r1
 80022f0:	0019      	movs	r1, r3
 80022f2:	437d      	muls	r5, r7
 80022f4:	4379      	muls	r1, r7
 80022f6:	9503      	str	r5, [sp, #12]
 80022f8:	4689      	mov	r9, r1
 80022fa:	0029      	movs	r1, r5
 80022fc:	0015      	movs	r5, r2
 80022fe:	4345      	muls	r5, r0
 8002300:	444d      	add	r5, r9
 8002302:	9502      	str	r5, [sp, #8]
 8002304:	4645      	mov	r5, r8
 8002306:	0c2d      	lsrs	r5, r5, #16
 8002308:	46aa      	mov	sl, r5
 800230a:	9d02      	ldr	r5, [sp, #8]
 800230c:	4455      	add	r5, sl
 800230e:	45a9      	cmp	r9, r5
 8002310:	d906      	bls.n	8002320 <__aeabi_dmul+0x238>
 8002312:	468a      	mov	sl, r1
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0249      	lsls	r1, r1, #9
 8002318:	4689      	mov	r9, r1
 800231a:	44ca      	add	sl, r9
 800231c:	4651      	mov	r1, sl
 800231e:	9103      	str	r1, [sp, #12]
 8002320:	0c29      	lsrs	r1, r5, #16
 8002322:	9104      	str	r1, [sp, #16]
 8002324:	4641      	mov	r1, r8
 8002326:	0409      	lsls	r1, r1, #16
 8002328:	042d      	lsls	r5, r5, #16
 800232a:	0c09      	lsrs	r1, r1, #16
 800232c:	4688      	mov	r8, r1
 800232e:	0029      	movs	r1, r5
 8002330:	0c25      	lsrs	r5, r4, #16
 8002332:	0424      	lsls	r4, r4, #16
 8002334:	4441      	add	r1, r8
 8002336:	0c24      	lsrs	r4, r4, #16
 8002338:	9105      	str	r1, [sp, #20]
 800233a:	0021      	movs	r1, r4
 800233c:	4341      	muls	r1, r0
 800233e:	4688      	mov	r8, r1
 8002340:	0021      	movs	r1, r4
 8002342:	4379      	muls	r1, r7
 8002344:	468a      	mov	sl, r1
 8002346:	4368      	muls	r0, r5
 8002348:	4641      	mov	r1, r8
 800234a:	4450      	add	r0, sl
 800234c:	4681      	mov	r9, r0
 800234e:	0c08      	lsrs	r0, r1, #16
 8002350:	4448      	add	r0, r9
 8002352:	436f      	muls	r7, r5
 8002354:	4582      	cmp	sl, r0
 8002356:	d903      	bls.n	8002360 <__aeabi_dmul+0x278>
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	0249      	lsls	r1, r1, #9
 800235c:	4689      	mov	r9, r1
 800235e:	444f      	add	r7, r9
 8002360:	0c01      	lsrs	r1, r0, #16
 8002362:	4689      	mov	r9, r1
 8002364:	0039      	movs	r1, r7
 8002366:	4449      	add	r1, r9
 8002368:	9102      	str	r1, [sp, #8]
 800236a:	4641      	mov	r1, r8
 800236c:	040f      	lsls	r7, r1, #16
 800236e:	9904      	ldr	r1, [sp, #16]
 8002370:	0c3f      	lsrs	r7, r7, #16
 8002372:	4688      	mov	r8, r1
 8002374:	0400      	lsls	r0, r0, #16
 8002376:	19c0      	adds	r0, r0, r7
 8002378:	4480      	add	r8, r0
 800237a:	4641      	mov	r1, r8
 800237c:	9104      	str	r1, [sp, #16]
 800237e:	4659      	mov	r1, fp
 8002380:	0c0f      	lsrs	r7, r1, #16
 8002382:	0409      	lsls	r1, r1, #16
 8002384:	0c09      	lsrs	r1, r1, #16
 8002386:	4688      	mov	r8, r1
 8002388:	4359      	muls	r1, r3
 800238a:	468a      	mov	sl, r1
 800238c:	0039      	movs	r1, r7
 800238e:	4351      	muls	r1, r2
 8002390:	4689      	mov	r9, r1
 8002392:	4641      	mov	r1, r8
 8002394:	434a      	muls	r2, r1
 8002396:	4651      	mov	r1, sl
 8002398:	0c09      	lsrs	r1, r1, #16
 800239a:	468b      	mov	fp, r1
 800239c:	437b      	muls	r3, r7
 800239e:	18d2      	adds	r2, r2, r3
 80023a0:	445a      	add	r2, fp
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d903      	bls.n	80023ae <__aeabi_dmul+0x2c6>
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	025b      	lsls	r3, r3, #9
 80023aa:	469b      	mov	fp, r3
 80023ac:	44d9      	add	r9, fp
 80023ae:	4651      	mov	r1, sl
 80023b0:	0409      	lsls	r1, r1, #16
 80023b2:	0c09      	lsrs	r1, r1, #16
 80023b4:	468a      	mov	sl, r1
 80023b6:	4641      	mov	r1, r8
 80023b8:	4361      	muls	r1, r4
 80023ba:	437c      	muls	r4, r7
 80023bc:	0c13      	lsrs	r3, r2, #16
 80023be:	0412      	lsls	r2, r2, #16
 80023c0:	444b      	add	r3, r9
 80023c2:	4452      	add	r2, sl
 80023c4:	46a1      	mov	r9, r4
 80023c6:	468a      	mov	sl, r1
 80023c8:	003c      	movs	r4, r7
 80023ca:	4641      	mov	r1, r8
 80023cc:	436c      	muls	r4, r5
 80023ce:	434d      	muls	r5, r1
 80023d0:	4651      	mov	r1, sl
 80023d2:	444d      	add	r5, r9
 80023d4:	0c0f      	lsrs	r7, r1, #16
 80023d6:	197d      	adds	r5, r7, r5
 80023d8:	45a9      	cmp	r9, r5
 80023da:	d903      	bls.n	80023e4 <__aeabi_dmul+0x2fc>
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	0249      	lsls	r1, r1, #9
 80023e0:	4688      	mov	r8, r1
 80023e2:	4444      	add	r4, r8
 80023e4:	9f04      	ldr	r7, [sp, #16]
 80023e6:	9903      	ldr	r1, [sp, #12]
 80023e8:	46b8      	mov	r8, r7
 80023ea:	4441      	add	r1, r8
 80023ec:	468b      	mov	fp, r1
 80023ee:	4583      	cmp	fp, r0
 80023f0:	4180      	sbcs	r0, r0
 80023f2:	4241      	negs	r1, r0
 80023f4:	4688      	mov	r8, r1
 80023f6:	4651      	mov	r1, sl
 80023f8:	0408      	lsls	r0, r1, #16
 80023fa:	042f      	lsls	r7, r5, #16
 80023fc:	0c00      	lsrs	r0, r0, #16
 80023fe:	183f      	adds	r7, r7, r0
 8002400:	4658      	mov	r0, fp
 8002402:	9902      	ldr	r1, [sp, #8]
 8002404:	1810      	adds	r0, r2, r0
 8002406:	4689      	mov	r9, r1
 8002408:	4290      	cmp	r0, r2
 800240a:	4192      	sbcs	r2, r2
 800240c:	444f      	add	r7, r9
 800240e:	46ba      	mov	sl, r7
 8002410:	4252      	negs	r2, r2
 8002412:	4699      	mov	r9, r3
 8002414:	4693      	mov	fp, r2
 8002416:	44c2      	add	sl, r8
 8002418:	44d1      	add	r9, sl
 800241a:	44cb      	add	fp, r9
 800241c:	428f      	cmp	r7, r1
 800241e:	41bf      	sbcs	r7, r7
 8002420:	45c2      	cmp	sl, r8
 8002422:	4189      	sbcs	r1, r1
 8002424:	4599      	cmp	r9, r3
 8002426:	419b      	sbcs	r3, r3
 8002428:	4593      	cmp	fp, r2
 800242a:	4192      	sbcs	r2, r2
 800242c:	427f      	negs	r7, r7
 800242e:	4249      	negs	r1, r1
 8002430:	0c2d      	lsrs	r5, r5, #16
 8002432:	4252      	negs	r2, r2
 8002434:	430f      	orrs	r7, r1
 8002436:	425b      	negs	r3, r3
 8002438:	4313      	orrs	r3, r2
 800243a:	197f      	adds	r7, r7, r5
 800243c:	18ff      	adds	r7, r7, r3
 800243e:	465b      	mov	r3, fp
 8002440:	193c      	adds	r4, r7, r4
 8002442:	0ddb      	lsrs	r3, r3, #23
 8002444:	9a05      	ldr	r2, [sp, #20]
 8002446:	0264      	lsls	r4, r4, #9
 8002448:	431c      	orrs	r4, r3
 800244a:	0243      	lsls	r3, r0, #9
 800244c:	4313      	orrs	r3, r2
 800244e:	1e5d      	subs	r5, r3, #1
 8002450:	41ab      	sbcs	r3, r5
 8002452:	465a      	mov	r2, fp
 8002454:	0dc0      	lsrs	r0, r0, #23
 8002456:	4303      	orrs	r3, r0
 8002458:	0252      	lsls	r2, r2, #9
 800245a:	4313      	orrs	r3, r2
 800245c:	01e2      	lsls	r2, r4, #7
 800245e:	d556      	bpl.n	800250e <__aeabi_dmul+0x426>
 8002460:	2001      	movs	r0, #1
 8002462:	085a      	lsrs	r2, r3, #1
 8002464:	4003      	ands	r3, r0
 8002466:	4313      	orrs	r3, r2
 8002468:	07e2      	lsls	r2, r4, #31
 800246a:	4313      	orrs	r3, r2
 800246c:	0864      	lsrs	r4, r4, #1
 800246e:	485a      	ldr	r0, [pc, #360]	; (80025d8 <__aeabi_dmul+0x4f0>)
 8002470:	4460      	add	r0, ip
 8002472:	2800      	cmp	r0, #0
 8002474:	dd4d      	ble.n	8002512 <__aeabi_dmul+0x42a>
 8002476:	075a      	lsls	r2, r3, #29
 8002478:	d009      	beq.n	800248e <__aeabi_dmul+0x3a6>
 800247a:	220f      	movs	r2, #15
 800247c:	401a      	ands	r2, r3
 800247e:	2a04      	cmp	r2, #4
 8002480:	d005      	beq.n	800248e <__aeabi_dmul+0x3a6>
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	429a      	cmp	r2, r3
 8002486:	419b      	sbcs	r3, r3
 8002488:	425b      	negs	r3, r3
 800248a:	18e4      	adds	r4, r4, r3
 800248c:	0013      	movs	r3, r2
 800248e:	01e2      	lsls	r2, r4, #7
 8002490:	d504      	bpl.n	800249c <__aeabi_dmul+0x3b4>
 8002492:	2080      	movs	r0, #128	; 0x80
 8002494:	4a51      	ldr	r2, [pc, #324]	; (80025dc <__aeabi_dmul+0x4f4>)
 8002496:	00c0      	lsls	r0, r0, #3
 8002498:	4014      	ands	r4, r2
 800249a:	4460      	add	r0, ip
 800249c:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <__aeabi_dmul+0x4f8>)
 800249e:	4290      	cmp	r0, r2
 80024a0:	dd00      	ble.n	80024a4 <__aeabi_dmul+0x3bc>
 80024a2:	e6e3      	b.n	800226c <__aeabi_dmul+0x184>
 80024a4:	2501      	movs	r5, #1
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	0762      	lsls	r2, r4, #29
 80024aa:	431a      	orrs	r2, r3
 80024ac:	0264      	lsls	r4, r4, #9
 80024ae:	9b01      	ldr	r3, [sp, #4]
 80024b0:	4691      	mov	r9, r2
 80024b2:	0b22      	lsrs	r2, r4, #12
 80024b4:	0544      	lsls	r4, r0, #21
 80024b6:	0d64      	lsrs	r4, r4, #21
 80024b8:	401d      	ands	r5, r3
 80024ba:	e67c      	b.n	80021b6 <__aeabi_dmul+0xce>
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	4659      	mov	r1, fp
 80024c0:	0312      	lsls	r2, r2, #12
 80024c2:	4211      	tst	r1, r2
 80024c4:	d008      	beq.n	80024d8 <__aeabi_dmul+0x3f0>
 80024c6:	4214      	tst	r4, r2
 80024c8:	d106      	bne.n	80024d8 <__aeabi_dmul+0x3f0>
 80024ca:	4322      	orrs	r2, r4
 80024cc:	0312      	lsls	r2, r2, #12
 80024ce:	0b12      	lsrs	r2, r2, #12
 80024d0:	4645      	mov	r5, r8
 80024d2:	4699      	mov	r9, r3
 80024d4:	4c43      	ldr	r4, [pc, #268]	; (80025e4 <__aeabi_dmul+0x4fc>)
 80024d6:	e66e      	b.n	80021b6 <__aeabi_dmul+0xce>
 80024d8:	465b      	mov	r3, fp
 80024da:	431a      	orrs	r2, r3
 80024dc:	0312      	lsls	r2, r2, #12
 80024de:	0b12      	lsrs	r2, r2, #12
 80024e0:	4c40      	ldr	r4, [pc, #256]	; (80025e4 <__aeabi_dmul+0x4fc>)
 80024e2:	e668      	b.n	80021b6 <__aeabi_dmul+0xce>
 80024e4:	0003      	movs	r3, r0
 80024e6:	4654      	mov	r4, sl
 80024e8:	3b28      	subs	r3, #40	; 0x28
 80024ea:	409c      	lsls	r4, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	e6b9      	b.n	8002264 <__aeabi_dmul+0x17c>
 80024f0:	f000 fce2 	bl	8002eb8 <__clzsi2>
 80024f4:	3020      	adds	r0, #32
 80024f6:	e6a6      	b.n	8002246 <__aeabi_dmul+0x15e>
 80024f8:	0003      	movs	r3, r0
 80024fa:	3b28      	subs	r3, #40	; 0x28
 80024fc:	409f      	lsls	r7, r3
 80024fe:	2300      	movs	r3, #0
 8002500:	46bb      	mov	fp, r7
 8002502:	4699      	mov	r9, r3
 8002504:	e68a      	b.n	800221c <__aeabi_dmul+0x134>
 8002506:	f000 fcd7 	bl	8002eb8 <__clzsi2>
 800250a:	3020      	adds	r0, #32
 800250c:	e674      	b.n	80021f8 <__aeabi_dmul+0x110>
 800250e:	46b4      	mov	ip, r6
 8002510:	e7ad      	b.n	800246e <__aeabi_dmul+0x386>
 8002512:	2501      	movs	r5, #1
 8002514:	1a2a      	subs	r2, r5, r0
 8002516:	2a38      	cmp	r2, #56	; 0x38
 8002518:	dd06      	ble.n	8002528 <__aeabi_dmul+0x440>
 800251a:	9b01      	ldr	r3, [sp, #4]
 800251c:	2400      	movs	r4, #0
 800251e:	401d      	ands	r5, r3
 8002520:	2300      	movs	r3, #0
 8002522:	2200      	movs	r2, #0
 8002524:	4699      	mov	r9, r3
 8002526:	e646      	b.n	80021b6 <__aeabi_dmul+0xce>
 8002528:	2a1f      	cmp	r2, #31
 800252a:	dc21      	bgt.n	8002570 <__aeabi_dmul+0x488>
 800252c:	2520      	movs	r5, #32
 800252e:	0020      	movs	r0, r4
 8002530:	1aad      	subs	r5, r5, r2
 8002532:	001e      	movs	r6, r3
 8002534:	40ab      	lsls	r3, r5
 8002536:	40a8      	lsls	r0, r5
 8002538:	40d6      	lsrs	r6, r2
 800253a:	1e5d      	subs	r5, r3, #1
 800253c:	41ab      	sbcs	r3, r5
 800253e:	4330      	orrs	r0, r6
 8002540:	4318      	orrs	r0, r3
 8002542:	40d4      	lsrs	r4, r2
 8002544:	0743      	lsls	r3, r0, #29
 8002546:	d009      	beq.n	800255c <__aeabi_dmul+0x474>
 8002548:	230f      	movs	r3, #15
 800254a:	4003      	ands	r3, r0
 800254c:	2b04      	cmp	r3, #4
 800254e:	d005      	beq.n	800255c <__aeabi_dmul+0x474>
 8002550:	0003      	movs	r3, r0
 8002552:	1d18      	adds	r0, r3, #4
 8002554:	4298      	cmp	r0, r3
 8002556:	419b      	sbcs	r3, r3
 8002558:	425b      	negs	r3, r3
 800255a:	18e4      	adds	r4, r4, r3
 800255c:	0223      	lsls	r3, r4, #8
 800255e:	d521      	bpl.n	80025a4 <__aeabi_dmul+0x4bc>
 8002560:	2501      	movs	r5, #1
 8002562:	9b01      	ldr	r3, [sp, #4]
 8002564:	2401      	movs	r4, #1
 8002566:	401d      	ands	r5, r3
 8002568:	2300      	movs	r3, #0
 800256a:	2200      	movs	r2, #0
 800256c:	4699      	mov	r9, r3
 800256e:	e622      	b.n	80021b6 <__aeabi_dmul+0xce>
 8002570:	251f      	movs	r5, #31
 8002572:	0021      	movs	r1, r4
 8002574:	426d      	negs	r5, r5
 8002576:	1a28      	subs	r0, r5, r0
 8002578:	40c1      	lsrs	r1, r0
 800257a:	0008      	movs	r0, r1
 800257c:	2a20      	cmp	r2, #32
 800257e:	d01d      	beq.n	80025bc <__aeabi_dmul+0x4d4>
 8002580:	355f      	adds	r5, #95	; 0x5f
 8002582:	1aaa      	subs	r2, r5, r2
 8002584:	4094      	lsls	r4, r2
 8002586:	4323      	orrs	r3, r4
 8002588:	1e5c      	subs	r4, r3, #1
 800258a:	41a3      	sbcs	r3, r4
 800258c:	2507      	movs	r5, #7
 800258e:	4303      	orrs	r3, r0
 8002590:	401d      	ands	r5, r3
 8002592:	2200      	movs	r2, #0
 8002594:	2d00      	cmp	r5, #0
 8002596:	d009      	beq.n	80025ac <__aeabi_dmul+0x4c4>
 8002598:	220f      	movs	r2, #15
 800259a:	2400      	movs	r4, #0
 800259c:	401a      	ands	r2, r3
 800259e:	0018      	movs	r0, r3
 80025a0:	2a04      	cmp	r2, #4
 80025a2:	d1d6      	bne.n	8002552 <__aeabi_dmul+0x46a>
 80025a4:	0003      	movs	r3, r0
 80025a6:	0765      	lsls	r5, r4, #29
 80025a8:	0264      	lsls	r4, r4, #9
 80025aa:	0b22      	lsrs	r2, r4, #12
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	432b      	orrs	r3, r5
 80025b0:	2501      	movs	r5, #1
 80025b2:	4699      	mov	r9, r3
 80025b4:	9b01      	ldr	r3, [sp, #4]
 80025b6:	2400      	movs	r4, #0
 80025b8:	401d      	ands	r5, r3
 80025ba:	e5fc      	b.n	80021b6 <__aeabi_dmul+0xce>
 80025bc:	2400      	movs	r4, #0
 80025be:	e7e2      	b.n	8002586 <__aeabi_dmul+0x49e>
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	2501      	movs	r5, #1
 80025c4:	0312      	lsls	r2, r2, #12
 80025c6:	4322      	orrs	r2, r4
 80025c8:	9901      	ldr	r1, [sp, #4]
 80025ca:	0312      	lsls	r2, r2, #12
 80025cc:	0b12      	lsrs	r2, r2, #12
 80025ce:	400d      	ands	r5, r1
 80025d0:	4699      	mov	r9, r3
 80025d2:	4c04      	ldr	r4, [pc, #16]	; (80025e4 <__aeabi_dmul+0x4fc>)
 80025d4:	e5ef      	b.n	80021b6 <__aeabi_dmul+0xce>
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	000003ff 	.word	0x000003ff
 80025dc:	feffffff 	.word	0xfeffffff
 80025e0:	000007fe 	.word	0x000007fe
 80025e4:	000007ff 	.word	0x000007ff

080025e8 <__aeabi_dsub>:
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ea:	4646      	mov	r6, r8
 80025ec:	46d6      	mov	lr, sl
 80025ee:	464f      	mov	r7, r9
 80025f0:	030c      	lsls	r4, r1, #12
 80025f2:	b5c0      	push	{r6, r7, lr}
 80025f4:	0fcd      	lsrs	r5, r1, #31
 80025f6:	004e      	lsls	r6, r1, #1
 80025f8:	0a61      	lsrs	r1, r4, #9
 80025fa:	0f44      	lsrs	r4, r0, #29
 80025fc:	430c      	orrs	r4, r1
 80025fe:	00c1      	lsls	r1, r0, #3
 8002600:	0058      	lsls	r0, r3, #1
 8002602:	0d40      	lsrs	r0, r0, #21
 8002604:	4684      	mov	ip, r0
 8002606:	468a      	mov	sl, r1
 8002608:	000f      	movs	r7, r1
 800260a:	0319      	lsls	r1, r3, #12
 800260c:	0f50      	lsrs	r0, r2, #29
 800260e:	0a49      	lsrs	r1, r1, #9
 8002610:	4301      	orrs	r1, r0
 8002612:	48c6      	ldr	r0, [pc, #792]	; (800292c <__aeabi_dsub+0x344>)
 8002614:	0d76      	lsrs	r6, r6, #21
 8002616:	46a8      	mov	r8, r5
 8002618:	0fdb      	lsrs	r3, r3, #31
 800261a:	00d2      	lsls	r2, r2, #3
 800261c:	4584      	cmp	ip, r0
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x3a>
 8002620:	e0d8      	b.n	80027d4 <__aeabi_dsub+0x1ec>
 8002622:	2001      	movs	r0, #1
 8002624:	4043      	eors	r3, r0
 8002626:	42ab      	cmp	r3, r5
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x44>
 800262a:	e0a6      	b.n	800277a <__aeabi_dsub+0x192>
 800262c:	4660      	mov	r0, ip
 800262e:	1a35      	subs	r5, r6, r0
 8002630:	2d00      	cmp	r5, #0
 8002632:	dc00      	bgt.n	8002636 <__aeabi_dsub+0x4e>
 8002634:	e105      	b.n	8002842 <__aeabi_dsub+0x25a>
 8002636:	2800      	cmp	r0, #0
 8002638:	d110      	bne.n	800265c <__aeabi_dsub+0x74>
 800263a:	000b      	movs	r3, r1
 800263c:	4313      	orrs	r3, r2
 800263e:	d100      	bne.n	8002642 <__aeabi_dsub+0x5a>
 8002640:	e0d7      	b.n	80027f2 <__aeabi_dsub+0x20a>
 8002642:	1e6b      	subs	r3, r5, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d000      	beq.n	800264a <__aeabi_dsub+0x62>
 8002648:	e14b      	b.n	80028e2 <__aeabi_dsub+0x2fa>
 800264a:	4653      	mov	r3, sl
 800264c:	1a9f      	subs	r7, r3, r2
 800264e:	45ba      	cmp	sl, r7
 8002650:	4180      	sbcs	r0, r0
 8002652:	1a64      	subs	r4, r4, r1
 8002654:	4240      	negs	r0, r0
 8002656:	1a24      	subs	r4, r4, r0
 8002658:	2601      	movs	r6, #1
 800265a:	e01e      	b.n	800269a <__aeabi_dsub+0xb2>
 800265c:	4bb3      	ldr	r3, [pc, #716]	; (800292c <__aeabi_dsub+0x344>)
 800265e:	429e      	cmp	r6, r3
 8002660:	d048      	beq.n	80026f4 <__aeabi_dsub+0x10c>
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	4319      	orrs	r1, r3
 8002668:	2d38      	cmp	r5, #56	; 0x38
 800266a:	dd00      	ble.n	800266e <__aeabi_dsub+0x86>
 800266c:	e119      	b.n	80028a2 <__aeabi_dsub+0x2ba>
 800266e:	2d1f      	cmp	r5, #31
 8002670:	dd00      	ble.n	8002674 <__aeabi_dsub+0x8c>
 8002672:	e14c      	b.n	800290e <__aeabi_dsub+0x326>
 8002674:	2320      	movs	r3, #32
 8002676:	000f      	movs	r7, r1
 8002678:	1b5b      	subs	r3, r3, r5
 800267a:	0010      	movs	r0, r2
 800267c:	409a      	lsls	r2, r3
 800267e:	409f      	lsls	r7, r3
 8002680:	40e8      	lsrs	r0, r5
 8002682:	1e53      	subs	r3, r2, #1
 8002684:	419a      	sbcs	r2, r3
 8002686:	40e9      	lsrs	r1, r5
 8002688:	4307      	orrs	r7, r0
 800268a:	4317      	orrs	r7, r2
 800268c:	4653      	mov	r3, sl
 800268e:	1bdf      	subs	r7, r3, r7
 8002690:	1a61      	subs	r1, r4, r1
 8002692:	45ba      	cmp	sl, r7
 8002694:	41a4      	sbcs	r4, r4
 8002696:	4264      	negs	r4, r4
 8002698:	1b0c      	subs	r4, r1, r4
 800269a:	0223      	lsls	r3, r4, #8
 800269c:	d400      	bmi.n	80026a0 <__aeabi_dsub+0xb8>
 800269e:	e0c5      	b.n	800282c <__aeabi_dsub+0x244>
 80026a0:	0264      	lsls	r4, r4, #9
 80026a2:	0a65      	lsrs	r5, r4, #9
 80026a4:	2d00      	cmp	r5, #0
 80026a6:	d100      	bne.n	80026aa <__aeabi_dsub+0xc2>
 80026a8:	e0f6      	b.n	8002898 <__aeabi_dsub+0x2b0>
 80026aa:	0028      	movs	r0, r5
 80026ac:	f000 fc04 	bl	8002eb8 <__clzsi2>
 80026b0:	0003      	movs	r3, r0
 80026b2:	3b08      	subs	r3, #8
 80026b4:	2b1f      	cmp	r3, #31
 80026b6:	dd00      	ble.n	80026ba <__aeabi_dsub+0xd2>
 80026b8:	e0e9      	b.n	800288e <__aeabi_dsub+0x2a6>
 80026ba:	2220      	movs	r2, #32
 80026bc:	003c      	movs	r4, r7
 80026be:	1ad2      	subs	r2, r2, r3
 80026c0:	409d      	lsls	r5, r3
 80026c2:	40d4      	lsrs	r4, r2
 80026c4:	409f      	lsls	r7, r3
 80026c6:	4325      	orrs	r5, r4
 80026c8:	429e      	cmp	r6, r3
 80026ca:	dd00      	ble.n	80026ce <__aeabi_dsub+0xe6>
 80026cc:	e0db      	b.n	8002886 <__aeabi_dsub+0x29e>
 80026ce:	1b9e      	subs	r6, r3, r6
 80026d0:	1c73      	adds	r3, r6, #1
 80026d2:	2b1f      	cmp	r3, #31
 80026d4:	dd00      	ble.n	80026d8 <__aeabi_dsub+0xf0>
 80026d6:	e10a      	b.n	80028ee <__aeabi_dsub+0x306>
 80026d8:	2220      	movs	r2, #32
 80026da:	0038      	movs	r0, r7
 80026dc:	1ad2      	subs	r2, r2, r3
 80026de:	0029      	movs	r1, r5
 80026e0:	4097      	lsls	r7, r2
 80026e2:	002c      	movs	r4, r5
 80026e4:	4091      	lsls	r1, r2
 80026e6:	40d8      	lsrs	r0, r3
 80026e8:	1e7a      	subs	r2, r7, #1
 80026ea:	4197      	sbcs	r7, r2
 80026ec:	40dc      	lsrs	r4, r3
 80026ee:	2600      	movs	r6, #0
 80026f0:	4301      	orrs	r1, r0
 80026f2:	430f      	orrs	r7, r1
 80026f4:	077b      	lsls	r3, r7, #29
 80026f6:	d009      	beq.n	800270c <__aeabi_dsub+0x124>
 80026f8:	230f      	movs	r3, #15
 80026fa:	403b      	ands	r3, r7
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d005      	beq.n	800270c <__aeabi_dsub+0x124>
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	42bb      	cmp	r3, r7
 8002704:	41bf      	sbcs	r7, r7
 8002706:	427f      	negs	r7, r7
 8002708:	19e4      	adds	r4, r4, r7
 800270a:	001f      	movs	r7, r3
 800270c:	0223      	lsls	r3, r4, #8
 800270e:	d525      	bpl.n	800275c <__aeabi_dsub+0x174>
 8002710:	4b86      	ldr	r3, [pc, #536]	; (800292c <__aeabi_dsub+0x344>)
 8002712:	3601      	adds	r6, #1
 8002714:	429e      	cmp	r6, r3
 8002716:	d100      	bne.n	800271a <__aeabi_dsub+0x132>
 8002718:	e0af      	b.n	800287a <__aeabi_dsub+0x292>
 800271a:	4b85      	ldr	r3, [pc, #532]	; (8002930 <__aeabi_dsub+0x348>)
 800271c:	2501      	movs	r5, #1
 800271e:	401c      	ands	r4, r3
 8002720:	4643      	mov	r3, r8
 8002722:	0762      	lsls	r2, r4, #29
 8002724:	08ff      	lsrs	r7, r7, #3
 8002726:	0264      	lsls	r4, r4, #9
 8002728:	0576      	lsls	r6, r6, #21
 800272a:	4317      	orrs	r7, r2
 800272c:	0b24      	lsrs	r4, r4, #12
 800272e:	0d76      	lsrs	r6, r6, #21
 8002730:	401d      	ands	r5, r3
 8002732:	2100      	movs	r1, #0
 8002734:	0324      	lsls	r4, r4, #12
 8002736:	0b23      	lsrs	r3, r4, #12
 8002738:	0d0c      	lsrs	r4, r1, #20
 800273a:	4a7e      	ldr	r2, [pc, #504]	; (8002934 <__aeabi_dsub+0x34c>)
 800273c:	0524      	lsls	r4, r4, #20
 800273e:	431c      	orrs	r4, r3
 8002740:	4014      	ands	r4, r2
 8002742:	0533      	lsls	r3, r6, #20
 8002744:	4323      	orrs	r3, r4
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	07ed      	lsls	r5, r5, #31
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	432b      	orrs	r3, r5
 800274e:	0038      	movs	r0, r7
 8002750:	0019      	movs	r1, r3
 8002752:	bc1c      	pop	{r2, r3, r4}
 8002754:	4690      	mov	r8, r2
 8002756:	4699      	mov	r9, r3
 8002758:	46a2      	mov	sl, r4
 800275a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275c:	2501      	movs	r5, #1
 800275e:	4643      	mov	r3, r8
 8002760:	0762      	lsls	r2, r4, #29
 8002762:	08ff      	lsrs	r7, r7, #3
 8002764:	4317      	orrs	r7, r2
 8002766:	08e4      	lsrs	r4, r4, #3
 8002768:	401d      	ands	r5, r3
 800276a:	4b70      	ldr	r3, [pc, #448]	; (800292c <__aeabi_dsub+0x344>)
 800276c:	429e      	cmp	r6, r3
 800276e:	d036      	beq.n	80027de <__aeabi_dsub+0x1f6>
 8002770:	0324      	lsls	r4, r4, #12
 8002772:	0576      	lsls	r6, r6, #21
 8002774:	0b24      	lsrs	r4, r4, #12
 8002776:	0d76      	lsrs	r6, r6, #21
 8002778:	e7db      	b.n	8002732 <__aeabi_dsub+0x14a>
 800277a:	4663      	mov	r3, ip
 800277c:	1af3      	subs	r3, r6, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	dc00      	bgt.n	8002784 <__aeabi_dsub+0x19c>
 8002782:	e094      	b.n	80028ae <__aeabi_dsub+0x2c6>
 8002784:	4660      	mov	r0, ip
 8002786:	2800      	cmp	r0, #0
 8002788:	d035      	beq.n	80027f6 <__aeabi_dsub+0x20e>
 800278a:	4868      	ldr	r0, [pc, #416]	; (800292c <__aeabi_dsub+0x344>)
 800278c:	4286      	cmp	r6, r0
 800278e:	d0b1      	beq.n	80026f4 <__aeabi_dsub+0x10c>
 8002790:	2780      	movs	r7, #128	; 0x80
 8002792:	043f      	lsls	r7, r7, #16
 8002794:	4339      	orrs	r1, r7
 8002796:	2b38      	cmp	r3, #56	; 0x38
 8002798:	dc00      	bgt.n	800279c <__aeabi_dsub+0x1b4>
 800279a:	e0fd      	b.n	8002998 <__aeabi_dsub+0x3b0>
 800279c:	430a      	orrs	r2, r1
 800279e:	0017      	movs	r7, r2
 80027a0:	2100      	movs	r1, #0
 80027a2:	1e7a      	subs	r2, r7, #1
 80027a4:	4197      	sbcs	r7, r2
 80027a6:	4457      	add	r7, sl
 80027a8:	4557      	cmp	r7, sl
 80027aa:	4180      	sbcs	r0, r0
 80027ac:	1909      	adds	r1, r1, r4
 80027ae:	4244      	negs	r4, r0
 80027b0:	190c      	adds	r4, r1, r4
 80027b2:	0223      	lsls	r3, r4, #8
 80027b4:	d53a      	bpl.n	800282c <__aeabi_dsub+0x244>
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <__aeabi_dsub+0x344>)
 80027b8:	3601      	adds	r6, #1
 80027ba:	429e      	cmp	r6, r3
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x1d8>
 80027be:	e14b      	b.n	8002a58 <__aeabi_dsub+0x470>
 80027c0:	2201      	movs	r2, #1
 80027c2:	4b5b      	ldr	r3, [pc, #364]	; (8002930 <__aeabi_dsub+0x348>)
 80027c4:	401c      	ands	r4, r3
 80027c6:	087b      	lsrs	r3, r7, #1
 80027c8:	4017      	ands	r7, r2
 80027ca:	431f      	orrs	r7, r3
 80027cc:	07e2      	lsls	r2, r4, #31
 80027ce:	4317      	orrs	r7, r2
 80027d0:	0864      	lsrs	r4, r4, #1
 80027d2:	e78f      	b.n	80026f4 <__aeabi_dsub+0x10c>
 80027d4:	0008      	movs	r0, r1
 80027d6:	4310      	orrs	r0, r2
 80027d8:	d000      	beq.n	80027dc <__aeabi_dsub+0x1f4>
 80027da:	e724      	b.n	8002626 <__aeabi_dsub+0x3e>
 80027dc:	e721      	b.n	8002622 <__aeabi_dsub+0x3a>
 80027de:	0023      	movs	r3, r4
 80027e0:	433b      	orrs	r3, r7
 80027e2:	d100      	bne.n	80027e6 <__aeabi_dsub+0x1fe>
 80027e4:	e1b9      	b.n	8002b5a <__aeabi_dsub+0x572>
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	0312      	lsls	r2, r2, #12
 80027ea:	4314      	orrs	r4, r2
 80027ec:	0324      	lsls	r4, r4, #12
 80027ee:	0b24      	lsrs	r4, r4, #12
 80027f0:	e79f      	b.n	8002732 <__aeabi_dsub+0x14a>
 80027f2:	002e      	movs	r6, r5
 80027f4:	e77e      	b.n	80026f4 <__aeabi_dsub+0x10c>
 80027f6:	0008      	movs	r0, r1
 80027f8:	4310      	orrs	r0, r2
 80027fa:	d100      	bne.n	80027fe <__aeabi_dsub+0x216>
 80027fc:	e0ca      	b.n	8002994 <__aeabi_dsub+0x3ac>
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	4684      	mov	ip, r0
 8002802:	2800      	cmp	r0, #0
 8002804:	d000      	beq.n	8002808 <__aeabi_dsub+0x220>
 8002806:	e0e7      	b.n	80029d8 <__aeabi_dsub+0x3f0>
 8002808:	4452      	add	r2, sl
 800280a:	4552      	cmp	r2, sl
 800280c:	4180      	sbcs	r0, r0
 800280e:	1864      	adds	r4, r4, r1
 8002810:	4240      	negs	r0, r0
 8002812:	1824      	adds	r4, r4, r0
 8002814:	0017      	movs	r7, r2
 8002816:	2601      	movs	r6, #1
 8002818:	0223      	lsls	r3, r4, #8
 800281a:	d507      	bpl.n	800282c <__aeabi_dsub+0x244>
 800281c:	2602      	movs	r6, #2
 800281e:	e7cf      	b.n	80027c0 <__aeabi_dsub+0x1d8>
 8002820:	4664      	mov	r4, ip
 8002822:	432c      	orrs	r4, r5
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x240>
 8002826:	e1b3      	b.n	8002b90 <__aeabi_dsub+0x5a8>
 8002828:	002c      	movs	r4, r5
 800282a:	4667      	mov	r7, ip
 800282c:	077b      	lsls	r3, r7, #29
 800282e:	d000      	beq.n	8002832 <__aeabi_dsub+0x24a>
 8002830:	e762      	b.n	80026f8 <__aeabi_dsub+0x110>
 8002832:	0763      	lsls	r3, r4, #29
 8002834:	08ff      	lsrs	r7, r7, #3
 8002836:	431f      	orrs	r7, r3
 8002838:	2501      	movs	r5, #1
 800283a:	4643      	mov	r3, r8
 800283c:	08e4      	lsrs	r4, r4, #3
 800283e:	401d      	ands	r5, r3
 8002840:	e793      	b.n	800276a <__aeabi_dsub+0x182>
 8002842:	2d00      	cmp	r5, #0
 8002844:	d178      	bne.n	8002938 <__aeabi_dsub+0x350>
 8002846:	1c75      	adds	r5, r6, #1
 8002848:	056d      	lsls	r5, r5, #21
 800284a:	0d6d      	lsrs	r5, r5, #21
 800284c:	2d01      	cmp	r5, #1
 800284e:	dc00      	bgt.n	8002852 <__aeabi_dsub+0x26a>
 8002850:	e0f2      	b.n	8002a38 <__aeabi_dsub+0x450>
 8002852:	4650      	mov	r0, sl
 8002854:	1a80      	subs	r0, r0, r2
 8002856:	4582      	cmp	sl, r0
 8002858:	41bf      	sbcs	r7, r7
 800285a:	1a65      	subs	r5, r4, r1
 800285c:	427f      	negs	r7, r7
 800285e:	1bed      	subs	r5, r5, r7
 8002860:	4684      	mov	ip, r0
 8002862:	0228      	lsls	r0, r5, #8
 8002864:	d400      	bmi.n	8002868 <__aeabi_dsub+0x280>
 8002866:	e08c      	b.n	8002982 <__aeabi_dsub+0x39a>
 8002868:	4650      	mov	r0, sl
 800286a:	1a17      	subs	r7, r2, r0
 800286c:	42ba      	cmp	r2, r7
 800286e:	4192      	sbcs	r2, r2
 8002870:	1b0c      	subs	r4, r1, r4
 8002872:	4255      	negs	r5, r2
 8002874:	1b65      	subs	r5, r4, r5
 8002876:	4698      	mov	r8, r3
 8002878:	e714      	b.n	80026a4 <__aeabi_dsub+0xbc>
 800287a:	2501      	movs	r5, #1
 800287c:	4643      	mov	r3, r8
 800287e:	2400      	movs	r4, #0
 8002880:	401d      	ands	r5, r3
 8002882:	2700      	movs	r7, #0
 8002884:	e755      	b.n	8002732 <__aeabi_dsub+0x14a>
 8002886:	4c2a      	ldr	r4, [pc, #168]	; (8002930 <__aeabi_dsub+0x348>)
 8002888:	1af6      	subs	r6, r6, r3
 800288a:	402c      	ands	r4, r5
 800288c:	e732      	b.n	80026f4 <__aeabi_dsub+0x10c>
 800288e:	003d      	movs	r5, r7
 8002890:	3828      	subs	r0, #40	; 0x28
 8002892:	4085      	lsls	r5, r0
 8002894:	2700      	movs	r7, #0
 8002896:	e717      	b.n	80026c8 <__aeabi_dsub+0xe0>
 8002898:	0038      	movs	r0, r7
 800289a:	f000 fb0d 	bl	8002eb8 <__clzsi2>
 800289e:	3020      	adds	r0, #32
 80028a0:	e706      	b.n	80026b0 <__aeabi_dsub+0xc8>
 80028a2:	430a      	orrs	r2, r1
 80028a4:	0017      	movs	r7, r2
 80028a6:	2100      	movs	r1, #0
 80028a8:	1e7a      	subs	r2, r7, #1
 80028aa:	4197      	sbcs	r7, r2
 80028ac:	e6ee      	b.n	800268c <__aeabi_dsub+0xa4>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d000      	beq.n	80028b4 <__aeabi_dsub+0x2cc>
 80028b2:	e0e5      	b.n	8002a80 <__aeabi_dsub+0x498>
 80028b4:	1c73      	adds	r3, r6, #1
 80028b6:	469c      	mov	ip, r3
 80028b8:	055b      	lsls	r3, r3, #21
 80028ba:	0d5b      	lsrs	r3, r3, #21
 80028bc:	2b01      	cmp	r3, #1
 80028be:	dc00      	bgt.n	80028c2 <__aeabi_dsub+0x2da>
 80028c0:	e09f      	b.n	8002a02 <__aeabi_dsub+0x41a>
 80028c2:	4b1a      	ldr	r3, [pc, #104]	; (800292c <__aeabi_dsub+0x344>)
 80028c4:	459c      	cmp	ip, r3
 80028c6:	d100      	bne.n	80028ca <__aeabi_dsub+0x2e2>
 80028c8:	e0c5      	b.n	8002a56 <__aeabi_dsub+0x46e>
 80028ca:	4452      	add	r2, sl
 80028cc:	4552      	cmp	r2, sl
 80028ce:	4180      	sbcs	r0, r0
 80028d0:	1864      	adds	r4, r4, r1
 80028d2:	4240      	negs	r0, r0
 80028d4:	1824      	adds	r4, r4, r0
 80028d6:	07e7      	lsls	r7, r4, #31
 80028d8:	0852      	lsrs	r2, r2, #1
 80028da:	4317      	orrs	r7, r2
 80028dc:	0864      	lsrs	r4, r4, #1
 80028de:	4666      	mov	r6, ip
 80028e0:	e708      	b.n	80026f4 <__aeabi_dsub+0x10c>
 80028e2:	4812      	ldr	r0, [pc, #72]	; (800292c <__aeabi_dsub+0x344>)
 80028e4:	4285      	cmp	r5, r0
 80028e6:	d100      	bne.n	80028ea <__aeabi_dsub+0x302>
 80028e8:	e085      	b.n	80029f6 <__aeabi_dsub+0x40e>
 80028ea:	001d      	movs	r5, r3
 80028ec:	e6bc      	b.n	8002668 <__aeabi_dsub+0x80>
 80028ee:	0029      	movs	r1, r5
 80028f0:	3e1f      	subs	r6, #31
 80028f2:	40f1      	lsrs	r1, r6
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d100      	bne.n	80028fa <__aeabi_dsub+0x312>
 80028f8:	e07f      	b.n	80029fa <__aeabi_dsub+0x412>
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	409d      	lsls	r5, r3
 8002900:	432f      	orrs	r7, r5
 8002902:	1e7d      	subs	r5, r7, #1
 8002904:	41af      	sbcs	r7, r5
 8002906:	2400      	movs	r4, #0
 8002908:	430f      	orrs	r7, r1
 800290a:	2600      	movs	r6, #0
 800290c:	e78e      	b.n	800282c <__aeabi_dsub+0x244>
 800290e:	002b      	movs	r3, r5
 8002910:	000f      	movs	r7, r1
 8002912:	3b20      	subs	r3, #32
 8002914:	40df      	lsrs	r7, r3
 8002916:	2d20      	cmp	r5, #32
 8002918:	d071      	beq.n	80029fe <__aeabi_dsub+0x416>
 800291a:	2340      	movs	r3, #64	; 0x40
 800291c:	1b5d      	subs	r5, r3, r5
 800291e:	40a9      	lsls	r1, r5
 8002920:	430a      	orrs	r2, r1
 8002922:	1e51      	subs	r1, r2, #1
 8002924:	418a      	sbcs	r2, r1
 8002926:	2100      	movs	r1, #0
 8002928:	4317      	orrs	r7, r2
 800292a:	e6af      	b.n	800268c <__aeabi_dsub+0xa4>
 800292c:	000007ff 	.word	0x000007ff
 8002930:	ff7fffff 	.word	0xff7fffff
 8002934:	800fffff 	.word	0x800fffff
 8002938:	2e00      	cmp	r6, #0
 800293a:	d03e      	beq.n	80029ba <__aeabi_dsub+0x3d2>
 800293c:	4eb3      	ldr	r6, [pc, #716]	; (8002c0c <__aeabi_dsub+0x624>)
 800293e:	45b4      	cmp	ip, r6
 8002940:	d045      	beq.n	80029ce <__aeabi_dsub+0x3e6>
 8002942:	2680      	movs	r6, #128	; 0x80
 8002944:	0436      	lsls	r6, r6, #16
 8002946:	426d      	negs	r5, r5
 8002948:	4334      	orrs	r4, r6
 800294a:	2d38      	cmp	r5, #56	; 0x38
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0x368>
 800294e:	e0a8      	b.n	8002aa2 <__aeabi_dsub+0x4ba>
 8002950:	2d1f      	cmp	r5, #31
 8002952:	dd00      	ble.n	8002956 <__aeabi_dsub+0x36e>
 8002954:	e11f      	b.n	8002b96 <__aeabi_dsub+0x5ae>
 8002956:	2620      	movs	r6, #32
 8002958:	0027      	movs	r7, r4
 800295a:	4650      	mov	r0, sl
 800295c:	1b76      	subs	r6, r6, r5
 800295e:	40b7      	lsls	r7, r6
 8002960:	40e8      	lsrs	r0, r5
 8002962:	4307      	orrs	r7, r0
 8002964:	4650      	mov	r0, sl
 8002966:	40b0      	lsls	r0, r6
 8002968:	1e46      	subs	r6, r0, #1
 800296a:	41b0      	sbcs	r0, r6
 800296c:	40ec      	lsrs	r4, r5
 800296e:	4338      	orrs	r0, r7
 8002970:	1a17      	subs	r7, r2, r0
 8002972:	42ba      	cmp	r2, r7
 8002974:	4192      	sbcs	r2, r2
 8002976:	1b0c      	subs	r4, r1, r4
 8002978:	4252      	negs	r2, r2
 800297a:	1aa4      	subs	r4, r4, r2
 800297c:	4666      	mov	r6, ip
 800297e:	4698      	mov	r8, r3
 8002980:	e68b      	b.n	800269a <__aeabi_dsub+0xb2>
 8002982:	4664      	mov	r4, ip
 8002984:	4667      	mov	r7, ip
 8002986:	432c      	orrs	r4, r5
 8002988:	d000      	beq.n	800298c <__aeabi_dsub+0x3a4>
 800298a:	e68b      	b.n	80026a4 <__aeabi_dsub+0xbc>
 800298c:	2500      	movs	r5, #0
 800298e:	2600      	movs	r6, #0
 8002990:	2700      	movs	r7, #0
 8002992:	e6ea      	b.n	800276a <__aeabi_dsub+0x182>
 8002994:	001e      	movs	r6, r3
 8002996:	e6ad      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002998:	2b1f      	cmp	r3, #31
 800299a:	dc60      	bgt.n	8002a5e <__aeabi_dsub+0x476>
 800299c:	2720      	movs	r7, #32
 800299e:	1af8      	subs	r0, r7, r3
 80029a0:	000f      	movs	r7, r1
 80029a2:	4684      	mov	ip, r0
 80029a4:	4087      	lsls	r7, r0
 80029a6:	0010      	movs	r0, r2
 80029a8:	40d8      	lsrs	r0, r3
 80029aa:	4307      	orrs	r7, r0
 80029ac:	4660      	mov	r0, ip
 80029ae:	4082      	lsls	r2, r0
 80029b0:	1e50      	subs	r0, r2, #1
 80029b2:	4182      	sbcs	r2, r0
 80029b4:	40d9      	lsrs	r1, r3
 80029b6:	4317      	orrs	r7, r2
 80029b8:	e6f5      	b.n	80027a6 <__aeabi_dsub+0x1be>
 80029ba:	0026      	movs	r6, r4
 80029bc:	4650      	mov	r0, sl
 80029be:	4306      	orrs	r6, r0
 80029c0:	d005      	beq.n	80029ce <__aeabi_dsub+0x3e6>
 80029c2:	43ed      	mvns	r5, r5
 80029c4:	2d00      	cmp	r5, #0
 80029c6:	d0d3      	beq.n	8002970 <__aeabi_dsub+0x388>
 80029c8:	4e90      	ldr	r6, [pc, #576]	; (8002c0c <__aeabi_dsub+0x624>)
 80029ca:	45b4      	cmp	ip, r6
 80029cc:	d1bd      	bne.n	800294a <__aeabi_dsub+0x362>
 80029ce:	000c      	movs	r4, r1
 80029d0:	0017      	movs	r7, r2
 80029d2:	4666      	mov	r6, ip
 80029d4:	4698      	mov	r8, r3
 80029d6:	e68d      	b.n	80026f4 <__aeabi_dsub+0x10c>
 80029d8:	488c      	ldr	r0, [pc, #560]	; (8002c0c <__aeabi_dsub+0x624>)
 80029da:	4283      	cmp	r3, r0
 80029dc:	d00b      	beq.n	80029f6 <__aeabi_dsub+0x40e>
 80029de:	4663      	mov	r3, ip
 80029e0:	e6d9      	b.n	8002796 <__aeabi_dsub+0x1ae>
 80029e2:	2d00      	cmp	r5, #0
 80029e4:	d000      	beq.n	80029e8 <__aeabi_dsub+0x400>
 80029e6:	e096      	b.n	8002b16 <__aeabi_dsub+0x52e>
 80029e8:	0008      	movs	r0, r1
 80029ea:	4310      	orrs	r0, r2
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x408>
 80029ee:	e0e2      	b.n	8002bb6 <__aeabi_dsub+0x5ce>
 80029f0:	000c      	movs	r4, r1
 80029f2:	0017      	movs	r7, r2
 80029f4:	4698      	mov	r8, r3
 80029f6:	4e85      	ldr	r6, [pc, #532]	; (8002c0c <__aeabi_dsub+0x624>)
 80029f8:	e67c      	b.n	80026f4 <__aeabi_dsub+0x10c>
 80029fa:	2500      	movs	r5, #0
 80029fc:	e780      	b.n	8002900 <__aeabi_dsub+0x318>
 80029fe:	2100      	movs	r1, #0
 8002a00:	e78e      	b.n	8002920 <__aeabi_dsub+0x338>
 8002a02:	0023      	movs	r3, r4
 8002a04:	4650      	mov	r0, sl
 8002a06:	4303      	orrs	r3, r0
 8002a08:	2e00      	cmp	r6, #0
 8002a0a:	d000      	beq.n	8002a0e <__aeabi_dsub+0x426>
 8002a0c:	e0a8      	b.n	8002b60 <__aeabi_dsub+0x578>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d100      	bne.n	8002a14 <__aeabi_dsub+0x42c>
 8002a12:	e0de      	b.n	8002bd2 <__aeabi_dsub+0x5ea>
 8002a14:	000b      	movs	r3, r1
 8002a16:	4313      	orrs	r3, r2
 8002a18:	d100      	bne.n	8002a1c <__aeabi_dsub+0x434>
 8002a1a:	e66b      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002a1c:	4452      	add	r2, sl
 8002a1e:	4552      	cmp	r2, sl
 8002a20:	4180      	sbcs	r0, r0
 8002a22:	1864      	adds	r4, r4, r1
 8002a24:	4240      	negs	r0, r0
 8002a26:	1824      	adds	r4, r4, r0
 8002a28:	0017      	movs	r7, r2
 8002a2a:	0223      	lsls	r3, r4, #8
 8002a2c:	d400      	bmi.n	8002a30 <__aeabi_dsub+0x448>
 8002a2e:	e6fd      	b.n	800282c <__aeabi_dsub+0x244>
 8002a30:	4b77      	ldr	r3, [pc, #476]	; (8002c10 <__aeabi_dsub+0x628>)
 8002a32:	4666      	mov	r6, ip
 8002a34:	401c      	ands	r4, r3
 8002a36:	e65d      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002a38:	0025      	movs	r5, r4
 8002a3a:	4650      	mov	r0, sl
 8002a3c:	4305      	orrs	r5, r0
 8002a3e:	2e00      	cmp	r6, #0
 8002a40:	d1cf      	bne.n	80029e2 <__aeabi_dsub+0x3fa>
 8002a42:	2d00      	cmp	r5, #0
 8002a44:	d14f      	bne.n	8002ae6 <__aeabi_dsub+0x4fe>
 8002a46:	000c      	movs	r4, r1
 8002a48:	4314      	orrs	r4, r2
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x466>
 8002a4c:	e0a0      	b.n	8002b90 <__aeabi_dsub+0x5a8>
 8002a4e:	000c      	movs	r4, r1
 8002a50:	0017      	movs	r7, r2
 8002a52:	4698      	mov	r8, r3
 8002a54:	e64e      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002a56:	4666      	mov	r6, ip
 8002a58:	2400      	movs	r4, #0
 8002a5a:	2700      	movs	r7, #0
 8002a5c:	e685      	b.n	800276a <__aeabi_dsub+0x182>
 8002a5e:	001f      	movs	r7, r3
 8002a60:	0008      	movs	r0, r1
 8002a62:	3f20      	subs	r7, #32
 8002a64:	40f8      	lsrs	r0, r7
 8002a66:	0007      	movs	r7, r0
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x486>
 8002a6c:	e08e      	b.n	8002b8c <__aeabi_dsub+0x5a4>
 8002a6e:	2040      	movs	r0, #64	; 0x40
 8002a70:	1ac3      	subs	r3, r0, r3
 8002a72:	4099      	lsls	r1, r3
 8002a74:	430a      	orrs	r2, r1
 8002a76:	1e51      	subs	r1, r2, #1
 8002a78:	418a      	sbcs	r2, r1
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4317      	orrs	r7, r2
 8002a7e:	e692      	b.n	80027a6 <__aeabi_dsub+0x1be>
 8002a80:	2e00      	cmp	r6, #0
 8002a82:	d114      	bne.n	8002aae <__aeabi_dsub+0x4c6>
 8002a84:	0026      	movs	r6, r4
 8002a86:	4650      	mov	r0, sl
 8002a88:	4306      	orrs	r6, r0
 8002a8a:	d062      	beq.n	8002b52 <__aeabi_dsub+0x56a>
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d15c      	bne.n	8002b4c <__aeabi_dsub+0x564>
 8002a92:	1887      	adds	r7, r0, r2
 8002a94:	4297      	cmp	r7, r2
 8002a96:	4192      	sbcs	r2, r2
 8002a98:	1864      	adds	r4, r4, r1
 8002a9a:	4252      	negs	r2, r2
 8002a9c:	18a4      	adds	r4, r4, r2
 8002a9e:	4666      	mov	r6, ip
 8002aa0:	e687      	b.n	80027b2 <__aeabi_dsub+0x1ca>
 8002aa2:	4650      	mov	r0, sl
 8002aa4:	4320      	orrs	r0, r4
 8002aa6:	1e44      	subs	r4, r0, #1
 8002aa8:	41a0      	sbcs	r0, r4
 8002aaa:	2400      	movs	r4, #0
 8002aac:	e760      	b.n	8002970 <__aeabi_dsub+0x388>
 8002aae:	4e57      	ldr	r6, [pc, #348]	; (8002c0c <__aeabi_dsub+0x624>)
 8002ab0:	45b4      	cmp	ip, r6
 8002ab2:	d04e      	beq.n	8002b52 <__aeabi_dsub+0x56a>
 8002ab4:	2680      	movs	r6, #128	; 0x80
 8002ab6:	0436      	lsls	r6, r6, #16
 8002ab8:	425b      	negs	r3, r3
 8002aba:	4334      	orrs	r4, r6
 8002abc:	2b38      	cmp	r3, #56	; 0x38
 8002abe:	dd00      	ble.n	8002ac2 <__aeabi_dsub+0x4da>
 8002ac0:	e07f      	b.n	8002bc2 <__aeabi_dsub+0x5da>
 8002ac2:	2b1f      	cmp	r3, #31
 8002ac4:	dd00      	ble.n	8002ac8 <__aeabi_dsub+0x4e0>
 8002ac6:	e08b      	b.n	8002be0 <__aeabi_dsub+0x5f8>
 8002ac8:	2620      	movs	r6, #32
 8002aca:	0027      	movs	r7, r4
 8002acc:	4650      	mov	r0, sl
 8002ace:	1af6      	subs	r6, r6, r3
 8002ad0:	40b7      	lsls	r7, r6
 8002ad2:	40d8      	lsrs	r0, r3
 8002ad4:	4307      	orrs	r7, r0
 8002ad6:	4650      	mov	r0, sl
 8002ad8:	40b0      	lsls	r0, r6
 8002ada:	1e46      	subs	r6, r0, #1
 8002adc:	41b0      	sbcs	r0, r6
 8002ade:	4307      	orrs	r7, r0
 8002ae0:	40dc      	lsrs	r4, r3
 8002ae2:	18bf      	adds	r7, r7, r2
 8002ae4:	e7d6      	b.n	8002a94 <__aeabi_dsub+0x4ac>
 8002ae6:	000d      	movs	r5, r1
 8002ae8:	4315      	orrs	r5, r2
 8002aea:	d100      	bne.n	8002aee <__aeabi_dsub+0x506>
 8002aec:	e602      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002aee:	4650      	mov	r0, sl
 8002af0:	1a80      	subs	r0, r0, r2
 8002af2:	4582      	cmp	sl, r0
 8002af4:	41bf      	sbcs	r7, r7
 8002af6:	1a65      	subs	r5, r4, r1
 8002af8:	427f      	negs	r7, r7
 8002afa:	1bed      	subs	r5, r5, r7
 8002afc:	4684      	mov	ip, r0
 8002afe:	0228      	lsls	r0, r5, #8
 8002b00:	d400      	bmi.n	8002b04 <__aeabi_dsub+0x51c>
 8002b02:	e68d      	b.n	8002820 <__aeabi_dsub+0x238>
 8002b04:	4650      	mov	r0, sl
 8002b06:	1a17      	subs	r7, r2, r0
 8002b08:	42ba      	cmp	r2, r7
 8002b0a:	4192      	sbcs	r2, r2
 8002b0c:	1b0c      	subs	r4, r1, r4
 8002b0e:	4252      	negs	r2, r2
 8002b10:	1aa4      	subs	r4, r4, r2
 8002b12:	4698      	mov	r8, r3
 8002b14:	e5ee      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002b16:	000d      	movs	r5, r1
 8002b18:	4315      	orrs	r5, r2
 8002b1a:	d100      	bne.n	8002b1e <__aeabi_dsub+0x536>
 8002b1c:	e76b      	b.n	80029f6 <__aeabi_dsub+0x40e>
 8002b1e:	4650      	mov	r0, sl
 8002b20:	0767      	lsls	r7, r4, #29
 8002b22:	08c0      	lsrs	r0, r0, #3
 8002b24:	4307      	orrs	r7, r0
 8002b26:	2080      	movs	r0, #128	; 0x80
 8002b28:	08e4      	lsrs	r4, r4, #3
 8002b2a:	0300      	lsls	r0, r0, #12
 8002b2c:	4204      	tst	r4, r0
 8002b2e:	d007      	beq.n	8002b40 <__aeabi_dsub+0x558>
 8002b30:	08cd      	lsrs	r5, r1, #3
 8002b32:	4205      	tst	r5, r0
 8002b34:	d104      	bne.n	8002b40 <__aeabi_dsub+0x558>
 8002b36:	002c      	movs	r4, r5
 8002b38:	4698      	mov	r8, r3
 8002b3a:	08d7      	lsrs	r7, r2, #3
 8002b3c:	0749      	lsls	r1, r1, #29
 8002b3e:	430f      	orrs	r7, r1
 8002b40:	0f7b      	lsrs	r3, r7, #29
 8002b42:	00e4      	lsls	r4, r4, #3
 8002b44:	431c      	orrs	r4, r3
 8002b46:	00ff      	lsls	r7, r7, #3
 8002b48:	4e30      	ldr	r6, [pc, #192]	; (8002c0c <__aeabi_dsub+0x624>)
 8002b4a:	e5d3      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002b4c:	4e2f      	ldr	r6, [pc, #188]	; (8002c0c <__aeabi_dsub+0x624>)
 8002b4e:	45b4      	cmp	ip, r6
 8002b50:	d1b4      	bne.n	8002abc <__aeabi_dsub+0x4d4>
 8002b52:	000c      	movs	r4, r1
 8002b54:	0017      	movs	r7, r2
 8002b56:	4666      	mov	r6, ip
 8002b58:	e5cc      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002b5a:	2700      	movs	r7, #0
 8002b5c:	2400      	movs	r4, #0
 8002b5e:	e5e8      	b.n	8002732 <__aeabi_dsub+0x14a>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d039      	beq.n	8002bd8 <__aeabi_dsub+0x5f0>
 8002b64:	000b      	movs	r3, r1
 8002b66:	4313      	orrs	r3, r2
 8002b68:	d100      	bne.n	8002b6c <__aeabi_dsub+0x584>
 8002b6a:	e744      	b.n	80029f6 <__aeabi_dsub+0x40e>
 8002b6c:	08c0      	lsrs	r0, r0, #3
 8002b6e:	0767      	lsls	r7, r4, #29
 8002b70:	4307      	orrs	r7, r0
 8002b72:	2080      	movs	r0, #128	; 0x80
 8002b74:	08e4      	lsrs	r4, r4, #3
 8002b76:	0300      	lsls	r0, r0, #12
 8002b78:	4204      	tst	r4, r0
 8002b7a:	d0e1      	beq.n	8002b40 <__aeabi_dsub+0x558>
 8002b7c:	08cb      	lsrs	r3, r1, #3
 8002b7e:	4203      	tst	r3, r0
 8002b80:	d1de      	bne.n	8002b40 <__aeabi_dsub+0x558>
 8002b82:	08d7      	lsrs	r7, r2, #3
 8002b84:	0749      	lsls	r1, r1, #29
 8002b86:	430f      	orrs	r7, r1
 8002b88:	001c      	movs	r4, r3
 8002b8a:	e7d9      	b.n	8002b40 <__aeabi_dsub+0x558>
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	e771      	b.n	8002a74 <__aeabi_dsub+0x48c>
 8002b90:	2500      	movs	r5, #0
 8002b92:	2700      	movs	r7, #0
 8002b94:	e5e9      	b.n	800276a <__aeabi_dsub+0x182>
 8002b96:	002e      	movs	r6, r5
 8002b98:	0027      	movs	r7, r4
 8002b9a:	3e20      	subs	r6, #32
 8002b9c:	40f7      	lsrs	r7, r6
 8002b9e:	2d20      	cmp	r5, #32
 8002ba0:	d02f      	beq.n	8002c02 <__aeabi_dsub+0x61a>
 8002ba2:	2640      	movs	r6, #64	; 0x40
 8002ba4:	1b75      	subs	r5, r6, r5
 8002ba6:	40ac      	lsls	r4, r5
 8002ba8:	4650      	mov	r0, sl
 8002baa:	4320      	orrs	r0, r4
 8002bac:	1e44      	subs	r4, r0, #1
 8002bae:	41a0      	sbcs	r0, r4
 8002bb0:	2400      	movs	r4, #0
 8002bb2:	4338      	orrs	r0, r7
 8002bb4:	e6dc      	b.n	8002970 <__aeabi_dsub+0x388>
 8002bb6:	2480      	movs	r4, #128	; 0x80
 8002bb8:	2500      	movs	r5, #0
 8002bba:	0324      	lsls	r4, r4, #12
 8002bbc:	4e13      	ldr	r6, [pc, #76]	; (8002c0c <__aeabi_dsub+0x624>)
 8002bbe:	2700      	movs	r7, #0
 8002bc0:	e5d3      	b.n	800276a <__aeabi_dsub+0x182>
 8002bc2:	4650      	mov	r0, sl
 8002bc4:	4320      	orrs	r0, r4
 8002bc6:	0007      	movs	r7, r0
 8002bc8:	1e78      	subs	r0, r7, #1
 8002bca:	4187      	sbcs	r7, r0
 8002bcc:	2400      	movs	r4, #0
 8002bce:	18bf      	adds	r7, r7, r2
 8002bd0:	e760      	b.n	8002a94 <__aeabi_dsub+0x4ac>
 8002bd2:	000c      	movs	r4, r1
 8002bd4:	0017      	movs	r7, r2
 8002bd6:	e58d      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002bd8:	000c      	movs	r4, r1
 8002bda:	0017      	movs	r7, r2
 8002bdc:	4e0b      	ldr	r6, [pc, #44]	; (8002c0c <__aeabi_dsub+0x624>)
 8002bde:	e589      	b.n	80026f4 <__aeabi_dsub+0x10c>
 8002be0:	001e      	movs	r6, r3
 8002be2:	0027      	movs	r7, r4
 8002be4:	3e20      	subs	r6, #32
 8002be6:	40f7      	lsrs	r7, r6
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d00c      	beq.n	8002c06 <__aeabi_dsub+0x61e>
 8002bec:	2640      	movs	r6, #64	; 0x40
 8002bee:	1af3      	subs	r3, r6, r3
 8002bf0:	409c      	lsls	r4, r3
 8002bf2:	4650      	mov	r0, sl
 8002bf4:	4320      	orrs	r0, r4
 8002bf6:	1e44      	subs	r4, r0, #1
 8002bf8:	41a0      	sbcs	r0, r4
 8002bfa:	4307      	orrs	r7, r0
 8002bfc:	2400      	movs	r4, #0
 8002bfe:	18bf      	adds	r7, r7, r2
 8002c00:	e748      	b.n	8002a94 <__aeabi_dsub+0x4ac>
 8002c02:	2400      	movs	r4, #0
 8002c04:	e7d0      	b.n	8002ba8 <__aeabi_dsub+0x5c0>
 8002c06:	2400      	movs	r4, #0
 8002c08:	e7f3      	b.n	8002bf2 <__aeabi_dsub+0x60a>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	000007ff 	.word	0x000007ff
 8002c10:	ff7fffff 	.word	0xff7fffff

08002c14 <__aeabi_d2iz>:
 8002c14:	b530      	push	{r4, r5, lr}
 8002c16:	4d13      	ldr	r5, [pc, #76]	; (8002c64 <__aeabi_d2iz+0x50>)
 8002c18:	030a      	lsls	r2, r1, #12
 8002c1a:	004b      	lsls	r3, r1, #1
 8002c1c:	0b12      	lsrs	r2, r2, #12
 8002c1e:	0d5b      	lsrs	r3, r3, #21
 8002c20:	0fc9      	lsrs	r1, r1, #31
 8002c22:	2400      	movs	r4, #0
 8002c24:	42ab      	cmp	r3, r5
 8002c26:	dd10      	ble.n	8002c4a <__aeabi_d2iz+0x36>
 8002c28:	4c0f      	ldr	r4, [pc, #60]	; (8002c68 <__aeabi_d2iz+0x54>)
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	dc0f      	bgt.n	8002c4e <__aeabi_d2iz+0x3a>
 8002c2e:	2480      	movs	r4, #128	; 0x80
 8002c30:	4d0e      	ldr	r5, [pc, #56]	; (8002c6c <__aeabi_d2iz+0x58>)
 8002c32:	0364      	lsls	r4, r4, #13
 8002c34:	4322      	orrs	r2, r4
 8002c36:	1aed      	subs	r5, r5, r3
 8002c38:	2d1f      	cmp	r5, #31
 8002c3a:	dd0b      	ble.n	8002c54 <__aeabi_d2iz+0x40>
 8002c3c:	480c      	ldr	r0, [pc, #48]	; (8002c70 <__aeabi_d2iz+0x5c>)
 8002c3e:	1ac3      	subs	r3, r0, r3
 8002c40:	40da      	lsrs	r2, r3
 8002c42:	4254      	negs	r4, r2
 8002c44:	2900      	cmp	r1, #0
 8002c46:	d100      	bne.n	8002c4a <__aeabi_d2iz+0x36>
 8002c48:	0014      	movs	r4, r2
 8002c4a:	0020      	movs	r0, r4
 8002c4c:	bd30      	pop	{r4, r5, pc}
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <__aeabi_d2iz+0x60>)
 8002c50:	18cc      	adds	r4, r1, r3
 8002c52:	e7fa      	b.n	8002c4a <__aeabi_d2iz+0x36>
 8002c54:	4c08      	ldr	r4, [pc, #32]	; (8002c78 <__aeabi_d2iz+0x64>)
 8002c56:	40e8      	lsrs	r0, r5
 8002c58:	46a4      	mov	ip, r4
 8002c5a:	4463      	add	r3, ip
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	4302      	orrs	r2, r0
 8002c60:	e7ef      	b.n	8002c42 <__aeabi_d2iz+0x2e>
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	000003fe 	.word	0x000003fe
 8002c68:	0000041d 	.word	0x0000041d
 8002c6c:	00000433 	.word	0x00000433
 8002c70:	00000413 	.word	0x00000413
 8002c74:	7fffffff 	.word	0x7fffffff
 8002c78:	fffffbed 	.word	0xfffffbed

08002c7c <__aeabi_i2d>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d030      	beq.n	8002ce4 <__aeabi_i2d+0x68>
 8002c82:	17c3      	asrs	r3, r0, #31
 8002c84:	18c4      	adds	r4, r0, r3
 8002c86:	405c      	eors	r4, r3
 8002c88:	0fc5      	lsrs	r5, r0, #31
 8002c8a:	0020      	movs	r0, r4
 8002c8c:	f000 f914 	bl	8002eb8 <__clzsi2>
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <__aeabi_i2d+0x74>)
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <__aeabi_i2d+0x78>)
 8002c94:	1a1b      	subs	r3, r3, r0
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	2a1f      	cmp	r2, #31
 8002c9a:	dd18      	ble.n	8002cce <__aeabi_i2d+0x52>
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <__aeabi_i2d+0x7c>)
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	4094      	lsls	r4, r2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	0324      	lsls	r4, r4, #12
 8002ca6:	055b      	lsls	r3, r3, #21
 8002ca8:	0b24      	lsrs	r4, r4, #12
 8002caa:	0d5b      	lsrs	r3, r3, #21
 8002cac:	2100      	movs	r1, #0
 8002cae:	0010      	movs	r0, r2
 8002cb0:	0324      	lsls	r4, r4, #12
 8002cb2:	0d0a      	lsrs	r2, r1, #20
 8002cb4:	0b24      	lsrs	r4, r4, #12
 8002cb6:	0512      	lsls	r2, r2, #20
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	4c10      	ldr	r4, [pc, #64]	; (8002cfc <__aeabi_i2d+0x80>)
 8002cbc:	051b      	lsls	r3, r3, #20
 8002cbe:	4022      	ands	r2, r4
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	07ed      	lsls	r5, r5, #31
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	432b      	orrs	r3, r5
 8002cca:	0019      	movs	r1, r3
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
 8002cce:	0021      	movs	r1, r4
 8002cd0:	4091      	lsls	r1, r2
 8002cd2:	000a      	movs	r2, r1
 8002cd4:	210b      	movs	r1, #11
 8002cd6:	1a08      	subs	r0, r1, r0
 8002cd8:	40c4      	lsrs	r4, r0
 8002cda:	055b      	lsls	r3, r3, #21
 8002cdc:	0324      	lsls	r4, r4, #12
 8002cde:	0b24      	lsrs	r4, r4, #12
 8002ce0:	0d5b      	lsrs	r3, r3, #21
 8002ce2:	e7e3      	b.n	8002cac <__aeabi_i2d+0x30>
 8002ce4:	2500      	movs	r5, #0
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2400      	movs	r4, #0
 8002cea:	2200      	movs	r2, #0
 8002cec:	e7de      	b.n	8002cac <__aeabi_i2d+0x30>
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	0000041e 	.word	0x0000041e
 8002cf4:	00000433 	.word	0x00000433
 8002cf8:	00000413 	.word	0x00000413
 8002cfc:	800fffff 	.word	0x800fffff

08002d00 <__aeabi_f2d>:
 8002d00:	0041      	lsls	r1, r0, #1
 8002d02:	0e09      	lsrs	r1, r1, #24
 8002d04:	1c4b      	adds	r3, r1, #1
 8002d06:	b570      	push	{r4, r5, r6, lr}
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	0246      	lsls	r6, r0, #9
 8002d0c:	0a75      	lsrs	r5, r6, #9
 8002d0e:	0fc4      	lsrs	r4, r0, #31
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	dd14      	ble.n	8002d3e <__aeabi_f2d+0x3e>
 8002d14:	23e0      	movs	r3, #224	; 0xe0
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	076d      	lsls	r5, r5, #29
 8002d1a:	0b36      	lsrs	r6, r6, #12
 8002d1c:	18cb      	adds	r3, r1, r3
 8002d1e:	2100      	movs	r1, #0
 8002d20:	0d0a      	lsrs	r2, r1, #20
 8002d22:	0028      	movs	r0, r5
 8002d24:	0512      	lsls	r2, r2, #20
 8002d26:	4d1c      	ldr	r5, [pc, #112]	; (8002d98 <__aeabi_f2d+0x98>)
 8002d28:	4332      	orrs	r2, r6
 8002d2a:	055b      	lsls	r3, r3, #21
 8002d2c:	402a      	ands	r2, r5
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	4313      	orrs	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	07e4      	lsls	r4, r4, #31
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	4323      	orrs	r3, r4
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
 8002d3e:	2900      	cmp	r1, #0
 8002d40:	d114      	bne.n	8002d6c <__aeabi_f2d+0x6c>
 8002d42:	2d00      	cmp	r5, #0
 8002d44:	d01e      	beq.n	8002d84 <__aeabi_f2d+0x84>
 8002d46:	0028      	movs	r0, r5
 8002d48:	f000 f8b6 	bl	8002eb8 <__clzsi2>
 8002d4c:	280a      	cmp	r0, #10
 8002d4e:	dc1c      	bgt.n	8002d8a <__aeabi_f2d+0x8a>
 8002d50:	230b      	movs	r3, #11
 8002d52:	002a      	movs	r2, r5
 8002d54:	1a1b      	subs	r3, r3, r0
 8002d56:	40da      	lsrs	r2, r3
 8002d58:	0003      	movs	r3, r0
 8002d5a:	3315      	adds	r3, #21
 8002d5c:	409d      	lsls	r5, r3
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <__aeabi_f2d+0x9c>)
 8002d60:	0312      	lsls	r2, r2, #12
 8002d62:	1a1b      	subs	r3, r3, r0
 8002d64:	055b      	lsls	r3, r3, #21
 8002d66:	0b16      	lsrs	r6, r2, #12
 8002d68:	0d5b      	lsrs	r3, r3, #21
 8002d6a:	e7d8      	b.n	8002d1e <__aeabi_f2d+0x1e>
 8002d6c:	2d00      	cmp	r5, #0
 8002d6e:	d006      	beq.n	8002d7e <__aeabi_f2d+0x7e>
 8002d70:	0b32      	lsrs	r2, r6, #12
 8002d72:	2680      	movs	r6, #128	; 0x80
 8002d74:	0336      	lsls	r6, r6, #12
 8002d76:	076d      	lsls	r5, r5, #29
 8002d78:	4316      	orrs	r6, r2
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <__aeabi_f2d+0xa0>)
 8002d7c:	e7cf      	b.n	8002d1e <__aeabi_f2d+0x1e>
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <__aeabi_f2d+0xa0>)
 8002d80:	2600      	movs	r6, #0
 8002d82:	e7cc      	b.n	8002d1e <__aeabi_f2d+0x1e>
 8002d84:	2300      	movs	r3, #0
 8002d86:	2600      	movs	r6, #0
 8002d88:	e7c9      	b.n	8002d1e <__aeabi_f2d+0x1e>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	002a      	movs	r2, r5
 8002d8e:	3b0b      	subs	r3, #11
 8002d90:	409a      	lsls	r2, r3
 8002d92:	2500      	movs	r5, #0
 8002d94:	e7e3      	b.n	8002d5e <__aeabi_f2d+0x5e>
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	800fffff 	.word	0x800fffff
 8002d9c:	00000389 	.word	0x00000389
 8002da0:	000007ff 	.word	0x000007ff

08002da4 <__aeabi_d2f>:
 8002da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da6:	004c      	lsls	r4, r1, #1
 8002da8:	0d64      	lsrs	r4, r4, #21
 8002daa:	030b      	lsls	r3, r1, #12
 8002dac:	1c62      	adds	r2, r4, #1
 8002dae:	0f45      	lsrs	r5, r0, #29
 8002db0:	0a5b      	lsrs	r3, r3, #9
 8002db2:	0552      	lsls	r2, r2, #21
 8002db4:	432b      	orrs	r3, r5
 8002db6:	0fc9      	lsrs	r1, r1, #31
 8002db8:	00c5      	lsls	r5, r0, #3
 8002dba:	0d52      	lsrs	r2, r2, #21
 8002dbc:	2a01      	cmp	r2, #1
 8002dbe:	dd28      	ble.n	8002e12 <__aeabi_d2f+0x6e>
 8002dc0:	4a3a      	ldr	r2, [pc, #232]	; (8002eac <__aeabi_d2f+0x108>)
 8002dc2:	18a6      	adds	r6, r4, r2
 8002dc4:	2efe      	cmp	r6, #254	; 0xfe
 8002dc6:	dc1b      	bgt.n	8002e00 <__aeabi_d2f+0x5c>
 8002dc8:	2e00      	cmp	r6, #0
 8002dca:	dd3e      	ble.n	8002e4a <__aeabi_d2f+0xa6>
 8002dcc:	0180      	lsls	r0, r0, #6
 8002dce:	0002      	movs	r2, r0
 8002dd0:	1e50      	subs	r0, r2, #1
 8002dd2:	4182      	sbcs	r2, r0
 8002dd4:	0f6d      	lsrs	r5, r5, #29
 8002dd6:	432a      	orrs	r2, r5
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	075a      	lsls	r2, r3, #29
 8002dde:	d004      	beq.n	8002dea <__aeabi_d2f+0x46>
 8002de0:	220f      	movs	r2, #15
 8002de2:	401a      	ands	r2, r3
 8002de4:	2a04      	cmp	r2, #4
 8002de6:	d000      	beq.n	8002dea <__aeabi_d2f+0x46>
 8002de8:	3304      	adds	r3, #4
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	04d2      	lsls	r2, r2, #19
 8002dee:	401a      	ands	r2, r3
 8002df0:	d05a      	beq.n	8002ea8 <__aeabi_d2f+0x104>
 8002df2:	3601      	adds	r6, #1
 8002df4:	2eff      	cmp	r6, #255	; 0xff
 8002df6:	d003      	beq.n	8002e00 <__aeabi_d2f+0x5c>
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	0a5b      	lsrs	r3, r3, #9
 8002dfc:	b2f4      	uxtb	r4, r6
 8002dfe:	e001      	b.n	8002e04 <__aeabi_d2f+0x60>
 8002e00:	24ff      	movs	r4, #255	; 0xff
 8002e02:	2300      	movs	r3, #0
 8002e04:	0258      	lsls	r0, r3, #9
 8002e06:	05e4      	lsls	r4, r4, #23
 8002e08:	0a40      	lsrs	r0, r0, #9
 8002e0a:	07c9      	lsls	r1, r1, #31
 8002e0c:	4320      	orrs	r0, r4
 8002e0e:	4308      	orrs	r0, r1
 8002e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e12:	2c00      	cmp	r4, #0
 8002e14:	d007      	beq.n	8002e26 <__aeabi_d2f+0x82>
 8002e16:	431d      	orrs	r5, r3
 8002e18:	d0f2      	beq.n	8002e00 <__aeabi_d2f+0x5c>
 8002e1a:	2080      	movs	r0, #128	; 0x80
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	0480      	lsls	r0, r0, #18
 8002e20:	4303      	orrs	r3, r0
 8002e22:	26ff      	movs	r6, #255	; 0xff
 8002e24:	e7da      	b.n	8002ddc <__aeabi_d2f+0x38>
 8002e26:	432b      	orrs	r3, r5
 8002e28:	d003      	beq.n	8002e32 <__aeabi_d2f+0x8e>
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	08db      	lsrs	r3, r3, #3
 8002e2e:	2cff      	cmp	r4, #255	; 0xff
 8002e30:	d003      	beq.n	8002e3a <__aeabi_d2f+0x96>
 8002e32:	025b      	lsls	r3, r3, #9
 8002e34:	0a5b      	lsrs	r3, r3, #9
 8002e36:	b2e4      	uxtb	r4, r4
 8002e38:	e7e4      	b.n	8002e04 <__aeabi_d2f+0x60>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d032      	beq.n	8002ea4 <__aeabi_d2f+0x100>
 8002e3e:	2080      	movs	r0, #128	; 0x80
 8002e40:	03c0      	lsls	r0, r0, #15
 8002e42:	4303      	orrs	r3, r0
 8002e44:	025b      	lsls	r3, r3, #9
 8002e46:	0a5b      	lsrs	r3, r3, #9
 8002e48:	e7dc      	b.n	8002e04 <__aeabi_d2f+0x60>
 8002e4a:	0032      	movs	r2, r6
 8002e4c:	3217      	adds	r2, #23
 8002e4e:	db14      	blt.n	8002e7a <__aeabi_d2f+0xd6>
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	271e      	movs	r7, #30
 8002e54:	0412      	lsls	r2, r2, #16
 8002e56:	4313      	orrs	r3, r2
 8002e58:	1bbf      	subs	r7, r7, r6
 8002e5a:	2f1f      	cmp	r7, #31
 8002e5c:	dc0f      	bgt.n	8002e7e <__aeabi_d2f+0xda>
 8002e5e:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <__aeabi_d2f+0x10c>)
 8002e60:	4694      	mov	ip, r2
 8002e62:	4464      	add	r4, ip
 8002e64:	002a      	movs	r2, r5
 8002e66:	40a5      	lsls	r5, r4
 8002e68:	002e      	movs	r6, r5
 8002e6a:	40a3      	lsls	r3, r4
 8002e6c:	1e75      	subs	r5, r6, #1
 8002e6e:	41ae      	sbcs	r6, r5
 8002e70:	40fa      	lsrs	r2, r7
 8002e72:	4333      	orrs	r3, r6
 8002e74:	4313      	orrs	r3, r2
 8002e76:	2600      	movs	r6, #0
 8002e78:	e7b0      	b.n	8002ddc <__aeabi_d2f+0x38>
 8002e7a:	2400      	movs	r4, #0
 8002e7c:	e7d5      	b.n	8002e2a <__aeabi_d2f+0x86>
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4252      	negs	r2, r2
 8002e82:	1b96      	subs	r6, r2, r6
 8002e84:	001a      	movs	r2, r3
 8002e86:	40f2      	lsrs	r2, r6
 8002e88:	2f20      	cmp	r7, #32
 8002e8a:	d009      	beq.n	8002ea0 <__aeabi_d2f+0xfc>
 8002e8c:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <__aeabi_d2f+0x110>)
 8002e8e:	4684      	mov	ip, r0
 8002e90:	4464      	add	r4, ip
 8002e92:	40a3      	lsls	r3, r4
 8002e94:	432b      	orrs	r3, r5
 8002e96:	1e5d      	subs	r5, r3, #1
 8002e98:	41ab      	sbcs	r3, r5
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	e79d      	b.n	8002ddc <__aeabi_d2f+0x38>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e7f7      	b.n	8002e94 <__aeabi_d2f+0xf0>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e7ad      	b.n	8002e04 <__aeabi_d2f+0x60>
 8002ea8:	0034      	movs	r4, r6
 8002eaa:	e7bf      	b.n	8002e2c <__aeabi_d2f+0x88>
 8002eac:	fffffc80 	.word	0xfffffc80
 8002eb0:	fffffc82 	.word	0xfffffc82
 8002eb4:	fffffca2 	.word	0xfffffca2

08002eb8 <__clzsi2>:
 8002eb8:	211c      	movs	r1, #28
 8002eba:	2301      	movs	r3, #1
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	4298      	cmp	r0, r3
 8002ec0:	d301      	bcc.n	8002ec6 <__clzsi2+0xe>
 8002ec2:	0c00      	lsrs	r0, r0, #16
 8002ec4:	3910      	subs	r1, #16
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	4298      	cmp	r0, r3
 8002eca:	d301      	bcc.n	8002ed0 <__clzsi2+0x18>
 8002ecc:	0a00      	lsrs	r0, r0, #8
 8002ece:	3908      	subs	r1, #8
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	4298      	cmp	r0, r3
 8002ed4:	d301      	bcc.n	8002eda <__clzsi2+0x22>
 8002ed6:	0900      	lsrs	r0, r0, #4
 8002ed8:	3904      	subs	r1, #4
 8002eda:	a202      	add	r2, pc, #8	; (adr r2, 8002ee4 <__clzsi2+0x2c>)
 8002edc:	5c10      	ldrb	r0, [r2, r0]
 8002ede:	1840      	adds	r0, r0, r1
 8002ee0:	4770      	bx	lr
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	02020304 	.word	0x02020304
 8002ee8:	01010101 	.word	0x01010101
	...

08002ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002ef8:	f000 ff38 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8002efc:	21fa      	movs	r1, #250	; 0xfa
 8002efe:	0089      	lsls	r1, r1, #2
 8002f00:	f7fd f914 	bl	800012c <__udivsi3>
 8002f04:	f000 fab4 	bl	8003470 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002f08:	2001      	movs	r0, #1
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	0021      	movs	r1, r4
 8002f0e:	4240      	negs	r0, r0
 8002f10:	f000 fa74 	bl	80033fc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002f14:	2000      	movs	r0, #0
 8002f16:	bd10      	pop	{r4, pc}

08002f18 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f18:	2310      	movs	r3, #16
 8002f1a:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <HAL_Init+0x1c>)
{
 8002f1c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f1e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f20:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f22:	430b      	orrs	r3, r1
 8002f24:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f26:	f7ff ffe5 	bl	8002ef4 <HAL_InitTick>
  HAL_MspInit();
 8002f2a:	f002 fac5 	bl	80054b8 <HAL_MspInit>
}
 8002f2e:	2000      	movs	r0, #0
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	40022000 	.word	0x40022000

08002f38 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002f38:	4a02      	ldr	r2, [pc, #8]	; (8002f44 <HAL_IncTick+0xc>)
 8002f3a:	6813      	ldr	r3, [r2, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]
}
 8002f40:	4770      	bx	lr
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	20000144 	.word	0x20000144

08002f48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f48:	4b01      	ldr	r3, [pc, #4]	; (8002f50 <HAL_GetTick+0x8>)
 8002f4a:	6818      	ldr	r0, [r3, #0]
}
 8002f4c:	4770      	bx	lr
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	20000144 	.word	0x20000144

08002f54 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002f54:	2300      	movs	r3, #0
{
 8002f56:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f58:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8002f5a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f5c:	6803      	ldr	r3, [r0, #0]
{
 8002f5e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	400a      	ands	r2, r1
 8002f64:	2a01      	cmp	r2, #1
 8002f66:	d107      	bne.n	8002f78 <ADC_Enable+0x24>
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	4211      	tst	r1, r2
 8002f6c:	d001      	beq.n	8002f72 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f6e:	2000      	movs	r0, #0
}
 8002f70:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	0412      	lsls	r2, r2, #16
 8002f76:	d4fa      	bmi.n	8002f6e <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <ADC_Enable+0x8c>)
 8002f7c:	4211      	tst	r1, r2
 8002f7e:	d008      	beq.n	8002f92 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f80:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f82:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002f86:	4313      	orrs	r3, r2
 8002f88:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f8c:	4303      	orrs	r3, r0
 8002f8e:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8002f90:	e7ee      	b.n	8002f70 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8002f92:	2201      	movs	r2, #1
 8002f94:	6899      	ldr	r1, [r3, #8]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <ADC_Enable+0x90>)
 8002f9c:	4912      	ldr	r1, [pc, #72]	; (8002fe8 <ADC_Enable+0x94>)
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	f7fd f8c4 	bl	800012c <__udivsi3>
 8002fa4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8002fa6:	9b01      	ldr	r3, [sp, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d115      	bne.n	8002fd8 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8002fac:	f7ff ffcc 	bl	8002f48 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fb0:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8002fb2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	422b      	tst	r3, r5
 8002fba:	d1d8      	bne.n	8002f6e <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fbc:	f7ff ffc4 	bl	8002f48 <HAL_GetTick>
 8002fc0:	1b80      	subs	r0, r0, r6
 8002fc2:	2802      	cmp	r0, #2
 8002fc4:	d9f6      	bls.n	8002fb4 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8002fca:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002fd2:	432b      	orrs	r3, r5
 8002fd4:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8002fd6:	e7cb      	b.n	8002f70 <ADC_Enable+0x1c>
      wait_loop_index--;
 8002fd8:	9b01      	ldr	r3, [sp, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	e7e2      	b.n	8002fa6 <ADC_Enable+0x52>
 8002fe0:	80000017 	.word	0x80000017
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	000f4240 	.word	0x000f4240

08002fec <HAL_ADC_Init>:
{
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002ff0:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002ff2:	2c00      	cmp	r4, #0
 8002ff4:	d072      	beq.n	80030dc <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002ffc:	0022      	movs	r2, r4
 8002ffe:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8003000:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8003002:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003004:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8003006:	f002 fa75 	bl	80054f4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800300a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800300c:	06db      	lsls	r3, r3, #27
 800300e:	d500      	bpl.n	8003012 <HAL_ADC_Init+0x26>
 8003010:	e079      	b.n	8003106 <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003012:	2204      	movs	r2, #4
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	6898      	ldr	r0, [r3, #8]
 8003018:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800301a:	d000      	beq.n	800301e <HAL_ADC_Init+0x32>
 800301c:	e073      	b.n	8003106 <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800301e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003020:	4942      	ldr	r1, [pc, #264]	; (800312c <HAL_ADC_Init+0x140>)
 8003022:	4011      	ands	r1, r2
 8003024:	2202      	movs	r2, #2
 8003026:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003028:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800302a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	400a      	ands	r2, r1
 8003030:	2a01      	cmp	r2, #1
 8003032:	d000      	beq.n	8003036 <HAL_ADC_Init+0x4a>
 8003034:	e06d      	b.n	8003112 <HAL_ADC_Init+0x126>
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	4211      	tst	r1, r2
 800303a:	d102      	bne.n	8003042 <HAL_ADC_Init+0x56>
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	0412      	lsls	r2, r2, #16
 8003040:	d567      	bpl.n	8003112 <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	493a      	ldr	r1, [pc, #232]	; (8003130 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8003046:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003048:	400a      	ands	r2, r1
 800304a:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800304c:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800304e:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8003050:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8003052:	69e2      	ldr	r2, [r4, #28]
 8003054:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8003056:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8003058:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800305a:	3a01      	subs	r2, #1
 800305c:	1e56      	subs	r6, r2, #1
 800305e:	41b2      	sbcs	r2, r6
 8003060:	0316      	lsls	r6, r2, #12
 8003062:	68e2      	ldr	r2, [r4, #12]
 8003064:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8003066:	6922      	ldr	r2, [r4, #16]
 8003068:	430f      	orrs	r7, r1
 800306a:	2a02      	cmp	r2, #2
 800306c:	d100      	bne.n	8003070 <HAL_ADC_Init+0x84>
 800306e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8003070:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003072:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8003074:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8003076:	433a      	orrs	r2, r7
 8003078:	4332      	orrs	r2, r6
 800307a:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800307c:	2901      	cmp	r1, #1
 800307e:	d104      	bne.n	800308a <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003080:	2d00      	cmp	r5, #0
 8003082:	d12c      	bne.n	80030de <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	0249      	lsls	r1, r1, #9
 8003088:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800308a:	20c2      	movs	r0, #194	; 0xc2
 800308c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800308e:	30ff      	adds	r0, #255	; 0xff
 8003090:	4281      	cmp	r1, r0
 8003092:	d002      	beq.n	800309a <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003094:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003096:	4301      	orrs	r1, r0
 8003098:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800309a:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800309c:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800309e:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80030a0:	4311      	orrs	r1, r2
 80030a2:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80030a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80030a6:	4281      	cmp	r1, r0
 80030a8:	d002      	beq.n	80030b0 <HAL_ADC_Init+0xc4>
 80030aa:	1e48      	subs	r0, r1, #1
 80030ac:	2806      	cmp	r0, #6
 80030ae:	d807      	bhi.n	80030c0 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80030b0:	2507      	movs	r5, #7
 80030b2:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80030b4:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80030b6:	43a8      	bics	r0, r5
 80030b8:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80030ba:	6958      	ldr	r0, [r3, #20]
 80030bc:	4301      	orrs	r1, r0
 80030be:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	491c      	ldr	r1, [pc, #112]	; (8003134 <HAL_ADC_Init+0x148>)
 80030c4:	400b      	ands	r3, r1
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d111      	bne.n	80030ee <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80030ca:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80030cc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80030ce:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80030d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030d2:	4393      	bics	r3, r2
 80030d4:	001a      	movs	r2, r3
 80030d6:	2301      	movs	r3, #1
 80030d8:	4313      	orrs	r3, r2
 80030da:	6463      	str	r3, [r4, #68]	; 0x44
}
 80030dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030de:	2020      	movs	r0, #32
 80030e0:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80030e2:	4328      	orrs	r0, r5
 80030e4:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80030e8:	4301      	orrs	r1, r0
 80030ea:	64a1      	str	r1, [r4, #72]	; 0x48
 80030ec:	e7cd      	b.n	800308a <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 80030ee:	2212      	movs	r2, #18
 80030f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f2:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80030f4:	4393      	bics	r3, r2
 80030f6:	001a      	movs	r2, r3
 80030f8:	2310      	movs	r3, #16
 80030fa:	4313      	orrs	r3, r2
 80030fc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003100:	4303      	orrs	r3, r0
 8003102:	64a3      	str	r3, [r4, #72]	; 0x48
 8003104:	e7ea      	b.n	80030dc <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003106:	2310      	movs	r3, #16
 8003108:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800310a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310c:	4313      	orrs	r3, r2
 800310e:	6463      	str	r3, [r4, #68]	; 0x44
 8003110:	e7e4      	b.n	80030dc <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8003112:	2118      	movs	r1, #24
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	438a      	bics	r2, r1
 8003118:	68a1      	ldr	r1, [r4, #8]
 800311a:	430a      	orrs	r2, r1
 800311c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800311e:	6919      	ldr	r1, [r3, #16]
 8003120:	6862      	ldr	r2, [r4, #4]
 8003122:	0089      	lsls	r1, r1, #2
 8003124:	0889      	lsrs	r1, r1, #2
 8003126:	4311      	orrs	r1, r2
 8003128:	6119      	str	r1, [r3, #16]
 800312a:	e78a      	b.n	8003042 <HAL_ADC_Init+0x56>
 800312c:	fffffefd 	.word	0xfffffefd
 8003130:	fffe0219 	.word	0xfffe0219
 8003134:	833fffe7 	.word	0x833fffe7

08003138 <HAL_ADC_Start_DMA>:
{
 8003138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800313a:	6803      	ldr	r3, [r0, #0]
{
 800313c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800313e:	689b      	ldr	r3, [r3, #8]
{
 8003140:	000f      	movs	r7, r1
 8003142:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8003144:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003146:	075b      	lsls	r3, r3, #29
 8003148:	d430      	bmi.n	80031ac <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 800314a:	0026      	movs	r6, r4
 800314c:	3640      	adds	r6, #64	; 0x40
 800314e:	7833      	ldrb	r3, [r6, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d02b      	beq.n	80031ac <HAL_ADC_Start_DMA+0x74>
 8003154:	2301      	movs	r3, #1
 8003156:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003158:	69e3      	ldr	r3, [r4, #28]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d127      	bne.n	80031ae <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 800315e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003160:	4a16      	ldr	r2, [pc, #88]	; (80031bc <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 8003162:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003164:	401a      	ands	r2, r3
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4313      	orrs	r3, r2
 800316c:	6463      	str	r3, [r4, #68]	; 0x44
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800316e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 8003172:	64a5      	str	r5, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8003174:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003176:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800317a:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800317c:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_ADC_Start_DMA+0x90>)
 8003180:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003182:	231c      	movs	r3, #28
 8003184:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003186:	684a      	ldr	r2, [r1, #4]
 8003188:	3b0c      	subs	r3, #12
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800318e:	2301      	movs	r3, #1
 8003190:	68ca      	ldr	r2, [r1, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003196:	003a      	movs	r2, r7
 8003198:	3140      	adds	r1, #64	; 0x40
 800319a:	9b01      	ldr	r3, [sp, #4]
 800319c:	f000 f9cc 	bl	8003538 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80031a0:	2304      	movs	r3, #4
 80031a2:	0028      	movs	r0, r5
 80031a4:	6822      	ldr	r2, [r4, #0]
 80031a6:	6891      	ldr	r1, [r2, #8]
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6093      	str	r3, [r2, #8]
}
 80031ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80031ae:	0020      	movs	r0, r4
 80031b0:	f7ff fed0 	bl	8002f54 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d1f9      	bne.n	80031ac <HAL_ADC_Start_DMA+0x74>
 80031b8:	e7d1      	b.n	800315e <HAL_ADC_Start_DMA+0x26>
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	fffff0fe 	.word	0xfffff0fe
 80031c0:	080031d1 	.word	0x080031d1
 80031c4:	08003243 	.word	0x08003243
 80031c8:	0800324f 	.word	0x0800324f

080031cc <HAL_ADC_ConvCpltCallback>:
 80031cc:	4770      	bx	lr
	...

080031d0 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031d0:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80031d4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031d6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80031d8:	4211      	tst	r1, r2
 80031da:	d12a      	bne.n	8003232 <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031dc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80031de:	32b1      	adds	r2, #177	; 0xb1
 80031e0:	32ff      	adds	r2, #255	; 0xff
 80031e2:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031e4:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	0109      	lsls	r1, r1, #4
 80031ec:	68d0      	ldr	r0, [r2, #12]
 80031ee:	4208      	tst	r0, r1
 80031f0:	d112      	bne.n	8003218 <ADC_DMAConvCplt+0x48>
 80031f2:	6a19      	ldr	r1, [r3, #32]
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d10f      	bne.n	8003218 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80031f8:	6811      	ldr	r1, [r2, #0]
 80031fa:	0709      	lsls	r1, r1, #28
 80031fc:	d50c      	bpl.n	8003218 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031fe:	6891      	ldr	r1, [r2, #8]
 8003200:	0749      	lsls	r1, r1, #29
 8003202:	d40d      	bmi.n	8003220 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003204:	200c      	movs	r0, #12
 8003206:	6851      	ldr	r1, [r2, #4]
 8003208:	4381      	bics	r1, r0
 800320a:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800320c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320e:	490b      	ldr	r1, [pc, #44]	; (800323c <ADC_DMAConvCplt+0x6c>)
 8003210:	4011      	ands	r1, r2
 8003212:	2201      	movs	r2, #1
 8003214:	430a      	orrs	r2, r1
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff ffd7 	bl	80031cc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800321e:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003220:	2220      	movs	r2, #32
 8003222:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003224:	430a      	orrs	r2, r1
 8003226:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003228:	2201      	movs	r2, #1
 800322a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800322c:	430a      	orrs	r2, r1
 800322e:	649a      	str	r2, [r3, #72]	; 0x48
 8003230:	e7f2      	b.n	8003218 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4798      	blx	r3
}
 8003238:	e7f1      	b.n	800321e <ADC_DMAConvCplt+0x4e>
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	fffffefe 	.word	0xfffffefe

08003240 <HAL_ADC_ConvHalfCpltCallback>:
 8003240:	4770      	bx	lr

08003242 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003242:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003244:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003246:	f7ff fffb 	bl	8003240 <HAL_ADC_ConvHalfCpltCallback>
}
 800324a:	bd10      	pop	{r4, pc}

0800324c <HAL_ADC_ErrorCallback>:
}
 800324c:	4770      	bx	lr

0800324e <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800324e:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003250:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003252:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003256:	4313      	orrs	r3, r2
 8003258:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800325a:	2304      	movs	r3, #4
 800325c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800325e:	4313      	orrs	r3, r2
 8003260:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8003262:	f7ff fff3 	bl	800324c <HAL_ADC_ErrorCallback>
}
 8003266:	bd10      	pop	{r4, pc}

08003268 <HAL_ADC_ConfigChannel>:
{
 8003268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 800326a:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 800326c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800326e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003270:	3440      	adds	r4, #64	; 0x40
 8003272:	7823      	ldrb	r3, [r4, #0]
{
 8003274:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8003276:	2002      	movs	r0, #2
 8003278:	2b01      	cmp	r3, #1
 800327a:	d02b      	beq.n	80032d4 <HAL_ADC_ConfigChannel+0x6c>
 800327c:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800327e:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003280:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003282:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8003284:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003286:	0740      	lsls	r0, r0, #29
 8003288:	d452      	bmi.n	8003330 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 800328a:	482c      	ldr	r0, [pc, #176]	; (800333c <HAL_ADC_ConfigChannel+0xd4>)
 800328c:	684f      	ldr	r7, [r1, #4]
 800328e:	680d      	ldr	r5, [r1, #0]
 8003290:	4287      	cmp	r7, r0
 8003292:	d03b      	beq.n	800330c <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003294:	40ab      	lsls	r3, r5
 8003296:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003298:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800329a:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800329c:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800329e:	4338      	orrs	r0, r7
 80032a0:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032a2:	429e      	cmp	r6, r3
 80032a4:	d00f      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x5e>
 80032a6:	3e01      	subs	r6, #1
 80032a8:	2e06      	cmp	r6, #6
 80032aa:	d90c      	bls.n	80032c6 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80032ac:	688b      	ldr	r3, [r1, #8]
 80032ae:	2107      	movs	r1, #7
 80032b0:	6950      	ldr	r0, [r2, #20]
 80032b2:	4008      	ands	r0, r1
 80032b4:	4283      	cmp	r3, r0
 80032b6:	d006      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032b8:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80032ba:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032bc:	4388      	bics	r0, r1
 80032be:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80032c0:	6950      	ldr	r0, [r2, #20]
 80032c2:	4303      	orrs	r3, r0
 80032c4:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032c6:	002b      	movs	r3, r5
 80032c8:	3b10      	subs	r3, #16
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d903      	bls.n	80032d6 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ce:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80032d0:	2300      	movs	r3, #0
 80032d2:	7023      	strb	r3, [r4, #0]
}
 80032d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <HAL_ADC_ConfigChannel+0xd8>)
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	2d10      	cmp	r5, #16
 80032de:	d013      	beq.n	8003308 <HAL_ADC_ConfigChannel+0xa0>
 80032e0:	03d2      	lsls	r2, r2, #15
 80032e2:	430a      	orrs	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032e6:	2d10      	cmp	r5, #16
 80032e8:	d1f1      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ea:	4b16      	ldr	r3, [pc, #88]	; (8003344 <HAL_ADC_ConfigChannel+0xdc>)
 80032ec:	4916      	ldr	r1, [pc, #88]	; (8003348 <HAL_ADC_ConfigChannel+0xe0>)
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	f7fc ff1c 	bl	800012c <__udivsi3>
 80032f4:	230a      	movs	r3, #10
 80032f6:	4358      	muls	r0, r3
 80032f8:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80032fa:	9b01      	ldr	r3, [sp, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0e6      	beq.n	80032ce <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8003300:	9b01      	ldr	r3, [sp, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	e7f8      	b.n	80032fa <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003308:	0412      	lsls	r2, r2, #16
 800330a:	e7ea      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800330c:	40ab      	lsls	r3, r5
 800330e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003310:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003312:	002b      	movs	r3, r5
 8003314:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003316:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003318:	2b01      	cmp	r3, #1
 800331a:	d8d8      	bhi.n	80032ce <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_ADC_ConfigChannel+0xd8>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	2d10      	cmp	r5, #16
 8003322:	d003      	beq.n	800332c <HAL_ADC_ConfigChannel+0xc4>
 8003324:	4909      	ldr	r1, [pc, #36]	; (800334c <HAL_ADC_ConfigChannel+0xe4>)
 8003326:	400a      	ands	r2, r1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e7d0      	b.n	80032ce <HAL_ADC_ConfigChannel+0x66>
 800332c:	4908      	ldr	r1, [pc, #32]	; (8003350 <HAL_ADC_ConfigChannel+0xe8>)
 800332e:	e7fa      	b.n	8003326 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003330:	2220      	movs	r2, #32
 8003332:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8003334:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003336:	430a      	orrs	r2, r1
 8003338:	646a      	str	r2, [r5, #68]	; 0x44
 800333a:	e7c9      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x68>
 800333c:	00001001 	.word	0x00001001
 8003340:	40012708 	.word	0x40012708
 8003344:	20000000 	.word	0x20000000
 8003348:	000f4240 	.word	0x000f4240
 800334c:	ffbfffff 	.word	0xffbfffff
 8003350:	ff7fffff 	.word	0xff7fffff

08003354 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003356:	0006      	movs	r6, r0
 8003358:	3640      	adds	r6, #64	; 0x40
 800335a:	7833      	ldrb	r3, [r6, #0]
{
 800335c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800335e:	2002      	movs	r0, #2
 8003360:	2b01      	cmp	r3, #1
 8003362:	d042      	beq.n	80033ea <HAL_ADCEx_Calibration_Start+0x96>
 8003364:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003366:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8003368:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	400a      	ands	r2, r1
 8003370:	2a01      	cmp	r2, #1
 8003372:	d105      	bne.n	8003380 <HAL_ADCEx_Calibration_Start+0x2c>
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	4211      	tst	r1, r2
 8003378:	d138      	bne.n	80033ec <HAL_ADCEx_Calibration_Start+0x98>
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	0412      	lsls	r2, r2, #16
 800337e:	d435      	bmi.n	80033ec <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003380:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003382:	491d      	ldr	r1, [pc, #116]	; (80033f8 <HAL_ADCEx_Calibration_Start+0xa4>)
 8003384:	4011      	ands	r1, r2
 8003386:	2202      	movs	r2, #2
 8003388:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800338a:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800338c:	6462      	str	r2, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800338e:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	438a      	bics	r2, r1
 8003394:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	0612      	lsls	r2, r2, #24
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80033a0:	f7ff fdd2 	bl	8002f48 <HAL_GetTick>
 80033a4:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	2a00      	cmp	r2, #0
 80033ac:	db0e      	blt.n	80033cc <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80033ae:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80033b0:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80033b2:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80033b4:	430d      	orrs	r5, r1
 80033b6:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ba:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 80033bc:	4393      	bics	r3, r2
 80033be:	001a      	movs	r2, r3
 80033c0:	2301      	movs	r3, #1
 80033c2:	4313      	orrs	r3, r2
 80033c4:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c6:	2300      	movs	r3, #0
 80033c8:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 80033ca:	e00e      	b.n	80033ea <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80033cc:	f7ff fdbc 	bl	8002f48 <HAL_GetTick>
 80033d0:	1bc0      	subs	r0, r0, r7
 80033d2:	2802      	cmp	r0, #2
 80033d4:	d9e7      	bls.n	80033a6 <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 80033d6:	2212      	movs	r2, #18
 80033d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80033da:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80033dc:	4393      	bics	r3, r2
 80033de:	001a      	movs	r2, r3
 80033e0:	2310      	movs	r3, #16
 80033e2:	4313      	orrs	r3, r2
 80033e4:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80033e6:	2300      	movs	r3, #0
 80033e8:	7033      	strb	r3, [r6, #0]
}
 80033ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	2320      	movs	r3, #32
 80033ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80033f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f2:	4313      	orrs	r3, r2
 80033f4:	6463      	str	r3, [r4, #68]	; 0x44
 80033f6:	e7e6      	b.n	80033c6 <HAL_ADCEx_Calibration_Start+0x72>
 80033f8:	fffffefd 	.word	0xfffffefd

080033fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003400:	2800      	cmp	r0, #0
 8003402:	da14      	bge.n	800342e <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003404:	230f      	movs	r3, #15
 8003406:	b2c0      	uxtb	r0, r0
 8003408:	4003      	ands	r3, r0
 800340a:	3b08      	subs	r3, #8
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <HAL_NVIC_SetPriority+0x58>)
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	189b      	adds	r3, r3, r2
 8003414:	2203      	movs	r2, #3
 8003416:	4010      	ands	r0, r2
 8003418:	4090      	lsls	r0, r2
 800341a:	32fc      	adds	r2, #252	; 0xfc
 800341c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800341e:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003420:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003422:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003424:	69dc      	ldr	r4, [r3, #28]
 8003426:	43ac      	bics	r4, r5
 8003428:	4321      	orrs	r1, r4
 800342a:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800342c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800342e:	2503      	movs	r5, #3
 8003430:	0883      	lsrs	r3, r0, #2
 8003432:	4028      	ands	r0, r5
 8003434:	40a8      	lsls	r0, r5
 8003436:	35fc      	adds	r5, #252	; 0xfc
 8003438:	002e      	movs	r6, r5
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <HAL_NVIC_SetPriority+0x5c>)
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	189b      	adds	r3, r3, r2
 8003440:	22c0      	movs	r2, #192	; 0xc0
 8003442:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003444:	4029      	ands	r1, r5
 8003446:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003448:	0092      	lsls	r2, r2, #2
 800344a:	589c      	ldr	r4, [r3, r2]
 800344c:	43b4      	bics	r4, r6
 800344e:	4321      	orrs	r1, r4
 8003450:	5099      	str	r1, [r3, r2]
 8003452:	e7eb      	b.n	800342c <HAL_NVIC_SetPriority+0x30>
 8003454:	e000ed00 	.word	0xe000ed00
 8003458:	e000e100 	.word	0xe000e100

0800345c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800345c:	231f      	movs	r3, #31
 800345e:	4018      	ands	r0, r3
 8003460:	3b1e      	subs	r3, #30
 8003462:	4083      	lsls	r3, r0
 8003464:	4a01      	ldr	r2, [pc, #4]	; (800346c <HAL_NVIC_EnableIRQ+0x10>)
 8003466:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003468:	4770      	bx	lr
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	e000e100 	.word	0xe000e100

08003470 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003470:	4a09      	ldr	r2, [pc, #36]	; (8003498 <HAL_SYSTICK_Config+0x28>)
 8003472:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8003474:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003476:	4293      	cmp	r3, r2
 8003478:	d80d      	bhi.n	8003496 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800347a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347c:	4a07      	ldr	r2, [pc, #28]	; (800349c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800347e:	4808      	ldr	r0, [pc, #32]	; (80034a0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003480:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003482:	6a03      	ldr	r3, [r0, #32]
 8003484:	0609      	lsls	r1, r1, #24
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	430b      	orrs	r3, r1
 800348c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800348e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003490:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003492:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003494:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003496:	4770      	bx	lr
 8003498:	00ffffff 	.word	0x00ffffff
 800349c:	e000e010 	.word	0xe000e010
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80034a6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80034a8:	2804      	cmp	r0, #4
 80034aa:	d102      	bne.n	80034b2 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80034ac:	4310      	orrs	r0, r2
 80034ae:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80034b0:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80034b2:	2104      	movs	r1, #4
 80034b4:	438a      	bics	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
}
 80034b8:	e7fa      	b.n	80034b0 <HAL_SYSTICK_CLKSourceConfig+0xc>
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80034c0:	4770      	bx	lr

080034c2 <HAL_SYSTICK_IRQHandler>:
{
 80034c2:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80034c4:	f7ff fffc 	bl	80034c0 <HAL_SYSTICK_Callback>
}
 80034c8:	bd10      	pop	{r4, pc}
	...

080034cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 80034d0:	2001      	movs	r0, #1
  if(NULL == hdma)
 80034d2:	2c00      	cmp	r4, #0
 80034d4:	d028      	beq.n	8003528 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034d6:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034d8:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80034da:	1ca5      	adds	r5, r4, #2
 80034dc:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 80034de:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034e2:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034e4:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80034e6:	6863      	ldr	r3, [r4, #4]
 80034e8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ea:	68e1      	ldr	r1, [r4, #12]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6921      	ldr	r1, [r4, #16]
 80034f0:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	6961      	ldr	r1, [r4, #20]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	69a1      	ldr	r1, [r4, #24]
 80034f8:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80034fa:	69e1      	ldr	r1, [r4, #28]
 80034fc:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80034fe:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003500:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_DMA_Init+0x64>)
 8003504:	2114      	movs	r1, #20
 8003506:	18c0      	adds	r0, r0, r3
 8003508:	f7fc fe10 	bl	800012c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800350e:	0080      	lsls	r0, r0, #2
 8003510:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003512:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8003514:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003516:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8003518:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800351a:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800351c:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800351e:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003520:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8003522:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8003524:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003526:	77e0      	strb	r0, [r4, #31]
}  
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	ffffc00f 	.word	0xffffc00f
 8003530:	bffdfff8 	.word	0xbffdfff8
 8003534:	40020000 	.word	0x40020000

08003538 <HAL_DMA_Start_IT>:
{
 8003538:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800353a:	1c46      	adds	r6, r0, #1
 800353c:	7ff5      	ldrb	r5, [r6, #31]
 800353e:	2402      	movs	r4, #2
 8003540:	2d01      	cmp	r5, #1
 8003542:	d026      	beq.n	8003592 <HAL_DMA_Start_IT+0x5a>
 8003544:	2501      	movs	r5, #1
 8003546:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003548:	1905      	adds	r5, r0, r4
 800354a:	46ac      	mov	ip, r5
 800354c:	7fed      	ldrb	r5, [r5, #31]
 800354e:	2700      	movs	r7, #0
 8003550:	b2ed      	uxtb	r5, r5
 8003552:	2d01      	cmp	r5, #1
 8003554:	d129      	bne.n	80035aa <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003556:	4666      	mov	r6, ip
 8003558:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800355a:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355c:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800355e:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003560:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003562:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003564:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003566:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003568:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800356a:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800356c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800356e:	6843      	ldr	r3, [r0, #4]
 8003570:	6805      	ldr	r5, [r0, #0]
 8003572:	2b10      	cmp	r3, #16
 8003574:	d10f      	bne.n	8003596 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8003576:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003578:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800357a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800357c:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003582:	230e      	movs	r3, #14
 8003584:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003586:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003588:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 800358a:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800358c:	682a      	ldr	r2, [r5, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	602b      	str	r3, [r5, #0]
} 
 8003592:	0020      	movs	r0, r4
 8003594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8003596:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8003598:	60e2      	str	r2, [r4, #12]
 800359a:	e7ee      	b.n	800357a <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800359c:	230a      	movs	r3, #10
 800359e:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035a0:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80035a2:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	4393      	bics	r3, r2
 80035a8:	e7ed      	b.n	8003586 <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 80035aa:	77f7      	strb	r7, [r6, #31]
 80035ac:	e7f1      	b.n	8003592 <HAL_DMA_Start_IT+0x5a>

080035ae <HAL_DMA_Abort_IT>:
{  
 80035ae:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035b0:	1c84      	adds	r4, r0, #2
 80035b2:	7fe3      	ldrb	r3, [r4, #31]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d004      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b8:	2304      	movs	r3, #4
 80035ba:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80035bc:	3b03      	subs	r3, #3
}
 80035be:	0018      	movs	r0, r3
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035c2:	210e      	movs	r1, #14
 80035c4:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035c6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	438a      	bics	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035ce:	2201      	movs	r2, #1
 80035d0:	6819      	ldr	r1, [r3, #0]
 80035d2:	4391      	bics	r1, r2
 80035d4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035d6:	0011      	movs	r1, r2
 80035d8:	40a9      	lsls	r1, r5
 80035da:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80035dc:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80035de:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80035e0:	2400      	movs	r4, #0
 80035e2:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 80035e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80035e6:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80035e8:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80035ea:	42a2      	cmp	r2, r4
 80035ec:	d0e7      	beq.n	80035be <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80035ee:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	0023      	movs	r3, r4
 80035f2:	e7e4      	b.n	80035be <HAL_DMA_Abort_IT+0x10>

080035f4 <HAL_DMA_IRQHandler>:
{
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80035f6:	2704      	movs	r7, #4
 80035f8:	003e      	movs	r6, r7
 80035fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80035fe:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003600:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003602:	6803      	ldr	r3, [r0, #0]
 8003604:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003606:	422e      	tst	r6, r5
 8003608:	d00d      	beq.n	8003626 <HAL_DMA_IRQHandler+0x32>
 800360a:	423c      	tst	r4, r7
 800360c:	d00b      	beq.n	8003626 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	0689      	lsls	r1, r1, #26
 8003612:	d402      	bmi.n	800361a <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	43b9      	bics	r1, r7
 8003618:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800361a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800361c:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800361e:	2b00      	cmp	r3, #0
 8003620:	d019      	beq.n	8003656 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8003622:	4798      	blx	r3
}  
 8003624:	e017      	b.n	8003656 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003626:	2702      	movs	r7, #2
 8003628:	003e      	movs	r6, r7
 800362a:	408e      	lsls	r6, r1
 800362c:	422e      	tst	r6, r5
 800362e:	d013      	beq.n	8003658 <HAL_DMA_IRQHandler+0x64>
 8003630:	423c      	tst	r4, r7
 8003632:	d011      	beq.n	8003658 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	0689      	lsls	r1, r1, #26
 8003638:	d406      	bmi.n	8003648 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800363a:	240a      	movs	r4, #10
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	43a1      	bics	r1, r4
 8003640:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8003642:	2101      	movs	r1, #1
 8003644:	19c3      	adds	r3, r0, r7
 8003646:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003648:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 800364a:	2200      	movs	r2, #0
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8003650:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8003652:	4293      	cmp	r3, r2
 8003654:	d1e5      	bne.n	8003622 <HAL_DMA_IRQHandler+0x2e>
}  
 8003656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003658:	2608      	movs	r6, #8
 800365a:	0037      	movs	r7, r6
 800365c:	408f      	lsls	r7, r1
 800365e:	423d      	tst	r5, r7
 8003660:	d0f9      	beq.n	8003656 <HAL_DMA_IRQHandler+0x62>
 8003662:	4234      	tst	r4, r6
 8003664:	d0f7      	beq.n	8003656 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003666:	250e      	movs	r5, #14
 8003668:	681c      	ldr	r4, [r3, #0]
 800366a:	43ac      	bics	r4, r5
 800366c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800366e:	2301      	movs	r3, #1
 8003670:	001c      	movs	r4, r3
 8003672:	408c      	lsls	r4, r1
 8003674:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8003676:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003678:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800367a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 800367c:	2200      	movs	r2, #0
 800367e:	18c3      	adds	r3, r0, r3
 8003680:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8003682:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003684:	e7e5      	b.n	8003652 <HAL_DMA_IRQHandler+0x5e>
	...

08003688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003688:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800368a:	680b      	ldr	r3, [r1, #0]
{ 
 800368c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800368e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8003690:	2300      	movs	r3, #0
{ 
 8003692:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003694:	9a02      	ldr	r2, [sp, #8]
 8003696:	40da      	lsrs	r2, r3
 8003698:	d101      	bne.n	800369e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800369a:	b007      	add	sp, #28
 800369c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800369e:	2201      	movs	r2, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	9203      	str	r2, [sp, #12]
 80036a4:	9903      	ldr	r1, [sp, #12]
 80036a6:	9a02      	ldr	r2, [sp, #8]
 80036a8:	400a      	ands	r2, r1
 80036aa:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80036ac:	d100      	bne.n	80036b0 <HAL_GPIO_Init+0x28>
 80036ae:	e08c      	b.n	80037ca <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80036b0:	9a01      	ldr	r2, [sp, #4]
 80036b2:	2110      	movs	r1, #16
 80036b4:	6852      	ldr	r2, [r2, #4]
 80036b6:	0016      	movs	r6, r2
 80036b8:	438e      	bics	r6, r1
 80036ba:	2e02      	cmp	r6, #2
 80036bc:	d10e      	bne.n	80036dc <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80036be:	2507      	movs	r5, #7
 80036c0:	401d      	ands	r5, r3
 80036c2:	00ad      	lsls	r5, r5, #2
 80036c4:	3901      	subs	r1, #1
 80036c6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80036c8:	08dc      	lsrs	r4, r3, #3
 80036ca:	00a4      	lsls	r4, r4, #2
 80036cc:	1904      	adds	r4, r0, r4
 80036ce:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80036d0:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80036d2:	9901      	ldr	r1, [sp, #4]
 80036d4:	6909      	ldr	r1, [r1, #16]
 80036d6:	40a9      	lsls	r1, r5
 80036d8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80036da:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80036dc:	2403      	movs	r4, #3
 80036de:	005f      	lsls	r7, r3, #1
 80036e0:	40bc      	lsls	r4, r7
 80036e2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80036e4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036e6:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80036e8:	4025      	ands	r5, r4
 80036ea:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ec:	2503      	movs	r5, #3
 80036ee:	4015      	ands	r5, r2
 80036f0:	40bd      	lsls	r5, r7
 80036f2:	4661      	mov	r1, ip
 80036f4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80036f6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f8:	2e01      	cmp	r6, #1
 80036fa:	d80f      	bhi.n	800371c <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80036fc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80036fe:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003700:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003702:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003704:	40bd      	lsls	r5, r7
 8003706:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003708:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800370a:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800370c:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800370e:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003710:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003712:	2101      	movs	r1, #1
 8003714:	400d      	ands	r5, r1
 8003716:	409d      	lsls	r5, r3
 8003718:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800371a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800371c:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800371e:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003720:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003722:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003724:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003726:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003728:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800372a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800372c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800372e:	420a      	tst	r2, r1
 8003730:	d04b      	beq.n	80037ca <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	2101      	movs	r1, #1
 8003734:	4c26      	ldr	r4, [pc, #152]	; (80037d0 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003736:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003738:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800373a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373c:	430d      	orrs	r5, r1
 800373e:	61a5      	str	r5, [r4, #24]
 8003740:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8003742:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003744:	400c      	ands	r4, r1
 8003746:	9405      	str	r4, [sp, #20]
 8003748:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800374a:	240f      	movs	r4, #15
 800374c:	4921      	ldr	r1, [pc, #132]	; (80037d4 <HAL_GPIO_Init+0x14c>)
 800374e:	00ad      	lsls	r5, r5, #2
 8003750:	00b6      	lsls	r6, r6, #2
 8003752:	186d      	adds	r5, r5, r1
 8003754:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003756:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8003758:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800375c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375e:	2400      	movs	r4, #0
 8003760:	4288      	cmp	r0, r1
 8003762:	d00c      	beq.n	800377e <HAL_GPIO_Init+0xf6>
 8003764:	491c      	ldr	r1, [pc, #112]	; (80037d8 <HAL_GPIO_Init+0x150>)
 8003766:	3401      	adds	r4, #1
 8003768:	4288      	cmp	r0, r1
 800376a:	d008      	beq.n	800377e <HAL_GPIO_Init+0xf6>
 800376c:	491b      	ldr	r1, [pc, #108]	; (80037dc <HAL_GPIO_Init+0x154>)
 800376e:	3401      	adds	r4, #1
 8003770:	4288      	cmp	r0, r1
 8003772:	d004      	beq.n	800377e <HAL_GPIO_Init+0xf6>
 8003774:	491a      	ldr	r1, [pc, #104]	; (80037e0 <HAL_GPIO_Init+0x158>)
 8003776:	3403      	adds	r4, #3
 8003778:	4288      	cmp	r0, r1
 800377a:	d100      	bne.n	800377e <HAL_GPIO_Init+0xf6>
 800377c:	3c02      	subs	r4, #2
 800377e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003780:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003782:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8003784:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8003786:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8003788:	4c16      	ldr	r4, [pc, #88]	; (80037e4 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800378a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800378c:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800378e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003790:	03d1      	lsls	r1, r2, #15
 8003792:	d401      	bmi.n	8003798 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003794:	003e      	movs	r6, r7
 8003796:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8003798:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800379a:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 800379c:	9e00      	ldr	r6, [sp, #0]
 800379e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037a0:	0391      	lsls	r1, r2, #14
 80037a2:	d401      	bmi.n	80037a8 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80037a4:	003e      	movs	r6, r7
 80037a6:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80037a8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80037aa:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80037ac:	9e00      	ldr	r6, [sp, #0]
 80037ae:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b0:	02d1      	lsls	r1, r2, #11
 80037b2:	d401      	bmi.n	80037b8 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80037b4:	003e      	movs	r6, r7
 80037b6:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80037b8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80037ba:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80037bc:	9f00      	ldr	r7, [sp, #0]
 80037be:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037c0:	0292      	lsls	r2, r2, #10
 80037c2:	d401      	bmi.n	80037c8 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80037c4:	402e      	ands	r6, r5
 80037c6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80037c8:	60e7      	str	r7, [r4, #12]
    position++;
 80037ca:	3301      	adds	r3, #1
 80037cc:	e762      	b.n	8003694 <HAL_GPIO_Init+0xc>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010000 	.word	0x40010000
 80037d8:	48000400 	.word	0x48000400
 80037dc:	48000800 	.word	0x48000800
 80037e0:	48000c00 	.word	0x48000c00
 80037e4:	40010400 	.word	0x40010400

080037e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037e8:	6900      	ldr	r0, [r0, #16]
 80037ea:	4008      	ands	r0, r1
 80037ec:	1e41      	subs	r1, r0, #1
 80037ee:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80037f0:	b2c0      	uxtb	r0, r0
  }
 80037f2:	4770      	bx	lr

080037f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037f4:	2a00      	cmp	r2, #0
 80037f6:	d001      	beq.n	80037fc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037f8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037fa:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037fc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80037fe:	e7fc      	b.n	80037fa <HAL_GPIO_WritePin+0x6>

08003800 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003802:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	4210      	tst	r0, r2
 8003808:	d002      	beq.n	8003810 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800380a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800380c:	f001 f9f4 	bl	8004bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003810:	bd10      	pop	{r4, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	40010400 	.word	0x40010400

08003818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381a:	6803      	ldr	r3, [r0, #0]
{
 800381c:	b085      	sub	sp, #20
 800381e:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003820:	07db      	lsls	r3, r3, #31
 8003822:	d42f      	bmi.n	8003884 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	079b      	lsls	r3, r3, #30
 8003828:	d500      	bpl.n	800382c <HAL_RCC_OscConfig+0x14>
 800382a:	e081      	b.n	8003930 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	071b      	lsls	r3, r3, #28
 8003830:	d500      	bpl.n	8003834 <HAL_RCC_OscConfig+0x1c>
 8003832:	e0bc      	b.n	80039ae <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	075b      	lsls	r3, r3, #29
 8003838:	d500      	bpl.n	800383c <HAL_RCC_OscConfig+0x24>
 800383a:	e0df      	b.n	80039fc <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	06db      	lsls	r3, r3, #27
 8003840:	d51a      	bpl.n	8003878 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003842:	696a      	ldr	r2, [r5, #20]
 8003844:	4cb5      	ldr	r4, [pc, #724]	; (8003b1c <HAL_RCC_OscConfig+0x304>)
 8003846:	2304      	movs	r3, #4
 8003848:	2a01      	cmp	r2, #1
 800384a:	d000      	beq.n	800384e <HAL_RCC_OscConfig+0x36>
 800384c:	e14b      	b.n	8003ae6 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800384e:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003850:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003852:	430b      	orrs	r3, r1
 8003854:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003858:	431a      	orrs	r2, r3
 800385a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800385c:	f7ff fb74 	bl	8002f48 <HAL_GetTick>
 8003860:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003864:	4233      	tst	r3, r6
 8003866:	d100      	bne.n	800386a <HAL_RCC_OscConfig+0x52>
 8003868:	e136      	b.n	8003ad8 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800386a:	21f8      	movs	r1, #248	; 0xf8
 800386c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800386e:	69ab      	ldr	r3, [r5, #24]
 8003870:	438a      	bics	r2, r1
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4313      	orrs	r3, r2
 8003876:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003878:	6a29      	ldr	r1, [r5, #32]
 800387a:	2900      	cmp	r1, #0
 800387c:	d000      	beq.n	8003880 <HAL_RCC_OscConfig+0x68>
 800387e:	e159      	b.n	8003b34 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003880:	2000      	movs	r0, #0
 8003882:	e013      	b.n	80038ac <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003884:	210c      	movs	r1, #12
 8003886:	4ca5      	ldr	r4, [pc, #660]	; (8003b1c <HAL_RCC_OscConfig+0x304>)
 8003888:	6862      	ldr	r2, [r4, #4]
 800388a:	400a      	ands	r2, r1
 800388c:	2a04      	cmp	r2, #4
 800388e:	d006      	beq.n	800389e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003890:	6863      	ldr	r3, [r4, #4]
 8003892:	400b      	ands	r3, r1
 8003894:	2b08      	cmp	r3, #8
 8003896:	d10b      	bne.n	80038b0 <HAL_RCC_OscConfig+0x98>
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	03db      	lsls	r3, r3, #15
 800389c:	d508      	bpl.n	80038b0 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	039b      	lsls	r3, r3, #14
 80038a2:	d5bf      	bpl.n	8003824 <HAL_RCC_OscConfig+0xc>
 80038a4:	686b      	ldr	r3, [r5, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1bc      	bne.n	8003824 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80038aa:	2001      	movs	r0, #1
}
 80038ac:	b005      	add	sp, #20
 80038ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b0:	686b      	ldr	r3, [r5, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d113      	bne.n	80038de <HAL_RCC_OscConfig+0xc6>
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	6822      	ldr	r2, [r4, #0]
 80038ba:	025b      	lsls	r3, r3, #9
 80038bc:	4313      	orrs	r3, r2
 80038be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80038c0:	f7ff fb42 	bl	8002f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80038c6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c8:	02b6      	lsls	r6, r6, #10
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	4233      	tst	r3, r6
 80038ce:	d1a9      	bne.n	8003824 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d0:	f7ff fb3a 	bl	8002f48 <HAL_GetTick>
 80038d4:	1bc0      	subs	r0, r0, r7
 80038d6:	2864      	cmp	r0, #100	; 0x64
 80038d8:	d9f7      	bls.n	80038ca <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80038da:	2003      	movs	r0, #3
 80038dc:	e7e6      	b.n	80038ac <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0xf8>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	4a8e      	ldr	r2, [pc, #568]	; (8003b20 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e8:	4013      	ands	r3, r2
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	4a8d      	ldr	r2, [pc, #564]	; (8003b24 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f0:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f2:	4013      	ands	r3, r2
 80038f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80038f6:	f7ff fb27 	bl	8002f48 <HAL_GetTick>
 80038fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	4233      	tst	r3, r6
 8003900:	d100      	bne.n	8003904 <HAL_RCC_OscConfig+0xec>
 8003902:	e78f      	b.n	8003824 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003904:	f7ff fb20 	bl	8002f48 <HAL_GetTick>
 8003908:	1bc0      	subs	r0, r0, r7
 800390a:	2864      	cmp	r0, #100	; 0x64
 800390c:	d9f6      	bls.n	80038fc <HAL_RCC_OscConfig+0xe4>
 800390e:	e7e4      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003910:	2b05      	cmp	r3, #5
 8003912:	d105      	bne.n	8003920 <HAL_RCC_OscConfig+0x108>
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	6822      	ldr	r2, [r4, #0]
 8003918:	02db      	lsls	r3, r3, #11
 800391a:	4313      	orrs	r3, r2
 800391c:	6023      	str	r3, [r4, #0]
 800391e:	e7ca      	b.n	80038b6 <HAL_RCC_OscConfig+0x9e>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	4a7f      	ldr	r2, [pc, #508]	; (8003b20 <HAL_RCC_OscConfig+0x308>)
 8003924:	4013      	ands	r3, r2
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	4a7e      	ldr	r2, [pc, #504]	; (8003b24 <HAL_RCC_OscConfig+0x30c>)
 800392c:	4013      	ands	r3, r2
 800392e:	e7c6      	b.n	80038be <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003930:	220c      	movs	r2, #12
 8003932:	4c7a      	ldr	r4, [pc, #488]	; (8003b1c <HAL_RCC_OscConfig+0x304>)
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	4213      	tst	r3, r2
 8003938:	d006      	beq.n	8003948 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800393a:	6863      	ldr	r3, [r4, #4]
 800393c:	4013      	ands	r3, r2
 800393e:	2b08      	cmp	r3, #8
 8003940:	d110      	bne.n	8003964 <HAL_RCC_OscConfig+0x14c>
 8003942:	6863      	ldr	r3, [r4, #4]
 8003944:	03db      	lsls	r3, r3, #15
 8003946:	d40d      	bmi.n	8003964 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	079b      	lsls	r3, r3, #30
 800394c:	d502      	bpl.n	8003954 <HAL_RCC_OscConfig+0x13c>
 800394e:	68eb      	ldr	r3, [r5, #12]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d1aa      	bne.n	80038aa <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	21f8      	movs	r1, #248	; 0xf8
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	692b      	ldr	r3, [r5, #16]
 800395a:	438a      	bics	r2, r1
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4313      	orrs	r3, r2
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	e763      	b.n	800382c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003964:	68ea      	ldr	r2, [r5, #12]
 8003966:	2301      	movs	r3, #1
 8003968:	2a00      	cmp	r2, #0
 800396a:	d00f      	beq.n	800398c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 800396c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8003970:	4313      	orrs	r3, r2
 8003972:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003974:	f7ff fae8 	bl	8002f48 <HAL_GetTick>
 8003978:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	4233      	tst	r3, r6
 800397e:	d1e9      	bne.n	8003954 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003980:	f7ff fae2 	bl	8002f48 <HAL_GetTick>
 8003984:	1bc0      	subs	r0, r0, r7
 8003986:	2802      	cmp	r0, #2
 8003988:	d9f7      	bls.n	800397a <HAL_RCC_OscConfig+0x162>
 800398a:	e7a6      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 800398c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8003990:	439a      	bics	r2, r3
 8003992:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8003994:	f7ff fad8 	bl	8002f48 <HAL_GetTick>
 8003998:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	4233      	tst	r3, r6
 800399e:	d100      	bne.n	80039a2 <HAL_RCC_OscConfig+0x18a>
 80039a0:	e744      	b.n	800382c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a2:	f7ff fad1 	bl	8002f48 <HAL_GetTick>
 80039a6:	1bc0      	subs	r0, r0, r7
 80039a8:	2802      	cmp	r0, #2
 80039aa:	d9f6      	bls.n	800399a <HAL_RCC_OscConfig+0x182>
 80039ac:	e795      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ae:	69ea      	ldr	r2, [r5, #28]
 80039b0:	2301      	movs	r3, #1
 80039b2:	4c5a      	ldr	r4, [pc, #360]	; (8003b1c <HAL_RCC_OscConfig+0x304>)
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	d010      	beq.n	80039da <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80039b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80039bc:	4313      	orrs	r3, r2
 80039be:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80039c0:	f7ff fac2 	bl	8002f48 <HAL_GetTick>
 80039c4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039c8:	4233      	tst	r3, r6
 80039ca:	d000      	beq.n	80039ce <HAL_RCC_OscConfig+0x1b6>
 80039cc:	e732      	b.n	8003834 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ce:	f7ff fabb 	bl	8002f48 <HAL_GetTick>
 80039d2:	1bc0      	subs	r0, r0, r7
 80039d4:	2802      	cmp	r0, #2
 80039d6:	d9f6      	bls.n	80039c6 <HAL_RCC_OscConfig+0x1ae>
 80039d8:	e77f      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80039da:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80039de:	439a      	bics	r2, r3
 80039e0:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80039e2:	f7ff fab1 	bl	8002f48 <HAL_GetTick>
 80039e6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039ea:	4233      	tst	r3, r6
 80039ec:	d100      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1d8>
 80039ee:	e721      	b.n	8003834 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f0:	f7ff faaa 	bl	8002f48 <HAL_GetTick>
 80039f4:	1bc0      	subs	r0, r0, r7
 80039f6:	2802      	cmp	r0, #2
 80039f8:	d9f6      	bls.n	80039e8 <HAL_RCC_OscConfig+0x1d0>
 80039fa:	e76e      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80039fe:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a00:	4c46      	ldr	r4, [pc, #280]	; (8003b1c <HAL_RCC_OscConfig+0x304>)
 8003a02:	0552      	lsls	r2, r2, #21
 8003a04:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003a06:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a08:	4213      	tst	r3, r2
 8003a0a:	d108      	bne.n	8003a1e <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	69e3      	ldr	r3, [r4, #28]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61e3      	str	r3, [r4, #28]
 8003a12:	69e3      	ldr	r3, [r4, #28]
 8003a14:	4013      	ands	r3, r2
 8003a16:	9303      	str	r3, [sp, #12]
 8003a18:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	2780      	movs	r7, #128	; 0x80
 8003a20:	4e41      	ldr	r6, [pc, #260]	; (8003b28 <HAL_RCC_OscConfig+0x310>)
 8003a22:	007f      	lsls	r7, r7, #1
 8003a24:	6833      	ldr	r3, [r6, #0]
 8003a26:	423b      	tst	r3, r7
 8003a28:	d006      	beq.n	8003a38 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2a:	68ab      	ldr	r3, [r5, #8]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d113      	bne.n	8003a58 <HAL_RCC_OscConfig+0x240>
 8003a30:	6a22      	ldr	r2, [r4, #32]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	6223      	str	r3, [r4, #32]
 8003a36:	e030      	b.n	8003a9a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a38:	6833      	ldr	r3, [r6, #0]
 8003a3a:	433b      	orrs	r3, r7
 8003a3c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003a3e:	f7ff fa83 	bl	8002f48 <HAL_GetTick>
 8003a42:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	423b      	tst	r3, r7
 8003a48:	d1ef      	bne.n	8003a2a <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7ff fa7d 	bl	8002f48 <HAL_GetTick>
 8003a4e:	9b01      	ldr	r3, [sp, #4]
 8003a50:	1ac0      	subs	r0, r0, r3
 8003a52:	2864      	cmp	r0, #100	; 0x64
 8003a54:	d9f6      	bls.n	8003a44 <HAL_RCC_OscConfig+0x22c>
 8003a56:	e740      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
 8003a58:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d114      	bne.n	8003a88 <HAL_RCC_OscConfig+0x270>
 8003a5e:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a62:	4393      	bics	r3, r2
 8003a64:	6223      	str	r3, [r4, #32]
 8003a66:	6a23      	ldr	r3, [r4, #32]
 8003a68:	3203      	adds	r2, #3
 8003a6a:	4393      	bics	r3, r2
 8003a6c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003a6e:	f7ff fa6b 	bl	8002f48 <HAL_GetTick>
 8003a72:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	6a23      	ldr	r3, [r4, #32]
 8003a76:	423b      	tst	r3, r7
 8003a78:	d025      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7ff fa65 	bl	8002f48 <HAL_GetTick>
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <HAL_RCC_OscConfig+0x314>)
 8003a80:	1b80      	subs	r0, r0, r6
 8003a82:	4298      	cmp	r0, r3
 8003a84:	d9f6      	bls.n	8003a74 <HAL_RCC_OscConfig+0x25c>
 8003a86:	e728      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x28c>
 8003a8c:	6a21      	ldr	r1, [r4, #32]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6223      	str	r3, [r4, #32]
 8003a94:	6a23      	ldr	r3, [r4, #32]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8003a9a:	f7ff fa55 	bl	8002f48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8003aa0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa2:	e00d      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa4:	6a23      	ldr	r3, [r4, #32]
 8003aa6:	4393      	bics	r3, r2
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	6223      	str	r3, [r4, #32]
 8003aac:	6a23      	ldr	r3, [r4, #32]
 8003aae:	4393      	bics	r3, r2
 8003ab0:	e7c0      	b.n	8003a34 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7ff fa49 	bl	8002f48 <HAL_GetTick>
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_RCC_OscConfig+0x314>)
 8003ab8:	1b80      	subs	r0, r0, r6
 8003aba:	4298      	cmp	r0, r3
 8003abc:	d900      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x2a8>
 8003abe:	e70c      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	6a23      	ldr	r3, [r4, #32]
 8003ac2:	423b      	tst	r3, r7
 8003ac4:	d0f5      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8003ac6:	9b00      	ldr	r3, [sp, #0]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d000      	beq.n	8003ace <HAL_RCC_OscConfig+0x2b6>
 8003acc:	e6b6      	b.n	800383c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	69e3      	ldr	r3, [r4, #28]
 8003ad0:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <HAL_RCC_OscConfig+0x318>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61e3      	str	r3, [r4, #28]
 8003ad6:	e6b1      	b.n	800383c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ad8:	f7ff fa36 	bl	8002f48 <HAL_GetTick>
 8003adc:	1bc0      	subs	r0, r0, r7
 8003ade:	2802      	cmp	r0, #2
 8003ae0:	d800      	bhi.n	8003ae4 <HAL_RCC_OscConfig+0x2cc>
 8003ae2:	e6be      	b.n	8003862 <HAL_RCC_OscConfig+0x4a>
 8003ae4:	e6f9      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ae6:	3205      	adds	r2, #5
 8003ae8:	d103      	bne.n	8003af2 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003aea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003aec:	439a      	bics	r2, r3
 8003aee:	6362      	str	r2, [r4, #52]	; 0x34
 8003af0:	e6bb      	b.n	800386a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003af2:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003af4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003af6:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003af8:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8003afa:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003afe:	4393      	bics	r3, r2
 8003b00:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003b02:	f7ff fa21 	bl	8002f48 <HAL_GetTick>
 8003b06:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b0a:	4233      	tst	r3, r6
 8003b0c:	d100      	bne.n	8003b10 <HAL_RCC_OscConfig+0x2f8>
 8003b0e:	e6b3      	b.n	8003878 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b10:	f7ff fa1a 	bl	8002f48 <HAL_GetTick>
 8003b14:	1bc0      	subs	r0, r0, r7
 8003b16:	2802      	cmp	r0, #2
 8003b18:	d9f6      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2f0>
 8003b1a:	e6de      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	fffeffff 	.word	0xfffeffff
 8003b24:	fffbffff 	.word	0xfffbffff
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	00001388 	.word	0x00001388
 8003b30:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b34:	220c      	movs	r2, #12
 8003b36:	4c26      	ldr	r4, [pc, #152]	; (8003bd0 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8003b38:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b3a:	6863      	ldr	r3, [r4, #4]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d100      	bne.n	8003b44 <HAL_RCC_OscConfig+0x32c>
 8003b42:	e6b3      	b.n	80038ac <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <HAL_RCC_OscConfig+0x3bc>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b4c:	2902      	cmp	r1, #2
 8003b4e:	d12f      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8003b50:	f7ff f9fa 	bl	8002f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b54:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003b56:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	04b6      	lsls	r6, r6, #18
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	4233      	tst	r3, r6
 8003b5e:	d121      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b60:	220f      	movs	r2, #15
 8003b62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b64:	4393      	bics	r3, r2
 8003b66:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b6c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003b6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b70:	6862      	ldr	r2, [r4, #4]
 8003b72:	430b      	orrs	r3, r1
 8003b74:	4918      	ldr	r1, [pc, #96]	; (8003bd8 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b76:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b78:	400a      	ands	r2, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	045b      	lsls	r3, r3, #17
 8003b84:	4313      	orrs	r3, r2
 8003b86:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003b88:	f7ff f9de 	bl	8002f48 <HAL_GetTick>
 8003b8c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b8e:	04ad      	lsls	r5, r5, #18
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	422b      	tst	r3, r5
 8003b94:	d000      	beq.n	8003b98 <HAL_RCC_OscConfig+0x380>
 8003b96:	e673      	b.n	8003880 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b98:	f7ff f9d6 	bl	8002f48 <HAL_GetTick>
 8003b9c:	1b80      	subs	r0, r0, r6
 8003b9e:	2802      	cmp	r0, #2
 8003ba0:	d9f6      	bls.n	8003b90 <HAL_RCC_OscConfig+0x378>
 8003ba2:	e69a      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7ff f9d0 	bl	8002f48 <HAL_GetTick>
 8003ba8:	1bc0      	subs	r0, r0, r7
 8003baa:	2802      	cmp	r0, #2
 8003bac:	d9d5      	bls.n	8003b5a <HAL_RCC_OscConfig+0x342>
 8003bae:	e694      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003bb0:	f7ff f9ca 	bl	8002f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb4:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8003bb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb8:	04ad      	lsls	r5, r5, #18
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	422b      	tst	r3, r5
 8003bbe:	d100      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3aa>
 8003bc0:	e65e      	b.n	8003880 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc2:	f7ff f9c1 	bl	8002f48 <HAL_GetTick>
 8003bc6:	1b80      	subs	r0, r0, r6
 8003bc8:	2802      	cmp	r0, #2
 8003bca:	d9f6      	bls.n	8003bba <HAL_RCC_OscConfig+0x3a2>
 8003bcc:	e685      	b.n	80038da <HAL_RCC_OscConfig+0xc2>
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	feffffff 	.word	0xfeffffff
 8003bd8:	ffc2ffff 	.word	0xffc2ffff

08003bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003bde:	4c14      	ldr	r4, [pc, #80]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8003be0:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003be2:	2210      	movs	r2, #16
 8003be4:	0021      	movs	r1, r4
 8003be6:	4668      	mov	r0, sp
 8003be8:	f001 ffc0 	bl	8005b6c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003bec:	0021      	movs	r1, r4
 8003bee:	ad04      	add	r5, sp, #16
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	3110      	adds	r1, #16
 8003bf4:	0028      	movs	r0, r5
 8003bf6:	f001 ffb9 	bl	8005b6c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bfa:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003bfc:	4e0d      	ldr	r6, [pc, #52]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x58>)
 8003bfe:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c00:	401a      	ands	r2, r3
 8003c02:	2a08      	cmp	r2, #8
 8003c04:	d111      	bne.n	8003c2a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c06:	200f      	movs	r0, #15
 8003c08:	466a      	mov	r2, sp
 8003c0a:	0c99      	lsrs	r1, r3, #18
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c10:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003c12:	4002      	ands	r2, r0
 8003c14:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c16:	03db      	lsls	r3, r3, #15
 8003c18:	d505      	bpl.n	8003c26 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003c1a:	4807      	ldr	r0, [pc, #28]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003c1c:	f7fc fa86 	bl	800012c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8003c20:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003c22:	b008      	add	sp, #32
 8003c24:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8003c26:	4805      	ldr	r0, [pc, #20]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x60>)
 8003c28:	e7fa      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8003c2a:	4803      	ldr	r0, [pc, #12]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8003c2c:	e7f9      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x46>
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	080077c0 	.word	0x080077c0
 8003c34:	40021000 	.word	0x40021000
 8003c38:	007a1200 	.word	0x007a1200
 8003c3c:	003d0900 	.word	0x003d0900

08003c40 <HAL_RCC_ClockConfig>:
{
 8003c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003c42:	2201      	movs	r2, #1
 8003c44:	4c43      	ldr	r4, [pc, #268]	; (8003d54 <HAL_RCC_ClockConfig+0x114>)
{
 8003c46:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003c48:	6823      	ldr	r3, [r4, #0]
{
 8003c4a:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	428b      	cmp	r3, r1
 8003c50:	d31c      	bcc.n	8003c8c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c52:	6832      	ldr	r2, [r6, #0]
 8003c54:	0793      	lsls	r3, r2, #30
 8003c56:	d423      	bmi.n	8003ca0 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c58:	07d3      	lsls	r3, r2, #31
 8003c5a:	d429      	bmi.n	8003cb0 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	401a      	ands	r2, r3
 8003c62:	4297      	cmp	r7, r2
 8003c64:	d367      	bcc.n	8003d36 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c66:	6833      	ldr	r3, [r6, #0]
 8003c68:	4c3b      	ldr	r4, [pc, #236]	; (8003d58 <HAL_RCC_ClockConfig+0x118>)
 8003c6a:	075b      	lsls	r3, r3, #29
 8003c6c:	d46a      	bmi.n	8003d44 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c6e:	f7ff ffb5 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003c72:	6863      	ldr	r3, [r4, #4]
 8003c74:	4a39      	ldr	r2, [pc, #228]	; (8003d5c <HAL_RCC_ClockConfig+0x11c>)
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	0f1b      	lsrs	r3, r3, #28
 8003c7a:	5cd3      	ldrb	r3, [r2, r3]
 8003c7c:	40d8      	lsrs	r0, r3
 8003c7e:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <HAL_RCC_ClockConfig+0x120>)
 8003c80:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f7ff f936 	bl	8002ef4 <HAL_InitTick>
  return HAL_OK;
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	4393      	bics	r3, r2
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	4013      	ands	r3, r2
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	d0da      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8003c9c:	2001      	movs	r0, #1
}
 8003c9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	20f0      	movs	r0, #240	; 0xf0
 8003ca2:	492d      	ldr	r1, [pc, #180]	; (8003d58 <HAL_RCC_ClockConfig+0x118>)
 8003ca4:	684b      	ldr	r3, [r1, #4]
 8003ca6:	4383      	bics	r3, r0
 8003ca8:	68b0      	ldr	r0, [r6, #8]
 8003caa:	4303      	orrs	r3, r0
 8003cac:	604b      	str	r3, [r1, #4]
 8003cae:	e7d3      	b.n	8003c58 <HAL_RCC_ClockConfig+0x18>
 8003cb0:	4d29      	ldr	r5, [pc, #164]	; (8003d58 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb6:	2a01      	cmp	r2, #1
 8003cb8:	d11a      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	039b      	lsls	r3, r3, #14
 8003cbc:	d5ee      	bpl.n	8003c9c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cbe:	2103      	movs	r1, #3
 8003cc0:	686b      	ldr	r3, [r5, #4]
 8003cc2:	438b      	bics	r3, r1
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003cc8:	f7ff f93e 	bl	8002f48 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ccc:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003cce:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d115      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd4:	220c      	movs	r2, #12
 8003cd6:	686b      	ldr	r3, [r5, #4]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d0be      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cde:	f7ff f933 	bl	8002f48 <HAL_GetTick>
 8003ce2:	9b01      	ldr	r3, [sp, #4]
 8003ce4:	1ac0      	subs	r0, r0, r3
 8003ce6:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <HAL_RCC_ClockConfig+0x124>)
 8003ce8:	4298      	cmp	r0, r3
 8003cea:	d9f3      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8003cec:	2003      	movs	r0, #3
 8003cee:	e7d6      	b.n	8003c9e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf0:	2a02      	cmp	r2, #2
 8003cf2:	d102      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	d4e2      	bmi.n	8003cbe <HAL_RCC_ClockConfig+0x7e>
 8003cf8:	e7d0      	b.n	8003c9c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	079b      	lsls	r3, r3, #30
 8003cfc:	d4df      	bmi.n	8003cbe <HAL_RCC_ClockConfig+0x7e>
 8003cfe:	e7cd      	b.n	8003c9c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d012      	beq.n	8003d2a <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d04:	220c      	movs	r2, #12
 8003d06:	686b      	ldr	r3, [r5, #4]
 8003d08:	4213      	tst	r3, r2
 8003d0a:	d0a7      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d0c:	f7ff f91c 	bl	8002f48 <HAL_GetTick>
 8003d10:	9b01      	ldr	r3, [sp, #4]
 8003d12:	1ac0      	subs	r0, r0, r3
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <HAL_RCC_ClockConfig+0x124>)
 8003d16:	4298      	cmp	r0, r3
 8003d18:	d9f4      	bls.n	8003d04 <HAL_RCC_ClockConfig+0xc4>
 8003d1a:	e7e7      	b.n	8003cec <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1c:	f7ff f914 	bl	8002f48 <HAL_GetTick>
 8003d20:	9b01      	ldr	r3, [sp, #4]
 8003d22:	1ac0      	subs	r0, r0, r3
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_RCC_ClockConfig+0x124>)
 8003d26:	4298      	cmp	r0, r3
 8003d28:	d8e0      	bhi.n	8003cec <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d2a:	220c      	movs	r2, #12
 8003d2c:	686b      	ldr	r3, [r5, #4]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d1f3      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xdc>
 8003d34:	e792      	b.n	8003c5c <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	439a      	bics	r2, r3
 8003d3a:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d3c:	6822      	ldr	r2, [r4, #0]
 8003d3e:	421a      	tst	r2, r3
 8003d40:	d1ac      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x5c>
 8003d42:	e790      	b.n	8003c66 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d44:	6863      	ldr	r3, [r4, #4]
 8003d46:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	68f2      	ldr	r2, [r6, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	6063      	str	r3, [r4, #4]
 8003d50:	e78d      	b.n	8003c6e <HAL_RCC_ClockConfig+0x2e>
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	08007946 	.word	0x08007946
 8003d60:	20000000 	.word	0x20000000
 8003d64:	00001388 	.word	0x00001388
 8003d68:	fffff8ff 	.word	0xfffff8ff

08003d6c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003d6c:	4b01      	ldr	r3, [pc, #4]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x8>)
 8003d6e:	6818      	ldr	r0, [r3, #0]
}
 8003d70:	4770      	bx	lr
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	20000000 	.word	0x20000000

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003d7a:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	055b      	lsls	r3, r3, #21
 8003d80:	0f5b      	lsrs	r3, r3, #29
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	4a03      	ldr	r2, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d86:	6810      	ldr	r0, [r2, #0]
 8003d88:	40d8      	lsrs	r0, r3
}    
 8003d8a:	4770      	bx	lr
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	08007956 	.word	0x08007956
 8003d94:	20000000 	.word	0x20000000

08003d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d98:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d9a:	6803      	ldr	r3, [r0, #0]
{
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003da0:	03db      	lsls	r3, r3, #15
 8003da2:	d528      	bpl.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003da6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da8:	4c37      	ldr	r4, [pc, #220]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8003daa:	0552      	lsls	r2, r2, #21
 8003dac:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db0:	4213      	tst	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	69e3      	ldr	r3, [r4, #28]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61e3      	str	r3, [r4, #28]
 8003dba:	69e3      	ldr	r3, [r4, #28]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	9303      	str	r3, [sp, #12]
 8003dc0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	2780      	movs	r7, #128	; 0x80
 8003dc8:	4e30      	ldr	r6, [pc, #192]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003dca:	007f      	lsls	r7, r7, #1
 8003dcc:	6833      	ldr	r3, [r6, #0]
 8003dce:	423b      	tst	r3, r7
 8003dd0:	d026      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd2:	22c0      	movs	r2, #192	; 0xc0
 8003dd4:	6a23      	ldr	r3, [r4, #32]
 8003dd6:	0092      	lsls	r2, r2, #2
 8003dd8:	4013      	ands	r3, r2
 8003dda:	4e2d      	ldr	r6, [pc, #180]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ddc:	d132      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dde:	6a23      	ldr	r3, [r4, #32]
 8003de0:	401e      	ands	r6, r3
 8003de2:	686b      	ldr	r3, [r5, #4]
 8003de4:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003de6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de8:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d103      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dee:	69e3      	ldr	r3, [r4, #28]
 8003df0:	4a28      	ldr	r2, [pc, #160]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df6:	682a      	ldr	r2, [r5, #0]
 8003df8:	07d3      	lsls	r3, r2, #31
 8003dfa:	d506      	bpl.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dfc:	2003      	movs	r0, #3
 8003dfe:	4922      	ldr	r1, [pc, #136]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8003e00:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003e02:	4383      	bics	r3, r0
 8003e04:	68a8      	ldr	r0, [r5, #8]
 8003e06:	4303      	orrs	r3, r0
 8003e08:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003e0a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e0c:	0693      	lsls	r3, r2, #26
 8003e0e:	d517      	bpl.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e10:	2110      	movs	r1, #16
 8003e12:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8003e14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e16:	438b      	bics	r3, r1
 8003e18:	68e9      	ldr	r1, [r5, #12]
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	e00f      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e20:	6833      	ldr	r3, [r6, #0]
 8003e22:	433b      	orrs	r3, r7
 8003e24:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003e26:	f7ff f88f 	bl	8002f48 <HAL_GetTick>
 8003e2a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	6833      	ldr	r3, [r6, #0]
 8003e2e:	423b      	tst	r3, r7
 8003e30:	d1cf      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e32:	f7ff f889 	bl	8002f48 <HAL_GetTick>
 8003e36:	9b01      	ldr	r3, [sp, #4]
 8003e38:	1ac0      	subs	r0, r0, r3
 8003e3a:	2864      	cmp	r0, #100	; 0x64
 8003e3c:	d9f6      	bls.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8003e3e:	2003      	movs	r0, #3
}
 8003e40:	b005      	add	sp, #20
 8003e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e44:	6869      	ldr	r1, [r5, #4]
 8003e46:	400a      	ands	r2, r1
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d0c8      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e4c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e50:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e52:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e54:	025b      	lsls	r3, r3, #9
 8003e56:	4303      	orrs	r3, r0
 8003e58:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5a:	6a23      	ldr	r3, [r4, #32]
 8003e5c:	480e      	ldr	r0, [pc, #56]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e5e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e60:	4003      	ands	r3, r0
 8003e62:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8003e64:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e66:	07d3      	lsls	r3, r2, #31
 8003e68:	d5b9      	bpl.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8003e6a:	f7ff f86d 	bl	8002f48 <HAL_GetTick>
 8003e6e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e70:	2202      	movs	r2, #2
 8003e72:	6a23      	ldr	r3, [r4, #32]
 8003e74:	4213      	tst	r3, r2
 8003e76:	d1b2      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7ff f866 	bl	8002f48 <HAL_GetTick>
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8003e7e:	1bc0      	subs	r0, r0, r7
 8003e80:	4298      	cmp	r0, r3
 8003e82:	d9f5      	bls.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003e84:	e7db      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	fffffcff 	.word	0xfffffcff
 8003e94:	efffffff 	.word	0xefffffff
 8003e98:	fffeffff 	.word	0xfffeffff
 8003e9c:	00001388 	.word	0x00001388

08003ea0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	6a03      	ldr	r3, [r0, #32]
{
 8003ea4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea6:	4393      	bics	r3, r2
 8003ea8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eae:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eb0:	3272      	adds	r2, #114	; 0x72
 8003eb2:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb4:	680a      	ldr	r2, [r1, #0]
 8003eb6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eb8:	2202      	movs	r2, #2
 8003eba:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ebc:	688a      	ldr	r2, [r1, #8]
 8003ebe:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ec0:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <TIM_OC1_SetConfig+0x68>)
 8003ec2:	4290      	cmp	r0, r2
 8003ec4:	d005      	beq.n	8003ed2 <TIM_OC1_SetConfig+0x32>
 8003ec6:	4e11      	ldr	r6, [pc, #68]	; (8003f0c <TIM_OC1_SetConfig+0x6c>)
 8003ec8:	42b0      	cmp	r0, r6
 8003eca:	d002      	beq.n	8003ed2 <TIM_OC1_SetConfig+0x32>
 8003ecc:	4e10      	ldr	r6, [pc, #64]	; (8003f10 <TIM_OC1_SetConfig+0x70>)
 8003ece:	42b0      	cmp	r0, r6
 8003ed0:	d113      	bne.n	8003efa <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ed2:	2608      	movs	r6, #8
 8003ed4:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ed6:	68ce      	ldr	r6, [r1, #12]
 8003ed8:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eda:	2604      	movs	r6, #4
 8003edc:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	4290      	cmp	r0, r2
 8003ee0:	d005      	beq.n	8003eee <TIM_OC1_SetConfig+0x4e>
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <TIM_OC1_SetConfig+0x6c>)
 8003ee4:	4290      	cmp	r0, r2
 8003ee6:	d002      	beq.n	8003eee <TIM_OC1_SetConfig+0x4e>
 8003ee8:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <TIM_OC1_SetConfig+0x70>)
 8003eea:	4290      	cmp	r0, r2
 8003eec:	d105      	bne.n	8003efa <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ef0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ef2:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ef4:	694c      	ldr	r4, [r1, #20]
 8003ef6:	4334      	orrs	r4, r6
 8003ef8:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003efa:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003efc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003efe:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003f00:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f02:	6203      	str	r3, [r0, #32]
}
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800
 8003f14:	fffffcff 	.word	0xfffffcff

08003f18 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f1a:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f1c:	6a03      	ldr	r3, [r0, #32]
 8003f1e:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <TIM_OC3_SetConfig+0x60>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003f24:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003f26:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f28:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f2a:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f2c:	680d      	ldr	r5, [r1, #0]
 8003f2e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f30:	4d12      	ldr	r5, [pc, #72]	; (8003f7c <TIM_OC3_SetConfig+0x64>)
 8003f32:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f34:	688d      	ldr	r5, [r1, #8]
 8003f36:	022d      	lsls	r5, r5, #8
 8003f38:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f3a:	4d11      	ldr	r5, [pc, #68]	; (8003f80 <TIM_OC3_SetConfig+0x68>)
 8003f3c:	42a8      	cmp	r0, r5
 8003f3e:	d10e      	bne.n	8003f5e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f40:	4d10      	ldr	r5, [pc, #64]	; (8003f84 <TIM_OC3_SetConfig+0x6c>)
 8003f42:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f44:	68cb      	ldr	r3, [r1, #12]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f4a:	4d0f      	ldr	r5, [pc, #60]	; (8003f88 <TIM_OC3_SetConfig+0x70>)
 8003f4c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f4e:	4d0f      	ldr	r5, [pc, #60]	; (8003f8c <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f50:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f52:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f54:	698a      	ldr	r2, [r1, #24]
 8003f56:	4332      	orrs	r2, r6
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	432a      	orrs	r2, r5
 8003f5c:	e005      	b.n	8003f6a <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5e:	4d0c      	ldr	r5, [pc, #48]	; (8003f90 <TIM_OC3_SetConfig+0x78>)
 8003f60:	42a8      	cmp	r0, r5
 8003f62:	d0f4      	beq.n	8003f4e <TIM_OC3_SetConfig+0x36>
 8003f64:	4d0b      	ldr	r5, [pc, #44]	; (8003f94 <TIM_OC3_SetConfig+0x7c>)
 8003f66:	42a8      	cmp	r0, r5
 8003f68:	d0f1      	beq.n	8003f4e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f6c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003f6e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003f70:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f72:	6203      	str	r3, [r0, #32]
}
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	fffffeff 	.word	0xfffffeff
 8003f7c:	fffffdff 	.word	0xfffffdff
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	fffff7ff 	.word	0xfffff7ff
 8003f88:	fffffbff 	.word	0xfffffbff
 8003f8c:	ffffcfff 	.word	0xffffcfff
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f98:	6a03      	ldr	r3, [r0, #32]
 8003f9a:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <TIM_OC4_SetConfig+0x4c>)
{
 8003f9c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fa4:	4c10      	ldr	r4, [pc, #64]	; (8003fe8 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8003fa6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003fa8:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003faa:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fac:	680c      	ldr	r4, [r1, #0]
 8003fae:	0224      	lsls	r4, r4, #8
 8003fb0:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb2:	4c0e      	ldr	r4, [pc, #56]	; (8003fec <TIM_OC4_SetConfig+0x54>)
 8003fb4:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fb6:	688c      	ldr	r4, [r1, #8]
 8003fb8:	0324      	lsls	r4, r4, #12
 8003fba:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003fbc:	4c0c      	ldr	r4, [pc, #48]	; (8003ff0 <TIM_OC4_SetConfig+0x58>)
 8003fbe:	42a0      	cmp	r0, r4
 8003fc0:	d005      	beq.n	8003fce <TIM_OC4_SetConfig+0x36>
 8003fc2:	4c0c      	ldr	r4, [pc, #48]	; (8003ff4 <TIM_OC4_SetConfig+0x5c>)
 8003fc4:	42a0      	cmp	r0, r4
 8003fc6:	d002      	beq.n	8003fce <TIM_OC4_SetConfig+0x36>
 8003fc8:	4c0b      	ldr	r4, [pc, #44]	; (8003ff8 <TIM_OC4_SetConfig+0x60>)
 8003fca:	42a0      	cmp	r0, r4
 8003fcc:	d104      	bne.n	8003fd8 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fce:	4c0b      	ldr	r4, [pc, #44]	; (8003ffc <TIM_OC4_SetConfig+0x64>)
 8003fd0:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fd2:	694c      	ldr	r4, [r1, #20]
 8003fd4:	01a4      	lsls	r4, r4, #6
 8003fd6:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fda:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003fdc:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003fde:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe0:	6202      	str	r2, [r0, #32]
}
 8003fe2:	bd30      	pop	{r4, r5, pc}
 8003fe4:	ffffefff 	.word	0xffffefff
 8003fe8:	ffff8cff 	.word	0xffff8cff
 8003fec:	ffffdfff 	.word	0xffffdfff
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800
 8003ffc:	ffffbfff 	.word	0xffffbfff

08004000 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004000:	2201      	movs	r2, #1
 8004002:	6803      	ldr	r3, [r0, #0]
 8004004:	68d9      	ldr	r1, [r3, #12]
}
 8004006:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004008:	4311      	orrs	r1, r2
 800400a:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800400c:	6819      	ldr	r1, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
}
 8004012:	4770      	bx	lr

08004014 <HAL_TIM_TriggerCallback>:
 8004014:	4770      	bx	lr

08004016 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004016:	2202      	movs	r2, #2
 8004018:	6803      	ldr	r3, [r0, #0]
{
 800401a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800401c:	6919      	ldr	r1, [r3, #16]
{
 800401e:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004020:	4211      	tst	r1, r2
 8004022:	d00e      	beq.n	8004042 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004024:	68d9      	ldr	r1, [r3, #12]
 8004026:	4211      	tst	r1, r2
 8004028:	d00b      	beq.n	8004042 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800402a:	3a05      	subs	r2, #5
 800402c:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800402e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004030:	3204      	adds	r2, #4
 8004032:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004034:	079b      	lsls	r3, r3, #30
 8004036:	d100      	bne.n	800403a <HAL_TIM_IRQHandler+0x24>
 8004038:	e079      	b.n	800412e <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 800403a:	f000 fe07 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	2300      	movs	r3, #0
 8004040:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004042:	2204      	movs	r2, #4
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	6919      	ldr	r1, [r3, #16]
 8004048:	4211      	tst	r1, r2
 800404a:	d010      	beq.n	800406e <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800404c:	68d9      	ldr	r1, [r3, #12]
 800404e:	4211      	tst	r1, r2
 8004050:	d00d      	beq.n	800406e <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004052:	3a09      	subs	r2, #9
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004056:	3207      	adds	r2, #7
 8004058:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	23c0      	movs	r3, #192	; 0xc0
 800405e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004060:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004062:	421a      	tst	r2, r3
 8004064:	d069      	beq.n	800413a <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	f000 fdf1 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	2300      	movs	r3, #0
 800406c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800406e:	2208      	movs	r2, #8
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	6919      	ldr	r1, [r3, #16]
 8004074:	4211      	tst	r1, r2
 8004076:	d00e      	beq.n	8004096 <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004078:	68d9      	ldr	r1, [r3, #12]
 800407a:	4211      	tst	r1, r2
 800407c:	d00b      	beq.n	8004096 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800407e:	3a11      	subs	r2, #17
 8004080:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004082:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004084:	320d      	adds	r2, #13
 8004086:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004088:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800408a:	079b      	lsls	r3, r3, #30
 800408c:	d05b      	beq.n	8004146 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	f000 fddd 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	2300      	movs	r3, #0
 8004094:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004096:	2210      	movs	r2, #16
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	6919      	ldr	r1, [r3, #16]
 800409c:	4211      	tst	r1, r2
 800409e:	d010      	beq.n	80040c2 <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80040a0:	68d9      	ldr	r1, [r3, #12]
 80040a2:	4211      	tst	r1, r2
 80040a4:	d00d      	beq.n	80040c2 <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a6:	3a21      	subs	r2, #33	; 0x21
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040aa:	3219      	adds	r2, #25
 80040ac:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	23c0      	movs	r3, #192	; 0xc0
 80040b2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80040b4:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b6:	421a      	tst	r2, r3
 80040b8:	d04b      	beq.n	8004152 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	f000 fdc7 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	2300      	movs	r3, #0
 80040c0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040c2:	2201      	movs	r2, #1
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	6919      	ldr	r1, [r3, #16]
 80040c8:	4211      	tst	r1, r2
 80040ca:	d007      	beq.n	80040dc <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80040cc:	68d9      	ldr	r1, [r3, #12]
 80040ce:	4211      	tst	r1, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d2:	3a03      	subs	r2, #3
 80040d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d6:	0020      	movs	r0, r4
 80040d8:	f000 fd94 	bl	8004c04 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040dc:	2280      	movs	r2, #128	; 0x80
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	6919      	ldr	r1, [r3, #16]
 80040e2:	4211      	tst	r1, r2
 80040e4:	d008      	beq.n	80040f8 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80040e6:	68d9      	ldr	r1, [r3, #12]
 80040e8:	4211      	tst	r1, r2
 80040ea:	d005      	beq.n	80040f8 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040ec:	3a02      	subs	r2, #2
 80040ee:	3aff      	subs	r2, #255	; 0xff
 80040f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80040f2:	0020      	movs	r0, r4
 80040f4:	f000 f9bc 	bl	8004470 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040f8:	2240      	movs	r2, #64	; 0x40
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	6919      	ldr	r1, [r3, #16]
 80040fe:	4211      	tst	r1, r2
 8004100:	d007      	beq.n	8004112 <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004102:	68d9      	ldr	r1, [r3, #12]
 8004104:	4211      	tst	r1, r2
 8004106:	d004      	beq.n	8004112 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004108:	3a81      	subs	r2, #129	; 0x81
 800410a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800410c:	0020      	movs	r0, r4
 800410e:	f7ff ff81 	bl	8004014 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004112:	2220      	movs	r2, #32
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	4211      	tst	r1, r2
 800411a:	d007      	beq.n	800412c <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800411c:	68d9      	ldr	r1, [r3, #12]
 800411e:	4211      	tst	r1, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004122:	3a41      	subs	r2, #65	; 0x41
 8004124:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004126:	0020      	movs	r0, r4
 8004128:	f000 f9a1 	bl	800446e <HAL_TIMEx_CommutationCallback>
}
 800412c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	f000 fd87 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004132:	0020      	movs	r0, r4
 8004134:	f000 fd90 	bl	8004c58 <HAL_TIM_PWM_PulseFinishedCallback>
 8004138:	e781      	b.n	800403e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413a:	f000 fd81 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413e:	0020      	movs	r0, r4
 8004140:	f000 fd8a 	bl	8004c58 <HAL_TIM_PWM_PulseFinishedCallback>
 8004144:	e791      	b.n	800406a <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	f000 fd7b 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414a:	0020      	movs	r0, r4
 800414c:	f000 fd84 	bl	8004c58 <HAL_TIM_PWM_PulseFinishedCallback>
 8004150:	e79f      	b.n	8004092 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	f000 fd75 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004156:	0020      	movs	r0, r4
 8004158:	f000 fd7e 	bl	8004c58 <HAL_TIM_PWM_PulseFinishedCallback>
 800415c:	e7af      	b.n	80040be <HAL_TIM_IRQHandler+0xa8>
	...

08004160 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <TIM_Base_SetConfig+0x68>)
{
 8004162:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004164:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004166:	4290      	cmp	r0, r2
 8004168:	d002      	beq.n	8004170 <TIM_Base_SetConfig+0x10>
 800416a:	4c18      	ldr	r4, [pc, #96]	; (80041cc <TIM_Base_SetConfig+0x6c>)
 800416c:	42a0      	cmp	r0, r4
 800416e:	d108      	bne.n	8004182 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004170:	2470      	movs	r4, #112	; 0x70
 8004172:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004174:	684c      	ldr	r4, [r1, #4]
 8004176:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004178:	4290      	cmp	r0, r2
 800417a:	d00b      	beq.n	8004194 <TIM_Base_SetConfig+0x34>
 800417c:	4c13      	ldr	r4, [pc, #76]	; (80041cc <TIM_Base_SetConfig+0x6c>)
 800417e:	42a0      	cmp	r0, r4
 8004180:	d008      	beq.n	8004194 <TIM_Base_SetConfig+0x34>
 8004182:	4c13      	ldr	r4, [pc, #76]	; (80041d0 <TIM_Base_SetConfig+0x70>)
 8004184:	42a0      	cmp	r0, r4
 8004186:	d005      	beq.n	8004194 <TIM_Base_SetConfig+0x34>
 8004188:	4c12      	ldr	r4, [pc, #72]	; (80041d4 <TIM_Base_SetConfig+0x74>)
 800418a:	42a0      	cmp	r0, r4
 800418c:	d002      	beq.n	8004194 <TIM_Base_SetConfig+0x34>
 800418e:	4c12      	ldr	r4, [pc, #72]	; (80041d8 <TIM_Base_SetConfig+0x78>)
 8004190:	42a0      	cmp	r0, r4
 8004192:	d103      	bne.n	800419c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004194:	4c11      	ldr	r4, [pc, #68]	; (80041dc <TIM_Base_SetConfig+0x7c>)
 8004196:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004198:	68cc      	ldr	r4, [r1, #12]
 800419a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800419c:	2480      	movs	r4, #128	; 0x80
 800419e:	43a3      	bics	r3, r4
 80041a0:	694c      	ldr	r4, [r1, #20]
 80041a2:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80041a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a6:	688b      	ldr	r3, [r1, #8]
 80041a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80041aa:	680b      	ldr	r3, [r1, #0]
 80041ac:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ae:	4290      	cmp	r0, r2
 80041b0:	d005      	beq.n	80041be <TIM_Base_SetConfig+0x5e>
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <TIM_Base_SetConfig+0x74>)
 80041b4:	4298      	cmp	r0, r3
 80041b6:	d002      	beq.n	80041be <TIM_Base_SetConfig+0x5e>
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <TIM_Base_SetConfig+0x78>)
 80041ba:	4298      	cmp	r0, r3
 80041bc:	d101      	bne.n	80041c2 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 80041be:	690b      	ldr	r3, [r1, #16]
 80041c0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80041c2:	2301      	movs	r3, #1
 80041c4:	6143      	str	r3, [r0, #20]
}
 80041c6:	bd10      	pop	{r4, pc}
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40002000 	.word	0x40002000
 80041d4:	40014400 	.word	0x40014400
 80041d8:	40014800 	.word	0x40014800
 80041dc:	fffffcff 	.word	0xfffffcff

080041e0 <HAL_TIM_Base_Init>:
{
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80041e4:	2001      	movs	r0, #1
  if(htim == NULL)
 80041e6:	2c00      	cmp	r4, #0
 80041e8:	d014      	beq.n	8004214 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80041ea:	0025      	movs	r5, r4
 80041ec:	353d      	adds	r5, #61	; 0x3d
 80041ee:	782b      	ldrb	r3, [r5, #0]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80041f6:	0022      	movs	r2, r4
 80041f8:	323c      	adds	r2, #60	; 0x3c
 80041fa:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80041fc:	0020      	movs	r0, r4
 80041fe:	f001 f9d9 	bl	80055b4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004202:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004204:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004206:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	1d21      	adds	r1, r4, #4
 800420a:	f7ff ffa9 	bl	8004160 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800420e:	2301      	movs	r3, #1
  return HAL_OK;
 8004210:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004212:	702b      	strb	r3, [r5, #0]
}
 8004214:	bd70      	pop	{r4, r5, r6, pc}

08004216 <HAL_TIM_PWM_Init>:
{
 8004216:	b570      	push	{r4, r5, r6, lr}
 8004218:	0004      	movs	r4, r0
    return HAL_ERROR;
 800421a:	2001      	movs	r0, #1
  if(htim == NULL)
 800421c:	2c00      	cmp	r4, #0
 800421e:	d014      	beq.n	800424a <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004220:	0025      	movs	r5, r4
 8004222:	353d      	adds	r5, #61	; 0x3d
 8004224:	782b      	ldrb	r3, [r5, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800422c:	0022      	movs	r2, r4
 800422e:	323c      	adds	r2, #60	; 0x3c
 8004230:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8004232:	0020      	movs	r0, r4
 8004234:	f001 f9a2 	bl	800557c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004238:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800423c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423e:	1d21      	adds	r1, r4, #4
 8004240:	f7ff ff8e 	bl	8004160 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004244:	2301      	movs	r3, #1
  return HAL_OK;
 8004246:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004248:	702b      	strb	r3, [r5, #0]
}
 800424a:	bd70      	pop	{r4, r5, r6, pc}

0800424c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424c:	2210      	movs	r2, #16
 800424e:	6a03      	ldr	r3, [r0, #32]
{
 8004250:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004252:	4393      	bics	r3, r2
 8004254:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004256:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004258:	4d15      	ldr	r5, [pc, #84]	; (80042b0 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 800425a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800425c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800425e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004260:	680d      	ldr	r5, [r1, #0]
 8004262:	022d      	lsls	r5, r5, #8
 8004264:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8004266:	2520      	movs	r5, #32
 8004268:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800426a:	688d      	ldr	r5, [r1, #8]
 800426c:	012d      	lsls	r5, r5, #4
 800426e:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004270:	4d10      	ldr	r5, [pc, #64]	; (80042b4 <TIM_OC2_SetConfig+0x68>)
 8004272:	42a8      	cmp	r0, r5
 8004274:	d10f      	bne.n	8004296 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004276:	2580      	movs	r5, #128	; 0x80
 8004278:	43aa      	bics	r2, r5
 800427a:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800427c:	68ca      	ldr	r2, [r1, #12]
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004282:	2540      	movs	r5, #64	; 0x40
 8004284:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004286:	4d0c      	ldr	r5, [pc, #48]	; (80042b8 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004288:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800428a:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800428c:	698b      	ldr	r3, [r1, #24]
 800428e:	4333      	orrs	r3, r6
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	432b      	orrs	r3, r5
 8004294:	e005      	b.n	80042a2 <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004296:	4d09      	ldr	r5, [pc, #36]	; (80042bc <TIM_OC2_SetConfig+0x70>)
 8004298:	42a8      	cmp	r0, r5
 800429a:	d0f4      	beq.n	8004286 <TIM_OC2_SetConfig+0x3a>
 800429c:	4d08      	ldr	r5, [pc, #32]	; (80042c0 <TIM_OC2_SetConfig+0x74>)
 800429e:	42a8      	cmp	r0, r5
 80042a0:	d0f1      	beq.n	8004286 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80042a2:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80042a4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80042a6:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80042a8:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80042aa:	6202      	str	r2, [r0, #32]
}
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	ffff8cff 	.word	0xffff8cff
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	fffff3ff 	.word	0xfffff3ff
 80042bc:	40014400 	.word	0x40014400
 80042c0:	40014800 	.word	0x40014800

080042c4 <HAL_TIM_PWM_ConfigChannel>:
{
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80042c6:	0006      	movs	r6, r0
 80042c8:	2302      	movs	r3, #2
 80042ca:	363c      	adds	r6, #60	; 0x3c
{
 80042cc:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80042ce:	7831      	ldrb	r1, [r6, #0]
{
 80042d0:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80042d2:	0018      	movs	r0, r3
 80042d4:	2901      	cmp	r1, #1
 80042d6:	d025      	beq.n	8004324 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 80042da:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 80042de:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 80042e2:	2a0c      	cmp	r2, #12
 80042e4:	d81a      	bhi.n	800431c <HAL_TIM_PWM_ConfigChannel+0x58>
 80042e6:	0010      	movs	r0, r2
 80042e8:	f7fb ff16 	bl	8000118 <__gnu_thumb1_case_uqi>
 80042ec:	18181807 	.word	0x18181807
 80042f0:	1818181d 	.word	0x1818181d
 80042f4:	1818182f 	.word	0x1818182f
 80042f8:	41          	.byte	0x41
 80042f9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042fa:	0029      	movs	r1, r5
 80042fc:	6820      	ldr	r0, [r4, #0]
 80042fe:	f7ff fdcf 	bl	8003ea0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004302:	2208      	movs	r2, #8
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	6999      	ldr	r1, [r3, #24]
 8004308:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800430a:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800430c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	438a      	bics	r2, r1
 8004312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004318:	430a      	orrs	r2, r1
 800431a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800431c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800431e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004320:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8004322:	7030      	strb	r0, [r6, #0]
}
 8004324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004326:	0029      	movs	r1, r5
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	f7ff ff8f 	bl	800424c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	0112      	lsls	r2, r2, #4
 8004334:	6999      	ldr	r1, [r3, #24]
 8004336:	430a      	orrs	r2, r1
 8004338:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800433a:	699a      	ldr	r2, [r3, #24]
 800433c:	4915      	ldr	r1, [pc, #84]	; (8004394 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 800433e:	400a      	ands	r2, r1
 8004340:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004342:	692a      	ldr	r2, [r5, #16]
 8004344:	6999      	ldr	r1, [r3, #24]
 8004346:	0212      	lsls	r2, r2, #8
 8004348:	e7e6      	b.n	8004318 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434a:	0029      	movs	r1, r5
 800434c:	6820      	ldr	r0, [r4, #0]
 800434e:	f7ff fde3 	bl	8003f18 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004352:	2208      	movs	r2, #8
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	69d9      	ldr	r1, [r3, #28]
 8004358:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800435a:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	438a      	bics	r2, r1
 8004362:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004368:	430a      	orrs	r2, r1
 800436a:	61da      	str	r2, [r3, #28]
    break;
 800436c:	e7d6      	b.n	800431c <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800436e:	0029      	movs	r1, r5
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	f7ff fe11 	bl	8003f98 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	0112      	lsls	r2, r2, #4
 800437c:	69d9      	ldr	r1, [r3, #28]
 800437e:	430a      	orrs	r2, r1
 8004380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8004386:	400a      	ands	r2, r1
 8004388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800438a:	692a      	ldr	r2, [r5, #16]
 800438c:	69d9      	ldr	r1, [r3, #28]
 800438e:	0212      	lsls	r2, r2, #8
 8004390:	e7ea      	b.n	8004368 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	fffffbff 	.word	0xfffffbff

08004398 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004398:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800439a:	2401      	movs	r4, #1
 800439c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800439e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80043a0:	6a03      	ldr	r3, [r0, #32]
 80043a2:	43a3      	bics	r3, r4
 80043a4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80043a6:	6a03      	ldr	r3, [r0, #32]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	6202      	str	r2, [r0, #32]
}
 80043ac:	bd10      	pop	{r4, pc}
	...

080043b0 <HAL_TIM_PWM_Start_IT>:
{
 80043b0:	b510      	push	{r4, lr}
 80043b2:	0004      	movs	r4, r0
  switch (Channel)
 80043b4:	290c      	cmp	r1, #12
 80043b6:	d80e      	bhi.n	80043d6 <HAL_TIM_PWM_Start_IT+0x26>
 80043b8:	0008      	movs	r0, r1
 80043ba:	f7fb fead 	bl	8000118 <__gnu_thumb1_case_uqi>
 80043be:	0c07      	.short	0x0c07
 80043c0:	0c250c0c 	.word	0x0c250c0c
 80043c4:	0c290c0c 	.word	0x0c290c0c
 80043c8:	0c0c      	.short	0x0c0c
 80043ca:	2d          	.byte	0x2d
 80043cb:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043cc:	2302      	movs	r3, #2
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	68d0      	ldr	r0, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043d2:	4303      	orrs	r3, r0
 80043d4:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043d6:	2201      	movs	r2, #1
 80043d8:	6820      	ldr	r0, [r4, #0]
 80043da:	f7ff ffdd 	bl	8004398 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	4a0f      	ldr	r2, [pc, #60]	; (8004420 <HAL_TIM_PWM_Start_IT+0x70>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d005      	beq.n	80043f2 <HAL_TIM_PWM_Start_IT+0x42>
 80043e6:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <HAL_TIM_PWM_Start_IT+0x74>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d002      	beq.n	80043f2 <HAL_TIM_PWM_Start_IT+0x42>
 80043ec:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <HAL_TIM_PWM_Start_IT+0x78>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d104      	bne.n	80043fc <HAL_TIM_PWM_Start_IT+0x4c>
    __HAL_TIM_MOE_ENABLE(htim);
 80043f2:	2280      	movs	r2, #128	; 0x80
 80043f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80043f6:	0212      	lsls	r2, r2, #8
 80043f8:	430a      	orrs	r2, r1
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80043fc:	2201      	movs	r2, #1
 80043fe:	6819      	ldr	r1, [r3, #0]
}
 8004400:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8004402:	430a      	orrs	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	2304      	movs	r3, #4
 800440c:	68d0      	ldr	r0, [r2, #12]
 800440e:	e7e0      	b.n	80043d2 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004410:	6822      	ldr	r2, [r4, #0]
 8004412:	2308      	movs	r3, #8
 8004414:	68d0      	ldr	r0, [r2, #12]
 8004416:	e7dc      	b.n	80043d2 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004418:	6822      	ldr	r2, [r4, #0]
 800441a:	2310      	movs	r3, #16
 800441c:	68d0      	ldr	r0, [r2, #12]
 800441e:	e7d8      	b.n	80043d2 <HAL_TIM_PWM_Start_IT+0x22>
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40014400 	.word	0x40014400
 8004428:	40014800 	.word	0x40014800

0800442c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800442c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800442e:	0004      	movs	r4, r0
 8004430:	343c      	adds	r4, #60	; 0x3c
 8004432:	7822      	ldrb	r2, [r4, #0]
{
 8004434:	0003      	movs	r3, r0
 8004436:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8004438:	2a01      	cmp	r2, #1
 800443a:	d017      	beq.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800443e:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	353d      	adds	r5, #61	; 0x3d
 8004442:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	306e      	adds	r0, #110	; 0x6e
 8004448:	4382      	bics	r2, r0
 800444a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004450:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004452:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004454:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004456:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	4382      	bics	r2, r0
 800445c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800445e:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004460:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004466:	2301      	movs	r3, #1
 8004468:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800446a:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800446c:	bd30      	pop	{r4, r5, pc}

0800446e <HAL_TIMEx_CommutationCallback>:
 800446e:	4770      	bx	lr

08004470 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004470:	4770      	bx	lr
	...

08004474 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004474:	6803      	ldr	r3, [r0, #0]
 8004476:	4906      	ldr	r1, [pc, #24]	; (8004490 <UART_EndRxTransfer+0x1c>)
 8004478:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447a:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447c:	400a      	ands	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	3123      	adds	r1, #35	; 0x23
 8004484:	31ff      	adds	r1, #255	; 0xff
 8004486:	438a      	bics	r2, r1
 8004488:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800448a:	2320      	movs	r3, #32
 800448c:	7003      	strb	r3, [r0, #0]
}
 800448e:	4770      	bx	lr
 8004490:	fffffedf 	.word	0xfffffedf

08004494 <HAL_UART_Transmit_IT>:
{
 8004494:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8004496:	0006      	movs	r6, r0
 8004498:	3669      	adds	r6, #105	; 0x69
 800449a:	7833      	ldrb	r3, [r6, #0]
{
 800449c:	0004      	movs	r4, r0
    return HAL_BUSY;
 800449e:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d124      	bne.n	80044ee <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 80044a4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80044a6:	2900      	cmp	r1, #0
 80044a8:	d021      	beq.n	80044ee <HAL_UART_Transmit_IT+0x5a>
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	d01f      	beq.n	80044ee <HAL_UART_Transmit_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ae:	2380      	movs	r3, #128	; 0x80
 80044b0:	68a5      	ldr	r5, [r4, #8]
 80044b2:	015b      	lsls	r3, r3, #5
 80044b4:	429d      	cmp	r5, r3
 80044b6:	d104      	bne.n	80044c2 <HAL_UART_Transmit_IT+0x2e>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Transmit_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 80044be:	4201      	tst	r1, r0
 80044c0:	d115      	bne.n	80044ee <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 80044c2:	0025      	movs	r5, r4
 80044c4:	3568      	adds	r5, #104	; 0x68
 80044c6:	782b      	ldrb	r3, [r5, #0]
    return HAL_BUSY;
 80044c8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d00f      	beq.n	80044ee <HAL_UART_Transmit_IT+0x5a>
    huart->TxXferSize = Size;
 80044ce:	0023      	movs	r3, r4
 80044d0:	3350      	adds	r3, #80	; 0x50
    huart->pTxBuffPtr = pData;
 80044d2:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferCount = Size;
 80044d4:	805a      	strh	r2, [r3, #2]
    huart->TxXferSize = Size;
 80044d6:	801a      	strh	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044da:	2221      	movs	r2, #33	; 0x21
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044dc:	6821      	ldr	r1, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044de:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e0:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044e2:	6808      	ldr	r0, [r1, #0]
 80044e4:	325f      	adds	r2, #95	; 0x5f
 80044e6:	4302      	orrs	r2, r0
    return HAL_OK;
 80044e8:	0018      	movs	r0, r3
    __HAL_UNLOCK(huart);
 80044ea:	702b      	strb	r3, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044ec:	600a      	str	r2, [r1, #0]
}
 80044ee:	bd70      	pop	{r4, r5, r6, pc}

080044f0 <HAL_UART_Receive_IT>:
{
 80044f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 80044f2:	0006      	movs	r6, r0
 80044f4:	366a      	adds	r6, #106	; 0x6a
 80044f6:	7834      	ldrb	r4, [r6, #0]
{
 80044f8:	0003      	movs	r3, r0
    return HAL_BUSY;
 80044fa:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 80044fc:	2c20      	cmp	r4, #32
 80044fe:	d135      	bne.n	800456c <HAL_UART_Receive_IT+0x7c>
      return HAL_ERROR;
 8004500:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8004502:	2900      	cmp	r1, #0
 8004504:	d032      	beq.n	800456c <HAL_UART_Receive_IT+0x7c>
 8004506:	2a00      	cmp	r2, #0
 8004508:	d030      	beq.n	800456c <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450a:	2480      	movs	r4, #128	; 0x80
 800450c:	689d      	ldr	r5, [r3, #8]
 800450e:	0164      	lsls	r4, r4, #5
 8004510:	42a5      	cmp	r5, r4
 8004512:	d104      	bne.n	800451e <HAL_UART_Receive_IT+0x2e>
 8004514:	691c      	ldr	r4, [r3, #16]
 8004516:	2c00      	cmp	r4, #0
 8004518:	d101      	bne.n	800451e <HAL_UART_Receive_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 800451a:	4201      	tst	r1, r0
 800451c:	d126      	bne.n	800456c <HAL_UART_Receive_IT+0x7c>
    __HAL_LOCK(huart);
 800451e:	001c      	movs	r4, r3
 8004520:	3468      	adds	r4, #104	; 0x68
 8004522:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 8004524:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004526:	2f01      	cmp	r7, #1
 8004528:	d020      	beq.n	800456c <HAL_UART_Receive_IT+0x7c>
 800452a:	3801      	subs	r0, #1
 800452c:	7020      	strb	r0, [r4, #0]
    huart->pRxBuffPtr = pData;
 800452e:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004530:	0019      	movs	r1, r3
 8004532:	3158      	adds	r1, #88	; 0x58
 8004534:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8004536:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	0152      	lsls	r2, r2, #5
 800453c:	4295      	cmp	r5, r2
 800453e:	d118      	bne.n	8004572 <HAL_UART_Receive_IT+0x82>
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	2a00      	cmp	r2, #0
 8004544:	d113      	bne.n	800456e <HAL_UART_Receive_IT+0x7e>
 8004546:	490e      	ldr	r1, [pc, #56]	; (8004580 <HAL_UART_Receive_IT+0x90>)
 8004548:	001a      	movs	r2, r3
 800454a:	325c      	adds	r2, #92	; 0x5c
 800454c:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454e:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004550:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004552:	66d8      	str	r0, [r3, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004554:	681b      	ldr	r3, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004556:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004558:	6899      	ldr	r1, [r3, #8]
 800455a:	3a21      	subs	r2, #33	; 0x21
 800455c:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 800455e:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004560:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004562:	2290      	movs	r2, #144	; 0x90
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	0052      	lsls	r2, r2, #1
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
}
 800456c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800456e:	21ff      	movs	r1, #255	; 0xff
 8004570:	e7ea      	b.n	8004548 <HAL_UART_Receive_IT+0x58>
 8004572:	2d00      	cmp	r5, #0
 8004574:	d1eb      	bne.n	800454e <HAL_UART_Receive_IT+0x5e>
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	2a00      	cmp	r2, #0
 800457a:	d0f8      	beq.n	800456e <HAL_UART_Receive_IT+0x7e>
 800457c:	217f      	movs	r1, #127	; 0x7f
 800457e:	e7e3      	b.n	8004548 <HAL_UART_Receive_IT+0x58>
 8004580:	000001ff 	.word	0x000001ff

08004584 <HAL_UART_Transmit_DMA>:
{
 8004584:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8004586:	0002      	movs	r2, r0
{
 8004588:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800458a:	3269      	adds	r2, #105	; 0x69
 800458c:	7814      	ldrb	r4, [r2, #0]
{
 800458e:	0005      	movs	r5, r0
    return HAL_BUSY;
 8004590:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8004592:	2c20      	cmp	r4, #32
 8004594:	d134      	bne.n	8004600 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8004596:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8004598:	2900      	cmp	r1, #0
 800459a:	d031      	beq.n	8004600 <HAL_UART_Transmit_DMA+0x7c>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02f      	beq.n	8004600 <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	2480      	movs	r4, #128	; 0x80
 80045a2:	68ae      	ldr	r6, [r5, #8]
 80045a4:	0164      	lsls	r4, r4, #5
 80045a6:	42a6      	cmp	r6, r4
 80045a8:	d104      	bne.n	80045b4 <HAL_UART_Transmit_DMA+0x30>
 80045aa:	692c      	ldr	r4, [r5, #16]
 80045ac:	2c00      	cmp	r4, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1U) != 0U)
 80045b0:	4201      	tst	r1, r0
 80045b2:	d125      	bne.n	8004600 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 80045b4:	002e      	movs	r6, r5
 80045b6:	3668      	adds	r6, #104	; 0x68
 80045b8:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 80045ba:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80045bc:	2c01      	cmp	r4, #1
 80045be:	d01f      	beq.n	8004600 <HAL_UART_Transmit_DMA+0x7c>
 80045c0:	3801      	subs	r0, #1
 80045c2:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 80045c4:	0028      	movs	r0, r5
 80045c6:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 80045c8:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ca:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 80045cc:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 80045ce:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d0:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d2:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d4:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045d6:	6e28      	ldr	r0, [r5, #96]	; 0x60
 80045d8:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 80045da:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045dc:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045de:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <HAL_UART_Transmit_DMA+0x84>)
 80045e0:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <HAL_UART_Transmit_DMA+0x88>)
 80045e4:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80045e6:	682a      	ldr	r2, [r5, #0]
 80045e8:	3228      	adds	r2, #40	; 0x28
 80045ea:	f7fe ffa5 	bl	8003538 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80045ee:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 80045f0:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80045f2:	682b      	ldr	r3, [r5, #0]
 80045f4:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045f6:	6899      	ldr	r1, [r3, #8]
 80045f8:	1892      	adds	r2, r2, r2
 80045fa:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 80045fc:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045fe:	609a      	str	r2, [r3, #8]
}
 8004600:	bd70      	pop	{r4, r5, r6, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	08004611 	.word	0x08004611
 8004608:	08004643 	.word	0x08004643
 800460c:	0800464f 	.word	0x0800464f

08004610 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8004610:	2120      	movs	r1, #32
 8004612:	6803      	ldr	r3, [r0, #0]
{
 8004614:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8004616:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004618:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800461a:	400b      	ands	r3, r1
 800461c:	d10c      	bne.n	8004638 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0;
 800461e:	0011      	movs	r1, r2
 8004620:	3152      	adds	r1, #82	; 0x52
 8004622:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	6813      	ldr	r3, [r2, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	438a      	bics	r2, r1
 800462c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800462e:	2240      	movs	r2, #64	; 0x40
 8004630:	6819      	ldr	r1, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8004636:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004638:	0010      	movs	r0, r2
 800463a:	f000 fb13 	bl	8004c64 <HAL_UART_TxCpltCallback>
}
 800463e:	e7fa      	b.n	8004636 <UART_DMATransmitCplt+0x26>

08004640 <HAL_UART_TxHalfCpltCallback>:
 8004640:	4770      	bx	lr

08004642 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004642:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8004644:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004646:	f7ff fffb 	bl	8004640 <HAL_UART_TxHalfCpltCallback>
}
 800464a:	bd10      	pop	{r4, pc}

0800464c <HAL_UART_ErrorCallback>:
 800464c:	4770      	bx	lr

0800464e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800464e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004650:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004652:	0021      	movs	r1, r4
 8004654:	3169      	adds	r1, #105	; 0x69
 8004656:	780b      	ldrb	r3, [r1, #0]
 8004658:	2b21      	cmp	r3, #33	; 0x21
 800465a:	d10d      	bne.n	8004678 <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	0612      	lsls	r2, r2, #24
 8004662:	d509      	bpl.n	8004678 <UART_DMAError+0x2a>
  {
    huart->TxXferCount = 0U;
 8004664:	0022      	movs	r2, r4
 8004666:	2000      	movs	r0, #0
 8004668:	3252      	adds	r2, #82	; 0x52
 800466a:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	30c0      	adds	r0, #192	; 0xc0
 8004670:	4382      	bics	r2, r0
 8004672:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004674:	2320      	movs	r3, #32
 8004676:	700b      	strb	r3, [r1, #0]
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004678:	0023      	movs	r3, r4
 800467a:	336a      	adds	r3, #106	; 0x6a
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b22      	cmp	r3, #34	; 0x22
 8004680:	d10a      	bne.n	8004698 <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	065b      	lsls	r3, r3, #25
 8004688:	d506      	bpl.n	8004698 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
 800468a:	0023      	movs	r3, r4
 800468c:	2200      	movs	r2, #0
 800468e:	335a      	adds	r3, #90	; 0x5a
 8004690:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8004692:	0020      	movs	r0, r4
 8004694:	f7ff feee 	bl	8004474 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004698:	2310      	movs	r3, #16
 800469a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800469c:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800469e:	4313      	orrs	r3, r2
 80046a0:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80046a2:	f7ff ffd3 	bl	800464c <HAL_UART_ErrorCallback>
}
 80046a6:	bd10      	pop	{r4, pc}

080046a8 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80046a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	0002      	movs	r2, r0
{
 80046ae:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80046b0:	325a      	adds	r2, #90	; 0x5a
 80046b2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80046b4:	3a08      	subs	r2, #8
 80046b6:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 80046b8:	f7ff ffc8 	bl	800464c <HAL_UART_ErrorCallback>
}
 80046bc:	bd10      	pop	{r4, pc}
	...

080046c0 <UART_SetConfig>:
{
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046c4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c6:	69c2      	ldr	r2, [r0, #28]
 80046c8:	6883      	ldr	r3, [r0, #8]
 80046ca:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046cc:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046ce:	4303      	orrs	r3, r0
 80046d0:	6960      	ldr	r0, [r4, #20]
 80046d2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046d4:	4835      	ldr	r0, [pc, #212]	; (80047ac <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80046d8:	4001      	ands	r1, r0
 80046da:	430b      	orrs	r3, r1
 80046dc:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046de:	686b      	ldr	r3, [r5, #4]
 80046e0:	4933      	ldr	r1, [pc, #204]	; (80047b0 <UART_SetConfig+0xf0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80046e2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	400b      	ands	r3, r1
 80046e6:	68e1      	ldr	r1, [r4, #12]
 80046e8:	430b      	orrs	r3, r1
 80046ea:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80046ec:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80046ee:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80046f0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80046f2:	4830      	ldr	r0, [pc, #192]	; (80047b4 <UART_SetConfig+0xf4>)
 80046f4:	4001      	ands	r1, r0
 80046f6:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046f8:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80046fa:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fc:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <UART_SetConfig+0xf8>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	400b      	ands	r3, r1
 8004702:	492e      	ldr	r1, [pc, #184]	; (80047bc <UART_SetConfig+0xfc>)
 8004704:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	429a      	cmp	r2, r3
 800470c:	d12c      	bne.n	8004768 <UART_SetConfig+0xa8>
    switch (clocksource)
 800470e:	2808      	cmp	r0, #8
 8004710:	d827      	bhi.n	8004762 <UART_SetConfig+0xa2>
 8004712:	f7fb fd01 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004716:	2605      	.short	0x2605
 8004718:	261e260b 	.word	0x261e260b
 800471c:	2626      	.short	0x2626
 800471e:	21          	.byte	0x21
 800471f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004720:	f7ff fb2a 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	0040      	lsls	r0, r0, #1
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	e002      	b.n	8004732 <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800472c:	6863      	ldr	r3, [r4, #4]
 800472e:	0858      	lsrs	r0, r3, #1
 8004730:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <UART_SetConfig+0x100>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004732:	18c0      	adds	r0, r0, r3
 8004734:	6861      	ldr	r1, [r4, #4]
 8004736:	f7fb fcf9 	bl	800012c <__udivsi3>
 800473a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800473c:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800473e:	220f      	movs	r2, #15
 8004740:	0019      	movs	r1, r3
 8004742:	4391      	bics	r1, r2
 8004744:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004746:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8004748:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800474a:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 800474c:	4313      	orrs	r3, r2
 800474e:	60cb      	str	r3, [r1, #12]
}
 8004750:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004752:	f7ff fa43 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8004756:	e7e5      	b.n	8004724 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004758:	6863      	ldr	r3, [r4, #4]
 800475a:	0858      	lsrs	r0, r3, #1
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	025b      	lsls	r3, r3, #9
 8004760:	e7e7      	b.n	8004732 <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8004762:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8004764:	2300      	movs	r3, #0
 8004766:	e7ea      	b.n	800473e <UART_SetConfig+0x7e>
    switch (clocksource)
 8004768:	2808      	cmp	r0, #8
 800476a:	d81d      	bhi.n	80047a8 <UART_SetConfig+0xe8>
 800476c:	f7fb fcd4 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004770:	1c0a1c05 	.word	0x1c0a1c05
 8004774:	1c1c1c14 	.word	0x1c1c1c14
 8004778:	17          	.byte	0x17
 8004779:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800477a:	f7ff fafd 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800477e:	6861      	ldr	r1, [r4, #4]
 8004780:	084b      	lsrs	r3, r1, #1
 8004782:	e002      	b.n	800478a <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004784:	6861      	ldr	r1, [r4, #4]
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <UART_SetConfig+0x104>)
 8004788:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800478a:	18c0      	adds	r0, r0, r3
 800478c:	f7fb fcce 	bl	800012c <__udivsi3>
 8004790:	b280      	uxth	r0, r0
 8004792:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004794:	2000      	movs	r0, #0
        break;
 8004796:	e7db      	b.n	8004750 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004798:	f7ff fa20 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 800479c:	e7ef      	b.n	800477e <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	6861      	ldr	r1, [r4, #4]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	0848      	lsrs	r0, r1, #1
 80047a6:	e7f0      	b.n	800478a <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80047a8:	2001      	movs	r0, #1
 80047aa:	e7d1      	b.n	8004750 <UART_SetConfig+0x90>
 80047ac:	ffff69f3 	.word	0xffff69f3
 80047b0:	ffffcfff 	.word	0xffffcfff
 80047b4:	fffff4ff 	.word	0xfffff4ff
 80047b8:	40021000 	.word	0x40021000
 80047bc:	08007920 	.word	0x08007920
 80047c0:	00f42400 	.word	0x00f42400
 80047c4:	007a1200 	.word	0x007a1200

080047c8 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80047ca:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047cc:	07da      	lsls	r2, r3, #31
 80047ce:	d506      	bpl.n	80047de <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047d0:	6801      	ldr	r1, [r0, #0]
 80047d2:	4c28      	ldr	r4, [pc, #160]	; (8004874 <UART_AdvFeatureConfig+0xac>)
 80047d4:	684a      	ldr	r2, [r1, #4]
 80047d6:	4022      	ands	r2, r4
 80047d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80047da:	4322      	orrs	r2, r4
 80047dc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047de:	079a      	lsls	r2, r3, #30
 80047e0:	d506      	bpl.n	80047f0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047e2:	6801      	ldr	r1, [r0, #0]
 80047e4:	4c24      	ldr	r4, [pc, #144]	; (8004878 <UART_AdvFeatureConfig+0xb0>)
 80047e6:	684a      	ldr	r2, [r1, #4]
 80047e8:	4022      	ands	r2, r4
 80047ea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80047ec:	4322      	orrs	r2, r4
 80047ee:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047f0:	075a      	lsls	r2, r3, #29
 80047f2:	d506      	bpl.n	8004802 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f4:	6801      	ldr	r1, [r0, #0]
 80047f6:	4c21      	ldr	r4, [pc, #132]	; (800487c <UART_AdvFeatureConfig+0xb4>)
 80047f8:	684a      	ldr	r2, [r1, #4]
 80047fa:	4022      	ands	r2, r4
 80047fc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80047fe:	4322      	orrs	r2, r4
 8004800:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004802:	071a      	lsls	r2, r3, #28
 8004804:	d506      	bpl.n	8004814 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004806:	6801      	ldr	r1, [r0, #0]
 8004808:	4c1d      	ldr	r4, [pc, #116]	; (8004880 <UART_AdvFeatureConfig+0xb8>)
 800480a:	684a      	ldr	r2, [r1, #4]
 800480c:	4022      	ands	r2, r4
 800480e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004810:	4322      	orrs	r2, r4
 8004812:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004814:	06da      	lsls	r2, r3, #27
 8004816:	d506      	bpl.n	8004826 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004818:	6801      	ldr	r1, [r0, #0]
 800481a:	4c1a      	ldr	r4, [pc, #104]	; (8004884 <UART_AdvFeatureConfig+0xbc>)
 800481c:	688a      	ldr	r2, [r1, #8]
 800481e:	4022      	ands	r2, r4
 8004820:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004822:	4322      	orrs	r2, r4
 8004824:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004826:	069a      	lsls	r2, r3, #26
 8004828:	d506      	bpl.n	8004838 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800482a:	6801      	ldr	r1, [r0, #0]
 800482c:	4c16      	ldr	r4, [pc, #88]	; (8004888 <UART_AdvFeatureConfig+0xc0>)
 800482e:	688a      	ldr	r2, [r1, #8]
 8004830:	4022      	ands	r2, r4
 8004832:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004834:	4322      	orrs	r2, r4
 8004836:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004838:	065a      	lsls	r2, r3, #25
 800483a:	d510      	bpl.n	800485e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800483c:	6801      	ldr	r1, [r0, #0]
 800483e:	4d13      	ldr	r5, [pc, #76]	; (800488c <UART_AdvFeatureConfig+0xc4>)
 8004840:	684a      	ldr	r2, [r1, #4]
 8004842:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004844:	402a      	ands	r2, r5
 8004846:	4322      	orrs	r2, r4
 8004848:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	0352      	lsls	r2, r2, #13
 800484e:	4294      	cmp	r4, r2
 8004850:	d105      	bne.n	800485e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004852:	684a      	ldr	r2, [r1, #4]
 8004854:	4c0e      	ldr	r4, [pc, #56]	; (8004890 <UART_AdvFeatureConfig+0xc8>)
 8004856:	4022      	ands	r2, r4
 8004858:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800485a:	4322      	orrs	r2, r4
 800485c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800485e:	061b      	lsls	r3, r3, #24
 8004860:	d506      	bpl.n	8004870 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004862:	6802      	ldr	r2, [r0, #0]
 8004864:	490b      	ldr	r1, [pc, #44]	; (8004894 <UART_AdvFeatureConfig+0xcc>)
 8004866:	6853      	ldr	r3, [r2, #4]
 8004868:	400b      	ands	r3, r1
 800486a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800486c:	430b      	orrs	r3, r1
 800486e:	6053      	str	r3, [r2, #4]
}
 8004870:	bd30      	pop	{r4, r5, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	fffdffff 	.word	0xfffdffff
 8004878:	fffeffff 	.word	0xfffeffff
 800487c:	fffbffff 	.word	0xfffbffff
 8004880:	ffff7fff 	.word	0xffff7fff
 8004884:	ffffefff 	.word	0xffffefff
 8004888:	ffffdfff 	.word	0xffffdfff
 800488c:	ffefffff 	.word	0xffefffff
 8004890:	ff9fffff 	.word	0xff9fffff
 8004894:	fff7ffff 	.word	0xfff7ffff

08004898 <HAL_UART_Init>:
{
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800489e:	2001      	movs	r0, #1
}
 80048a0:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80048a2:	0005      	movs	r5, r0
 80048a4:	3569      	adds	r5, #105	; 0x69
 80048a6:	782b      	ldrb	r3, [r5, #0]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80048ae:	0002      	movs	r2, r0
 80048b0:	3268      	adds	r2, #104	; 0x68
 80048b2:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80048b4:	f000 fec8 	bl	8005648 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80048b8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80048ba:	2101      	movs	r1, #1
 80048bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80048be:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80048c0:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c2:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80048c4:	438b      	bics	r3, r1
 80048c6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c8:	f7ff fefa 	bl	80046c0 <UART_SetConfig>
 80048cc:	2801      	cmp	r0, #1
 80048ce:	d0e6      	beq.n	800489e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80048d6:	0020      	movs	r0, r4
 80048d8:	f7ff ff76 	bl	80047c8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	490b      	ldr	r1, [pc, #44]	; (800490c <HAL_UART_Init+0x74>)
 80048e0:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e2:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80048e4:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80048e6:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80048e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	438a      	bics	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80048f0:	2201      	movs	r2, #1
 80048f2:	6819      	ldr	r1, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 80048fa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 80048fe:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8004900:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8004902:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8004906:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004908:	e7ca      	b.n	80048a0 <HAL_UART_Init+0x8>
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	fffff7ff 	.word	0xfffff7ff

08004910 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004910:	0003      	movs	r3, r0
{
 8004912:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004914:	3369      	adds	r3, #105	; 0x69
 8004916:	781b      	ldrb	r3, [r3, #0]
{
 8004918:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800491a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800491c:	2b21      	cmp	r3, #33	; 0x21
 800491e:	d10f      	bne.n	8004940 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8004920:	0014      	movs	r4, r2
 8004922:	3452      	adds	r4, #82	; 0x52
 8004924:	8823      	ldrh	r3, [r4, #0]
 8004926:	6811      	ldr	r1, [r2, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800492e:	680a      	ldr	r2, [r1, #0]
 8004930:	307e      	adds	r0, #126	; 0x7e
 8004932:	4382      	bics	r2, r0
 8004934:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004936:	2240      	movs	r2, #64	; 0x40
 8004938:	6808      	ldr	r0, [r1, #0]
 800493a:	4302      	orrs	r2, r0
 800493c:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 800493e:	2000      	movs	r0, #0
  }
}
 8004940:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004942:	2080      	movs	r0, #128	; 0x80
 8004944:	6895      	ldr	r5, [r2, #8]
 8004946:	0140      	lsls	r0, r0, #5
 8004948:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800494a:	4285      	cmp	r5, r0
 800494c:	d10d      	bne.n	800496a <UART_Transmit_IT+0x5a>
 800494e:	6910      	ldr	r0, [r2, #16]
 8004950:	2800      	cmp	r0, #0
 8004952:	d10a      	bne.n	800496a <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004954:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 8004956:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004958:	05c0      	lsls	r0, r0, #23
 800495a:	0dc0      	lsrs	r0, r0, #23
 800495c:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800495e:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 8004960:	8823      	ldrh	r3, [r4, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	8023      	strh	r3, [r4, #0]
 8004968:	e7e9      	b.n	800493e <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800496a:	1c58      	adds	r0, r3, #1
 800496c:	64d0      	str	r0, [r2, #76]	; 0x4c
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	850b      	strh	r3, [r1, #40]	; 0x28
 8004972:	e7f5      	b.n	8004960 <UART_Transmit_IT+0x50>

08004974 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004974:	2140      	movs	r1, #64	; 0x40
 8004976:	6802      	ldr	r2, [r0, #0]
{
 8004978:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800497a:	6813      	ldr	r3, [r2, #0]
 800497c:	438b      	bics	r3, r1
 800497e:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004980:	0003      	movs	r3, r0
 8004982:	2220      	movs	r2, #32
 8004984:	3369      	adds	r3, #105	; 0x69
 8004986:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 8004988:	f000 f96c 	bl	8004c64 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800498c:	2000      	movs	r0, #0
 800498e:	bd10      	pop	{r4, pc}

08004990 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004990:	0002      	movs	r2, r0
{
 8004992:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004994:	326a      	adds	r2, #106	; 0x6a
 8004996:	7811      	ldrb	r1, [r2, #0]
 8004998:	6803      	ldr	r3, [r0, #0]
 800499a:	2922      	cmp	r1, #34	; 0x22
 800499c:	d12d      	bne.n	80049fa <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 800499e:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a0:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80049a2:	315c      	adds	r1, #92	; 0x5c
 80049a4:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049a6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a8:	0164      	lsls	r4, r4, #5
 80049aa:	4029      	ands	r1, r5
 80049ac:	6885      	ldr	r5, [r0, #8]
 80049ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80049b0:	42a5      	cmp	r5, r4
 80049b2:	d11e      	bne.n	80049f2 <UART_Receive_IT+0x62>
 80049b4:	6904      	ldr	r4, [r0, #16]
 80049b6:	2c00      	cmp	r4, #0
 80049b8:	d11b      	bne.n	80049f2 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80049ba:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80049bc:	3302      	adds	r3, #2
 80049be:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80049c0:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 80049c2:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 80049c4:	315a      	adds	r1, #90	; 0x5a
 80049c6:	880b      	ldrh	r3, [r1, #0]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	800b      	strh	r3, [r1, #0]
 80049ce:	42a3      	cmp	r3, r4
 80049d0:	d10d      	bne.n	80049ee <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d2:	6803      	ldr	r3, [r0, #0]
 80049d4:	4d0c      	ldr	r5, [pc, #48]	; (8004a08 <UART_Receive_IT+0x78>)
 80049d6:	6819      	ldr	r1, [r3, #0]
 80049d8:	4029      	ands	r1, r5
 80049da:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	6899      	ldr	r1, [r3, #8]
 80049de:	3523      	adds	r5, #35	; 0x23
 80049e0:	35ff      	adds	r5, #255	; 0xff
 80049e2:	43a9      	bics	r1, r5
 80049e4:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80049e6:	2320      	movs	r3, #32
 80049e8:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 80049ea:	f000 f8ff 	bl	8004bec <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80049ee:	0020      	movs	r0, r4
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049f2:	1c5c      	adds	r4, r3, #1
 80049f4:	6544      	str	r4, [r0, #84]	; 0x54
 80049f6:	7019      	strb	r1, [r3, #0]
 80049f8:	e7e2      	b.n	80049c0 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049fa:	2208      	movs	r2, #8
 80049fc:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 80049fe:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a00:	430a      	orrs	r2, r1
 8004a02:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8004a04:	e7f3      	b.n	80049ee <UART_Receive_IT+0x5e>
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	fffffedf 	.word	0xfffffedf

08004a0c <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004a0c:	220f      	movs	r2, #15
{
 8004a0e:	b570      	push	{r4, r5, r6, lr}
 8004a10:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a12:	6800      	ldr	r0, [r0, #0]
 8004a14:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a16:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004a18:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8004a1a:	d108      	bne.n	8004a2e <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a1c:	2520      	movs	r5, #32
 8004a1e:	422b      	tst	r3, r5
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_IRQHandler+0x22>
 8004a22:	4229      	tst	r1, r5
 8004a24:	d003      	beq.n	8004a2e <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8004a26:	0020      	movs	r0, r4
 8004a28:	f7ff ffb2 	bl	8004990 <UART_Receive_IT>
}
 8004a2c:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8004a2e:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	d060      	beq.n	8004af6 <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8004a34:	2201      	movs	r2, #1
 8004a36:	4015      	ands	r5, r2
 8004a38:	d103      	bne.n	8004a42 <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8004a3a:	2690      	movs	r6, #144	; 0x90
 8004a3c:	0076      	lsls	r6, r6, #1
 8004a3e:	4231      	tst	r1, r6
 8004a40:	d059      	beq.n	8004af6 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a42:	4213      	tst	r3, r2
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_IRQHandler+0x46>
 8004a46:	05ce      	lsls	r6, r1, #23
 8004a48:	d503      	bpl.n	8004a52 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8004a4a:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a4c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8004a4e:	4332      	orrs	r2, r6
 8004a50:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a52:	2202      	movs	r2, #2
 8004a54:	4213      	tst	r3, r2
 8004a56:	d006      	beq.n	8004a66 <HAL_UART_IRQHandler+0x5a>
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	d004      	beq.n	8004a66 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8004a5c:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a5e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8004a60:	1892      	adds	r2, r2, r2
 8004a62:	4332      	orrs	r2, r6
 8004a64:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a66:	2204      	movs	r2, #4
 8004a68:	4213      	tst	r3, r2
 8004a6a:	d006      	beq.n	8004a7a <HAL_UART_IRQHandler+0x6e>
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	d004      	beq.n	8004a7a <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8004a70:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a72:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8004a74:	3a02      	subs	r2, #2
 8004a76:	4332      	orrs	r2, r6
 8004a78:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004a7a:	071a      	lsls	r2, r3, #28
 8004a7c:	d508      	bpl.n	8004a90 <HAL_UART_IRQHandler+0x84>
 8004a7e:	068a      	lsls	r2, r1, #26
 8004a80:	d401      	bmi.n	8004a86 <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	d004      	beq.n	8004a90 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8004a86:	2208      	movs	r2, #8
 8004a88:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a8a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004a8c:	4302      	orrs	r2, r0
 8004a8e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a90:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	d0ca      	beq.n	8004a2c <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a96:	2220      	movs	r2, #32
 8004a98:	4213      	tst	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x9a>
 8004a9c:	4211      	tst	r1, r2
 8004a9e:	d002      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8004aa0:	0020      	movs	r0, r4
 8004aa2:	f7ff ff75 	bl	8004990 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004aa6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8004aa8:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004aaa:	071b      	lsls	r3, r3, #28
 8004aac:	d404      	bmi.n	8004ab8 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	689d      	ldr	r5, [r3, #8]
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004ab6:	d01a      	beq.n	8004aee <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8004ab8:	f7ff fcdc 	bl	8004474 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	2140      	movs	r1, #64	; 0x40
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	420a      	tst	r2, r1
 8004ac4:	d00f      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac6:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8004ac8:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aca:	438a      	bics	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ad2:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <HAL_UART_IRQHandler+0x114>)
 8004ad4:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ad6:	f7fe fd6a 	bl	80035ae <HAL_DMA_Abort_IT>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d0a6      	beq.n	8004a2c <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ade:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004ae0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ae2:	4798      	blx	r3
 8004ae4:	e7a2      	b.n	8004a2c <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8004ae6:	0020      	movs	r0, r4
 8004ae8:	f7ff fdb0 	bl	800464c <HAL_UART_ErrorCallback>
 8004aec:	e79e      	b.n	8004a2c <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8004aee:	f7ff fdad 	bl	800464c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af2:	66e5      	str	r5, [r4, #108]	; 0x6c
 8004af4:	e79a      	b.n	8004a2c <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004af6:	2280      	movs	r2, #128	; 0x80
 8004af8:	4213      	tst	r3, r2
 8004afa:	d005      	beq.n	8004b08 <HAL_UART_IRQHandler+0xfc>
 8004afc:	4211      	tst	r1, r2
 8004afe:	d003      	beq.n	8004b08 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8004b00:	0020      	movs	r0, r4
 8004b02:	f7ff ff05 	bl	8004910 <UART_Transmit_IT>
    return;
 8004b06:	e791      	b.n	8004a2c <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b08:	2240      	movs	r2, #64	; 0x40
 8004b0a:	4213      	tst	r3, r2
 8004b0c:	d100      	bne.n	8004b10 <HAL_UART_IRQHandler+0x104>
 8004b0e:	e78d      	b.n	8004a2c <HAL_UART_IRQHandler+0x20>
 8004b10:	4211      	tst	r1, r2
 8004b12:	d100      	bne.n	8004b16 <HAL_UART_IRQHandler+0x10a>
 8004b14:	e78a      	b.n	8004a2c <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8004b16:	0020      	movs	r0, r4
 8004b18:	f7ff ff2c 	bl	8004974 <UART_EndTransmit_IT>
    return;
 8004b1c:	e786      	b.n	8004a2c <HAL_UART_IRQHandler+0x20>
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	080046a9 	.word	0x080046a9

08004b24 <get_current_potentiometer>:
#include "function.h"
#include "variables.h"
#define R 155		// Resistor chosen in H-brigde circuit to transform proportional current to a voltage

void get_current_potentiometer(){
	sampledCurrent = ADC_buffer[1];
 8004b24:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <get_current_potentiometer+0x8c>)
void get_current_potentiometer(){
 8004b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sampledCurrent = ADC_buffer[1];
 8004b28:	681b      	ldr	r3, [r3, #0]
	sampledPotentiometer = ADC_buffer[0];

	prevprev_q1 = prev_q1;
	prev_q1 = q1;
 8004b2a:	4f22      	ldr	r7, [pc, #136]	; (8004bb4 <get_current_potentiometer+0x90>)
	sampledCurrent = ADC_buffer[1];
 8004b2c:	685a      	ldr	r2, [r3, #4]
	prev_q1 = q1;
 8004b2e:	683d      	ldr	r5, [r7, #0]
	sampledCurrent = ADC_buffer[1];
 8004b30:	9201      	str	r2, [sp, #4]
 8004b32:	9901      	ldr	r1, [sp, #4]
 8004b34:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <get_current_potentiometer+0x94>)
	sampledPotentiometer = ADC_buffer[0];
 8004b36:	4e21      	ldr	r6, [pc, #132]	; (8004bbc <get_current_potentiometer+0x98>)
	sampledCurrent = ADC_buffer[1];
 8004b38:	6011      	str	r1, [r2, #0]
	sampledPotentiometer = ADC_buffer[0];
 8004b3a:	6818      	ldr	r0, [r3, #0]
	prevprev_q1 = prev_q1;
 8004b3c:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <get_current_potentiometer+0x9c>)
 8004b3e:	4a21      	ldr	r2, [pc, #132]	; (8004bc4 <get_current_potentiometer+0xa0>)
 8004b40:	6819      	ldr	r1, [r3, #0]
	prev_q1 = q1;
 8004b42:	601d      	str	r5, [r3, #0]
	q1_new = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 8004b44:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <get_current_potentiometer+0xa4>)
	prevprev_q1 = prev_q1;
 8004b46:	6011      	str	r1, [r2, #0]
	q1_new = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 8004b48:	681b      	ldr	r3, [r3, #0]
	sampledPotentiometer = ADC_buffer[0];
 8004b4a:	6030      	str	r0, [r6, #0]
	q1_new = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 8004b4c:	1ac0      	subs	r0, r0, r3
 8004b4e:	f7fc fb37 	bl	80011c0 <__aeabi_i2f>
 8004b52:	491e      	ldr	r1, [pc, #120]	; (8004bcc <get_current_potentiometer+0xa8>)
 8004b54:	f7fc f878 	bl	8000c48 <__aeabi_fmul>
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <get_current_potentiometer+0xac>)

	if (q1_new - prev_q1 > 0.05 || prev_q1 - q1_new > 0.05){
 8004b5a:	1c29      	adds	r1, r5, #0
	q1_new = ((int32_t)sampledPotentiometer-(int32_t)startval_sampledPotentiometer)*0.00153f;
 8004b5c:	6018      	str	r0, [r3, #0]
 8004b5e:	1c04      	adds	r4, r0, #0
	if (q1_new - prev_q1 > 0.05 || prev_q1 - q1_new > 0.05){
 8004b60:	f7fc f992 	bl	8000e88 <__aeabi_fsub>
 8004b64:	f7fe f8cc 	bl	8002d00 <__aeabi_f2d>
 8004b68:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <get_current_potentiometer+0xb0>)
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <get_current_potentiometer+0xb4>)
 8004b6c:	f7fb fc7e 	bl	800046c <__aeabi_dcmpgt>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d10b      	bne.n	8004b8c <get_current_potentiometer+0x68>
 8004b74:	1c21      	adds	r1, r4, #0
 8004b76:	1c28      	adds	r0, r5, #0
 8004b78:	f7fc f986 	bl	8000e88 <__aeabi_fsub>
 8004b7c:	f7fe f8c0 	bl	8002d00 <__aeabi_f2d>
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <get_current_potentiometer+0xb0>)
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <get_current_potentiometer+0xb4>)
 8004b84:	f7fb fc72 	bl	800046c <__aeabi_dcmpgt>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d000      	beq.n	8004b8e <get_current_potentiometer+0x6a>
		q1 = q1_new;
 8004b8c:	603c      	str	r4, [r7, #0]
	}

	torque = (sampledCurrent<<9);
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <get_current_potentiometer+0xb8>)
//	q1dot = (prevprev_q1 - prev_q1<<2+3*q1)/(time<<2); // time variable needs to change




	sprintf(send_torque,"%lu", sampledCurrent);
 8004b92:	4c13      	ldr	r4, [pc, #76]	; (8004be0 <get_current_potentiometer+0xbc>)
	torque = (sampledCurrent<<9);
 8004b94:	701a      	strb	r2, [r3, #0]
	sprintf(send_torque,"%lu", sampledCurrent);
 8004b96:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <get_current_potentiometer+0xc0>)
 8004b98:	9a01      	ldr	r2, [sp, #4]
 8004b9a:	0021      	movs	r1, r4
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	f001 f8b1 	bl	8005d04 <siprintf>
	sprintf(send_q1,"%lu", sampledPotentiometer);
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <get_current_potentiometer+0xc4>)
 8004ba4:	6832      	ldr	r2, [r6, #0]
 8004ba6:	0021      	movs	r1, r4
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f001 f8ab 	bl	8005d04 <siprintf>
	// Do conversion equation to get 'real' value



	// store in buffer to be send across UART
}
 8004bae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004bb0:	200000a8 	.word	0x200000a8
 8004bb4:	200000d4 	.word	0x200000d4
 8004bb8:	200000f4 	.word	0x200000f4
 8004bbc:	200000f8 	.word	0x200000f8
 8004bc0:	200000c0 	.word	0x200000c0
 8004bc4:	200000c8 	.word	0x200000c8
 8004bc8:	20000020 	.word	0x20000020
 8004bcc:	3ac88a48 	.word	0x3ac88a48
 8004bd0:	200000d8 	.word	0x200000d8
 8004bd4:	9999999a 	.word	0x9999999a
 8004bd8:	3fa99999 	.word	0x3fa99999
 8004bdc:	20000130 	.word	0x20000130
 8004be0:	08007924 	.word	0x08007924
 8004be4:	2000010c 	.word	0x2000010c
 8004be8:	20000100 	.word	0x20000100

08004bec <HAL_UART_RxCpltCallback>:
#define KI


// interrupt when byte is received on UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	uart_flag = 1;
 8004bec:	2201      	movs	r2, #1
 8004bee:	4b01      	ldr	r3, [pc, #4]	; (8004bf4 <HAL_UART_RxCpltCallback+0x8>)
 8004bf0:	701a      	strb	r2, [r3, #0]
}
 8004bf2:	4770      	bx	lr
 8004bf4:	20000131 	.word	0x20000131

08004bf8 <HAL_GPIO_EXTI_Callback>:

//interrupt when encoder is experiencing an rising or falling edge
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	encoder_flag = 1;
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <HAL_GPIO_EXTI_Callback+0x8>)
 8004bfc:	701a      	strb	r2, [r3, #0]

}
 8004bfe:	4770      	bx	lr
 8004c00:	200000be 	.word	0x200000be

08004c04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance == htim16.Instance){
 8004c04:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004c06:	6803      	ldr	r3, [r0, #0]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d103      	bne.n	8004c16 <HAL_TIM_PeriodElapsedCallback+0x12>
		send_data_flag = 1;
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004c12:	701a      	strb	r2, [r3, #0]
		adc_flag = 1;
		data_flag = 1;
	}
//	data_flag = 1;
//	adc_flag = 1;
}
 8004c14:	4770      	bx	lr
	else if(htim->Instance == htim14.Instance){
 8004c16:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d1fa      	bne.n	8004c14 <HAL_TIM_PeriodElapsedCallback+0x10>
		adc_flag = 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004c22:	7013      	strb	r3, [r2, #0]
		data_flag = 1;
 8004c24:	4a05      	ldr	r2, [pc, #20]	; (8004c3c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004c26:	7013      	strb	r3, [r2, #0]
}
 8004c28:	e7f4      	b.n	8004c14 <HAL_TIM_PeriodElapsedCallback+0x10>
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	2000030c 	.word	0x2000030c
 8004c30:	2000001c 	.word	0x2000001c
 8004c34:	2000023c 	.word	0x2000023c
 8004c38:	200000ac 	.word	0x200000ac
 8004c3c:	200000bc 	.word	0x200000bc

08004c40 <HAL_TIM_OC_DelayElapsedCallback>:
 8004c40:	2201      	movs	r2, #1
 8004c42:	4b01      	ldr	r3, [pc, #4]	; (8004c48 <HAL_TIM_OC_DelayElapsedCallback+0x8>)
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	4770      	bx	lr
 8004c48:	200000d0 	.word	0x200000d0

08004c4c <HAL_TIM_IC_CaptureCallback>:
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	4b01      	ldr	r3, [pc, #4]	; (8004c54 <HAL_TIM_IC_CaptureCallback+0x8>)
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	4770      	bx	lr
 8004c54:	200000d0 	.word	0x200000d0

08004c58 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
 8004c58:	2201      	movs	r2, #1
 8004c5a:	4b01      	ldr	r3, [pc, #4]	; (8004c60 <HAL_TIM_PWM_PulseFinishedCallback+0x8>)
 8004c5c:	701a      	strb	r2, [r3, #0]
}
 8004c5e:	4770      	bx	lr
 8004c60:	200000d0 	.word	0x200000d0

08004c64 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
	memset(rx_buffer,0x00, 8);
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <HAL_UART_TxCpltCallback+0x20>)
void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 8004c66:	b510      	push	{r4, lr}
	memset(rx_buffer,0x00, 8);
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f000 ff86 	bl	8005b7e <memset>
	rx_buffer_cntr = 0;
 8004c72:	2100      	movs	r1, #0
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_UART_TxCpltCallback+0x24>)
	memset(data_buffer,0x00,40);
 8004c76:	2228      	movs	r2, #40	; 0x28
	rx_buffer_cntr = 0;
 8004c78:	7019      	strb	r1, [r3, #0]
	memset(data_buffer,0x00,40);
 8004c7a:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <HAL_UART_TxCpltCallback+0x28>)
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	f000 ff7e 	bl	8005b7e <memset>
}
 8004c82:	bd10      	pop	{r4, pc}
 8004c84:	200000ec 	.word	0x200000ec
 8004c88:	200000f0 	.word	0x200000f0
 8004c8c:	200000b8 	.word	0x200000b8

08004c90 <read_motor_position>:


void read_motor_position(){

	prevprev_q2 = prev_q2;
 8004c90:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <read_motor_position+0x44>)
void read_motor_position(){
 8004c92:	b570      	push	{r4, r5, r6, lr}
	prevprev_q2 = prev_q2;
 8004c94:	6819      	ldr	r1, [r3, #0]
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <read_motor_position+0x48>)
	prev_q2 = q2;
 8004c98:	4d10      	ldr	r5, [pc, #64]	; (8004cdc <read_motor_position+0x4c>)
	prevprev_q2 = prev_q2;
 8004c9a:	6011      	str	r1, [r2, #0]
	prev_q2 = q2;
 8004c9c:	682a      	ldr	r2, [r5, #0]

	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8004c9e:	2120      	movs	r1, #32
 8004ca0:	480f      	ldr	r0, [pc, #60]	; (8004ce0 <read_motor_position+0x50>)
	prev_q2 = q2;
 8004ca2:	601a      	str	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8004ca4:	f7fe fda0 	bl	80037e8 <HAL_GPIO_ReadPin>
 8004ca8:	4c0e      	ldr	r4, [pc, #56]	; (8004ce4 <read_motor_position+0x54>)
 8004caa:	4e0f      	ldr	r6, [pc, #60]	; (8004ce8 <read_motor_position+0x58>)
		q2_steps -= 1;
 8004cac:	6823      	ldr	r3, [r4, #0]
	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8004cae:	2801      	cmp	r0, #1
 8004cb0:	d10e      	bne.n	8004cd0 <read_motor_position+0x40>
		q2_steps -= 1;
 8004cb2:	1e58      	subs	r0, r3, #1
		q2 = q2_steps*dir_increment_size;
	}
	else{ // actuated pendulum is turning anti-clockwise
		q2_steps += 1;
 8004cb4:	6020      	str	r0, [r4, #0]
		q2 = q2_steps*dir_increment_size;
 8004cb6:	f7fc fa83 	bl	80011c0 <__aeabi_i2f>
 8004cba:	6831      	ldr	r1, [r6, #0]
 8004cbc:	f7fb ffc4 	bl	8000c48 <__aeabi_fmul>
	}
	sprintf(send_q2,"%d", q2_steps);
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <read_motor_position+0x5c>)
		q2 = q2_steps*dir_increment_size;
 8004cc2:	6028      	str	r0, [r5, #0]
	sprintf(send_q2,"%d", q2_steps);
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	490a      	ldr	r1, [pc, #40]	; (8004cf0 <read_motor_position+0x60>)
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f001 f81b 	bl	8005d04 <siprintf>

	//three point backward difference
//	q2dot = (prevprev_q2 - prev_q2<<2+3*q2)/(2*time); // time variable needs to change

}
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
		q2_steps += 1;
 8004cd0:	1c58      	adds	r0, r3, #1
 8004cd2:	e7ef      	b.n	8004cb4 <read_motor_position+0x24>
 8004cd4:	200000c4 	.word	0x200000c4
 8004cd8:	200000cc 	.word	0x200000cc
 8004cdc:	200000e0 	.word	0x200000e0
 8004ce0:	48000400 	.word	0x48000400
 8004ce4:	200000e4 	.word	0x200000e4
 8004ce8:	2000000c 	.word	0x2000000c
 8004cec:	20000104 	.word	0x20000104
 8004cf0:	08007928 	.word	0x08007928

08004cf4 <output_torque>:

void output_torque(uint8_t dir, uint8_t duty_cycle){
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	000c      	movs	r4, r1
 8004cfa:	4d07      	ldr	r5, [pc, #28]	; (8004d18 <output_torque+0x24>)
	if(duty_cycle < 30){ // safety percaustion to ensure safety
 8004cfc:	291d      	cmp	r1, #29
 8004cfe:	d803      	bhi.n	8004d08 <output_torque+0x14>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100 ); // stop motor
 8004d00:	2264      	movs	r2, #100	; 0x64
 8004d02:	682b      	ldr	r3, [r5, #0]
 8004d04:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,dir);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
	}
}
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,dir);
 8004d08:	2090      	movs	r0, #144	; 0x90
 8004d0a:	2120      	movs	r1, #32
 8004d0c:	05c0      	lsls	r0, r0, #23
 8004d0e:	f7fe fd71 	bl	80037f4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
 8004d12:	682b      	ldr	r3, [r5, #0]
 8004d14:	639c      	str	r4, [r3, #56]	; 0x38
}
 8004d16:	e7f6      	b.n	8004d06 <output_torque+0x12>
 8004d18:	20000148 	.word	0x20000148

08004d1c <control_law>:

void control_law(){
//	if in the non-linear control region
	q2dot = (prevprev_q2 - prev_q2*4+3*q2)/(2*time_del);
 8004d1c:	4bc2      	ldr	r3, [pc, #776]	; (8005028 <control_law+0x30c>)
void control_law(){
 8004d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
	q2dot = (prevprev_q2 - prev_q2*4+3*q2)/(2*time_del);
 8004d20:	681c      	ldr	r4, [r3, #0]
 8004d22:	4bc2      	ldr	r3, [pc, #776]	; (800502c <control_law+0x310>)
void control_law(){
 8004d24:	b08b      	sub	sp, #44	; 0x2c
	q2dot = (prevprev_q2 - prev_q2*4+3*q2)/(2*time_del);
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	1c01      	adds	r1, r0, #0
 8004d2a:	f7fb fc0b 	bl	8000544 <__aeabi_fadd>
 8004d2e:	2181      	movs	r1, #129	; 0x81
 8004d30:	4bbf      	ldr	r3, [pc, #764]	; (8005030 <control_law+0x314>)
 8004d32:	1c06      	adds	r6, r0, #0
 8004d34:	05c9      	lsls	r1, r1, #23
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	f7fb ff86 	bl	8000c48 <__aeabi_fmul>
 8004d3c:	4bbd      	ldr	r3, [pc, #756]	; (8005034 <control_law+0x318>)
 8004d3e:	1c01      	adds	r1, r0, #0
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	f7fc f8a1 	bl	8000e88 <__aeabi_fsub>
 8004d46:	49bc      	ldr	r1, [pc, #752]	; (8005038 <control_law+0x31c>)
 8004d48:	1c05      	adds	r5, r0, #0
 8004d4a:	1c20      	adds	r0, r4, #0
 8004d4c:	f7fb ff7c 	bl	8000c48 <__aeabi_fmul>
 8004d50:	1c01      	adds	r1, r0, #0
 8004d52:	1c28      	adds	r0, r5, #0
 8004d54:	f7fb fbf6 	bl	8000544 <__aeabi_fadd>
 8004d58:	1c31      	adds	r1, r6, #0
 8004d5a:	f7fb fd85 	bl	8000868 <__aeabi_fdiv>
	q1dot = (prevprev_q1 - prev_q1*4+3*q1)/(2*time_del);
 8004d5e:	2181      	movs	r1, #129	; 0x81
	q2dot = (prevprev_q2 - prev_q2*4+3*q2)/(2*time_del);
 8004d60:	4bb6      	ldr	r3, [pc, #728]	; (800503c <control_law+0x320>)
 8004d62:	9000      	str	r0, [sp, #0]
 8004d64:	6018      	str	r0, [r3, #0]
	q1dot = (prevprev_q1 - prev_q1*4+3*q1)/(2*time_del);
 8004d66:	4bb6      	ldr	r3, [pc, #728]	; (8005040 <control_law+0x324>)
 8004d68:	05c9      	lsls	r1, r1, #23
 8004d6a:	681d      	ldr	r5, [r3, #0]
 8004d6c:	4bb5      	ldr	r3, [pc, #724]	; (8005044 <control_law+0x328>)
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	f7fb ff6a 	bl	8000c48 <__aeabi_fmul>
 8004d74:	4bb4      	ldr	r3, [pc, #720]	; (8005048 <control_law+0x32c>)
 8004d76:	1c01      	adds	r1, r0, #0
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f7fc f885 	bl	8000e88 <__aeabi_fsub>
 8004d7e:	49ae      	ldr	r1, [pc, #696]	; (8005038 <control_law+0x31c>)
 8004d80:	1c07      	adds	r7, r0, #0
 8004d82:	1c28      	adds	r0, r5, #0
 8004d84:	f7fb ff60 	bl	8000c48 <__aeabi_fmul>
 8004d88:	1c01      	adds	r1, r0, #0
 8004d8a:	1c38      	adds	r0, r7, #0
 8004d8c:	f7fb fbda 	bl	8000544 <__aeabi_fadd>
 8004d90:	1c31      	adds	r1, r6, #0
 8004d92:	f7fb fd69 	bl	8000868 <__aeabi_fdiv>
 8004d96:	4bad      	ldr	r3, [pc, #692]	; (800504c <control_law+0x330>)
 8004d98:	9001      	str	r0, [sp, #4]
 8004d9a:	6018      	str	r0, [r3, #0]
//	time_del = htim14.Instance->CNT;
	cos_q2 = cos(q2);
 8004d9c:	1c20      	adds	r0, r4, #0
 8004d9e:	f7fd ffaf 	bl	8002d00 <__aeabi_f2d>
 8004da2:	0006      	movs	r6, r0
 8004da4:	000f      	movs	r7, r1
 8004da6:	f001 fc93 	bl	80066d0 <cos>
 8004daa:	f7fd fffb 	bl	8002da4 <__aeabi_d2f>
 8004dae:	4ba8      	ldr	r3, [pc, #672]	; (8005050 <control_law+0x334>)
 8004db0:	9002      	str	r0, [sp, #8]
	sin_q2 = sin(q2);
 8004db2:	0039      	movs	r1, r7
	cos_q2 = cos(q2);
 8004db4:	6018      	str	r0, [r3, #0]
	sin_q2 = sin(q2);
 8004db6:	0030      	movs	r0, r6
 8004db8:	f001 fcd0 	bl	800675c <sin>
 8004dbc:	f7fd fff2 	bl	8002da4 <__aeabi_d2f>
 8004dc0:	4ba4      	ldr	r3, [pc, #656]	; (8005054 <control_law+0x338>)
	sin_q1_q2 = sin(q1+q2);
 8004dc2:	1c29      	adds	r1, r5, #0
	sin_q2 = sin(q2);
 8004dc4:	6018      	str	r0, [r3, #0]
 8004dc6:	9003      	str	r0, [sp, #12]
	sin_q1_q2 = sin(q1+q2);
 8004dc8:	1c20      	adds	r0, r4, #0
 8004dca:	f7fb fbbb 	bl	8000544 <__aeabi_fadd>
 8004dce:	f7fd ff97 	bl	8002d00 <__aeabi_f2d>
 8004dd2:	f001 fcc3 	bl	800675c <sin>
 8004dd6:	f7fd ffe5 	bl	8002da4 <__aeabi_d2f>
 8004dda:	4b9f      	ldr	r3, [pc, #636]	; (8005058 <control_law+0x33c>)
 8004ddc:	9004      	str	r0, [sp, #16]
 8004dde:	6018      	str	r0, [r3, #0]

	controller_torque = a*q2dot - a*q1dot + b*sin_q1_q2 + c*(q1dot*q1dot)*sin_q2 + \
 8004de0:	4b9e      	ldr	r3, [pc, #632]	; (800505c <control_law+0x340>)
	((d*((cos_q2 + e)*(cos_q2 + e)))/(f*cos_q2 + g) - h)*(i*q2 + j*q2dot - k*atan(q1dot)) - \
 8004de2:	9802      	ldr	r0, [sp, #8]
	controller_torque = a*q2dot - a*q1dot + b*sin_q1_q2 + c*(q1dot*q1dot)*sin_q2 + \
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	9305      	str	r3, [sp, #20]
	((d*((cos_q2 + e)*(cos_q2 + e)))/(f*cos_q2 + g) - h)*(i*q2 + j*q2dot - k*atan(q1dot)) - \
 8004de8:	4b9d      	ldr	r3, [pc, #628]	; (8005060 <control_law+0x344>)
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	f7fb fbaa 	bl	8000544 <__aeabi_fadd>
 8004df0:	1c06      	adds	r6, r0, #0
 8004df2:	9801      	ldr	r0, [sp, #4]
 8004df4:	f7fd ff84 	bl	8002d00 <__aeabi_f2d>
 8004df8:	f001 fae2 	bl	80063c0 <atan>
 8004dfc:	9006      	str	r0, [sp, #24]
 8004dfe:	9107      	str	r1, [sp, #28]
	(1.0*(l*cos_q2 + m)*(-n*sin_q2*(q2dot*q2dot) - o*q1dot*sin_q2*q2dot + p*sin_q1_q2 \
	+ q*(float)sin(q1) + r))/(s*cos_q2 + t);
 8004e00:	1c28      	adds	r0, r5, #0
 8004e02:	f7fd ff7d 	bl	8002d00 <__aeabi_f2d>
 8004e06:	f001 fca9 	bl	800675c <sin>
 8004e0a:	9008      	str	r0, [sp, #32]
 8004e0c:	9109      	str	r1, [sp, #36]	; 0x24
	((d*((cos_q2 + e)*(cos_q2 + e)))/(f*cos_q2 + g) - h)*(i*q2 + j*q2dot - k*atan(q1dot)) - \
 8004e0e:	1c31      	adds	r1, r6, #0
 8004e10:	1c30      	adds	r0, r6, #0
 8004e12:	f7fb ff19 	bl	8000c48 <__aeabi_fmul>
 8004e16:	4b93      	ldr	r3, [pc, #588]	; (8005064 <control_law+0x348>)
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	f7fb ff15 	bl	8000c48 <__aeabi_fmul>
 8004e1e:	4b92      	ldr	r3, [pc, #584]	; (8005068 <control_law+0x34c>)
 8004e20:	1c05      	adds	r5, r0, #0
 8004e22:	6819      	ldr	r1, [r3, #0]
 8004e24:	9802      	ldr	r0, [sp, #8]
 8004e26:	f7fb ff0f 	bl	8000c48 <__aeabi_fmul>
 8004e2a:	4b90      	ldr	r3, [pc, #576]	; (800506c <control_law+0x350>)
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	f7fb fb89 	bl	8000544 <__aeabi_fadd>
 8004e32:	1c01      	adds	r1, r0, #0
 8004e34:	1c28      	adds	r0, r5, #0
 8004e36:	f7fb fd17 	bl	8000868 <__aeabi_fdiv>
 8004e3a:	4b8d      	ldr	r3, [pc, #564]	; (8005070 <control_law+0x354>)
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	f7fc f823 	bl	8000e88 <__aeabi_fsub>
 8004e42:	f7fd ff5d 	bl	8002d00 <__aeabi_f2d>
 8004e46:	4b8b      	ldr	r3, [pc, #556]	; (8005074 <control_law+0x358>)
 8004e48:	0006      	movs	r6, r0
 8004e4a:	000f      	movs	r7, r1
 8004e4c:	1c20      	adds	r0, r4, #0
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	f7fb fefa 	bl	8000c48 <__aeabi_fmul>
 8004e54:	4b88      	ldr	r3, [pc, #544]	; (8005078 <control_law+0x35c>)
 8004e56:	1c04      	adds	r4, r0, #0
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	9800      	ldr	r0, [sp, #0]
 8004e5c:	f7fb fef4 	bl	8000c48 <__aeabi_fmul>
 8004e60:	1c01      	adds	r1, r0, #0
 8004e62:	1c20      	adds	r0, r4, #0
 8004e64:	f7fb fb6e 	bl	8000544 <__aeabi_fadd>
 8004e68:	f7fd ff4a 	bl	8002d00 <__aeabi_f2d>
 8004e6c:	4b83      	ldr	r3, [pc, #524]	; (800507c <control_law+0x360>)
 8004e6e:	0004      	movs	r4, r0
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	000d      	movs	r5, r1
 8004e74:	f7fd ff44 	bl	8002d00 <__aeabi_f2d>
 8004e78:	9a06      	ldr	r2, [sp, #24]
 8004e7a:	9b07      	ldr	r3, [sp, #28]
 8004e7c:	f7fd f934 	bl	80020e8 <__aeabi_dmul>
 8004e80:	0002      	movs	r2, r0
 8004e82:	000b      	movs	r3, r1
 8004e84:	0020      	movs	r0, r4
 8004e86:	0029      	movs	r1, r5
 8004e88:	f7fd fbae 	bl	80025e8 <__aeabi_dsub>
 8004e8c:	0002      	movs	r2, r0
 8004e8e:	000b      	movs	r3, r1
 8004e90:	0030      	movs	r0, r6
 8004e92:	0039      	movs	r1, r7
 8004e94:	f7fd f928 	bl	80020e8 <__aeabi_dmul>
 8004e98:	0006      	movs	r6, r0
 8004e9a:	000f      	movs	r7, r1
	controller_torque = a*q2dot - a*q1dot + b*sin_q1_q2 + c*(q1dot*q1dot)*sin_q2 + \
 8004e9c:	9800      	ldr	r0, [sp, #0]
 8004e9e:	9905      	ldr	r1, [sp, #20]
 8004ea0:	f7fb fed2 	bl	8000c48 <__aeabi_fmul>
 8004ea4:	9905      	ldr	r1, [sp, #20]
 8004ea6:	1c04      	adds	r4, r0, #0
 8004ea8:	9801      	ldr	r0, [sp, #4]
 8004eaa:	f7fb fecd 	bl	8000c48 <__aeabi_fmul>
 8004eae:	1c01      	adds	r1, r0, #0
 8004eb0:	1c20      	adds	r0, r4, #0
 8004eb2:	f7fb ffe9 	bl	8000e88 <__aeabi_fsub>
 8004eb6:	4b72      	ldr	r3, [pc, #456]	; (8005080 <control_law+0x364>)
 8004eb8:	1c04      	adds	r4, r0, #0
 8004eba:	6819      	ldr	r1, [r3, #0]
 8004ebc:	9804      	ldr	r0, [sp, #16]
 8004ebe:	f7fb fec3 	bl	8000c48 <__aeabi_fmul>
 8004ec2:	1c01      	adds	r1, r0, #0
 8004ec4:	1c20      	adds	r0, r4, #0
 8004ec6:	f7fb fb3d 	bl	8000544 <__aeabi_fadd>
 8004eca:	9901      	ldr	r1, [sp, #4]
 8004ecc:	1c04      	adds	r4, r0, #0
 8004ece:	1c08      	adds	r0, r1, #0
 8004ed0:	f7fb feba 	bl	8000c48 <__aeabi_fmul>
 8004ed4:	4b6b      	ldr	r3, [pc, #428]	; (8005084 <control_law+0x368>)
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	f7fb feb6 	bl	8000c48 <__aeabi_fmul>
 8004edc:	9903      	ldr	r1, [sp, #12]
 8004ede:	f7fb feb3 	bl	8000c48 <__aeabi_fmul>
 8004ee2:	1c01      	adds	r1, r0, #0
 8004ee4:	1c20      	adds	r0, r4, #0
 8004ee6:	f7fb fb2d 	bl	8000544 <__aeabi_fadd>
 8004eea:	f7fd ff09 	bl	8002d00 <__aeabi_f2d>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	000b      	movs	r3, r1
 8004ef2:	0030      	movs	r0, r6
 8004ef4:	0039      	movs	r1, r7
 8004ef6:	f7fc f9b3 	bl	8001260 <__aeabi_dadd>
	(1.0*(l*cos_q2 + m)*(-n*sin_q2*(q2dot*q2dot) - o*q1dot*sin_q2*q2dot + p*sin_q1_q2 \
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	0612      	lsls	r2, r2, #24
 8004efe:	4694      	mov	ip, r2
 8004f00:	4b61      	ldr	r3, [pc, #388]	; (8005088 <control_law+0x36c>)
	controller_torque = a*q2dot - a*q1dot + b*sin_q1_q2 + c*(q1dot*q1dot)*sin_q2 + \
 8004f02:	0006      	movs	r6, r0
	(1.0*(l*cos_q2 + m)*(-n*sin_q2*(q2dot*q2dot) - o*q1dot*sin_q2*q2dot + p*sin_q1_q2 \
 8004f04:	681b      	ldr	r3, [r3, #0]
	controller_torque = a*q2dot - a*q1dot + b*sin_q1_q2 + c*(q1dot*q1dot)*sin_q2 + \
 8004f06:	000f      	movs	r7, r1
	(1.0*(l*cos_q2 + m)*(-n*sin_q2*(q2dot*q2dot) - o*q1dot*sin_q2*q2dot + p*sin_q1_q2 \
 8004f08:	9305      	str	r3, [sp, #20]
 8004f0a:	4463      	add	r3, ip
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	9903      	ldr	r1, [sp, #12]
 8004f10:	f7fb fe9a 	bl	8000c48 <__aeabi_fmul>
 8004f14:	9900      	ldr	r1, [sp, #0]
 8004f16:	1c04      	adds	r4, r0, #0
 8004f18:	1c08      	adds	r0, r1, #0
 8004f1a:	f7fb fe95 	bl	8000c48 <__aeabi_fmul>
 8004f1e:	1c01      	adds	r1, r0, #0
 8004f20:	1c20      	adds	r0, r4, #0
 8004f22:	f7fb fe91 	bl	8000c48 <__aeabi_fmul>
 8004f26:	4b59      	ldr	r3, [pc, #356]	; (800508c <control_law+0x370>)
 8004f28:	1c04      	adds	r4, r0, #0
 8004f2a:	6819      	ldr	r1, [r3, #0]
 8004f2c:	9801      	ldr	r0, [sp, #4]
 8004f2e:	f7fb fe8b 	bl	8000c48 <__aeabi_fmul>
 8004f32:	9903      	ldr	r1, [sp, #12]
 8004f34:	f7fb fe88 	bl	8000c48 <__aeabi_fmul>
 8004f38:	9900      	ldr	r1, [sp, #0]
 8004f3a:	f7fb fe85 	bl	8000c48 <__aeabi_fmul>
 8004f3e:	1c01      	adds	r1, r0, #0
 8004f40:	1c20      	adds	r0, r4, #0
 8004f42:	f7fb ffa1 	bl	8000e88 <__aeabi_fsub>
 8004f46:	4b52      	ldr	r3, [pc, #328]	; (8005090 <control_law+0x374>)
 8004f48:	1c04      	adds	r4, r0, #0
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	9804      	ldr	r0, [sp, #16]
 8004f4e:	f7fb fe7b 	bl	8000c48 <__aeabi_fmul>
 8004f52:	1c01      	adds	r1, r0, #0
 8004f54:	1c20      	adds	r0, r4, #0
 8004f56:	f7fb faf5 	bl	8000544 <__aeabi_fadd>
 8004f5a:	1c04      	adds	r4, r0, #0
	+ q*(float)sin(q1) + r))/(s*cos_q2 + t);
 8004f5c:	9808      	ldr	r0, [sp, #32]
 8004f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f60:	f7fd ff20 	bl	8002da4 <__aeabi_d2f>
 8004f64:	4b4b      	ldr	r3, [pc, #300]	; (8005094 <control_law+0x378>)
 8004f66:	6819      	ldr	r1, [r3, #0]
 8004f68:	f7fb fe6e 	bl	8000c48 <__aeabi_fmul>
 8004f6c:	1c01      	adds	r1, r0, #0
 8004f6e:	1c20      	adds	r0, r4, #0
 8004f70:	f7fb fae8 	bl	8000544 <__aeabi_fadd>
 8004f74:	4b48      	ldr	r3, [pc, #288]	; (8005098 <control_law+0x37c>)
 8004f76:	6819      	ldr	r1, [r3, #0]
 8004f78:	f7fb fae4 	bl	8000544 <__aeabi_fadd>
 8004f7c:	f7fd fec0 	bl	8002d00 <__aeabi_f2d>
	(1.0*(l*cos_q2 + m)*(-n*sin_q2*(q2dot*q2dot) - o*q1dot*sin_q2*q2dot + p*sin_q1_q2 \
 8004f80:	4b46      	ldr	r3, [pc, #280]	; (800509c <control_law+0x380>)
	+ q*(float)sin(q1) + r))/(s*cos_q2 + t);
 8004f82:	0004      	movs	r4, r0
 8004f84:	000d      	movs	r5, r1
	(1.0*(l*cos_q2 + m)*(-n*sin_q2*(q2dot*q2dot) - o*q1dot*sin_q2*q2dot + p*sin_q1_q2 \
 8004f86:	9802      	ldr	r0, [sp, #8]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	f7fb fe5d 	bl	8000c48 <__aeabi_fmul>
 8004f8e:	4b44      	ldr	r3, [pc, #272]	; (80050a0 <control_law+0x384>)
 8004f90:	6819      	ldr	r1, [r3, #0]
 8004f92:	f7fb fad7 	bl	8000544 <__aeabi_fadd>
 8004f96:	f7fd feb3 	bl	8002d00 <__aeabi_f2d>
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	000b      	movs	r3, r1
 8004f9e:	0020      	movs	r0, r4
 8004fa0:	0029      	movs	r1, r5
 8004fa2:	f7fd f8a1 	bl	80020e8 <__aeabi_dmul>
	+ q*(float)sin(q1) + r))/(s*cos_q2 + t);
 8004fa6:	4b3f      	ldr	r3, [pc, #252]	; (80050a4 <control_law+0x388>)
	(1.0*(l*cos_q2 + m)*(-n*sin_q2*(q2dot*q2dot) - o*q1dot*sin_q2*q2dot + p*sin_q1_q2 \
 8004fa8:	0004      	movs	r4, r0
 8004faa:	000d      	movs	r5, r1
	+ q*(float)sin(q1) + r))/(s*cos_q2 + t);
 8004fac:	9802      	ldr	r0, [sp, #8]
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	f7fb fe4a 	bl	8000c48 <__aeabi_fmul>
 8004fb4:	4b3c      	ldr	r3, [pc, #240]	; (80050a8 <control_law+0x38c>)
 8004fb6:	6819      	ldr	r1, [r3, #0]
 8004fb8:	f7fb fac4 	bl	8000544 <__aeabi_fadd>
 8004fbc:	f7fd fea0 	bl	8002d00 <__aeabi_f2d>
 8004fc0:	0002      	movs	r2, r0
 8004fc2:	000b      	movs	r3, r1
 8004fc4:	0020      	movs	r0, r4
 8004fc6:	0029      	movs	r1, r5
 8004fc8:	f7fc fc5a 	bl	8001880 <__aeabi_ddiv>
 8004fcc:	0002      	movs	r2, r0
 8004fce:	000b      	movs	r3, r1
	((d*((cos_q2 + e)*(cos_q2 + e)))/(f*cos_q2 + g) - h)*(i*q2 + j*q2dot - k*atan(q1dot)) - \
 8004fd0:	0030      	movs	r0, r6
 8004fd2:	0039      	movs	r1, r7
 8004fd4:	f7fd fb08 	bl	80025e8 <__aeabi_dsub>
 8004fd8:	f7fd fee4 	bl	8002da4 <__aeabi_d2f>
	controller_torque = a*q2dot - a*q1dot + b*sin_q1_q2 + c*(q1dot*q1dot)*sin_q2 + \
 8004fdc:	4b33      	ldr	r3, [pc, #204]	; (80050ac <control_law+0x390>)

	if(controller_torque > 0){
 8004fde:	2100      	movs	r1, #0
	controller_torque = a*q2dot - a*q1dot + b*sin_q1_q2 + c*(q1dot*q1dot)*sin_q2 + \
 8004fe0:	6018      	str	r0, [r3, #0]
	((d*((cos_q2 + e)*(cos_q2 + e)))/(f*cos_q2 + g) - h)*(i*q2 + j*q2dot - k*atan(q1dot)) - \
 8004fe2:	1c05      	adds	r5, r0, #0
	if(controller_torque > 0){
 8004fe4:	f7fb fa7c 	bl	80004e0 <__aeabi_fcmpgt>
 8004fe8:	4c31      	ldr	r4, [pc, #196]	; (80050b0 <control_law+0x394>)
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d01a      	beq.n	8005024 <control_law+0x308>
		motor_dir = 1;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	7023      	strb	r3, [r4, #0]
	}
	else {
		motor_dir = 0;
	}
	output_torque(motor_dir, 100 -(controller_torque+312.52)/15.828);
 8004ff2:	1c28      	adds	r0, r5, #0
 8004ff4:	f7fd fe84 	bl	8002d00 <__aeabi_f2d>
 8004ff8:	4a2e      	ldr	r2, [pc, #184]	; (80050b4 <control_law+0x398>)
 8004ffa:	4b2f      	ldr	r3, [pc, #188]	; (80050b8 <control_law+0x39c>)
 8004ffc:	f7fc f930 	bl	8001260 <__aeabi_dadd>
 8005000:	4a2e      	ldr	r2, [pc, #184]	; (80050bc <control_law+0x3a0>)
 8005002:	4b2f      	ldr	r3, [pc, #188]	; (80050c0 <control_law+0x3a4>)
 8005004:	f7fc fc3c 	bl	8001880 <__aeabi_ddiv>
 8005008:	0002      	movs	r2, r0
 800500a:	000b      	movs	r3, r1
 800500c:	2000      	movs	r0, #0
 800500e:	492d      	ldr	r1, [pc, #180]	; (80050c4 <control_law+0x3a8>)
 8005010:	f7fd faea 	bl	80025e8 <__aeabi_dsub>
 8005014:	f7fb fa78 	bl	8000508 <__aeabi_d2uiz>
 8005018:	b2c1      	uxtb	r1, r0
 800501a:	7820      	ldrb	r0, [r4, #0]
 800501c:	f7ff fe6a 	bl	8004cf4 <output_torque>

// if we are in the null controllability region



}
 8005020:	b00b      	add	sp, #44	; 0x2c
 8005022:	bdf0      	pop	{r4, r5, r6, r7, pc}
		motor_dir = 0;
 8005024:	7020      	strb	r0, [r4, #0]
 8005026:	e7e4      	b.n	8004ff2 <control_law+0x2d6>
 8005028:	200000e0 	.word	0x200000e0
 800502c:	20000024 	.word	0x20000024
 8005030:	200000c4 	.word	0x200000c4
 8005034:	200000cc 	.word	0x200000cc
 8005038:	40400000 	.word	0x40400000
 800503c:	200000e8 	.word	0x200000e8
 8005040:	200000d4 	.word	0x200000d4
 8005044:	200000c0 	.word	0x200000c0
 8005048:	200000c8 	.word	0x200000c8
 800504c:	200000dc 	.word	0x200000dc
 8005050:	200000b4 	.word	0x200000b4
 8005054:	20000114 	.word	0x20000114
 8005058:	20000110 	.word	0x20000110
 800505c:	08007960 	.word	0x08007960
 8005060:	08007970 	.word	0x08007970
 8005064:	0800796c 	.word	0x0800796c
 8005068:	08007974 	.word	0x08007974
 800506c:	08007978 	.word	0x08007978
 8005070:	0800797c 	.word	0x0800797c
 8005074:	08007980 	.word	0x08007980
 8005078:	08007984 	.word	0x08007984
 800507c:	08007988 	.word	0x08007988
 8005080:	08007964 	.word	0x08007964
 8005084:	08007968 	.word	0x08007968
 8005088:	08007994 	.word	0x08007994
 800508c:	08007998 	.word	0x08007998
 8005090:	0800799c 	.word	0x0800799c
 8005094:	080079a0 	.word	0x080079a0
 8005098:	080079a4 	.word	0x080079a4
 800509c:	0800798c 	.word	0x0800798c
 80050a0:	08007990 	.word	0x08007990
 80050a4:	080079a8 	.word	0x080079a8
 80050a8:	080079d8 	.word	0x080079d8
 80050ac:	200000b0 	.word	0x200000b0
 80050b0:	200000bf 	.word	0x200000bf
 80050b4:	eb851eb8 	.word	0xeb851eb8
 80050b8:	40738851 	.word	0x40738851
 80050bc:	9db22d0e 	.word	0x9db22d0e
 80050c0:	402fa7ef 	.word	0x402fa7ef
 80050c4:	40590000 	.word	0x40590000

080050c8 <startPeripherals>:
extern ADC_HandleTypeDef hadc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim16;

void startPeripherals(){
 80050c8:	b510      	push	{r4, lr}

	HAL_ADCEx_Calibration_Start(&hadc);					// Calibrate the ADC
 80050ca:	4c12      	ldr	r4, [pc, #72]	; (8005114 <startPeripherals+0x4c>)
 80050cc:	0020      	movs	r0, r4
 80050ce:	f7fe f941 	bl	8003354 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, ADC_buffer, 2);			// Start to capture the ADC with DMA
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <startPeripherals+0x50>)
 80050d4:	2202      	movs	r2, #2
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	0020      	movs	r0, r4
 80050da:	f7fe f82d 	bl	8003138 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim14);						// Timer responsible for time-keeping and triggers system state to be send
 80050de:	480f      	ldr	r0, [pc, #60]	; (800511c <startPeripherals+0x54>)
 80050e0:	f7fe ff8e 	bl	8004000 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);						// Timer responsible for time-keeping and triggers system state to be send
 80050e4:	480e      	ldr	r0, [pc, #56]	; (8005120 <startPeripherals+0x58>)
 80050e6:	f7fe ff8b 	bl	8004000 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);			// Start the Timer Module with PWM
 80050ea:	4c0e      	ldr	r4, [pc, #56]	; (8005124 <startPeripherals+0x5c>)
 80050ec:	2104      	movs	r1, #4
 80050ee:	0020      	movs	r0, r4
 80050f0:	f7ff f95e 	bl	80043b0 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 80050f4:	2200      	movs	r2, #0
 80050f6:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 80050f8:	490b      	ldr	r1, [pc, #44]	; (8005128 <startPeripherals+0x60>)
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 80050fc:	480b      	ldr	r0, [pc, #44]	; (800512c <startPeripherals+0x64>)
 80050fe:	3201      	adds	r2, #1
 8005100:	f7ff f9f6 	bl	80044f0 <HAL_UART_Receive_IT>


//	HAL_Delay(500);										// Delay for peripherals to settle
	HAL_GPIO_WritePin(DEBUG_LED1_GPIO_Port,DEBUG_LED1_Pin,1); // LED ON indicates system is ready
 8005104:	2090      	movs	r0, #144	; 0x90
 8005106:	2201      	movs	r2, #1
 8005108:	2108      	movs	r1, #8
 800510a:	05c0      	lsls	r0, r0, #23
 800510c:	f7fe fb72 	bl	80037f4 <HAL_GPIO_WritePin>

	//startval_sampledPotentiometer = ADC_buffer[1];

}
 8005110:	bd10      	pop	{r4, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	200002c0 	.word	0x200002c0
 8005118:	200000a8 	.word	0x200000a8
 800511c:	2000023c 	.word	0x2000023c
 8005120:	2000030c 	.word	0x2000030c
 8005124:	20000148 	.word	0x20000148
 8005128:	200000f1 	.word	0x200000f1
 800512c:	200001cc 	.word	0x200001cc

08005130 <init_variables>:


void init_variables(){
 8005130:	b570      	push	{r4, r5, r6, lr}

	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 8005132:	2008      	movs	r0, #8
	memset(rx_buffer,0x00,8);
 8005134:	2408      	movs	r4, #8
	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 8005136:	f000 fd0f 	bl	8005b58 <malloc>
 800513a:	4b2c      	ldr	r3, [pc, #176]	; (80051ec <init_variables+0xbc>)
	memset(rx_buffer,0x00,8);
 800513c:	0022      	movs	r2, r4
 800513e:	2100      	movs	r1, #0
	rx_buffer = (uint8_t*)malloc(8*sizeof(uint8_t));
 8005140:	6018      	str	r0, [r3, #0]
	memset(rx_buffer,0x00,8);
 8005142:	f000 fd1c 	bl	8005b7e <memset>

	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8005146:	0020      	movs	r0, r4
 8005148:	f000 fd06 	bl	8005b58 <malloc>
 800514c:	4b28      	ldr	r3, [pc, #160]	; (80051f0 <init_variables+0xc0>)
	memset(verification,0x00,8);
 800514e:	0022      	movs	r2, r4
 8005150:	2100      	movs	r1, #0
	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8005152:	6018      	str	r0, [r3, #0]
	memset(verification,0x00,8);
 8005154:	f000 fd13 	bl	8005b7e <memset>

	// might to be larger to account for decimals
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 8005158:	2048      	movs	r0, #72	; 0x48
 800515a:	f000 fcfd 	bl	8005b58 <malloc>
 800515e:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <init_variables+0xc4>)
	memset(data_buffer,0x00,72);
 8005160:	2248      	movs	r2, #72	; 0x48
 8005162:	2100      	movs	r1, #0
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 8005164:	0005      	movs	r5, r0
 8005166:	6018      	str	r0, [r3, #0]
	memset(data_buffer,0x00,72);
 8005168:	f000 fd09 	bl	8005b7e <memset>

	// forming dat structure to be send
	memcpy(data_buffer, dollar, strlen((char*)dollar));
 800516c:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <init_variables+0xc8>)
 800516e:	681e      	ldr	r6, [r3, #0]
 8005170:	0030      	movs	r0, r6
 8005172:	f7fa ffc9 	bl	8000108 <strlen>
 8005176:	0031      	movs	r1, r6
 8005178:	0002      	movs	r2, r0
 800517a:	0028      	movs	r0, r5
 800517c:	f000 fcf6 	bl	8005b6c <memcpy>


	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8005180:	0020      	movs	r0, r4
 8005182:	f000 fce9 	bl	8005b58 <malloc>
	memset(ADC_buffer,0x00,2);
 8005186:	2400      	movs	r4, #0
	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8005188:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <init_variables+0xcc>)
	memset(ADC_buffer,0x00,2);
 800518a:	8004      	strh	r4, [r0, #0]
	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 800518c:	6018      	str	r0, [r3, #0]

	//atan_vals = (float*)malloc(100*sizeof(double));
	//memset(atan_vals,0x00,100);

	scratchpad = (char*)malloc(5*sizeof(char));
 800518e:	2005      	movs	r0, #5
 8005190:	f000 fce2 	bl	8005b58 <malloc>
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <init_variables+0xd0>)
	memset(scratchpad,0x00,5);
 8005196:	0021      	movs	r1, r4
 8005198:	2205      	movs	r2, #5
	scratchpad = (char*)malloc(5*sizeof(char));
 800519a:	6018      	str	r0, [r3, #0]
	memset(scratchpad,0x00,5);
 800519c:	f000 fcef 	bl	8005b7e <memset>

	send_q1 = (char*)malloc(10*sizeof(char));
 80051a0:	200a      	movs	r0, #10
 80051a2:	f000 fcd9 	bl	8005b58 <malloc>
 80051a6:	4b17      	ldr	r3, [pc, #92]	; (8005204 <init_variables+0xd4>)
	memset(send_q1,0x00,10);
 80051a8:	0021      	movs	r1, r4
 80051aa:	220a      	movs	r2, #10
	send_q1 = (char*)malloc(10*sizeof(char));
 80051ac:	6018      	str	r0, [r3, #0]
	memset(send_q1,0x00,10);
 80051ae:	f000 fce6 	bl	8005b7e <memset>
	send_q2 = (char*)malloc(32*sizeof(char));
 80051b2:	2020      	movs	r0, #32
 80051b4:	f000 fcd0 	bl	8005b58 <malloc>
 80051b8:	4b13      	ldr	r3, [pc, #76]	; (8005208 <init_variables+0xd8>)
	memset(send_q2,0x00,32);
 80051ba:	0021      	movs	r1, r4
 80051bc:	2220      	movs	r2, #32
	send_q2 = (char*)malloc(32*sizeof(char));
 80051be:	0005      	movs	r5, r0
 80051c0:	6018      	str	r0, [r3, #0]
	memset(send_q2,0x00,32);
 80051c2:	f000 fcdc 	bl	8005b7e <memset>
	send_torque = (char*)malloc(4*sizeof(char));
 80051c6:	2004      	movs	r0, #4
 80051c8:	f000 fcc6 	bl	8005b58 <malloc>
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <init_variables+0xdc>)
	memset(send_torque,0x00,4);
 80051ce:	6004      	str	r4, [r0, #0]
	send_torque = (char*)malloc(4*sizeof(char));
 80051d0:	6018      	str	r0, [r3, #0]
	send_time = (char*)malloc(4*sizeof(char));
 80051d2:	2004      	movs	r0, #4
 80051d4:	f000 fcc0 	bl	8005b58 <malloc>
 80051d8:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <init_variables+0xe0>)
	memset(send_time,0x00,4);
 80051da:	6004      	str	r4, [r0, #0]
	send_time = (char*)malloc(4*sizeof(char));
 80051dc:	6018      	str	r0, [r3, #0]


	sprintf(send_q2,"%d", q2_steps);
 80051de:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <init_variables+0xe4>)
 80051e0:	0028      	movs	r0, r5
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	490c      	ldr	r1, [pc, #48]	; (8005218 <init_variables+0xe8>)
 80051e6:	f000 fd8d 	bl	8005d04 <siprintf>

	// temporary, this should be done where the variables are measured

}
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	200000ec 	.word	0x200000ec
 80051f0:	20000134 	.word	0x20000134
 80051f4:	200000b8 	.word	0x200000b8
 80051f8:	20000010 	.word	0x20000010
 80051fc:	200000a8 	.word	0x200000a8
 8005200:	200000fc 	.word	0x200000fc
 8005204:	20000100 	.word	0x20000100
 8005208:	20000104 	.word	0x20000104
 800520c:	2000010c 	.word	0x2000010c
 8005210:	20000108 	.word	0x20000108
 8005214:	200000e4 	.word	0x200000e4
 8005218:	08007928 	.word	0x08007928

0800521c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800521c:	2312      	movs	r3, #18
{
 800521e:	b530      	push	{r4, r5, lr}
 8005220:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8005222:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8005224:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8005226:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005228:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800522a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800522c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800522e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005230:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8005232:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005234:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005236:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8005238:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800523a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800523c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800523e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8005240:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005242:	f7fe fae9 	bl	8003818 <HAL_RCC_OscConfig>
 8005246:	2800      	cmp	r0, #0
 8005248:	d000      	beq.n	800524c <SystemClock_Config+0x30>
 800524a:	e7fe      	b.n	800524a <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800524c:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800524e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005250:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005252:	0021      	movs	r1, r4
 8005254:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005256:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005258:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800525a:	f7fe fcf1 	bl	8003c40 <HAL_RCC_ClockConfig>
 800525e:	2800      	cmp	r0, #0
 8005260:	d000      	beq.n	8005264 <SystemClock_Config+0x48>
 8005262:	e7fe      	b.n	8005262 <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005264:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005266:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005268:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800526a:	f7fe fd95 	bl	8003d98 <HAL_RCCEx_PeriphCLKConfig>
 800526e:	1e04      	subs	r4, r0, #0
 8005270:	d000      	beq.n	8005274 <SystemClock_Config+0x58>
 8005272:	e7fe      	b.n	8005272 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005274:	f7fe fd7a 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8005278:	21fa      	movs	r1, #250	; 0xfa
 800527a:	0089      	lsls	r1, r1, #2
 800527c:	f7fa ff56 	bl	800012c <__udivsi3>
 8005280:	f7fe f8f6 	bl	8003470 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005284:	2004      	movs	r0, #4
 8005286:	f7fe f90d 	bl	80034a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800528a:	2001      	movs	r0, #1
 800528c:	0022      	movs	r2, r4
 800528e:	0021      	movs	r1, r4
 8005290:	4240      	negs	r0, r0
 8005292:	f7fe f8b3 	bl	80033fc <HAL_NVIC_SetPriority>
}
 8005296:	b015      	add	sp, #84	; 0x54
 8005298:	bd30      	pop	{r4, r5, pc}
	...

0800529c <main>:
{
 800529c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529e:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80052a0:	f7fd fe3a 	bl	8002f18 <HAL_Init>
  SystemClock_Config();
 80052a4:	f7ff ffba 	bl	800521c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	4c75      	ldr	r4, [pc, #468]	; (8005480 <main+0x1e4>)
 80052ac:	0289      	lsls	r1, r1, #10
 80052ae:	6962      	ldr	r2, [r4, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80052b0:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b2:	430a      	orrs	r2, r1
 80052b4:	6162      	str	r2, [r4, #20]
 80052b6:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80052b8:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ba:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052bc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052c2:	6962      	ldr	r2, [r4, #20]
 80052c4:	02c9      	lsls	r1, r1, #11
 80052c6:	430a      	orrs	r2, r1
 80052c8:	6162      	str	r2, [r4, #20]
 80052ca:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80052cc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ce:	400b      	ands	r3, r1
 80052d0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80052d2:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80052d6:	f7fe fa8d 	bl	80037f4 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : DEBUG_LED1_Pin DEBUG_LED2_Pin MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052da:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052dc:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052de:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 80052e0:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e2:	a905      	add	r1, sp, #20
 80052e4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 80052e6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052e8:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ea:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ec:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ee:	f7fe f9cb 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Pin */
  GPIO_InitStruct.Pin = ENCODER_Pin;
 80052f2:	2310      	movs	r3, #16
 80052f4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80052f6:	4b63      	ldr	r3, [pc, #396]	; (8005484 <main+0x1e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 80052f8:	a905      	add	r1, sp, #20
 80052fa:	4863      	ldr	r0, [pc, #396]	; (8005488 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80052fc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fe:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8005300:	f7fe f9c2 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8005304:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8005306:	a905      	add	r1, sp, #20
 8005308:	485f      	ldr	r0, [pc, #380]	; (8005488 <main+0x1ec>)
  GPIO_InitStruct.Pin = DIR_Pin;
 800530a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800530c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8005310:	f7fe f9ba 	bl	8003688 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005314:	002a      	movs	r2, r5
 8005316:	0029      	movs	r1, r5
 8005318:	2007      	movs	r0, #7
 800531a:	f7fe f86f 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800531e:	2007      	movs	r0, #7
 8005320:	f7fe f89c 	bl	800345c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005324:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8005326:	002a      	movs	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005328:	433b      	orrs	r3, r7
 800532a:	6163      	str	r3, [r4, #20]
 800532c:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800532e:	0039      	movs	r1, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005330:	403b      	ands	r3, r7
 8005332:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8005334:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005336:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8005338:	f7fe f860 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800533c:	2009      	movs	r0, #9
 800533e:	f7fe f88d 	bl	800345c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8005342:	002a      	movs	r2, r5
 8005344:	0039      	movs	r1, r7
 8005346:	200a      	movs	r0, #10
 8005348:	f7fe f858 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800534c:	200a      	movs	r0, #10
 800534e:	f7fe f885 	bl	800345c <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 8005352:	4c4e      	ldr	r4, [pc, #312]	; (800548c <main+0x1f0>)
 8005354:	4b4e      	ldr	r3, [pc, #312]	; (8005490 <main+0x1f4>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005356:	2604      	movs	r6, #4
  hadc.Instance = ADC1;
 8005358:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800535a:	23c2      	movs	r3, #194	; 0xc2
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800535c:	0020      	movs	r0, r4
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800535e:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005360:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005362:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005364:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005366:	6127      	str	r7, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005368:	6166      	str	r6, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800536a:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800536c:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 800536e:	6227      	str	r7, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8005370:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005372:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005374:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8005376:	6327      	str	r7, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005378:	6367      	str	r7, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800537a:	f7fd fe37 	bl	8002fec <HAL_ADC_Init>
 800537e:	42a8      	cmp	r0, r5
 8005380:	d000      	beq.n	8005384 <main+0xe8>
 8005382:	e7fe      	b.n	8005382 <main+0xe6>
  sConfig.Channel = ADC_CHANNEL_8;
 8005384:	2308      	movs	r3, #8
 8005386:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	015b      	lsls	r3, r3, #5
 800538c:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800538e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005390:	a905      	add	r1, sp, #20
 8005392:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005394:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005396:	f7fd ff67 	bl	8003268 <HAL_ADC_ConfigChannel>
 800539a:	2800      	cmp	r0, #0
 800539c:	d000      	beq.n	80053a0 <main+0x104>
 800539e:	e7fe      	b.n	800539e <main+0x102>
  sConfig.Channel = ADC_CHANNEL_9;
 80053a0:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80053a2:	a905      	add	r1, sp, #20
 80053a4:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 80053a6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80053a8:	f7fd ff5e 	bl	8003268 <HAL_ADC_ConfigChannel>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d000      	beq.n	80053b2 <main+0x116>
 80053b0:	e7fe      	b.n	80053b0 <main+0x114>
  huart1.Instance = USART1;
 80053b2:	4b38      	ldr	r3, [pc, #224]	; (8005494 <main+0x1f8>)
 80053b4:	4a38      	ldr	r2, [pc, #224]	; (8005498 <main+0x1fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053b6:	6098      	str	r0, [r3, #8]
  huart1.Instance = USART1;
 80053b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80053ba:	22e1      	movs	r2, #225	; 0xe1
 80053bc:	0292      	lsls	r2, r2, #10
 80053be:	605a      	str	r2, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053c0:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053c2:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053c4:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053c6:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053c8:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053ca:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053cc:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053ce:	0018      	movs	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053d0:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053d2:	f7ff fa61 	bl	8004898 <HAL_UART_Init>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d000      	beq.n	80053dc <main+0x140>
 80053da:	e7fe      	b.n	80053da <main+0x13e>
  htim3.Instance = TIM3;
 80053dc:	4c2f      	ldr	r4, [pc, #188]	; (800549c <main+0x200>)
 80053de:	4b30      	ldr	r3, [pc, #192]	; (80054a0 <main+0x204>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e0:	60a0      	str	r0, [r4, #8]
  htim3.Instance = TIM3;
 80053e2:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48;
 80053e4:	2330      	movs	r3, #48	; 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053e6:	6120      	str	r0, [r4, #16]
  htim3.Init.Prescaler = 48;
 80053e8:	6063      	str	r3, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053ea:	61a0      	str	r0, [r4, #24]
  htim3.Init.Period = 99;
 80053ec:	3333      	adds	r3, #51	; 0x33
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80053ee:	0020      	movs	r0, r4
  htim3.Init.Period = 99;
 80053f0:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80053f2:	f7fe ff10 	bl	8004216 <HAL_TIM_PWM_Init>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d000      	beq.n	80053fc <main+0x160>
 80053fa:	e7fe      	b.n	80053fa <main+0x15e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053fc:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053fe:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005400:	a903      	add	r1, sp, #12
 8005402:	0020      	movs	r0, r4
 8005404:	f7ff f812 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8005408:	2800      	cmp	r0, #0
 800540a:	d000      	beq.n	800540e <main+0x172>
 800540c:	e7fe      	b.n	800540c <main+0x170>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800540e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8005410:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005412:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005414:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005416:	0032      	movs	r2, r6
 8005418:	a905      	add	r1, sp, #20
 800541a:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800541c:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800541e:	f7fe ff51 	bl	80042c4 <HAL_TIM_PWM_ConfigChannel>
 8005422:	1e05      	subs	r5, r0, #0
 8005424:	d000      	beq.n	8005428 <main+0x18c>
 8005426:	e7fe      	b.n	8005426 <main+0x18a>
  HAL_TIM_MspPostInit(&htim3);
 8005428:	0020      	movs	r0, r4
 800542a:	f000 f8f5 	bl	8005618 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 800542e:	481d      	ldr	r0, [pc, #116]	; (80054a4 <main+0x208>)
 8005430:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <main+0x20c>)
  htim14.Init.Period = 2000;
 8005432:	24fa      	movs	r4, #250	; 0xfa
  htim14.Instance = TIM14;
 8005434:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 192;
 8005436:	23c0      	movs	r3, #192	; 0xc0
  htim14.Init.Period = 2000;
 8005438:	00e4      	lsls	r4, r4, #3
  htim14.Init.Prescaler = 192;
 800543a:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800543c:	6085      	str	r5, [r0, #8]
  htim14.Init.Period = 2000;
 800543e:	60c4      	str	r4, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005440:	6105      	str	r5, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005442:	6185      	str	r5, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005444:	f7fe fecc 	bl	80041e0 <HAL_TIM_Base_Init>
 8005448:	2800      	cmp	r0, #0
 800544a:	d000      	beq.n	800544e <main+0x1b2>
 800544c:	e7fe      	b.n	800544c <main+0x1b0>
  htim16.Instance = TIM16;
 800544e:	4b17      	ldr	r3, [pc, #92]	; (80054ac <main+0x210>)
 8005450:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <main+0x214>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005452:	6098      	str	r0, [r3, #8]
  htim16.Instance = TIM16;
 8005454:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 384;
 8005456:	22c0      	movs	r2, #192	; 0xc0
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005458:	6118      	str	r0, [r3, #16]
  htim16.Init.Prescaler = 384;
 800545a:	0052      	lsls	r2, r2, #1
  htim16.Init.RepetitionCounter = 0;
 800545c:	6158      	str	r0, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800545e:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005460:	0018      	movs	r0, r3
  htim16.Init.Prescaler = 384;
 8005462:	605a      	str	r2, [r3, #4]
  htim16.Init.Period = 2000;
 8005464:	60dc      	str	r4, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005466:	f7fe febb 	bl	80041e0 <HAL_TIM_Base_Init>
 800546a:	2800      	cmp	r0, #0
 800546c:	d000      	beq.n	8005470 <main+0x1d4>
 800546e:	e7fe      	b.n	800546e <main+0x1d2>
  init_variables();
 8005470:	f7ff fe5e 	bl	8005130 <init_variables>
  startPeripherals();
 8005474:	f7ff fe28 	bl	80050c8 <startPeripherals>
	  user_main();
 8005478:	f000 faba 	bl	80059f0 <user_main>
 800547c:	e7fc      	b.n	8005478 <main+0x1dc>
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	40021000 	.word	0x40021000
 8005484:	10310000 	.word	0x10310000
 8005488:	48000400 	.word	0x48000400
 800548c:	200002c0 	.word	0x200002c0
 8005490:	40012400 	.word	0x40012400
 8005494:	200001cc 	.word	0x200001cc
 8005498:	40013800 	.word	0x40013800
 800549c:	20000148 	.word	0x20000148
 80054a0:	40000400 	.word	0x40000400
 80054a4:	2000023c 	.word	0x2000023c
 80054a8:	40002000 	.word	0x40002000
 80054ac:	2000030c 	.word	0x2000030c
 80054b0:	40014400 	.word	0x40014400

080054b4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80054b4:	e7fe      	b.n	80054b4 <_Error_Handler>
	...

080054b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054b8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ba:	2001      	movs	r0, #1
 80054bc:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <HAL_MspInit+0x38>)
 80054be:	6991      	ldr	r1, [r2, #24]
 80054c0:	4301      	orrs	r1, r0
 80054c2:	6191      	str	r1, [r2, #24]
 80054c4:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80054c6:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054c8:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80054ca:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054cc:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80054ce:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054d0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80054d2:	f7fd ff93 	bl	80033fc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80054d6:	2200      	movs	r2, #0
 80054d8:	2002      	movs	r0, #2
 80054da:	0011      	movs	r1, r2
 80054dc:	4240      	negs	r0, r0
 80054de:	f7fd ff8d 	bl	80033fc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80054e2:	2200      	movs	r2, #0
 80054e4:	2001      	movs	r0, #1
 80054e6:	0011      	movs	r1, r2
 80054e8:	4240      	negs	r0, r0
 80054ea:	f7fd ff87 	bl	80033fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054ee:	bd07      	pop	{r0, r1, r2, pc}
 80054f0:	40021000 	.word	0x40021000

080054f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80054f4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80054f6:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <HAL_ADC_MspInit+0x70>)
 80054f8:	6802      	ldr	r2, [r0, #0]
{
 80054fa:	b087      	sub	sp, #28
 80054fc:	0005      	movs	r5, r0
  if(hadc->Instance==ADC1)
 80054fe:	429a      	cmp	r2, r3
 8005500:	d12d      	bne.n	800555e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005502:	2680      	movs	r6, #128	; 0x80
 8005504:	4b18      	ldr	r3, [pc, #96]	; (8005568 <HAL_ADC_MspInit+0x74>)
 8005506:	00b6      	lsls	r6, r6, #2
 8005508:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550a:	2700      	movs	r7, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800550c:	4332      	orrs	r2, r6
 800550e:	619a      	str	r2, [r3, #24]
 8005510:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005512:	4816      	ldr	r0, [pc, #88]	; (800556c <HAL_ADC_MspInit+0x78>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005514:	4033      	ands	r3, r6
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 800551a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 800551e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005520:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005522:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005524:	f7fe f8b0 	bl	8003688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8005528:	4c11      	ldr	r4, [pc, #68]	; (8005570 <HAL_ADC_MspInit+0x7c>)
 800552a:	4b12      	ldr	r3, [pc, #72]	; (8005574 <HAL_ADC_MspInit+0x80>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800552c:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 800552e:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800553a:	2320      	movs	r3, #32
 800553c:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005542:	6067      	str	r7, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005544:	60a7      	str	r7, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005546:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8005548:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800554a:	f7fd ffbf 	bl	80034cc <HAL_DMA_Init>
 800554e:	42b8      	cmp	r0, r7
 8005550:	d003      	beq.n	800555a <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 8005552:	216b      	movs	r1, #107	; 0x6b
 8005554:	4808      	ldr	r0, [pc, #32]	; (8005578 <HAL_ADC_MspInit+0x84>)
 8005556:	f7ff ffad 	bl	80054b4 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800555a:	63ec      	str	r4, [r5, #60]	; 0x3c
 800555c:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800555e:	b007      	add	sp, #28
 8005560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	40012400 	.word	0x40012400
 8005568:	40021000 	.word	0x40021000
 800556c:	48000400 	.word	0x48000400
 8005570:	2000027c 	.word	0x2000027c
 8005574:	40020008 	.word	0x40020008
 8005578:	0800792b 	.word	0x0800792b

0800557c <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800557c:	b507      	push	{r0, r1, r2, lr}

  if(htim_pwm->Instance==TIM3)
 800557e:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <HAL_TIM_PWM_MspInit+0x30>)
 8005580:	6802      	ldr	r2, [r0, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d110      	bne.n	80055a8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005586:	2002      	movs	r0, #2
 8005588:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <HAL_TIM_PWM_MspInit+0x34>)
 800558a:	69d1      	ldr	r1, [r2, #28]
 800558c:	4301      	orrs	r1, r0
 800558e:	61d1      	str	r1, [r2, #28]
 8005590:	69d3      	ldr	r3, [r2, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005592:	2101      	movs	r1, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005594:	4003      	ands	r3, r0
 8005596:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005598:	300e      	adds	r0, #14
 800559a:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800559c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800559e:	f7fd ff2d 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80055a2:	2010      	movs	r0, #16
 80055a4:	f7fd ff5a 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80055a8:	bd07      	pop	{r0, r1, r2, pc}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	40000400 	.word	0x40000400
 80055b0:	40021000 	.word	0x40021000

080055b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055b4:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM14)
 80055b6:	6803      	ldr	r3, [r0, #0]
 80055b8:	4a14      	ldr	r2, [pc, #80]	; (800560c <HAL_TIM_Base_MspInit+0x58>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d112      	bne.n	80055e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80055be:	2080      	movs	r0, #128	; 0x80
 80055c0:	4a13      	ldr	r2, [pc, #76]	; (8005610 <HAL_TIM_Base_MspInit+0x5c>)
 80055c2:	0040      	lsls	r0, r0, #1
 80055c4:	69d1      	ldr	r1, [r2, #28]
 80055c6:	4301      	orrs	r1, r0
 80055c8:	61d1      	str	r1, [r2, #28]
 80055ca:	69d3      	ldr	r3, [r2, #28]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80055cc:	2101      	movs	r1, #1
    __HAL_RCC_TIM14_CLK_ENABLE();
 80055ce:	4003      	ands	r3, r0
 80055d0:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80055d2:	38ed      	subs	r0, #237	; 0xed
 80055d4:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 80055d6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80055d8:	f7fd ff10 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80055dc:	2013      	movs	r0, #19
  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80055de:	f7fd ff3d 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80055e2:	bd07      	pop	{r0, r1, r2, pc}
  else if(htim_base->Instance==TIM16)
 80055e4:	4a0b      	ldr	r2, [pc, #44]	; (8005614 <HAL_TIM_Base_MspInit+0x60>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d1fb      	bne.n	80055e2 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80055ea:	2080      	movs	r0, #128	; 0x80
 80055ec:	4a08      	ldr	r2, [pc, #32]	; (8005610 <HAL_TIM_Base_MspInit+0x5c>)
 80055ee:	0280      	lsls	r0, r0, #10
 80055f0:	6991      	ldr	r1, [r2, #24]
 80055f2:	4301      	orrs	r1, r0
 80055f4:	6191      	str	r1, [r2, #24]
 80055f6:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80055f8:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 80055fa:	4003      	ands	r3, r0
 80055fc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80055fe:	2015      	movs	r0, #21
 8005600:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005602:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005604:	f7fd fefa 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005608:	2015      	movs	r0, #21
 800560a:	e7e8      	b.n	80055de <HAL_TIM_Base_MspInit+0x2a>
 800560c:	40002000 	.word	0x40002000
 8005610:	40021000 	.word	0x40021000
 8005614:	40014400 	.word	0x40014400

08005618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_TIM_MspPostInit+0x2c>)
 800561c:	6802      	ldr	r2, [r0, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d10d      	bne.n	800563e <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM3_MspPostInit 0 */
  
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = PWM_SIGNAL_Pin;
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005626:	3b7e      	subs	r3, #126	; 0x7e
 8005628:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800562a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562c:	2300      	movs	r3, #0
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800562e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005632:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8005634:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8005636:	3301      	adds	r3, #1
 8005638:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800563a:	f7fe f825 	bl	8003688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800563e:	b007      	add	sp, #28
 8005640:	bd00      	pop	{pc}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	40000400 	.word	0x40000400

08005648 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005648:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800564a:	4b22      	ldr	r3, [pc, #136]	; (80056d4 <HAL_UART_MspInit+0x8c>)
 800564c:	6802      	ldr	r2, [r0, #0]
{
 800564e:	b086      	sub	sp, #24
 8005650:	0006      	movs	r6, r0
  if(huart->Instance==USART1)
 8005652:	429a      	cmp	r2, r3
 8005654:	d13b      	bne.n	80056ce <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005656:	2080      	movs	r0, #128	; 0x80
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <HAL_UART_MspInit+0x90>)
 800565a:	01c0      	lsls	r0, r0, #7
 800565c:	6991      	ldr	r1, [r2, #24]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565e:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8005660:	4301      	orrs	r1, r0
 8005662:	6191      	str	r1, [r2, #24]
 8005664:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005666:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8005668:	4003      	ands	r3, r0
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800566e:	23c0      	movs	r3, #192	; 0xc0
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005674:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005676:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005678:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800567a:	3301      	adds	r3, #1
 800567c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800567e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005680:	3b02      	subs	r3, #2
 8005682:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005684:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005686:	f7fd ffff 	bl	8003688 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800568a:	4c14      	ldr	r4, [pc, #80]	; (80056dc <HAL_UART_MspInit+0x94>)
 800568c:	4b14      	ldr	r3, [pc, #80]	; (80056e0 <HAL_UART_MspInit+0x98>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800568e:	0020      	movs	r0, r4
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8005690:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005692:	2310      	movs	r3, #16
 8005694:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005696:	3370      	adds	r3, #112	; 0x70
 8005698:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800569e:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056a0:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056a2:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80056a4:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80056a6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80056a8:	f7fd ff10 	bl	80034cc <HAL_DMA_Init>
 80056ac:	42a8      	cmp	r0, r5
 80056ae:	d004      	beq.n	80056ba <HAL_UART_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 80056b0:	213c      	movs	r1, #60	; 0x3c
 80056b2:	480c      	ldr	r0, [pc, #48]	; (80056e4 <HAL_UART_MspInit+0x9c>)
 80056b4:	31ff      	adds	r1, #255	; 0xff
 80056b6:	f7ff fefd 	bl	80054b4 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80056ba:	2200      	movs	r2, #0
 80056bc:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80056be:	6634      	str	r4, [r6, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80056c0:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80056c2:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80056c4:	f7fd fe9a 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056c8:	201b      	movs	r0, #27
 80056ca:	f7fd fec7 	bl	800345c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80056ce:	b006      	add	sp, #24
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	40013800 	.word	0x40013800
 80056d8:	40021000 	.word	0x40021000
 80056dc:	20000188 	.word	0x20000188
 80056e0:	4002001c 	.word	0x4002001c
 80056e4:	0800792b 	.word	0x0800792b

080056e8 <NMI_Handler>:
 80056e8:	4770      	bx	lr

080056ea <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80056ea:	e7fe      	b.n	80056ea <HardFault_Handler>

080056ec <SVC_Handler>:
 80056ec:	4770      	bx	lr

080056ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056ee:	4770      	bx	lr

080056f0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80056f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056f2:	f7fd fc21 	bl	8002f38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80056f6:	f7fd fee4 	bl	80034c2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056fa:	bd10      	pop	{r4, pc}

080056fc <EXTI4_15_IRQHandler>:

/**
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
 80056fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80056fe:	2010      	movs	r0, #16
 8005700:	f7fe f87e 	bl	8003800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005704:	bd10      	pop	{r4, pc}
	...

08005708 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8005708:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800570a:	4802      	ldr	r0, [pc, #8]	; (8005714 <DMA1_Channel1_IRQHandler+0xc>)
 800570c:	f7fd ff72 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005710:	bd10      	pop	{r4, pc}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	2000027c 	.word	0x2000027c

08005718 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 8005718:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800571a:	4802      	ldr	r0, [pc, #8]	; (8005724 <DMA1_Channel2_3_IRQHandler+0xc>)
 800571c:	f7fd ff6a 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005720:	bd10      	pop	{r4, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	20000188 	.word	0x20000188

08005728 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8005728:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800572a:	4802      	ldr	r0, [pc, #8]	; (8005734 <TIM3_IRQHandler+0xc>)
 800572c:	f7fe fc73 	bl	8004016 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005730:	bd10      	pop	{r4, pc}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	20000148 	.word	0x20000148

08005738 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 8005738:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800573a:	4802      	ldr	r0, [pc, #8]	; (8005744 <TIM14_IRQHandler+0xc>)
 800573c:	f7fe fc6b 	bl	8004016 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005740:	bd10      	pop	{r4, pc}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	2000023c 	.word	0x2000023c

08005748 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 8005748:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800574a:	4802      	ldr	r0, [pc, #8]	; (8005754 <TIM16_IRQHandler+0xc>)
 800574c:	f7fe fc63 	bl	8004016 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005750:	bd10      	pop	{r4, pc}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	2000030c 	.word	0x2000030c

08005758 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8005758:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800575a:	4802      	ldr	r0, [pc, #8]	; (8005764 <USART1_IRQHandler+0xc>)
 800575c:	f7ff f956 	bl	8004a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005760:	bd10      	pop	{r4, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	200001cc 	.word	0x200001cc

08005768 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005768:	2101      	movs	r1, #1
 800576a:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800576c:	4811      	ldr	r0, [pc, #68]	; (80057b4 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	4002      	ands	r2, r0
 8005778:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	480e      	ldr	r0, [pc, #56]	; (80057b8 <SystemInit+0x50>)
 800577e:	4002      	ands	r2, r0
 8005780:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	480d      	ldr	r0, [pc, #52]	; (80057bc <SystemInit+0x54>)
 8005786:	4002      	ands	r2, r0
 8005788:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	480c      	ldr	r0, [pc, #48]	; (80057c0 <SystemInit+0x58>)
 800578e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005790:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005792:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005796:	4382      	bics	r2, r0
 8005798:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800579a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579c:	4809      	ldr	r0, [pc, #36]	; (80057c4 <SystemInit+0x5c>)
 800579e:	4002      	ands	r2, r0
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80057a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a4:	438a      	bics	r2, r1
 80057a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]

}
 80057ac:	4770      	bx	lr
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	40021000 	.word	0x40021000
 80057b4:	08ffb80c 	.word	0x08ffb80c
 80057b8:	fef6ffff 	.word	0xfef6ffff
 80057bc:	fffbffff 	.word	0xfffbffff
 80057c0:	ffc0ffff 	.word	0xffc0ffff
 80057c4:	fffffeec 	.word	0xfffffeec

080057c8 <data_aquisition>:
#include "function.h"
#include "variables.h"
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim3;

void data_aquisition(){
 80057c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_data_buffer = strlen((char*)data_buffer);
 80057ca:	4e49      	ldr	r6, [pc, #292]	; (80058f0 <data_aquisition+0x128>)
void data_aquisition(){
 80057cc:	b085      	sub	sp, #20
	size_data_buffer = strlen((char*)data_buffer);
 80057ce:	6833      	ldr	r3, [r6, #0]
 80057d0:	0018      	movs	r0, r3
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	f7fa fc98 	bl	8000108 <strlen>
	size_time = strlen((char*)send_time);
 80057d8:	4b46      	ldr	r3, [pc, #280]	; (80058f4 <data_aquisition+0x12c>)
	size_data_buffer = strlen((char*)data_buffer);
 80057da:	4c47      	ldr	r4, [pc, #284]	; (80058f8 <data_aquisition+0x130>)
	size_time = strlen((char*)send_time);
 80057dc:	681b      	ldr	r3, [r3, #0]
	size_data_buffer = strlen((char*)data_buffer);
 80057de:	9002      	str	r0, [sp, #8]
 80057e0:	6020      	str	r0, [r4, #0]
	size_time = strlen((char*)send_time);
 80057e2:	0018      	movs	r0, r3
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	f7fa fc8f 	bl	8000108 <strlen>
 80057ea:	4d44      	ldr	r5, [pc, #272]	; (80058fc <data_aquisition+0x134>)
	size_q1 = strlen((char*)send_q1);
 80057ec:	4b44      	ldr	r3, [pc, #272]	; (8005900 <data_aquisition+0x138>)
	size_time = strlen((char*)send_time);
 80057ee:	9003      	str	r0, [sp, #12]
 80057f0:	6028      	str	r0, [r5, #0]
	size_q1 = strlen((char*)send_q1);
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	f7fa fc88 	bl	8000108 <strlen>
 80057f8:	4f42      	ldr	r7, [pc, #264]	; (8005904 <data_aquisition+0x13c>)
	size_q2 = strlen((char*)send_q2);
 80057fa:	4b43      	ldr	r3, [pc, #268]	; (8005908 <data_aquisition+0x140>)
	size_q1 = strlen((char*)send_q1);
 80057fc:	6038      	str	r0, [r7, #0]
	size_q2 = strlen((char*)send_q2);
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	f7fa fc82 	bl	8000108 <strlen>
 8005804:	4b41      	ldr	r3, [pc, #260]	; (800590c <data_aquisition+0x144>)
 8005806:	6018      	str	r0, [r3, #0]
	size_torque = strlen((char*)send_torque);
 8005808:	4b41      	ldr	r3, [pc, #260]	; (8005910 <data_aquisition+0x148>)
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	f7fa fc7c 	bl	8000108 <strlen>

	//memset(data_buffer,0x00,40);
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 8005810:	9a02      	ldr	r2, [sp, #8]
	size_torque = strlen((char*)send_torque);
 8005812:	4b40      	ldr	r3, [pc, #256]	; (8005914 <data_aquisition+0x14c>)
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 8005814:	4694      	mov	ip, r2
	size_torque = strlen((char*)send_torque);
 8005816:	6018      	str	r0, [r3, #0]
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 8005818:	9b00      	ldr	r3, [sp, #0]
 800581a:	9a03      	ldr	r2, [sp, #12]
 800581c:	4463      	add	r3, ip
 800581e:	9901      	ldr	r1, [sp, #4]
 8005820:	0018      	movs	r0, r3
 8005822:	f000 f9a3 	bl	8005b6c <memcpy>
	memcpy(data_buffer+size_time+size_data_buffer, comma, 1);
 8005826:	4b3c      	ldr	r3, [pc, #240]	; (8005918 <data_aquisition+0x150>)
 8005828:	6829      	ldr	r1, [r5, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	781a      	ldrb	r2, [r3, #0]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	6833      	ldr	r3, [r6, #0]
 8005832:	185b      	adds	r3, r3, r1
 8005834:	6821      	ldr	r1, [r4, #0]
 8005836:	545a      	strb	r2, [r3, r1]
	memcpy(data_buffer+1+size_time+size_data_buffer, send_q1, size_q1);
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	1898      	adds	r0, r3, r2
 800583e:	6833      	ldr	r3, [r6, #0]
 8005840:	3001      	adds	r0, #1
 8005842:	1818      	adds	r0, r3, r0
 8005844:	4b2e      	ldr	r3, [pc, #184]	; (8005900 <data_aquisition+0x138>)
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	f000 f98f 	bl	8005b6c <memcpy>
	memcpy(data_buffer+1+size_q1+size_time+size_data_buffer, comma, 1);
 800584e:	4b32      	ldr	r3, [pc, #200]	; (8005918 <data_aquisition+0x150>)
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	6833      	ldr	r3, [r6, #0]
 8005858:	185b      	adds	r3, r3, r1
 800585a:	6829      	ldr	r1, [r5, #0]
 800585c:	185b      	adds	r3, r3, r1
 800585e:	6821      	ldr	r1, [r4, #0]
 8005860:	185b      	adds	r3, r3, r1
 8005862:	705a      	strb	r2, [r3, #1]
	memcpy(data_buffer+2+size_q1+size_time+size_data_buffer, send_q2, size_q2);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	682a      	ldr	r2, [r5, #0]
 8005868:	1898      	adds	r0, r3, r2
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	3002      	adds	r0, #2
 800586e:	18c0      	adds	r0, r0, r3
 8005870:	6833      	ldr	r3, [r6, #0]
 8005872:	1818      	adds	r0, r3, r0
 8005874:	4b24      	ldr	r3, [pc, #144]	; (8005908 <data_aquisition+0x140>)
 8005876:	6819      	ldr	r1, [r3, #0]
 8005878:	4b24      	ldr	r3, [pc, #144]	; (800590c <data_aquisition+0x144>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	001a      	movs	r2, r3
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	f000 f974 	bl	8005b6c <memcpy>
	memcpy(data_buffer+2+size_q1+size_time+size_q2+size_data_buffer, comma, 1);
 8005884:	4b24      	ldr	r3, [pc, #144]	; (8005918 <data_aquisition+0x150>)
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	781a      	ldrb	r2, [r3, #0]
 800588c:	4b1f      	ldr	r3, [pc, #124]	; (800590c <data_aquisition+0x144>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	6833      	ldr	r3, [r6, #0]
 8005894:	185b      	adds	r3, r3, r1
 8005896:	9900      	ldr	r1, [sp, #0]
 8005898:	185b      	adds	r3, r3, r1
 800589a:	6829      	ldr	r1, [r5, #0]
 800589c:	185b      	adds	r3, r3, r1
 800589e:	6821      	ldr	r1, [r4, #0]
 80058a0:	185b      	adds	r3, r3, r1
 80058a2:	709a      	strb	r2, [r3, #2]
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_data_buffer, send_torque, size_torque);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	682a      	ldr	r2, [r5, #0]
 80058a8:	1898      	adds	r0, r3, r2
 80058aa:	4b18      	ldr	r3, [pc, #96]	; (800590c <data_aquisition+0x144>)
 80058ac:	3003      	adds	r0, #3
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	18c0      	adds	r0, r0, r3
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	18c0      	adds	r0, r0, r3
 80058b6:	6833      	ldr	r3, [r6, #0]
 80058b8:	1818      	adds	r0, r3, r0
 80058ba:	4b15      	ldr	r3, [pc, #84]	; (8005910 <data_aquisition+0x148>)
 80058bc:	6819      	ldr	r1, [r3, #0]
 80058be:	4b15      	ldr	r3, [pc, #84]	; (8005914 <data_aquisition+0x14c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	001a      	movs	r2, r3
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	f000 f951 	bl	8005b6c <memcpy>
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_torque+size_data_buffer, endSymbol, 1);
 80058ca:	4b14      	ldr	r3, [pc, #80]	; (800591c <data_aquisition+0x154>)
 80058cc:	6832      	ldr	r2, [r6, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	683e      	ldr	r6, [r7, #0]
 80058d2:	7819      	ldrb	r1, [r3, #0]
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <data_aquisition+0x14c>)
 80058d6:	480d      	ldr	r0, [pc, #52]	; (800590c <data_aquisition+0x144>)
 80058d8:	681f      	ldr	r7, [r3, #0]
 80058da:	1992      	adds	r2, r2, r6
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	19d7      	adds	r7, r2, r7
 80058e0:	6805      	ldr	r5, [r0, #0]
 80058e2:	18fb      	adds	r3, r7, r3
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	195b      	adds	r3, r3, r5
 80058e8:	181b      	adds	r3, r3, r0
 80058ea:	70d9      	strb	r1, [r3, #3]

//	HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
}
 80058ec:	b005      	add	sp, #20
 80058ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f0:	200000b8 	.word	0x200000b8
 80058f4:	20000108 	.word	0x20000108
 80058f8:	20000118 	.word	0x20000118
 80058fc:	20000124 	.word	0x20000124
 8005900:	20000100 	.word	0x20000100
 8005904:	2000011c 	.word	0x2000011c
 8005908:	20000104 	.word	0x20000104
 800590c:	20000120 	.word	0x20000120
 8005910:	2000010c 	.word	0x2000010c
 8005914:	20000128 	.word	0x20000128
 8005918:	20000008 	.word	0x20000008
 800591c:	20000018 	.word	0x20000018

08005920 <uart_request>:


void uart_request(){
 8005920:	b570      	push	{r4, r5, r6, lr}

	rx_buffer[rx_buffer_cntr] = rx_byte;
 8005922:	4a2a      	ldr	r2, [pc, #168]	; (80059cc <uart_request+0xac>)
 8005924:	4e2a      	ldr	r6, [pc, #168]	; (80059d0 <uart_request+0xb0>)
 8005926:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <uart_request+0xb4>)
 8005928:	6814      	ldr	r4, [r2, #0]
 800592a:	7830      	ldrb	r0, [r6, #0]
 800592c:	7819      	ldrb	r1, [r3, #0]
 800592e:	5460      	strb	r0, [r4, r1]
	if(*rx_buffer == '$'){
 8005930:	6814      	ldr	r4, [r2, #0]
 8005932:	7822      	ldrb	r2, [r4, #0]
 8005934:	2a24      	cmp	r2, #36	; 0x24
 8005936:	d102      	bne.n	800593e <uart_request+0x1e>
		rx_buffer_cntr += 1;
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	3201      	adds	r2, #1
 800593c:	701a      	strb	r2, [r3, #0]
	}
	if(rx_buffer_cntr > 10){
 800593e:	781a      	ldrb	r2, [r3, #0]
 8005940:	2a0a      	cmp	r2, #10
 8005942:	d901      	bls.n	8005948 <uart_request+0x28>
		rx_buffer_cntr = 0;
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
	}
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 8005948:	7822      	ldrb	r2, [r4, #0]
 800594a:	4d23      	ldr	r5, [pc, #140]	; (80059d8 <uart_request+0xb8>)
 800594c:	2a24      	cmp	r2, #36	; 0x24
 800594e:	d123      	bne.n	8005998 <uart_request+0x78>
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	18a3      	adds	r3, r4, r2
 8005954:	3b01      	subs	r3, #1
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b0a      	cmp	r3, #10
 800595a:	d11d      	bne.n	8005998 <uart_request+0x78>
 800595c:	2a02      	cmp	r2, #2
 800595e:	d91b      	bls.n	8005998 <uart_request+0x78>

		switch(rx_buffer[1]){
 8005960:	7863      	ldrb	r3, [r4, #1]
 8005962:	2b42      	cmp	r3, #66	; 0x42
 8005964:	d01e      	beq.n	80059a4 <uart_request+0x84>
 8005966:	2b58      	cmp	r3, #88	; 0x58
 8005968:	d004      	beq.n	8005974 <uart_request+0x54>
 800596a:	2b41      	cmp	r3, #65	; 0x41
 800596c:	d114      	bne.n	8005998 <uart_request+0x78>
			enable_ADC_interrupt = 0;
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
			break;

		case 'A':	// verifying UART comms is working
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)acrobat),strlen((char*)acrobat));
 800596e:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <uart_request+0xbc>)
 8005970:	681c      	ldr	r4, [r3, #0]
 8005972:	e009      	b.n	8005988 <uart_request+0x68>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <uart_request+0xc0>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	6353      	str	r3, [r2, #52]	; 0x34
			enable_data_aquisition = 0;
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <uart_request+0xc4>)
 800597e:	7013      	strb	r3, [r2, #0]
			enable_encoder_reading = 0;
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <uart_request+0xc8>)
 8005982:	7013      	strb	r3, [r2, #0]
			enable_ADC_interrupt = 0;
 8005984:	4a19      	ldr	r2, [pc, #100]	; (80059ec <uart_request+0xcc>)
 8005986:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)acrobat),strlen((char*)acrobat));
 8005988:	0020      	movs	r0, r4
 800598a:	f7fa fbbd 	bl	8000108 <strlen>
 800598e:	0021      	movs	r1, r4
 8005990:	b282      	uxth	r2, r0
 8005992:	0028      	movs	r0, r5
 8005994:	f7fe fd7e 	bl	8004494 <HAL_UART_Transmit_IT>

		}

	}

	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8005998:	0031      	movs	r1, r6
 800599a:	0028      	movs	r0, r5
 800599c:	2201      	movs	r2, #1
 800599e:	f7fe fda7 	bl	80044f0 <HAL_UART_Receive_IT>


}
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
			if(*(rx_buffer+3) == '1'){
 80059a4:	78e3      	ldrb	r3, [r4, #3]
 80059a6:	2b31      	cmp	r3, #49	; 0x31
 80059a8:	d10b      	bne.n	80059c2 <uart_request+0xa2>
				HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 80059aa:	0020      	movs	r0, r4
 80059ac:	f7fa fbac 	bl	8000108 <strlen>
 80059b0:	0021      	movs	r1, r4
 80059b2:	b282      	uxth	r2, r0
 80059b4:	0028      	movs	r0, r5
 80059b6:	f7fe fd6d 	bl	8004494 <HAL_UART_Transmit_IT>
				enable_data_aquisition = 1;
 80059ba:	2201      	movs	r2, #1
				enable_data_aquisition = 0;
 80059bc:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <uart_request+0xc4>)
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e7ea      	b.n	8005998 <uart_request+0x78>
			else if(rx_buffer[3] == '0'){
 80059c2:	2b30      	cmp	r3, #48	; 0x30
 80059c4:	d1e8      	bne.n	8005998 <uart_request+0x78>
				enable_data_aquisition = 0;
 80059c6:	2200      	movs	r2, #0
 80059c8:	e7f8      	b.n	80059bc <uart_request+0x9c>
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	200000ec 	.word	0x200000ec
 80059d0:	200000f1 	.word	0x200000f1
 80059d4:	200000f0 	.word	0x200000f0
 80059d8:	200001cc 	.word	0x200001cc
 80059dc:	20000004 	.word	0x20000004
 80059e0:	20000148 	.word	0x20000148
 80059e4:	200000bd 	.word	0x200000bd
 80059e8:	20000015 	.word	0x20000015
 80059ec:	20000014 	.word	0x20000014

080059f0 <user_main>:
#include "function.h"
#include "variables.h"

extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim14;
void user_main(){
 80059f0:	b570      	push	{r4, r5, r6, lr}

	if(uart_flag == 1){
 80059f2:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <user_main+0x98>)
 80059f4:	781a      	ldrb	r2, [r3, #0]
 80059f6:	2a01      	cmp	r2, #1
 80059f8:	d103      	bne.n	8005a02 <user_main+0x12>
		uart_flag = 0;
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
		uart_request();
 80059fe:	f7ff ff8f 	bl	8005920 <uart_request>

	}

	if(enable_encoder_reading == 1){
 8005a02:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <user_main+0x9c>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <user_main+0x2a>
		if(encoder_flag == 1){
 8005a0a:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <user_main+0xa0>)
 8005a0c:	781a      	ldrb	r2, [r3, #0]
 8005a0e:	2a01      	cmp	r2, #1
 8005a10:	d103      	bne.n	8005a1a <user_main+0x2a>
			encoder_flag = 0;
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
			read_motor_position();
 8005a16:	f7ff f93b 	bl	8004c90 <read_motor_position>
		}
	}

	if(enable_ADC_interrupt == 1){
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <user_main+0xa4>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d109      	bne.n	8005a36 <user_main+0x46>
		if(adc_flag == 1){
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <user_main+0xa8>)
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	2a01      	cmp	r2, #1
 8005a28:	d105      	bne.n	8005a36 <user_main+0x46>
			adc_flag = 0;
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	701a      	strb	r2, [r3, #0]
			get_current_potentiometer();
 8005a2e:	f7ff f879 	bl	8004b24 <get_current_potentiometer>
			control_law();
 8005a32:	f7ff f973 	bl	8004d1c <control_law>
		}
	}


	if(enable_data_aquisition){
 8005a36:	4c19      	ldr	r4, [pc, #100]	; (8005a9c <user_main+0xac>)
 8005a38:	7823      	ldrb	r3, [r4, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d010      	beq.n	8005a60 <user_main+0x70>
		if(data_flag == 1){ // send system variables over UART
 8005a3e:	4d18      	ldr	r5, [pc, #96]	; (8005aa0 <user_main+0xb0>)
 8005a40:	782b      	ldrb	r3, [r5, #0]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d10c      	bne.n	8005a60 <user_main+0x70>
			time += 1;
 8005a46:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <user_main+0xb4>)
			sprintf(send_time,"%lu", time);
 8005a48:	4917      	ldr	r1, [pc, #92]	; (8005aa8 <user_main+0xb8>)
			time += 1;
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	3201      	adds	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
			sprintf(send_time,"%lu", time);
 8005a50:	4b16      	ldr	r3, [pc, #88]	; (8005aac <user_main+0xbc>)
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	f000 f956 	bl	8005d04 <siprintf>
			data_flag = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	702b      	strb	r3, [r5, #0]
			data_aquisition();
 8005a5c:	f7ff feb4 	bl	80057c8 <data_aquisition>
		}
	}

	if(send_data_flag && enable_data_aquisition){
 8005a60:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <user_main+0xc0>)
 8005a62:	781a      	ldrb	r2, [r3, #0]
 8005a64:	2a00      	cmp	r2, #0
 8005a66:	d00e      	beq.n	8005a86 <user_main+0x96>
 8005a68:	7822      	ldrb	r2, [r4, #0]
 8005a6a:	2a00      	cmp	r2, #0
 8005a6c:	d00b      	beq.n	8005a86 <user_main+0x96>
		send_data_flag = 0;
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <user_main+0xc4>)
 8005a74:	681c      	ldr	r4, [r3, #0]
 8005a76:	0020      	movs	r0, r4
 8005a78:	f7fa fb46 	bl	8000108 <strlen>
 8005a7c:	0021      	movs	r1, r4
 8005a7e:	b282      	uxth	r2, r0
 8005a80:	480d      	ldr	r0, [pc, #52]	; (8005ab8 <user_main+0xc8>)
 8005a82:	f7fe fd7f 	bl	8004584 <HAL_UART_Transmit_DMA>
	}

//	time = htim14.Instance->CNT;


}
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
 8005a88:	20000131 	.word	0x20000131
 8005a8c:	20000015 	.word	0x20000015
 8005a90:	200000be 	.word	0x200000be
 8005a94:	20000014 	.word	0x20000014
 8005a98:	200000ac 	.word	0x200000ac
 8005a9c:	200000bd 	.word	0x200000bd
 8005aa0:	200000bc 	.word	0x200000bc
 8005aa4:	2000012c 	.word	0x2000012c
 8005aa8:	08007924 	.word	0x08007924
 8005aac:	20000108 	.word	0x20000108
 8005ab0:	2000001c 	.word	0x2000001c
 8005ab4:	200000b8 	.word	0x200000b8
 8005ab8:	200001cc 	.word	0x200001cc

08005abc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005abc:	480d      	ldr	r0, [pc, #52]	; (8005af4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005abe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ac0:	480d      	ldr	r0, [pc, #52]	; (8005af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005ac2:	490e      	ldr	r1, [pc, #56]	; (8005afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ac4:	4a0e      	ldr	r2, [pc, #56]	; (8005b00 <LoopForever+0xe>)
  movs r3, #0
 8005ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ac8:	e002      	b.n	8005ad0 <LoopCopyDataInit>

08005aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ace:	3304      	adds	r3, #4

08005ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ad4:	d3f9      	bcc.n	8005aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ad6:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ad8:	4c0b      	ldr	r4, [pc, #44]	; (8005b08 <LoopForever+0x16>)
  movs r3, #0
 8005ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005adc:	e001      	b.n	8005ae2 <LoopFillZerobss>

08005ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ae0:	3204      	adds	r2, #4

08005ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ae4:	d3fb      	bcc.n	8005ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005ae6:	f7ff fe3f 	bl	8005768 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005aea:	f000 f811 	bl	8005b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005aee:	f7ff fbd5 	bl	800529c <main>

08005af2 <LoopForever>:

LoopForever:
    b LoopForever
 8005af2:	e7fe      	b.n	8005af2 <LoopForever>
  ldr   r0, =_estack
 8005af4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8005af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005afc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8005b00:	08007c30 	.word	0x08007c30
  ldr r2, =_sbss
 8005b04:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8005b08:	20000350 	.word	0x20000350

08005b0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b0c:	e7fe      	b.n	8005b0c <ADC1_IRQHandler>
	...

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	2600      	movs	r6, #0
 8005b14:	4d0c      	ldr	r5, [pc, #48]	; (8005b48 <__libc_init_array+0x38>)
 8005b16:	4c0d      	ldr	r4, [pc, #52]	; (8005b4c <__libc_init_array+0x3c>)
 8005b18:	1b64      	subs	r4, r4, r5
 8005b1a:	10a4      	asrs	r4, r4, #2
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	2600      	movs	r6, #0
 8005b22:	f001 fe41 	bl	80077a8 <_init>
 8005b26:	4d0a      	ldr	r5, [pc, #40]	; (8005b50 <__libc_init_array+0x40>)
 8005b28:	4c0a      	ldr	r4, [pc, #40]	; (8005b54 <__libc_init_array+0x44>)
 8005b2a:	1b64      	subs	r4, r4, r5
 8005b2c:	10a4      	asrs	r4, r4, #2
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	00b3      	lsls	r3, r6, #2
 8005b36:	58eb      	ldr	r3, [r5, r3]
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	00b3      	lsls	r3, r6, #2
 8005b40:	58eb      	ldr	r3, [r5, r3]
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	08007c28 	.word	0x08007c28
 8005b4c:	08007c28 	.word	0x08007c28
 8005b50:	08007c28 	.word	0x08007c28
 8005b54:	08007c2c 	.word	0x08007c2c

08005b58 <malloc>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <malloc+0x10>)
 8005b5c:	0001      	movs	r1, r0
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	f000 f860 	bl	8005c24 <_malloc_r>
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	46c0      	nop			; (mov r8, r8)
 8005b68:	20000028 	.word	0x20000028

08005b6c <memcpy>:
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	b510      	push	{r4, lr}
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d100      	bne.n	8005b76 <memcpy+0xa>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	5ccc      	ldrb	r4, [r1, r3]
 8005b78:	54c4      	strb	r4, [r0, r3]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	e7f8      	b.n	8005b70 <memcpy+0x4>

08005b7e <memset>:
 8005b7e:	0003      	movs	r3, r0
 8005b80:	1882      	adds	r2, r0, r2
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d100      	bne.n	8005b88 <memset+0xa>
 8005b86:	4770      	bx	lr
 8005b88:	7019      	strb	r1, [r3, #0]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	e7f9      	b.n	8005b82 <memset+0x4>
	...

08005b90 <_free_r>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	0005      	movs	r5, r0
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d010      	beq.n	8005bba <_free_r+0x2a>
 8005b98:	1f0c      	subs	r4, r1, #4
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	da00      	bge.n	8005ba2 <_free_r+0x12>
 8005ba0:	18e4      	adds	r4, r4, r3
 8005ba2:	0028      	movs	r0, r5
 8005ba4:	f000 f8d0 	bl	8005d48 <__malloc_lock>
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <_free_r+0x90>)
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <_free_r+0x2c>
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	6014      	str	r4, [r2, #0]
 8005bb4:	0028      	movs	r0, r5
 8005bb6:	f000 f8c8 	bl	8005d4a <__malloc_unlock>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d909      	bls.n	8005bd4 <_free_r+0x44>
 8005bc0:	6821      	ldr	r1, [r4, #0]
 8005bc2:	1860      	adds	r0, r4, r1
 8005bc4:	4283      	cmp	r3, r0
 8005bc6:	d1f3      	bne.n	8005bb0 <_free_r+0x20>
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	1841      	adds	r1, r0, r1
 8005bce:	6021      	str	r1, [r4, #0]
 8005bd0:	e7ee      	b.n	8005bb0 <_free_r+0x20>
 8005bd2:	0013      	movs	r3, r2
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	2a00      	cmp	r2, #0
 8005bd8:	d001      	beq.n	8005bde <_free_r+0x4e>
 8005bda:	42a2      	cmp	r2, r4
 8005bdc:	d9f9      	bls.n	8005bd2 <_free_r+0x42>
 8005bde:	6819      	ldr	r1, [r3, #0]
 8005be0:	1858      	adds	r0, r3, r1
 8005be2:	42a0      	cmp	r0, r4
 8005be4:	d10b      	bne.n	8005bfe <_free_r+0x6e>
 8005be6:	6820      	ldr	r0, [r4, #0]
 8005be8:	1809      	adds	r1, r1, r0
 8005bea:	1858      	adds	r0, r3, r1
 8005bec:	6019      	str	r1, [r3, #0]
 8005bee:	4282      	cmp	r2, r0
 8005bf0:	d1e0      	bne.n	8005bb4 <_free_r+0x24>
 8005bf2:	6810      	ldr	r0, [r2, #0]
 8005bf4:	6852      	ldr	r2, [r2, #4]
 8005bf6:	1841      	adds	r1, r0, r1
 8005bf8:	6019      	str	r1, [r3, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	e7da      	b.n	8005bb4 <_free_r+0x24>
 8005bfe:	42a0      	cmp	r0, r4
 8005c00:	d902      	bls.n	8005c08 <_free_r+0x78>
 8005c02:	230c      	movs	r3, #12
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	e7d5      	b.n	8005bb4 <_free_r+0x24>
 8005c08:	6821      	ldr	r1, [r4, #0]
 8005c0a:	1860      	adds	r0, r4, r1
 8005c0c:	4282      	cmp	r2, r0
 8005c0e:	d103      	bne.n	8005c18 <_free_r+0x88>
 8005c10:	6810      	ldr	r0, [r2, #0]
 8005c12:	6852      	ldr	r2, [r2, #4]
 8005c14:	1841      	adds	r1, r0, r1
 8005c16:	6021      	str	r1, [r4, #0]
 8005c18:	6062      	str	r2, [r4, #4]
 8005c1a:	605c      	str	r4, [r3, #4]
 8005c1c:	e7ca      	b.n	8005bb4 <_free_r+0x24>
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	20000138 	.word	0x20000138

08005c24 <_malloc_r>:
 8005c24:	2303      	movs	r3, #3
 8005c26:	b570      	push	{r4, r5, r6, lr}
 8005c28:	1ccd      	adds	r5, r1, #3
 8005c2a:	439d      	bics	r5, r3
 8005c2c:	3508      	adds	r5, #8
 8005c2e:	0006      	movs	r6, r0
 8005c30:	2d0c      	cmp	r5, #12
 8005c32:	d21e      	bcs.n	8005c72 <_malloc_r+0x4e>
 8005c34:	250c      	movs	r5, #12
 8005c36:	42a9      	cmp	r1, r5
 8005c38:	d81d      	bhi.n	8005c76 <_malloc_r+0x52>
 8005c3a:	0030      	movs	r0, r6
 8005c3c:	f000 f884 	bl	8005d48 <__malloc_lock>
 8005c40:	4a25      	ldr	r2, [pc, #148]	; (8005cd8 <_malloc_r+0xb4>)
 8005c42:	6814      	ldr	r4, [r2, #0]
 8005c44:	0021      	movs	r1, r4
 8005c46:	2900      	cmp	r1, #0
 8005c48:	d119      	bne.n	8005c7e <_malloc_r+0x5a>
 8005c4a:	4c24      	ldr	r4, [pc, #144]	; (8005cdc <_malloc_r+0xb8>)
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <_malloc_r+0x36>
 8005c52:	0030      	movs	r0, r6
 8005c54:	f000 f844 	bl	8005ce0 <_sbrk_r>
 8005c58:	6020      	str	r0, [r4, #0]
 8005c5a:	0029      	movs	r1, r5
 8005c5c:	0030      	movs	r0, r6
 8005c5e:	f000 f83f 	bl	8005ce0 <_sbrk_r>
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	d12c      	bne.n	8005cc0 <_malloc_r+0x9c>
 8005c66:	230c      	movs	r3, #12
 8005c68:	0030      	movs	r0, r6
 8005c6a:	6033      	str	r3, [r6, #0]
 8005c6c:	f000 f86d 	bl	8005d4a <__malloc_unlock>
 8005c70:	e003      	b.n	8005c7a <_malloc_r+0x56>
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	dadf      	bge.n	8005c36 <_malloc_r+0x12>
 8005c76:	230c      	movs	r3, #12
 8005c78:	6033      	str	r3, [r6, #0]
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	bd70      	pop	{r4, r5, r6, pc}
 8005c7e:	680b      	ldr	r3, [r1, #0]
 8005c80:	1b5b      	subs	r3, r3, r5
 8005c82:	d41a      	bmi.n	8005cba <_malloc_r+0x96>
 8005c84:	2b0b      	cmp	r3, #11
 8005c86:	d903      	bls.n	8005c90 <_malloc_r+0x6c>
 8005c88:	600b      	str	r3, [r1, #0]
 8005c8a:	18cc      	adds	r4, r1, r3
 8005c8c:	6025      	str	r5, [r4, #0]
 8005c8e:	e003      	b.n	8005c98 <_malloc_r+0x74>
 8005c90:	428c      	cmp	r4, r1
 8005c92:	d10e      	bne.n	8005cb2 <_malloc_r+0x8e>
 8005c94:	6863      	ldr	r3, [r4, #4]
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	0030      	movs	r0, r6
 8005c9a:	f000 f856 	bl	8005d4a <__malloc_unlock>
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	300b      	adds	r0, #11
 8005ca4:	1d23      	adds	r3, r4, #4
 8005ca6:	4390      	bics	r0, r2
 8005ca8:	1ac3      	subs	r3, r0, r3
 8005caa:	d0e7      	beq.n	8005c7c <_malloc_r+0x58>
 8005cac:	425a      	negs	r2, r3
 8005cae:	50e2      	str	r2, [r4, r3]
 8005cb0:	e7e4      	b.n	8005c7c <_malloc_r+0x58>
 8005cb2:	684b      	ldr	r3, [r1, #4]
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	000c      	movs	r4, r1
 8005cb8:	e7ee      	b.n	8005c98 <_malloc_r+0x74>
 8005cba:	000c      	movs	r4, r1
 8005cbc:	6849      	ldr	r1, [r1, #4]
 8005cbe:	e7c2      	b.n	8005c46 <_malloc_r+0x22>
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	1cc4      	adds	r4, r0, #3
 8005cc4:	439c      	bics	r4, r3
 8005cc6:	42a0      	cmp	r0, r4
 8005cc8:	d0e0      	beq.n	8005c8c <_malloc_r+0x68>
 8005cca:	1a21      	subs	r1, r4, r0
 8005ccc:	0030      	movs	r0, r6
 8005cce:	f000 f807 	bl	8005ce0 <_sbrk_r>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d1da      	bne.n	8005c8c <_malloc_r+0x68>
 8005cd6:	e7c6      	b.n	8005c66 <_malloc_r+0x42>
 8005cd8:	20000138 	.word	0x20000138
 8005cdc:	2000013c 	.word	0x2000013c

08005ce0 <_sbrk_r>:
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	b570      	push	{r4, r5, r6, lr}
 8005ce4:	4c06      	ldr	r4, [pc, #24]	; (8005d00 <_sbrk_r+0x20>)
 8005ce6:	0005      	movs	r5, r0
 8005ce8:	0008      	movs	r0, r1
 8005cea:	6023      	str	r3, [r4, #0]
 8005cec:	f001 fd4c 	bl	8007788 <_sbrk>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d103      	bne.n	8005cfc <_sbrk_r+0x1c>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d000      	beq.n	8005cfc <_sbrk_r+0x1c>
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	bd70      	pop	{r4, r5, r6, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	2000034c 	.word	0x2000034c

08005d04 <siprintf>:
 8005d04:	b40e      	push	{r1, r2, r3}
 8005d06:	b510      	push	{r4, lr}
 8005d08:	b09d      	sub	sp, #116	; 0x74
 8005d0a:	a902      	add	r1, sp, #8
 8005d0c:	9002      	str	r0, [sp, #8]
 8005d0e:	6108      	str	r0, [r1, #16]
 8005d10:	480b      	ldr	r0, [pc, #44]	; (8005d40 <siprintf+0x3c>)
 8005d12:	2482      	movs	r4, #130	; 0x82
 8005d14:	6088      	str	r0, [r1, #8]
 8005d16:	6148      	str	r0, [r1, #20]
 8005d18:	2001      	movs	r0, #1
 8005d1a:	4240      	negs	r0, r0
 8005d1c:	ab1f      	add	r3, sp, #124	; 0x7c
 8005d1e:	81c8      	strh	r0, [r1, #14]
 8005d20:	4808      	ldr	r0, [pc, #32]	; (8005d44 <siprintf+0x40>)
 8005d22:	cb04      	ldmia	r3!, {r2}
 8005d24:	00a4      	lsls	r4, r4, #2
 8005d26:	6800      	ldr	r0, [r0, #0]
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	818c      	strh	r4, [r1, #12]
 8005d2c:	f000 f870 	bl	8005e10 <_svfiprintf_r>
 8005d30:	2300      	movs	r3, #0
 8005d32:	9a02      	ldr	r2, [sp, #8]
 8005d34:	7013      	strb	r3, [r2, #0]
 8005d36:	b01d      	add	sp, #116	; 0x74
 8005d38:	bc10      	pop	{r4}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	b003      	add	sp, #12
 8005d3e:	4718      	bx	r3
 8005d40:	7fffffff 	.word	0x7fffffff
 8005d44:	20000028 	.word	0x20000028

08005d48 <__malloc_lock>:
 8005d48:	4770      	bx	lr

08005d4a <__malloc_unlock>:
 8005d4a:	4770      	bx	lr

08005d4c <__ssputs_r>:
 8005d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4e:	688e      	ldr	r6, [r1, #8]
 8005d50:	b085      	sub	sp, #20
 8005d52:	0007      	movs	r7, r0
 8005d54:	000c      	movs	r4, r1
 8005d56:	9203      	str	r2, [sp, #12]
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	429e      	cmp	r6, r3
 8005d5c:	d839      	bhi.n	8005dd2 <__ssputs_r+0x86>
 8005d5e:	2390      	movs	r3, #144	; 0x90
 8005d60:	898a      	ldrh	r2, [r1, #12]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	421a      	tst	r2, r3
 8005d66:	d034      	beq.n	8005dd2 <__ssputs_r+0x86>
 8005d68:	2503      	movs	r5, #3
 8005d6a:	6909      	ldr	r1, [r1, #16]
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	1a5b      	subs	r3, r3, r1
 8005d70:	9302      	str	r3, [sp, #8]
 8005d72:	6963      	ldr	r3, [r4, #20]
 8005d74:	9802      	ldr	r0, [sp, #8]
 8005d76:	435d      	muls	r5, r3
 8005d78:	0feb      	lsrs	r3, r5, #31
 8005d7a:	195d      	adds	r5, r3, r5
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	106d      	asrs	r5, r5, #1
 8005d80:	3301      	adds	r3, #1
 8005d82:	181b      	adds	r3, r3, r0
 8005d84:	42ab      	cmp	r3, r5
 8005d86:	d900      	bls.n	8005d8a <__ssputs_r+0x3e>
 8005d88:	001d      	movs	r5, r3
 8005d8a:	0553      	lsls	r3, r2, #21
 8005d8c:	d532      	bpl.n	8005df4 <__ssputs_r+0xa8>
 8005d8e:	0029      	movs	r1, r5
 8005d90:	0038      	movs	r0, r7
 8005d92:	f7ff ff47 	bl	8005c24 <_malloc_r>
 8005d96:	1e06      	subs	r6, r0, #0
 8005d98:	d109      	bne.n	8005dae <__ssputs_r+0x62>
 8005d9a:	230c      	movs	r3, #12
 8005d9c:	603b      	str	r3, [r7, #0]
 8005d9e:	2340      	movs	r3, #64	; 0x40
 8005da0:	2001      	movs	r0, #1
 8005da2:	89a2      	ldrh	r2, [r4, #12]
 8005da4:	4240      	negs	r0, r0
 8005da6:	4313      	orrs	r3, r2
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	b005      	add	sp, #20
 8005dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dae:	9a02      	ldr	r2, [sp, #8]
 8005db0:	6921      	ldr	r1, [r4, #16]
 8005db2:	f7ff fedb 	bl	8005b6c <memcpy>
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	4a14      	ldr	r2, [pc, #80]	; (8005e0c <__ssputs_r+0xc0>)
 8005dba:	401a      	ands	r2, r3
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	81a3      	strh	r3, [r4, #12]
 8005dc2:	9b02      	ldr	r3, [sp, #8]
 8005dc4:	6126      	str	r6, [r4, #16]
 8005dc6:	18f6      	adds	r6, r6, r3
 8005dc8:	6026      	str	r6, [r4, #0]
 8005dca:	6165      	str	r5, [r4, #20]
 8005dcc:	9e01      	ldr	r6, [sp, #4]
 8005dce:	1aed      	subs	r5, r5, r3
 8005dd0:	60a5      	str	r5, [r4, #8]
 8005dd2:	9b01      	ldr	r3, [sp, #4]
 8005dd4:	42b3      	cmp	r3, r6
 8005dd6:	d200      	bcs.n	8005dda <__ssputs_r+0x8e>
 8005dd8:	001e      	movs	r6, r3
 8005dda:	0032      	movs	r2, r6
 8005ddc:	9903      	ldr	r1, [sp, #12]
 8005dde:	6820      	ldr	r0, [r4, #0]
 8005de0:	f000 faad 	bl	800633e <memmove>
 8005de4:	68a3      	ldr	r3, [r4, #8]
 8005de6:	2000      	movs	r0, #0
 8005de8:	1b9b      	subs	r3, r3, r6
 8005dea:	60a3      	str	r3, [r4, #8]
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	199e      	adds	r6, r3, r6
 8005df0:	6026      	str	r6, [r4, #0]
 8005df2:	e7da      	b.n	8005daa <__ssputs_r+0x5e>
 8005df4:	002a      	movs	r2, r5
 8005df6:	0038      	movs	r0, r7
 8005df8:	f000 fab3 	bl	8006362 <_realloc_r>
 8005dfc:	1e06      	subs	r6, r0, #0
 8005dfe:	d1e0      	bne.n	8005dc2 <__ssputs_r+0x76>
 8005e00:	6921      	ldr	r1, [r4, #16]
 8005e02:	0038      	movs	r0, r7
 8005e04:	f7ff fec4 	bl	8005b90 <_free_r>
 8005e08:	e7c7      	b.n	8005d9a <__ssputs_r+0x4e>
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	fffffb7f 	.word	0xfffffb7f

08005e10 <_svfiprintf_r>:
 8005e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e12:	b09f      	sub	sp, #124	; 0x7c
 8005e14:	9002      	str	r0, [sp, #8]
 8005e16:	9305      	str	r3, [sp, #20]
 8005e18:	898b      	ldrh	r3, [r1, #12]
 8005e1a:	000f      	movs	r7, r1
 8005e1c:	0016      	movs	r6, r2
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	d511      	bpl.n	8005e46 <_svfiprintf_r+0x36>
 8005e22:	690b      	ldr	r3, [r1, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10e      	bne.n	8005e46 <_svfiprintf_r+0x36>
 8005e28:	2140      	movs	r1, #64	; 0x40
 8005e2a:	f7ff fefb 	bl	8005c24 <_malloc_r>
 8005e2e:	6038      	str	r0, [r7, #0]
 8005e30:	6138      	str	r0, [r7, #16]
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d105      	bne.n	8005e42 <_svfiprintf_r+0x32>
 8005e36:	230c      	movs	r3, #12
 8005e38:	9a02      	ldr	r2, [sp, #8]
 8005e3a:	3801      	subs	r0, #1
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	b01f      	add	sp, #124	; 0x7c
 8005e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	2300      	movs	r3, #0
 8005e48:	ad06      	add	r5, sp, #24
 8005e4a:	616b      	str	r3, [r5, #20]
 8005e4c:	3320      	adds	r3, #32
 8005e4e:	766b      	strb	r3, [r5, #25]
 8005e50:	3310      	adds	r3, #16
 8005e52:	76ab      	strb	r3, [r5, #26]
 8005e54:	0034      	movs	r4, r6
 8005e56:	7823      	ldrb	r3, [r4, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d147      	bne.n	8005eec <_svfiprintf_r+0xdc>
 8005e5c:	1ba3      	subs	r3, r4, r6
 8005e5e:	9304      	str	r3, [sp, #16]
 8005e60:	d00d      	beq.n	8005e7e <_svfiprintf_r+0x6e>
 8005e62:	1ba3      	subs	r3, r4, r6
 8005e64:	0032      	movs	r2, r6
 8005e66:	0039      	movs	r1, r7
 8005e68:	9802      	ldr	r0, [sp, #8]
 8005e6a:	f7ff ff6f 	bl	8005d4c <__ssputs_r>
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	d100      	bne.n	8005e74 <_svfiprintf_r+0x64>
 8005e72:	e0b5      	b.n	8005fe0 <_svfiprintf_r+0x1d0>
 8005e74:	696a      	ldr	r2, [r5, #20]
 8005e76:	9b04      	ldr	r3, [sp, #16]
 8005e78:	4694      	mov	ip, r2
 8005e7a:	4463      	add	r3, ip
 8005e7c:	616b      	str	r3, [r5, #20]
 8005e7e:	7823      	ldrb	r3, [r4, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d100      	bne.n	8005e86 <_svfiprintf_r+0x76>
 8005e84:	e0ac      	b.n	8005fe0 <_svfiprintf_r+0x1d0>
 8005e86:	2201      	movs	r2, #1
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4252      	negs	r2, r2
 8005e8c:	606a      	str	r2, [r5, #4]
 8005e8e:	a902      	add	r1, sp, #8
 8005e90:	3254      	adds	r2, #84	; 0x54
 8005e92:	1852      	adds	r2, r2, r1
 8005e94:	3401      	adds	r4, #1
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	60eb      	str	r3, [r5, #12]
 8005e9a:	60ab      	str	r3, [r5, #8]
 8005e9c:	7013      	strb	r3, [r2, #0]
 8005e9e:	65ab      	str	r3, [r5, #88]	; 0x58
 8005ea0:	4e58      	ldr	r6, [pc, #352]	; (8006004 <_svfiprintf_r+0x1f4>)
 8005ea2:	2205      	movs	r2, #5
 8005ea4:	7821      	ldrb	r1, [r4, #0]
 8005ea6:	0030      	movs	r0, r6
 8005ea8:	f000 fa3e 	bl	8006328 <memchr>
 8005eac:	1c62      	adds	r2, r4, #1
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d120      	bne.n	8005ef4 <_svfiprintf_r+0xe4>
 8005eb2:	6829      	ldr	r1, [r5, #0]
 8005eb4:	06cb      	lsls	r3, r1, #27
 8005eb6:	d504      	bpl.n	8005ec2 <_svfiprintf_r+0xb2>
 8005eb8:	2353      	movs	r3, #83	; 0x53
 8005eba:	ae02      	add	r6, sp, #8
 8005ebc:	3020      	adds	r0, #32
 8005ebe:	199b      	adds	r3, r3, r6
 8005ec0:	7018      	strb	r0, [r3, #0]
 8005ec2:	070b      	lsls	r3, r1, #28
 8005ec4:	d504      	bpl.n	8005ed0 <_svfiprintf_r+0xc0>
 8005ec6:	2353      	movs	r3, #83	; 0x53
 8005ec8:	202b      	movs	r0, #43	; 0x2b
 8005eca:	ae02      	add	r6, sp, #8
 8005ecc:	199b      	adds	r3, r3, r6
 8005ece:	7018      	strb	r0, [r3, #0]
 8005ed0:	7823      	ldrb	r3, [r4, #0]
 8005ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed4:	d016      	beq.n	8005f04 <_svfiprintf_r+0xf4>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	210a      	movs	r1, #10
 8005eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005edc:	7822      	ldrb	r2, [r4, #0]
 8005ede:	3a30      	subs	r2, #48	; 0x30
 8005ee0:	2a09      	cmp	r2, #9
 8005ee2:	d955      	bls.n	8005f90 <_svfiprintf_r+0x180>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d015      	beq.n	8005f14 <_svfiprintf_r+0x104>
 8005ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eea:	e013      	b.n	8005f14 <_svfiprintf_r+0x104>
 8005eec:	2b25      	cmp	r3, #37	; 0x25
 8005eee:	d0b5      	beq.n	8005e5c <_svfiprintf_r+0x4c>
 8005ef0:	3401      	adds	r4, #1
 8005ef2:	e7b0      	b.n	8005e56 <_svfiprintf_r+0x46>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	1b80      	subs	r0, r0, r6
 8005ef8:	4083      	lsls	r3, r0
 8005efa:	6829      	ldr	r1, [r5, #0]
 8005efc:	0014      	movs	r4, r2
 8005efe:	430b      	orrs	r3, r1
 8005f00:	602b      	str	r3, [r5, #0]
 8005f02:	e7cd      	b.n	8005ea0 <_svfiprintf_r+0x90>
 8005f04:	9b05      	ldr	r3, [sp, #20]
 8005f06:	1d18      	adds	r0, r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	9005      	str	r0, [sp, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	db39      	blt.n	8005f84 <_svfiprintf_r+0x174>
 8005f10:	9309      	str	r3, [sp, #36]	; 0x24
 8005f12:	0014      	movs	r4, r2
 8005f14:	7823      	ldrb	r3, [r4, #0]
 8005f16:	2b2e      	cmp	r3, #46	; 0x2e
 8005f18:	d10b      	bne.n	8005f32 <_svfiprintf_r+0x122>
 8005f1a:	7863      	ldrb	r3, [r4, #1]
 8005f1c:	1c62      	adds	r2, r4, #1
 8005f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f20:	d13e      	bne.n	8005fa0 <_svfiprintf_r+0x190>
 8005f22:	9b05      	ldr	r3, [sp, #20]
 8005f24:	3402      	adds	r4, #2
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	9205      	str	r2, [sp, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db34      	blt.n	8005f9a <_svfiprintf_r+0x18a>
 8005f30:	9307      	str	r3, [sp, #28]
 8005f32:	4e35      	ldr	r6, [pc, #212]	; (8006008 <_svfiprintf_r+0x1f8>)
 8005f34:	7821      	ldrb	r1, [r4, #0]
 8005f36:	2203      	movs	r2, #3
 8005f38:	0030      	movs	r0, r6
 8005f3a:	f000 f9f5 	bl	8006328 <memchr>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d006      	beq.n	8005f50 <_svfiprintf_r+0x140>
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	1b80      	subs	r0, r0, r6
 8005f46:	4083      	lsls	r3, r0
 8005f48:	682a      	ldr	r2, [r5, #0]
 8005f4a:	3401      	adds	r4, #1
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	7821      	ldrb	r1, [r4, #0]
 8005f52:	2206      	movs	r2, #6
 8005f54:	482d      	ldr	r0, [pc, #180]	; (800600c <_svfiprintf_r+0x1fc>)
 8005f56:	1c66      	adds	r6, r4, #1
 8005f58:	7629      	strb	r1, [r5, #24]
 8005f5a:	f000 f9e5 	bl	8006328 <memchr>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d046      	beq.n	8005ff0 <_svfiprintf_r+0x1e0>
 8005f62:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <_svfiprintf_r+0x200>)
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d12f      	bne.n	8005fc8 <_svfiprintf_r+0x1b8>
 8005f68:	6829      	ldr	r1, [r5, #0]
 8005f6a:	9b05      	ldr	r3, [sp, #20]
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	05c9      	lsls	r1, r1, #23
 8005f70:	d528      	bpl.n	8005fc4 <_svfiprintf_r+0x1b4>
 8005f72:	189b      	adds	r3, r3, r2
 8005f74:	4393      	bics	r3, r2
 8005f76:	3308      	adds	r3, #8
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	696b      	ldr	r3, [r5, #20]
 8005f7c:	9a03      	ldr	r2, [sp, #12]
 8005f7e:	189b      	adds	r3, r3, r2
 8005f80:	616b      	str	r3, [r5, #20]
 8005f82:	e767      	b.n	8005e54 <_svfiprintf_r+0x44>
 8005f84:	425b      	negs	r3, r3
 8005f86:	60eb      	str	r3, [r5, #12]
 8005f88:	2302      	movs	r3, #2
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	e7c0      	b.n	8005f12 <_svfiprintf_r+0x102>
 8005f90:	434b      	muls	r3, r1
 8005f92:	3401      	adds	r4, #1
 8005f94:	189b      	adds	r3, r3, r2
 8005f96:	2001      	movs	r0, #1
 8005f98:	e7a0      	b.n	8005edc <_svfiprintf_r+0xcc>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	425b      	negs	r3, r3
 8005f9e:	e7c7      	b.n	8005f30 <_svfiprintf_r+0x120>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	0014      	movs	r4, r2
 8005fa4:	200a      	movs	r0, #10
 8005fa6:	001a      	movs	r2, r3
 8005fa8:	606b      	str	r3, [r5, #4]
 8005faa:	7821      	ldrb	r1, [r4, #0]
 8005fac:	3930      	subs	r1, #48	; 0x30
 8005fae:	2909      	cmp	r1, #9
 8005fb0:	d903      	bls.n	8005fba <_svfiprintf_r+0x1aa>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0bd      	beq.n	8005f32 <_svfiprintf_r+0x122>
 8005fb6:	9207      	str	r2, [sp, #28]
 8005fb8:	e7bb      	b.n	8005f32 <_svfiprintf_r+0x122>
 8005fba:	4342      	muls	r2, r0
 8005fbc:	3401      	adds	r4, #1
 8005fbe:	1852      	adds	r2, r2, r1
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e7f2      	b.n	8005faa <_svfiprintf_r+0x19a>
 8005fc4:	3307      	adds	r3, #7
 8005fc6:	e7d5      	b.n	8005f74 <_svfiprintf_r+0x164>
 8005fc8:	ab05      	add	r3, sp, #20
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	003a      	movs	r2, r7
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <_svfiprintf_r+0x204>)
 8005fd0:	0029      	movs	r1, r5
 8005fd2:	9802      	ldr	r0, [sp, #8]
 8005fd4:	e000      	b.n	8005fd8 <_svfiprintf_r+0x1c8>
 8005fd6:	bf00      	nop
 8005fd8:	9003      	str	r0, [sp, #12]
 8005fda:	9b03      	ldr	r3, [sp, #12]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	d1cc      	bne.n	8005f7a <_svfiprintf_r+0x16a>
 8005fe0:	89bb      	ldrh	r3, [r7, #12]
 8005fe2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005fe4:	065b      	lsls	r3, r3, #25
 8005fe6:	d400      	bmi.n	8005fea <_svfiprintf_r+0x1da>
 8005fe8:	e729      	b.n	8005e3e <_svfiprintf_r+0x2e>
 8005fea:	2001      	movs	r0, #1
 8005fec:	4240      	negs	r0, r0
 8005fee:	e726      	b.n	8005e3e <_svfiprintf_r+0x2e>
 8005ff0:	ab05      	add	r3, sp, #20
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	003a      	movs	r2, r7
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <_svfiprintf_r+0x204>)
 8005ff8:	0029      	movs	r1, r5
 8005ffa:	9802      	ldr	r0, [sp, #8]
 8005ffc:	f000 f87a 	bl	80060f4 <_printf_i>
 8006000:	e7ea      	b.n	8005fd8 <_svfiprintf_r+0x1c8>
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	080079dc 	.word	0x080079dc
 8006008:	080079e2 	.word	0x080079e2
 800600c:	080079e6 	.word	0x080079e6
 8006010:	00000000 	.word	0x00000000
 8006014:	08005d4d 	.word	0x08005d4d

08006018 <_printf_common>:
 8006018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800601a:	0015      	movs	r5, r2
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	688a      	ldr	r2, [r1, #8]
 8006020:	690b      	ldr	r3, [r1, #16]
 8006022:	9000      	str	r0, [sp, #0]
 8006024:	000c      	movs	r4, r1
 8006026:	4293      	cmp	r3, r2
 8006028:	da00      	bge.n	800602c <_printf_common+0x14>
 800602a:	0013      	movs	r3, r2
 800602c:	0022      	movs	r2, r4
 800602e:	602b      	str	r3, [r5, #0]
 8006030:	3243      	adds	r2, #67	; 0x43
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	2a00      	cmp	r2, #0
 8006036:	d001      	beq.n	800603c <_printf_common+0x24>
 8006038:	3301      	adds	r3, #1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	069b      	lsls	r3, r3, #26
 8006040:	d502      	bpl.n	8006048 <_printf_common+0x30>
 8006042:	682b      	ldr	r3, [r5, #0]
 8006044:	3302      	adds	r3, #2
 8006046:	602b      	str	r3, [r5, #0]
 8006048:	2706      	movs	r7, #6
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	401f      	ands	r7, r3
 800604e:	d027      	beq.n	80060a0 <_printf_common+0x88>
 8006050:	0023      	movs	r3, r4
 8006052:	3343      	adds	r3, #67	; 0x43
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	1e5a      	subs	r2, r3, #1
 8006058:	4193      	sbcs	r3, r2
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	0692      	lsls	r2, r2, #26
 800605e:	d430      	bmi.n	80060c2 <_printf_common+0xaa>
 8006060:	0022      	movs	r2, r4
 8006062:	9901      	ldr	r1, [sp, #4]
 8006064:	3243      	adds	r2, #67	; 0x43
 8006066:	9800      	ldr	r0, [sp, #0]
 8006068:	9e08      	ldr	r6, [sp, #32]
 800606a:	47b0      	blx	r6
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d025      	beq.n	80060bc <_printf_common+0xa4>
 8006070:	2306      	movs	r3, #6
 8006072:	6820      	ldr	r0, [r4, #0]
 8006074:	682a      	ldr	r2, [r5, #0]
 8006076:	68e1      	ldr	r1, [r4, #12]
 8006078:	4003      	ands	r3, r0
 800607a:	2500      	movs	r5, #0
 800607c:	2b04      	cmp	r3, #4
 800607e:	d103      	bne.n	8006088 <_printf_common+0x70>
 8006080:	1a8d      	subs	r5, r1, r2
 8006082:	43eb      	mvns	r3, r5
 8006084:	17db      	asrs	r3, r3, #31
 8006086:	401d      	ands	r5, r3
 8006088:	68a3      	ldr	r3, [r4, #8]
 800608a:	6922      	ldr	r2, [r4, #16]
 800608c:	4293      	cmp	r3, r2
 800608e:	dd01      	ble.n	8006094 <_printf_common+0x7c>
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	18ed      	adds	r5, r5, r3
 8006094:	2700      	movs	r7, #0
 8006096:	42bd      	cmp	r5, r7
 8006098:	d120      	bne.n	80060dc <_printf_common+0xc4>
 800609a:	2000      	movs	r0, #0
 800609c:	e010      	b.n	80060c0 <_printf_common+0xa8>
 800609e:	3701      	adds	r7, #1
 80060a0:	68e3      	ldr	r3, [r4, #12]
 80060a2:	682a      	ldr	r2, [r5, #0]
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	429f      	cmp	r7, r3
 80060a8:	dad2      	bge.n	8006050 <_printf_common+0x38>
 80060aa:	0022      	movs	r2, r4
 80060ac:	2301      	movs	r3, #1
 80060ae:	3219      	adds	r2, #25
 80060b0:	9901      	ldr	r1, [sp, #4]
 80060b2:	9800      	ldr	r0, [sp, #0]
 80060b4:	9e08      	ldr	r6, [sp, #32]
 80060b6:	47b0      	blx	r6
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d1f0      	bne.n	800609e <_printf_common+0x86>
 80060bc:	2001      	movs	r0, #1
 80060be:	4240      	negs	r0, r0
 80060c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060c2:	2030      	movs	r0, #48	; 0x30
 80060c4:	18e1      	adds	r1, r4, r3
 80060c6:	3143      	adds	r1, #67	; 0x43
 80060c8:	7008      	strb	r0, [r1, #0]
 80060ca:	0021      	movs	r1, r4
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	3145      	adds	r1, #69	; 0x45
 80060d0:	7809      	ldrb	r1, [r1, #0]
 80060d2:	18a2      	adds	r2, r4, r2
 80060d4:	3243      	adds	r2, #67	; 0x43
 80060d6:	3302      	adds	r3, #2
 80060d8:	7011      	strb	r1, [r2, #0]
 80060da:	e7c1      	b.n	8006060 <_printf_common+0x48>
 80060dc:	0022      	movs	r2, r4
 80060de:	2301      	movs	r3, #1
 80060e0:	321a      	adds	r2, #26
 80060e2:	9901      	ldr	r1, [sp, #4]
 80060e4:	9800      	ldr	r0, [sp, #0]
 80060e6:	9e08      	ldr	r6, [sp, #32]
 80060e8:	47b0      	blx	r6
 80060ea:	1c43      	adds	r3, r0, #1
 80060ec:	d0e6      	beq.n	80060bc <_printf_common+0xa4>
 80060ee:	3701      	adds	r7, #1
 80060f0:	e7d1      	b.n	8006096 <_printf_common+0x7e>
	...

080060f4 <_printf_i>:
 80060f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060f6:	b08b      	sub	sp, #44	; 0x2c
 80060f8:	9206      	str	r2, [sp, #24]
 80060fa:	000a      	movs	r2, r1
 80060fc:	3243      	adds	r2, #67	; 0x43
 80060fe:	9307      	str	r3, [sp, #28]
 8006100:	9005      	str	r0, [sp, #20]
 8006102:	9204      	str	r2, [sp, #16]
 8006104:	7e0a      	ldrb	r2, [r1, #24]
 8006106:	000c      	movs	r4, r1
 8006108:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800610a:	2a6e      	cmp	r2, #110	; 0x6e
 800610c:	d100      	bne.n	8006110 <_printf_i+0x1c>
 800610e:	e08f      	b.n	8006230 <_printf_i+0x13c>
 8006110:	d817      	bhi.n	8006142 <_printf_i+0x4e>
 8006112:	2a63      	cmp	r2, #99	; 0x63
 8006114:	d02c      	beq.n	8006170 <_printf_i+0x7c>
 8006116:	d808      	bhi.n	800612a <_printf_i+0x36>
 8006118:	2a00      	cmp	r2, #0
 800611a:	d100      	bne.n	800611e <_printf_i+0x2a>
 800611c:	e099      	b.n	8006252 <_printf_i+0x15e>
 800611e:	2a58      	cmp	r2, #88	; 0x58
 8006120:	d054      	beq.n	80061cc <_printf_i+0xd8>
 8006122:	0026      	movs	r6, r4
 8006124:	3642      	adds	r6, #66	; 0x42
 8006126:	7032      	strb	r2, [r6, #0]
 8006128:	e029      	b.n	800617e <_printf_i+0x8a>
 800612a:	2a64      	cmp	r2, #100	; 0x64
 800612c:	d001      	beq.n	8006132 <_printf_i+0x3e>
 800612e:	2a69      	cmp	r2, #105	; 0x69
 8006130:	d1f7      	bne.n	8006122 <_printf_i+0x2e>
 8006132:	6821      	ldr	r1, [r4, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	0608      	lsls	r0, r1, #24
 8006138:	d523      	bpl.n	8006182 <_printf_i+0x8e>
 800613a:	1d11      	adds	r1, r2, #4
 800613c:	6019      	str	r1, [r3, #0]
 800613e:	6815      	ldr	r5, [r2, #0]
 8006140:	e025      	b.n	800618e <_printf_i+0x9a>
 8006142:	2a73      	cmp	r2, #115	; 0x73
 8006144:	d100      	bne.n	8006148 <_printf_i+0x54>
 8006146:	e088      	b.n	800625a <_printf_i+0x166>
 8006148:	d808      	bhi.n	800615c <_printf_i+0x68>
 800614a:	2a6f      	cmp	r2, #111	; 0x6f
 800614c:	d029      	beq.n	80061a2 <_printf_i+0xae>
 800614e:	2a70      	cmp	r2, #112	; 0x70
 8006150:	d1e7      	bne.n	8006122 <_printf_i+0x2e>
 8006152:	2220      	movs	r2, #32
 8006154:	6809      	ldr	r1, [r1, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	6022      	str	r2, [r4, #0]
 800615a:	e003      	b.n	8006164 <_printf_i+0x70>
 800615c:	2a75      	cmp	r2, #117	; 0x75
 800615e:	d020      	beq.n	80061a2 <_printf_i+0xae>
 8006160:	2a78      	cmp	r2, #120	; 0x78
 8006162:	d1de      	bne.n	8006122 <_printf_i+0x2e>
 8006164:	0022      	movs	r2, r4
 8006166:	2178      	movs	r1, #120	; 0x78
 8006168:	3245      	adds	r2, #69	; 0x45
 800616a:	7011      	strb	r1, [r2, #0]
 800616c:	4a6c      	ldr	r2, [pc, #432]	; (8006320 <_printf_i+0x22c>)
 800616e:	e030      	b.n	80061d2 <_printf_i+0xde>
 8006170:	000e      	movs	r6, r1
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	3642      	adds	r6, #66	; 0x42
 8006176:	1d11      	adds	r1, r2, #4
 8006178:	6019      	str	r1, [r3, #0]
 800617a:	6813      	ldr	r3, [r2, #0]
 800617c:	7033      	strb	r3, [r6, #0]
 800617e:	2301      	movs	r3, #1
 8006180:	e079      	b.n	8006276 <_printf_i+0x182>
 8006182:	0649      	lsls	r1, r1, #25
 8006184:	d5d9      	bpl.n	800613a <_printf_i+0x46>
 8006186:	1d11      	adds	r1, r2, #4
 8006188:	6019      	str	r1, [r3, #0]
 800618a:	2300      	movs	r3, #0
 800618c:	5ed5      	ldrsh	r5, [r2, r3]
 800618e:	2d00      	cmp	r5, #0
 8006190:	da03      	bge.n	800619a <_printf_i+0xa6>
 8006192:	232d      	movs	r3, #45	; 0x2d
 8006194:	9a04      	ldr	r2, [sp, #16]
 8006196:	426d      	negs	r5, r5
 8006198:	7013      	strb	r3, [r2, #0]
 800619a:	4b62      	ldr	r3, [pc, #392]	; (8006324 <_printf_i+0x230>)
 800619c:	270a      	movs	r7, #10
 800619e:	9303      	str	r3, [sp, #12]
 80061a0:	e02f      	b.n	8006202 <_printf_i+0x10e>
 80061a2:	6820      	ldr	r0, [r4, #0]
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	0605      	lsls	r5, r0, #24
 80061a8:	d503      	bpl.n	80061b2 <_printf_i+0xbe>
 80061aa:	1d08      	adds	r0, r1, #4
 80061ac:	6018      	str	r0, [r3, #0]
 80061ae:	680d      	ldr	r5, [r1, #0]
 80061b0:	e005      	b.n	80061be <_printf_i+0xca>
 80061b2:	0640      	lsls	r0, r0, #25
 80061b4:	d5f9      	bpl.n	80061aa <_printf_i+0xb6>
 80061b6:	680d      	ldr	r5, [r1, #0]
 80061b8:	1d08      	adds	r0, r1, #4
 80061ba:	6018      	str	r0, [r3, #0]
 80061bc:	b2ad      	uxth	r5, r5
 80061be:	4b59      	ldr	r3, [pc, #356]	; (8006324 <_printf_i+0x230>)
 80061c0:	2708      	movs	r7, #8
 80061c2:	9303      	str	r3, [sp, #12]
 80061c4:	2a6f      	cmp	r2, #111	; 0x6f
 80061c6:	d018      	beq.n	80061fa <_printf_i+0x106>
 80061c8:	270a      	movs	r7, #10
 80061ca:	e016      	b.n	80061fa <_printf_i+0x106>
 80061cc:	3145      	adds	r1, #69	; 0x45
 80061ce:	700a      	strb	r2, [r1, #0]
 80061d0:	4a54      	ldr	r2, [pc, #336]	; (8006324 <_printf_i+0x230>)
 80061d2:	9203      	str	r2, [sp, #12]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	6821      	ldr	r1, [r4, #0]
 80061d8:	1d10      	adds	r0, r2, #4
 80061da:	6018      	str	r0, [r3, #0]
 80061dc:	6815      	ldr	r5, [r2, #0]
 80061de:	0608      	lsls	r0, r1, #24
 80061e0:	d522      	bpl.n	8006228 <_printf_i+0x134>
 80061e2:	07cb      	lsls	r3, r1, #31
 80061e4:	d502      	bpl.n	80061ec <_printf_i+0xf8>
 80061e6:	2320      	movs	r3, #32
 80061e8:	4319      	orrs	r1, r3
 80061ea:	6021      	str	r1, [r4, #0]
 80061ec:	2710      	movs	r7, #16
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	d103      	bne.n	80061fa <_printf_i+0x106>
 80061f2:	2320      	movs	r3, #32
 80061f4:	6822      	ldr	r2, [r4, #0]
 80061f6:	439a      	bics	r2, r3
 80061f8:	6022      	str	r2, [r4, #0]
 80061fa:	0023      	movs	r3, r4
 80061fc:	2200      	movs	r2, #0
 80061fe:	3343      	adds	r3, #67	; 0x43
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	60a3      	str	r3, [r4, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	db5c      	blt.n	80062c4 <_printf_i+0x1d0>
 800620a:	2204      	movs	r2, #4
 800620c:	6821      	ldr	r1, [r4, #0]
 800620e:	4391      	bics	r1, r2
 8006210:	6021      	str	r1, [r4, #0]
 8006212:	2d00      	cmp	r5, #0
 8006214:	d158      	bne.n	80062c8 <_printf_i+0x1d4>
 8006216:	9e04      	ldr	r6, [sp, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d064      	beq.n	80062e6 <_printf_i+0x1f2>
 800621c:	0026      	movs	r6, r4
 800621e:	9b03      	ldr	r3, [sp, #12]
 8006220:	3642      	adds	r6, #66	; 0x42
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	7033      	strb	r3, [r6, #0]
 8006226:	e05e      	b.n	80062e6 <_printf_i+0x1f2>
 8006228:	0648      	lsls	r0, r1, #25
 800622a:	d5da      	bpl.n	80061e2 <_printf_i+0xee>
 800622c:	b2ad      	uxth	r5, r5
 800622e:	e7d8      	b.n	80061e2 <_printf_i+0xee>
 8006230:	6809      	ldr	r1, [r1, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	0608      	lsls	r0, r1, #24
 8006236:	d505      	bpl.n	8006244 <_printf_i+0x150>
 8006238:	1d11      	adds	r1, r2, #4
 800623a:	6019      	str	r1, [r3, #0]
 800623c:	6813      	ldr	r3, [r2, #0]
 800623e:	6962      	ldr	r2, [r4, #20]
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e006      	b.n	8006252 <_printf_i+0x15e>
 8006244:	0649      	lsls	r1, r1, #25
 8006246:	d5f7      	bpl.n	8006238 <_printf_i+0x144>
 8006248:	1d11      	adds	r1, r2, #4
 800624a:	6019      	str	r1, [r3, #0]
 800624c:	6813      	ldr	r3, [r2, #0]
 800624e:	8aa2      	ldrh	r2, [r4, #20]
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	2300      	movs	r3, #0
 8006254:	9e04      	ldr	r6, [sp, #16]
 8006256:	6123      	str	r3, [r4, #16]
 8006258:	e054      	b.n	8006304 <_printf_i+0x210>
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	1d11      	adds	r1, r2, #4
 800625e:	6019      	str	r1, [r3, #0]
 8006260:	6816      	ldr	r6, [r2, #0]
 8006262:	2100      	movs	r1, #0
 8006264:	6862      	ldr	r2, [r4, #4]
 8006266:	0030      	movs	r0, r6
 8006268:	f000 f85e 	bl	8006328 <memchr>
 800626c:	2800      	cmp	r0, #0
 800626e:	d001      	beq.n	8006274 <_printf_i+0x180>
 8006270:	1b80      	subs	r0, r0, r6
 8006272:	6060      	str	r0, [r4, #4]
 8006274:	6863      	ldr	r3, [r4, #4]
 8006276:	6123      	str	r3, [r4, #16]
 8006278:	2300      	movs	r3, #0
 800627a:	9a04      	ldr	r2, [sp, #16]
 800627c:	7013      	strb	r3, [r2, #0]
 800627e:	e041      	b.n	8006304 <_printf_i+0x210>
 8006280:	6923      	ldr	r3, [r4, #16]
 8006282:	0032      	movs	r2, r6
 8006284:	9906      	ldr	r1, [sp, #24]
 8006286:	9805      	ldr	r0, [sp, #20]
 8006288:	9d07      	ldr	r5, [sp, #28]
 800628a:	47a8      	blx	r5
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d043      	beq.n	8006318 <_printf_i+0x224>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	2500      	movs	r5, #0
 8006294:	079b      	lsls	r3, r3, #30
 8006296:	d40f      	bmi.n	80062b8 <_printf_i+0x1c4>
 8006298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629a:	68e0      	ldr	r0, [r4, #12]
 800629c:	4298      	cmp	r0, r3
 800629e:	da3d      	bge.n	800631c <_printf_i+0x228>
 80062a0:	0018      	movs	r0, r3
 80062a2:	e03b      	b.n	800631c <_printf_i+0x228>
 80062a4:	0022      	movs	r2, r4
 80062a6:	2301      	movs	r3, #1
 80062a8:	3219      	adds	r2, #25
 80062aa:	9906      	ldr	r1, [sp, #24]
 80062ac:	9805      	ldr	r0, [sp, #20]
 80062ae:	9e07      	ldr	r6, [sp, #28]
 80062b0:	47b0      	blx	r6
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	d030      	beq.n	8006318 <_printf_i+0x224>
 80062b6:	3501      	adds	r5, #1
 80062b8:	68e3      	ldr	r3, [r4, #12]
 80062ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	429d      	cmp	r5, r3
 80062c0:	dbf0      	blt.n	80062a4 <_printf_i+0x1b0>
 80062c2:	e7e9      	b.n	8006298 <_printf_i+0x1a4>
 80062c4:	2d00      	cmp	r5, #0
 80062c6:	d0a9      	beq.n	800621c <_printf_i+0x128>
 80062c8:	9e04      	ldr	r6, [sp, #16]
 80062ca:	0028      	movs	r0, r5
 80062cc:	0039      	movs	r1, r7
 80062ce:	f7f9 ffb3 	bl	8000238 <__aeabi_uidivmod>
 80062d2:	9b03      	ldr	r3, [sp, #12]
 80062d4:	3e01      	subs	r6, #1
 80062d6:	5c5b      	ldrb	r3, [r3, r1]
 80062d8:	0028      	movs	r0, r5
 80062da:	7033      	strb	r3, [r6, #0]
 80062dc:	0039      	movs	r1, r7
 80062de:	f7f9 ff25 	bl	800012c <__udivsi3>
 80062e2:	1e05      	subs	r5, r0, #0
 80062e4:	d1f1      	bne.n	80062ca <_printf_i+0x1d6>
 80062e6:	2f08      	cmp	r7, #8
 80062e8:	d109      	bne.n	80062fe <_printf_i+0x20a>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	07db      	lsls	r3, r3, #31
 80062ee:	d506      	bpl.n	80062fe <_printf_i+0x20a>
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	6922      	ldr	r2, [r4, #16]
 80062f4:	4293      	cmp	r3, r2
 80062f6:	dc02      	bgt.n	80062fe <_printf_i+0x20a>
 80062f8:	2330      	movs	r3, #48	; 0x30
 80062fa:	3e01      	subs	r6, #1
 80062fc:	7033      	strb	r3, [r6, #0]
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	1b9b      	subs	r3, r3, r6
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	9b07      	ldr	r3, [sp, #28]
 8006306:	aa09      	add	r2, sp, #36	; 0x24
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	0021      	movs	r1, r4
 800630c:	9b06      	ldr	r3, [sp, #24]
 800630e:	9805      	ldr	r0, [sp, #20]
 8006310:	f7ff fe82 	bl	8006018 <_printf_common>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d1b3      	bne.n	8006280 <_printf_i+0x18c>
 8006318:	2001      	movs	r0, #1
 800631a:	4240      	negs	r0, r0
 800631c:	b00b      	add	sp, #44	; 0x2c
 800631e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006320:	080079fe 	.word	0x080079fe
 8006324:	080079ed 	.word	0x080079ed

08006328 <memchr>:
 8006328:	b2c9      	uxtb	r1, r1
 800632a:	1882      	adds	r2, r0, r2
 800632c:	4290      	cmp	r0, r2
 800632e:	d101      	bne.n	8006334 <memchr+0xc>
 8006330:	2000      	movs	r0, #0
 8006332:	4770      	bx	lr
 8006334:	7803      	ldrb	r3, [r0, #0]
 8006336:	428b      	cmp	r3, r1
 8006338:	d0fb      	beq.n	8006332 <memchr+0xa>
 800633a:	3001      	adds	r0, #1
 800633c:	e7f6      	b.n	800632c <memchr+0x4>

0800633e <memmove>:
 800633e:	b510      	push	{r4, lr}
 8006340:	4288      	cmp	r0, r1
 8006342:	d902      	bls.n	800634a <memmove+0xc>
 8006344:	188b      	adds	r3, r1, r2
 8006346:	4298      	cmp	r0, r3
 8006348:	d308      	bcc.n	800635c <memmove+0x1e>
 800634a:	2300      	movs	r3, #0
 800634c:	429a      	cmp	r2, r3
 800634e:	d007      	beq.n	8006360 <memmove+0x22>
 8006350:	5ccc      	ldrb	r4, [r1, r3]
 8006352:	54c4      	strb	r4, [r0, r3]
 8006354:	3301      	adds	r3, #1
 8006356:	e7f9      	b.n	800634c <memmove+0xe>
 8006358:	5c8b      	ldrb	r3, [r1, r2]
 800635a:	5483      	strb	r3, [r0, r2]
 800635c:	3a01      	subs	r2, #1
 800635e:	d2fb      	bcs.n	8006358 <memmove+0x1a>
 8006360:	bd10      	pop	{r4, pc}

08006362 <_realloc_r>:
 8006362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006364:	0007      	movs	r7, r0
 8006366:	000d      	movs	r5, r1
 8006368:	0016      	movs	r6, r2
 800636a:	2900      	cmp	r1, #0
 800636c:	d105      	bne.n	800637a <_realloc_r+0x18>
 800636e:	0011      	movs	r1, r2
 8006370:	f7ff fc58 	bl	8005c24 <_malloc_r>
 8006374:	0004      	movs	r4, r0
 8006376:	0020      	movs	r0, r4
 8006378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800637a:	2a00      	cmp	r2, #0
 800637c:	d103      	bne.n	8006386 <_realloc_r+0x24>
 800637e:	f7ff fc07 	bl	8005b90 <_free_r>
 8006382:	0034      	movs	r4, r6
 8006384:	e7f7      	b.n	8006376 <_realloc_r+0x14>
 8006386:	f000 f812 	bl	80063ae <_malloc_usable_size_r>
 800638a:	002c      	movs	r4, r5
 800638c:	4286      	cmp	r6, r0
 800638e:	d9f2      	bls.n	8006376 <_realloc_r+0x14>
 8006390:	0031      	movs	r1, r6
 8006392:	0038      	movs	r0, r7
 8006394:	f7ff fc46 	bl	8005c24 <_malloc_r>
 8006398:	1e04      	subs	r4, r0, #0
 800639a:	d0ec      	beq.n	8006376 <_realloc_r+0x14>
 800639c:	0029      	movs	r1, r5
 800639e:	0032      	movs	r2, r6
 80063a0:	f7ff fbe4 	bl	8005b6c <memcpy>
 80063a4:	0029      	movs	r1, r5
 80063a6:	0038      	movs	r0, r7
 80063a8:	f7ff fbf2 	bl	8005b90 <_free_r>
 80063ac:	e7e3      	b.n	8006376 <_realloc_r+0x14>

080063ae <_malloc_usable_size_r>:
 80063ae:	1f0b      	subs	r3, r1, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	1f18      	subs	r0, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da01      	bge.n	80063bc <_malloc_usable_size_r+0xe>
 80063b8:	580b      	ldr	r3, [r1, r0]
 80063ba:	18c0      	adds	r0, r0, r3
 80063bc:	4770      	bx	lr
	...

080063c0 <atan>:
 80063c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063c2:	4b9c      	ldr	r3, [pc, #624]	; (8006634 <atan+0x274>)
 80063c4:	b085      	sub	sp, #20
 80063c6:	004e      	lsls	r6, r1, #1
 80063c8:	0004      	movs	r4, r0
 80063ca:	000d      	movs	r5, r1
 80063cc:	9103      	str	r1, [sp, #12]
 80063ce:	0876      	lsrs	r6, r6, #1
 80063d0:	429e      	cmp	r6, r3
 80063d2:	dd18      	ble.n	8006406 <atan+0x46>
 80063d4:	4b98      	ldr	r3, [pc, #608]	; (8006638 <atan+0x278>)
 80063d6:	429e      	cmp	r6, r3
 80063d8:	dc02      	bgt.n	80063e0 <atan+0x20>
 80063da:	d10a      	bne.n	80063f2 <atan+0x32>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d008      	beq.n	80063f2 <atan+0x32>
 80063e0:	0022      	movs	r2, r4
 80063e2:	002b      	movs	r3, r5
 80063e4:	0020      	movs	r0, r4
 80063e6:	0029      	movs	r1, r5
 80063e8:	f7fa ff3a 	bl	8001260 <__aeabi_dadd>
 80063ec:	0004      	movs	r4, r0
 80063ee:	000d      	movs	r5, r1
 80063f0:	e005      	b.n	80063fe <atan+0x3e>
 80063f2:	9b03      	ldr	r3, [sp, #12]
 80063f4:	4c91      	ldr	r4, [pc, #580]	; (800663c <atan+0x27c>)
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	dd00      	ble.n	80063fc <atan+0x3c>
 80063fa:	e118      	b.n	800662e <atan+0x26e>
 80063fc:	4d90      	ldr	r5, [pc, #576]	; (8006640 <atan+0x280>)
 80063fe:	0020      	movs	r0, r4
 8006400:	0029      	movs	r1, r5
 8006402:	b005      	add	sp, #20
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006406:	4b8f      	ldr	r3, [pc, #572]	; (8006644 <atan+0x284>)
 8006408:	429e      	cmp	r6, r3
 800640a:	dc0f      	bgt.n	800642c <atan+0x6c>
 800640c:	4b8e      	ldr	r3, [pc, #568]	; (8006648 <atan+0x288>)
 800640e:	429e      	cmp	r6, r3
 8006410:	dc09      	bgt.n	8006426 <atan+0x66>
 8006412:	4a8e      	ldr	r2, [pc, #568]	; (800664c <atan+0x28c>)
 8006414:	4b8e      	ldr	r3, [pc, #568]	; (8006650 <atan+0x290>)
 8006416:	f7fa ff23 	bl	8001260 <__aeabi_dadd>
 800641a:	2200      	movs	r2, #0
 800641c:	4b8d      	ldr	r3, [pc, #564]	; (8006654 <atan+0x294>)
 800641e:	f7fa f825 	bl	800046c <__aeabi_dcmpgt>
 8006422:	2800      	cmp	r0, #0
 8006424:	d1eb      	bne.n	80063fe <atan+0x3e>
 8006426:	2301      	movs	r3, #1
 8006428:	425b      	negs	r3, r3
 800642a:	e025      	b.n	8006478 <atan+0xb8>
 800642c:	f000 f992 	bl	8006754 <fabs>
 8006430:	4b89      	ldr	r3, [pc, #548]	; (8006658 <atan+0x298>)
 8006432:	0004      	movs	r4, r0
 8006434:	000d      	movs	r5, r1
 8006436:	429e      	cmp	r6, r3
 8006438:	dd00      	ble.n	800643c <atan+0x7c>
 800643a:	e0aa      	b.n	8006592 <atan+0x1d2>
 800643c:	4b87      	ldr	r3, [pc, #540]	; (800665c <atan+0x29c>)
 800643e:	429e      	cmp	r6, r3
 8006440:	dd00      	ble.n	8006444 <atan+0x84>
 8006442:	e090      	b.n	8006566 <atan+0x1a6>
 8006444:	0002      	movs	r2, r0
 8006446:	000b      	movs	r3, r1
 8006448:	f7fa ff0a 	bl	8001260 <__aeabi_dadd>
 800644c:	2200      	movs	r2, #0
 800644e:	4b81      	ldr	r3, [pc, #516]	; (8006654 <atan+0x294>)
 8006450:	f7fc f8ca 	bl	80025e8 <__aeabi_dsub>
 8006454:	2380      	movs	r3, #128	; 0x80
 8006456:	0006      	movs	r6, r0
 8006458:	000f      	movs	r7, r1
 800645a:	2200      	movs	r2, #0
 800645c:	05db      	lsls	r3, r3, #23
 800645e:	0020      	movs	r0, r4
 8006460:	0029      	movs	r1, r5
 8006462:	f7fa fefd 	bl	8001260 <__aeabi_dadd>
 8006466:	000b      	movs	r3, r1
 8006468:	0002      	movs	r2, r0
 800646a:	0039      	movs	r1, r7
 800646c:	0030      	movs	r0, r6
 800646e:	f7fb fa07 	bl	8001880 <__aeabi_ddiv>
 8006472:	2300      	movs	r3, #0
 8006474:	0004      	movs	r4, r0
 8006476:	000d      	movs	r5, r1
 8006478:	9302      	str	r3, [sp, #8]
 800647a:	0022      	movs	r2, r4
 800647c:	002b      	movs	r3, r5
 800647e:	0020      	movs	r0, r4
 8006480:	0029      	movs	r1, r5
 8006482:	f7fb fe31 	bl	80020e8 <__aeabi_dmul>
 8006486:	0002      	movs	r2, r0
 8006488:	000b      	movs	r3, r1
 800648a:	9000      	str	r0, [sp, #0]
 800648c:	9101      	str	r1, [sp, #4]
 800648e:	f7fb fe2b 	bl	80020e8 <__aeabi_dmul>
 8006492:	0006      	movs	r6, r0
 8006494:	000f      	movs	r7, r1
 8006496:	4a72      	ldr	r2, [pc, #456]	; (8006660 <atan+0x2a0>)
 8006498:	4b72      	ldr	r3, [pc, #456]	; (8006664 <atan+0x2a4>)
 800649a:	f7fb fe25 	bl	80020e8 <__aeabi_dmul>
 800649e:	4a72      	ldr	r2, [pc, #456]	; (8006668 <atan+0x2a8>)
 80064a0:	4b72      	ldr	r3, [pc, #456]	; (800666c <atan+0x2ac>)
 80064a2:	f7fa fedd 	bl	8001260 <__aeabi_dadd>
 80064a6:	0032      	movs	r2, r6
 80064a8:	003b      	movs	r3, r7
 80064aa:	f7fb fe1d 	bl	80020e8 <__aeabi_dmul>
 80064ae:	4a70      	ldr	r2, [pc, #448]	; (8006670 <atan+0x2b0>)
 80064b0:	4b70      	ldr	r3, [pc, #448]	; (8006674 <atan+0x2b4>)
 80064b2:	f7fa fed5 	bl	8001260 <__aeabi_dadd>
 80064b6:	0032      	movs	r2, r6
 80064b8:	003b      	movs	r3, r7
 80064ba:	f7fb fe15 	bl	80020e8 <__aeabi_dmul>
 80064be:	4a6e      	ldr	r2, [pc, #440]	; (8006678 <atan+0x2b8>)
 80064c0:	4b6e      	ldr	r3, [pc, #440]	; (800667c <atan+0x2bc>)
 80064c2:	f7fa fecd 	bl	8001260 <__aeabi_dadd>
 80064c6:	0032      	movs	r2, r6
 80064c8:	003b      	movs	r3, r7
 80064ca:	f7fb fe0d 	bl	80020e8 <__aeabi_dmul>
 80064ce:	4a6c      	ldr	r2, [pc, #432]	; (8006680 <atan+0x2c0>)
 80064d0:	4b6c      	ldr	r3, [pc, #432]	; (8006684 <atan+0x2c4>)
 80064d2:	f7fa fec5 	bl	8001260 <__aeabi_dadd>
 80064d6:	0032      	movs	r2, r6
 80064d8:	003b      	movs	r3, r7
 80064da:	f7fb fe05 	bl	80020e8 <__aeabi_dmul>
 80064de:	4a6a      	ldr	r2, [pc, #424]	; (8006688 <atan+0x2c8>)
 80064e0:	4b6a      	ldr	r3, [pc, #424]	; (800668c <atan+0x2cc>)
 80064e2:	f7fa febd 	bl	8001260 <__aeabi_dadd>
 80064e6:	9a00      	ldr	r2, [sp, #0]
 80064e8:	9b01      	ldr	r3, [sp, #4]
 80064ea:	f7fb fdfd 	bl	80020e8 <__aeabi_dmul>
 80064ee:	4a68      	ldr	r2, [pc, #416]	; (8006690 <atan+0x2d0>)
 80064f0:	9000      	str	r0, [sp, #0]
 80064f2:	9101      	str	r1, [sp, #4]
 80064f4:	4b67      	ldr	r3, [pc, #412]	; (8006694 <atan+0x2d4>)
 80064f6:	0030      	movs	r0, r6
 80064f8:	0039      	movs	r1, r7
 80064fa:	f7fb fdf5 	bl	80020e8 <__aeabi_dmul>
 80064fe:	4a66      	ldr	r2, [pc, #408]	; (8006698 <atan+0x2d8>)
 8006500:	4b66      	ldr	r3, [pc, #408]	; (800669c <atan+0x2dc>)
 8006502:	f7fc f871 	bl	80025e8 <__aeabi_dsub>
 8006506:	0032      	movs	r2, r6
 8006508:	003b      	movs	r3, r7
 800650a:	f7fb fded 	bl	80020e8 <__aeabi_dmul>
 800650e:	4a64      	ldr	r2, [pc, #400]	; (80066a0 <atan+0x2e0>)
 8006510:	4b64      	ldr	r3, [pc, #400]	; (80066a4 <atan+0x2e4>)
 8006512:	f7fc f869 	bl	80025e8 <__aeabi_dsub>
 8006516:	0032      	movs	r2, r6
 8006518:	003b      	movs	r3, r7
 800651a:	f7fb fde5 	bl	80020e8 <__aeabi_dmul>
 800651e:	4a62      	ldr	r2, [pc, #392]	; (80066a8 <atan+0x2e8>)
 8006520:	4b62      	ldr	r3, [pc, #392]	; (80066ac <atan+0x2ec>)
 8006522:	f7fc f861 	bl	80025e8 <__aeabi_dsub>
 8006526:	0032      	movs	r2, r6
 8006528:	003b      	movs	r3, r7
 800652a:	f7fb fddd 	bl	80020e8 <__aeabi_dmul>
 800652e:	4a60      	ldr	r2, [pc, #384]	; (80066b0 <atan+0x2f0>)
 8006530:	4b60      	ldr	r3, [pc, #384]	; (80066b4 <atan+0x2f4>)
 8006532:	f7fc f859 	bl	80025e8 <__aeabi_dsub>
 8006536:	0032      	movs	r2, r6
 8006538:	003b      	movs	r3, r7
 800653a:	f7fb fdd5 	bl	80020e8 <__aeabi_dmul>
 800653e:	000b      	movs	r3, r1
 8006540:	9902      	ldr	r1, [sp, #8]
 8006542:	0002      	movs	r2, r0
 8006544:	3101      	adds	r1, #1
 8006546:	d14b      	bne.n	80065e0 <atan+0x220>
 8006548:	9800      	ldr	r0, [sp, #0]
 800654a:	9901      	ldr	r1, [sp, #4]
 800654c:	f7fa fe88 	bl	8001260 <__aeabi_dadd>
 8006550:	0022      	movs	r2, r4
 8006552:	002b      	movs	r3, r5
 8006554:	f7fb fdc8 	bl	80020e8 <__aeabi_dmul>
 8006558:	0002      	movs	r2, r0
 800655a:	000b      	movs	r3, r1
 800655c:	0020      	movs	r0, r4
 800655e:	0029      	movs	r1, r5
 8006560:	f7fc f842 	bl	80025e8 <__aeabi_dsub>
 8006564:	e742      	b.n	80063ec <atan+0x2c>
 8006566:	2200      	movs	r2, #0
 8006568:	4b3a      	ldr	r3, [pc, #232]	; (8006654 <atan+0x294>)
 800656a:	f7fc f83d 	bl	80025e8 <__aeabi_dsub>
 800656e:	2200      	movs	r2, #0
 8006570:	0006      	movs	r6, r0
 8006572:	000f      	movs	r7, r1
 8006574:	4b37      	ldr	r3, [pc, #220]	; (8006654 <atan+0x294>)
 8006576:	0020      	movs	r0, r4
 8006578:	0029      	movs	r1, r5
 800657a:	f7fa fe71 	bl	8001260 <__aeabi_dadd>
 800657e:	000b      	movs	r3, r1
 8006580:	0002      	movs	r2, r0
 8006582:	0039      	movs	r1, r7
 8006584:	0030      	movs	r0, r6
 8006586:	f7fb f97b 	bl	8001880 <__aeabi_ddiv>
 800658a:	2301      	movs	r3, #1
 800658c:	0004      	movs	r4, r0
 800658e:	000d      	movs	r5, r1
 8006590:	e772      	b.n	8006478 <atan+0xb8>
 8006592:	4b49      	ldr	r3, [pc, #292]	; (80066b8 <atan+0x2f8>)
 8006594:	429e      	cmp	r6, r3
 8006596:	dc19      	bgt.n	80065cc <atan+0x20c>
 8006598:	2200      	movs	r2, #0
 800659a:	4b48      	ldr	r3, [pc, #288]	; (80066bc <atan+0x2fc>)
 800659c:	f7fc f824 	bl	80025e8 <__aeabi_dsub>
 80065a0:	2200      	movs	r2, #0
 80065a2:	0006      	movs	r6, r0
 80065a4:	000f      	movs	r7, r1
 80065a6:	4b45      	ldr	r3, [pc, #276]	; (80066bc <atan+0x2fc>)
 80065a8:	0020      	movs	r0, r4
 80065aa:	0029      	movs	r1, r5
 80065ac:	f7fb fd9c 	bl	80020e8 <__aeabi_dmul>
 80065b0:	2200      	movs	r2, #0
 80065b2:	4b28      	ldr	r3, [pc, #160]	; (8006654 <atan+0x294>)
 80065b4:	f7fa fe54 	bl	8001260 <__aeabi_dadd>
 80065b8:	000b      	movs	r3, r1
 80065ba:	0002      	movs	r2, r0
 80065bc:	0039      	movs	r1, r7
 80065be:	0030      	movs	r0, r6
 80065c0:	f7fb f95e 	bl	8001880 <__aeabi_ddiv>
 80065c4:	2302      	movs	r3, #2
 80065c6:	0004      	movs	r4, r0
 80065c8:	000d      	movs	r5, r1
 80065ca:	e755      	b.n	8006478 <atan+0xb8>
 80065cc:	000b      	movs	r3, r1
 80065ce:	0002      	movs	r2, r0
 80065d0:	493b      	ldr	r1, [pc, #236]	; (80066c0 <atan+0x300>)
 80065d2:	2000      	movs	r0, #0
 80065d4:	f7fb f954 	bl	8001880 <__aeabi_ddiv>
 80065d8:	2303      	movs	r3, #3
 80065da:	0004      	movs	r4, r0
 80065dc:	000d      	movs	r5, r1
 80065de:	e74b      	b.n	8006478 <atan+0xb8>
 80065e0:	9902      	ldr	r1, [sp, #8]
 80065e2:	4f38      	ldr	r7, [pc, #224]	; (80066c4 <atan+0x304>)
 80065e4:	00ce      	lsls	r6, r1, #3
 80065e6:	9800      	ldr	r0, [sp, #0]
 80065e8:	9901      	ldr	r1, [sp, #4]
 80065ea:	f7fa fe39 	bl	8001260 <__aeabi_dadd>
 80065ee:	0022      	movs	r2, r4
 80065f0:	002b      	movs	r3, r5
 80065f2:	f7fb fd79 	bl	80020e8 <__aeabi_dmul>
 80065f6:	4b34      	ldr	r3, [pc, #208]	; (80066c8 <atan+0x308>)
 80065f8:	19bf      	adds	r7, r7, r6
 80065fa:	199e      	adds	r6, r3, r6
 80065fc:	6832      	ldr	r2, [r6, #0]
 80065fe:	6873      	ldr	r3, [r6, #4]
 8006600:	f7fb fff2 	bl	80025e8 <__aeabi_dsub>
 8006604:	0022      	movs	r2, r4
 8006606:	002b      	movs	r3, r5
 8006608:	f7fb ffee 	bl	80025e8 <__aeabi_dsub>
 800660c:	000b      	movs	r3, r1
 800660e:	0002      	movs	r2, r0
 8006610:	6838      	ldr	r0, [r7, #0]
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	f7fb ffe8 	bl	80025e8 <__aeabi_dsub>
 8006618:	9b03      	ldr	r3, [sp, #12]
 800661a:	0004      	movs	r4, r0
 800661c:	000d      	movs	r5, r1
 800661e:	2b00      	cmp	r3, #0
 8006620:	db00      	blt.n	8006624 <atan+0x264>
 8006622:	e6ec      	b.n	80063fe <atan+0x3e>
 8006624:	2180      	movs	r1, #128	; 0x80
 8006626:	0609      	lsls	r1, r1, #24
 8006628:	186b      	adds	r3, r5, r1
 800662a:	001d      	movs	r5, r3
 800662c:	e6e7      	b.n	80063fe <atan+0x3e>
 800662e:	4d27      	ldr	r5, [pc, #156]	; (80066cc <atan+0x30c>)
 8006630:	e6e5      	b.n	80063fe <atan+0x3e>
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	440fffff 	.word	0x440fffff
 8006638:	7ff00000 	.word	0x7ff00000
 800663c:	54442d18 	.word	0x54442d18
 8006640:	bff921fb 	.word	0xbff921fb
 8006644:	3fdbffff 	.word	0x3fdbffff
 8006648:	3e1fffff 	.word	0x3e1fffff
 800664c:	8800759c 	.word	0x8800759c
 8006650:	7e37e43c 	.word	0x7e37e43c
 8006654:	3ff00000 	.word	0x3ff00000
 8006658:	3ff2ffff 	.word	0x3ff2ffff
 800665c:	3fe5ffff 	.word	0x3fe5ffff
 8006660:	e322da11 	.word	0xe322da11
 8006664:	3f90ad3a 	.word	0x3f90ad3a
 8006668:	24760deb 	.word	0x24760deb
 800666c:	3fa97b4b 	.word	0x3fa97b4b
 8006670:	a0d03d51 	.word	0xa0d03d51
 8006674:	3fb10d66 	.word	0x3fb10d66
 8006678:	c54c206e 	.word	0xc54c206e
 800667c:	3fb745cd 	.word	0x3fb745cd
 8006680:	920083ff 	.word	0x920083ff
 8006684:	3fc24924 	.word	0x3fc24924
 8006688:	5555550d 	.word	0x5555550d
 800668c:	3fd55555 	.word	0x3fd55555
 8006690:	2c6a6c2f 	.word	0x2c6a6c2f
 8006694:	bfa2b444 	.word	0xbfa2b444
 8006698:	52defd9a 	.word	0x52defd9a
 800669c:	3fadde2d 	.word	0x3fadde2d
 80066a0:	af749a6d 	.word	0xaf749a6d
 80066a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80066a8:	fe231671 	.word	0xfe231671
 80066ac:	3fbc71c6 	.word	0x3fbc71c6
 80066b0:	9998ebc4 	.word	0x9998ebc4
 80066b4:	3fc99999 	.word	0x3fc99999
 80066b8:	40037fff 	.word	0x40037fff
 80066bc:	3ff80000 	.word	0x3ff80000
 80066c0:	bff00000 	.word	0xbff00000
 80066c4:	08007a10 	.word	0x08007a10
 80066c8:	08007a30 	.word	0x08007a30
 80066cc:	3ff921fb 	.word	0x3ff921fb

080066d0 <cos>:
 80066d0:	b530      	push	{r4, r5, lr}
 80066d2:	4a1e      	ldr	r2, [pc, #120]	; (800674c <cos+0x7c>)
 80066d4:	004b      	lsls	r3, r1, #1
 80066d6:	b087      	sub	sp, #28
 80066d8:	085b      	lsrs	r3, r3, #1
 80066da:	4293      	cmp	r3, r2
 80066dc:	dc04      	bgt.n	80066e8 <cos+0x18>
 80066de:	2200      	movs	r2, #0
 80066e0:	2300      	movs	r3, #0
 80066e2:	f000 fa65 	bl	8006bb0 <__kernel_cos>
 80066e6:	e006      	b.n	80066f6 <cos+0x26>
 80066e8:	4a19      	ldr	r2, [pc, #100]	; (8006750 <cos+0x80>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	dd05      	ble.n	80066fa <cos+0x2a>
 80066ee:	0002      	movs	r2, r0
 80066f0:	000b      	movs	r3, r1
 80066f2:	f7fb ff79 	bl	80025e8 <__aeabi_dsub>
 80066f6:	b007      	add	sp, #28
 80066f8:	bd30      	pop	{r4, r5, pc}
 80066fa:	aa02      	add	r2, sp, #8
 80066fc:	f000 f874 	bl	80067e8 <__ieee754_rem_pio2>
 8006700:	9c04      	ldr	r4, [sp, #16]
 8006702:	9d05      	ldr	r5, [sp, #20]
 8006704:	2303      	movs	r3, #3
 8006706:	4003      	ands	r3, r0
 8006708:	2b01      	cmp	r3, #1
 800670a:	d008      	beq.n	800671e <cos+0x4e>
 800670c:	9802      	ldr	r0, [sp, #8]
 800670e:	9903      	ldr	r1, [sp, #12]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d00f      	beq.n	8006734 <cos+0x64>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d112      	bne.n	800673e <cos+0x6e>
 8006718:	0022      	movs	r2, r4
 800671a:	002b      	movs	r3, r5
 800671c:	e7e1      	b.n	80066e2 <cos+0x12>
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	0022      	movs	r2, r4
 8006722:	9802      	ldr	r0, [sp, #8]
 8006724:	9903      	ldr	r1, [sp, #12]
 8006726:	002b      	movs	r3, r5
 8006728:	f000 fe92 	bl	8007450 <__kernel_sin>
 800672c:	2380      	movs	r3, #128	; 0x80
 800672e:	061b      	lsls	r3, r3, #24
 8006730:	18c9      	adds	r1, r1, r3
 8006732:	e7e0      	b.n	80066f6 <cos+0x26>
 8006734:	0022      	movs	r2, r4
 8006736:	002b      	movs	r3, r5
 8006738:	f000 fa3a 	bl	8006bb0 <__kernel_cos>
 800673c:	e7f6      	b.n	800672c <cos+0x5c>
 800673e:	2301      	movs	r3, #1
 8006740:	0022      	movs	r2, r4
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	002b      	movs	r3, r5
 8006746:	f000 fe83 	bl	8007450 <__kernel_sin>
 800674a:	e7d4      	b.n	80066f6 <cos+0x26>
 800674c:	3fe921fb 	.word	0x3fe921fb
 8006750:	7fefffff 	.word	0x7fefffff

08006754 <fabs>:
 8006754:	0049      	lsls	r1, r1, #1
 8006756:	084b      	lsrs	r3, r1, #1
 8006758:	0019      	movs	r1, r3
 800675a:	4770      	bx	lr

0800675c <sin>:
 800675c:	b530      	push	{r4, r5, lr}
 800675e:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <sin+0x84>)
 8006760:	004b      	lsls	r3, r1, #1
 8006762:	b087      	sub	sp, #28
 8006764:	085b      	lsrs	r3, r3, #1
 8006766:	4293      	cmp	r3, r2
 8006768:	dc06      	bgt.n	8006778 <sin+0x1c>
 800676a:	2300      	movs	r3, #0
 800676c:	2200      	movs	r2, #0
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	2300      	movs	r3, #0
 8006772:	f000 fe6d 	bl	8007450 <__kernel_sin>
 8006776:	e006      	b.n	8006786 <sin+0x2a>
 8006778:	4a1a      	ldr	r2, [pc, #104]	; (80067e4 <sin+0x88>)
 800677a:	4293      	cmp	r3, r2
 800677c:	dd05      	ble.n	800678a <sin+0x2e>
 800677e:	0002      	movs	r2, r0
 8006780:	000b      	movs	r3, r1
 8006782:	f7fb ff31 	bl	80025e8 <__aeabi_dsub>
 8006786:	b007      	add	sp, #28
 8006788:	bd30      	pop	{r4, r5, pc}
 800678a:	aa02      	add	r2, sp, #8
 800678c:	f000 f82c 	bl	80067e8 <__ieee754_rem_pio2>
 8006790:	9c04      	ldr	r4, [sp, #16]
 8006792:	9d05      	ldr	r5, [sp, #20]
 8006794:	2303      	movs	r3, #3
 8006796:	4003      	ands	r3, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d00a      	beq.n	80067b2 <sin+0x56>
 800679c:	9802      	ldr	r0, [sp, #8]
 800679e:	9903      	ldr	r1, [sp, #12]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d00d      	beq.n	80067c0 <sin+0x64>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d115      	bne.n	80067d4 <sin+0x78>
 80067a8:	3301      	adds	r3, #1
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	0022      	movs	r2, r4
 80067ae:	002b      	movs	r3, r5
 80067b0:	e7df      	b.n	8006772 <sin+0x16>
 80067b2:	0022      	movs	r2, r4
 80067b4:	9802      	ldr	r0, [sp, #8]
 80067b6:	9903      	ldr	r1, [sp, #12]
 80067b8:	002b      	movs	r3, r5
 80067ba:	f000 f9f9 	bl	8006bb0 <__kernel_cos>
 80067be:	e7e2      	b.n	8006786 <sin+0x2a>
 80067c0:	2301      	movs	r3, #1
 80067c2:	0022      	movs	r2, r4
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	002b      	movs	r3, r5
 80067c8:	f000 fe42 	bl	8007450 <__kernel_sin>
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	061b      	lsls	r3, r3, #24
 80067d0:	18c9      	adds	r1, r1, r3
 80067d2:	e7d8      	b.n	8006786 <sin+0x2a>
 80067d4:	0022      	movs	r2, r4
 80067d6:	002b      	movs	r3, r5
 80067d8:	f000 f9ea 	bl	8006bb0 <__kernel_cos>
 80067dc:	e7f6      	b.n	80067cc <sin+0x70>
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	3fe921fb 	.word	0x3fe921fb
 80067e4:	7fefffff 	.word	0x7fefffff

080067e8 <__ieee754_rem_pio2>:
 80067e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ea:	004b      	lsls	r3, r1, #1
 80067ec:	b091      	sub	sp, #68	; 0x44
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	0017      	movs	r7, r2
 80067f4:	4bda      	ldr	r3, [pc, #872]	; (8006b60 <__ieee754_rem_pio2+0x378>)
 80067f6:	9a04      	ldr	r2, [sp, #16]
 80067f8:	9108      	str	r1, [sp, #32]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	dc09      	bgt.n	8006812 <__ieee754_rem_pio2+0x2a>
 80067fe:	0002      	movs	r2, r0
 8006800:	000b      	movs	r3, r1
 8006802:	603a      	str	r2, [r7, #0]
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	2300      	movs	r3, #0
 800680a:	60ba      	str	r2, [r7, #8]
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	2600      	movs	r6, #0
 8006810:	e022      	b.n	8006858 <__ieee754_rem_pio2+0x70>
 8006812:	4bd4      	ldr	r3, [pc, #848]	; (8006b64 <__ieee754_rem_pio2+0x37c>)
 8006814:	9a04      	ldr	r2, [sp, #16]
 8006816:	429a      	cmp	r2, r3
 8006818:	dc6a      	bgt.n	80068f0 <__ieee754_rem_pio2+0x108>
 800681a:	4ed3      	ldr	r6, [pc, #844]	; (8006b68 <__ieee754_rem_pio2+0x380>)
 800681c:	4ad3      	ldr	r2, [pc, #844]	; (8006b6c <__ieee754_rem_pio2+0x384>)
 800681e:	2900      	cmp	r1, #0
 8006820:	dd33      	ble.n	800688a <__ieee754_rem_pio2+0xa2>
 8006822:	4bd1      	ldr	r3, [pc, #836]	; (8006b68 <__ieee754_rem_pio2+0x380>)
 8006824:	f7fb fee0 	bl	80025e8 <__aeabi_dsub>
 8006828:	9b04      	ldr	r3, [sp, #16]
 800682a:	0004      	movs	r4, r0
 800682c:	000d      	movs	r5, r1
 800682e:	42b3      	cmp	r3, r6
 8006830:	d015      	beq.n	800685e <__ieee754_rem_pio2+0x76>
 8006832:	4acf      	ldr	r2, [pc, #828]	; (8006b70 <__ieee754_rem_pio2+0x388>)
 8006834:	4bcf      	ldr	r3, [pc, #828]	; (8006b74 <__ieee754_rem_pio2+0x38c>)
 8006836:	f7fb fed7 	bl	80025e8 <__aeabi_dsub>
 800683a:	0002      	movs	r2, r0
 800683c:	000b      	movs	r3, r1
 800683e:	0020      	movs	r0, r4
 8006840:	603a      	str	r2, [r7, #0]
 8006842:	607b      	str	r3, [r7, #4]
 8006844:	0029      	movs	r1, r5
 8006846:	f7fb fecf 	bl	80025e8 <__aeabi_dsub>
 800684a:	4ac9      	ldr	r2, [pc, #804]	; (8006b70 <__ieee754_rem_pio2+0x388>)
 800684c:	4bc9      	ldr	r3, [pc, #804]	; (8006b74 <__ieee754_rem_pio2+0x38c>)
 800684e:	f7fb fecb 	bl	80025e8 <__aeabi_dsub>
 8006852:	2601      	movs	r6, #1
 8006854:	60b8      	str	r0, [r7, #8]
 8006856:	60f9      	str	r1, [r7, #12]
 8006858:	0030      	movs	r0, r6
 800685a:	b011      	add	sp, #68	; 0x44
 800685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685e:	22d3      	movs	r2, #211	; 0xd3
 8006860:	4bc4      	ldr	r3, [pc, #784]	; (8006b74 <__ieee754_rem_pio2+0x38c>)
 8006862:	0552      	lsls	r2, r2, #21
 8006864:	f7fb fec0 	bl	80025e8 <__aeabi_dsub>
 8006868:	4ac3      	ldr	r2, [pc, #780]	; (8006b78 <__ieee754_rem_pio2+0x390>)
 800686a:	4bc4      	ldr	r3, [pc, #784]	; (8006b7c <__ieee754_rem_pio2+0x394>)
 800686c:	0004      	movs	r4, r0
 800686e:	000d      	movs	r5, r1
 8006870:	f7fb feba 	bl	80025e8 <__aeabi_dsub>
 8006874:	0002      	movs	r2, r0
 8006876:	000b      	movs	r3, r1
 8006878:	0020      	movs	r0, r4
 800687a:	603a      	str	r2, [r7, #0]
 800687c:	607b      	str	r3, [r7, #4]
 800687e:	0029      	movs	r1, r5
 8006880:	f7fb feb2 	bl	80025e8 <__aeabi_dsub>
 8006884:	4abc      	ldr	r2, [pc, #752]	; (8006b78 <__ieee754_rem_pio2+0x390>)
 8006886:	4bbd      	ldr	r3, [pc, #756]	; (8006b7c <__ieee754_rem_pio2+0x394>)
 8006888:	e7e1      	b.n	800684e <__ieee754_rem_pio2+0x66>
 800688a:	4bb7      	ldr	r3, [pc, #732]	; (8006b68 <__ieee754_rem_pio2+0x380>)
 800688c:	f7fa fce8 	bl	8001260 <__aeabi_dadd>
 8006890:	9b04      	ldr	r3, [sp, #16]
 8006892:	0004      	movs	r4, r0
 8006894:	000d      	movs	r5, r1
 8006896:	42b3      	cmp	r3, r6
 8006898:	d014      	beq.n	80068c4 <__ieee754_rem_pio2+0xdc>
 800689a:	4ab5      	ldr	r2, [pc, #724]	; (8006b70 <__ieee754_rem_pio2+0x388>)
 800689c:	4bb5      	ldr	r3, [pc, #724]	; (8006b74 <__ieee754_rem_pio2+0x38c>)
 800689e:	f7fa fcdf 	bl	8001260 <__aeabi_dadd>
 80068a2:	0002      	movs	r2, r0
 80068a4:	000b      	movs	r3, r1
 80068a6:	0020      	movs	r0, r4
 80068a8:	603a      	str	r2, [r7, #0]
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	0029      	movs	r1, r5
 80068ae:	f7fb fe9b 	bl	80025e8 <__aeabi_dsub>
 80068b2:	4aaf      	ldr	r2, [pc, #700]	; (8006b70 <__ieee754_rem_pio2+0x388>)
 80068b4:	4baf      	ldr	r3, [pc, #700]	; (8006b74 <__ieee754_rem_pio2+0x38c>)
 80068b6:	f7fa fcd3 	bl	8001260 <__aeabi_dadd>
 80068ba:	2601      	movs	r6, #1
 80068bc:	60b8      	str	r0, [r7, #8]
 80068be:	60f9      	str	r1, [r7, #12]
 80068c0:	4276      	negs	r6, r6
 80068c2:	e7c9      	b.n	8006858 <__ieee754_rem_pio2+0x70>
 80068c4:	22d3      	movs	r2, #211	; 0xd3
 80068c6:	4bab      	ldr	r3, [pc, #684]	; (8006b74 <__ieee754_rem_pio2+0x38c>)
 80068c8:	0552      	lsls	r2, r2, #21
 80068ca:	f7fa fcc9 	bl	8001260 <__aeabi_dadd>
 80068ce:	4aaa      	ldr	r2, [pc, #680]	; (8006b78 <__ieee754_rem_pio2+0x390>)
 80068d0:	4baa      	ldr	r3, [pc, #680]	; (8006b7c <__ieee754_rem_pio2+0x394>)
 80068d2:	0004      	movs	r4, r0
 80068d4:	000d      	movs	r5, r1
 80068d6:	f7fa fcc3 	bl	8001260 <__aeabi_dadd>
 80068da:	0002      	movs	r2, r0
 80068dc:	000b      	movs	r3, r1
 80068de:	0020      	movs	r0, r4
 80068e0:	603a      	str	r2, [r7, #0]
 80068e2:	607b      	str	r3, [r7, #4]
 80068e4:	0029      	movs	r1, r5
 80068e6:	f7fb fe7f 	bl	80025e8 <__aeabi_dsub>
 80068ea:	4aa3      	ldr	r2, [pc, #652]	; (8006b78 <__ieee754_rem_pio2+0x390>)
 80068ec:	4ba3      	ldr	r3, [pc, #652]	; (8006b7c <__ieee754_rem_pio2+0x394>)
 80068ee:	e7e2      	b.n	80068b6 <__ieee754_rem_pio2+0xce>
 80068f0:	4ba3      	ldr	r3, [pc, #652]	; (8006b80 <__ieee754_rem_pio2+0x398>)
 80068f2:	9a04      	ldr	r2, [sp, #16]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	dd00      	ble.n	80068fa <__ieee754_rem_pio2+0x112>
 80068f8:	e0d2      	b.n	8006aa0 <__ieee754_rem_pio2+0x2b8>
 80068fa:	f7ff ff2b 	bl	8006754 <fabs>
 80068fe:	4aa1      	ldr	r2, [pc, #644]	; (8006b84 <__ieee754_rem_pio2+0x39c>)
 8006900:	4ba1      	ldr	r3, [pc, #644]	; (8006b88 <__ieee754_rem_pio2+0x3a0>)
 8006902:	0004      	movs	r4, r0
 8006904:	000d      	movs	r5, r1
 8006906:	f7fb fbef 	bl	80020e8 <__aeabi_dmul>
 800690a:	2200      	movs	r2, #0
 800690c:	4b9f      	ldr	r3, [pc, #636]	; (8006b8c <__ieee754_rem_pio2+0x3a4>)
 800690e:	f7fa fca7 	bl	8001260 <__aeabi_dadd>
 8006912:	f7fc f97f 	bl	8002c14 <__aeabi_d2iz>
 8006916:	0006      	movs	r6, r0
 8006918:	f7fc f9b0 	bl	8002c7c <__aeabi_i2d>
 800691c:	4a93      	ldr	r2, [pc, #588]	; (8006b6c <__ieee754_rem_pio2+0x384>)
 800691e:	4b92      	ldr	r3, [pc, #584]	; (8006b68 <__ieee754_rem_pio2+0x380>)
 8006920:	9006      	str	r0, [sp, #24]
 8006922:	9107      	str	r1, [sp, #28]
 8006924:	f7fb fbe0 	bl	80020e8 <__aeabi_dmul>
 8006928:	0002      	movs	r2, r0
 800692a:	000b      	movs	r3, r1
 800692c:	0020      	movs	r0, r4
 800692e:	0029      	movs	r1, r5
 8006930:	f7fb fe5a 	bl	80025e8 <__aeabi_dsub>
 8006934:	4a8e      	ldr	r2, [pc, #568]	; (8006b70 <__ieee754_rem_pio2+0x388>)
 8006936:	9002      	str	r0, [sp, #8]
 8006938:	9103      	str	r1, [sp, #12]
 800693a:	9806      	ldr	r0, [sp, #24]
 800693c:	9907      	ldr	r1, [sp, #28]
 800693e:	4b8d      	ldr	r3, [pc, #564]	; (8006b74 <__ieee754_rem_pio2+0x38c>)
 8006940:	f7fb fbd2 	bl	80020e8 <__aeabi_dmul>
 8006944:	0004      	movs	r4, r0
 8006946:	000d      	movs	r5, r1
 8006948:	2e1f      	cmp	r6, #31
 800694a:	dc30      	bgt.n	80069ae <__ieee754_rem_pio2+0x1c6>
 800694c:	4a90      	ldr	r2, [pc, #576]	; (8006b90 <__ieee754_rem_pio2+0x3a8>)
 800694e:	1e73      	subs	r3, r6, #1
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	589b      	ldr	r3, [r3, r2]
 8006954:	9a04      	ldr	r2, [sp, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d029      	beq.n	80069ae <__ieee754_rem_pio2+0x1c6>
 800695a:	9802      	ldr	r0, [sp, #8]
 800695c:	9903      	ldr	r1, [sp, #12]
 800695e:	0022      	movs	r2, r4
 8006960:	002b      	movs	r3, r5
 8006962:	f7fb fe41 	bl	80025e8 <__aeabi_dsub>
 8006966:	6038      	str	r0, [r7, #0]
 8006968:	6079      	str	r1, [r7, #4]
 800696a:	9802      	ldr	r0, [sp, #8]
 800696c:	9903      	ldr	r1, [sp, #12]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	9a04      	ldr	r2, [sp, #16]
 8006976:	9306      	str	r3, [sp, #24]
 8006978:	9b06      	ldr	r3, [sp, #24]
 800697a:	f7fb fe35 	bl	80025e8 <__aeabi_dsub>
 800697e:	0022      	movs	r2, r4
 8006980:	002b      	movs	r3, r5
 8006982:	f7fb fe31 	bl	80025e8 <__aeabi_dsub>
 8006986:	000b      	movs	r3, r1
 8006988:	0002      	movs	r2, r0
 800698a:	60ba      	str	r2, [r7, #8]
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	9b08      	ldr	r3, [sp, #32]
 8006990:	2b00      	cmp	r3, #0
 8006992:	db00      	blt.n	8006996 <__ieee754_rem_pio2+0x1ae>
 8006994:	e760      	b.n	8006858 <__ieee754_rem_pio2+0x70>
 8006996:	2280      	movs	r2, #128	; 0x80
 8006998:	0612      	lsls	r2, r2, #24
 800699a:	4694      	mov	ip, r2
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	1889      	adds	r1, r1, r2
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	9b06      	ldr	r3, [sp, #24]
 80069a4:	60b8      	str	r0, [r7, #8]
 80069a6:	4463      	add	r3, ip
 80069a8:	607b      	str	r3, [r7, #4]
 80069aa:	60f9      	str	r1, [r7, #12]
 80069ac:	e788      	b.n	80068c0 <__ieee754_rem_pio2+0xd8>
 80069ae:	0022      	movs	r2, r4
 80069b0:	9802      	ldr	r0, [sp, #8]
 80069b2:	9903      	ldr	r1, [sp, #12]
 80069b4:	002b      	movs	r3, r5
 80069b6:	f7fb fe17 	bl	80025e8 <__aeabi_dsub>
 80069ba:	000b      	movs	r3, r1
 80069bc:	0002      	movs	r2, r0
 80069be:	603a      	str	r2, [r7, #0]
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	9b04      	ldr	r3, [sp, #16]
 80069c4:	0049      	lsls	r1, r1, #1
 80069c6:	151b      	asrs	r3, r3, #20
 80069c8:	0d49      	lsrs	r1, r1, #21
 80069ca:	9309      	str	r3, [sp, #36]	; 0x24
 80069cc:	1a59      	subs	r1, r3, r1
 80069ce:	2910      	cmp	r1, #16
 80069d0:	ddcb      	ble.n	800696a <__ieee754_rem_pio2+0x182>
 80069d2:	9806      	ldr	r0, [sp, #24]
 80069d4:	9907      	ldr	r1, [sp, #28]
 80069d6:	22d3      	movs	r2, #211	; 0xd3
 80069d8:	4b66      	ldr	r3, [pc, #408]	; (8006b74 <__ieee754_rem_pio2+0x38c>)
 80069da:	0552      	lsls	r2, r2, #21
 80069dc:	f7fb fb84 	bl	80020e8 <__aeabi_dmul>
 80069e0:	0004      	movs	r4, r0
 80069e2:	000d      	movs	r5, r1
 80069e4:	0002      	movs	r2, r0
 80069e6:	000b      	movs	r3, r1
 80069e8:	9802      	ldr	r0, [sp, #8]
 80069ea:	9903      	ldr	r1, [sp, #12]
 80069ec:	f7fb fdfc 	bl	80025e8 <__aeabi_dsub>
 80069f0:	0002      	movs	r2, r0
 80069f2:	000b      	movs	r3, r1
 80069f4:	9004      	str	r0, [sp, #16]
 80069f6:	9105      	str	r1, [sp, #20]
 80069f8:	9802      	ldr	r0, [sp, #8]
 80069fa:	9903      	ldr	r1, [sp, #12]
 80069fc:	f7fb fdf4 	bl	80025e8 <__aeabi_dsub>
 8006a00:	0022      	movs	r2, r4
 8006a02:	002b      	movs	r3, r5
 8006a04:	f7fb fdf0 	bl	80025e8 <__aeabi_dsub>
 8006a08:	0004      	movs	r4, r0
 8006a0a:	000d      	movs	r5, r1
 8006a0c:	9806      	ldr	r0, [sp, #24]
 8006a0e:	9907      	ldr	r1, [sp, #28]
 8006a10:	4a59      	ldr	r2, [pc, #356]	; (8006b78 <__ieee754_rem_pio2+0x390>)
 8006a12:	4b5a      	ldr	r3, [pc, #360]	; (8006b7c <__ieee754_rem_pio2+0x394>)
 8006a14:	f7fb fb68 	bl	80020e8 <__aeabi_dmul>
 8006a18:	0022      	movs	r2, r4
 8006a1a:	002b      	movs	r3, r5
 8006a1c:	f7fb fde4 	bl	80025e8 <__aeabi_dsub>
 8006a20:	0002      	movs	r2, r0
 8006a22:	000b      	movs	r3, r1
 8006a24:	0004      	movs	r4, r0
 8006a26:	000d      	movs	r5, r1
 8006a28:	9804      	ldr	r0, [sp, #16]
 8006a2a:	9905      	ldr	r1, [sp, #20]
 8006a2c:	f7fb fddc 	bl	80025e8 <__aeabi_dsub>
 8006a30:	000b      	movs	r3, r1
 8006a32:	0002      	movs	r2, r0
 8006a34:	0049      	lsls	r1, r1, #1
 8006a36:	603a      	str	r2, [r7, #0]
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a3c:	0d49      	lsrs	r1, r1, #21
 8006a3e:	1a59      	subs	r1, r3, r1
 8006a40:	9a04      	ldr	r2, [sp, #16]
 8006a42:	9b05      	ldr	r3, [sp, #20]
 8006a44:	9202      	str	r2, [sp, #8]
 8006a46:	9303      	str	r3, [sp, #12]
 8006a48:	2931      	cmp	r1, #49	; 0x31
 8006a4a:	dd8e      	ble.n	800696a <__ieee754_rem_pio2+0x182>
 8006a4c:	9806      	ldr	r0, [sp, #24]
 8006a4e:	9907      	ldr	r1, [sp, #28]
 8006a50:	22b8      	movs	r2, #184	; 0xb8
 8006a52:	4b4a      	ldr	r3, [pc, #296]	; (8006b7c <__ieee754_rem_pio2+0x394>)
 8006a54:	0592      	lsls	r2, r2, #22
 8006a56:	f7fb fb47 	bl	80020e8 <__aeabi_dmul>
 8006a5a:	0004      	movs	r4, r0
 8006a5c:	000d      	movs	r5, r1
 8006a5e:	0002      	movs	r2, r0
 8006a60:	000b      	movs	r3, r1
 8006a62:	9802      	ldr	r0, [sp, #8]
 8006a64:	9903      	ldr	r1, [sp, #12]
 8006a66:	f7fb fdbf 	bl	80025e8 <__aeabi_dsub>
 8006a6a:	0002      	movs	r2, r0
 8006a6c:	000b      	movs	r3, r1
 8006a6e:	9002      	str	r0, [sp, #8]
 8006a70:	9103      	str	r1, [sp, #12]
 8006a72:	9804      	ldr	r0, [sp, #16]
 8006a74:	9905      	ldr	r1, [sp, #20]
 8006a76:	f7fb fdb7 	bl	80025e8 <__aeabi_dsub>
 8006a7a:	0022      	movs	r2, r4
 8006a7c:	002b      	movs	r3, r5
 8006a7e:	f7fb fdb3 	bl	80025e8 <__aeabi_dsub>
 8006a82:	0004      	movs	r4, r0
 8006a84:	000d      	movs	r5, r1
 8006a86:	9806      	ldr	r0, [sp, #24]
 8006a88:	9907      	ldr	r1, [sp, #28]
 8006a8a:	4a42      	ldr	r2, [pc, #264]	; (8006b94 <__ieee754_rem_pio2+0x3ac>)
 8006a8c:	4b42      	ldr	r3, [pc, #264]	; (8006b98 <__ieee754_rem_pio2+0x3b0>)
 8006a8e:	f7fb fb2b 	bl	80020e8 <__aeabi_dmul>
 8006a92:	0022      	movs	r2, r4
 8006a94:	002b      	movs	r3, r5
 8006a96:	f7fb fda7 	bl	80025e8 <__aeabi_dsub>
 8006a9a:	0004      	movs	r4, r0
 8006a9c:	000d      	movs	r5, r1
 8006a9e:	e75c      	b.n	800695a <__ieee754_rem_pio2+0x172>
 8006aa0:	4b3e      	ldr	r3, [pc, #248]	; (8006b9c <__ieee754_rem_pio2+0x3b4>)
 8006aa2:	9a04      	ldr	r2, [sp, #16]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	dd08      	ble.n	8006aba <__ieee754_rem_pio2+0x2d2>
 8006aa8:	0002      	movs	r2, r0
 8006aaa:	000b      	movs	r3, r1
 8006aac:	f7fb fd9c 	bl	80025e8 <__aeabi_dsub>
 8006ab0:	60b8      	str	r0, [r7, #8]
 8006ab2:	60f9      	str	r1, [r7, #12]
 8006ab4:	6038      	str	r0, [r7, #0]
 8006ab6:	6079      	str	r1, [r7, #4]
 8006ab8:	e6a9      	b.n	800680e <__ieee754_rem_pio2+0x26>
 8006aba:	9a04      	ldr	r2, [sp, #16]
 8006abc:	4938      	ldr	r1, [pc, #224]	; (8006ba0 <__ieee754_rem_pio2+0x3b8>)
 8006abe:	1512      	asrs	r2, r2, #20
 8006ac0:	1852      	adds	r2, r2, r1
 8006ac2:	0513      	lsls	r3, r2, #20
 8006ac4:	9202      	str	r2, [sp, #8]
 8006ac6:	9a04      	ldr	r2, [sp, #16]
 8006ac8:	0004      	movs	r4, r0
 8006aca:	1ad5      	subs	r5, r2, r3
 8006acc:	0029      	movs	r1, r5
 8006ace:	f7fc f8a1 	bl	8002c14 <__aeabi_d2iz>
 8006ad2:	f7fc f8d3 	bl	8002c7c <__aeabi_i2d>
 8006ad6:	0002      	movs	r2, r0
 8006ad8:	000b      	movs	r3, r1
 8006ada:	0020      	movs	r0, r4
 8006adc:	0029      	movs	r1, r5
 8006ade:	920a      	str	r2, [sp, #40]	; 0x28
 8006ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ae2:	f7fb fd81 	bl	80025e8 <__aeabi_dsub>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4b2e      	ldr	r3, [pc, #184]	; (8006ba4 <__ieee754_rem_pio2+0x3bc>)
 8006aea:	f7fb fafd 	bl	80020e8 <__aeabi_dmul>
 8006aee:	0004      	movs	r4, r0
 8006af0:	000d      	movs	r5, r1
 8006af2:	f7fc f88f 	bl	8002c14 <__aeabi_d2iz>
 8006af6:	f7fc f8c1 	bl	8002c7c <__aeabi_i2d>
 8006afa:	0002      	movs	r2, r0
 8006afc:	000b      	movs	r3, r1
 8006afe:	ae0a      	add	r6, sp, #40	; 0x28
 8006b00:	60b2      	str	r2, [r6, #8]
 8006b02:	60f3      	str	r3, [r6, #12]
 8006b04:	0020      	movs	r0, r4
 8006b06:	0029      	movs	r1, r5
 8006b08:	f7fb fd6e 	bl	80025e8 <__aeabi_dsub>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4b25      	ldr	r3, [pc, #148]	; (8006ba4 <__ieee754_rem_pio2+0x3bc>)
 8006b10:	f7fb faea 	bl	80020e8 <__aeabi_dmul>
 8006b14:	2403      	movs	r4, #3
 8006b16:	6130      	str	r0, [r6, #16]
 8006b18:	6171      	str	r1, [r6, #20]
 8006b1a:	1e65      	subs	r5, r4, #1
 8006b1c:	00eb      	lsls	r3, r5, #3
 8006b1e:	18f3      	adds	r3, r6, r3
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	6859      	ldr	r1, [r3, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	2300      	movs	r3, #0
 8006b28:	f7f9 fc86 	bl	8000438 <__aeabi_dcmpeq>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d13d      	bne.n	8006bac <__ieee754_rem_pio2+0x3c4>
 8006b30:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <__ieee754_rem_pio2+0x3c0>)
 8006b32:	0030      	movs	r0, r6
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	2302      	movs	r3, #2
 8006b38:	9a02      	ldr	r2, [sp, #8]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	0039      	movs	r1, r7
 8006b3e:	0023      	movs	r3, r4
 8006b40:	f000 f912 	bl	8006d68 <__kernel_rem_pio2>
 8006b44:	9b08      	ldr	r3, [sp, #32]
 8006b46:	0006      	movs	r6, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	db00      	blt.n	8006b4e <__ieee754_rem_pio2+0x366>
 8006b4c:	e684      	b.n	8006858 <__ieee754_rem_pio2+0x70>
 8006b4e:	2280      	movs	r2, #128	; 0x80
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0612      	lsls	r2, r2, #24
 8006b54:	189b      	adds	r3, r3, r2
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	189b      	adds	r3, r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	e6af      	b.n	80068c0 <__ieee754_rem_pio2+0xd8>
 8006b60:	3fe921fb 	.word	0x3fe921fb
 8006b64:	4002d97b 	.word	0x4002d97b
 8006b68:	3ff921fb 	.word	0x3ff921fb
 8006b6c:	54400000 	.word	0x54400000
 8006b70:	1a626331 	.word	0x1a626331
 8006b74:	3dd0b461 	.word	0x3dd0b461
 8006b78:	2e037073 	.word	0x2e037073
 8006b7c:	3ba3198a 	.word	0x3ba3198a
 8006b80:	413921fb 	.word	0x413921fb
 8006b84:	6dc9c883 	.word	0x6dc9c883
 8006b88:	3fe45f30 	.word	0x3fe45f30
 8006b8c:	3fe00000 	.word	0x3fe00000
 8006b90:	08007a50 	.word	0x08007a50
 8006b94:	252049c1 	.word	0x252049c1
 8006b98:	397b839a 	.word	0x397b839a
 8006b9c:	7fefffff 	.word	0x7fefffff
 8006ba0:	fffffbea 	.word	0xfffffbea
 8006ba4:	41700000 	.word	0x41700000
 8006ba8:	08007ad0 	.word	0x08007ad0
 8006bac:	002c      	movs	r4, r5
 8006bae:	e7b4      	b.n	8006b1a <__ieee754_rem_pio2+0x332>

08006bb0 <__kernel_cos>:
 8006bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb2:	b08b      	sub	sp, #44	; 0x2c
 8006bb4:	9204      	str	r2, [sp, #16]
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	4b58      	ldr	r3, [pc, #352]	; (8006d1c <__kernel_cos+0x16c>)
 8006bba:	004d      	lsls	r5, r1, #1
 8006bbc:	9001      	str	r0, [sp, #4]
 8006bbe:	9100      	str	r1, [sp, #0]
 8006bc0:	086d      	lsrs	r5, r5, #1
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	dc06      	bgt.n	8006bd4 <__kernel_cos+0x24>
 8006bc6:	9801      	ldr	r0, [sp, #4]
 8006bc8:	9900      	ldr	r1, [sp, #0]
 8006bca:	f7fc f823 	bl	8002c14 <__aeabi_d2iz>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d100      	bne.n	8006bd4 <__kernel_cos+0x24>
 8006bd2:	e0a0      	b.n	8006d16 <__kernel_cos+0x166>
 8006bd4:	9a01      	ldr	r2, [sp, #4]
 8006bd6:	9b00      	ldr	r3, [sp, #0]
 8006bd8:	9801      	ldr	r0, [sp, #4]
 8006bda:	9900      	ldr	r1, [sp, #0]
 8006bdc:	f7fb fa84 	bl	80020e8 <__aeabi_dmul>
 8006be0:	0006      	movs	r6, r0
 8006be2:	000f      	movs	r7, r1
 8006be4:	4a4e      	ldr	r2, [pc, #312]	; (8006d20 <__kernel_cos+0x170>)
 8006be6:	4b4f      	ldr	r3, [pc, #316]	; (8006d24 <__kernel_cos+0x174>)
 8006be8:	f7fb fa7e 	bl	80020e8 <__aeabi_dmul>
 8006bec:	4a4e      	ldr	r2, [pc, #312]	; (8006d28 <__kernel_cos+0x178>)
 8006bee:	4b4f      	ldr	r3, [pc, #316]	; (8006d2c <__kernel_cos+0x17c>)
 8006bf0:	f7fa fb36 	bl	8001260 <__aeabi_dadd>
 8006bf4:	0032      	movs	r2, r6
 8006bf6:	003b      	movs	r3, r7
 8006bf8:	f7fb fa76 	bl	80020e8 <__aeabi_dmul>
 8006bfc:	4a4c      	ldr	r2, [pc, #304]	; (8006d30 <__kernel_cos+0x180>)
 8006bfe:	4b4d      	ldr	r3, [pc, #308]	; (8006d34 <__kernel_cos+0x184>)
 8006c00:	f7fb fcf2 	bl	80025e8 <__aeabi_dsub>
 8006c04:	0032      	movs	r2, r6
 8006c06:	003b      	movs	r3, r7
 8006c08:	f7fb fa6e 	bl	80020e8 <__aeabi_dmul>
 8006c0c:	4a4a      	ldr	r2, [pc, #296]	; (8006d38 <__kernel_cos+0x188>)
 8006c0e:	4b4b      	ldr	r3, [pc, #300]	; (8006d3c <__kernel_cos+0x18c>)
 8006c10:	f7fa fb26 	bl	8001260 <__aeabi_dadd>
 8006c14:	0032      	movs	r2, r6
 8006c16:	003b      	movs	r3, r7
 8006c18:	f7fb fa66 	bl	80020e8 <__aeabi_dmul>
 8006c1c:	4a48      	ldr	r2, [pc, #288]	; (8006d40 <__kernel_cos+0x190>)
 8006c1e:	4b49      	ldr	r3, [pc, #292]	; (8006d44 <__kernel_cos+0x194>)
 8006c20:	f7fb fce2 	bl	80025e8 <__aeabi_dsub>
 8006c24:	0032      	movs	r2, r6
 8006c26:	003b      	movs	r3, r7
 8006c28:	f7fb fa5e 	bl	80020e8 <__aeabi_dmul>
 8006c2c:	4a46      	ldr	r2, [pc, #280]	; (8006d48 <__kernel_cos+0x198>)
 8006c2e:	4b47      	ldr	r3, [pc, #284]	; (8006d4c <__kernel_cos+0x19c>)
 8006c30:	f7fa fb16 	bl	8001260 <__aeabi_dadd>
 8006c34:	003b      	movs	r3, r7
 8006c36:	0032      	movs	r2, r6
 8006c38:	f7fb fa56 	bl	80020e8 <__aeabi_dmul>
 8006c3c:	4b44      	ldr	r3, [pc, #272]	; (8006d50 <__kernel_cos+0x1a0>)
 8006c3e:	9002      	str	r0, [sp, #8]
 8006c40:	9103      	str	r1, [sp, #12]
 8006c42:	429d      	cmp	r5, r3
 8006c44:	dc29      	bgt.n	8006c9a <__kernel_cos+0xea>
 8006c46:	2200      	movs	r2, #0
 8006c48:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <__kernel_cos+0x1a4>)
 8006c4a:	0030      	movs	r0, r6
 8006c4c:	0039      	movs	r1, r7
 8006c4e:	f7fb fa4b 	bl	80020e8 <__aeabi_dmul>
 8006c52:	9a02      	ldr	r2, [sp, #8]
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	9006      	str	r0, [sp, #24]
 8006c58:	9107      	str	r1, [sp, #28]
 8006c5a:	0030      	movs	r0, r6
 8006c5c:	0039      	movs	r1, r7
 8006c5e:	f7fb fa43 	bl	80020e8 <__aeabi_dmul>
 8006c62:	9a04      	ldr	r2, [sp, #16]
 8006c64:	9b05      	ldr	r3, [sp, #20]
 8006c66:	0004      	movs	r4, r0
 8006c68:	000d      	movs	r5, r1
 8006c6a:	9801      	ldr	r0, [sp, #4]
 8006c6c:	9900      	ldr	r1, [sp, #0]
 8006c6e:	f7fb fa3b 	bl	80020e8 <__aeabi_dmul>
 8006c72:	0002      	movs	r2, r0
 8006c74:	000b      	movs	r3, r1
 8006c76:	0020      	movs	r0, r4
 8006c78:	0029      	movs	r1, r5
 8006c7a:	f7fb fcb5 	bl	80025e8 <__aeabi_dsub>
 8006c7e:	0002      	movs	r2, r0
 8006c80:	000b      	movs	r3, r1
 8006c82:	9806      	ldr	r0, [sp, #24]
 8006c84:	9907      	ldr	r1, [sp, #28]
 8006c86:	f7fb fcaf 	bl	80025e8 <__aeabi_dsub>
 8006c8a:	0002      	movs	r2, r0
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	000b      	movs	r3, r1
 8006c90:	4931      	ldr	r1, [pc, #196]	; (8006d58 <__kernel_cos+0x1a8>)
 8006c92:	f7fb fca9 	bl	80025e8 <__aeabi_dsub>
 8006c96:	b00b      	add	sp, #44	; 0x2c
 8006c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c9a:	4b30      	ldr	r3, [pc, #192]	; (8006d5c <__kernel_cos+0x1ac>)
 8006c9c:	429d      	cmp	r5, r3
 8006c9e:	dc37      	bgt.n	8006d10 <__kernel_cos+0x160>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	492f      	ldr	r1, [pc, #188]	; (8006d60 <__kernel_cos+0x1b0>)
 8006ca4:	0014      	movs	r4, r2
 8006ca6:	186b      	adds	r3, r5, r1
 8006ca8:	001d      	movs	r5, r3
 8006caa:	0022      	movs	r2, r4
 8006cac:	002b      	movs	r3, r5
 8006cae:	2000      	movs	r0, #0
 8006cb0:	4929      	ldr	r1, [pc, #164]	; (8006d58 <__kernel_cos+0x1a8>)
 8006cb2:	f7fb fc99 	bl	80025e8 <__aeabi_dsub>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	9006      	str	r0, [sp, #24]
 8006cba:	9107      	str	r1, [sp, #28]
 8006cbc:	4b25      	ldr	r3, [pc, #148]	; (8006d54 <__kernel_cos+0x1a4>)
 8006cbe:	0030      	movs	r0, r6
 8006cc0:	0039      	movs	r1, r7
 8006cc2:	f7fb fa11 	bl	80020e8 <__aeabi_dmul>
 8006cc6:	0022      	movs	r2, r4
 8006cc8:	002b      	movs	r3, r5
 8006cca:	f7fb fc8d 	bl	80025e8 <__aeabi_dsub>
 8006cce:	9a02      	ldr	r2, [sp, #8]
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	9008      	str	r0, [sp, #32]
 8006cd4:	9109      	str	r1, [sp, #36]	; 0x24
 8006cd6:	0030      	movs	r0, r6
 8006cd8:	0039      	movs	r1, r7
 8006cda:	f7fb fa05 	bl	80020e8 <__aeabi_dmul>
 8006cde:	9a04      	ldr	r2, [sp, #16]
 8006ce0:	9b05      	ldr	r3, [sp, #20]
 8006ce2:	0004      	movs	r4, r0
 8006ce4:	000d      	movs	r5, r1
 8006ce6:	9801      	ldr	r0, [sp, #4]
 8006ce8:	9900      	ldr	r1, [sp, #0]
 8006cea:	f7fb f9fd 	bl	80020e8 <__aeabi_dmul>
 8006cee:	0002      	movs	r2, r0
 8006cf0:	000b      	movs	r3, r1
 8006cf2:	0020      	movs	r0, r4
 8006cf4:	0029      	movs	r1, r5
 8006cf6:	f7fb fc77 	bl	80025e8 <__aeabi_dsub>
 8006cfa:	0002      	movs	r2, r0
 8006cfc:	000b      	movs	r3, r1
 8006cfe:	9808      	ldr	r0, [sp, #32]
 8006d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d02:	f7fb fc71 	bl	80025e8 <__aeabi_dsub>
 8006d06:	0002      	movs	r2, r0
 8006d08:	000b      	movs	r3, r1
 8006d0a:	9806      	ldr	r0, [sp, #24]
 8006d0c:	9907      	ldr	r1, [sp, #28]
 8006d0e:	e7c0      	b.n	8006c92 <__kernel_cos+0xe2>
 8006d10:	2400      	movs	r4, #0
 8006d12:	4d14      	ldr	r5, [pc, #80]	; (8006d64 <__kernel_cos+0x1b4>)
 8006d14:	e7c9      	b.n	8006caa <__kernel_cos+0xfa>
 8006d16:	2000      	movs	r0, #0
 8006d18:	490f      	ldr	r1, [pc, #60]	; (8006d58 <__kernel_cos+0x1a8>)
 8006d1a:	e7bc      	b.n	8006c96 <__kernel_cos+0xe6>
 8006d1c:	3e3fffff 	.word	0x3e3fffff
 8006d20:	be8838d4 	.word	0xbe8838d4
 8006d24:	bda8fae9 	.word	0xbda8fae9
 8006d28:	bdb4b1c4 	.word	0xbdb4b1c4
 8006d2c:	3e21ee9e 	.word	0x3e21ee9e
 8006d30:	809c52ad 	.word	0x809c52ad
 8006d34:	3e927e4f 	.word	0x3e927e4f
 8006d38:	19cb1590 	.word	0x19cb1590
 8006d3c:	3efa01a0 	.word	0x3efa01a0
 8006d40:	16c15177 	.word	0x16c15177
 8006d44:	3f56c16c 	.word	0x3f56c16c
 8006d48:	5555554c 	.word	0x5555554c
 8006d4c:	3fa55555 	.word	0x3fa55555
 8006d50:	3fd33332 	.word	0x3fd33332
 8006d54:	3fe00000 	.word	0x3fe00000
 8006d58:	3ff00000 	.word	0x3ff00000
 8006d5c:	3fe90000 	.word	0x3fe90000
 8006d60:	ffe00000 	.word	0xffe00000
 8006d64:	3fd20000 	.word	0x3fd20000

08006d68 <__kernel_rem_pio2>:
 8006d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d6a:	0015      	movs	r5, r2
 8006d6c:	4cd4      	ldr	r4, [pc, #848]	; (80070c0 <__kernel_rem_pio2+0x358>)
 8006d6e:	44a5      	add	sp, r4
 8006d70:	930c      	str	r3, [sp, #48]	; 0x30
 8006d72:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006d74:	900d      	str	r0, [sp, #52]	; 0x34
 8006d76:	009a      	lsls	r2, r3, #2
 8006d78:	4bd2      	ldr	r3, [pc, #840]	; (80070c4 <__kernel_rem_pio2+0x35c>)
 8006d7a:	9106      	str	r1, [sp, #24]
 8006d7c:	58d3      	ldr	r3, [r2, r3]
 8006d7e:	1ee8      	subs	r0, r5, #3
 8006d80:	9308      	str	r3, [sp, #32]
 8006d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d84:	2118      	movs	r1, #24
 8006d86:	3b01      	subs	r3, #1
 8006d88:	930a      	str	r3, [sp, #40]	; 0x28
 8006d8a:	f7f9 fa59 	bl	8000240 <__divsi3>
 8006d8e:	43c3      	mvns	r3, r0
 8006d90:	0004      	movs	r4, r0
 8006d92:	17db      	asrs	r3, r3, #31
 8006d94:	401c      	ands	r4, r3
 8006d96:	2318      	movs	r3, #24
 8006d98:	1c62      	adds	r2, r4, #1
 8006d9a:	425b      	negs	r3, r3
 8006d9c:	4353      	muls	r3, r2
 8006d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da0:	195b      	adds	r3, r3, r5
 8006da2:	4694      	mov	ip, r2
 8006da4:	2500      	movs	r5, #0
 8006da6:	9302      	str	r3, [sp, #8]
 8006da8:	9b08      	ldr	r3, [sp, #32]
 8006daa:	1aa7      	subs	r7, r4, r2
 8006dac:	4463      	add	r3, ip
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006db2:	00be      	lsls	r6, r7, #2
 8006db4:	199e      	adds	r6, r3, r6
 8006db6:	9b00      	ldr	r3, [sp, #0]
 8006db8:	429d      	cmp	r5, r3
 8006dba:	dd0b      	ble.n	8006dd4 <__kernel_rem_pio2+0x6c>
 8006dbc:	2500      	movs	r5, #0
 8006dbe:	9b08      	ldr	r3, [sp, #32]
 8006dc0:	429d      	cmp	r5, r3
 8006dc2:	dc3c      	bgt.n	8006e3e <__kernel_rem_pio2+0xd6>
 8006dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	195f      	adds	r7, r3, r5
 8006dca:	00fb      	lsls	r3, r7, #3
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	2700      	movs	r7, #0
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e028      	b.n	8006e26 <__kernel_rem_pio2+0xbe>
 8006dd4:	42ef      	cmn	r7, r5
 8006dd6:	d40a      	bmi.n	8006dee <__kernel_rem_pio2+0x86>
 8006dd8:	00ab      	lsls	r3, r5, #2
 8006dda:	58f0      	ldr	r0, [r6, r3]
 8006ddc:	f7fb ff4e 	bl	8002c7c <__aeabi_i2d>
 8006de0:	00eb      	lsls	r3, r5, #3
 8006de2:	aa26      	add	r2, sp, #152	; 0x98
 8006de4:	18d3      	adds	r3, r2, r3
 8006de6:	6018      	str	r0, [r3, #0]
 8006de8:	6059      	str	r1, [r3, #4]
 8006dea:	3501      	adds	r5, #1
 8006dec:	e7e3      	b.n	8006db6 <__kernel_rem_pio2+0x4e>
 8006dee:	2000      	movs	r0, #0
 8006df0:	2100      	movs	r1, #0
 8006df2:	e7f5      	b.n	8006de0 <__kernel_rem_pio2+0x78>
 8006df4:	9b00      	ldr	r3, [sp, #0]
 8006df6:	9a04      	ldr	r2, [sp, #16]
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	1ad1      	subs	r1, r2, r3
 8006dfc:	3908      	subs	r1, #8
 8006dfe:	aa26      	add	r2, sp, #152	; 0x98
 8006e00:	1851      	adds	r1, r2, r1
 8006e02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e04:	6808      	ldr	r0, [r1, #0]
 8006e06:	6849      	ldr	r1, [r1, #4]
 8006e08:	18d3      	adds	r3, r2, r3
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f7fb f96b 	bl	80020e8 <__aeabi_dmul>
 8006e12:	000b      	movs	r3, r1
 8006e14:	0002      	movs	r2, r0
 8006e16:	0039      	movs	r1, r7
 8006e18:	0030      	movs	r0, r6
 8006e1a:	f7fa fa21 	bl	8001260 <__aeabi_dadd>
 8006e1e:	0006      	movs	r6, r0
 8006e20:	000f      	movs	r7, r1
 8006e22:	9b00      	ldr	r3, [sp, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	9b00      	ldr	r3, [sp, #0]
 8006e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	dde1      	ble.n	8006df4 <__kernel_rem_pio2+0x8c>
 8006e30:	00eb      	lsls	r3, r5, #3
 8006e32:	aa76      	add	r2, sp, #472	; 0x1d8
 8006e34:	18d3      	adds	r3, r2, r3
 8006e36:	601e      	str	r6, [r3, #0]
 8006e38:	605f      	str	r7, [r3, #4]
 8006e3a:	3501      	adds	r5, #1
 8006e3c:	e7bf      	b.n	8006dbe <__kernel_rem_pio2+0x56>
 8006e3e:	9b08      	ldr	r3, [sp, #32]
 8006e40:	aa12      	add	r2, sp, #72	; 0x48
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	189b      	adds	r3, r3, r2
 8006e46:	9310      	str	r3, [sp, #64]	; 0x40
 8006e48:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006e4a:	00a4      	lsls	r4, r4, #2
 8006e4c:	191b      	adds	r3, r3, r4
 8006e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	425b      	negs	r3, r3
 8006e56:	930e      	str	r3, [sp, #56]	; 0x38
 8006e58:	9b08      	ldr	r3, [sp, #32]
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	aa76      	add	r2, sp, #472	; 0x1d8
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	18d3      	adds	r3, r2, r3
 8006e64:	681e      	ldr	r6, [r3, #0]
 8006e66:	685f      	ldr	r7, [r3, #4]
 8006e68:	9b00      	ldr	r3, [sp, #0]
 8006e6a:	a912      	add	r1, sp, #72	; 0x48
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	185b      	adds	r3, r3, r1
 8006e70:	9c00      	ldr	r4, [sp, #0]
 8006e72:	9307      	str	r3, [sp, #28]
 8006e74:	9211      	str	r2, [sp, #68]	; 0x44
 8006e76:	2c00      	cmp	r4, #0
 8006e78:	dc73      	bgt.n	8006f62 <__kernel_rem_pio2+0x1fa>
 8006e7a:	9a02      	ldr	r2, [sp, #8]
 8006e7c:	0030      	movs	r0, r6
 8006e7e:	0039      	movs	r1, r7
 8006e80:	f000 fc16 	bl	80076b0 <scalbn>
 8006e84:	23ff      	movs	r3, #255	; 0xff
 8006e86:	2200      	movs	r2, #0
 8006e88:	059b      	lsls	r3, r3, #22
 8006e8a:	0004      	movs	r4, r0
 8006e8c:	000d      	movs	r5, r1
 8006e8e:	f7fb f92b 	bl	80020e8 <__aeabi_dmul>
 8006e92:	f000 fb8b 	bl	80075ac <floor>
 8006e96:	2200      	movs	r2, #0
 8006e98:	4b8b      	ldr	r3, [pc, #556]	; (80070c8 <__kernel_rem_pio2+0x360>)
 8006e9a:	f7fb f925 	bl	80020e8 <__aeabi_dmul>
 8006e9e:	0002      	movs	r2, r0
 8006ea0:	000b      	movs	r3, r1
 8006ea2:	0020      	movs	r0, r4
 8006ea4:	0029      	movs	r1, r5
 8006ea6:	f7fb fb9f 	bl	80025e8 <__aeabi_dsub>
 8006eaa:	000d      	movs	r5, r1
 8006eac:	0004      	movs	r4, r0
 8006eae:	f7fb feb1 	bl	8002c14 <__aeabi_d2iz>
 8006eb2:	9007      	str	r0, [sp, #28]
 8006eb4:	f7fb fee2 	bl	8002c7c <__aeabi_i2d>
 8006eb8:	000b      	movs	r3, r1
 8006eba:	0002      	movs	r2, r0
 8006ebc:	0029      	movs	r1, r5
 8006ebe:	0020      	movs	r0, r4
 8006ec0:	f7fb fb92 	bl	80025e8 <__aeabi_dsub>
 8006ec4:	9b02      	ldr	r3, [sp, #8]
 8006ec6:	0006      	movs	r6, r0
 8006ec8:	000f      	movs	r7, r1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	dd72      	ble.n	8006fb4 <__kernel_rem_pio2+0x24c>
 8006ece:	2118      	movs	r1, #24
 8006ed0:	9b00      	ldr	r3, [sp, #0]
 8006ed2:	aa12      	add	r2, sp, #72	; 0x48
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	589a      	ldr	r2, [r3, r2]
 8006eda:	9802      	ldr	r0, [sp, #8]
 8006edc:	9c07      	ldr	r4, [sp, #28]
 8006ede:	1a09      	subs	r1, r1, r0
 8006ee0:	0010      	movs	r0, r2
 8006ee2:	4108      	asrs	r0, r1
 8006ee4:	1824      	adds	r4, r4, r0
 8006ee6:	4088      	lsls	r0, r1
 8006ee8:	1a10      	subs	r0, r2, r0
 8006eea:	aa12      	add	r2, sp, #72	; 0x48
 8006eec:	5098      	str	r0, [r3, r2]
 8006eee:	2317      	movs	r3, #23
 8006ef0:	9a02      	ldr	r2, [sp, #8]
 8006ef2:	9407      	str	r4, [sp, #28]
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	4118      	asrs	r0, r3
 8006ef8:	9004      	str	r0, [sp, #16]
 8006efa:	9b04      	ldr	r3, [sp, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dd6b      	ble.n	8006fd8 <__kernel_rem_pio2+0x270>
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	2200      	movs	r2, #0
 8006f04:	3301      	adds	r3, #1
 8006f06:	9307      	str	r3, [sp, #28]
 8006f08:	2301      	movs	r3, #1
 8006f0a:	2580      	movs	r5, #128	; 0x80
 8006f0c:	0014      	movs	r4, r2
 8006f0e:	469c      	mov	ip, r3
 8006f10:	046d      	lsls	r5, r5, #17
 8006f12:	9b00      	ldr	r3, [sp, #0]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	dd00      	ble.n	8006f1a <__kernel_rem_pio2+0x1b2>
 8006f18:	e0a3      	b.n	8007062 <__kernel_rem_pio2+0x2fa>
 8006f1a:	9b02      	ldr	r3, [sp, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dd05      	ble.n	8006f2c <__kernel_rem_pio2+0x1c4>
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d100      	bne.n	8006f26 <__kernel_rem_pio2+0x1be>
 8006f24:	e0b1      	b.n	800708a <__kernel_rem_pio2+0x322>
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d100      	bne.n	8006f2c <__kernel_rem_pio2+0x1c4>
 8006f2a:	e0b9      	b.n	80070a0 <__kernel_rem_pio2+0x338>
 8006f2c:	9b04      	ldr	r3, [sp, #16]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d152      	bne.n	8006fd8 <__kernel_rem_pio2+0x270>
 8006f32:	0032      	movs	r2, r6
 8006f34:	003b      	movs	r3, r7
 8006f36:	2000      	movs	r0, #0
 8006f38:	4964      	ldr	r1, [pc, #400]	; (80070cc <__kernel_rem_pio2+0x364>)
 8006f3a:	f7fb fb55 	bl	80025e8 <__aeabi_dsub>
 8006f3e:	0006      	movs	r6, r0
 8006f40:	000f      	movs	r7, r1
 8006f42:	2c00      	cmp	r4, #0
 8006f44:	d048      	beq.n	8006fd8 <__kernel_rem_pio2+0x270>
 8006f46:	9a02      	ldr	r2, [sp, #8]
 8006f48:	2000      	movs	r0, #0
 8006f4a:	4960      	ldr	r1, [pc, #384]	; (80070cc <__kernel_rem_pio2+0x364>)
 8006f4c:	f000 fbb0 	bl	80076b0 <scalbn>
 8006f50:	0002      	movs	r2, r0
 8006f52:	000b      	movs	r3, r1
 8006f54:	0030      	movs	r0, r6
 8006f56:	0039      	movs	r1, r7
 8006f58:	f7fb fb46 	bl	80025e8 <__aeabi_dsub>
 8006f5c:	0006      	movs	r6, r0
 8006f5e:	000f      	movs	r7, r1
 8006f60:	e03a      	b.n	8006fd8 <__kernel_rem_pio2+0x270>
 8006f62:	2200      	movs	r2, #0
 8006f64:	4b5a      	ldr	r3, [pc, #360]	; (80070d0 <__kernel_rem_pio2+0x368>)
 8006f66:	0030      	movs	r0, r6
 8006f68:	0039      	movs	r1, r7
 8006f6a:	f7fb f8bd 	bl	80020e8 <__aeabi_dmul>
 8006f6e:	f7fb fe51 	bl	8002c14 <__aeabi_d2iz>
 8006f72:	f7fb fe83 	bl	8002c7c <__aeabi_i2d>
 8006f76:	2200      	movs	r2, #0
 8006f78:	4b56      	ldr	r3, [pc, #344]	; (80070d4 <__kernel_rem_pio2+0x36c>)
 8006f7a:	9004      	str	r0, [sp, #16]
 8006f7c:	9105      	str	r1, [sp, #20]
 8006f7e:	f7fb f8b3 	bl	80020e8 <__aeabi_dmul>
 8006f82:	0002      	movs	r2, r0
 8006f84:	000b      	movs	r3, r1
 8006f86:	0030      	movs	r0, r6
 8006f88:	0039      	movs	r1, r7
 8006f8a:	f7fb fb2d 	bl	80025e8 <__aeabi_dsub>
 8006f8e:	f7fb fe41 	bl	8002c14 <__aeabi_d2iz>
 8006f92:	00a5      	lsls	r5, r4, #2
 8006f94:	9b07      	ldr	r3, [sp, #28]
 8006f96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f98:	426d      	negs	r5, r5
 8006f9a:	3c01      	subs	r4, #1
 8006f9c:	5158      	str	r0, [r3, r5]
 8006f9e:	00e3      	lsls	r3, r4, #3
 8006fa0:	18d3      	adds	r3, r2, r3
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	9804      	ldr	r0, [sp, #16]
 8006fa8:	9905      	ldr	r1, [sp, #20]
 8006faa:	f7fa f959 	bl	8001260 <__aeabi_dadd>
 8006fae:	0006      	movs	r6, r0
 8006fb0:	000f      	movs	r7, r1
 8006fb2:	e760      	b.n	8006e76 <__kernel_rem_pio2+0x10e>
 8006fb4:	9b02      	ldr	r3, [sp, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d107      	bne.n	8006fca <__kernel_rem_pio2+0x262>
 8006fba:	9b00      	ldr	r3, [sp, #0]
 8006fbc:	aa12      	add	r2, sp, #72	; 0x48
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	5898      	ldr	r0, [r3, r2]
 8006fc4:	15c3      	asrs	r3, r0, #23
 8006fc6:	9304      	str	r3, [sp, #16]
 8006fc8:	e797      	b.n	8006efa <__kernel_rem_pio2+0x192>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4b42      	ldr	r3, [pc, #264]	; (80070d8 <__kernel_rem_pio2+0x370>)
 8006fce:	f7f9 fa57 	bl	8000480 <__aeabi_dcmpge>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d142      	bne.n	800705c <__kernel_rem_pio2+0x2f4>
 8006fd6:	9004      	str	r0, [sp, #16]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2300      	movs	r3, #0
 8006fdc:	0030      	movs	r0, r6
 8006fde:	0039      	movs	r1, r7
 8006fe0:	f7f9 fa2a 	bl	8000438 <__aeabi_dcmpeq>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d100      	bne.n	8006fea <__kernel_rem_pio2+0x282>
 8006fe8:	e0b4      	b.n	8007154 <__kernel_rem_pio2+0x3ec>
 8006fea:	2200      	movs	r2, #0
 8006fec:	9b00      	ldr	r3, [sp, #0]
 8006fee:	1e59      	subs	r1, r3, #1
 8006ff0:	9808      	ldr	r0, [sp, #32]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	4298      	cmp	r0, r3
 8006ff6:	dd5c      	ble.n	80070b2 <__kernel_rem_pio2+0x34a>
 8006ff8:	2a00      	cmp	r2, #0
 8006ffa:	d000      	beq.n	8006ffe <__kernel_rem_pio2+0x296>
 8006ffc:	e084      	b.n	8007108 <__kernel_rem_pio2+0x3a0>
 8006ffe:	2301      	movs	r3, #1
 8007000:	009a      	lsls	r2, r3, #2
 8007002:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007004:	4252      	negs	r2, r2
 8007006:	588a      	ldr	r2, [r1, r2]
 8007008:	2a00      	cmp	r2, #0
 800700a:	d057      	beq.n	80070bc <__kernel_rem_pio2+0x354>
 800700c:	9a00      	ldr	r2, [sp, #0]
 800700e:	9900      	ldr	r1, [sp, #0]
 8007010:	1c57      	adds	r7, r2, #1
 8007012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007014:	18cb      	adds	r3, r1, r3
 8007016:	1854      	adds	r4, r2, r1
 8007018:	00e4      	lsls	r4, r4, #3
 800701a:	9304      	str	r3, [sp, #16]
 800701c:	9b04      	ldr	r3, [sp, #16]
 800701e:	429f      	cmp	r7, r3
 8007020:	dd00      	ble.n	8007024 <__kernel_rem_pio2+0x2bc>
 8007022:	e71a      	b.n	8006e5a <__kernel_rem_pio2+0xf2>
 8007024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007026:	ab26      	add	r3, sp, #152	; 0x98
 8007028:	191e      	adds	r6, r3, r4
 800702a:	00bb      	lsls	r3, r7, #2
 800702c:	58d0      	ldr	r0, [r2, r3]
 800702e:	f7fb fe25 	bl	8002c7c <__aeabi_i2d>
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	2500      	movs	r5, #0
 8007038:	6030      	str	r0, [r6, #0]
 800703a:	6071      	str	r1, [r6, #4]
 800703c:	9200      	str	r2, [sp, #0]
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007042:	429d      	cmp	r5, r3
 8007044:	dd4c      	ble.n	80070e0 <__kernel_rem_pio2+0x378>
 8007046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007048:	aa76      	add	r2, sp, #472	; 0x1d8
 800704a:	18e3      	adds	r3, r4, r3
 800704c:	18d3      	adds	r3, r2, r3
 800704e:	3701      	adds	r7, #1
 8007050:	9900      	ldr	r1, [sp, #0]
 8007052:	9a01      	ldr	r2, [sp, #4]
 8007054:	3408      	adds	r4, #8
 8007056:	6099      	str	r1, [r3, #8]
 8007058:	60da      	str	r2, [r3, #12]
 800705a:	e7df      	b.n	800701c <__kernel_rem_pio2+0x2b4>
 800705c:	2302      	movs	r3, #2
 800705e:	9304      	str	r3, [sp, #16]
 8007060:	e74e      	b.n	8006f00 <__kernel_rem_pio2+0x198>
 8007062:	0091      	lsls	r1, r2, #2
 8007064:	ab12      	add	r3, sp, #72	; 0x48
 8007066:	58cb      	ldr	r3, [r1, r3]
 8007068:	2c00      	cmp	r4, #0
 800706a:	d108      	bne.n	800707e <__kernel_rem_pio2+0x316>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <__kernel_rem_pio2+0x310>
 8007070:	1aeb      	subs	r3, r5, r3
 8007072:	ac12      	add	r4, sp, #72	; 0x48
 8007074:	510b      	str	r3, [r1, r4]
 8007076:	4663      	mov	r3, ip
 8007078:	3201      	adds	r2, #1
 800707a:	001c      	movs	r4, r3
 800707c:	e749      	b.n	8006f12 <__kernel_rem_pio2+0x1aa>
 800707e:	4817      	ldr	r0, [pc, #92]	; (80070dc <__kernel_rem_pio2+0x374>)
 8007080:	1ac3      	subs	r3, r0, r3
 8007082:	a812      	add	r0, sp, #72	; 0x48
 8007084:	500b      	str	r3, [r1, r0]
 8007086:	0023      	movs	r3, r4
 8007088:	e7f6      	b.n	8007078 <__kernel_rem_pio2+0x310>
 800708a:	9b00      	ldr	r3, [sp, #0]
 800708c:	aa12      	add	r2, sp, #72	; 0x48
 800708e:	3b01      	subs	r3, #1
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	589a      	ldr	r2, [r3, r2]
 8007094:	9211      	str	r2, [sp, #68]	; 0x44
 8007096:	0252      	lsls	r2, r2, #9
 8007098:	0a52      	lsrs	r2, r2, #9
 800709a:	a912      	add	r1, sp, #72	; 0x48
 800709c:	505a      	str	r2, [r3, r1]
 800709e:	e745      	b.n	8006f2c <__kernel_rem_pio2+0x1c4>
 80070a0:	9b00      	ldr	r3, [sp, #0]
 80070a2:	aa12      	add	r2, sp, #72	; 0x48
 80070a4:	3b01      	subs	r3, #1
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	589a      	ldr	r2, [r3, r2]
 80070aa:	9211      	str	r2, [sp, #68]	; 0x44
 80070ac:	0292      	lsls	r2, r2, #10
 80070ae:	0a92      	lsrs	r2, r2, #10
 80070b0:	e7f3      	b.n	800709a <__kernel_rem_pio2+0x332>
 80070b2:	0098      	lsls	r0, r3, #2
 80070b4:	ac12      	add	r4, sp, #72	; 0x48
 80070b6:	5900      	ldr	r0, [r0, r4]
 80070b8:	4302      	orrs	r2, r0
 80070ba:	e799      	b.n	8006ff0 <__kernel_rem_pio2+0x288>
 80070bc:	3301      	adds	r3, #1
 80070be:	e79f      	b.n	8007000 <__kernel_rem_pio2+0x298>
 80070c0:	fffffd84 	.word	0xfffffd84
 80070c4:	08007c18 	.word	0x08007c18
 80070c8:	40200000 	.word	0x40200000
 80070cc:	3ff00000 	.word	0x3ff00000
 80070d0:	3e700000 	.word	0x3e700000
 80070d4:	41700000 	.word	0x41700000
 80070d8:	3fe00000 	.word	0x3fe00000
 80070dc:	00ffffff 	.word	0x00ffffff
 80070e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070e2:	00eb      	lsls	r3, r5, #3
 80070e4:	18d1      	adds	r1, r2, r3
 80070e6:	1af3      	subs	r3, r6, r3
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	6808      	ldr	r0, [r1, #0]
 80070ee:	6849      	ldr	r1, [r1, #4]
 80070f0:	f7fa fffa 	bl	80020e8 <__aeabi_dmul>
 80070f4:	0002      	movs	r2, r0
 80070f6:	000b      	movs	r3, r1
 80070f8:	9800      	ldr	r0, [sp, #0]
 80070fa:	9901      	ldr	r1, [sp, #4]
 80070fc:	f7fa f8b0 	bl	8001260 <__aeabi_dadd>
 8007100:	3501      	adds	r5, #1
 8007102:	9000      	str	r0, [sp, #0]
 8007104:	9101      	str	r1, [sp, #4]
 8007106:	e79b      	b.n	8007040 <__kernel_rem_pio2+0x2d8>
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	9100      	str	r1, [sp, #0]
 800710c:	3b18      	subs	r3, #24
 800710e:	9302      	str	r3, [sp, #8]
 8007110:	9b00      	ldr	r3, [sp, #0]
 8007112:	aa12      	add	r2, sp, #72	; 0x48
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	589b      	ldr	r3, [r3, r2]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d014      	beq.n	8007146 <__kernel_rem_pio2+0x3de>
 800711c:	9a02      	ldr	r2, [sp, #8]
 800711e:	2000      	movs	r0, #0
 8007120:	49c7      	ldr	r1, [pc, #796]	; (8007440 <__kernel_rem_pio2+0x6d8>)
 8007122:	f000 fac5 	bl	80076b0 <scalbn>
 8007126:	0006      	movs	r6, r0
 8007128:	000f      	movs	r7, r1
 800712a:	9c00      	ldr	r4, [sp, #0]
 800712c:	2c00      	cmp	r4, #0
 800712e:	da4e      	bge.n	80071ce <__kernel_rem_pio2+0x466>
 8007130:	2500      	movs	r5, #0
 8007132:	9b00      	ldr	r3, [sp, #0]
 8007134:	1b5b      	subs	r3, r3, r5
 8007136:	d500      	bpl.n	800713a <__kernel_rem_pio2+0x3d2>
 8007138:	e083      	b.n	8007242 <__kernel_rem_pio2+0x4da>
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	9302      	str	r3, [sp, #8]
 800713e:	2600      	movs	r6, #0
 8007140:	2700      	movs	r7, #0
 8007142:	2400      	movs	r4, #0
 8007144:	e071      	b.n	800722a <__kernel_rem_pio2+0x4c2>
 8007146:	9b00      	ldr	r3, [sp, #0]
 8007148:	3b01      	subs	r3, #1
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	9b02      	ldr	r3, [sp, #8]
 800714e:	3b18      	subs	r3, #24
 8007150:	9302      	str	r3, [sp, #8]
 8007152:	e7dd      	b.n	8007110 <__kernel_rem_pio2+0x3a8>
 8007154:	9b02      	ldr	r3, [sp, #8]
 8007156:	0030      	movs	r0, r6
 8007158:	425a      	negs	r2, r3
 800715a:	0039      	movs	r1, r7
 800715c:	f000 faa8 	bl	80076b0 <scalbn>
 8007160:	2200      	movs	r2, #0
 8007162:	4bb8      	ldr	r3, [pc, #736]	; (8007444 <__kernel_rem_pio2+0x6dc>)
 8007164:	0004      	movs	r4, r0
 8007166:	000d      	movs	r5, r1
 8007168:	f7f9 f98a 	bl	8000480 <__aeabi_dcmpge>
 800716c:	2800      	cmp	r0, #0
 800716e:	d025      	beq.n	80071bc <__kernel_rem_pio2+0x454>
 8007170:	2200      	movs	r2, #0
 8007172:	4bb5      	ldr	r3, [pc, #724]	; (8007448 <__kernel_rem_pio2+0x6e0>)
 8007174:	0020      	movs	r0, r4
 8007176:	0029      	movs	r1, r5
 8007178:	f7fa ffb6 	bl	80020e8 <__aeabi_dmul>
 800717c:	f7fb fd4a 	bl	8002c14 <__aeabi_d2iz>
 8007180:	9b00      	ldr	r3, [sp, #0]
 8007182:	0006      	movs	r6, r0
 8007184:	009f      	lsls	r7, r3, #2
 8007186:	f7fb fd79 	bl	8002c7c <__aeabi_i2d>
 800718a:	2200      	movs	r2, #0
 800718c:	4bad      	ldr	r3, [pc, #692]	; (8007444 <__kernel_rem_pio2+0x6dc>)
 800718e:	f7fa ffab 	bl	80020e8 <__aeabi_dmul>
 8007192:	0002      	movs	r2, r0
 8007194:	000b      	movs	r3, r1
 8007196:	0020      	movs	r0, r4
 8007198:	0029      	movs	r1, r5
 800719a:	f7fb fa25 	bl	80025e8 <__aeabi_dsub>
 800719e:	f7fb fd39 	bl	8002c14 <__aeabi_d2iz>
 80071a2:	ab12      	add	r3, sp, #72	; 0x48
 80071a4:	50f8      	str	r0, [r7, r3]
 80071a6:	9b00      	ldr	r3, [sp, #0]
 80071a8:	aa12      	add	r2, sp, #72	; 0x48
 80071aa:	3301      	adds	r3, #1
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	9b02      	ldr	r3, [sp, #8]
 80071b0:	3318      	adds	r3, #24
 80071b2:	9302      	str	r3, [sp, #8]
 80071b4:	9b00      	ldr	r3, [sp, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	509e      	str	r6, [r3, r2]
 80071ba:	e7af      	b.n	800711c <__kernel_rem_pio2+0x3b4>
 80071bc:	9b00      	ldr	r3, [sp, #0]
 80071be:	0020      	movs	r0, r4
 80071c0:	0029      	movs	r1, r5
 80071c2:	009e      	lsls	r6, r3, #2
 80071c4:	f7fb fd26 	bl	8002c14 <__aeabi_d2iz>
 80071c8:	ab12      	add	r3, sp, #72	; 0x48
 80071ca:	50f0      	str	r0, [r6, r3]
 80071cc:	e7a6      	b.n	800711c <__kernel_rem_pio2+0x3b4>
 80071ce:	00e5      	lsls	r5, r4, #3
 80071d0:	ab76      	add	r3, sp, #472	; 0x1d8
 80071d2:	aa12      	add	r2, sp, #72	; 0x48
 80071d4:	195d      	adds	r5, r3, r5
 80071d6:	00a3      	lsls	r3, r4, #2
 80071d8:	5898      	ldr	r0, [r3, r2]
 80071da:	f7fb fd4f 	bl	8002c7c <__aeabi_i2d>
 80071de:	0032      	movs	r2, r6
 80071e0:	003b      	movs	r3, r7
 80071e2:	f7fa ff81 	bl	80020e8 <__aeabi_dmul>
 80071e6:	2200      	movs	r2, #0
 80071e8:	6028      	str	r0, [r5, #0]
 80071ea:	6069      	str	r1, [r5, #4]
 80071ec:	4b96      	ldr	r3, [pc, #600]	; (8007448 <__kernel_rem_pio2+0x6e0>)
 80071ee:	0030      	movs	r0, r6
 80071f0:	0039      	movs	r1, r7
 80071f2:	f7fa ff79 	bl	80020e8 <__aeabi_dmul>
 80071f6:	3c01      	subs	r4, #1
 80071f8:	0006      	movs	r6, r0
 80071fa:	000f      	movs	r7, r1
 80071fc:	e796      	b.n	800712c <__kernel_rem_pio2+0x3c4>
 80071fe:	9a02      	ldr	r2, [sp, #8]
 8007200:	00e3      	lsls	r3, r4, #3
 8007202:	1899      	adds	r1, r3, r2
 8007204:	aa76      	add	r2, sp, #472	; 0x1d8
 8007206:	1851      	adds	r1, r2, r1
 8007208:	4a90      	ldr	r2, [pc, #576]	; (800744c <__kernel_rem_pio2+0x6e4>)
 800720a:	6808      	ldr	r0, [r1, #0]
 800720c:	6849      	ldr	r1, [r1, #4]
 800720e:	18d3      	adds	r3, r2, r3
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f7fa ff68 	bl	80020e8 <__aeabi_dmul>
 8007218:	0002      	movs	r2, r0
 800721a:	000b      	movs	r3, r1
 800721c:	0030      	movs	r0, r6
 800721e:	0039      	movs	r1, r7
 8007220:	f7fa f81e 	bl	8001260 <__aeabi_dadd>
 8007224:	0006      	movs	r6, r0
 8007226:	000f      	movs	r7, r1
 8007228:	3401      	adds	r4, #1
 800722a:	9b08      	ldr	r3, [sp, #32]
 800722c:	429c      	cmp	r4, r3
 800722e:	dc01      	bgt.n	8007234 <__kernel_rem_pio2+0x4cc>
 8007230:	42ac      	cmp	r4, r5
 8007232:	dde4      	ble.n	80071fe <__kernel_rem_pio2+0x496>
 8007234:	00eb      	lsls	r3, r5, #3
 8007236:	aa4e      	add	r2, sp, #312	; 0x138
 8007238:	18d3      	adds	r3, r2, r3
 800723a:	601e      	str	r6, [r3, #0]
 800723c:	605f      	str	r7, [r3, #4]
 800723e:	3501      	adds	r5, #1
 8007240:	e777      	b.n	8007132 <__kernel_rem_pio2+0x3ca>
 8007242:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007244:	2b03      	cmp	r3, #3
 8007246:	d83d      	bhi.n	80072c4 <__kernel_rem_pio2+0x55c>
 8007248:	0018      	movs	r0, r3
 800724a:	f7f8 ff65 	bl	8000118 <__gnu_thumb1_case_uqi>
 800724e:	022b      	.short	0x022b
 8007250:	4302      	.short	0x4302
 8007252:	2600      	movs	r6, #0
 8007254:	0035      	movs	r5, r6
 8007256:	9c00      	ldr	r4, [sp, #0]
 8007258:	2c00      	cmp	r4, #0
 800725a:	db00      	blt.n	800725e <__kernel_rem_pio2+0x4f6>
 800725c:	e073      	b.n	8007346 <__kernel_rem_pio2+0x5de>
 800725e:	9b04      	ldr	r3, [sp, #16]
 8007260:	0029      	movs	r1, r5
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <__kernel_rem_pio2+0x504>
 8007266:	2380      	movs	r3, #128	; 0x80
 8007268:	061b      	lsls	r3, r3, #24
 800726a:	18e9      	adds	r1, r5, r3
 800726c:	000b      	movs	r3, r1
 800726e:	0032      	movs	r2, r6
 8007270:	9906      	ldr	r1, [sp, #24]
 8007272:	2401      	movs	r4, #1
 8007274:	600a      	str	r2, [r1, #0]
 8007276:	604b      	str	r3, [r1, #4]
 8007278:	984e      	ldr	r0, [sp, #312]	; 0x138
 800727a:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800727c:	0032      	movs	r2, r6
 800727e:	002b      	movs	r3, r5
 8007280:	f7fb f9b2 	bl	80025e8 <__aeabi_dsub>
 8007284:	9b00      	ldr	r3, [sp, #0]
 8007286:	42a3      	cmp	r3, r4
 8007288:	db00      	blt.n	800728c <__kernel_rem_pio2+0x524>
 800728a:	e069      	b.n	8007360 <__kernel_rem_pio2+0x5f8>
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <__kernel_rem_pio2+0x530>
 8007292:	2380      	movs	r3, #128	; 0x80
 8007294:	061b      	lsls	r3, r3, #24
 8007296:	18c9      	adds	r1, r1, r3
 8007298:	000b      	movs	r3, r1
 800729a:	0002      	movs	r2, r0
 800729c:	9906      	ldr	r1, [sp, #24]
 800729e:	608a      	str	r2, [r1, #8]
 80072a0:	60cb      	str	r3, [r1, #12]
 80072a2:	e00f      	b.n	80072c4 <__kernel_rem_pio2+0x55c>
 80072a4:	2500      	movs	r5, #0
 80072a6:	002c      	movs	r4, r5
 80072a8:	9b00      	ldr	r3, [sp, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	da3b      	bge.n	8007326 <__kernel_rem_pio2+0x5be>
 80072ae:	9b04      	ldr	r3, [sp, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <__kernel_rem_pio2+0x552>
 80072b4:	2380      	movs	r3, #128	; 0x80
 80072b6:	061b      	lsls	r3, r3, #24
 80072b8:	18e4      	adds	r4, r4, r3
 80072ba:	002a      	movs	r2, r5
 80072bc:	0023      	movs	r3, r4
 80072be:	9906      	ldr	r1, [sp, #24]
 80072c0:	600a      	str	r2, [r1, #0]
 80072c2:	604b      	str	r3, [r1, #4]
 80072c4:	2007      	movs	r0, #7
 80072c6:	9b07      	ldr	r3, [sp, #28]
 80072c8:	4003      	ands	r3, r0
 80072ca:	0018      	movs	r0, r3
 80072cc:	239f      	movs	r3, #159	; 0x9f
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	449d      	add	sp, r3
 80072d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d4:	9b00      	ldr	r3, [sp, #0]
 80072d6:	00dc      	lsls	r4, r3, #3
 80072d8:	ab4e      	add	r3, sp, #312	; 0x138
 80072da:	191c      	adds	r4, r3, r4
 80072dc:	0025      	movs	r5, r4
 80072de:	9b00      	ldr	r3, [sp, #0]
 80072e0:	9302      	str	r3, [sp, #8]
 80072e2:	9b02      	ldr	r3, [sp, #8]
 80072e4:	3d08      	subs	r5, #8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	dc43      	bgt.n	8007372 <__kernel_rem_pio2+0x60a>
 80072ea:	9d00      	ldr	r5, [sp, #0]
 80072ec:	3c08      	subs	r4, #8
 80072ee:	2d01      	cmp	r5, #1
 80072f0:	dc5f      	bgt.n	80073b2 <__kernel_rem_pio2+0x64a>
 80072f2:	2500      	movs	r5, #0
 80072f4:	002c      	movs	r4, r5
 80072f6:	9b00      	ldr	r3, [sp, #0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	dd00      	ble.n	80072fe <__kernel_rem_pio2+0x596>
 80072fc:	e077      	b.n	80073ee <__kernel_rem_pio2+0x686>
 80072fe:	9b04      	ldr	r3, [sp, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d000      	beq.n	8007306 <__kernel_rem_pio2+0x59e>
 8007304:	e083      	b.n	800740e <__kernel_rem_pio2+0x6a6>
 8007306:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8007308:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800730a:	9906      	ldr	r1, [sp, #24]
 800730c:	600a      	str	r2, [r1, #0]
 800730e:	604b      	str	r3, [r1, #4]
 8007310:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8007312:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8007314:	9200      	str	r2, [sp, #0]
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	608a      	str	r2, [r1, #8]
 800731a:	60cb      	str	r3, [r1, #12]
 800731c:	002a      	movs	r2, r5
 800731e:	0023      	movs	r3, r4
 8007320:	610a      	str	r2, [r1, #16]
 8007322:	614b      	str	r3, [r1, #20]
 8007324:	e7ce      	b.n	80072c4 <__kernel_rem_pio2+0x55c>
 8007326:	9b00      	ldr	r3, [sp, #0]
 8007328:	aa4e      	add	r2, sp, #312	; 0x138
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	18d3      	adds	r3, r2, r3
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	0028      	movs	r0, r5
 8007334:	0021      	movs	r1, r4
 8007336:	f7f9 ff93 	bl	8001260 <__aeabi_dadd>
 800733a:	9b00      	ldr	r3, [sp, #0]
 800733c:	0005      	movs	r5, r0
 800733e:	3b01      	subs	r3, #1
 8007340:	000c      	movs	r4, r1
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	e7b0      	b.n	80072a8 <__kernel_rem_pio2+0x540>
 8007346:	00e3      	lsls	r3, r4, #3
 8007348:	aa4e      	add	r2, sp, #312	; 0x138
 800734a:	18d3      	adds	r3, r2, r3
 800734c:	0030      	movs	r0, r6
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	0029      	movs	r1, r5
 8007354:	f7f9 ff84 	bl	8001260 <__aeabi_dadd>
 8007358:	3c01      	subs	r4, #1
 800735a:	0006      	movs	r6, r0
 800735c:	000d      	movs	r5, r1
 800735e:	e77b      	b.n	8007258 <__kernel_rem_pio2+0x4f0>
 8007360:	00e3      	lsls	r3, r4, #3
 8007362:	aa4e      	add	r2, sp, #312	; 0x138
 8007364:	18d3      	adds	r3, r2, r3
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f7f9 ff79 	bl	8001260 <__aeabi_dadd>
 800736e:	3401      	adds	r4, #1
 8007370:	e788      	b.n	8007284 <__kernel_rem_pio2+0x51c>
 8007372:	9b02      	ldr	r3, [sp, #8]
 8007374:	3b01      	subs	r3, #1
 8007376:	9302      	str	r3, [sp, #8]
 8007378:	682a      	ldr	r2, [r5, #0]
 800737a:	686b      	ldr	r3, [r5, #4]
 800737c:	9208      	str	r2, [sp, #32]
 800737e:	9309      	str	r3, [sp, #36]	; 0x24
 8007380:	9808      	ldr	r0, [sp, #32]
 8007382:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007384:	68aa      	ldr	r2, [r5, #8]
 8007386:	68eb      	ldr	r3, [r5, #12]
 8007388:	920a      	str	r2, [sp, #40]	; 0x28
 800738a:	930b      	str	r3, [sp, #44]	; 0x2c
 800738c:	f7f9 ff68 	bl	8001260 <__aeabi_dadd>
 8007390:	0002      	movs	r2, r0
 8007392:	000b      	movs	r3, r1
 8007394:	0006      	movs	r6, r0
 8007396:	000f      	movs	r7, r1
 8007398:	9808      	ldr	r0, [sp, #32]
 800739a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800739c:	f7fb f924 	bl	80025e8 <__aeabi_dsub>
 80073a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a4:	f7f9 ff5c 	bl	8001260 <__aeabi_dadd>
 80073a8:	602e      	str	r6, [r5, #0]
 80073aa:	606f      	str	r7, [r5, #4]
 80073ac:	60a8      	str	r0, [r5, #8]
 80073ae:	60e9      	str	r1, [r5, #12]
 80073b0:	e797      	b.n	80072e2 <__kernel_rem_pio2+0x57a>
 80073b2:	6826      	ldr	r6, [r4, #0]
 80073b4:	6867      	ldr	r7, [r4, #4]
 80073b6:	68a2      	ldr	r2, [r4, #8]
 80073b8:	68e3      	ldr	r3, [r4, #12]
 80073ba:	0030      	movs	r0, r6
 80073bc:	0039      	movs	r1, r7
 80073be:	9202      	str	r2, [sp, #8]
 80073c0:	9303      	str	r3, [sp, #12]
 80073c2:	f7f9 ff4d 	bl	8001260 <__aeabi_dadd>
 80073c6:	9008      	str	r0, [sp, #32]
 80073c8:	9109      	str	r1, [sp, #36]	; 0x24
 80073ca:	0002      	movs	r2, r0
 80073cc:	000b      	movs	r3, r1
 80073ce:	0030      	movs	r0, r6
 80073d0:	0039      	movs	r1, r7
 80073d2:	f7fb f909 	bl	80025e8 <__aeabi_dsub>
 80073d6:	9a02      	ldr	r2, [sp, #8]
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	f7f9 ff41 	bl	8001260 <__aeabi_dadd>
 80073de:	9a08      	ldr	r2, [sp, #32]
 80073e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e2:	3d01      	subs	r5, #1
 80073e4:	60a0      	str	r0, [r4, #8]
 80073e6:	60e1      	str	r1, [r4, #12]
 80073e8:	6022      	str	r2, [r4, #0]
 80073ea:	6063      	str	r3, [r4, #4]
 80073ec:	e77e      	b.n	80072ec <__kernel_rem_pio2+0x584>
 80073ee:	9b00      	ldr	r3, [sp, #0]
 80073f0:	aa4e      	add	r2, sp, #312	; 0x138
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	18d3      	adds	r3, r2, r3
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	0028      	movs	r0, r5
 80073fc:	0021      	movs	r1, r4
 80073fe:	f7f9 ff2f 	bl	8001260 <__aeabi_dadd>
 8007402:	9b00      	ldr	r3, [sp, #0]
 8007404:	0005      	movs	r5, r0
 8007406:	3b01      	subs	r3, #1
 8007408:	000c      	movs	r4, r1
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	e773      	b.n	80072f6 <__kernel_rem_pio2+0x58e>
 800740e:	9b06      	ldr	r3, [sp, #24]
 8007410:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	2280      	movs	r2, #128	; 0x80
 8007416:	0612      	lsls	r2, r2, #24
 8007418:	4694      	mov	ip, r2
 800741a:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800741c:	9a06      	ldr	r2, [sp, #24]
 800741e:	4463      	add	r3, ip
 8007420:	6053      	str	r3, [r2, #4]
 8007422:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	0013      	movs	r3, r2
 8007428:	9a00      	ldr	r2, [sp, #0]
 800742a:	609a      	str	r2, [r3, #8]
 800742c:	4662      	mov	r2, ip
 800742e:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8007430:	189b      	adds	r3, r3, r2
 8007432:	9a06      	ldr	r2, [sp, #24]
 8007434:	60d3      	str	r3, [r2, #12]
 8007436:	4663      	mov	r3, ip
 8007438:	18e4      	adds	r4, r4, r3
 800743a:	6115      	str	r5, [r2, #16]
 800743c:	6154      	str	r4, [r2, #20]
 800743e:	e741      	b.n	80072c4 <__kernel_rem_pio2+0x55c>
 8007440:	3ff00000 	.word	0x3ff00000
 8007444:	41700000 	.word	0x41700000
 8007448:	3e700000 	.word	0x3e700000
 800744c:	08007bd8 	.word	0x08007bd8

08007450 <__kernel_sin>:
 8007450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007452:	b089      	sub	sp, #36	; 0x24
 8007454:	9202      	str	r2, [sp, #8]
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	4a46      	ldr	r2, [pc, #280]	; (8007574 <__kernel_sin+0x124>)
 800745a:	004b      	lsls	r3, r1, #1
 800745c:	0005      	movs	r5, r0
 800745e:	000c      	movs	r4, r1
 8007460:	085b      	lsrs	r3, r3, #1
 8007462:	4293      	cmp	r3, r2
 8007464:	dc03      	bgt.n	800746e <__kernel_sin+0x1e>
 8007466:	f7fb fbd5 	bl	8002c14 <__aeabi_d2iz>
 800746a:	2800      	cmp	r0, #0
 800746c:	d04c      	beq.n	8007508 <__kernel_sin+0xb8>
 800746e:	002a      	movs	r2, r5
 8007470:	0023      	movs	r3, r4
 8007472:	0028      	movs	r0, r5
 8007474:	0021      	movs	r1, r4
 8007476:	f7fa fe37 	bl	80020e8 <__aeabi_dmul>
 800747a:	0006      	movs	r6, r0
 800747c:	000f      	movs	r7, r1
 800747e:	0002      	movs	r2, r0
 8007480:	000b      	movs	r3, r1
 8007482:	0028      	movs	r0, r5
 8007484:	0021      	movs	r1, r4
 8007486:	f7fa fe2f 	bl	80020e8 <__aeabi_dmul>
 800748a:	4a3b      	ldr	r2, [pc, #236]	; (8007578 <__kernel_sin+0x128>)
 800748c:	9000      	str	r0, [sp, #0]
 800748e:	9101      	str	r1, [sp, #4]
 8007490:	4b3a      	ldr	r3, [pc, #232]	; (800757c <__kernel_sin+0x12c>)
 8007492:	0030      	movs	r0, r6
 8007494:	0039      	movs	r1, r7
 8007496:	f7fa fe27 	bl	80020e8 <__aeabi_dmul>
 800749a:	4a39      	ldr	r2, [pc, #228]	; (8007580 <__kernel_sin+0x130>)
 800749c:	4b39      	ldr	r3, [pc, #228]	; (8007584 <__kernel_sin+0x134>)
 800749e:	f7fb f8a3 	bl	80025e8 <__aeabi_dsub>
 80074a2:	0032      	movs	r2, r6
 80074a4:	003b      	movs	r3, r7
 80074a6:	f7fa fe1f 	bl	80020e8 <__aeabi_dmul>
 80074aa:	4a37      	ldr	r2, [pc, #220]	; (8007588 <__kernel_sin+0x138>)
 80074ac:	4b37      	ldr	r3, [pc, #220]	; (800758c <__kernel_sin+0x13c>)
 80074ae:	f7f9 fed7 	bl	8001260 <__aeabi_dadd>
 80074b2:	0032      	movs	r2, r6
 80074b4:	003b      	movs	r3, r7
 80074b6:	f7fa fe17 	bl	80020e8 <__aeabi_dmul>
 80074ba:	4a35      	ldr	r2, [pc, #212]	; (8007590 <__kernel_sin+0x140>)
 80074bc:	4b35      	ldr	r3, [pc, #212]	; (8007594 <__kernel_sin+0x144>)
 80074be:	f7fb f893 	bl	80025e8 <__aeabi_dsub>
 80074c2:	0032      	movs	r2, r6
 80074c4:	003b      	movs	r3, r7
 80074c6:	f7fa fe0f 	bl	80020e8 <__aeabi_dmul>
 80074ca:	4b33      	ldr	r3, [pc, #204]	; (8007598 <__kernel_sin+0x148>)
 80074cc:	4a33      	ldr	r2, [pc, #204]	; (800759c <__kernel_sin+0x14c>)
 80074ce:	f7f9 fec7 	bl	8001260 <__aeabi_dadd>
 80074d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074d4:	9004      	str	r0, [sp, #16]
 80074d6:	9105      	str	r1, [sp, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d119      	bne.n	8007510 <__kernel_sin+0xc0>
 80074dc:	0002      	movs	r2, r0
 80074de:	000b      	movs	r3, r1
 80074e0:	0030      	movs	r0, r6
 80074e2:	0039      	movs	r1, r7
 80074e4:	f7fa fe00 	bl	80020e8 <__aeabi_dmul>
 80074e8:	4a2d      	ldr	r2, [pc, #180]	; (80075a0 <__kernel_sin+0x150>)
 80074ea:	4b2e      	ldr	r3, [pc, #184]	; (80075a4 <__kernel_sin+0x154>)
 80074ec:	f7fb f87c 	bl	80025e8 <__aeabi_dsub>
 80074f0:	9a00      	ldr	r2, [sp, #0]
 80074f2:	9b01      	ldr	r3, [sp, #4]
 80074f4:	f7fa fdf8 	bl	80020e8 <__aeabi_dmul>
 80074f8:	0002      	movs	r2, r0
 80074fa:	000b      	movs	r3, r1
 80074fc:	0028      	movs	r0, r5
 80074fe:	0021      	movs	r1, r4
 8007500:	f7f9 feae 	bl	8001260 <__aeabi_dadd>
 8007504:	0005      	movs	r5, r0
 8007506:	000c      	movs	r4, r1
 8007508:	0028      	movs	r0, r5
 800750a:	0021      	movs	r1, r4
 800750c:	b009      	add	sp, #36	; 0x24
 800750e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007510:	2200      	movs	r2, #0
 8007512:	9802      	ldr	r0, [sp, #8]
 8007514:	9903      	ldr	r1, [sp, #12]
 8007516:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <__kernel_sin+0x158>)
 8007518:	f7fa fde6 	bl	80020e8 <__aeabi_dmul>
 800751c:	9a04      	ldr	r2, [sp, #16]
 800751e:	9b05      	ldr	r3, [sp, #20]
 8007520:	9006      	str	r0, [sp, #24]
 8007522:	9107      	str	r1, [sp, #28]
 8007524:	9800      	ldr	r0, [sp, #0]
 8007526:	9901      	ldr	r1, [sp, #4]
 8007528:	f7fa fdde 	bl	80020e8 <__aeabi_dmul>
 800752c:	0002      	movs	r2, r0
 800752e:	000b      	movs	r3, r1
 8007530:	9806      	ldr	r0, [sp, #24]
 8007532:	9907      	ldr	r1, [sp, #28]
 8007534:	f7fb f858 	bl	80025e8 <__aeabi_dsub>
 8007538:	0032      	movs	r2, r6
 800753a:	003b      	movs	r3, r7
 800753c:	f7fa fdd4 	bl	80020e8 <__aeabi_dmul>
 8007540:	9a02      	ldr	r2, [sp, #8]
 8007542:	9b03      	ldr	r3, [sp, #12]
 8007544:	f7fb f850 	bl	80025e8 <__aeabi_dsub>
 8007548:	4a15      	ldr	r2, [pc, #84]	; (80075a0 <__kernel_sin+0x150>)
 800754a:	0006      	movs	r6, r0
 800754c:	000f      	movs	r7, r1
 800754e:	9800      	ldr	r0, [sp, #0]
 8007550:	9901      	ldr	r1, [sp, #4]
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <__kernel_sin+0x154>)
 8007554:	f7fa fdc8 	bl	80020e8 <__aeabi_dmul>
 8007558:	0002      	movs	r2, r0
 800755a:	000b      	movs	r3, r1
 800755c:	0030      	movs	r0, r6
 800755e:	0039      	movs	r1, r7
 8007560:	f7f9 fe7e 	bl	8001260 <__aeabi_dadd>
 8007564:	0002      	movs	r2, r0
 8007566:	000b      	movs	r3, r1
 8007568:	0028      	movs	r0, r5
 800756a:	0021      	movs	r1, r4
 800756c:	f7fb f83c 	bl	80025e8 <__aeabi_dsub>
 8007570:	e7c8      	b.n	8007504 <__kernel_sin+0xb4>
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	3e3fffff 	.word	0x3e3fffff
 8007578:	5acfd57c 	.word	0x5acfd57c
 800757c:	3de5d93a 	.word	0x3de5d93a
 8007580:	8a2b9ceb 	.word	0x8a2b9ceb
 8007584:	3e5ae5e6 	.word	0x3e5ae5e6
 8007588:	57b1fe7d 	.word	0x57b1fe7d
 800758c:	3ec71de3 	.word	0x3ec71de3
 8007590:	19c161d5 	.word	0x19c161d5
 8007594:	3f2a01a0 	.word	0x3f2a01a0
 8007598:	3f811111 	.word	0x3f811111
 800759c:	1110f8a6 	.word	0x1110f8a6
 80075a0:	55555549 	.word	0x55555549
 80075a4:	3fc55555 	.word	0x3fc55555
 80075a8:	3fe00000 	.word	0x3fe00000

080075ac <floor>:
 80075ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ae:	004b      	lsls	r3, r1, #1
 80075b0:	4a39      	ldr	r2, [pc, #228]	; (8007698 <floor+0xec>)
 80075b2:	0d5b      	lsrs	r3, r3, #21
 80075b4:	b085      	sub	sp, #20
 80075b6:	189e      	adds	r6, r3, r2
 80075b8:	9003      	str	r0, [sp, #12]
 80075ba:	000c      	movs	r4, r1
 80075bc:	0005      	movs	r5, r0
 80075be:	2e13      	cmp	r6, #19
 80075c0:	dc34      	bgt.n	800762c <floor+0x80>
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	da15      	bge.n	80075f2 <floor+0x46>
 80075c6:	4a35      	ldr	r2, [pc, #212]	; (800769c <floor+0xf0>)
 80075c8:	4b35      	ldr	r3, [pc, #212]	; (80076a0 <floor+0xf4>)
 80075ca:	f7f9 fe49 	bl	8001260 <__aeabi_dadd>
 80075ce:	2200      	movs	r2, #0
 80075d0:	2300      	movs	r3, #0
 80075d2:	f7f8 ff4b 	bl	800046c <__aeabi_dcmpgt>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d008      	beq.n	80075ec <floor+0x40>
 80075da:	2c00      	cmp	r4, #0
 80075dc:	da59      	bge.n	8007692 <floor+0xe6>
 80075de:	0063      	lsls	r3, r4, #1
 80075e0:	085b      	lsrs	r3, r3, #1
 80075e2:	432b      	orrs	r3, r5
 80075e4:	2500      	movs	r5, #0
 80075e6:	42ab      	cmp	r3, r5
 80075e8:	d000      	beq.n	80075ec <floor+0x40>
 80075ea:	4c2e      	ldr	r4, [pc, #184]	; (80076a4 <floor+0xf8>)
 80075ec:	0028      	movs	r0, r5
 80075ee:	0021      	movs	r1, r4
 80075f0:	e026      	b.n	8007640 <floor+0x94>
 80075f2:	4f2d      	ldr	r7, [pc, #180]	; (80076a8 <floor+0xfc>)
 80075f4:	4137      	asrs	r7, r6
 80075f6:	003b      	movs	r3, r7
 80075f8:	400b      	ands	r3, r1
 80075fa:	4303      	orrs	r3, r0
 80075fc:	d020      	beq.n	8007640 <floor+0x94>
 80075fe:	9000      	str	r0, [sp, #0]
 8007600:	9101      	str	r1, [sp, #4]
 8007602:	4a26      	ldr	r2, [pc, #152]	; (800769c <floor+0xf0>)
 8007604:	4b26      	ldr	r3, [pc, #152]	; (80076a0 <floor+0xf4>)
 8007606:	9800      	ldr	r0, [sp, #0]
 8007608:	9901      	ldr	r1, [sp, #4]
 800760a:	f7f9 fe29 	bl	8001260 <__aeabi_dadd>
 800760e:	2200      	movs	r2, #0
 8007610:	2300      	movs	r3, #0
 8007612:	f7f8 ff2b 	bl	800046c <__aeabi_dcmpgt>
 8007616:	2800      	cmp	r0, #0
 8007618:	d0e8      	beq.n	80075ec <floor+0x40>
 800761a:	2c00      	cmp	r4, #0
 800761c:	da03      	bge.n	8007626 <floor+0x7a>
 800761e:	2380      	movs	r3, #128	; 0x80
 8007620:	035b      	lsls	r3, r3, #13
 8007622:	4133      	asrs	r3, r6
 8007624:	18e4      	adds	r4, r4, r3
 8007626:	43bc      	bics	r4, r7
 8007628:	2500      	movs	r5, #0
 800762a:	e7df      	b.n	80075ec <floor+0x40>
 800762c:	2e33      	cmp	r6, #51	; 0x33
 800762e:	dd09      	ble.n	8007644 <floor+0x98>
 8007630:	2380      	movs	r3, #128	; 0x80
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	429e      	cmp	r6, r3
 8007636:	d103      	bne.n	8007640 <floor+0x94>
 8007638:	0002      	movs	r2, r0
 800763a:	000b      	movs	r3, r1
 800763c:	f7f9 fe10 	bl	8001260 <__aeabi_dadd>
 8007640:	b005      	add	sp, #20
 8007642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007644:	2701      	movs	r7, #1
 8007646:	4a19      	ldr	r2, [pc, #100]	; (80076ac <floor+0x100>)
 8007648:	427f      	negs	r7, r7
 800764a:	189b      	adds	r3, r3, r2
 800764c:	40df      	lsrs	r7, r3
 800764e:	4207      	tst	r7, r0
 8007650:	d0f6      	beq.n	8007640 <floor+0x94>
 8007652:	9000      	str	r0, [sp, #0]
 8007654:	9101      	str	r1, [sp, #4]
 8007656:	4a11      	ldr	r2, [pc, #68]	; (800769c <floor+0xf0>)
 8007658:	4b11      	ldr	r3, [pc, #68]	; (80076a0 <floor+0xf4>)
 800765a:	9800      	ldr	r0, [sp, #0]
 800765c:	9901      	ldr	r1, [sp, #4]
 800765e:	f7f9 fdff 	bl	8001260 <__aeabi_dadd>
 8007662:	2200      	movs	r2, #0
 8007664:	2300      	movs	r3, #0
 8007666:	f7f8 ff01 	bl	800046c <__aeabi_dcmpgt>
 800766a:	2800      	cmp	r0, #0
 800766c:	d0be      	beq.n	80075ec <floor+0x40>
 800766e:	2c00      	cmp	r4, #0
 8007670:	da02      	bge.n	8007678 <floor+0xcc>
 8007672:	2e14      	cmp	r6, #20
 8007674:	d102      	bne.n	800767c <floor+0xd0>
 8007676:	3401      	adds	r4, #1
 8007678:	43bd      	bics	r5, r7
 800767a:	e7b7      	b.n	80075ec <floor+0x40>
 800767c:	2334      	movs	r3, #52	; 0x34
 800767e:	1b9e      	subs	r6, r3, r6
 8007680:	3b33      	subs	r3, #51	; 0x33
 8007682:	40b3      	lsls	r3, r6
 8007684:	18ed      	adds	r5, r5, r3
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	429d      	cmp	r5, r3
 800768a:	419b      	sbcs	r3, r3
 800768c:	425b      	negs	r3, r3
 800768e:	18e4      	adds	r4, r4, r3
 8007690:	e7f2      	b.n	8007678 <floor+0xcc>
 8007692:	2500      	movs	r5, #0
 8007694:	002c      	movs	r4, r5
 8007696:	e7a9      	b.n	80075ec <floor+0x40>
 8007698:	fffffc01 	.word	0xfffffc01
 800769c:	8800759c 	.word	0x8800759c
 80076a0:	7e37e43c 	.word	0x7e37e43c
 80076a4:	bff00000 	.word	0xbff00000
 80076a8:	000fffff 	.word	0x000fffff
 80076ac:	fffffbed 	.word	0xfffffbed

080076b0 <scalbn>:
 80076b0:	004b      	lsls	r3, r1, #1
 80076b2:	b570      	push	{r4, r5, r6, lr}
 80076b4:	0d5b      	lsrs	r3, r3, #21
 80076b6:	0014      	movs	r4, r2
 80076b8:	000a      	movs	r2, r1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10e      	bne.n	80076dc <scalbn+0x2c>
 80076be:	004b      	lsls	r3, r1, #1
 80076c0:	085b      	lsrs	r3, r3, #1
 80076c2:	4303      	orrs	r3, r0
 80076c4:	d011      	beq.n	80076ea <scalbn+0x3a>
 80076c6:	2200      	movs	r2, #0
 80076c8:	4b20      	ldr	r3, [pc, #128]	; (800774c <scalbn+0x9c>)
 80076ca:	f7fa fd0d 	bl	80020e8 <__aeabi_dmul>
 80076ce:	4b20      	ldr	r3, [pc, #128]	; (8007750 <scalbn+0xa0>)
 80076d0:	000a      	movs	r2, r1
 80076d2:	429c      	cmp	r4, r3
 80076d4:	da0a      	bge.n	80076ec <scalbn+0x3c>
 80076d6:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <scalbn+0xa4>)
 80076d8:	4b1f      	ldr	r3, [pc, #124]	; (8007758 <scalbn+0xa8>)
 80076da:	e016      	b.n	800770a <scalbn+0x5a>
 80076dc:	4d1f      	ldr	r5, [pc, #124]	; (800775c <scalbn+0xac>)
 80076de:	42ab      	cmp	r3, r5
 80076e0:	d107      	bne.n	80076f2 <scalbn+0x42>
 80076e2:	0002      	movs	r2, r0
 80076e4:	000b      	movs	r3, r1
 80076e6:	f7f9 fdbb 	bl	8001260 <__aeabi_dadd>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	004b      	lsls	r3, r1, #1
 80076ee:	0d5b      	lsrs	r3, r3, #21
 80076f0:	3b36      	subs	r3, #54	; 0x36
 80076f2:	4d1b      	ldr	r5, [pc, #108]	; (8007760 <scalbn+0xb0>)
 80076f4:	18e3      	adds	r3, r4, r3
 80076f6:	42ab      	cmp	r3, r5
 80076f8:	dd0a      	ble.n	8007710 <scalbn+0x60>
 80076fa:	0002      	movs	r2, r0
 80076fc:	000b      	movs	r3, r1
 80076fe:	4819      	ldr	r0, [pc, #100]	; (8007764 <scalbn+0xb4>)
 8007700:	4919      	ldr	r1, [pc, #100]	; (8007768 <scalbn+0xb8>)
 8007702:	f000 f839 	bl	8007778 <copysign>
 8007706:	4a17      	ldr	r2, [pc, #92]	; (8007764 <scalbn+0xb4>)
 8007708:	4b17      	ldr	r3, [pc, #92]	; (8007768 <scalbn+0xb8>)
 800770a:	f7fa fced 	bl	80020e8 <__aeabi_dmul>
 800770e:	e7ec      	b.n	80076ea <scalbn+0x3a>
 8007710:	2b00      	cmp	r3, #0
 8007712:	dd05      	ble.n	8007720 <scalbn+0x70>
 8007714:	4c15      	ldr	r4, [pc, #84]	; (800776c <scalbn+0xbc>)
 8007716:	051b      	lsls	r3, r3, #20
 8007718:	4022      	ands	r2, r4
 800771a:	431a      	orrs	r2, r3
 800771c:	0011      	movs	r1, r2
 800771e:	e7e4      	b.n	80076ea <scalbn+0x3a>
 8007720:	001d      	movs	r5, r3
 8007722:	3535      	adds	r5, #53	; 0x35
 8007724:	da09      	bge.n	800773a <scalbn+0x8a>
 8007726:	4b12      	ldr	r3, [pc, #72]	; (8007770 <scalbn+0xc0>)
 8007728:	0002      	movs	r2, r0
 800772a:	429c      	cmp	r4, r3
 800772c:	dce6      	bgt.n	80076fc <scalbn+0x4c>
 800772e:	000b      	movs	r3, r1
 8007730:	4808      	ldr	r0, [pc, #32]	; (8007754 <scalbn+0xa4>)
 8007732:	4909      	ldr	r1, [pc, #36]	; (8007758 <scalbn+0xa8>)
 8007734:	f000 f820 	bl	8007778 <copysign>
 8007738:	e7cd      	b.n	80076d6 <scalbn+0x26>
 800773a:	4c0c      	ldr	r4, [pc, #48]	; (800776c <scalbn+0xbc>)
 800773c:	3336      	adds	r3, #54	; 0x36
 800773e:	4022      	ands	r2, r4
 8007740:	051b      	lsls	r3, r3, #20
 8007742:	4313      	orrs	r3, r2
 8007744:	0019      	movs	r1, r3
 8007746:	2200      	movs	r2, #0
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <scalbn+0xc4>)
 800774a:	e7de      	b.n	800770a <scalbn+0x5a>
 800774c:	43500000 	.word	0x43500000
 8007750:	ffff3cb0 	.word	0xffff3cb0
 8007754:	c2f8f359 	.word	0xc2f8f359
 8007758:	01a56e1f 	.word	0x01a56e1f
 800775c:	000007ff 	.word	0x000007ff
 8007760:	000007fe 	.word	0x000007fe
 8007764:	8800759c 	.word	0x8800759c
 8007768:	7e37e43c 	.word	0x7e37e43c
 800776c:	800fffff 	.word	0x800fffff
 8007770:	0000c350 	.word	0x0000c350
 8007774:	3c900000 	.word	0x3c900000

08007778 <copysign>:
 8007778:	b530      	push	{r4, r5, lr}
 800777a:	004a      	lsls	r2, r1, #1
 800777c:	0fdb      	lsrs	r3, r3, #31
 800777e:	07db      	lsls	r3, r3, #31
 8007780:	0852      	lsrs	r2, r2, #1
 8007782:	431a      	orrs	r2, r3
 8007784:	0011      	movs	r1, r2
 8007786:	bd30      	pop	{r4, r5, pc}

08007788 <_sbrk>:
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <_sbrk+0x18>)
 800778a:	0002      	movs	r2, r0
 800778c:	6819      	ldr	r1, [r3, #0]
 800778e:	2900      	cmp	r1, #0
 8007790:	d101      	bne.n	8007796 <_sbrk+0xe>
 8007792:	4904      	ldr	r1, [pc, #16]	; (80077a4 <_sbrk+0x1c>)
 8007794:	6019      	str	r1, [r3, #0]
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	1882      	adds	r2, r0, r2
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	4770      	bx	lr
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	20000140 	.word	0x20000140
 80077a4:	20000350 	.word	0x20000350

080077a8 <_init>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr

080077b4 <_fini>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ba:	bc08      	pop	{r3}
 80077bc:	469e      	mov	lr, r3
 80077be:	4770      	bx	lr
