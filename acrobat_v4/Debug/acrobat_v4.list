
C:\Users\Henry\Desktop\Skripsie\Feedback-Control-of-Robotic-Gymnast-MCU\acrobat_v4\Debug\acrobat_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004618  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080049a0  080049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000000  080049a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000026c  200001e8  08004b90  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000454  08004b90  00020454  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c4c8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003256  00000000  00000000  0003c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008626  00000000  00000000  0003f92e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d00  00000000  00000000  00047f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c18  00000000  00000000  00048c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000077fb  00000000  00000000  00049870  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0004b56e  00000000  00000000  0005106b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009c5d9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002730  00000000  00000000  0009c658  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000bcc3  00000000  00000000  0009ed88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080046c0 	.word	0x080046c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	080046c0 	.word	0x080046c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_f2uiz>:
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	b510      	push	{r4, lr}
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	1c04      	adds	r4, r0, #0
 8000238:	f000 fd28 	bl	8000c8c <__aeabi_fcmpge>
 800023c:	2800      	cmp	r0, #0
 800023e:	d103      	bne.n	8000248 <__aeabi_f2uiz+0x18>
 8000240:	1c20      	adds	r0, r4, #0
 8000242:	f000 fc83 	bl	8000b4c <__aeabi_f2iz>
 8000246:	bd10      	pop	{r4, pc}
 8000248:	219e      	movs	r1, #158	; 0x9e
 800024a:	1c20      	adds	r0, r4, #0
 800024c:	05c9      	lsls	r1, r1, #23
 800024e:	f000 fae1 	bl	8000814 <__aeabi_fsub>
 8000252:	f000 fc7b 	bl	8000b4c <__aeabi_f2iz>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	061b      	lsls	r3, r3, #24
 800025a:	469c      	mov	ip, r3
 800025c:	4460      	add	r0, ip
 800025e:	e7f2      	b.n	8000246 <__aeabi_f2uiz+0x16>

08000260 <__aeabi_fadd>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46c6      	mov	lr, r8
 8000264:	024e      	lsls	r6, r1, #9
 8000266:	0247      	lsls	r7, r0, #9
 8000268:	0a76      	lsrs	r6, r6, #9
 800026a:	0a7b      	lsrs	r3, r7, #9
 800026c:	0044      	lsls	r4, r0, #1
 800026e:	0fc5      	lsrs	r5, r0, #31
 8000270:	00f7      	lsls	r7, r6, #3
 8000272:	0048      	lsls	r0, r1, #1
 8000274:	4698      	mov	r8, r3
 8000276:	b500      	push	{lr}
 8000278:	0e24      	lsrs	r4, r4, #24
 800027a:	002a      	movs	r2, r5
 800027c:	00db      	lsls	r3, r3, #3
 800027e:	0e00      	lsrs	r0, r0, #24
 8000280:	0fc9      	lsrs	r1, r1, #31
 8000282:	46bc      	mov	ip, r7
 8000284:	428d      	cmp	r5, r1
 8000286:	d067      	beq.n	8000358 <__aeabi_fadd+0xf8>
 8000288:	1a22      	subs	r2, r4, r0
 800028a:	2a00      	cmp	r2, #0
 800028c:	dc00      	bgt.n	8000290 <__aeabi_fadd+0x30>
 800028e:	e0a5      	b.n	80003dc <__aeabi_fadd+0x17c>
 8000290:	2800      	cmp	r0, #0
 8000292:	d13a      	bne.n	800030a <__aeabi_fadd+0xaa>
 8000294:	2f00      	cmp	r7, #0
 8000296:	d100      	bne.n	800029a <__aeabi_fadd+0x3a>
 8000298:	e093      	b.n	80003c2 <__aeabi_fadd+0x162>
 800029a:	1e51      	subs	r1, r2, #1
 800029c:	2900      	cmp	r1, #0
 800029e:	d000      	beq.n	80002a2 <__aeabi_fadd+0x42>
 80002a0:	e0bc      	b.n	800041c <__aeabi_fadd+0x1bc>
 80002a2:	2401      	movs	r4, #1
 80002a4:	1bdb      	subs	r3, r3, r7
 80002a6:	015a      	lsls	r2, r3, #5
 80002a8:	d546      	bpl.n	8000338 <__aeabi_fadd+0xd8>
 80002aa:	019b      	lsls	r3, r3, #6
 80002ac:	099e      	lsrs	r6, r3, #6
 80002ae:	0030      	movs	r0, r6
 80002b0:	f000 fcf6 	bl	8000ca0 <__clzsi2>
 80002b4:	3805      	subs	r0, #5
 80002b6:	4086      	lsls	r6, r0
 80002b8:	4284      	cmp	r4, r0
 80002ba:	dd00      	ble.n	80002be <__aeabi_fadd+0x5e>
 80002bc:	e09d      	b.n	80003fa <__aeabi_fadd+0x19a>
 80002be:	1b04      	subs	r4, r0, r4
 80002c0:	0032      	movs	r2, r6
 80002c2:	2020      	movs	r0, #32
 80002c4:	3401      	adds	r4, #1
 80002c6:	40e2      	lsrs	r2, r4
 80002c8:	1b04      	subs	r4, r0, r4
 80002ca:	40a6      	lsls	r6, r4
 80002cc:	0033      	movs	r3, r6
 80002ce:	1e5e      	subs	r6, r3, #1
 80002d0:	41b3      	sbcs	r3, r6
 80002d2:	2400      	movs	r4, #0
 80002d4:	4313      	orrs	r3, r2
 80002d6:	075a      	lsls	r2, r3, #29
 80002d8:	d004      	beq.n	80002e4 <__aeabi_fadd+0x84>
 80002da:	220f      	movs	r2, #15
 80002dc:	401a      	ands	r2, r3
 80002de:	2a04      	cmp	r2, #4
 80002e0:	d000      	beq.n	80002e4 <__aeabi_fadd+0x84>
 80002e2:	3304      	adds	r3, #4
 80002e4:	015a      	lsls	r2, r3, #5
 80002e6:	d529      	bpl.n	800033c <__aeabi_fadd+0xdc>
 80002e8:	3401      	adds	r4, #1
 80002ea:	2cff      	cmp	r4, #255	; 0xff
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fadd+0x90>
 80002ee:	e081      	b.n	80003f4 <__aeabi_fadd+0x194>
 80002f0:	002a      	movs	r2, r5
 80002f2:	019b      	lsls	r3, r3, #6
 80002f4:	0a5b      	lsrs	r3, r3, #9
 80002f6:	b2e4      	uxtb	r4, r4
 80002f8:	025b      	lsls	r3, r3, #9
 80002fa:	05e4      	lsls	r4, r4, #23
 80002fc:	0a58      	lsrs	r0, r3, #9
 80002fe:	07d2      	lsls	r2, r2, #31
 8000300:	4320      	orrs	r0, r4
 8000302:	4310      	orrs	r0, r2
 8000304:	bc04      	pop	{r2}
 8000306:	4690      	mov	r8, r2
 8000308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030a:	2cff      	cmp	r4, #255	; 0xff
 800030c:	d0e3      	beq.n	80002d6 <__aeabi_fadd+0x76>
 800030e:	2180      	movs	r1, #128	; 0x80
 8000310:	0038      	movs	r0, r7
 8000312:	04c9      	lsls	r1, r1, #19
 8000314:	4308      	orrs	r0, r1
 8000316:	4684      	mov	ip, r0
 8000318:	2a1b      	cmp	r2, #27
 800031a:	dd00      	ble.n	800031e <__aeabi_fadd+0xbe>
 800031c:	e082      	b.n	8000424 <__aeabi_fadd+0x1c4>
 800031e:	2020      	movs	r0, #32
 8000320:	4661      	mov	r1, ip
 8000322:	40d1      	lsrs	r1, r2
 8000324:	1a82      	subs	r2, r0, r2
 8000326:	4660      	mov	r0, ip
 8000328:	4090      	lsls	r0, r2
 800032a:	0002      	movs	r2, r0
 800032c:	1e50      	subs	r0, r2, #1
 800032e:	4182      	sbcs	r2, r0
 8000330:	430a      	orrs	r2, r1
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	015a      	lsls	r2, r3, #5
 8000336:	d4b8      	bmi.n	80002aa <__aeabi_fadd+0x4a>
 8000338:	075a      	lsls	r2, r3, #29
 800033a:	d1ce      	bne.n	80002da <__aeabi_fadd+0x7a>
 800033c:	08de      	lsrs	r6, r3, #3
 800033e:	002a      	movs	r2, r5
 8000340:	2cff      	cmp	r4, #255	; 0xff
 8000342:	d13a      	bne.n	80003ba <__aeabi_fadd+0x15a>
 8000344:	2e00      	cmp	r6, #0
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0xea>
 8000348:	e0ae      	b.n	80004a8 <__aeabi_fadd+0x248>
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	03db      	lsls	r3, r3, #15
 800034e:	4333      	orrs	r3, r6
 8000350:	025b      	lsls	r3, r3, #9
 8000352:	0a5b      	lsrs	r3, r3, #9
 8000354:	24ff      	movs	r4, #255	; 0xff
 8000356:	e7cf      	b.n	80002f8 <__aeabi_fadd+0x98>
 8000358:	1a21      	subs	r1, r4, r0
 800035a:	2900      	cmp	r1, #0
 800035c:	dd52      	ble.n	8000404 <__aeabi_fadd+0x1a4>
 800035e:	2800      	cmp	r0, #0
 8000360:	d031      	beq.n	80003c6 <__aeabi_fadd+0x166>
 8000362:	2cff      	cmp	r4, #255	; 0xff
 8000364:	d0b7      	beq.n	80002d6 <__aeabi_fadd+0x76>
 8000366:	2080      	movs	r0, #128	; 0x80
 8000368:	003e      	movs	r6, r7
 800036a:	04c0      	lsls	r0, r0, #19
 800036c:	4306      	orrs	r6, r0
 800036e:	46b4      	mov	ip, r6
 8000370:	291b      	cmp	r1, #27
 8000372:	dd00      	ble.n	8000376 <__aeabi_fadd+0x116>
 8000374:	e0aa      	b.n	80004cc <__aeabi_fadd+0x26c>
 8000376:	2620      	movs	r6, #32
 8000378:	4660      	mov	r0, ip
 800037a:	40c8      	lsrs	r0, r1
 800037c:	1a71      	subs	r1, r6, r1
 800037e:	4666      	mov	r6, ip
 8000380:	408e      	lsls	r6, r1
 8000382:	0031      	movs	r1, r6
 8000384:	1e4e      	subs	r6, r1, #1
 8000386:	41b1      	sbcs	r1, r6
 8000388:	4301      	orrs	r1, r0
 800038a:	185b      	adds	r3, r3, r1
 800038c:	0159      	lsls	r1, r3, #5
 800038e:	d5d3      	bpl.n	8000338 <__aeabi_fadd+0xd8>
 8000390:	3401      	adds	r4, #1
 8000392:	2cff      	cmp	r4, #255	; 0xff
 8000394:	d100      	bne.n	8000398 <__aeabi_fadd+0x138>
 8000396:	e087      	b.n	80004a8 <__aeabi_fadd+0x248>
 8000398:	2201      	movs	r2, #1
 800039a:	4978      	ldr	r1, [pc, #480]	; (800057c <__aeabi_fadd+0x31c>)
 800039c:	401a      	ands	r2, r3
 800039e:	085b      	lsrs	r3, r3, #1
 80003a0:	400b      	ands	r3, r1
 80003a2:	4313      	orrs	r3, r2
 80003a4:	e797      	b.n	80002d6 <__aeabi_fadd+0x76>
 80003a6:	2c00      	cmp	r4, #0
 80003a8:	d000      	beq.n	80003ac <__aeabi_fadd+0x14c>
 80003aa:	e0a7      	b.n	80004fc <__aeabi_fadd+0x29c>
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d000      	beq.n	80003b2 <__aeabi_fadd+0x152>
 80003b0:	e0b6      	b.n	8000520 <__aeabi_fadd+0x2c0>
 80003b2:	1e3b      	subs	r3, r7, #0
 80003b4:	d162      	bne.n	800047c <__aeabi_fadd+0x21c>
 80003b6:	2600      	movs	r6, #0
 80003b8:	2200      	movs	r2, #0
 80003ba:	0273      	lsls	r3, r6, #9
 80003bc:	0a5b      	lsrs	r3, r3, #9
 80003be:	b2e4      	uxtb	r4, r4
 80003c0:	e79a      	b.n	80002f8 <__aeabi_fadd+0x98>
 80003c2:	0014      	movs	r4, r2
 80003c4:	e787      	b.n	80002d6 <__aeabi_fadd+0x76>
 80003c6:	2f00      	cmp	r7, #0
 80003c8:	d04d      	beq.n	8000466 <__aeabi_fadd+0x206>
 80003ca:	1e48      	subs	r0, r1, #1
 80003cc:	2800      	cmp	r0, #0
 80003ce:	d157      	bne.n	8000480 <__aeabi_fadd+0x220>
 80003d0:	4463      	add	r3, ip
 80003d2:	2401      	movs	r4, #1
 80003d4:	015a      	lsls	r2, r3, #5
 80003d6:	d5af      	bpl.n	8000338 <__aeabi_fadd+0xd8>
 80003d8:	2402      	movs	r4, #2
 80003da:	e7dd      	b.n	8000398 <__aeabi_fadd+0x138>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	d124      	bne.n	800042a <__aeabi_fadd+0x1ca>
 80003e0:	1c62      	adds	r2, r4, #1
 80003e2:	b2d2      	uxtb	r2, r2
 80003e4:	2a01      	cmp	r2, #1
 80003e6:	ddde      	ble.n	80003a6 <__aeabi_fadd+0x146>
 80003e8:	1bde      	subs	r6, r3, r7
 80003ea:	0172      	lsls	r2, r6, #5
 80003ec:	d535      	bpl.n	800045a <__aeabi_fadd+0x1fa>
 80003ee:	1afe      	subs	r6, r7, r3
 80003f0:	000d      	movs	r5, r1
 80003f2:	e75c      	b.n	80002ae <__aeabi_fadd+0x4e>
 80003f4:	002a      	movs	r2, r5
 80003f6:	2300      	movs	r3, #0
 80003f8:	e77e      	b.n	80002f8 <__aeabi_fadd+0x98>
 80003fa:	0033      	movs	r3, r6
 80003fc:	4a60      	ldr	r2, [pc, #384]	; (8000580 <__aeabi_fadd+0x320>)
 80003fe:	1a24      	subs	r4, r4, r0
 8000400:	4013      	ands	r3, r2
 8000402:	e768      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000404:	2900      	cmp	r1, #0
 8000406:	d163      	bne.n	80004d0 <__aeabi_fadd+0x270>
 8000408:	1c61      	adds	r1, r4, #1
 800040a:	b2c8      	uxtb	r0, r1
 800040c:	2801      	cmp	r0, #1
 800040e:	dd4e      	ble.n	80004ae <__aeabi_fadd+0x24e>
 8000410:	29ff      	cmp	r1, #255	; 0xff
 8000412:	d049      	beq.n	80004a8 <__aeabi_fadd+0x248>
 8000414:	4463      	add	r3, ip
 8000416:	085b      	lsrs	r3, r3, #1
 8000418:	000c      	movs	r4, r1
 800041a:	e75c      	b.n	80002d6 <__aeabi_fadd+0x76>
 800041c:	2aff      	cmp	r2, #255	; 0xff
 800041e:	d041      	beq.n	80004a4 <__aeabi_fadd+0x244>
 8000420:	000a      	movs	r2, r1
 8000422:	e779      	b.n	8000318 <__aeabi_fadd+0xb8>
 8000424:	2201      	movs	r2, #1
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	e784      	b.n	8000334 <__aeabi_fadd+0xd4>
 800042a:	2c00      	cmp	r4, #0
 800042c:	d01d      	beq.n	800046a <__aeabi_fadd+0x20a>
 800042e:	28ff      	cmp	r0, #255	; 0xff
 8000430:	d022      	beq.n	8000478 <__aeabi_fadd+0x218>
 8000432:	2480      	movs	r4, #128	; 0x80
 8000434:	04e4      	lsls	r4, r4, #19
 8000436:	4252      	negs	r2, r2
 8000438:	4323      	orrs	r3, r4
 800043a:	2a1b      	cmp	r2, #27
 800043c:	dd00      	ble.n	8000440 <__aeabi_fadd+0x1e0>
 800043e:	e08a      	b.n	8000556 <__aeabi_fadd+0x2f6>
 8000440:	001c      	movs	r4, r3
 8000442:	2520      	movs	r5, #32
 8000444:	40d4      	lsrs	r4, r2
 8000446:	1aaa      	subs	r2, r5, r2
 8000448:	4093      	lsls	r3, r2
 800044a:	1e5a      	subs	r2, r3, #1
 800044c:	4193      	sbcs	r3, r2
 800044e:	4323      	orrs	r3, r4
 8000450:	4662      	mov	r2, ip
 8000452:	0004      	movs	r4, r0
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	000d      	movs	r5, r1
 8000458:	e725      	b.n	80002a6 <__aeabi_fadd+0x46>
 800045a:	2e00      	cmp	r6, #0
 800045c:	d000      	beq.n	8000460 <__aeabi_fadd+0x200>
 800045e:	e726      	b.n	80002ae <__aeabi_fadd+0x4e>
 8000460:	2200      	movs	r2, #0
 8000462:	2400      	movs	r4, #0
 8000464:	e7a9      	b.n	80003ba <__aeabi_fadd+0x15a>
 8000466:	000c      	movs	r4, r1
 8000468:	e735      	b.n	80002d6 <__aeabi_fadd+0x76>
 800046a:	2b00      	cmp	r3, #0
 800046c:	d04d      	beq.n	800050a <__aeabi_fadd+0x2aa>
 800046e:	43d2      	mvns	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	d0ed      	beq.n	8000450 <__aeabi_fadd+0x1f0>
 8000474:	28ff      	cmp	r0, #255	; 0xff
 8000476:	d1e0      	bne.n	800043a <__aeabi_fadd+0x1da>
 8000478:	4663      	mov	r3, ip
 800047a:	24ff      	movs	r4, #255	; 0xff
 800047c:	000d      	movs	r5, r1
 800047e:	e72a      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000480:	29ff      	cmp	r1, #255	; 0xff
 8000482:	d00f      	beq.n	80004a4 <__aeabi_fadd+0x244>
 8000484:	0001      	movs	r1, r0
 8000486:	e773      	b.n	8000370 <__aeabi_fadd+0x110>
 8000488:	2b00      	cmp	r3, #0
 800048a:	d061      	beq.n	8000550 <__aeabi_fadd+0x2f0>
 800048c:	24ff      	movs	r4, #255	; 0xff
 800048e:	2f00      	cmp	r7, #0
 8000490:	d100      	bne.n	8000494 <__aeabi_fadd+0x234>
 8000492:	e720      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	4641      	mov	r1, r8
 8000498:	03d2      	lsls	r2, r2, #15
 800049a:	4211      	tst	r1, r2
 800049c:	d002      	beq.n	80004a4 <__aeabi_fadd+0x244>
 800049e:	4216      	tst	r6, r2
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x244>
 80004a2:	003b      	movs	r3, r7
 80004a4:	24ff      	movs	r4, #255	; 0xff
 80004a6:	e716      	b.n	80002d6 <__aeabi_fadd+0x76>
 80004a8:	24ff      	movs	r4, #255	; 0xff
 80004aa:	2300      	movs	r3, #0
 80004ac:	e724      	b.n	80002f8 <__aeabi_fadd+0x98>
 80004ae:	2c00      	cmp	r4, #0
 80004b0:	d1ea      	bne.n	8000488 <__aeabi_fadd+0x228>
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d058      	beq.n	8000568 <__aeabi_fadd+0x308>
 80004b6:	2f00      	cmp	r7, #0
 80004b8:	d100      	bne.n	80004bc <__aeabi_fadd+0x25c>
 80004ba:	e70c      	b.n	80002d6 <__aeabi_fadd+0x76>
 80004bc:	4463      	add	r3, ip
 80004be:	015a      	lsls	r2, r3, #5
 80004c0:	d400      	bmi.n	80004c4 <__aeabi_fadd+0x264>
 80004c2:	e739      	b.n	8000338 <__aeabi_fadd+0xd8>
 80004c4:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <__aeabi_fadd+0x320>)
 80004c6:	000c      	movs	r4, r1
 80004c8:	4013      	ands	r3, r2
 80004ca:	e704      	b.n	80002d6 <__aeabi_fadd+0x76>
 80004cc:	2101      	movs	r1, #1
 80004ce:	e75c      	b.n	800038a <__aeabi_fadd+0x12a>
 80004d0:	2c00      	cmp	r4, #0
 80004d2:	d11e      	bne.n	8000512 <__aeabi_fadd+0x2b2>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d040      	beq.n	800055a <__aeabi_fadd+0x2fa>
 80004d8:	43c9      	mvns	r1, r1
 80004da:	2900      	cmp	r1, #0
 80004dc:	d00b      	beq.n	80004f6 <__aeabi_fadd+0x296>
 80004de:	28ff      	cmp	r0, #255	; 0xff
 80004e0:	d036      	beq.n	8000550 <__aeabi_fadd+0x2f0>
 80004e2:	291b      	cmp	r1, #27
 80004e4:	dc47      	bgt.n	8000576 <__aeabi_fadd+0x316>
 80004e6:	001c      	movs	r4, r3
 80004e8:	2620      	movs	r6, #32
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	1a71      	subs	r1, r6, r1
 80004ee:	408b      	lsls	r3, r1
 80004f0:	1e59      	subs	r1, r3, #1
 80004f2:	418b      	sbcs	r3, r1
 80004f4:	4323      	orrs	r3, r4
 80004f6:	4463      	add	r3, ip
 80004f8:	0004      	movs	r4, r0
 80004fa:	e747      	b.n	800038c <__aeabi_fadd+0x12c>
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d118      	bne.n	8000532 <__aeabi_fadd+0x2d2>
 8000500:	1e3b      	subs	r3, r7, #0
 8000502:	d02d      	beq.n	8000560 <__aeabi_fadd+0x300>
 8000504:	000d      	movs	r5, r1
 8000506:	24ff      	movs	r4, #255	; 0xff
 8000508:	e6e5      	b.n	80002d6 <__aeabi_fadd+0x76>
 800050a:	003b      	movs	r3, r7
 800050c:	0004      	movs	r4, r0
 800050e:	000d      	movs	r5, r1
 8000510:	e6e1      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000512:	28ff      	cmp	r0, #255	; 0xff
 8000514:	d01c      	beq.n	8000550 <__aeabi_fadd+0x2f0>
 8000516:	2480      	movs	r4, #128	; 0x80
 8000518:	04e4      	lsls	r4, r4, #19
 800051a:	4249      	negs	r1, r1
 800051c:	4323      	orrs	r3, r4
 800051e:	e7e0      	b.n	80004e2 <__aeabi_fadd+0x282>
 8000520:	2f00      	cmp	r7, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_fadd+0x2c6>
 8000524:	e6d7      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000526:	1bde      	subs	r6, r3, r7
 8000528:	0172      	lsls	r2, r6, #5
 800052a:	d51f      	bpl.n	800056c <__aeabi_fadd+0x30c>
 800052c:	1afb      	subs	r3, r7, r3
 800052e:	000d      	movs	r5, r1
 8000530:	e6d1      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000532:	24ff      	movs	r4, #255	; 0xff
 8000534:	2f00      	cmp	r7, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x2da>
 8000538:	e6cd      	b.n	80002d6 <__aeabi_fadd+0x76>
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	4640      	mov	r0, r8
 800053e:	03d2      	lsls	r2, r2, #15
 8000540:	4210      	tst	r0, r2
 8000542:	d0af      	beq.n	80004a4 <__aeabi_fadd+0x244>
 8000544:	4216      	tst	r6, r2
 8000546:	d1ad      	bne.n	80004a4 <__aeabi_fadd+0x244>
 8000548:	003b      	movs	r3, r7
 800054a:	000d      	movs	r5, r1
 800054c:	24ff      	movs	r4, #255	; 0xff
 800054e:	e6c2      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000550:	4663      	mov	r3, ip
 8000552:	24ff      	movs	r4, #255	; 0xff
 8000554:	e6bf      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000556:	2301      	movs	r3, #1
 8000558:	e77a      	b.n	8000450 <__aeabi_fadd+0x1f0>
 800055a:	003b      	movs	r3, r7
 800055c:	0004      	movs	r4, r0
 800055e:	e6ba      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000560:	2680      	movs	r6, #128	; 0x80
 8000562:	2200      	movs	r2, #0
 8000564:	03f6      	lsls	r6, r6, #15
 8000566:	e6f0      	b.n	800034a <__aeabi_fadd+0xea>
 8000568:	003b      	movs	r3, r7
 800056a:	e6b4      	b.n	80002d6 <__aeabi_fadd+0x76>
 800056c:	1e33      	subs	r3, r6, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_fadd+0x312>
 8000570:	e6e2      	b.n	8000338 <__aeabi_fadd+0xd8>
 8000572:	2200      	movs	r2, #0
 8000574:	e721      	b.n	80003ba <__aeabi_fadd+0x15a>
 8000576:	2301      	movs	r3, #1
 8000578:	e7bd      	b.n	80004f6 <__aeabi_fadd+0x296>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	7dffffff 	.word	0x7dffffff
 8000580:	fbffffff 	.word	0xfbffffff

08000584 <__aeabi_fdiv>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	4657      	mov	r7, sl
 8000588:	464e      	mov	r6, r9
 800058a:	46de      	mov	lr, fp
 800058c:	4645      	mov	r5, r8
 800058e:	b5e0      	push	{r5, r6, r7, lr}
 8000590:	0244      	lsls	r4, r0, #9
 8000592:	0043      	lsls	r3, r0, #1
 8000594:	0fc6      	lsrs	r6, r0, #31
 8000596:	b083      	sub	sp, #12
 8000598:	1c0f      	adds	r7, r1, #0
 800059a:	0a64      	lsrs	r4, r4, #9
 800059c:	0e1b      	lsrs	r3, r3, #24
 800059e:	46b2      	mov	sl, r6
 80005a0:	d053      	beq.n	800064a <__aeabi_fdiv+0xc6>
 80005a2:	2bff      	cmp	r3, #255	; 0xff
 80005a4:	d027      	beq.n	80005f6 <__aeabi_fdiv+0x72>
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	00e4      	lsls	r4, r4, #3
 80005aa:	04d2      	lsls	r2, r2, #19
 80005ac:	4314      	orrs	r4, r2
 80005ae:	227f      	movs	r2, #127	; 0x7f
 80005b0:	4252      	negs	r2, r2
 80005b2:	4690      	mov	r8, r2
 80005b4:	4498      	add	r8, r3
 80005b6:	2300      	movs	r3, #0
 80005b8:	4699      	mov	r9, r3
 80005ba:	469b      	mov	fp, r3
 80005bc:	027d      	lsls	r5, r7, #9
 80005be:	0078      	lsls	r0, r7, #1
 80005c0:	0ffb      	lsrs	r3, r7, #31
 80005c2:	0a6d      	lsrs	r5, r5, #9
 80005c4:	0e00      	lsrs	r0, r0, #24
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	d024      	beq.n	8000614 <__aeabi_fdiv+0x90>
 80005ca:	28ff      	cmp	r0, #255	; 0xff
 80005cc:	d046      	beq.n	800065c <__aeabi_fdiv+0xd8>
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	2100      	movs	r1, #0
 80005d2:	00ed      	lsls	r5, r5, #3
 80005d4:	04db      	lsls	r3, r3, #19
 80005d6:	431d      	orrs	r5, r3
 80005d8:	387f      	subs	r0, #127	; 0x7f
 80005da:	4647      	mov	r7, r8
 80005dc:	1a38      	subs	r0, r7, r0
 80005de:	464f      	mov	r7, r9
 80005e0:	430f      	orrs	r7, r1
 80005e2:	00bf      	lsls	r7, r7, #2
 80005e4:	46b9      	mov	r9, r7
 80005e6:	0033      	movs	r3, r6
 80005e8:	9a00      	ldr	r2, [sp, #0]
 80005ea:	4f87      	ldr	r7, [pc, #540]	; (8000808 <__aeabi_fdiv+0x284>)
 80005ec:	4053      	eors	r3, r2
 80005ee:	464a      	mov	r2, r9
 80005f0:	58ba      	ldr	r2, [r7, r2]
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	4697      	mov	pc, r2
 80005f6:	2c00      	cmp	r4, #0
 80005f8:	d14e      	bne.n	8000698 <__aeabi_fdiv+0x114>
 80005fa:	2308      	movs	r3, #8
 80005fc:	4699      	mov	r9, r3
 80005fe:	33f7      	adds	r3, #247	; 0xf7
 8000600:	4698      	mov	r8, r3
 8000602:	3bfd      	subs	r3, #253	; 0xfd
 8000604:	469b      	mov	fp, r3
 8000606:	027d      	lsls	r5, r7, #9
 8000608:	0078      	lsls	r0, r7, #1
 800060a:	0ffb      	lsrs	r3, r7, #31
 800060c:	0a6d      	lsrs	r5, r5, #9
 800060e:	0e00      	lsrs	r0, r0, #24
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	d1da      	bne.n	80005ca <__aeabi_fdiv+0x46>
 8000614:	2d00      	cmp	r5, #0
 8000616:	d126      	bne.n	8000666 <__aeabi_fdiv+0xe2>
 8000618:	2000      	movs	r0, #0
 800061a:	2101      	movs	r1, #1
 800061c:	0033      	movs	r3, r6
 800061e:	9a00      	ldr	r2, [sp, #0]
 8000620:	4f7a      	ldr	r7, [pc, #488]	; (800080c <__aeabi_fdiv+0x288>)
 8000622:	4053      	eors	r3, r2
 8000624:	4642      	mov	r2, r8
 8000626:	1a10      	subs	r0, r2, r0
 8000628:	464a      	mov	r2, r9
 800062a:	430a      	orrs	r2, r1
 800062c:	0092      	lsls	r2, r2, #2
 800062e:	58ba      	ldr	r2, [r7, r2]
 8000630:	001d      	movs	r5, r3
 8000632:	4697      	mov	pc, r2
 8000634:	9b00      	ldr	r3, [sp, #0]
 8000636:	002c      	movs	r4, r5
 8000638:	469a      	mov	sl, r3
 800063a:	468b      	mov	fp, r1
 800063c:	465b      	mov	r3, fp
 800063e:	2b02      	cmp	r3, #2
 8000640:	d131      	bne.n	80006a6 <__aeabi_fdiv+0x122>
 8000642:	4653      	mov	r3, sl
 8000644:	21ff      	movs	r1, #255	; 0xff
 8000646:	2400      	movs	r4, #0
 8000648:	e038      	b.n	80006bc <__aeabi_fdiv+0x138>
 800064a:	2c00      	cmp	r4, #0
 800064c:	d117      	bne.n	800067e <__aeabi_fdiv+0xfa>
 800064e:	2304      	movs	r3, #4
 8000650:	4699      	mov	r9, r3
 8000652:	2300      	movs	r3, #0
 8000654:	4698      	mov	r8, r3
 8000656:	3301      	adds	r3, #1
 8000658:	469b      	mov	fp, r3
 800065a:	e7af      	b.n	80005bc <__aeabi_fdiv+0x38>
 800065c:	20ff      	movs	r0, #255	; 0xff
 800065e:	2d00      	cmp	r5, #0
 8000660:	d10b      	bne.n	800067a <__aeabi_fdiv+0xf6>
 8000662:	2102      	movs	r1, #2
 8000664:	e7da      	b.n	800061c <__aeabi_fdiv+0x98>
 8000666:	0028      	movs	r0, r5
 8000668:	f000 fb1a 	bl	8000ca0 <__clzsi2>
 800066c:	1f43      	subs	r3, r0, #5
 800066e:	409d      	lsls	r5, r3
 8000670:	2376      	movs	r3, #118	; 0x76
 8000672:	425b      	negs	r3, r3
 8000674:	1a18      	subs	r0, r3, r0
 8000676:	2100      	movs	r1, #0
 8000678:	e7af      	b.n	80005da <__aeabi_fdiv+0x56>
 800067a:	2103      	movs	r1, #3
 800067c:	e7ad      	b.n	80005da <__aeabi_fdiv+0x56>
 800067e:	0020      	movs	r0, r4
 8000680:	f000 fb0e 	bl	8000ca0 <__clzsi2>
 8000684:	1f43      	subs	r3, r0, #5
 8000686:	409c      	lsls	r4, r3
 8000688:	2376      	movs	r3, #118	; 0x76
 800068a:	425b      	negs	r3, r3
 800068c:	1a1b      	subs	r3, r3, r0
 800068e:	4698      	mov	r8, r3
 8000690:	2300      	movs	r3, #0
 8000692:	4699      	mov	r9, r3
 8000694:	469b      	mov	fp, r3
 8000696:	e791      	b.n	80005bc <__aeabi_fdiv+0x38>
 8000698:	230c      	movs	r3, #12
 800069a:	4699      	mov	r9, r3
 800069c:	33f3      	adds	r3, #243	; 0xf3
 800069e:	4698      	mov	r8, r3
 80006a0:	3bfc      	subs	r3, #252	; 0xfc
 80006a2:	469b      	mov	fp, r3
 80006a4:	e78a      	b.n	80005bc <__aeabi_fdiv+0x38>
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d100      	bne.n	80006ac <__aeabi_fdiv+0x128>
 80006aa:	e0a5      	b.n	80007f8 <__aeabi_fdiv+0x274>
 80006ac:	4655      	mov	r5, sl
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fdiv+0x130>
 80006b2:	e081      	b.n	80007b8 <__aeabi_fdiv+0x234>
 80006b4:	2301      	movs	r3, #1
 80006b6:	2100      	movs	r1, #0
 80006b8:	2400      	movs	r4, #0
 80006ba:	402b      	ands	r3, r5
 80006bc:	0264      	lsls	r4, r4, #9
 80006be:	05c9      	lsls	r1, r1, #23
 80006c0:	0a60      	lsrs	r0, r4, #9
 80006c2:	07db      	lsls	r3, r3, #31
 80006c4:	4308      	orrs	r0, r1
 80006c6:	4318      	orrs	r0, r3
 80006c8:	b003      	add	sp, #12
 80006ca:	bc3c      	pop	{r2, r3, r4, r5}
 80006cc:	4690      	mov	r8, r2
 80006ce:	4699      	mov	r9, r3
 80006d0:	46a2      	mov	sl, r4
 80006d2:	46ab      	mov	fp, r5
 80006d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d6:	2480      	movs	r4, #128	; 0x80
 80006d8:	2300      	movs	r3, #0
 80006da:	03e4      	lsls	r4, r4, #15
 80006dc:	21ff      	movs	r1, #255	; 0xff
 80006de:	e7ed      	b.n	80006bc <__aeabi_fdiv+0x138>
 80006e0:	21ff      	movs	r1, #255	; 0xff
 80006e2:	2400      	movs	r4, #0
 80006e4:	e7ea      	b.n	80006bc <__aeabi_fdiv+0x138>
 80006e6:	2301      	movs	r3, #1
 80006e8:	1a59      	subs	r1, r3, r1
 80006ea:	291b      	cmp	r1, #27
 80006ec:	dd66      	ble.n	80007bc <__aeabi_fdiv+0x238>
 80006ee:	9a01      	ldr	r2, [sp, #4]
 80006f0:	4013      	ands	r3, r2
 80006f2:	2100      	movs	r1, #0
 80006f4:	2400      	movs	r4, #0
 80006f6:	e7e1      	b.n	80006bc <__aeabi_fdiv+0x138>
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	03db      	lsls	r3, r3, #15
 80006fc:	421c      	tst	r4, r3
 80006fe:	d038      	beq.n	8000772 <__aeabi_fdiv+0x1ee>
 8000700:	421d      	tst	r5, r3
 8000702:	d051      	beq.n	80007a8 <__aeabi_fdiv+0x224>
 8000704:	431c      	orrs	r4, r3
 8000706:	0264      	lsls	r4, r4, #9
 8000708:	0a64      	lsrs	r4, r4, #9
 800070a:	0033      	movs	r3, r6
 800070c:	21ff      	movs	r1, #255	; 0xff
 800070e:	e7d5      	b.n	80006bc <__aeabi_fdiv+0x138>
 8000710:	0163      	lsls	r3, r4, #5
 8000712:	016c      	lsls	r4, r5, #5
 8000714:	42a3      	cmp	r3, r4
 8000716:	d23b      	bcs.n	8000790 <__aeabi_fdiv+0x20c>
 8000718:	261b      	movs	r6, #27
 800071a:	2100      	movs	r1, #0
 800071c:	3801      	subs	r0, #1
 800071e:	2501      	movs	r5, #1
 8000720:	001f      	movs	r7, r3
 8000722:	0049      	lsls	r1, r1, #1
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	2f00      	cmp	r7, #0
 8000728:	db01      	blt.n	800072e <__aeabi_fdiv+0x1aa>
 800072a:	429c      	cmp	r4, r3
 800072c:	d801      	bhi.n	8000732 <__aeabi_fdiv+0x1ae>
 800072e:	1b1b      	subs	r3, r3, r4
 8000730:	4329      	orrs	r1, r5
 8000732:	3e01      	subs	r6, #1
 8000734:	2e00      	cmp	r6, #0
 8000736:	d1f3      	bne.n	8000720 <__aeabi_fdiv+0x19c>
 8000738:	001c      	movs	r4, r3
 800073a:	1e63      	subs	r3, r4, #1
 800073c:	419c      	sbcs	r4, r3
 800073e:	430c      	orrs	r4, r1
 8000740:	0001      	movs	r1, r0
 8000742:	317f      	adds	r1, #127	; 0x7f
 8000744:	2900      	cmp	r1, #0
 8000746:	ddce      	ble.n	80006e6 <__aeabi_fdiv+0x162>
 8000748:	0763      	lsls	r3, r4, #29
 800074a:	d004      	beq.n	8000756 <__aeabi_fdiv+0x1d2>
 800074c:	230f      	movs	r3, #15
 800074e:	4023      	ands	r3, r4
 8000750:	2b04      	cmp	r3, #4
 8000752:	d000      	beq.n	8000756 <__aeabi_fdiv+0x1d2>
 8000754:	3404      	adds	r4, #4
 8000756:	0123      	lsls	r3, r4, #4
 8000758:	d503      	bpl.n	8000762 <__aeabi_fdiv+0x1de>
 800075a:	0001      	movs	r1, r0
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <__aeabi_fdiv+0x28c>)
 800075e:	3180      	adds	r1, #128	; 0x80
 8000760:	401c      	ands	r4, r3
 8000762:	29fe      	cmp	r1, #254	; 0xfe
 8000764:	dd0d      	ble.n	8000782 <__aeabi_fdiv+0x1fe>
 8000766:	2301      	movs	r3, #1
 8000768:	9a01      	ldr	r2, [sp, #4]
 800076a:	21ff      	movs	r1, #255	; 0xff
 800076c:	4013      	ands	r3, r2
 800076e:	2400      	movs	r4, #0
 8000770:	e7a4      	b.n	80006bc <__aeabi_fdiv+0x138>
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	03db      	lsls	r3, r3, #15
 8000776:	431c      	orrs	r4, r3
 8000778:	0264      	lsls	r4, r4, #9
 800077a:	0a64      	lsrs	r4, r4, #9
 800077c:	0033      	movs	r3, r6
 800077e:	21ff      	movs	r1, #255	; 0xff
 8000780:	e79c      	b.n	80006bc <__aeabi_fdiv+0x138>
 8000782:	2301      	movs	r3, #1
 8000784:	9a01      	ldr	r2, [sp, #4]
 8000786:	01a4      	lsls	r4, r4, #6
 8000788:	0a64      	lsrs	r4, r4, #9
 800078a:	b2c9      	uxtb	r1, r1
 800078c:	4013      	ands	r3, r2
 800078e:	e795      	b.n	80006bc <__aeabi_fdiv+0x138>
 8000790:	1b1b      	subs	r3, r3, r4
 8000792:	261a      	movs	r6, #26
 8000794:	2101      	movs	r1, #1
 8000796:	e7c2      	b.n	800071e <__aeabi_fdiv+0x19a>
 8000798:	9b00      	ldr	r3, [sp, #0]
 800079a:	468b      	mov	fp, r1
 800079c:	469a      	mov	sl, r3
 800079e:	2400      	movs	r4, #0
 80007a0:	e74c      	b.n	800063c <__aeabi_fdiv+0xb8>
 80007a2:	0263      	lsls	r3, r4, #9
 80007a4:	d5e5      	bpl.n	8000772 <__aeabi_fdiv+0x1ee>
 80007a6:	2500      	movs	r5, #0
 80007a8:	2480      	movs	r4, #128	; 0x80
 80007aa:	03e4      	lsls	r4, r4, #15
 80007ac:	432c      	orrs	r4, r5
 80007ae:	0264      	lsls	r4, r4, #9
 80007b0:	0a64      	lsrs	r4, r4, #9
 80007b2:	9b00      	ldr	r3, [sp, #0]
 80007b4:	21ff      	movs	r1, #255	; 0xff
 80007b6:	e781      	b.n	80006bc <__aeabi_fdiv+0x138>
 80007b8:	9501      	str	r5, [sp, #4]
 80007ba:	e7c1      	b.n	8000740 <__aeabi_fdiv+0x1bc>
 80007bc:	0023      	movs	r3, r4
 80007be:	2020      	movs	r0, #32
 80007c0:	40cb      	lsrs	r3, r1
 80007c2:	1a41      	subs	r1, r0, r1
 80007c4:	408c      	lsls	r4, r1
 80007c6:	1e61      	subs	r1, r4, #1
 80007c8:	418c      	sbcs	r4, r1
 80007ca:	431c      	orrs	r4, r3
 80007cc:	0763      	lsls	r3, r4, #29
 80007ce:	d004      	beq.n	80007da <__aeabi_fdiv+0x256>
 80007d0:	230f      	movs	r3, #15
 80007d2:	4023      	ands	r3, r4
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d000      	beq.n	80007da <__aeabi_fdiv+0x256>
 80007d8:	3404      	adds	r4, #4
 80007da:	0163      	lsls	r3, r4, #5
 80007dc:	d505      	bpl.n	80007ea <__aeabi_fdiv+0x266>
 80007de:	2301      	movs	r3, #1
 80007e0:	9a01      	ldr	r2, [sp, #4]
 80007e2:	2101      	movs	r1, #1
 80007e4:	4013      	ands	r3, r2
 80007e6:	2400      	movs	r4, #0
 80007e8:	e768      	b.n	80006bc <__aeabi_fdiv+0x138>
 80007ea:	2301      	movs	r3, #1
 80007ec:	9a01      	ldr	r2, [sp, #4]
 80007ee:	01a4      	lsls	r4, r4, #6
 80007f0:	0a64      	lsrs	r4, r4, #9
 80007f2:	4013      	ands	r3, r2
 80007f4:	2100      	movs	r1, #0
 80007f6:	e761      	b.n	80006bc <__aeabi_fdiv+0x138>
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	03db      	lsls	r3, r3, #15
 80007fc:	431c      	orrs	r4, r3
 80007fe:	0264      	lsls	r4, r4, #9
 8000800:	0a64      	lsrs	r4, r4, #9
 8000802:	4653      	mov	r3, sl
 8000804:	21ff      	movs	r1, #255	; 0xff
 8000806:	e759      	b.n	80006bc <__aeabi_fdiv+0x138>
 8000808:	080046f8 	.word	0x080046f8
 800080c:	08004738 	.word	0x08004738
 8000810:	f7ffffff 	.word	0xf7ffffff

08000814 <__aeabi_fsub>:
 8000814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000816:	464f      	mov	r7, r9
 8000818:	46d6      	mov	lr, sl
 800081a:	4646      	mov	r6, r8
 800081c:	0044      	lsls	r4, r0, #1
 800081e:	b5c0      	push	{r6, r7, lr}
 8000820:	0fc2      	lsrs	r2, r0, #31
 8000822:	0247      	lsls	r7, r0, #9
 8000824:	0248      	lsls	r0, r1, #9
 8000826:	0a40      	lsrs	r0, r0, #9
 8000828:	4684      	mov	ip, r0
 800082a:	4666      	mov	r6, ip
 800082c:	0a7b      	lsrs	r3, r7, #9
 800082e:	0048      	lsls	r0, r1, #1
 8000830:	0fc9      	lsrs	r1, r1, #31
 8000832:	469a      	mov	sl, r3
 8000834:	0e24      	lsrs	r4, r4, #24
 8000836:	0015      	movs	r5, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	0e00      	lsrs	r0, r0, #24
 800083c:	4689      	mov	r9, r1
 800083e:	00f6      	lsls	r6, r6, #3
 8000840:	28ff      	cmp	r0, #255	; 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fsub+0x32>
 8000844:	e08f      	b.n	8000966 <__aeabi_fsub+0x152>
 8000846:	2101      	movs	r1, #1
 8000848:	464f      	mov	r7, r9
 800084a:	404f      	eors	r7, r1
 800084c:	0039      	movs	r1, r7
 800084e:	4291      	cmp	r1, r2
 8000850:	d066      	beq.n	8000920 <__aeabi_fsub+0x10c>
 8000852:	1a22      	subs	r2, r4, r0
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_fsub+0x46>
 8000858:	e09d      	b.n	8000996 <__aeabi_fsub+0x182>
 800085a:	2800      	cmp	r0, #0
 800085c:	d13d      	bne.n	80008da <__aeabi_fsub+0xc6>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x50>
 8000862:	e08b      	b.n	800097c <__aeabi_fsub+0x168>
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	2900      	cmp	r1, #0
 8000868:	d000      	beq.n	800086c <__aeabi_fsub+0x58>
 800086a:	e0b5      	b.n	80009d8 <__aeabi_fsub+0x1c4>
 800086c:	2401      	movs	r4, #1
 800086e:	1b9b      	subs	r3, r3, r6
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d544      	bpl.n	80008fe <__aeabi_fsub+0xea>
 8000874:	019b      	lsls	r3, r3, #6
 8000876:	099f      	lsrs	r7, r3, #6
 8000878:	0038      	movs	r0, r7
 800087a:	f000 fa11 	bl	8000ca0 <__clzsi2>
 800087e:	3805      	subs	r0, #5
 8000880:	4087      	lsls	r7, r0
 8000882:	4284      	cmp	r4, r0
 8000884:	dd00      	ble.n	8000888 <__aeabi_fsub+0x74>
 8000886:	e096      	b.n	80009b6 <__aeabi_fsub+0x1a2>
 8000888:	1b04      	subs	r4, r0, r4
 800088a:	003a      	movs	r2, r7
 800088c:	2020      	movs	r0, #32
 800088e:	3401      	adds	r4, #1
 8000890:	40e2      	lsrs	r2, r4
 8000892:	1b04      	subs	r4, r0, r4
 8000894:	40a7      	lsls	r7, r4
 8000896:	003b      	movs	r3, r7
 8000898:	1e5f      	subs	r7, r3, #1
 800089a:	41bb      	sbcs	r3, r7
 800089c:	2400      	movs	r4, #0
 800089e:	4313      	orrs	r3, r2
 80008a0:	075a      	lsls	r2, r3, #29
 80008a2:	d004      	beq.n	80008ae <__aeabi_fsub+0x9a>
 80008a4:	220f      	movs	r2, #15
 80008a6:	401a      	ands	r2, r3
 80008a8:	2a04      	cmp	r2, #4
 80008aa:	d000      	beq.n	80008ae <__aeabi_fsub+0x9a>
 80008ac:	3304      	adds	r3, #4
 80008ae:	015a      	lsls	r2, r3, #5
 80008b0:	d527      	bpl.n	8000902 <__aeabi_fsub+0xee>
 80008b2:	3401      	adds	r4, #1
 80008b4:	2cff      	cmp	r4, #255	; 0xff
 80008b6:	d100      	bne.n	80008ba <__aeabi_fsub+0xa6>
 80008b8:	e079      	b.n	80009ae <__aeabi_fsub+0x19a>
 80008ba:	2201      	movs	r2, #1
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	0a5b      	lsrs	r3, r3, #9
 80008c0:	b2e4      	uxtb	r4, r4
 80008c2:	402a      	ands	r2, r5
 80008c4:	025b      	lsls	r3, r3, #9
 80008c6:	05e4      	lsls	r4, r4, #23
 80008c8:	0a58      	lsrs	r0, r3, #9
 80008ca:	07d2      	lsls	r2, r2, #31
 80008cc:	4320      	orrs	r0, r4
 80008ce:	4310      	orrs	r0, r2
 80008d0:	bc1c      	pop	{r2, r3, r4}
 80008d2:	4690      	mov	r8, r2
 80008d4:	4699      	mov	r9, r3
 80008d6:	46a2      	mov	sl, r4
 80008d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008da:	2cff      	cmp	r4, #255	; 0xff
 80008dc:	d0e0      	beq.n	80008a0 <__aeabi_fsub+0x8c>
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	04c9      	lsls	r1, r1, #19
 80008e2:	430e      	orrs	r6, r1
 80008e4:	2a1b      	cmp	r2, #27
 80008e6:	dc7b      	bgt.n	80009e0 <__aeabi_fsub+0x1cc>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	1e72      	subs	r2, r6, #1
 80008f4:	4196      	sbcs	r6, r2
 80008f6:	430e      	orrs	r6, r1
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	015a      	lsls	r2, r3, #5
 80008fc:	d4ba      	bmi.n	8000874 <__aeabi_fsub+0x60>
 80008fe:	075a      	lsls	r2, r3, #29
 8000900:	d1d0      	bne.n	80008a4 <__aeabi_fsub+0x90>
 8000902:	2201      	movs	r2, #1
 8000904:	08df      	lsrs	r7, r3, #3
 8000906:	402a      	ands	r2, r5
 8000908:	2cff      	cmp	r4, #255	; 0xff
 800090a:	d133      	bne.n	8000974 <__aeabi_fsub+0x160>
 800090c:	2f00      	cmp	r7, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_fsub+0xfe>
 8000910:	e0a8      	b.n	8000a64 <__aeabi_fsub+0x250>
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	03db      	lsls	r3, r3, #15
 8000916:	433b      	orrs	r3, r7
 8000918:	025b      	lsls	r3, r3, #9
 800091a:	0a5b      	lsrs	r3, r3, #9
 800091c:	24ff      	movs	r4, #255	; 0xff
 800091e:	e7d1      	b.n	80008c4 <__aeabi_fsub+0xb0>
 8000920:	1a21      	subs	r1, r4, r0
 8000922:	2900      	cmp	r1, #0
 8000924:	dd4c      	ble.n	80009c0 <__aeabi_fsub+0x1ac>
 8000926:	2800      	cmp	r0, #0
 8000928:	d02a      	beq.n	8000980 <__aeabi_fsub+0x16c>
 800092a:	2cff      	cmp	r4, #255	; 0xff
 800092c:	d0b8      	beq.n	80008a0 <__aeabi_fsub+0x8c>
 800092e:	2080      	movs	r0, #128	; 0x80
 8000930:	04c0      	lsls	r0, r0, #19
 8000932:	4306      	orrs	r6, r0
 8000934:	291b      	cmp	r1, #27
 8000936:	dd00      	ble.n	800093a <__aeabi_fsub+0x126>
 8000938:	e0af      	b.n	8000a9a <__aeabi_fsub+0x286>
 800093a:	0030      	movs	r0, r6
 800093c:	2720      	movs	r7, #32
 800093e:	40c8      	lsrs	r0, r1
 8000940:	1a79      	subs	r1, r7, r1
 8000942:	408e      	lsls	r6, r1
 8000944:	1e71      	subs	r1, r6, #1
 8000946:	418e      	sbcs	r6, r1
 8000948:	4306      	orrs	r6, r0
 800094a:	199b      	adds	r3, r3, r6
 800094c:	0159      	lsls	r1, r3, #5
 800094e:	d5d6      	bpl.n	80008fe <__aeabi_fsub+0xea>
 8000950:	3401      	adds	r4, #1
 8000952:	2cff      	cmp	r4, #255	; 0xff
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x144>
 8000956:	e085      	b.n	8000a64 <__aeabi_fsub+0x250>
 8000958:	2201      	movs	r2, #1
 800095a:	497a      	ldr	r1, [pc, #488]	; (8000b44 <__aeabi_fsub+0x330>)
 800095c:	401a      	ands	r2, r3
 800095e:	085b      	lsrs	r3, r3, #1
 8000960:	400b      	ands	r3, r1
 8000962:	4313      	orrs	r3, r2
 8000964:	e79c      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000966:	2e00      	cmp	r6, #0
 8000968:	d000      	beq.n	800096c <__aeabi_fsub+0x158>
 800096a:	e770      	b.n	800084e <__aeabi_fsub+0x3a>
 800096c:	e76b      	b.n	8000846 <__aeabi_fsub+0x32>
 800096e:	1e3b      	subs	r3, r7, #0
 8000970:	d1c5      	bne.n	80008fe <__aeabi_fsub+0xea>
 8000972:	2200      	movs	r2, #0
 8000974:	027b      	lsls	r3, r7, #9
 8000976:	0a5b      	lsrs	r3, r3, #9
 8000978:	b2e4      	uxtb	r4, r4
 800097a:	e7a3      	b.n	80008c4 <__aeabi_fsub+0xb0>
 800097c:	0014      	movs	r4, r2
 800097e:	e78f      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000980:	2e00      	cmp	r6, #0
 8000982:	d04d      	beq.n	8000a20 <__aeabi_fsub+0x20c>
 8000984:	1e48      	subs	r0, r1, #1
 8000986:	2800      	cmp	r0, #0
 8000988:	d157      	bne.n	8000a3a <__aeabi_fsub+0x226>
 800098a:	199b      	adds	r3, r3, r6
 800098c:	2401      	movs	r4, #1
 800098e:	015a      	lsls	r2, r3, #5
 8000990:	d5b5      	bpl.n	80008fe <__aeabi_fsub+0xea>
 8000992:	2402      	movs	r4, #2
 8000994:	e7e0      	b.n	8000958 <__aeabi_fsub+0x144>
 8000996:	2a00      	cmp	r2, #0
 8000998:	d125      	bne.n	80009e6 <__aeabi_fsub+0x1d2>
 800099a:	1c62      	adds	r2, r4, #1
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	2a01      	cmp	r2, #1
 80009a0:	dd72      	ble.n	8000a88 <__aeabi_fsub+0x274>
 80009a2:	1b9f      	subs	r7, r3, r6
 80009a4:	017a      	lsls	r2, r7, #5
 80009a6:	d535      	bpl.n	8000a14 <__aeabi_fsub+0x200>
 80009a8:	1af7      	subs	r7, r6, r3
 80009aa:	000d      	movs	r5, r1
 80009ac:	e764      	b.n	8000878 <__aeabi_fsub+0x64>
 80009ae:	2201      	movs	r2, #1
 80009b0:	2300      	movs	r3, #0
 80009b2:	402a      	ands	r2, r5
 80009b4:	e786      	b.n	80008c4 <__aeabi_fsub+0xb0>
 80009b6:	003b      	movs	r3, r7
 80009b8:	4a63      	ldr	r2, [pc, #396]	; (8000b48 <__aeabi_fsub+0x334>)
 80009ba:	1a24      	subs	r4, r4, r0
 80009bc:	4013      	ands	r3, r2
 80009be:	e76f      	b.n	80008a0 <__aeabi_fsub+0x8c>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	d16c      	bne.n	8000a9e <__aeabi_fsub+0x28a>
 80009c4:	1c61      	adds	r1, r4, #1
 80009c6:	b2c8      	uxtb	r0, r1
 80009c8:	2801      	cmp	r0, #1
 80009ca:	dd4e      	ble.n	8000a6a <__aeabi_fsub+0x256>
 80009cc:	29ff      	cmp	r1, #255	; 0xff
 80009ce:	d049      	beq.n	8000a64 <__aeabi_fsub+0x250>
 80009d0:	199b      	adds	r3, r3, r6
 80009d2:	085b      	lsrs	r3, r3, #1
 80009d4:	000c      	movs	r4, r1
 80009d6:	e763      	b.n	80008a0 <__aeabi_fsub+0x8c>
 80009d8:	2aff      	cmp	r2, #255	; 0xff
 80009da:	d041      	beq.n	8000a60 <__aeabi_fsub+0x24c>
 80009dc:	000a      	movs	r2, r1
 80009de:	e781      	b.n	80008e4 <__aeabi_fsub+0xd0>
 80009e0:	2601      	movs	r6, #1
 80009e2:	1b9b      	subs	r3, r3, r6
 80009e4:	e789      	b.n	80008fa <__aeabi_fsub+0xe6>
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d01c      	beq.n	8000a24 <__aeabi_fsub+0x210>
 80009ea:	28ff      	cmp	r0, #255	; 0xff
 80009ec:	d021      	beq.n	8000a32 <__aeabi_fsub+0x21e>
 80009ee:	2480      	movs	r4, #128	; 0x80
 80009f0:	04e4      	lsls	r4, r4, #19
 80009f2:	4252      	negs	r2, r2
 80009f4:	4323      	orrs	r3, r4
 80009f6:	2a1b      	cmp	r2, #27
 80009f8:	dd00      	ble.n	80009fc <__aeabi_fsub+0x1e8>
 80009fa:	e096      	b.n	8000b2a <__aeabi_fsub+0x316>
 80009fc:	001c      	movs	r4, r3
 80009fe:	2520      	movs	r5, #32
 8000a00:	40d4      	lsrs	r4, r2
 8000a02:	1aaa      	subs	r2, r5, r2
 8000a04:	4093      	lsls	r3, r2
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	4193      	sbcs	r3, r2
 8000a0a:	4323      	orrs	r3, r4
 8000a0c:	1af3      	subs	r3, r6, r3
 8000a0e:	0004      	movs	r4, r0
 8000a10:	000d      	movs	r5, r1
 8000a12:	e72d      	b.n	8000870 <__aeabi_fsub+0x5c>
 8000a14:	2f00      	cmp	r7, #0
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fsub+0x206>
 8000a18:	e72e      	b.n	8000878 <__aeabi_fsub+0x64>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	e7a9      	b.n	8000974 <__aeabi_fsub+0x160>
 8000a20:	000c      	movs	r4, r1
 8000a22:	e73d      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d058      	beq.n	8000ada <__aeabi_fsub+0x2c6>
 8000a28:	43d2      	mvns	r2, r2
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d0ee      	beq.n	8000a0c <__aeabi_fsub+0x1f8>
 8000a2e:	28ff      	cmp	r0, #255	; 0xff
 8000a30:	d1e1      	bne.n	80009f6 <__aeabi_fsub+0x1e2>
 8000a32:	0033      	movs	r3, r6
 8000a34:	24ff      	movs	r4, #255	; 0xff
 8000a36:	000d      	movs	r5, r1
 8000a38:	e732      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000a3a:	29ff      	cmp	r1, #255	; 0xff
 8000a3c:	d010      	beq.n	8000a60 <__aeabi_fsub+0x24c>
 8000a3e:	0001      	movs	r1, r0
 8000a40:	e778      	b.n	8000934 <__aeabi_fsub+0x120>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d06e      	beq.n	8000b24 <__aeabi_fsub+0x310>
 8000a46:	24ff      	movs	r4, #255	; 0xff
 8000a48:	2e00      	cmp	r6, #0
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fsub+0x23a>
 8000a4c:	e728      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	4651      	mov	r1, sl
 8000a52:	03d2      	lsls	r2, r2, #15
 8000a54:	4211      	tst	r1, r2
 8000a56:	d003      	beq.n	8000a60 <__aeabi_fsub+0x24c>
 8000a58:	4661      	mov	r1, ip
 8000a5a:	4211      	tst	r1, r2
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fsub+0x24c>
 8000a5e:	0033      	movs	r3, r6
 8000a60:	24ff      	movs	r4, #255	; 0xff
 8000a62:	e71d      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000a64:	24ff      	movs	r4, #255	; 0xff
 8000a66:	2300      	movs	r3, #0
 8000a68:	e72c      	b.n	80008c4 <__aeabi_fsub+0xb0>
 8000a6a:	2c00      	cmp	r4, #0
 8000a6c:	d1e9      	bne.n	8000a42 <__aeabi_fsub+0x22e>
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d063      	beq.n	8000b3a <__aeabi_fsub+0x326>
 8000a72:	2e00      	cmp	r6, #0
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fsub+0x264>
 8000a76:	e713      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000a78:	199b      	adds	r3, r3, r6
 8000a7a:	015a      	lsls	r2, r3, #5
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_fsub+0x26c>
 8000a7e:	e73e      	b.n	80008fe <__aeabi_fsub+0xea>
 8000a80:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <__aeabi_fsub+0x334>)
 8000a82:	000c      	movs	r4, r1
 8000a84:	4013      	ands	r3, r2
 8000a86:	e70b      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	d11e      	bne.n	8000aca <__aeabi_fsub+0x2b6>
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d12f      	bne.n	8000af0 <__aeabi_fsub+0x2dc>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d04f      	beq.n	8000b34 <__aeabi_fsub+0x320>
 8000a94:	0033      	movs	r3, r6
 8000a96:	000d      	movs	r5, r1
 8000a98:	e702      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000a9a:	2601      	movs	r6, #1
 8000a9c:	e755      	b.n	800094a <__aeabi_fsub+0x136>
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d11f      	bne.n	8000ae2 <__aeabi_fsub+0x2ce>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d043      	beq.n	8000b2e <__aeabi_fsub+0x31a>
 8000aa6:	43c9      	mvns	r1, r1
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d00b      	beq.n	8000ac4 <__aeabi_fsub+0x2b0>
 8000aac:	28ff      	cmp	r0, #255	; 0xff
 8000aae:	d039      	beq.n	8000b24 <__aeabi_fsub+0x310>
 8000ab0:	291b      	cmp	r1, #27
 8000ab2:	dc44      	bgt.n	8000b3e <__aeabi_fsub+0x32a>
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	2720      	movs	r7, #32
 8000ab8:	40cc      	lsrs	r4, r1
 8000aba:	1a79      	subs	r1, r7, r1
 8000abc:	408b      	lsls	r3, r1
 8000abe:	1e59      	subs	r1, r3, #1
 8000ac0:	418b      	sbcs	r3, r1
 8000ac2:	4323      	orrs	r3, r4
 8000ac4:	199b      	adds	r3, r3, r6
 8000ac6:	0004      	movs	r4, r0
 8000ac8:	e740      	b.n	800094c <__aeabi_fsub+0x138>
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d11a      	bne.n	8000b04 <__aeabi_fsub+0x2f0>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d124      	bne.n	8000b1c <__aeabi_fsub+0x308>
 8000ad2:	2780      	movs	r7, #128	; 0x80
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	03ff      	lsls	r7, r7, #15
 8000ad8:	e71b      	b.n	8000912 <__aeabi_fsub+0xfe>
 8000ada:	0033      	movs	r3, r6
 8000adc:	0004      	movs	r4, r0
 8000ade:	000d      	movs	r5, r1
 8000ae0:	e6de      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000ae2:	28ff      	cmp	r0, #255	; 0xff
 8000ae4:	d01e      	beq.n	8000b24 <__aeabi_fsub+0x310>
 8000ae6:	2480      	movs	r4, #128	; 0x80
 8000ae8:	04e4      	lsls	r4, r4, #19
 8000aea:	4249      	negs	r1, r1
 8000aec:	4323      	orrs	r3, r4
 8000aee:	e7df      	b.n	8000ab0 <__aeabi_fsub+0x29c>
 8000af0:	2e00      	cmp	r6, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_fsub+0x2e2>
 8000af4:	e6d4      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000af6:	1b9f      	subs	r7, r3, r6
 8000af8:	017a      	lsls	r2, r7, #5
 8000afa:	d400      	bmi.n	8000afe <__aeabi_fsub+0x2ea>
 8000afc:	e737      	b.n	800096e <__aeabi_fsub+0x15a>
 8000afe:	1af3      	subs	r3, r6, r3
 8000b00:	000d      	movs	r5, r1
 8000b02:	e6cd      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000b04:	24ff      	movs	r4, #255	; 0xff
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_fsub+0x2f8>
 8000b0a:	e6c9      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	4650      	mov	r0, sl
 8000b10:	03d2      	lsls	r2, r2, #15
 8000b12:	4210      	tst	r0, r2
 8000b14:	d0a4      	beq.n	8000a60 <__aeabi_fsub+0x24c>
 8000b16:	4660      	mov	r0, ip
 8000b18:	4210      	tst	r0, r2
 8000b1a:	d1a1      	bne.n	8000a60 <__aeabi_fsub+0x24c>
 8000b1c:	0033      	movs	r3, r6
 8000b1e:	000d      	movs	r5, r1
 8000b20:	24ff      	movs	r4, #255	; 0xff
 8000b22:	e6bd      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000b24:	0033      	movs	r3, r6
 8000b26:	24ff      	movs	r4, #255	; 0xff
 8000b28:	e6ba      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e76e      	b.n	8000a0c <__aeabi_fsub+0x1f8>
 8000b2e:	0033      	movs	r3, r6
 8000b30:	0004      	movs	r4, r0
 8000b32:	e6b5      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000b34:	2700      	movs	r7, #0
 8000b36:	2200      	movs	r2, #0
 8000b38:	e71c      	b.n	8000974 <__aeabi_fsub+0x160>
 8000b3a:	0033      	movs	r3, r6
 8000b3c:	e6b0      	b.n	80008a0 <__aeabi_fsub+0x8c>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e7c0      	b.n	8000ac4 <__aeabi_fsub+0x2b0>
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	7dffffff 	.word	0x7dffffff
 8000b48:	fbffffff 	.word	0xfbffffff

08000b4c <__aeabi_f2iz>:
 8000b4c:	0241      	lsls	r1, r0, #9
 8000b4e:	0043      	lsls	r3, r0, #1
 8000b50:	0fc2      	lsrs	r2, r0, #31
 8000b52:	0a49      	lsrs	r1, r1, #9
 8000b54:	0e1b      	lsrs	r3, r3, #24
 8000b56:	2000      	movs	r0, #0
 8000b58:	2b7e      	cmp	r3, #126	; 0x7e
 8000b5a:	dd0d      	ble.n	8000b78 <__aeabi_f2iz+0x2c>
 8000b5c:	2b9d      	cmp	r3, #157	; 0x9d
 8000b5e:	dc0c      	bgt.n	8000b7a <__aeabi_f2iz+0x2e>
 8000b60:	2080      	movs	r0, #128	; 0x80
 8000b62:	0400      	lsls	r0, r0, #16
 8000b64:	4301      	orrs	r1, r0
 8000b66:	2b95      	cmp	r3, #149	; 0x95
 8000b68:	dc0a      	bgt.n	8000b80 <__aeabi_f2iz+0x34>
 8000b6a:	2096      	movs	r0, #150	; 0x96
 8000b6c:	1ac3      	subs	r3, r0, r3
 8000b6e:	40d9      	lsrs	r1, r3
 8000b70:	4248      	negs	r0, r1
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_f2iz+0x2c>
 8000b76:	0008      	movs	r0, r1
 8000b78:	4770      	bx	lr
 8000b7a:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <__aeabi_f2iz+0x3c>)
 8000b7c:	18d0      	adds	r0, r2, r3
 8000b7e:	e7fb      	b.n	8000b78 <__aeabi_f2iz+0x2c>
 8000b80:	3b96      	subs	r3, #150	; 0x96
 8000b82:	4099      	lsls	r1, r3
 8000b84:	e7f4      	b.n	8000b70 <__aeabi_f2iz+0x24>
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	7fffffff 	.word	0x7fffffff

08000b8c <__aeabi_i2f>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d030      	beq.n	8000bf4 <__aeabi_i2f+0x68>
 8000b92:	17c3      	asrs	r3, r0, #31
 8000b94:	18c4      	adds	r4, r0, r3
 8000b96:	405c      	eors	r4, r3
 8000b98:	0fc5      	lsrs	r5, r0, #31
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	f000 f880 	bl	8000ca0 <__clzsi2>
 8000ba0:	239e      	movs	r3, #158	; 0x9e
 8000ba2:	1a1b      	subs	r3, r3, r0
 8000ba4:	2b96      	cmp	r3, #150	; 0x96
 8000ba6:	dc0d      	bgt.n	8000bc4 <__aeabi_i2f+0x38>
 8000ba8:	2296      	movs	r2, #150	; 0x96
 8000baa:	1ad2      	subs	r2, r2, r3
 8000bac:	4094      	lsls	r4, r2
 8000bae:	002a      	movs	r2, r5
 8000bb0:	0264      	lsls	r4, r4, #9
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	0264      	lsls	r4, r4, #9
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	0a60      	lsrs	r0, r4, #9
 8000bbc:	07d2      	lsls	r2, r2, #31
 8000bbe:	4318      	orrs	r0, r3
 8000bc0:	4310      	orrs	r0, r2
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	2b99      	cmp	r3, #153	; 0x99
 8000bc6:	dc19      	bgt.n	8000bfc <__aeabi_i2f+0x70>
 8000bc8:	2299      	movs	r2, #153	; 0x99
 8000bca:	1ad2      	subs	r2, r2, r3
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	dd29      	ble.n	8000c24 <__aeabi_i2f+0x98>
 8000bd0:	4094      	lsls	r4, r2
 8000bd2:	0022      	movs	r2, r4
 8000bd4:	4c14      	ldr	r4, [pc, #80]	; (8000c28 <__aeabi_i2f+0x9c>)
 8000bd6:	4014      	ands	r4, r2
 8000bd8:	0751      	lsls	r1, r2, #29
 8000bda:	d004      	beq.n	8000be6 <__aeabi_i2f+0x5a>
 8000bdc:	210f      	movs	r1, #15
 8000bde:	400a      	ands	r2, r1
 8000be0:	2a04      	cmp	r2, #4
 8000be2:	d000      	beq.n	8000be6 <__aeabi_i2f+0x5a>
 8000be4:	3404      	adds	r4, #4
 8000be6:	0162      	lsls	r2, r4, #5
 8000be8:	d413      	bmi.n	8000c12 <__aeabi_i2f+0x86>
 8000bea:	01a4      	lsls	r4, r4, #6
 8000bec:	0a64      	lsrs	r4, r4, #9
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	002a      	movs	r2, r5
 8000bf2:	e7e0      	b.n	8000bb6 <__aeabi_i2f+0x2a>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	e7dc      	b.n	8000bb6 <__aeabi_i2f+0x2a>
 8000bfc:	2205      	movs	r2, #5
 8000bfe:	0021      	movs	r1, r4
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	40d1      	lsrs	r1, r2
 8000c04:	22b9      	movs	r2, #185	; 0xb9
 8000c06:	1ad2      	subs	r2, r2, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	1e62      	subs	r2, r4, #1
 8000c0c:	4194      	sbcs	r4, r2
 8000c0e:	430c      	orrs	r4, r1
 8000c10:	e7da      	b.n	8000bc8 <__aeabi_i2f+0x3c>
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <__aeabi_i2f+0x9c>)
 8000c14:	002a      	movs	r2, r5
 8000c16:	401c      	ands	r4, r3
 8000c18:	239f      	movs	r3, #159	; 0x9f
 8000c1a:	01a4      	lsls	r4, r4, #6
 8000c1c:	1a1b      	subs	r3, r3, r0
 8000c1e:	0a64      	lsrs	r4, r4, #9
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	e7c8      	b.n	8000bb6 <__aeabi_i2f+0x2a>
 8000c24:	0022      	movs	r2, r4
 8000c26:	e7d5      	b.n	8000bd4 <__aeabi_i2f+0x48>
 8000c28:	fbffffff 	.word	0xfbffffff

08000c2c <__aeabi_cfrcmple>:
 8000c2c:	4684      	mov	ip, r0
 8000c2e:	1c08      	adds	r0, r1, #0
 8000c30:	4661      	mov	r1, ip
 8000c32:	e7ff      	b.n	8000c34 <__aeabi_cfcmpeq>

08000c34 <__aeabi_cfcmpeq>:
 8000c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c36:	f000 f8b7 	bl	8000da8 <__lesf2>
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d401      	bmi.n	8000c42 <__aeabi_cfcmpeq+0xe>
 8000c3e:	2100      	movs	r1, #0
 8000c40:	42c8      	cmn	r0, r1
 8000c42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000c44 <__aeabi_fcmpeq>:
 8000c44:	b510      	push	{r4, lr}
 8000c46:	f000 f849 	bl	8000cdc <__eqsf2>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	3001      	adds	r0, #1
 8000c4e:	bd10      	pop	{r4, pc}

08000c50 <__aeabi_fcmplt>:
 8000c50:	b510      	push	{r4, lr}
 8000c52:	f000 f8a9 	bl	8000da8 <__lesf2>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	db01      	blt.n	8000c5e <__aeabi_fcmplt+0xe>
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	bd10      	pop	{r4, pc}
 8000c5e:	2001      	movs	r0, #1
 8000c60:	bd10      	pop	{r4, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)

08000c64 <__aeabi_fcmple>:
 8000c64:	b510      	push	{r4, lr}
 8000c66:	f000 f89f 	bl	8000da8 <__lesf2>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	dd01      	ble.n	8000c72 <__aeabi_fcmple+0xe>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	bd10      	pop	{r4, pc}
 8000c72:	2001      	movs	r0, #1
 8000c74:	bd10      	pop	{r4, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)

08000c78 <__aeabi_fcmpgt>:
 8000c78:	b510      	push	{r4, lr}
 8000c7a:	f000 f855 	bl	8000d28 <__gesf2>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	dc01      	bgt.n	8000c86 <__aeabi_fcmpgt+0xe>
 8000c82:	2000      	movs	r0, #0
 8000c84:	bd10      	pop	{r4, pc}
 8000c86:	2001      	movs	r0, #1
 8000c88:	bd10      	pop	{r4, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)

08000c8c <__aeabi_fcmpge>:
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	f000 f84b 	bl	8000d28 <__gesf2>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	da01      	bge.n	8000c9a <__aeabi_fcmpge+0xe>
 8000c96:	2000      	movs	r0, #0
 8000c98:	bd10      	pop	{r4, pc}
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	bd10      	pop	{r4, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)

08000ca0 <__clzsi2>:
 8000ca0:	211c      	movs	r1, #28
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	4298      	cmp	r0, r3
 8000ca8:	d301      	bcc.n	8000cae <__clzsi2+0xe>
 8000caa:	0c00      	lsrs	r0, r0, #16
 8000cac:	3910      	subs	r1, #16
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	d301      	bcc.n	8000cb8 <__clzsi2+0x18>
 8000cb4:	0a00      	lsrs	r0, r0, #8
 8000cb6:	3908      	subs	r1, #8
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	4298      	cmp	r0, r3
 8000cbc:	d301      	bcc.n	8000cc2 <__clzsi2+0x22>
 8000cbe:	0900      	lsrs	r0, r0, #4
 8000cc0:	3904      	subs	r1, #4
 8000cc2:	a202      	add	r2, pc, #8	; (adr r2, 8000ccc <__clzsi2+0x2c>)
 8000cc4:	5c10      	ldrb	r0, [r2, r0]
 8000cc6:	1840      	adds	r0, r0, r1
 8000cc8:	4770      	bx	lr
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	02020304 	.word	0x02020304
 8000cd0:	01010101 	.word	0x01010101
	...

08000cdc <__eqsf2>:
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	0042      	lsls	r2, r0, #1
 8000ce0:	0245      	lsls	r5, r0, #9
 8000ce2:	024e      	lsls	r6, r1, #9
 8000ce4:	004c      	lsls	r4, r1, #1
 8000ce6:	0fc3      	lsrs	r3, r0, #31
 8000ce8:	0a6d      	lsrs	r5, r5, #9
 8000cea:	0e12      	lsrs	r2, r2, #24
 8000cec:	0a76      	lsrs	r6, r6, #9
 8000cee:	0e24      	lsrs	r4, r4, #24
 8000cf0:	0fc9      	lsrs	r1, r1, #31
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	2aff      	cmp	r2, #255	; 0xff
 8000cf6:	d006      	beq.n	8000d06 <__eqsf2+0x2a>
 8000cf8:	2cff      	cmp	r4, #255	; 0xff
 8000cfa:	d003      	beq.n	8000d04 <__eqsf2+0x28>
 8000cfc:	42a2      	cmp	r2, r4
 8000cfe:	d101      	bne.n	8000d04 <__eqsf2+0x28>
 8000d00:	42b5      	cmp	r5, r6
 8000d02:	d006      	beq.n	8000d12 <__eqsf2+0x36>
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d1fc      	bne.n	8000d04 <__eqsf2+0x28>
 8000d0a:	2cff      	cmp	r4, #255	; 0xff
 8000d0c:	d1fa      	bne.n	8000d04 <__eqsf2+0x28>
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d1f8      	bne.n	8000d04 <__eqsf2+0x28>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d006      	beq.n	8000d24 <__eqsf2+0x48>
 8000d16:	2001      	movs	r0, #1
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	d1f3      	bne.n	8000d04 <__eqsf2+0x28>
 8000d1c:	0028      	movs	r0, r5
 8000d1e:	1e45      	subs	r5, r0, #1
 8000d20:	41a8      	sbcs	r0, r5
 8000d22:	e7ef      	b.n	8000d04 <__eqsf2+0x28>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e7ed      	b.n	8000d04 <__eqsf2+0x28>

08000d28 <__gesf2>:
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	0042      	lsls	r2, r0, #1
 8000d2c:	0245      	lsls	r5, r0, #9
 8000d2e:	024c      	lsls	r4, r1, #9
 8000d30:	0fc3      	lsrs	r3, r0, #31
 8000d32:	0048      	lsls	r0, r1, #1
 8000d34:	0a6d      	lsrs	r5, r5, #9
 8000d36:	0e12      	lsrs	r2, r2, #24
 8000d38:	0a64      	lsrs	r4, r4, #9
 8000d3a:	0e00      	lsrs	r0, r0, #24
 8000d3c:	0fc9      	lsrs	r1, r1, #31
 8000d3e:	2aff      	cmp	r2, #255	; 0xff
 8000d40:	d01e      	beq.n	8000d80 <__gesf2+0x58>
 8000d42:	28ff      	cmp	r0, #255	; 0xff
 8000d44:	d021      	beq.n	8000d8a <__gesf2+0x62>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d10a      	bne.n	8000d60 <__gesf2+0x38>
 8000d4a:	426e      	negs	r6, r5
 8000d4c:	416e      	adcs	r6, r5
 8000d4e:	b2f6      	uxtb	r6, r6
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d10f      	bne.n	8000d74 <__gesf2+0x4c>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d10d      	bne.n	8000d74 <__gesf2+0x4c>
 8000d58:	2000      	movs	r0, #0
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d009      	beq.n	8000d72 <__gesf2+0x4a>
 8000d5e:	e005      	b.n	8000d6c <__gesf2+0x44>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d101      	bne.n	8000d68 <__gesf2+0x40>
 8000d64:	2c00      	cmp	r4, #0
 8000d66:	d001      	beq.n	8000d6c <__gesf2+0x44>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d011      	beq.n	8000d90 <__gesf2+0x68>
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4258      	negs	r0, r3
 8000d70:	4308      	orrs	r0, r1
 8000d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d0f7      	beq.n	8000d68 <__gesf2+0x40>
 8000d78:	2001      	movs	r0, #1
 8000d7a:	3901      	subs	r1, #1
 8000d7c:	4308      	orrs	r0, r1
 8000d7e:	e7f8      	b.n	8000d72 <__gesf2+0x4a>
 8000d80:	2d00      	cmp	r5, #0
 8000d82:	d0de      	beq.n	8000d42 <__gesf2+0x1a>
 8000d84:	2002      	movs	r0, #2
 8000d86:	4240      	negs	r0, r0
 8000d88:	e7f3      	b.n	8000d72 <__gesf2+0x4a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d0db      	beq.n	8000d46 <__gesf2+0x1e>
 8000d8e:	e7f9      	b.n	8000d84 <__gesf2+0x5c>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	dceb      	bgt.n	8000d6c <__gesf2+0x44>
 8000d94:	db04      	blt.n	8000da0 <__gesf2+0x78>
 8000d96:	42a5      	cmp	r5, r4
 8000d98:	d8e8      	bhi.n	8000d6c <__gesf2+0x44>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	d2e8      	bcs.n	8000d72 <__gesf2+0x4a>
 8000da0:	2101      	movs	r1, #1
 8000da2:	1e58      	subs	r0, r3, #1
 8000da4:	4308      	orrs	r0, r1
 8000da6:	e7e4      	b.n	8000d72 <__gesf2+0x4a>

08000da8 <__lesf2>:
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	0042      	lsls	r2, r0, #1
 8000dac:	024d      	lsls	r5, r1, #9
 8000dae:	004c      	lsls	r4, r1, #1
 8000db0:	0246      	lsls	r6, r0, #9
 8000db2:	0a76      	lsrs	r6, r6, #9
 8000db4:	0e12      	lsrs	r2, r2, #24
 8000db6:	0fc3      	lsrs	r3, r0, #31
 8000db8:	0a6d      	lsrs	r5, r5, #9
 8000dba:	0e24      	lsrs	r4, r4, #24
 8000dbc:	0fc9      	lsrs	r1, r1, #31
 8000dbe:	2aff      	cmp	r2, #255	; 0xff
 8000dc0:	d016      	beq.n	8000df0 <__lesf2+0x48>
 8000dc2:	2cff      	cmp	r4, #255	; 0xff
 8000dc4:	d018      	beq.n	8000df8 <__lesf2+0x50>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d10a      	bne.n	8000de0 <__lesf2+0x38>
 8000dca:	4270      	negs	r0, r6
 8000dcc:	4170      	adcs	r0, r6
 8000dce:	b2c0      	uxtb	r0, r0
 8000dd0:	2c00      	cmp	r4, #0
 8000dd2:	d015      	beq.n	8000e00 <__lesf2+0x58>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d005      	beq.n	8000de4 <__lesf2+0x3c>
 8000dd8:	2001      	movs	r0, #1
 8000dda:	3901      	subs	r1, #1
 8000ddc:	4308      	orrs	r0, r1
 8000dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d013      	beq.n	8000e0c <__lesf2+0x64>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d014      	beq.n	8000e12 <__lesf2+0x6a>
 8000de8:	2001      	movs	r0, #1
 8000dea:	425b      	negs	r3, r3
 8000dec:	4318      	orrs	r0, r3
 8000dee:	e7f6      	b.n	8000dde <__lesf2+0x36>
 8000df0:	2002      	movs	r0, #2
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	d1f3      	bne.n	8000dde <__lesf2+0x36>
 8000df6:	e7e4      	b.n	8000dc2 <__lesf2+0x1a>
 8000df8:	2002      	movs	r0, #2
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d1ef      	bne.n	8000dde <__lesf2+0x36>
 8000dfe:	e7e2      	b.n	8000dc6 <__lesf2+0x1e>
 8000e00:	2d00      	cmp	r5, #0
 8000e02:	d1e7      	bne.n	8000dd4 <__lesf2+0x2c>
 8000e04:	2000      	movs	r0, #0
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d0e9      	beq.n	8000dde <__lesf2+0x36>
 8000e0a:	e7ed      	b.n	8000de8 <__lesf2+0x40>
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d1e9      	bne.n	8000de4 <__lesf2+0x3c>
 8000e10:	e7ea      	b.n	8000de8 <__lesf2+0x40>
 8000e12:	42a2      	cmp	r2, r4
 8000e14:	dc06      	bgt.n	8000e24 <__lesf2+0x7c>
 8000e16:	dbdf      	blt.n	8000dd8 <__lesf2+0x30>
 8000e18:	42ae      	cmp	r6, r5
 8000e1a:	d803      	bhi.n	8000e24 <__lesf2+0x7c>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	42ae      	cmp	r6, r5
 8000e20:	d3da      	bcc.n	8000dd8 <__lesf2+0x30>
 8000e22:	e7dc      	b.n	8000dde <__lesf2+0x36>
 8000e24:	2001      	movs	r0, #1
 8000e26:	4249      	negs	r1, r1
 8000e28:	4308      	orrs	r0, r1
 8000e2a:	e7d8      	b.n	8000dde <__lesf2+0x36>

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b510      	push	{r4, lr}
 8000e2e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000e30:	f001 f848 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8000e34:	21fa      	movs	r1, #250	; 0xfa
 8000e36:	0089      	lsls	r1, r1, #2
 8000e38:	f7ff f96e 	bl	8000118 <__udivsi3>
 8000e3c:	f000 fb1e 	bl	800147c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	0021      	movs	r1, r4
 8000e44:	2001      	movs	r0, #1
 8000e46:	4240      	negs	r0, r0
 8000e48:	f000 fadc 	bl	8001404 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	bd10      	pop	{r4, pc}

08000e50 <HAL_Init>:
{
 8000e50:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e52:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_Init+0x1c>)
 8000e54:	6813      	ldr	r3, [r2, #0]
 8000e56:	2110      	movs	r1, #16
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff ffe5 	bl	8000e2c <HAL_InitTick>
  HAL_MspInit();
 8000e62:	f002 fae9 	bl	8003438 <HAL_MspInit>
}
 8000e66:	2000      	movs	r0, #0
 8000e68:	bd10      	pop	{r4, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e70:	4a02      	ldr	r2, [pc, #8]	; (8000e7c <HAL_IncTick+0xc>)
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	4770      	bx	lr
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	20000288 	.word	0x20000288

08000e80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e80:	4b01      	ldr	r3, [pc, #4]	; (8000e88 <HAL_GetTick+0x8>)
 8000e82:	6818      	ldr	r0, [r3, #0]
}
 8000e84:	4770      	bx	lr
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	20000288 	.word	0x20000288

08000e8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b530      	push	{r4, r5, lr}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e96:	6802      	ldr	r2, [r0, #0]
 8000e98:	6891      	ldr	r1, [r2, #8]
 8000e9a:	3303      	adds	r3, #3
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d011      	beq.n	8000ec6 <ADC_Enable+0x3a>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d142      	bne.n	8000f2e <ADC_Enable+0xa2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000ea8:	6891      	ldr	r1, [r2, #8]
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <ADC_Enable+0xa8>)
 8000eac:	4219      	tst	r1, r3
 8000eae:	d116      	bne.n	8000ede <ADC_Enable+0x52>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000eb0:	6893      	ldr	r3, [r2, #8]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <ADC_Enable+0xac>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	491f      	ldr	r1, [pc, #124]	; (8000f3c <ADC_Enable+0xb0>)
 8000ebe:	f7ff f92b 	bl	8000118 <__udivsi3>
 8000ec2:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000ec4:	e018      	b.n	8000ef8 <ADC_Enable+0x6c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ec6:	6813      	ldr	r3, [r2, #0]
 8000ec8:	07db      	lsls	r3, r3, #31
 8000eca:	d404      	bmi.n	8000ed6 <ADC_Enable+0x4a>
 8000ecc:	68d3      	ldr	r3, [r2, #12]
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	d403      	bmi.n	8000eda <ADC_Enable+0x4e>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e7e6      	b.n	8000ea4 <ADC_Enable+0x18>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e7e4      	b.n	8000ea4 <ADC_Enable+0x18>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e7e2      	b.n	8000ea4 <ADC_Enable+0x18>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ede:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ee8:	3a0f      	subs	r2, #15
 8000eea:	4313      	orrs	r3, r2
 8000eec:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000eee:	2001      	movs	r0, #1
 8000ef0:	e01e      	b.n	8000f30 <ADC_Enable+0xa4>
    {
      wait_loop_index--;
 8000ef2:	9b01      	ldr	r3, [sp, #4]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000ef8:	9b01      	ldr	r3, [sp, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f9      	bne.n	8000ef2 <ADC_Enable+0x66>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000efe:	f7ff ffbf 	bl	8000e80 <HAL_GetTick>
 8000f02:	0005      	movs	r5, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	07db      	lsls	r3, r3, #31
 8000f0a:	d40e      	bmi.n	8000f2a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f0c:	f7ff ffb8 	bl	8000e80 <HAL_GetTick>
 8000f10:	1b40      	subs	r0, r0, r5
 8000f12:	2802      	cmp	r0, #2
 8000f14:	d9f6      	bls.n	8000f04 <ADC_Enable+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f18:	2210      	movs	r2, #16
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f20:	3a0f      	subs	r2, #15
 8000f22:	4313      	orrs	r3, r2
 8000f24:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 8000f26:	2001      	movs	r0, #1
 8000f28:	e002      	b.n	8000f30 <ADC_Enable+0xa4>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	e000      	b.n	8000f30 <ADC_Enable+0xa4>
 8000f2e:	2000      	movs	r0, #0
}
 8000f30:	b003      	add	sp, #12
 8000f32:	bd30      	pop	{r4, r5, pc}
 8000f34:	80000017 	.word	0x80000017
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	000f4240 	.word	0x000f4240

08000f40 <HAL_ADC_Init>:
{
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000f44:	d100      	bne.n	8000f48 <HAL_ADC_Init+0x8>
 8000f46:	e0b9      	b.n	80010bc <HAL_ADC_Init+0x17c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d100      	bne.n	8000f50 <HAL_ADC_Init+0x10>
 8000f4e:	e080      	b.n	8001052 <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f52:	06db      	lsls	r3, r3, #27
 8000f54:	d500      	bpl.n	8000f58 <HAL_ADC_Init+0x18>
 8000f56:	e0ab      	b.n	80010b0 <HAL_ADC_Init+0x170>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f58:	6822      	ldr	r2, [r4, #0]
 8000f5a:	6893      	ldr	r3, [r2, #8]
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	400b      	ands	r3, r1
      (tmp_hal_status == HAL_OK)                                &&
 8000f60:	d000      	beq.n	8000f64 <HAL_ADC_Init+0x24>
 8000f62:	e0a5      	b.n	80010b0 <HAL_ADC_Init+0x170>
    ADC_STATE_CLR_SET(hadc->State,
 8000f64:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000f66:	4856      	ldr	r0, [pc, #344]	; (80010c0 <HAL_ADC_Init+0x180>)
 8000f68:	4001      	ands	r1, r0
 8000f6a:	3006      	adds	r0, #6
 8000f6c:	30ff      	adds	r0, #255	; 0xff
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f72:	6890      	ldr	r0, [r2, #8]
 8000f74:	2103      	movs	r1, #3
 8000f76:	4001      	ands	r1, r0
 8000f78:	2901      	cmp	r1, #1
 8000f7a:	d070      	beq.n	800105e <HAL_ADC_Init+0x11e>
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2900      	cmp	r1, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_ADC_Init+0x5c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f82:	68d1      	ldr	r1, [r2, #12]
 8000f84:	2018      	movs	r0, #24
 8000f86:	4381      	bics	r1, r0
 8000f88:	68a0      	ldr	r0, [r4, #8]
 8000f8a:	4301      	orrs	r1, r0
 8000f8c:	60d1      	str	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f8e:	6821      	ldr	r1, [r4, #0]
 8000f90:	690a      	ldr	r2, [r1, #16]
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	0892      	lsrs	r2, r2, #2
 8000f96:	6860      	ldr	r0, [r4, #4]
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f9c:	6821      	ldr	r1, [r4, #0]
 8000f9e:	68ca      	ldr	r2, [r1, #12]
 8000fa0:	4848      	ldr	r0, [pc, #288]	; (80010c4 <HAL_ADC_Init+0x184>)
 8000fa2:	4002      	ands	r2, r0
 8000fa4:	60ca      	str	r2, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000fa6:	69a2      	ldr	r2, [r4, #24]
 8000fa8:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000faa:	69e1      	ldr	r1, [r4, #28]
 8000fac:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000fae:	430a      	orrs	r2, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000fb0:	6a20      	ldr	r0, [r4, #32]
 8000fb2:	0341      	lsls	r1, r0, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000fb4:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000fb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fb8:	2901      	cmp	r1, #1
 8000fba:	d05c      	beq.n	8001076 <HAL_ADC_Init+0x136>
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0149      	lsls	r1, r1, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000fc0:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000fc2:	68e1      	ldr	r1, [r4, #12]
 8000fc4:	430a      	orrs	r2, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000fc6:	6921      	ldr	r1, [r4, #16]
 8000fc8:	2902      	cmp	r1, #2
 8000fca:	d056      	beq.n	800107a <HAL_ADC_Init+0x13a>
                 hadc->Init.DataAlign                                   |
 8000fcc:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000fce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000fd0:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000fd2:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fd6:	2a01      	cmp	r2, #1
 8000fd8:	d051      	beq.n	800107e <HAL_ADC_Init+0x13e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fdc:	21c2      	movs	r1, #194	; 0xc2
 8000fde:	31ff      	adds	r1, #255	; 0xff
 8000fe0:	428a      	cmp	r2, r1
 8000fe2:	d002      	beq.n	8000fea <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fe4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000fea:	6821      	ldr	r1, [r4, #0]
 8000fec:	68ca      	ldr	r2, [r1, #12]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ff2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0549      	lsls	r1, r1, #21
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	d00d      	beq.n	8001018 <HAL_ADC_Init+0xd8>
 8000ffc:	2a01      	cmp	r2, #1
 8000ffe:	d00b      	beq.n	8001018 <HAL_ADC_Init+0xd8>
 8001000:	2a02      	cmp	r2, #2
 8001002:	d009      	beq.n	8001018 <HAL_ADC_Init+0xd8>
 8001004:	2a03      	cmp	r2, #3
 8001006:	d007      	beq.n	8001018 <HAL_ADC_Init+0xd8>
 8001008:	2a04      	cmp	r2, #4
 800100a:	d005      	beq.n	8001018 <HAL_ADC_Init+0xd8>
 800100c:	2a05      	cmp	r2, #5
 800100e:	d003      	beq.n	8001018 <HAL_ADC_Init+0xd8>
 8001010:	2a06      	cmp	r2, #6
 8001012:	d001      	beq.n	8001018 <HAL_ADC_Init+0xd8>
 8001014:	2a07      	cmp	r2, #7
 8001016:	d10a      	bne.n	800102e <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001018:	6820      	ldr	r0, [r4, #0]
 800101a:	6941      	ldr	r1, [r0, #20]
 800101c:	2207      	movs	r2, #7
 800101e:	4391      	bics	r1, r2
 8001020:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001022:	6820      	ldr	r0, [r4, #0]
 8001024:	6941      	ldr	r1, [r0, #20]
 8001026:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001028:	402a      	ands	r2, r5
 800102a:	430a      	orrs	r2, r1
 800102c:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800102e:	6822      	ldr	r2, [r4, #0]
 8001030:	68d2      	ldr	r2, [r2, #12]
 8001032:	4925      	ldr	r1, [pc, #148]	; (80010c8 <HAL_ADC_Init+0x188>)
 8001034:	400a      	ands	r2, r1
 8001036:	4293      	cmp	r3, r2
 8001038:	d030      	beq.n	800109c <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 800103a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800103c:	2212      	movs	r2, #18
 800103e:	4393      	bics	r3, r2
 8001040:	3a02      	subs	r2, #2
 8001042:	4313      	orrs	r3, r2
 8001044:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001046:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001048:	3a0f      	subs	r2, #15
 800104a:	4313      	orrs	r3, r2
 800104c:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800104e:	2001      	movs	r0, #1
 8001050:	e033      	b.n	80010ba <HAL_ADC_Init+0x17a>
    ADC_CLEAR_ERRORCODE(hadc);
 8001052:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8001054:	2240      	movs	r2, #64	; 0x40
 8001056:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8001058:	f002 fa10 	bl	800347c <HAL_ADC_MspInit>
 800105c:	e778      	b.n	8000f50 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800105e:	6811      	ldr	r1, [r2, #0]
 8001060:	07c9      	lsls	r1, r1, #31
 8001062:	d404      	bmi.n	800106e <HAL_ADC_Init+0x12e>
 8001064:	68d1      	ldr	r1, [r2, #12]
 8001066:	0409      	lsls	r1, r1, #16
 8001068:	d403      	bmi.n	8001072 <HAL_ADC_Init+0x132>
 800106a:	2100      	movs	r1, #0
 800106c:	e787      	b.n	8000f7e <HAL_ADC_Init+0x3e>
 800106e:	2101      	movs	r1, #1
 8001070:	e785      	b.n	8000f7e <HAL_ADC_Init+0x3e>
 8001072:	2101      	movs	r1, #1
 8001074:	e783      	b.n	8000f7e <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001076:	0019      	movs	r1, r3
 8001078:	e7a2      	b.n	8000fc0 <HAL_ADC_Init+0x80>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800107a:	2304      	movs	r3, #4
 800107c:	e7a6      	b.n	8000fcc <HAL_ADC_Init+0x8c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800107e:	2800      	cmp	r0, #0
 8001080:	d103      	bne.n	800108a <HAL_ADC_Init+0x14a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	0252      	lsls	r2, r2, #9
 8001086:	4313      	orrs	r3, r2
 8001088:	e7a7      	b.n	8000fda <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800108a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800108c:	2120      	movs	r1, #32
 800108e:	430a      	orrs	r2, r1
 8001090:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001092:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001094:	391f      	subs	r1, #31
 8001096:	430a      	orrs	r2, r1
 8001098:	64a2      	str	r2, [r4, #72]	; 0x48
 800109a:	e79e      	b.n	8000fda <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 800109c:	2300      	movs	r3, #0
 800109e:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80010a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010a2:	2203      	movs	r2, #3
 80010a4:	4393      	bics	r3, r2
 80010a6:	3a02      	subs	r2, #2
 80010a8:	4313      	orrs	r3, r2
 80010aa:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ac:	2000      	movs	r0, #0
 80010ae:	e004      	b.n	80010ba <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010b2:	2210      	movs	r2, #16
 80010b4:	4313      	orrs	r3, r2
 80010b6:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
}
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
 80010be:	e7fc      	b.n	80010ba <HAL_ADC_Init+0x17a>
 80010c0:	fffffefd 	.word	0xfffffefd
 80010c4:	fffe0219 	.word	0xfffe0219
 80010c8:	833fffe7 	.word	0x833fffe7

080010cc <HAL_ADC_Start_DMA>:
{
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ce:	0004      	movs	r4, r0
 80010d0:	000e      	movs	r6, r1
 80010d2:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d4:	6803      	ldr	r3, [r0, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	075b      	lsls	r3, r3, #29
 80010da:	d502      	bpl.n	80010e2 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 80010dc:	2502      	movs	r5, #2
}
 80010de:	0028      	movs	r0, r5
 80010e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	5cc3      	ldrb	r3, [r0, r3]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d03a      	beq.n	8001160 <HAL_ADC_Start_DMA+0x94>
 80010ea:	2201      	movs	r2, #1
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80010f0:	69c3      	ldr	r3, [r0, #28]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d032      	beq.n	800115c <HAL_ADC_Start_DMA+0x90>
      tmp_hal_status = ADC_Enable(hadc);
 80010f6:	f7ff fec9 	bl	8000e8c <ADC_Enable>
 80010fa:	0005      	movs	r5, r0
    if (tmp_hal_status == HAL_OK)
 80010fc:	2d00      	cmp	r5, #0
 80010fe:	d1ee      	bne.n	80010de <HAL_ADC_Start_DMA+0x12>
      ADC_STATE_CLR_SET(hadc->State,
 8001100:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_ADC_Start_DMA+0x98>)
 8001104:	401a      	ands	r2, r3
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4313      	orrs	r3, r2
 800110c:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 800110e:	2300      	movs	r3, #0
 8001110:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8001112:	2240      	movs	r2, #64	; 0x40
 8001114:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_ADC_Start_DMA+0x9c>)
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800111c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <HAL_ADC_Start_DMA+0xa0>)
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001122:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <HAL_ADC_Start_DMA+0xa4>)
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	221c      	movs	r2, #28
 800112c:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800112e:	6822      	ldr	r2, [r4, #0]
 8001130:	6853      	ldr	r3, [r2, #4]
 8001132:	2110      	movs	r1, #16
 8001134:	430b      	orrs	r3, r1
 8001136:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001138:	6822      	ldr	r2, [r4, #0]
 800113a:	68d3      	ldr	r3, [r2, #12]
 800113c:	390f      	subs	r1, #15
 800113e:	430b      	orrs	r3, r1
 8001140:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001142:	6821      	ldr	r1, [r4, #0]
 8001144:	3140      	adds	r1, #64	; 0x40
 8001146:	003b      	movs	r3, r7
 8001148:	0032      	movs	r2, r6
 800114a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800114c:	f000 fa1c 	bl	8001588 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	6893      	ldr	r3, [r2, #8]
 8001154:	2104      	movs	r1, #4
 8001156:	430b      	orrs	r3, r1
 8001158:	6093      	str	r3, [r2, #8]
 800115a:	e7c0      	b.n	80010de <HAL_ADC_Start_DMA+0x12>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2500      	movs	r5, #0
 800115e:	e7cd      	b.n	80010fc <HAL_ADC_Start_DMA+0x30>
    __HAL_LOCK(hadc);
 8001160:	2502      	movs	r5, #2
 8001162:	e7bc      	b.n	80010de <HAL_ADC_Start_DMA+0x12>
 8001164:	fffff0fe 	.word	0xfffff0fe
 8001168:	08001179 	.word	0x08001179
 800116c:	080011eb 	.word	0x080011eb
 8001170:	080011f7 	.word	0x080011f7

08001174 <HAL_ADC_ConvCpltCallback>:
}
 8001174:	4770      	bx	lr
	...

08001178 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001178:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800117a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800117c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800117e:	2150      	movs	r1, #80	; 0x50
 8001180:	4211      	tst	r1, r2
 8001182:	d12b      	bne.n	80011dc <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001184:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	430a      	orrs	r2, r1
 800118c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68d0      	ldr	r0, [r2, #12]
 8001192:	21c0      	movs	r1, #192	; 0xc0
 8001194:	0109      	lsls	r1, r1, #4
 8001196:	4208      	tst	r0, r1
 8001198:	d113      	bne.n	80011c2 <ADC_DMAConvCplt+0x4a>
 800119a:	6a19      	ldr	r1, [r3, #32]
 800119c:	2900      	cmp	r1, #0
 800119e:	d110      	bne.n	80011c2 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011a0:	6811      	ldr	r1, [r2, #0]
 80011a2:	0709      	lsls	r1, r1, #28
 80011a4:	d50d      	bpl.n	80011c2 <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011a6:	6891      	ldr	r1, [r2, #8]
 80011a8:	0749      	lsls	r1, r1, #29
 80011aa:	d40e      	bmi.n	80011ca <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011ac:	6851      	ldr	r1, [r2, #4]
 80011ae:	200c      	movs	r0, #12
 80011b0:	4381      	bics	r1, r0
 80011b2:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011b6:	490b      	ldr	r1, [pc, #44]	; (80011e4 <ADC_DMAConvCplt+0x6c>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	3104      	adds	r1, #4
 80011bc:	31ff      	adds	r1, #255	; 0xff
 80011be:	430a      	orrs	r2, r1
 80011c0:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff ffd6 	bl	8001174 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80011c8:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011cc:	2120      	movs	r1, #32
 80011ce:	430a      	orrs	r2, r1
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011d4:	391f      	subs	r1, #31
 80011d6:	430a      	orrs	r2, r1
 80011d8:	649a      	str	r2, [r3, #72]	; 0x48
 80011da:	e7f2      	b.n	80011c2 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80011dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4798      	blx	r3
}
 80011e2:	e7f1      	b.n	80011c8 <ADC_DMAConvCplt+0x50>
 80011e4:	fffffefe 	.word	0xfffffefe

080011e8 <HAL_ADC_ConvHalfCpltCallback>:
}
 80011e8:	4770      	bx	lr

080011ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80011ea:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80011ee:	f7ff fffb 	bl	80011e8 <HAL_ADC_ConvHalfCpltCallback>
}
 80011f2:	bd10      	pop	{r4, pc}

080011f4 <HAL_ADC_ErrorCallback>:
}
 80011f4:	4770      	bx	lr

080011f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80011f6:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011fc:	2240      	movs	r2, #64	; 0x40
 80011fe:	4313      	orrs	r3, r2
 8001200:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001202:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001204:	3a3c      	subs	r2, #60	; 0x3c
 8001206:	4313      	orrs	r3, r2
 8001208:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800120a:	f7ff fff3 	bl	80011f4 <HAL_ADC_ErrorCallback>
}
 800120e:	bd10      	pop	{r4, pc}

08001210 <HAL_ADC_ConfigChannel>:
{
 8001210:	b530      	push	{r4, r5, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800121a:	3340      	adds	r3, #64	; 0x40
 800121c:	5cc3      	ldrb	r3, [r0, r3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d100      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x14>
 8001222:	e081      	b.n	8001328 <HAL_ADC_ConfigChannel+0x118>
 8001224:	2201      	movs	r2, #1
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800122a:	6803      	ldr	r3, [r0, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	0752      	lsls	r2, r2, #29
 8001230:	d470      	bmi.n	8001314 <HAL_ADC_ConfigChannel+0x104>
    if (sConfig->Rank != ADC_RANK_NONE)
 8001232:	4a3e      	ldr	r2, [pc, #248]	; (800132c <HAL_ADC_ConfigChannel+0x11c>)
 8001234:	6848      	ldr	r0, [r1, #4]
 8001236:	4290      	cmp	r0, r2
 8001238:	d053      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0xd2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800123a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800123c:	2001      	movs	r0, #1
 800123e:	680d      	ldr	r5, [r1, #0]
 8001240:	40a8      	lsls	r0, r5
 8001242:	4302      	orrs	r2, r0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	0552      	lsls	r2, r2, #21
 800124c:	4293      	cmp	r3, r2
 800124e:	d01e      	beq.n	800128e <HAL_ADC_ConfigChannel+0x7e>
 8001250:	2b01      	cmp	r3, #1
 8001252:	d01c      	beq.n	800128e <HAL_ADC_ConfigChannel+0x7e>
 8001254:	2b02      	cmp	r3, #2
 8001256:	d01a      	beq.n	800128e <HAL_ADC_ConfigChannel+0x7e>
 8001258:	2b03      	cmp	r3, #3
 800125a:	d018      	beq.n	800128e <HAL_ADC_ConfigChannel+0x7e>
 800125c:	2b04      	cmp	r3, #4
 800125e:	d016      	beq.n	800128e <HAL_ADC_ConfigChannel+0x7e>
 8001260:	2b05      	cmp	r3, #5
 8001262:	d014      	beq.n	800128e <HAL_ADC_ConfigChannel+0x7e>
 8001264:	2b06      	cmp	r3, #6
 8001266:	d012      	beq.n	800128e <HAL_ADC_ConfigChannel+0x7e>
 8001268:	2b07      	cmp	r3, #7
 800126a:	d010      	beq.n	800128e <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	6950      	ldr	r0, [r2, #20]
 8001270:	2307      	movs	r3, #7
 8001272:	4003      	ands	r3, r0
 8001274:	6888      	ldr	r0, [r1, #8]
 8001276:	4298      	cmp	r0, r3
 8001278:	d009      	beq.n	800128e <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800127a:	6950      	ldr	r0, [r2, #20]
 800127c:	2307      	movs	r3, #7
 800127e:	4398      	bics	r0, r3
 8001280:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001282:	6820      	ldr	r0, [r4, #0]
 8001284:	6942      	ldr	r2, [r0, #20]
 8001286:	688d      	ldr	r5, [r1, #8]
 8001288:	402b      	ands	r3, r5
 800128a:	4313      	orrs	r3, r2
 800128c:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800128e:	680b      	ldr	r3, [r1, #0]
 8001290:	001a      	movs	r2, r3
 8001292:	3a10      	subs	r2, #16
 8001294:	2a01      	cmp	r2, #1
 8001296:	d901      	bls.n	800129c <HAL_ADC_ConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001298:	2000      	movs	r0, #0
 800129a:	e040      	b.n	800131e <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800129c:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_ADC_ConfigChannel+0x120>)
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d009      	beq.n	80012b8 <HAL_ADC_ConfigChannel+0xa8>
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	03db      	lsls	r3, r3, #15
 80012a8:	4313      	orrs	r3, r2
 80012aa:	4a21      	ldr	r2, [pc, #132]	; (8001330 <HAL_ADC_ConfigChannel+0x120>)
 80012ac:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ae:	680b      	ldr	r3, [r1, #0]
 80012b0:	2b10      	cmp	r3, #16
 80012b2:	d004      	beq.n	80012be <HAL_ADC_ConfigChannel+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b4:	2000      	movs	r0, #0
 80012b6:	e032      	b.n	800131e <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	e7f4      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_ADC_ConfigChannel+0x124>)
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	491d      	ldr	r1, [pc, #116]	; (8001338 <HAL_ADC_ConfigChannel+0x128>)
 80012c4:	f7fe ff28 	bl	8000118 <__udivsi3>
 80012c8:	0083      	lsls	r3, r0, #2
 80012ca:	1818      	adds	r0, r3, r0
 80012cc:	0043      	lsls	r3, r0, #1
 80012ce:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_ConfigChannel+0xc8>
            wait_loop_index--;
 80012d2:	9b01      	ldr	r3, [sp, #4]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80012d8:	9b01      	ldr	r3, [sp, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f9      	bne.n	80012d2 <HAL_ADC_ConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012de:	2000      	movs	r0, #0
 80012e0:	e01d      	b.n	800131e <HAL_ADC_ConfigChannel+0x10e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80012e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012e4:	2001      	movs	r0, #1
 80012e6:	680d      	ldr	r5, [r1, #0]
 80012e8:	40a8      	lsls	r0, r5
 80012ea:	4382      	bics	r2, r0
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012ee:	680b      	ldr	r3, [r1, #0]
 80012f0:	001a      	movs	r2, r3
 80012f2:	3a10      	subs	r2, #16
 80012f4:	2a01      	cmp	r2, #1
 80012f6:	d901      	bls.n	80012fc <HAL_ADC_ConfigChannel+0xec>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2000      	movs	r0, #0
 80012fa:	e010      	b.n	800131e <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_ADC_ConfigChannel+0x120>)
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	2b10      	cmp	r3, #16
 8001302:	d005      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x100>
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_ADC_ConfigChannel+0x12c>)
 8001306:	4013      	ands	r3, r2
 8001308:	4a09      	ldr	r2, [pc, #36]	; (8001330 <HAL_ADC_ConfigChannel+0x120>)
 800130a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130c:	2000      	movs	r0, #0
 800130e:	e006      	b.n	800131e <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_ADC_ConfigChannel+0x130>)
 8001312:	e7f8      	b.n	8001306 <HAL_ADC_ConfigChannel+0xf6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001314:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001316:	2220      	movs	r2, #32
 8001318:	4313      	orrs	r3, r2
 800131a:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800131c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800131e:	2200      	movs	r2, #0
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	54e2      	strb	r2, [r4, r3]
}
 8001324:	b003      	add	sp, #12
 8001326:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8001328:	2002      	movs	r0, #2
 800132a:	e7fb      	b.n	8001324 <HAL_ADC_ConfigChannel+0x114>
 800132c:	00001001 	.word	0x00001001
 8001330:	40012708 	.word	0x40012708
 8001334:	20000000 	.word	0x20000000
 8001338:	000f4240 	.word	0x000f4240
 800133c:	ffbfffff 	.word	0xffbfffff
 8001340:	ff7fffff 	.word	0xff7fffff

08001344 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	5cc3      	ldrb	r3, [r0, r3]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d055      	beq.n	80013fc <HAL_ADCEx_Calibration_Start+0xb8>
 8001350:	2201      	movs	r2, #1
 8001352:	2340      	movs	r3, #64	; 0x40
 8001354:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001356:	6802      	ldr	r2, [r0, #0]
 8001358:	6891      	ldr	r1, [r2, #8]
 800135a:	3b3d      	subs	r3, #61	; 0x3d
 800135c:	400b      	ands	r3, r1
 800135e:	2b01      	cmp	r3, #1
 8001360:	d00b      	beq.n	800137a <HAL_ADCEx_Calibration_Start+0x36>
 8001362:	2300      	movs	r3, #0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d014      	beq.n	8001392 <HAL_ADCEx_Calibration_Start+0x4e>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001368:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800136a:	2220      	movs	r2, #32
 800136c:	4313      	orrs	r3, r2
 800136e:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001370:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001372:	2200      	movs	r2, #0
 8001374:	2340      	movs	r3, #64	; 0x40
 8001376:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001378:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	07db      	lsls	r3, r3, #31
 800137e:	d404      	bmi.n	800138a <HAL_ADCEx_Calibration_Start+0x46>
 8001380:	68d3      	ldr	r3, [r2, #12]
 8001382:	041b      	lsls	r3, r3, #16
 8001384:	d403      	bmi.n	800138e <HAL_ADCEx_Calibration_Start+0x4a>
 8001386:	2300      	movs	r3, #0
 8001388:	e7ec      	b.n	8001364 <HAL_ADCEx_Calibration_Start+0x20>
 800138a:	2301      	movs	r3, #1
 800138c:	e7ea      	b.n	8001364 <HAL_ADCEx_Calibration_Start+0x20>
 800138e:	2301      	movs	r3, #1
 8001390:	e7e8      	b.n	8001364 <HAL_ADCEx_Calibration_Start+0x20>
    ADC_STATE_CLR_SET(hadc->State, 
 8001392:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001394:	491a      	ldr	r1, [pc, #104]	; (8001400 <HAL_ADCEx_Calibration_Start+0xbc>)
 8001396:	400b      	ands	r3, r1
 8001398:	3106      	adds	r1, #6
 800139a:	31ff      	adds	r1, #255	; 0xff
 800139c:	430b      	orrs	r3, r1
 800139e:	6463      	str	r3, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80013a0:	68d6      	ldr	r6, [r2, #12]
 80013a2:	3101      	adds	r1, #1
 80013a4:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80013a6:	68d3      	ldr	r3, [r2, #12]
 80013a8:	438b      	bics	r3, r1
 80013aa:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80013ac:	6822      	ldr	r2, [r4, #0]
 80013ae:	6891      	ldr	r1, [r2, #8]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	061b      	lsls	r3, r3, #24
 80013b4:	430b      	orrs	r3, r1
 80013b6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80013b8:	f7ff fd62 	bl	8000e80 <HAL_GetTick>
 80013bc:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	da0f      	bge.n	80013e6 <HAL_ADCEx_Calibration_Start+0xa2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013c6:	f7ff fd5b 	bl	8000e80 <HAL_GetTick>
 80013ca:	1b40      	subs	r0, r0, r5
 80013cc:	2802      	cmp	r0, #2
 80013ce:	d9f6      	bls.n	80013be <HAL_ADCEx_Calibration_Start+0x7a>
        ADC_STATE_CLR_SET(hadc->State,
 80013d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013d2:	2212      	movs	r2, #18
 80013d4:	4393      	bics	r3, r2
 80013d6:	3a02      	subs	r2, #2
 80013d8:	4313      	orrs	r3, r2
 80013da:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80013dc:	2200      	movs	r2, #0
 80013de:	2340      	movs	r3, #64	; 0x40
 80013e0:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
 80013e4:	e7c8      	b.n	8001378 <HAL_ADCEx_Calibration_Start+0x34>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	4316      	orrs	r6, r2
 80013ea:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80013ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ee:	2203      	movs	r2, #3
 80013f0:	4393      	bics	r3, r2
 80013f2:	3a02      	subs	r2, #2
 80013f4:	4313      	orrs	r3, r2
 80013f6:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2000      	movs	r0, #0
 80013fa:	e7ba      	b.n	8001372 <HAL_ADCEx_Calibration_Start+0x2e>
  __HAL_LOCK(hadc);
 80013fc:	2002      	movs	r0, #2
 80013fe:	e7bb      	b.n	8001378 <HAL_ADCEx_Calibration_Start+0x34>
 8001400:	fffffefd 	.word	0xfffffefd

08001404 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001404:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001406:	2800      	cmp	r0, #0
 8001408:	db11      	blt.n	800142e <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140a:	0883      	lsrs	r3, r0, #2
 800140c:	4d14      	ldr	r5, [pc, #80]	; (8001460 <HAL_NVIC_SetPriority+0x5c>)
 800140e:	33c0      	adds	r3, #192	; 0xc0
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	595c      	ldr	r4, [r3, r5]
 8001414:	2203      	movs	r2, #3
 8001416:	4010      	ands	r0, r2
 8001418:	00c0      	lsls	r0, r0, #3
 800141a:	32fc      	adds	r2, #252	; 0xfc
 800141c:	0016      	movs	r6, r2
 800141e:	4086      	lsls	r6, r0
 8001420:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001422:	0189      	lsls	r1, r1, #6
 8001424:	400a      	ands	r2, r1
 8001426:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001428:	4322      	orrs	r2, r4
 800142a:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800142c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800142e:	b2c0      	uxtb	r0, r0
 8001430:	230f      	movs	r3, #15
 8001432:	4003      	ands	r3, r0
 8001434:	3b08      	subs	r3, #8
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3306      	adds	r3, #6
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_NVIC_SetPriority+0x60>)
 800143e:	4694      	mov	ip, r2
 8001440:	4463      	add	r3, ip
 8001442:	685d      	ldr	r5, [r3, #4]
 8001444:	2203      	movs	r2, #3
 8001446:	4010      	ands	r0, r2
 8001448:	00c0      	lsls	r0, r0, #3
 800144a:	24ff      	movs	r4, #255	; 0xff
 800144c:	0022      	movs	r2, r4
 800144e:	4082      	lsls	r2, r0
 8001450:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001452:	0189      	lsls	r1, r1, #6
 8001454:	400c      	ands	r4, r1
 8001456:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001458:	432c      	orrs	r4, r5
 800145a:	605c      	str	r4, [r3, #4]
 800145c:	e7e6      	b.n	800142c <HAL_NVIC_SetPriority+0x28>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001468:	231f      	movs	r3, #31
 800146a:	4018      	ands	r0, r3
 800146c:	3b1e      	subs	r3, #30
 800146e:	4083      	lsls	r3, r0
 8001470:	4a01      	ldr	r2, [pc, #4]	; (8001478 <HAL_NVIC_EnableIRQ+0x10>)
 8001472:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001474:	4770      	bx	lr
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	e000e100 	.word	0xe000e100

0800147c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	3801      	subs	r0, #1
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_SYSTICK_Config+0x2c>)
 8001480:	4298      	cmp	r0, r3
 8001482:	d80f      	bhi.n	80014a4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001484:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_SYSTICK_Config+0x30>)
 8001486:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <HAL_SYSTICK_Config+0x34>)
 800148a:	6a03      	ldr	r3, [r0, #32]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	21c0      	movs	r1, #192	; 0xc0
 8001492:	0609      	lsls	r1, r1, #24
 8001494:	430b      	orrs	r3, r1
 8001496:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	2300      	movs	r3, #0
 800149a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149c:	3307      	adds	r3, #7
 800149e:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014a2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014a4:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80014a6:	e7fc      	b.n	80014a2 <HAL_SYSTICK_Config+0x26>
 80014a8:	00ffffff 	.word	0x00ffffff
 80014ac:	e000e010 	.word	0xe000e010
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80014b4:	2804      	cmp	r0, #4
 80014b6:	d005      	beq.n	80014c4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80014ba:	6813      	ldr	r3, [r2, #0]
 80014bc:	2104      	movs	r1, #4
 80014be:	438b      	bics	r3, r1
 80014c0:	6013      	str	r3, [r2, #0]
  }
}
 80014c2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014c4:	4a02      	ldr	r2, [pc, #8]	; (80014d0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80014c6:	6813      	ldr	r3, [r2, #0]
 80014c8:	2104      	movs	r1, #4
 80014ca:	430b      	orrs	r3, r1
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e7f8      	b.n	80014c2 <HAL_SYSTICK_CLKSourceConfig+0xe>
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80014d4:	4770      	bx	lr

080014d6 <HAL_SYSTICK_IRQHandler>:
{
 80014d6:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80014d8:	f7ff fffc 	bl	80014d4 <HAL_SYSTICK_Callback>
}
 80014dc:	bd10      	pop	{r4, pc}

080014de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014de:	b570      	push	{r4, r5, r6, lr}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014e0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80014e2:	2401      	movs	r4, #1
 80014e4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80014e6:	40b4      	lsls	r4, r6
 80014e8:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014ea:	6804      	ldr	r4, [r0, #0]
 80014ec:	6063      	str	r3, [r4, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014ee:	6843      	ldr	r3, [r0, #4]
 80014f0:	2b10      	cmp	r3, #16
 80014f2:	d004      	beq.n	80014fe <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80014f4:	6803      	ldr	r3, [r0, #0]
 80014f6:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80014f8:	6803      	ldr	r3, [r0, #0]
 80014fa:	60da      	str	r2, [r3, #12]
  }
}
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80014fe:	6803      	ldr	r3, [r0, #0]
 8001500:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001502:	6803      	ldr	r3, [r0, #0]
 8001504:	60d9      	str	r1, [r3, #12]
 8001506:	e7f9      	b.n	80014fc <DMA_SetConfig+0x1e>

08001508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001508:	b510      	push	{r4, lr}
 800150a:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800150c:	6803      	ldr	r3, [r0, #0]
 800150e:	4a06      	ldr	r2, [pc, #24]	; (8001528 <DMA_CalcBaseAndBitshift+0x20>)
 8001510:	4694      	mov	ip, r2
 8001512:	4463      	add	r3, ip
 8001514:	0018      	movs	r0, r3
 8001516:	2114      	movs	r1, #20
 8001518:	f7fe fdfe 	bl	8000118 <__udivsi3>
 800151c:	0080      	lsls	r0, r0, #2
 800151e:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001520:	4b02      	ldr	r3, [pc, #8]	; (800152c <DMA_CalcBaseAndBitshift+0x24>)
 8001522:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 8001524:	bd10      	pop	{r4, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	bffdfff8 	.word	0xbffdfff8
 800152c:	40020000 	.word	0x40020000

08001530 <HAL_DMA_Init>:
{ 
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	1e04      	subs	r4, r0, #0
  if(NULL == hdma)
 8001534:	d024      	beq.n	8001580 <HAL_DMA_Init+0x50>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001536:	2521      	movs	r5, #33	; 0x21
 8001538:	2302      	movs	r3, #2
 800153a:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 800153c:	6801      	ldr	r1, [r0, #0]
 800153e:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_DMA_Init+0x54>)
 8001542:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001544:	6843      	ldr	r3, [r0, #4]
 8001546:	6880      	ldr	r0, [r0, #8]
 8001548:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154a:	68e0      	ldr	r0, [r4, #12]
 800154c:	4303      	orrs	r3, r0
 800154e:	6920      	ldr	r0, [r4, #16]
 8001550:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001552:	6960      	ldr	r0, [r4, #20]
 8001554:	4303      	orrs	r3, r0
 8001556:	69a0      	ldr	r0, [r4, #24]
 8001558:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800155a:	69e0      	ldr	r0, [r4, #28]
 800155c:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800155e:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8001560:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8001562:	0020      	movs	r0, r4
 8001564:	f7ff ffd0 	bl	8001508 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800156c:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800156e:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001570:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001572:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001574:	2201      	movs	r2, #1
 8001576:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001578:	321f      	adds	r2, #31
 800157a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800157c:	2000      	movs	r0, #0
}  
 800157e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001580:	2001      	movs	r0, #1
 8001582:	e7fc      	b.n	800157e <HAL_DMA_Init+0x4e>
 8001584:	ffffc00f 	.word	0xffffc00f

08001588 <HAL_DMA_Start_IT>:
{
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800158c:	2020      	movs	r0, #32
 800158e:	5c20      	ldrb	r0, [r4, r0]
 8001590:	2801      	cmp	r0, #1
 8001592:	d032      	beq.n	80015fa <HAL_DMA_Start_IT+0x72>
 8001594:	2501      	movs	r5, #1
 8001596:	2020      	movs	r0, #32
 8001598:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 800159a:	3001      	adds	r0, #1
 800159c:	5c20      	ldrb	r0, [r4, r0]
 800159e:	2801      	cmp	r0, #1
 80015a0:	d004      	beq.n	80015ac <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 80015a2:	2200      	movs	r2, #0
 80015a4:	2320      	movs	r3, #32
 80015a6:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 80015a8:	2002      	movs	r0, #2
} 
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 80015ac:	3501      	adds	r5, #1
 80015ae:	3020      	adds	r0, #32
 80015b0:	5425      	strb	r5, [r4, r0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b2:	2000      	movs	r0, #0
 80015b4:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015b6:	6825      	ldr	r5, [r4, #0]
 80015b8:	6828      	ldr	r0, [r5, #0]
 80015ba:	2601      	movs	r6, #1
 80015bc:	43b0      	bics	r0, r6
 80015be:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c0:	0020      	movs	r0, r4
 80015c2:	f7ff ff8c 	bl	80014de <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 80015c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00b      	beq.n	80015e4 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015cc:	6822      	ldr	r2, [r4, #0]
 80015ce:	6813      	ldr	r3, [r2, #0]
 80015d0:	210e      	movs	r1, #14
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	6813      	ldr	r3, [r2, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	430b      	orrs	r3, r1
 80015de:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80015e0:	2000      	movs	r0, #0
 80015e2:	e7e2      	b.n	80015aa <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80015e4:	6822      	ldr	r2, [r4, #0]
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	210a      	movs	r1, #10
 80015ea:	430b      	orrs	r3, r1
 80015ec:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	6813      	ldr	r3, [r2, #0]
 80015f2:	3906      	subs	r1, #6
 80015f4:	438b      	bics	r3, r1
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e7ed      	b.n	80015d6 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80015fa:	2002      	movs	r0, #2
 80015fc:	e7d5      	b.n	80015aa <HAL_DMA_Start_IT+0x22>

080015fe <HAL_DMA_Abort_IT>:
{  
 80015fe:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001600:	2321      	movs	r3, #33	; 0x21
 8001602:	5cc3      	ldrb	r3, [r0, r3]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d003      	beq.n	8001610 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	2304      	movs	r3, #4
 800160a:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800160c:	2001      	movs	r0, #1
}
 800160e:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001610:	6802      	ldr	r2, [r0, #0]
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	210e      	movs	r1, #14
 8001616:	438b      	bics	r3, r1
 8001618:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800161a:	6801      	ldr	r1, [r0, #0]
 800161c:	680a      	ldr	r2, [r1, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	439a      	bics	r2, r3
 8001622:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001624:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001626:	0019      	movs	r1, r3
 8001628:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800162a:	40a1      	lsls	r1, r4
 800162c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800162e:	2221      	movs	r2, #33	; 0x21
 8001630:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8001632:	2200      	movs	r2, #0
 8001634:	331f      	adds	r3, #31
 8001636:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8001638:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 800163e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001640:	2000      	movs	r0, #0
 8001642:	e7e4      	b.n	800160e <HAL_DMA_Abort_IT+0x10>
 8001644:	2000      	movs	r0, #0
 8001646:	e7e2      	b.n	800160e <HAL_DMA_Abort_IT+0x10>

08001648 <HAL_DMA_IRQHandler>:
{
 8001648:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800164a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800164c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800164e:	6804      	ldr	r4, [r0, #0]
 8001650:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001652:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001654:	2304      	movs	r3, #4
 8001656:	408b      	lsls	r3, r1
 8001658:	4213      	tst	r3, r2
 800165a:	d012      	beq.n	8001682 <HAL_DMA_IRQHandler+0x3a>
 800165c:	076b      	lsls	r3, r5, #29
 800165e:	d510      	bpl.n	8001682 <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	069b      	lsls	r3, r3, #26
 8001664:	d403      	bmi.n	800166e <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	2204      	movs	r2, #4
 800166a:	4393      	bics	r3, r2
 800166c:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800166e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001670:	2304      	movs	r3, #4
 8001672:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001674:	408b      	lsls	r3, r1
 8001676:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001678:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d000      	beq.n	8001680 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 800167e:	4798      	blx	r3
}  
 8001680:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001682:	2302      	movs	r3, #2
 8001684:	408b      	lsls	r3, r1
 8001686:	4213      	tst	r3, r2
 8001688:	d018      	beq.n	80016bc <HAL_DMA_IRQHandler+0x74>
 800168a:	07ab      	lsls	r3, r5, #30
 800168c:	d516      	bpl.n	80016bc <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	069b      	lsls	r3, r3, #26
 8001692:	d406      	bmi.n	80016a2 <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	220a      	movs	r2, #10
 8001698:	4393      	bics	r3, r2
 800169a:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800169c:	3a09      	subs	r2, #9
 800169e:	2321      	movs	r3, #33	; 0x21
 80016a0:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80016a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80016a4:	2302      	movs	r3, #2
 80016a6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80016a8:	408b      	lsls	r3, r1
 80016aa:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2320      	movs	r3, #32
 80016b0:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 80016b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0e3      	beq.n	8001680 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 80016b8:	4798      	blx	r3
 80016ba:	e7e1      	b.n	8001680 <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016bc:	2308      	movs	r3, #8
 80016be:	408b      	lsls	r3, r1
 80016c0:	4213      	tst	r3, r2
 80016c2:	d0dd      	beq.n	8001680 <HAL_DMA_IRQHandler+0x38>
 80016c4:	072b      	lsls	r3, r5, #28
 80016c6:	d5db      	bpl.n	8001680 <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	220e      	movs	r2, #14
 80016cc:	4393      	bics	r3, r2
 80016ce:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80016d2:	2301      	movs	r3, #1
 80016d4:	0019      	movs	r1, r3
 80016d6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80016d8:	40a1      	lsls	r1, r4
 80016da:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016dc:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80016de:	2221      	movs	r2, #33	; 0x21
 80016e0:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 80016e2:	2200      	movs	r2, #0
 80016e4:	331f      	adds	r3, #31
 80016e6:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 80016e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0c8      	beq.n	8001680 <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 80016ee:	4798      	blx	r3
}  
 80016f0:	e7c6      	b.n	8001680 <HAL_DMA_IRQHandler+0x38>
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	46c6      	mov	lr, r8
 80016f8:	b500      	push	{lr}
 80016fa:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 80016fc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80016fe:	e07e      	b.n	80017fe <HAL_GPIO_Init+0x10a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001700:	08df      	lsrs	r7, r3, #3
 8001702:	3708      	adds	r7, #8
 8001704:	00bf      	lsls	r7, r7, #2
 8001706:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001708:	2507      	movs	r5, #7
 800170a:	401d      	ands	r5, r3
 800170c:	00ad      	lsls	r5, r5, #2
 800170e:	240f      	movs	r4, #15
 8001710:	40ac      	lsls	r4, r5
 8001712:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001714:	690c      	ldr	r4, [r1, #16]
 8001716:	40ac      	lsls	r4, r5
 8001718:	0025      	movs	r5, r4
 800171a:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 800171c:	503d      	str	r5, [r7, r0]
 800171e:	e07e      	b.n	800181e <HAL_GPIO_Init+0x12a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001720:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001722:	4664      	mov	r4, ip
 8001724:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001726:	68ce      	ldr	r6, [r1, #12]
 8001728:	40be      	lsls	r6, r7
 800172a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800172c:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172e:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001730:	002c      	movs	r4, r5
 8001732:	4645      	mov	r5, r8
 8001734:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001736:	684d      	ldr	r5, [r1, #4]
 8001738:	092e      	lsrs	r6, r5, #4
 800173a:	2501      	movs	r5, #1
 800173c:	4035      	ands	r5, r6
 800173e:	409d      	lsls	r5, r3
 8001740:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001742:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001744:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001746:	4665      	mov	r5, ip
 8001748:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800174a:	688d      	ldr	r5, [r1, #8]
 800174c:	40bd      	lsls	r5, r7
 800174e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001750:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001752:	684c      	ldr	r4, [r1, #4]
 8001754:	00e4      	lsls	r4, r4, #3
 8001756:	d551      	bpl.n	80017fc <HAL_GPIO_Init+0x108>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001758:	4d43      	ldr	r5, [pc, #268]	; (8001868 <HAL_GPIO_Init+0x174>)
 800175a:	69ae      	ldr	r6, [r5, #24]
 800175c:	2401      	movs	r4, #1
 800175e:	4326      	orrs	r6, r4
 8001760:	61ae      	str	r6, [r5, #24]
 8001762:	69ad      	ldr	r5, [r5, #24]
 8001764:	402c      	ands	r4, r5
 8001766:	9401      	str	r4, [sp, #4]
 8001768:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800176a:	089c      	lsrs	r4, r3, #2
 800176c:	1ca5      	adds	r5, r4, #2
 800176e:	00ad      	lsls	r5, r5, #2
 8001770:	4e3e      	ldr	r6, [pc, #248]	; (800186c <HAL_GPIO_Init+0x178>)
 8001772:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001774:	2503      	movs	r5, #3
 8001776:	401d      	ands	r5, r3
 8001778:	00ad      	lsls	r5, r5, #2
 800177a:	270f      	movs	r7, #15
 800177c:	40af      	lsls	r7, r5
 800177e:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001780:	2790      	movs	r7, #144	; 0x90
 8001782:	05ff      	lsls	r7, r7, #23
 8001784:	42b8      	cmp	r0, r7
 8001786:	d065      	beq.n	8001854 <HAL_GPIO_Init+0x160>
 8001788:	4f39      	ldr	r7, [pc, #228]	; (8001870 <HAL_GPIO_Init+0x17c>)
 800178a:	42b8      	cmp	r0, r7
 800178c:	d064      	beq.n	8001858 <HAL_GPIO_Init+0x164>
 800178e:	4f39      	ldr	r7, [pc, #228]	; (8001874 <HAL_GPIO_Init+0x180>)
 8001790:	42b8      	cmp	r0, r7
 8001792:	d063      	beq.n	800185c <HAL_GPIO_Init+0x168>
 8001794:	4f38      	ldr	r7, [pc, #224]	; (8001878 <HAL_GPIO_Init+0x184>)
 8001796:	42b8      	cmp	r0, r7
 8001798:	d05a      	beq.n	8001850 <HAL_GPIO_Init+0x15c>
 800179a:	2705      	movs	r7, #5
 800179c:	40af      	lsls	r7, r5
 800179e:	003d      	movs	r5, r7
 80017a0:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80017a2:	3402      	adds	r4, #2
 80017a4:	00a4      	lsls	r4, r4, #2
 80017a6:	4e31      	ldr	r6, [pc, #196]	; (800186c <HAL_GPIO_Init+0x178>)
 80017a8:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017aa:	4c34      	ldr	r4, [pc, #208]	; (800187c <HAL_GPIO_Init+0x188>)
 80017ac:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017ae:	43d4      	mvns	r4, r2
 80017b0:	0026      	movs	r6, r4
 80017b2:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b4:	684f      	ldr	r7, [r1, #4]
 80017b6:	03ff      	lsls	r7, r7, #15
 80017b8:	d501      	bpl.n	80017be <HAL_GPIO_Init+0xca>
        {
          SET_BIT(temp, iocurrent); 
 80017ba:	4315      	orrs	r5, r2
 80017bc:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80017be:	4d2f      	ldr	r5, [pc, #188]	; (800187c <HAL_GPIO_Init+0x188>)
 80017c0:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80017c2:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80017c4:	002e      	movs	r6, r5
 80017c6:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c8:	684f      	ldr	r7, [r1, #4]
 80017ca:	03bf      	lsls	r7, r7, #14
 80017cc:	d501      	bpl.n	80017d2 <HAL_GPIO_Init+0xde>
        { 
          SET_BIT(temp, iocurrent); 
 80017ce:	4315      	orrs	r5, r2
 80017d0:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80017d2:	4d2a      	ldr	r5, [pc, #168]	; (800187c <HAL_GPIO_Init+0x188>)
 80017d4:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80017d8:	002e      	movs	r6, r5
 80017da:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017dc:	684f      	ldr	r7, [r1, #4]
 80017de:	02ff      	lsls	r7, r7, #11
 80017e0:	d501      	bpl.n	80017e6 <HAL_GPIO_Init+0xf2>
        {
          SET_BIT(temp, iocurrent); 
 80017e2:	4315      	orrs	r5, r2
 80017e4:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80017e6:	4d25      	ldr	r5, [pc, #148]	; (800187c <HAL_GPIO_Init+0x188>)
 80017e8:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80017ea:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80017ec:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ee:	684e      	ldr	r6, [r1, #4]
 80017f0:	02b6      	lsls	r6, r6, #10
 80017f2:	d501      	bpl.n	80017f8 <HAL_GPIO_Init+0x104>
        {
          SET_BIT(temp, iocurrent); 
 80017f4:	432a      	orrs	r2, r5
 80017f6:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80017f8:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_GPIO_Init+0x188>)
 80017fa:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80017fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017fe:	680a      	ldr	r2, [r1, #0]
 8001800:	0014      	movs	r4, r2
 8001802:	40dc      	lsrs	r4, r3
 8001804:	d02c      	beq.n	8001860 <HAL_GPIO_Init+0x16c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001806:	2401      	movs	r4, #1
 8001808:	409c      	lsls	r4, r3
 800180a:	46a0      	mov	r8, r4
 800180c:	4022      	ands	r2, r4
    if(iocurrent)
 800180e:	d0f5      	beq.n	80017fc <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001810:	684d      	ldr	r5, [r1, #4]
 8001812:	2d02      	cmp	r5, #2
 8001814:	d100      	bne.n	8001818 <HAL_GPIO_Init+0x124>
 8001816:	e773      	b.n	8001700 <HAL_GPIO_Init+0xc>
 8001818:	2d12      	cmp	r5, #18
 800181a:	d100      	bne.n	800181e <HAL_GPIO_Init+0x12a>
 800181c:	e770      	b.n	8001700 <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 800181e:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001820:	005f      	lsls	r7, r3, #1
 8001822:	2503      	movs	r5, #3
 8001824:	002c      	movs	r4, r5
 8001826:	40bc      	lsls	r4, r7
 8001828:	43e4      	mvns	r4, r4
 800182a:	46a4      	mov	ip, r4
 800182c:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182e:	684c      	ldr	r4, [r1, #4]
 8001830:	4025      	ands	r5, r4
 8001832:	40bd      	lsls	r5, r7
 8001834:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8001836:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001838:	684d      	ldr	r5, [r1, #4]
 800183a:	1e6e      	subs	r6, r5, #1
 800183c:	2e01      	cmp	r6, #1
 800183e:	d800      	bhi.n	8001842 <HAL_GPIO_Init+0x14e>
 8001840:	e76e      	b.n	8001720 <HAL_GPIO_Init+0x2c>
 8001842:	2d11      	cmp	r5, #17
 8001844:	d100      	bne.n	8001848 <HAL_GPIO_Init+0x154>
 8001846:	e76b      	b.n	8001720 <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001848:	2d12      	cmp	r5, #18
 800184a:	d000      	beq.n	800184e <HAL_GPIO_Init+0x15a>
 800184c:	e77a      	b.n	8001744 <HAL_GPIO_Init+0x50>
 800184e:	e767      	b.n	8001720 <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001850:	2703      	movs	r7, #3
 8001852:	e7a3      	b.n	800179c <HAL_GPIO_Init+0xa8>
 8001854:	2700      	movs	r7, #0
 8001856:	e7a1      	b.n	800179c <HAL_GPIO_Init+0xa8>
 8001858:	2701      	movs	r7, #1
 800185a:	e79f      	b.n	800179c <HAL_GPIO_Init+0xa8>
 800185c:	2702      	movs	r7, #2
 800185e:	e79d      	b.n	800179c <HAL_GPIO_Init+0xa8>
  } 
}
 8001860:	b002      	add	sp, #8
 8001862:	bc04      	pop	{r2}
 8001864:	4690      	mov	r8, r2
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000
 8001870:	48000400 	.word	0x48000400
 8001874:	48000800 	.word	0x48000800
 8001878:	48000c00 	.word	0x48000c00
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001880:	6903      	ldr	r3, [r0, #16]
 8001882:	420b      	tst	r3, r1
 8001884:	d101      	bne.n	800188a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001886:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 8001888:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800188a:	2001      	movs	r0, #1
 800188c:	e7fc      	b.n	8001888 <HAL_GPIO_ReadPin+0x8>

0800188e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800188e:	2a00      	cmp	r2, #0
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001892:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001894:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001896:	6181      	str	r1, [r0, #24]
 8001898:	e7fc      	b.n	8001894 <HAL_GPIO_WritePin+0x6>
	...

0800189c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800189c:	b510      	push	{r4, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	4218      	tst	r0, r3
 80018a4:	d100      	bne.n	80018a8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80018a6:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018a8:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80018aa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018ac:	f001 faf8 	bl	8002ea0 <HAL_GPIO_EXTI_Callback>
}
 80018b0:	e7f9      	b.n	80018a6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40010400 	.word	0x40010400

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	6803      	ldr	r3, [r0, #0]
 80018c0:	07db      	lsls	r3, r3, #31
 80018c2:	d536      	bpl.n	8001932 <HAL_RCC_OscConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018c4:	4bc1      	ldr	r3, [pc, #772]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	230c      	movs	r3, #12
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d028      	beq.n	8001922 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018d0:	4bbe      	ldr	r3, [pc, #760]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	230c      	movs	r3, #12
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d01e      	beq.n	800191a <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018dc:	6863      	ldr	r3, [r4, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d04b      	beq.n	800197a <HAL_RCC_OscConfig+0xc2>
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d150      	bne.n	8001988 <HAL_RCC_OscConfig+0xd0>
 80018e6:	4bb9      	ldr	r3, [pc, #740]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	49b9      	ldr	r1, [pc, #740]	; (8001bd0 <HAL_RCC_OscConfig+0x318>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	49b8      	ldr	r1, [pc, #736]	; (8001bd4 <HAL_RCC_OscConfig+0x31c>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	6863      	ldr	r3, [r4, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d05c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fabf 	bl	8000e80 <HAL_GetTick>
 8001902:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001904:	4bb1      	ldr	r3, [pc, #708]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	039b      	lsls	r3, r3, #14
 800190a:	d412      	bmi.n	8001932 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fab8 	bl	8000e80 <HAL_GetTick>
 8001910:	1b40      	subs	r0, r0, r5
 8001912:	2864      	cmp	r0, #100	; 0x64
 8001914:	d9f6      	bls.n	8001904 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 8001916:	2003      	movs	r0, #3
 8001918:	e1ea      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800191a:	4bac      	ldr	r3, [pc, #688]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	03db      	lsls	r3, r3, #15
 8001920:	d5dc      	bpl.n	80018dc <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	4baa      	ldr	r3, [pc, #680]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	039b      	lsls	r3, r3, #14
 8001928:	d503      	bpl.n	8001932 <HAL_RCC_OscConfig+0x7a>
 800192a:	6863      	ldr	r3, [r4, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d100      	bne.n	8001932 <HAL_RCC_OscConfig+0x7a>
 8001930:	e1db      	b.n	8001cea <HAL_RCC_OscConfig+0x432>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	079b      	lsls	r3, r3, #30
 8001936:	d562      	bpl.n	80019fe <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001938:	4ba4      	ldr	r3, [pc, #656]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	220c      	movs	r2, #12
 800193e:	421a      	tst	r2, r3
 8001940:	d04c      	beq.n	80019dc <HAL_RCC_OscConfig+0x124>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001942:	4ba2      	ldr	r3, [pc, #648]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	230c      	movs	r3, #12
 8001948:	4013      	ands	r3, r2
 800194a:	2b08      	cmp	r3, #8
 800194c:	d042      	beq.n	80019d4 <HAL_RCC_OscConfig+0x11c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194e:	68e3      	ldr	r3, [r4, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d076      	beq.n	8001a42 <HAL_RCC_OscConfig+0x18a>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4a9d      	ldr	r2, [pc, #628]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	430b      	orrs	r3, r1
 800195c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7ff fa8f 	bl	8000e80 <HAL_GetTick>
 8001962:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	4b99      	ldr	r3, [pc, #612]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	079b      	lsls	r3, r3, #30
 800196a:	d461      	bmi.n	8001a30 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff fa88 	bl	8000e80 <HAL_GetTick>
 8001970:	1b40      	subs	r0, r0, r5
 8001972:	2802      	cmp	r0, #2
 8001974:	d9f6      	bls.n	8001964 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8001976:	2003      	movs	r0, #3
 8001978:	e1ba      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197a:	4a94      	ldr	r2, [pc, #592]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 800197c:	6811      	ldr	r1, [r2, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	025b      	lsls	r3, r3, #9
 8001982:	430b      	orrs	r3, r1
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e7b7      	b.n	80018f8 <HAL_RCC_OscConfig+0x40>
 8001988:	2b05      	cmp	r3, #5
 800198a:	d009      	beq.n	80019a0 <HAL_RCC_OscConfig+0xe8>
 800198c:	4b8f      	ldr	r3, [pc, #572]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	498f      	ldr	r1, [pc, #572]	; (8001bd0 <HAL_RCC_OscConfig+0x318>)
 8001992:	400a      	ands	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	498e      	ldr	r1, [pc, #568]	; (8001bd4 <HAL_RCC_OscConfig+0x31c>)
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e7ab      	b.n	80018f8 <HAL_RCC_OscConfig+0x40>
 80019a0:	4b8a      	ldr	r3, [pc, #552]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80019a2:	6819      	ldr	r1, [r3, #0]
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	02d2      	lsls	r2, r2, #11
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	0252      	lsls	r2, r2, #9
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e79f      	b.n	80018f8 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 80019b8:	f7ff fa62 	bl	8000e80 <HAL_GetTick>
 80019bc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	4b83      	ldr	r3, [pc, #524]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	039b      	lsls	r3, r3, #14
 80019c4:	d5b5      	bpl.n	8001932 <HAL_RCC_OscConfig+0x7a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c6:	f7ff fa5b 	bl	8000e80 <HAL_GetTick>
 80019ca:	1b40      	subs	r0, r0, r5
 80019cc:	2864      	cmp	r0, #100	; 0x64
 80019ce:	d9f6      	bls.n	80019be <HAL_RCC_OscConfig+0x106>
            return HAL_TIMEOUT;
 80019d0:	2003      	movs	r0, #3
 80019d2:	e18d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019d4:	4b7d      	ldr	r3, [pc, #500]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	03db      	lsls	r3, r3, #15
 80019da:	d4b8      	bmi.n	800194e <HAL_RCC_OscConfig+0x96>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019dc:	4b7b      	ldr	r3, [pc, #492]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	079b      	lsls	r3, r3, #30
 80019e2:	d504      	bpl.n	80019ee <HAL_RCC_OscConfig+0x136>
 80019e4:	68e3      	ldr	r3, [r4, #12]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x136>
        return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e180      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4977      	ldr	r1, [pc, #476]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80019f0:	680b      	ldr	r3, [r1, #0]
 80019f2:	22f8      	movs	r2, #248	; 0xf8
 80019f4:	4393      	bics	r3, r2
 80019f6:	6922      	ldr	r2, [r4, #16]
 80019f8:	00d2      	lsls	r2, r2, #3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	071b      	lsls	r3, r3, #28
 8001a02:	d544      	bpl.n	8001a8e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a04:	69e3      	ldr	r3, [r4, #28]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d02e      	beq.n	8001a68 <HAL_RCC_OscConfig+0x1b0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4a70      	ldr	r2, [pc, #448]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a0c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a0e:	2101      	movs	r1, #1
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fa34 	bl	8000e80 <HAL_GetTick>
 8001a18:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	4b6c      	ldr	r3, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	079b      	lsls	r3, r3, #30
 8001a20:	d435      	bmi.n	8001a8e <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a22:	f7ff fa2d 	bl	8000e80 <HAL_GetTick>
 8001a26:	1b40      	subs	r0, r0, r5
 8001a28:	2802      	cmp	r0, #2
 8001a2a:	d9f6      	bls.n	8001a1a <HAL_RCC_OscConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	e15f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4966      	ldr	r1, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a32:	680b      	ldr	r3, [r1, #0]
 8001a34:	22f8      	movs	r2, #248	; 0xf8
 8001a36:	4393      	bics	r3, r2
 8001a38:	6922      	ldr	r2, [r4, #16]
 8001a3a:	00d2      	lsls	r2, r2, #3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e7dd      	b.n	80019fe <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4a62      	ldr	r2, [pc, #392]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a44:	6813      	ldr	r3, [r2, #0]
 8001a46:	2101      	movs	r1, #1
 8001a48:	438b      	bics	r3, r1
 8001a4a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fa18 	bl	8000e80 <HAL_GetTick>
 8001a50:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	4b5e      	ldr	r3, [pc, #376]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	079b      	lsls	r3, r3, #30
 8001a58:	d5d1      	bpl.n	80019fe <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fa11 	bl	8000e80 <HAL_GetTick>
 8001a5e:	1b40      	subs	r0, r0, r5
 8001a60:	2802      	cmp	r0, #2
 8001a62:	d9f6      	bls.n	8001a52 <HAL_RCC_OscConfig+0x19a>
            return HAL_TIMEOUT;
 8001a64:	2003      	movs	r0, #3
 8001a66:	e143      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a6a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	438b      	bics	r3, r1
 8001a70:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fa05 	bl	8000e80 <HAL_GetTick>
 8001a76:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b54      	ldr	r3, [pc, #336]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	079b      	lsls	r3, r3, #30
 8001a7e:	d506      	bpl.n	8001a8e <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff f9fe 	bl	8000e80 <HAL_GetTick>
 8001a84:	1b40      	subs	r0, r0, r5
 8001a86:	2802      	cmp	r0, #2
 8001a88:	d9f6      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1c0>
        {
          return HAL_TIMEOUT;
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	e130      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	075b      	lsls	r3, r3, #29
 8001a92:	d575      	bpl.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a94:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	d42e      	bmi.n	8001afa <HAL_RCC_OscConfig+0x242>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4a4b      	ldr	r2, [pc, #300]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a9e:	69d1      	ldr	r1, [r2, #28]
 8001aa0:	2080      	movs	r0, #128	; 0x80
 8001aa2:	0540      	lsls	r0, r0, #21
 8001aa4:	4301      	orrs	r1, r0
 8001aa6:	61d1      	str	r1, [r2, #28]
 8001aa8:	69d3      	ldr	r3, [r2, #28]
 8001aaa:	4003      	ands	r3, r0
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ab0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <HAL_RCC_OscConfig+0x320>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	05db      	lsls	r3, r3, #23
 8001ab8:	d521      	bpl.n	8001afe <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aba:	68a3      	ldr	r3, [r4, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d032      	beq.n	8001b26 <HAL_RCC_OscConfig+0x26e>
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d136      	bne.n	8001b32 <HAL_RCC_OscConfig+0x27a>
 8001ac4:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	438a      	bics	r2, r1
 8001acc:	621a      	str	r2, [r3, #32]
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	3103      	adds	r1, #3
 8001ad2:	438a      	bics	r2, r1
 8001ad4:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad6:	68a3      	ldr	r3, [r4, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d040      	beq.n	8001b5e <HAL_RCC_OscConfig+0x2a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff f9d0 	bl	8000e80 <HAL_GetTick>
 8001ae0:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	079b      	lsls	r3, r3, #30
 8001ae8:	d448      	bmi.n	8001b7c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff f9c9 	bl	8000e80 <HAL_GetTick>
 8001aee:	1b80      	subs	r0, r0, r6
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <HAL_RCC_OscConfig+0x324>)
 8001af2:	4298      	cmp	r0, r3
 8001af4:	d9f5      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001af6:	2003      	movs	r0, #3
 8001af8:	e0fa      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
    FlagStatus       pwrclkchanged = RESET;
 8001afa:	2500      	movs	r5, #0
 8001afc:	e7d9      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afe:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <HAL_RCC_OscConfig+0x320>)
 8001b00:	6811      	ldr	r1, [r2, #0]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	430b      	orrs	r3, r1
 8001b08:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f9b9 	bl	8000e80 <HAL_GetTick>
 8001b0e:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_OscConfig+0x320>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	05db      	lsls	r3, r3, #23
 8001b16:	d4d0      	bmi.n	8001aba <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b18:	f7ff f9b2 	bl	8000e80 <HAL_GetTick>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	2864      	cmp	r0, #100	; 0x64
 8001b20:	d9f6      	bls.n	8001b10 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001b22:	2003      	movs	r0, #3
 8001b24:	e0e4      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b26:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001b28:	6a13      	ldr	r3, [r2, #32]
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e7d1      	b.n	8001ad6 <HAL_RCC_OscConfig+0x21e>
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d009      	beq.n	8001b4a <HAL_RCC_OscConfig+0x292>
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	621a      	str	r2, [r3, #32]
 8001b40:	6a1a      	ldr	r2, [r3, #32]
 8001b42:	3103      	adds	r1, #3
 8001b44:	438a      	bics	r2, r1
 8001b46:	621a      	str	r2, [r3, #32]
 8001b48:	e7c5      	b.n	8001ad6 <HAL_RCC_OscConfig+0x21e>
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001b4c:	6a1a      	ldr	r2, [r3, #32]
 8001b4e:	2104      	movs	r1, #4
 8001b50:	430a      	orrs	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	3903      	subs	r1, #3
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	621a      	str	r2, [r3, #32]
 8001b5c:	e7bb      	b.n	8001ad6 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f98f 	bl	8000e80 <HAL_GetTick>
 8001b62:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	079b      	lsls	r3, r3, #30
 8001b6a:	d507      	bpl.n	8001b7c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f988 	bl	8000e80 <HAL_GetTick>
 8001b70:	1b80      	subs	r0, r0, r6
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <HAL_RCC_OscConfig+0x324>)
 8001b74:	4298      	cmp	r0, r3
 8001b76:	d9f5      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8001b78:	2003      	movs	r0, #3
 8001b7a:	e0b9      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b7c:	2d01      	cmp	r5, #1
 8001b7e:	d01e      	beq.n	8001bbe <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	06db      	lsls	r3, r3, #27
 8001b84:	d55a      	bpl.n	8001c3c <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b86:	6963      	ldr	r3, [r4, #20]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d02b      	beq.n	8001be4 <HAL_RCC_OscConfig+0x32c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b8c:	3305      	adds	r3, #5
 8001b8e:	d049      	beq.n	8001c24 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b94:	2104      	movs	r1, #4
 8001b96:	430a      	orrs	r2, r1
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9c:	3903      	subs	r1, #3
 8001b9e:	438a      	bics	r2, r1
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f96d 	bl	8000e80 <HAL_GetTick>
 8001ba6:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bac:	079b      	lsls	r3, r3, #30
 8001bae:	d545      	bpl.n	8001c3c <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bb0:	f7ff f966 	bl	8000e80 <HAL_GetTick>
 8001bb4:	1b40      	subs	r0, r0, r5
 8001bb6:	2802      	cmp	r0, #2
 8001bb8:	d9f6      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bba:	2003      	movs	r0, #3
 8001bbc:	e098      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbe:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001bc0:	69d3      	ldr	r3, [r2, #28]
 8001bc2:	4907      	ldr	r1, [pc, #28]	; (8001be0 <HAL_RCC_OscConfig+0x328>)
 8001bc4:	400b      	ands	r3, r1
 8001bc6:	61d3      	str	r3, [r2, #28]
 8001bc8:	e7da      	b.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	fffeffff 	.word	0xfffeffff
 8001bd4:	fffbffff 	.word	0xfffbffff
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	00001388 	.word	0x00001388
 8001be0:	efffffff 	.word	0xefffffff
      __HAL_RCC_HSI14ADC_DISABLE();
 8001be4:	4b44      	ldr	r3, [pc, #272]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be8:	2104      	movs	r1, #4
 8001bea:	430a      	orrs	r2, r1
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf0:	3903      	subs	r1, #3
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f943 	bl	8000e80 <HAL_GetTick>
 8001bfa:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bfc:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	079b      	lsls	r3, r3, #30
 8001c02:	d406      	bmi.n	8001c12 <HAL_RCC_OscConfig+0x35a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c04:	f7ff f93c 	bl	8000e80 <HAL_GetTick>
 8001c08:	1b40      	subs	r0, r0, r5
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	d9f6      	bls.n	8001bfc <HAL_RCC_OscConfig+0x344>
          return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
 8001c10:	e06e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c12:	4939      	ldr	r1, [pc, #228]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001c14:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001c16:	22f8      	movs	r2, #248	; 0xf8
 8001c18:	4393      	bics	r3, r2
 8001c1a:	69a2      	ldr	r2, [r4, #24]
 8001c1c:	00d2      	lsls	r2, r2, #3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	634b      	str	r3, [r1, #52]	; 0x34
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c24:	4a34      	ldr	r2, [pc, #208]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001c26:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001c28:	2104      	movs	r1, #4
 8001c2a:	438b      	bics	r3, r1
 8001c2c:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c2e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001c30:	31f4      	adds	r1, #244	; 0xf4
 8001c32:	438b      	bics	r3, r1
 8001c34:	69a1      	ldr	r1, [r4, #24]
 8001c36:	00c9      	lsls	r1, r1, #3
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3c:	6a23      	ldr	r3, [r4, #32]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d055      	beq.n	8001cee <HAL_RCC_OscConfig+0x436>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c42:	4a2d      	ldr	r2, [pc, #180]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001c44:	6851      	ldr	r1, [r2, #4]
 8001c46:	220c      	movs	r2, #12
 8001c48:	400a      	ands	r2, r1
 8001c4a:	2a08      	cmp	r2, #8
 8001c4c:	d052      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x43c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d012      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	4929      	ldr	r1, [pc, #164]	; (8001cfc <HAL_RCC_OscConfig+0x444>)
 8001c58:	400b      	ands	r3, r1
 8001c5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f910 	bl	8000e80 <HAL_GetTick>
 8001c60:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c62:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	019b      	lsls	r3, r3, #6
 8001c68:	d53d      	bpl.n	8001ce6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff f909 	bl	8000e80 <HAL_GetTick>
 8001c6e:	1b00      	subs	r0, r0, r4
 8001c70:	2802      	cmp	r0, #2
 8001c72:	d9f6      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3aa>
          {
            return HAL_TIMEOUT;
 8001c74:	2003      	movs	r0, #3
 8001c76:	e03b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	491f      	ldr	r1, [pc, #124]	; (8001cfc <HAL_RCC_OscConfig+0x444>)
 8001c7e:	400b      	ands	r3, r1
 8001c80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c82:	f7ff f8fd 	bl	8000e80 <HAL_GetTick>
 8001c86:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	d506      	bpl.n	8001c9e <HAL_RCC_OscConfig+0x3e6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff f8f6 	bl	8000e80 <HAL_GetTick>
 8001c94:	1b40      	subs	r0, r0, r5
 8001c96:	2802      	cmp	r0, #2
 8001c98:	d9f6      	bls.n	8001c88 <HAL_RCC_OscConfig+0x3d0>
            return HAL_TIMEOUT;
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	e028      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4914      	ldr	r1, [pc, #80]	; (8001d00 <HAL_RCC_OscConfig+0x448>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001cb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001cb6:	4301      	orrs	r1, r0
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	0452      	lsls	r2, r2, #17
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f8db 	bl	8000e80 <HAL_GetTick>
 8001cca:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_RCC_OscConfig+0x440>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	019b      	lsls	r3, r3, #6
 8001cd2:	d406      	bmi.n	8001ce2 <HAL_RCC_OscConfig+0x42a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff f8d4 	bl	8000e80 <HAL_GetTick>
 8001cd8:	1b00      	subs	r0, r0, r4
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	d9f6      	bls.n	8001ccc <HAL_RCC_OscConfig+0x414>
            return HAL_TIMEOUT;
 8001cde:	2003      	movs	r0, #3
 8001ce0:	e006      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	e004      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	e002      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
        return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
  return HAL_OK;
 8001cee:	2000      	movs	r0, #0
}
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	e7fb      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	feffffff 	.word	0xfeffffff
 8001d00:	ffc2ffff 	.word	0xffc2ffff

08001d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b530      	push	{r4, r5, lr}
 8001d06:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d08:	aa04      	add	r2, sp, #16
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	c832      	ldmia	r0!, {r1, r4, r5}
 8001d10:	c232      	stmia	r2!, {r1, r4, r5}
 8001d12:	0011      	movs	r1, r2
 8001d14:	6802      	ldr	r2, [r0, #0]
 8001d16:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d18:	466a      	mov	r2, sp
 8001d1a:	3310      	adds	r3, #16
 8001d1c:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001d1e:	c213      	stmia	r2!, {r0, r1, r4}
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x60>)
 8001d26:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d28:	230c      	movs	r3, #12
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d113      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d30:	0c91      	lsrs	r1, r2, #18
 8001d32:	3307      	adds	r3, #7
 8001d34:	4019      	ands	r1, r3
 8001d36:	a804      	add	r0, sp, #16
 8001d38:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d3a:	490a      	ldr	r1, [pc, #40]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x60>)
 8001d3c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001d3e:	400b      	ands	r3, r1
 8001d40:	4669      	mov	r1, sp
 8001d42:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d44:	03d3      	lsls	r3, r2, #15
 8001d46:	d402      	bmi.n	8001d4e <HAL_RCC_GetSysClockFreq+0x4a>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x64>)
 8001d4a:	4360      	muls	r0, r4
 8001d4c:	e005      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001d4e:	4807      	ldr	r0, [pc, #28]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x68>)
 8001d50:	f7fe f9e2 	bl	8000118 <__udivsi3>
 8001d54:	4360      	muls	r0, r4
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d5a:	b009      	add	sp, #36	; 0x24
 8001d5c:	bd30      	pop	{r4, r5, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	080046d8 	.word	0x080046d8
 8001d64:	40021000 	.word	0x40021000
 8001d68:	003d0900 	.word	0x003d0900
 8001d6c:	007a1200 	.word	0x007a1200

08001d70 <HAL_RCC_ClockConfig>:
{
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	0005      	movs	r5, r0
 8001d74:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d76:	4b4d      	ldr	r3, [pc, #308]	; (8001eac <HAL_RCC_ClockConfig+0x13c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	428b      	cmp	r3, r1
 8001d80:	d20b      	bcs.n	8001d9a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	494a      	ldr	r1, [pc, #296]	; (8001eac <HAL_RCC_ClockConfig+0x13c>)
 8001d84:	680b      	ldr	r3, [r1, #0]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4393      	bics	r3, r2
 8001d8a:	4323      	orrs	r3, r4
 8001d8c:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d8e:	680b      	ldr	r3, [r1, #0]
 8001d90:	401a      	ands	r2, r3
 8001d92:	4294      	cmp	r4, r2
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001d96:	2001      	movs	r0, #1
 8001d98:	e085      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9a:	682b      	ldr	r3, [r5, #0]
 8001d9c:	079b      	lsls	r3, r3, #30
 8001d9e:	d506      	bpl.n	8001dae <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4a43      	ldr	r2, [pc, #268]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001da2:	6853      	ldr	r3, [r2, #4]
 8001da4:	21f0      	movs	r1, #240	; 0xf0
 8001da6:	438b      	bics	r3, r1
 8001da8:	68a9      	ldr	r1, [r5, #8]
 8001daa:	430b      	orrs	r3, r1
 8001dac:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	682b      	ldr	r3, [r5, #0]
 8001db0:	07db      	lsls	r3, r3, #31
 8001db2:	d54c      	bpl.n	8001e4e <HAL_RCC_ClockConfig+0xde>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db4:	686b      	ldr	r3, [r5, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d021      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x8e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d025      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x9a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	4a3c      	ldr	r2, [pc, #240]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	0792      	lsls	r2, r2, #30
 8001dc4:	d400      	bmi.n	8001dc8 <HAL_RCC_ClockConfig+0x58>
 8001dc6:	e06f      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x138>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc8:	4939      	ldr	r1, [pc, #228]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001dca:	684a      	ldr	r2, [r1, #4]
 8001dcc:	2003      	movs	r0, #3
 8001dce:	4382      	bics	r2, r0
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001dd4:	f7ff f854 	bl	8000e80 <HAL_GetTick>
 8001dd8:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	686b      	ldr	r3, [r5, #4]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d01a      	beq.n	8001e16 <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d026      	beq.n	8001e32 <HAL_RCC_ClockConfig+0xc2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	220c      	movs	r2, #12
 8001dea:	421a      	tst	r2, r3
 8001dec:	d02f      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dee:	f7ff f847 	bl	8000e80 <HAL_GetTick>
 8001df2:	1b80      	subs	r0, r0, r6
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_RCC_ClockConfig+0x144>)
 8001df6:	4298      	cmp	r0, r3
 8001df8:	d9f4      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x74>
          return HAL_TIMEOUT;
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	e053      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	0392      	lsls	r2, r2, #14
 8001e04:	d4e0      	bmi.n	8001dc8 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 8001e06:	2001      	movs	r0, #1
 8001e08:	e04d      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	0192      	lsls	r2, r2, #6
 8001e10:	d4da      	bmi.n	8001dc8 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 8001e12:	2001      	movs	r0, #1
 8001e14:	e047      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	230c      	movs	r3, #12
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d015      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e22:	f7ff f82d 	bl	8000e80 <HAL_GetTick>
 8001e26:	1b80      	subs	r0, r0, r6
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x144>)
 8001e2a:	4298      	cmp	r0, r3
 8001e2c:	d9f3      	bls.n	8001e16 <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 8001e2e:	2003      	movs	r0, #3
 8001e30:	e039      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	230c      	movs	r3, #12
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d007      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7ff f81f 	bl	8000e80 <HAL_GetTick>
 8001e42:	1b80      	subs	r0, r0, r6
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_ClockConfig+0x144>)
 8001e46:	4298      	cmp	r0, r3
 8001e48:	d9f3      	bls.n	8001e32 <HAL_RCC_ClockConfig+0xc2>
          return HAL_TIMEOUT;
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	e02b      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x136>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_RCC_ClockConfig+0x13c>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	2301      	movs	r3, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	429c      	cmp	r4, r3
 8001e58:	d20b      	bcs.n	8001e72 <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4914      	ldr	r1, [pc, #80]	; (8001eac <HAL_RCC_ClockConfig+0x13c>)
 8001e5c:	680b      	ldr	r3, [r1, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4393      	bics	r3, r2
 8001e62:	4323      	orrs	r3, r4
 8001e64:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e66:	680b      	ldr	r3, [r1, #0]
 8001e68:	401a      	ands	r2, r3
 8001e6a:	4294      	cmp	r4, r2
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
 8001e6e:	2001      	movs	r0, #1
 8001e70:	e019      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e72:	682b      	ldr	r3, [r5, #0]
 8001e74:	075b      	lsls	r3, r3, #29
 8001e76:	d506      	bpl.n	8001e86 <HAL_RCC_ClockConfig+0x116>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001e7a:	6853      	ldr	r3, [r2, #4]
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x148>)
 8001e7e:	400b      	ands	r3, r1
 8001e80:	68e9      	ldr	r1, [r5, #12]
 8001e82:	430b      	orrs	r3, r1
 8001e84:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e86:	f7ff ff3d 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	0912      	lsrs	r2, r2, #4
 8001e90:	230f      	movs	r3, #15
 8001e92:	4013      	ands	r3, r2
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x14c>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	40d8      	lsrs	r0, r3
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x150>)
 8001e9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7fe ffc4 	bl	8000e2c <HAL_InitTick>
  return HAL_OK;
 8001ea4:	2000      	movs	r0, #0
}
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	e7fc      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x136>
 8001eac:	40022000 	.word	0x40022000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	00001388 	.word	0x00001388
 8001eb8:	fffff8ff 	.word	0xfffff8ff
 8001ebc:	080047ac 	.word	0x080047ac
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001ec4:	4b01      	ldr	r3, [pc, #4]	; (8001ecc <HAL_RCC_GetHCLKFreq+0x8>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
}
 8001ec8:	4770      	bx	lr
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	20000000 	.word	0x20000000

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ed2:	f7ff fff7 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	0a12      	lsrs	r2, r2, #8
 8001edc:	2307      	movs	r3, #7
 8001ede:	4013      	ands	r3, r2
 8001ee0:	4a02      	ldr	r2, [pc, #8]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	40d8      	lsrs	r0, r3
}    
 8001ee6:	bd10      	pop	{r4, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	080047bc 	.word	0x080047bc

08001ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ef6:	6803      	ldr	r3, [r0, #0]
 8001ef8:	03db      	lsls	r3, r3, #15
 8001efa:	d535      	bpl.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efc:	4b3c      	ldr	r3, [pc, #240]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	d448      	bmi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4a3a      	ldr	r2, [pc, #232]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f06:	69d1      	ldr	r1, [r2, #28]
 8001f08:	2080      	movs	r0, #128	; 0x80
 8001f0a:	0540      	lsls	r0, r0, #21
 8001f0c:	4301      	orrs	r1, r0
 8001f0e:	61d1      	str	r1, [r2, #28]
 8001f10:	69d3      	ldr	r3, [r2, #28]
 8001f12:	4003      	ands	r3, r0
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f18:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b36      	ldr	r3, [pc, #216]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	05db      	lsls	r3, r3, #23
 8001f20:	d53b      	bpl.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f22:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	22c0      	movs	r2, #192	; 0xc0
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f2c:	d013      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001f2e:	6861      	ldr	r1, [r4, #4]
 8001f30:	400a      	ands	r2, r1
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00f      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f38:	6a18      	ldr	r0, [r3, #32]
 8001f3a:	4a2f      	ldr	r2, [pc, #188]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f3c:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f3e:	6a1e      	ldr	r6, [r3, #32]
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	0249      	lsls	r1, r1, #9
 8001f44:	4331      	orrs	r1, r6
 8001f46:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f48:	6a19      	ldr	r1, [r3, #32]
 8001f4a:	4e2c      	ldr	r6, [pc, #176]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001f4c:	4031      	ands	r1, r6
 8001f4e:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f50:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f52:	07c3      	lsls	r3, r0, #31
 8001f54:	d435      	bmi.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f56:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f58:	6a13      	ldr	r3, [r2, #32]
 8001f5a:	4927      	ldr	r1, [pc, #156]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	6861      	ldr	r1, [r4, #4]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f64:	2d01      	cmp	r5, #1
 8001f66:	d03b      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	07db      	lsls	r3, r3, #31
 8001f6c:	d506      	bpl.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f6e:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f72:	2103      	movs	r1, #3
 8001f74:	438b      	bics	r3, r1
 8001f76:	68a1      	ldr	r1, [r4, #8]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	069b      	lsls	r3, r3, #26
 8001f80:	d533      	bpl.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f82:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f86:	2110      	movs	r1, #16
 8001f88:	438b      	bics	r3, r1
 8001f8a:	68e1      	ldr	r1, [r4, #12]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f90:	2000      	movs	r0, #0
}
 8001f92:	b002      	add	sp, #8
 8001f94:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2500      	movs	r5, #0
 8001f98:	e7bf      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001f9c:	6811      	ldr	r1, [r2, #0]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001fa6:	f7fe ff6b 	bl	8000e80 <HAL_GetTick>
 8001faa:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	05db      	lsls	r3, r3, #23
 8001fb2:	d4b6      	bmi.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb4:	f7fe ff64 	bl	8000e80 <HAL_GetTick>
 8001fb8:	1b80      	subs	r0, r0, r6
 8001fba:	2864      	cmp	r0, #100	; 0x64
 8001fbc:	d9f6      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	e7e7      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8001fc2:	f7fe ff5d 	bl	8000e80 <HAL_GetTick>
 8001fc6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	079b      	lsls	r3, r3, #30
 8001fce:	d4c2      	bmi.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff56 	bl	8000e80 <HAL_GetTick>
 8001fd4:	1b80      	subs	r0, r0, r6
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001fd8:	4298      	cmp	r0, r3
 8001fda:	d9f5      	bls.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 8001fdc:	2003      	movs	r0, #3
 8001fde:	e7d8      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	69d3      	ldr	r3, [r2, #28]
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001fe4:	400b      	ands	r3, r1
 8001fe6:	61d3      	str	r3, [r2, #28]
 8001fe8:	e7be      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8001fea:	2000      	movs	r0, #0
 8001fec:	e7d1      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	fffffcff 	.word	0xfffffcff
 8001ffc:	fffeffff 	.word	0xfffeffff
 8002000:	00001388 	.word	0x00001388
 8002004:	efffffff 	.word	0xefffffff

08002008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002008:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800200a:	6a03      	ldr	r3, [r0, #32]
 800200c:	2201      	movs	r2, #1
 800200e:	4393      	bics	r3, r2
 8002010:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002012:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002014:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002016:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002018:	2573      	movs	r5, #115	; 0x73
 800201a:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800201c:	680d      	ldr	r5, [r1, #0]
 800201e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002020:	2502      	movs	r5, #2
 8002022:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002024:	688d      	ldr	r5, [r1, #8]
 8002026:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002028:	4d12      	ldr	r5, [pc, #72]	; (8002074 <TIM_OC1_SetConfig+0x6c>)
 800202a:	42a8      	cmp	r0, r5
 800202c:	d014      	beq.n	8002058 <TIM_OC1_SetConfig+0x50>
 800202e:	4d12      	ldr	r5, [pc, #72]	; (8002078 <TIM_OC1_SetConfig+0x70>)
 8002030:	42a8      	cmp	r0, r5
 8002032:	d011      	beq.n	8002058 <TIM_OC1_SetConfig+0x50>
 8002034:	4d11      	ldr	r5, [pc, #68]	; (800207c <TIM_OC1_SetConfig+0x74>)
 8002036:	42a8      	cmp	r0, r5
 8002038:	d00e      	beq.n	8002058 <TIM_OC1_SetConfig+0x50>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800203a:	4d0e      	ldr	r5, [pc, #56]	; (8002074 <TIM_OC1_SetConfig+0x6c>)
 800203c:	42a8      	cmp	r0, r5
 800203e:	d012      	beq.n	8002066 <TIM_OC1_SetConfig+0x5e>
 8002040:	4d0d      	ldr	r5, [pc, #52]	; (8002078 <TIM_OC1_SetConfig+0x70>)
 8002042:	42a8      	cmp	r0, r5
 8002044:	d00f      	beq.n	8002066 <TIM_OC1_SetConfig+0x5e>
 8002046:	4d0d      	ldr	r5, [pc, #52]	; (800207c <TIM_OC1_SetConfig+0x74>)
 8002048:	42a8      	cmp	r0, r5
 800204a:	d00c      	beq.n	8002066 <TIM_OC1_SetConfig+0x5e>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800204c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800204e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002050:	684a      	ldr	r2, [r1, #4]
 8002052:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002054:	6203      	str	r3, [r0, #32]
}
 8002056:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8002058:	2508      	movs	r5, #8
 800205a:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 800205c:	68cd      	ldr	r5, [r1, #12]
 800205e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002060:	2504      	movs	r5, #4
 8002062:	43ab      	bics	r3, r5
 8002064:	e7e9      	b.n	800203a <TIM_OC1_SetConfig+0x32>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002066:	4d06      	ldr	r5, [pc, #24]	; (8002080 <TIM_OC1_SetConfig+0x78>)
 8002068:	402c      	ands	r4, r5
    tmpcr2 |= OC_Config->OCIdleState;
 800206a:	694d      	ldr	r5, [r1, #20]
 800206c:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800206e:	698d      	ldr	r5, [r1, #24]
 8002070:	432c      	orrs	r4, r5
 8002072:	e7eb      	b.n	800204c <TIM_OC1_SetConfig+0x44>
 8002074:	40012c00 	.word	0x40012c00
 8002078:	40014400 	.word	0x40014400
 800207c:	40014800 	.word	0x40014800
 8002080:	fffffcff 	.word	0xfffffcff

08002084 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002084:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002086:	6a03      	ldr	r3, [r0, #32]
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <TIM_OC3_SetConfig+0x6c>)
 800208a:	4013      	ands	r3, r2
 800208c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800208e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002090:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002092:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002094:	3275      	adds	r2, #117	; 0x75
 8002096:	32ff      	adds	r2, #255	; 0xff
 8002098:	4394      	bics	r4, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800209a:	680a      	ldr	r2, [r1, #0]
 800209c:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <TIM_OC3_SetConfig+0x70>)
 80020a0:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020a2:	688a      	ldr	r2, [r1, #8]
 80020a4:	0212      	lsls	r2, r2, #8
 80020a6:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020a8:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <TIM_OC3_SetConfig+0x74>)
 80020aa:	4290      	cmp	r0, r2
 80020ac:	d00e      	beq.n	80020cc <TIM_OC3_SetConfig+0x48>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <TIM_OC3_SetConfig+0x74>)
 80020b0:	4290      	cmp	r0, r2
 80020b2:	d013      	beq.n	80020dc <TIM_OC3_SetConfig+0x58>
 80020b4:	4a11      	ldr	r2, [pc, #68]	; (80020fc <TIM_OC3_SetConfig+0x78>)
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d010      	beq.n	80020dc <TIM_OC3_SetConfig+0x58>
 80020ba:	4a11      	ldr	r2, [pc, #68]	; (8002100 <TIM_OC3_SetConfig+0x7c>)
 80020bc:	4290      	cmp	r0, r2
 80020be:	d00d      	beq.n	80020dc <TIM_OC3_SetConfig+0x58>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020c2:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020c4:	684a      	ldr	r2, [r1, #4]
 80020c6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020c8:	6203      	str	r3, [r0, #32]
}
 80020ca:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <TIM_OC3_SetConfig+0x80>)
 80020ce:	4013      	ands	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020d0:	68ca      	ldr	r2, [r1, #12]
 80020d2:	0212      	lsls	r2, r2, #8
 80020d4:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 80020d6:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <TIM_OC3_SetConfig+0x84>)
 80020d8:	4013      	ands	r3, r2
 80020da:	e7e8      	b.n	80020ae <TIM_OC3_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020dc:	4a0b      	ldr	r2, [pc, #44]	; (800210c <TIM_OC3_SetConfig+0x88>)
 80020de:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020e0:	694a      	ldr	r2, [r1, #20]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020e6:	698a      	ldr	r2, [r1, #24]
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	4315      	orrs	r5, r2
 80020ec:	e7e8      	b.n	80020c0 <TIM_OC3_SetConfig+0x3c>
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	fffffeff 	.word	0xfffffeff
 80020f4:	fffffdff 	.word	0xfffffdff
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40014400 	.word	0x40014400
 8002100:	40014800 	.word	0x40014800
 8002104:	fffff7ff 	.word	0xfffff7ff
 8002108:	fffffbff 	.word	0xfffffbff
 800210c:	ffffcfff 	.word	0xffffcfff

08002110 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002110:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002112:	6a03      	ldr	r3, [r0, #32]
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <TIM_OC4_SetConfig+0x50>)
 8002116:	4013      	ands	r3, r2
 8002118:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800211a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800211c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800211e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002120:	4c10      	ldr	r4, [pc, #64]	; (8002164 <TIM_OC4_SetConfig+0x54>)
 8002122:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002124:	680c      	ldr	r4, [r1, #0]
 8002126:	0224      	lsls	r4, r4, #8
 8002128:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800212a:	4c0f      	ldr	r4, [pc, #60]	; (8002168 <TIM_OC4_SetConfig+0x58>)
 800212c:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800212e:	688c      	ldr	r4, [r1, #8]
 8002130:	0324      	lsls	r4, r4, #12
 8002132:	4323      	orrs	r3, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002134:	4c0d      	ldr	r4, [pc, #52]	; (800216c <TIM_OC4_SetConfig+0x5c>)
 8002136:	42a0      	cmp	r0, r4
 8002138:	d00b      	beq.n	8002152 <TIM_OC4_SetConfig+0x42>
 800213a:	4c0d      	ldr	r4, [pc, #52]	; (8002170 <TIM_OC4_SetConfig+0x60>)
 800213c:	42a0      	cmp	r0, r4
 800213e:	d008      	beq.n	8002152 <TIM_OC4_SetConfig+0x42>
 8002140:	4c0c      	ldr	r4, [pc, #48]	; (8002174 <TIM_OC4_SetConfig+0x64>)
 8002142:	42a0      	cmp	r0, r4
 8002144:	d005      	beq.n	8002152 <TIM_OC4_SetConfig+0x42>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002146:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002148:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800214a:	684a      	ldr	r2, [r1, #4]
 800214c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800214e:	6203      	str	r3, [r0, #32]
}
 8002150:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002152:	4c09      	ldr	r4, [pc, #36]	; (8002178 <TIM_OC4_SetConfig+0x68>)
 8002154:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002156:	694d      	ldr	r5, [r1, #20]
 8002158:	01ad      	lsls	r5, r5, #6
 800215a:	4325      	orrs	r5, r4
 800215c:	e7f3      	b.n	8002146 <TIM_OC4_SetConfig+0x36>
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	ffffefff 	.word	0xffffefff
 8002164:	ffff8cff 	.word	0xffff8cff
 8002168:	ffffdfff 	.word	0xffffdfff
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40014400 	.word	0x40014400
 8002174:	40014800 	.word	0x40014800
 8002178:	ffffbfff 	.word	0xffffbfff

0800217c <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800217c:	6803      	ldr	r3, [r0, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	2101      	movs	r1, #1
 8002182:	430a      	orrs	r2, r1
 8002184:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002186:	6802      	ldr	r2, [r0, #0]
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	430b      	orrs	r3, r1
 800218c:	6013      	str	r3, [r2, #0]
}
 800218e:	2000      	movs	r0, #0
 8002190:	4770      	bx	lr

08002192 <HAL_TIM_TriggerCallback>:
}
 8002192:	4770      	bx	lr

08002194 <HAL_TIM_IRQHandler>:
{
 8002194:	b510      	push	{r4, lr}
 8002196:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002198:	6803      	ldr	r3, [r0, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	0792      	lsls	r2, r2, #30
 800219e:	d50f      	bpl.n	80021c0 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	0792      	lsls	r2, r2, #30
 80021a4:	d50c      	bpl.n	80021c0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021a6:	2203      	movs	r2, #3
 80021a8:	4252      	negs	r2, r2
 80021aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b0:	6803      	ldr	r3, [r0, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	079b      	lsls	r3, r3, #30
 80021b6:	d063      	beq.n	8002280 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 80021b8:	f000 fe88 	bl	8002ecc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021bc:	2300      	movs	r3, #0
 80021be:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	0752      	lsls	r2, r2, #29
 80021c6:	d512      	bpl.n	80021ee <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	0752      	lsls	r2, r2, #29
 80021cc:	d50f      	bpl.n	80021ee <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ce:	2205      	movs	r2, #5
 80021d0:	4252      	negs	r2, r2
 80021d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	699a      	ldr	r2, [r3, #24]
 80021dc:	23c0      	movs	r3, #192	; 0xc0
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	421a      	tst	r2, r3
 80021e2:	d053      	beq.n	800228c <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80021e4:	0020      	movs	r0, r4
 80021e6:	f000 fe71 	bl	8002ecc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	2300      	movs	r3, #0
 80021ec:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	0712      	lsls	r2, r2, #28
 80021f4:	d510      	bpl.n	8002218 <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	0712      	lsls	r2, r2, #28
 80021fa:	d50d      	bpl.n	8002218 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021fc:	2209      	movs	r2, #9
 80021fe:	4252      	negs	r2, r2
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002202:	2304      	movs	r3, #4
 8002204:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	079b      	lsls	r3, r3, #30
 800220c:	d045      	beq.n	800229a <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	0020      	movs	r0, r4
 8002210:	f000 fe5c 	bl	8002ecc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002214:	2300      	movs	r3, #0
 8002216:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	06d2      	lsls	r2, r2, #27
 800221e:	d512      	bpl.n	8002246 <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	06d2      	lsls	r2, r2, #27
 8002224:	d50f      	bpl.n	8002246 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002226:	2211      	movs	r2, #17
 8002228:	4252      	negs	r2, r2
 800222a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800222c:	2308      	movs	r3, #8
 800222e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	23c0      	movs	r3, #192	; 0xc0
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	421a      	tst	r2, r3
 800223a:	d035      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 800223c:	0020      	movs	r0, r4
 800223e:	f000 fe45 	bl	8002ecc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	2300      	movs	r3, #0
 8002244:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	07d2      	lsls	r2, r2, #31
 800224c:	d502      	bpl.n	8002254 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	07d2      	lsls	r2, r2, #31
 8002252:	d430      	bmi.n	80022b6 <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	0612      	lsls	r2, r2, #24
 800225a:	d502      	bpl.n	8002262 <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	0612      	lsls	r2, r2, #24
 8002260:	d430      	bmi.n	80022c4 <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	0652      	lsls	r2, r2, #25
 8002268:	d502      	bpl.n	8002270 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	0652      	lsls	r2, r2, #25
 800226e:	d430      	bmi.n	80022d2 <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	0692      	lsls	r2, r2, #26
 8002276:	d502      	bpl.n	800227e <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	0692      	lsls	r2, r2, #26
 800227c:	d430      	bmi.n	80022e0 <HAL_TIM_IRQHandler+0x14c>
}
 800227e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002280:	f000 fe1e 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002284:	0020      	movs	r0, r4
 8002286:	f000 fe27 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 800228a:	e797      	b.n	80021bc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228c:	0020      	movs	r0, r4
 800228e:	f000 fe17 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002292:	0020      	movs	r0, r4
 8002294:	f000 fe20 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002298:	e7a7      	b.n	80021ea <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	0020      	movs	r0, r4
 800229c:	f000 fe10 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	0020      	movs	r0, r4
 80022a2:	f000 fe19 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 80022a6:	e7b5      	b.n	8002214 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a8:	0020      	movs	r0, r4
 80022aa:	f000 fe09 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ae:	0020      	movs	r0, r4
 80022b0:	f000 fe12 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 80022b4:	e7c5      	b.n	8002242 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b6:	2202      	movs	r2, #2
 80022b8:	4252      	negs	r2, r2
 80022ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022bc:	0020      	movs	r0, r4
 80022be:	f000 fdf5 	bl	8002eac <HAL_TIM_PeriodElapsedCallback>
 80022c2:	e7c7      	b.n	8002254 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c4:	2281      	movs	r2, #129	; 0x81
 80022c6:	4252      	negs	r2, r2
 80022c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022ca:	0020      	movs	r0, r4
 80022cc:	f000 f9bd 	bl	800264a <HAL_TIMEx_BreakCallback>
 80022d0:	e7c7      	b.n	8002262 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d2:	2241      	movs	r2, #65	; 0x41
 80022d4:	4252      	negs	r2, r2
 80022d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022d8:	0020      	movs	r0, r4
 80022da:	f7ff ff5a 	bl	8002192 <HAL_TIM_TriggerCallback>
 80022de:	e7c7      	b.n	8002270 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022e0:	2221      	movs	r2, #33	; 0x21
 80022e2:	4252      	negs	r2, r2
 80022e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80022e6:	0020      	movs	r0, r4
 80022e8:	f000 f9ae 	bl	8002648 <HAL_TIMEx_CommutationCallback>
}
 80022ec:	e7c7      	b.n	800227e <HAL_TIM_IRQHandler+0xea>
	...

080022f0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80022f0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f2:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <TIM_Base_SetConfig+0x70>)
 80022f4:	4290      	cmp	r0, r2
 80022f6:	d02a      	beq.n	800234e <TIM_Base_SetConfig+0x5e>
 80022f8:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <TIM_Base_SetConfig+0x74>)
 80022fa:	4290      	cmp	r0, r2
 80022fc:	d027      	beq.n	800234e <TIM_Base_SetConfig+0x5e>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <TIM_Base_SetConfig+0x70>)
 8002300:	4290      	cmp	r0, r2
 8002302:	d00b      	beq.n	800231c <TIM_Base_SetConfig+0x2c>
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <TIM_Base_SetConfig+0x74>)
 8002306:	4290      	cmp	r0, r2
 8002308:	d008      	beq.n	800231c <TIM_Base_SetConfig+0x2c>
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <TIM_Base_SetConfig+0x78>)
 800230c:	4290      	cmp	r0, r2
 800230e:	d005      	beq.n	800231c <TIM_Base_SetConfig+0x2c>
 8002310:	4a16      	ldr	r2, [pc, #88]	; (800236c <TIM_Base_SetConfig+0x7c>)
 8002312:	4290      	cmp	r0, r2
 8002314:	d002      	beq.n	800231c <TIM_Base_SetConfig+0x2c>
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <TIM_Base_SetConfig+0x80>)
 8002318:	4290      	cmp	r0, r2
 800231a:	d103      	bne.n	8002324 <TIM_Base_SetConfig+0x34>
    tmpcr1 &= ~TIM_CR1_CKD;
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <TIM_Base_SetConfig+0x84>)
 800231e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002320:	68ca      	ldr	r2, [r1, #12]
 8002322:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	4393      	bics	r3, r2
 8002328:	694a      	ldr	r2, [r1, #20]
 800232a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800232c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800232e:	688b      	ldr	r3, [r1, #8]
 8002330:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002332:	680b      	ldr	r3, [r1, #0]
 8002334:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <TIM_Base_SetConfig+0x70>)
 8002338:	4298      	cmp	r0, r3
 800233a:	d00d      	beq.n	8002358 <TIM_Base_SetConfig+0x68>
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <TIM_Base_SetConfig+0x7c>)
 800233e:	4298      	cmp	r0, r3
 8002340:	d00a      	beq.n	8002358 <TIM_Base_SetConfig+0x68>
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <TIM_Base_SetConfig+0x80>)
 8002344:	4298      	cmp	r0, r3
 8002346:	d007      	beq.n	8002358 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8002348:	2301      	movs	r3, #1
 800234a:	6143      	str	r3, [r0, #20]
}
 800234c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800234e:	2270      	movs	r2, #112	; 0x70
 8002350:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002352:	684a      	ldr	r2, [r1, #4]
 8002354:	4313      	orrs	r3, r2
 8002356:	e7d2      	b.n	80022fe <TIM_Base_SetConfig+0xe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002358:	690b      	ldr	r3, [r1, #16]
 800235a:	6303      	str	r3, [r0, #48]	; 0x30
 800235c:	e7f4      	b.n	8002348 <TIM_Base_SetConfig+0x58>
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400
 8002368:	40002000 	.word	0x40002000
 800236c:	40014400 	.word	0x40014400
 8002370:	40014800 	.word	0x40014800
 8002374:	fffffcff 	.word	0xfffffcff

08002378 <HAL_TIM_Base_Init>:
{
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 800237c:	d014      	beq.n	80023a8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800237e:	233d      	movs	r3, #61	; 0x3d
 8002380:	5cc3      	ldrb	r3, [r0, r3]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002386:	253d      	movs	r5, #61	; 0x3d
 8002388:	2302      	movs	r3, #2
 800238a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238c:	1d21      	adds	r1, r4, #4
 800238e:	6820      	ldr	r0, [r4, #0]
 8002390:	f7ff ffae 	bl	80022f0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002394:	2301      	movs	r3, #1
 8002396:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002398:	2000      	movs	r0, #0
}
 800239a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800239c:	2200      	movs	r2, #0
 800239e:	333c      	adds	r3, #60	; 0x3c
 80023a0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80023a2:	f001 f8cf 	bl	8003544 <HAL_TIM_Base_MspInit>
 80023a6:	e7ee      	b.n	8002386 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
 80023aa:	e7f6      	b.n	800239a <HAL_TIM_Base_Init+0x22>

080023ac <HAL_TIM_PWM_Init>:
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80023b0:	d014      	beq.n	80023dc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80023b2:	233d      	movs	r3, #61	; 0x3d
 80023b4:	5cc3      	ldrb	r3, [r0, r3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80023ba:	253d      	movs	r5, #61	; 0x3d
 80023bc:	2302      	movs	r3, #2
 80023be:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c0:	1d21      	adds	r1, r4, #4
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	f7ff ff94 	bl	80022f0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80023c8:	2301      	movs	r3, #1
 80023ca:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80023cc:	2000      	movs	r0, #0
}
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80023d0:	2200      	movs	r2, #0
 80023d2:	333c      	adds	r3, #60	; 0x3c
 80023d4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80023d6:	f001 f897 	bl	8003508 <HAL_TIM_PWM_MspInit>
 80023da:	e7ee      	b.n	80023ba <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 80023dc:	2001      	movs	r0, #1
 80023de:	e7f6      	b.n	80023ce <HAL_TIM_PWM_Init+0x22>

080023e0 <TIM_OC2_SetConfig>:
{
 80023e0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e2:	6a03      	ldr	r3, [r0, #32]
 80023e4:	2210      	movs	r2, #16
 80023e6:	4393      	bics	r3, r2
 80023e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80023ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80023ec:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80023ee:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023f0:	4a16      	ldr	r2, [pc, #88]	; (800244c <TIM_OC2_SetConfig+0x6c>)
 80023f2:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f4:	680a      	ldr	r2, [r1, #0]
 80023f6:	0212      	lsls	r2, r2, #8
 80023f8:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 80023fa:	2220      	movs	r2, #32
 80023fc:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023fe:	688a      	ldr	r2, [r1, #8]
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	4313      	orrs	r3, r2
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002404:	4a12      	ldr	r2, [pc, #72]	; (8002450 <TIM_OC2_SetConfig+0x70>)
 8002406:	4290      	cmp	r0, r2
 8002408:	d00e      	beq.n	8002428 <TIM_OC2_SetConfig+0x48>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800240a:	4a11      	ldr	r2, [pc, #68]	; (8002450 <TIM_OC2_SetConfig+0x70>)
 800240c:	4290      	cmp	r0, r2
 800240e:	d013      	beq.n	8002438 <TIM_OC2_SetConfig+0x58>
 8002410:	4a10      	ldr	r2, [pc, #64]	; (8002454 <TIM_OC2_SetConfig+0x74>)
 8002412:	4290      	cmp	r0, r2
 8002414:	d010      	beq.n	8002438 <TIM_OC2_SetConfig+0x58>
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <TIM_OC2_SetConfig+0x78>)
 8002418:	4290      	cmp	r0, r2
 800241a:	d00d      	beq.n	8002438 <TIM_OC2_SetConfig+0x58>
  TIMx->CR2 = tmpcr2;
 800241c:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800241e:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002420:	684a      	ldr	r2, [r1, #4]
 8002422:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002424:	6203      	str	r3, [r0, #32]
}
 8002426:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8002428:	2280      	movs	r2, #128	; 0x80
 800242a:	4393      	bics	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800242c:	68ca      	ldr	r2, [r1, #12]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8002432:	2240      	movs	r2, #64	; 0x40
 8002434:	4393      	bics	r3, r2
 8002436:	e7e8      	b.n	800240a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002438:	4a08      	ldr	r2, [pc, #32]	; (800245c <TIM_OC2_SetConfig+0x7c>)
 800243a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800243c:	694a      	ldr	r2, [r1, #20]
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002442:	698a      	ldr	r2, [r1, #24]
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	4315      	orrs	r5, r2
 8002448:	e7e8      	b.n	800241c <TIM_OC2_SetConfig+0x3c>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	ffff8cff 	.word	0xffff8cff
 8002450:	40012c00 	.word	0x40012c00
 8002454:	40014400 	.word	0x40014400
 8002458:	40014800 	.word	0x40014800
 800245c:	fffff3ff 	.word	0xfffff3ff

08002460 <HAL_TIM_PWM_ConfigChannel>:
{
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	0004      	movs	r4, r0
 8002464:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002466:	233c      	movs	r3, #60	; 0x3c
 8002468:	5cc3      	ldrb	r3, [r0, r3]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d069      	beq.n	8002542 <HAL_TIM_PWM_ConfigChannel+0xe2>
 800246e:	2101      	movs	r1, #1
 8002470:	233c      	movs	r3, #60	; 0x3c
 8002472:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	3101      	adds	r1, #1
 8002476:	3301      	adds	r3, #1
 8002478:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 800247a:	2a04      	cmp	r2, #4
 800247c:	d037      	beq.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x8e>
 800247e:	d919      	bls.n	80024b4 <HAL_TIM_PWM_ConfigChannel+0x54>
 8002480:	2a08      	cmp	r2, #8
 8002482:	d04a      	beq.n	800251a <HAL_TIM_PWM_ConfigChannel+0xba>
 8002484:	2a0c      	cmp	r2, #12
 8002486:	d12a      	bne.n	80024de <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002488:	0029      	movs	r1, r5
 800248a:	6800      	ldr	r0, [r0, #0]
 800248c:	f7ff fe40 	bl	8002110 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002490:	6822      	ldr	r2, [r4, #0]
 8002492:	69d1      	ldr	r1, [r2, #28]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	430b      	orrs	r3, r1
 800249a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800249c:	6822      	ldr	r2, [r4, #0]
 800249e:	69d3      	ldr	r3, [r2, #28]
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 80024a2:	400b      	ands	r3, r1
 80024a4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024a6:	6821      	ldr	r1, [r4, #0]
 80024a8:	69cb      	ldr	r3, [r1, #28]
 80024aa:	692a      	ldr	r2, [r5, #16]
 80024ac:	0212      	lsls	r2, r2, #8
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61cb      	str	r3, [r1, #28]
    break;
 80024b2:	e014      	b.n	80024de <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d112      	bne.n	80024de <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024b8:	0029      	movs	r1, r5
 80024ba:	6800      	ldr	r0, [r0, #0]
 80024bc:	f7ff fda4 	bl	8002008 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	6993      	ldr	r3, [r2, #24]
 80024c4:	2108      	movs	r1, #8
 80024c6:	430b      	orrs	r3, r1
 80024c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	6993      	ldr	r3, [r2, #24]
 80024ce:	3904      	subs	r1, #4
 80024d0:	438b      	bics	r3, r1
 80024d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	6993      	ldr	r3, [r2, #24]
 80024d8:	6929      	ldr	r1, [r5, #16]
 80024da:	430b      	orrs	r3, r1
 80024dc:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80024de:	2201      	movs	r2, #1
 80024e0:	233d      	movs	r3, #61	; 0x3d
 80024e2:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80024e4:	2200      	movs	r2, #0
 80024e6:	3b01      	subs	r3, #1
 80024e8:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80024ea:	2000      	movs	r0, #0
}
 80024ec:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024ee:	0029      	movs	r1, r5
 80024f0:	6800      	ldr	r0, [r0, #0]
 80024f2:	f7ff ff75 	bl	80023e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024f6:	6822      	ldr	r2, [r4, #0]
 80024f8:	6991      	ldr	r1, [r2, #24]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	430b      	orrs	r3, r1
 8002500:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002502:	6822      	ldr	r2, [r4, #0]
 8002504:	6993      	ldr	r3, [r2, #24]
 8002506:	4910      	ldr	r1, [pc, #64]	; (8002548 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8002508:	400b      	ands	r3, r1
 800250a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800250c:	6821      	ldr	r1, [r4, #0]
 800250e:	698b      	ldr	r3, [r1, #24]
 8002510:	692a      	ldr	r2, [r5, #16]
 8002512:	0212      	lsls	r2, r2, #8
 8002514:	4313      	orrs	r3, r2
 8002516:	618b      	str	r3, [r1, #24]
    break;
 8002518:	e7e1      	b.n	80024de <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800251a:	0029      	movs	r1, r5
 800251c:	6800      	ldr	r0, [r0, #0]
 800251e:	f7ff fdb1 	bl	8002084 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	69d3      	ldr	r3, [r2, #28]
 8002526:	2108      	movs	r1, #8
 8002528:	430b      	orrs	r3, r1
 800252a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800252c:	6822      	ldr	r2, [r4, #0]
 800252e:	69d3      	ldr	r3, [r2, #28]
 8002530:	3904      	subs	r1, #4
 8002532:	438b      	bics	r3, r1
 8002534:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002536:	6822      	ldr	r2, [r4, #0]
 8002538:	69d3      	ldr	r3, [r2, #28]
 800253a:	6929      	ldr	r1, [r5, #16]
 800253c:	430b      	orrs	r3, r1
 800253e:	61d3      	str	r3, [r2, #28]
    break;
 8002540:	e7cd      	b.n	80024de <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 8002542:	2002      	movs	r0, #2
 8002544:	e7d2      	b.n	80024ec <HAL_TIM_PWM_ConfigChannel+0x8c>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	fffffbff 	.word	0xfffffbff

0800254c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800254c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800254e:	2401      	movs	r4, #1
 8002550:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002552:	6a03      	ldr	r3, [r0, #32]
 8002554:	43a3      	bics	r3, r4
 8002556:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002558:	6a03      	ldr	r3, [r0, #32]
 800255a:	408a      	lsls	r2, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	6202      	str	r2, [r0, #32]
}
 8002560:	bd10      	pop	{r4, pc}
	...

08002564 <HAL_TIM_PWM_Start_IT>:
{
 8002564:	b510      	push	{r4, lr}
 8002566:	0004      	movs	r4, r0
  switch (Channel)
 8002568:	2904      	cmp	r1, #4
 800256a:	d02e      	beq.n	80025ca <HAL_TIM_PWM_Start_IT+0x66>
 800256c:	d909      	bls.n	8002582 <HAL_TIM_PWM_Start_IT+0x1e>
 800256e:	2908      	cmp	r1, #8
 8002570:	d031      	beq.n	80025d6 <HAL_TIM_PWM_Start_IT+0x72>
 8002572:	290c      	cmp	r1, #12
 8002574:	d10c      	bne.n	8002590 <HAL_TIM_PWM_Start_IT+0x2c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002576:	6802      	ldr	r2, [r0, #0]
 8002578:	68d3      	ldr	r3, [r2, #12]
 800257a:	2010      	movs	r0, #16
 800257c:	4303      	orrs	r3, r0
 800257e:	60d3      	str	r3, [r2, #12]
    break;
 8002580:	e006      	b.n	8002590 <HAL_TIM_PWM_Start_IT+0x2c>
  switch (Channel)
 8002582:	2900      	cmp	r1, #0
 8002584:	d104      	bne.n	8002590 <HAL_TIM_PWM_Start_IT+0x2c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002586:	6802      	ldr	r2, [r0, #0]
 8002588:	68d3      	ldr	r3, [r2, #12]
 800258a:	2002      	movs	r0, #2
 800258c:	4303      	orrs	r3, r0
 800258e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002590:	2201      	movs	r2, #1
 8002592:	6820      	ldr	r0, [r4, #0]
 8002594:	f7ff ffda 	bl	800254c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_TIM_PWM_Start_IT+0x8c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d022      	beq.n	80025e6 <HAL_TIM_PWM_Start_IT+0x82>
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <HAL_TIM_PWM_Start_IT+0x90>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d021      	beq.n	80025ea <HAL_TIM_PWM_Start_IT+0x86>
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_TIM_PWM_Start_IT+0x94>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d01a      	beq.n	80025e2 <HAL_TIM_PWM_Start_IT+0x7e>
 80025ac:	2200      	movs	r2, #0
 80025ae:	2a00      	cmp	r2, #0
 80025b0:	d004      	beq.n	80025bc <HAL_TIM_PWM_Start_IT+0x58>
    __HAL_TIM_MOE_ENABLE(htim);
 80025b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0212      	lsls	r2, r2, #8
 80025b8:	430a      	orrs	r2, r1
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80025bc:	6822      	ldr	r2, [r4, #0]
 80025be:	6813      	ldr	r3, [r2, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	430b      	orrs	r3, r1
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	2000      	movs	r0, #0
 80025c8:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025ca:	6802      	ldr	r2, [r0, #0]
 80025cc:	68d3      	ldr	r3, [r2, #12]
 80025ce:	2004      	movs	r0, #4
 80025d0:	4303      	orrs	r3, r0
 80025d2:	60d3      	str	r3, [r2, #12]
    break;
 80025d4:	e7dc      	b.n	8002590 <HAL_TIM_PWM_Start_IT+0x2c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80025d6:	6802      	ldr	r2, [r0, #0]
 80025d8:	68d3      	ldr	r3, [r2, #12]
 80025da:	2008      	movs	r0, #8
 80025dc:	4303      	orrs	r3, r0
 80025de:	60d3      	str	r3, [r2, #12]
    break;
 80025e0:	e7d6      	b.n	8002590 <HAL_TIM_PWM_Start_IT+0x2c>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e2:	2201      	movs	r2, #1
 80025e4:	e7e3      	b.n	80025ae <HAL_TIM_PWM_Start_IT+0x4a>
 80025e6:	2201      	movs	r2, #1
 80025e8:	e7e1      	b.n	80025ae <HAL_TIM_PWM_Start_IT+0x4a>
 80025ea:	2201      	movs	r2, #1
 80025ec:	e7df      	b.n	80025ae <HAL_TIM_PWM_Start_IT+0x4a>
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800

080025fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80025fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80025fe:	233c      	movs	r3, #60	; 0x3c
 8002600:	5cc3      	ldrb	r3, [r0, r3]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d01e      	beq.n	8002644 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8002606:	223c      	movs	r2, #60	; 0x3c
 8002608:	2501      	movs	r5, #1
 800260a:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	243d      	movs	r4, #61	; 0x3d
 800260e:	2302      	movs	r3, #2
 8002610:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002612:	6806      	ldr	r6, [r0, #0]
 8002614:	6873      	ldr	r3, [r6, #4]
 8002616:	2770      	movs	r7, #112	; 0x70
 8002618:	43bb      	bics	r3, r7
 800261a:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800261c:	6806      	ldr	r6, [r0, #0]
 800261e:	6873      	ldr	r3, [r6, #4]
 8002620:	680f      	ldr	r7, [r1, #0]
 8002622:	433b      	orrs	r3, r7
 8002624:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002626:	6806      	ldr	r6, [r0, #0]
 8002628:	68b3      	ldr	r3, [r6, #8]
 800262a:	2780      	movs	r7, #128	; 0x80
 800262c:	43bb      	bics	r3, r7
 800262e:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002630:	6806      	ldr	r6, [r0, #0]
 8002632:	68b3      	ldr	r3, [r6, #8]
 8002634:	6849      	ldr	r1, [r1, #4]
 8002636:	430b      	orrs	r3, r1
 8002638:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 800263a:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 800263c:	2300      	movs	r3, #0
 800263e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8002640:	2000      	movs	r0, #0
}
 8002642:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8002644:	2002      	movs	r0, #2
 8002646:	e7fc      	b.n	8002642 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08002648 <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002648:	4770      	bx	lr

0800264a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800264a:	4770      	bx	lr

0800264c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800264c:	6802      	ldr	r2, [r0, #0]
 800264e:	6813      	ldr	r3, [r2, #0]
 8002650:	21c0      	movs	r1, #192	; 0xc0
 8002652:	438b      	bics	r3, r1
 8002654:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002656:	2220      	movs	r2, #32
 8002658:	2369      	movs	r3, #105	; 0x69
 800265a:	54c2      	strb	r2, [r0, r3]
}
 800265c:	4770      	bx	lr
	...

08002660 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002660:	6802      	ldr	r2, [r0, #0]
 8002662:	6813      	ldr	r3, [r2, #0]
 8002664:	4906      	ldr	r1, [pc, #24]	; (8002680 <UART_EndRxTransfer+0x20>)
 8002666:	400b      	ands	r3, r1
 8002668:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266a:	6802      	ldr	r2, [r0, #0]
 800266c:	6893      	ldr	r3, [r2, #8]
 800266e:	3123      	adds	r1, #35	; 0x23
 8002670:	31ff      	adds	r1, #255	; 0xff
 8002672:	438b      	bics	r3, r1
 8002674:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002676:	2220      	movs	r2, #32
 8002678:	236a      	movs	r3, #106	; 0x6a
 800267a:	54c2      	strb	r2, [r0, r3]
}
 800267c:	4770      	bx	lr
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	fffffedf 	.word	0xfffffedf

08002684 <HAL_UART_Transmit_IT>:
{
 8002684:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8002686:	2369      	movs	r3, #105	; 0x69
 8002688:	5cc3      	ldrb	r3, [r0, r3]
 800268a:	2b20      	cmp	r3, #32
 800268c:	d001      	beq.n	8002692 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 800268e:	2002      	movs	r0, #2
}
 8002690:	bd10      	pop	{r4, pc}
    if((pData == NULL ) || (Size == 0U))
 8002692:	2900      	cmp	r1, #0
 8002694:	d024      	beq.n	80026e0 <HAL_UART_Transmit_IT+0x5c>
 8002696:	2a00      	cmp	r2, #0
 8002698:	d024      	beq.n	80026e4 <HAL_UART_Transmit_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	015b      	lsls	r3, r3, #5
 800269e:	6884      	ldr	r4, [r0, #8]
 80026a0:	429c      	cmp	r4, r3
 80026a2:	d016      	beq.n	80026d2 <HAL_UART_Transmit_IT+0x4e>
    __HAL_LOCK(huart);
 80026a4:	2368      	movs	r3, #104	; 0x68
 80026a6:	5cc3      	ldrb	r3, [r0, r3]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d01d      	beq.n	80026e8 <HAL_UART_Transmit_IT+0x64>
    huart->pTxBuffPtr = pData;
 80026ac:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80026ae:	2350      	movs	r3, #80	; 0x50
 80026b0:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80026b2:	3302      	adds	r3, #2
 80026b4:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ba:	2121      	movs	r1, #33	; 0x21
 80026bc:	2269      	movs	r2, #105	; 0x69
 80026be:	5481      	strb	r1, [r0, r2]
    __HAL_UNLOCK(huart);
 80026c0:	3a01      	subs	r2, #1
 80026c2:	5483      	strb	r3, [r0, r2]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80026c4:	6802      	ldr	r2, [r0, #0]
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	315f      	adds	r1, #95	; 0x5f
 80026ca:	430b      	orrs	r3, r1
 80026cc:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80026ce:	2000      	movs	r0, #0
 80026d0:	e7de      	b.n	8002690 <HAL_UART_Transmit_IT+0xc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d2:	6903      	ldr	r3, [r0, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e5      	bne.n	80026a4 <HAL_UART_Transmit_IT+0x20>
      if((((uint32_t)pData)&1U) != 0U)
 80026d8:	07cb      	lsls	r3, r1, #31
 80026da:	d5e3      	bpl.n	80026a4 <HAL_UART_Transmit_IT+0x20>
        return  HAL_ERROR;
 80026dc:	2001      	movs	r0, #1
 80026de:	e7d7      	b.n	8002690 <HAL_UART_Transmit_IT+0xc>
      return HAL_ERROR;
 80026e0:	2001      	movs	r0, #1
 80026e2:	e7d5      	b.n	8002690 <HAL_UART_Transmit_IT+0xc>
 80026e4:	2001      	movs	r0, #1
 80026e6:	e7d3      	b.n	8002690 <HAL_UART_Transmit_IT+0xc>
    __HAL_LOCK(huart);
 80026e8:	2002      	movs	r0, #2
 80026ea:	e7d1      	b.n	8002690 <HAL_UART_Transmit_IT+0xc>

080026ec <HAL_UART_Receive_IT>:
{
 80026ec:	b530      	push	{r4, r5, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 80026ee:	236a      	movs	r3, #106	; 0x6a
 80026f0:	5cc3      	ldrb	r3, [r0, r3]
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d001      	beq.n	80026fa <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 80026f6:	2002      	movs	r0, #2
}
 80026f8:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 80026fa:	2900      	cmp	r1, #0
 80026fc:	d048      	beq.n	8002790 <HAL_UART_Receive_IT+0xa4>
 80026fe:	2a00      	cmp	r2, #0
 8002700:	d048      	beq.n	8002794 <HAL_UART_Receive_IT+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002702:	6883      	ldr	r3, [r0, #8]
 8002704:	2480      	movs	r4, #128	; 0x80
 8002706:	0164      	lsls	r4, r4, #5
 8002708:	42a3      	cmp	r3, r4
 800270a:	d02b      	beq.n	8002764 <HAL_UART_Receive_IT+0x78>
    __HAL_LOCK(huart);
 800270c:	2468      	movs	r4, #104	; 0x68
 800270e:	5d04      	ldrb	r4, [r0, r4]
 8002710:	2c01      	cmp	r4, #1
 8002712:	d041      	beq.n	8002798 <HAL_UART_Receive_IT+0xac>
 8002714:	2501      	movs	r5, #1
 8002716:	2468      	movs	r4, #104	; 0x68
 8002718:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr = pData;
 800271a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800271c:	2158      	movs	r1, #88	; 0x58
 800271e:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 8002720:	3102      	adds	r1, #2
 8002722:	5242      	strh	r2, [r0, r1]
    UART_MASK_COMPUTATION(huart);
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	0152      	lsls	r2, r2, #5
 8002728:	4293      	cmp	r3, r2
 800272a:	d022      	beq.n	8002772 <HAL_UART_Receive_IT+0x86>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_UART_Receive_IT+0x50>
 8002730:	6903      	ldr	r3, [r0, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d128      	bne.n	8002788 <HAL_UART_Receive_IT+0x9c>
 8002736:	22ff      	movs	r2, #255	; 0xff
 8002738:	335c      	adds	r3, #92	; 0x5c
 800273a:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273c:	2300      	movs	r3, #0
 800273e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002740:	2122      	movs	r1, #34	; 0x22
 8002742:	226a      	movs	r2, #106	; 0x6a
 8002744:	5481      	strb	r1, [r0, r2]
    __HAL_UNLOCK(huart);
 8002746:	3a02      	subs	r2, #2
 8002748:	5483      	strb	r3, [r0, r2]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800274a:	6802      	ldr	r2, [r0, #0]
 800274c:	6893      	ldr	r3, [r2, #8]
 800274e:	3921      	subs	r1, #33	; 0x21
 8002750:	430b      	orrs	r3, r1
 8002752:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002754:	6802      	ldr	r2, [r0, #0]
 8002756:	6811      	ldr	r1, [r2, #0]
 8002758:	2390      	movs	r3, #144	; 0x90
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	430b      	orrs	r3, r1
 800275e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8002760:	2000      	movs	r0, #0
 8002762:	e7c9      	b.n	80026f8 <HAL_UART_Receive_IT+0xc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002764:	6904      	ldr	r4, [r0, #16]
 8002766:	2c00      	cmp	r4, #0
 8002768:	d1d0      	bne.n	800270c <HAL_UART_Receive_IT+0x20>
      if((((uint32_t)pData)&1U) != 0U)
 800276a:	07cc      	lsls	r4, r1, #31
 800276c:	d5ce      	bpl.n	800270c <HAL_UART_Receive_IT+0x20>
        return  HAL_ERROR;
 800276e:	2001      	movs	r0, #1
 8002770:	e7c2      	b.n	80026f8 <HAL_UART_Receive_IT+0xc>
    UART_MASK_COMPUTATION(huart);
 8002772:	6903      	ldr	r3, [r0, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <HAL_UART_Receive_IT+0x94>
 8002778:	4a08      	ldr	r2, [pc, #32]	; (800279c <HAL_UART_Receive_IT+0xb0>)
 800277a:	335c      	adds	r3, #92	; 0x5c
 800277c:	52c2      	strh	r2, [r0, r3]
 800277e:	e7dd      	b.n	800273c <HAL_UART_Receive_IT+0x50>
 8002780:	22ff      	movs	r2, #255	; 0xff
 8002782:	235c      	movs	r3, #92	; 0x5c
 8002784:	52c2      	strh	r2, [r0, r3]
 8002786:	e7d9      	b.n	800273c <HAL_UART_Receive_IT+0x50>
 8002788:	227f      	movs	r2, #127	; 0x7f
 800278a:	235c      	movs	r3, #92	; 0x5c
 800278c:	52c2      	strh	r2, [r0, r3]
 800278e:	e7d5      	b.n	800273c <HAL_UART_Receive_IT+0x50>
      return HAL_ERROR;
 8002790:	2001      	movs	r0, #1
 8002792:	e7b1      	b.n	80026f8 <HAL_UART_Receive_IT+0xc>
 8002794:	2001      	movs	r0, #1
 8002796:	e7af      	b.n	80026f8 <HAL_UART_Receive_IT+0xc>
    __HAL_LOCK(huart);
 8002798:	2002      	movs	r0, #2
 800279a:	e7ad      	b.n	80026f8 <HAL_UART_Receive_IT+0xc>
 800279c:	000001ff 	.word	0x000001ff

080027a0 <HAL_UART_Transmit_DMA>:
{
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	0004      	movs	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80027a4:	2069      	movs	r0, #105	; 0x69
 80027a6:	5c20      	ldrb	r0, [r4, r0]
 80027a8:	2820      	cmp	r0, #32
 80027aa:	d001      	beq.n	80027b0 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 80027ac:	2002      	movs	r0, #2
}
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == NULL ) || (Size == 0U))
 80027b0:	2900      	cmp	r1, #0
 80027b2:	d03e      	beq.n	8002832 <HAL_UART_Transmit_DMA+0x92>
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d03e      	beq.n	8002836 <HAL_UART_Transmit_DMA+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	015b      	lsls	r3, r3, #5
 80027bc:	68a0      	ldr	r0, [r4, #8]
 80027be:	4298      	cmp	r0, r3
 80027c0:	d005      	beq.n	80027ce <HAL_UART_Transmit_DMA+0x2e>
    __HAL_LOCK(huart);
 80027c2:	2368      	movs	r3, #104	; 0x68
 80027c4:	5ce3      	ldrb	r3, [r4, r3]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d108      	bne.n	80027dc <HAL_UART_Transmit_DMA+0x3c>
 80027ca:	2002      	movs	r0, #2
 80027cc:	e7ef      	b.n	80027ae <HAL_UART_Transmit_DMA+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ce:	6923      	ldr	r3, [r4, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f6      	bne.n	80027c2 <HAL_UART_Transmit_DMA+0x22>
      if((((uint32_t)pData)&1U) != 0U)
 80027d4:	07cb      	lsls	r3, r1, #31
 80027d6:	d5f4      	bpl.n	80027c2 <HAL_UART_Transmit_DMA+0x22>
        return  HAL_ERROR;
 80027d8:	2001      	movs	r0, #1
 80027da:	e7e8      	b.n	80027ae <HAL_UART_Transmit_DMA+0xe>
    __HAL_LOCK(huart);
 80027dc:	2668      	movs	r6, #104	; 0x68
 80027de:	2301      	movs	r3, #1
 80027e0:	55a3      	strb	r3, [r4, r6]
    huart->pTxBuffPtr = pData;
 80027e2:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80027e4:	334f      	adds	r3, #79	; 0x4f
 80027e6:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80027e8:	3302      	adds	r3, #2
 80027ea:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ec:	2500      	movs	r5, #0
 80027ee:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f0:	2121      	movs	r1, #33	; 0x21
 80027f2:	3317      	adds	r3, #23
 80027f4:	54e1      	strb	r1, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80027f8:	4910      	ldr	r1, [pc, #64]	; (800283c <HAL_UART_Transmit_DMA+0x9c>)
 80027fa:	6299      	str	r1, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80027fe:	4910      	ldr	r1, [pc, #64]	; (8002840 <HAL_UART_Transmit_DMA+0xa0>)
 8002800:	62d9      	str	r1, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002802:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002804:	490f      	ldr	r1, [pc, #60]	; (8002844 <HAL_UART_Transmit_DMA+0xa4>)
 8002806:	6319      	str	r1, [r3, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8002808:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800280a:	635d      	str	r5, [r3, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800280c:	6821      	ldr	r1, [r4, #0]
 800280e:	3128      	adds	r1, #40	; 0x28
 8002810:	0013      	movs	r3, r2
 8002812:	000a      	movs	r2, r1
 8002814:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002816:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002818:	f7fe feb6 	bl	8001588 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	2240      	movs	r2, #64	; 0x40
 8002820:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8002822:	55a5      	strb	r5, [r4, r6]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002824:	6822      	ldr	r2, [r4, #0]
 8002826:	6893      	ldr	r3, [r2, #8]
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	430b      	orrs	r3, r1
 800282c:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800282e:	2000      	movs	r0, #0
 8002830:	e7bd      	b.n	80027ae <HAL_UART_Transmit_DMA+0xe>
      return HAL_ERROR;
 8002832:	2001      	movs	r0, #1
 8002834:	e7bb      	b.n	80027ae <HAL_UART_Transmit_DMA+0xe>
 8002836:	2001      	movs	r0, #1
 8002838:	e7b9      	b.n	80027ae <HAL_UART_Transmit_DMA+0xe>
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	08002849 	.word	0x08002849
 8002840:	0800287b 	.word	0x0800287b
 8002844:	08002887 	.word	0x08002887

08002848 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002848:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800284a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800284c:	6802      	ldr	r2, [r0, #0]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	0692      	lsls	r2, r2, #26
 8002852:	d40d      	bmi.n	8002870 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0;
 8002854:	2100      	movs	r1, #0
 8002856:	2252      	movs	r2, #82	; 0x52
 8002858:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	688a      	ldr	r2, [r1, #8]
 800285e:	2080      	movs	r0, #128	; 0x80
 8002860:	4382      	bics	r2, r0
 8002862:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	6813      	ldr	r3, [r2, #0]
 8002868:	2140      	movs	r1, #64	; 0x40
 800286a:	430b      	orrs	r3, r1
 800286c:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 800286e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8002870:	0018      	movs	r0, r3
 8002872:	f000 fb37 	bl	8002ee4 <HAL_UART_TxCpltCallback>
}
 8002876:	e7fa      	b.n	800286e <UART_DMATransmitCplt+0x26>

08002878 <HAL_UART_TxHalfCpltCallback>:
}
 8002878:	4770      	bx	lr

0800287a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800287a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800287c:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_TxHalfCpltCallback(huart);
 800287e:	f7ff fffb 	bl	8002878 <HAL_UART_TxHalfCpltCallback>
}
 8002882:	bd10      	pop	{r4, pc}

08002884 <HAL_UART_ErrorCallback>:
}
 8002884:	4770      	bx	lr

08002886 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002886:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002888:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800288a:	2369      	movs	r3, #105	; 0x69
 800288c:	5ce3      	ldrb	r3, [r4, r3]
 800288e:	2b21      	cmp	r3, #33	; 0x21
 8002890:	d00b      	beq.n	80028aa <UART_DMAError+0x24>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002892:	236a      	movs	r3, #106	; 0x6a
 8002894:	5ce3      	ldrb	r3, [r4, r3]
 8002896:	2b22      	cmp	r3, #34	; 0x22
 8002898:	d012      	beq.n	80028c0 <UART_DMAError+0x3a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800289a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800289c:	2210      	movs	r2, #16
 800289e:	4313      	orrs	r3, r2
 80028a0:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80028a2:	0020      	movs	r0, r4
 80028a4:	f7ff ffee 	bl	8002884 <HAL_UART_ErrorCallback>
}
 80028a8:	bd10      	pop	{r4, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	d5ef      	bpl.n	8002892 <UART_DMAError+0xc>
    huart->TxXferCount = 0U;
 80028b2:	2200      	movs	r2, #0
 80028b4:	2352      	movs	r3, #82	; 0x52
 80028b6:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 80028b8:	0020      	movs	r0, r4
 80028ba:	f7ff fec7 	bl	800264c <UART_EndTxTransfer>
 80028be:	e7e8      	b.n	8002892 <UART_DMAError+0xc>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	065b      	lsls	r3, r3, #25
 80028c6:	d5e8      	bpl.n	800289a <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 80028c8:	2200      	movs	r2, #0
 80028ca:	235a      	movs	r3, #90	; 0x5a
 80028cc:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80028ce:	0020      	movs	r0, r4
 80028d0:	f7ff fec6 	bl	8002660 <UART_EndRxTransfer>
 80028d4:	e7e1      	b.n	800289a <UART_DMAError+0x14>

080028d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028d6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80028d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	225a      	movs	r2, #90	; 0x5a
 80028de:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80028e0:	3a08      	subs	r2, #8
 80028e2:	5283      	strh	r3, [r0, r2]

  HAL_UART_ErrorCallback(huart);
 80028e4:	f7ff ffce 	bl	8002884 <HAL_UART_ErrorCallback>
}
 80028e8:	bd10      	pop	{r4, pc}
	...

080028ec <UART_SetConfig>:
{
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028f0:	6883      	ldr	r3, [r0, #8]
 80028f2:	6902      	ldr	r2, [r0, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	6942      	ldr	r2, [r0, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	69c2      	ldr	r2, [r0, #28]
 80028fc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80028fe:	6801      	ldr	r1, [r0, #0]
 8002900:	680a      	ldr	r2, [r1, #0]
 8002902:	485b      	ldr	r0, [pc, #364]	; (8002a70 <UART_SetConfig+0x184>)
 8002904:	4002      	ands	r2, r0
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800290a:	6822      	ldr	r2, [r4, #0]
 800290c:	6853      	ldr	r3, [r2, #4]
 800290e:	4959      	ldr	r1, [pc, #356]	; (8002a74 <UART_SetConfig+0x188>)
 8002910:	400b      	ands	r3, r1
 8002912:	68e1      	ldr	r1, [r4, #12]
 8002914:	430b      	orrs	r3, r1
 8002916:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002918:	69a3      	ldr	r3, [r4, #24]
 800291a:	6a22      	ldr	r2, [r4, #32]
 800291c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800291e:	6821      	ldr	r1, [r4, #0]
 8002920:	688a      	ldr	r2, [r1, #8]
 8002922:	4855      	ldr	r0, [pc, #340]	; (8002a78 <UART_SetConfig+0x18c>)
 8002924:	4002      	ands	r2, r0
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800292a:	4b54      	ldr	r3, [pc, #336]	; (8002a7c <UART_SetConfig+0x190>)
 800292c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292e:	2303      	movs	r3, #3
 8002930:	4013      	ands	r3, r2
 8002932:	2b01      	cmp	r3, #1
 8002934:	d025      	beq.n	8002982 <UART_SetConfig+0x96>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <UART_SetConfig+0x5a>
 800293a:	2b02      	cmp	r3, #2
 800293c:	d023      	beq.n	8002986 <UART_SetConfig+0x9a>
 800293e:	2b03      	cmp	r3, #3
 8002940:	d023      	beq.n	800298a <UART_SetConfig+0x9e>
 8002942:	2310      	movs	r3, #16
 8002944:	e000      	b.n	8002948 <UART_SetConfig+0x5c>
 8002946:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	0212      	lsls	r2, r2, #8
 800294c:	69e1      	ldr	r1, [r4, #28]
 800294e:	4291      	cmp	r1, r2
 8002950:	d01d      	beq.n	800298e <UART_SetConfig+0xa2>
    switch (clocksource)
 8002952:	2b02      	cmp	r3, #2
 8002954:	d100      	bne.n	8002958 <UART_SetConfig+0x6c>
 8002956:	e06e      	b.n	8002a36 <UART_SetConfig+0x14a>
 8002958:	d95e      	bls.n	8002a18 <UART_SetConfig+0x12c>
 800295a:	2b04      	cmp	r3, #4
 800295c:	d100      	bne.n	8002960 <UART_SetConfig+0x74>
 800295e:	e077      	b.n	8002a50 <UART_SetConfig+0x164>
 8002960:	2b08      	cmp	r3, #8
 8002962:	d000      	beq.n	8002966 <UART_SetConfig+0x7a>
 8002964:	e081      	b.n	8002a6a <UART_SetConfig+0x17e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002966:	6825      	ldr	r5, [r4, #0]
 8002968:	6861      	ldr	r1, [r4, #4]
 800296a:	0848      	lsrs	r0, r1, #1
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	469c      	mov	ip, r3
 8002972:	4460      	add	r0, ip
 8002974:	f7fd fbd0 	bl	8000118 <__udivsi3>
 8002978:	0400      	lsls	r0, r0, #16
 800297a:	0c00      	lsrs	r0, r0, #16
 800297c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800297e:	2000      	movs	r0, #0
        break;
 8002980:	e02f      	b.n	80029e2 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002982:	2304      	movs	r3, #4
 8002984:	e7e0      	b.n	8002948 <UART_SetConfig+0x5c>
 8002986:	2308      	movs	r3, #8
 8002988:	e7de      	b.n	8002948 <UART_SetConfig+0x5c>
 800298a:	2302      	movs	r3, #2
 800298c:	e7dc      	b.n	8002948 <UART_SetConfig+0x5c>
    switch (clocksource)
 800298e:	2b02      	cmp	r3, #2
 8002990:	d028      	beq.n	80029e4 <UART_SetConfig+0xf8>
 8002992:	d90f      	bls.n	80029b4 <UART_SetConfig+0xc8>
 8002994:	2b04      	cmp	r3, #4
 8002996:	d030      	beq.n	80029fa <UART_SetConfig+0x10e>
 8002998:	2b08      	cmp	r3, #8
 800299a:	d13a      	bne.n	8002a12 <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800299c:	6863      	ldr	r3, [r4, #4]
 800299e:	0858      	lsrs	r0, r3, #1
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	025b      	lsls	r3, r3, #9
 80029a4:	469c      	mov	ip, r3
 80029a6:	4460      	add	r0, ip
 80029a8:	6861      	ldr	r1, [r4, #4]
 80029aa:	f7fd fbb5 	bl	8000118 <__udivsi3>
 80029ae:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80029b0:	2000      	movs	r0, #0
        break;
 80029b2:	e00c      	b.n	80029ce <UART_SetConfig+0xe2>
    switch (clocksource)
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d12c      	bne.n	8002a12 <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029b8:	f7ff fa8a 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 80029bc:	0040      	lsls	r0, r0, #1
 80029be:	6863      	ldr	r3, [r4, #4]
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	18c0      	adds	r0, r0, r3
 80029c4:	6861      	ldr	r1, [r4, #4]
 80029c6:	f7fd fba7 	bl	8000118 <__udivsi3>
 80029ca:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80029cc:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80029ce:	220f      	movs	r2, #15
 80029d0:	0019      	movs	r1, r3
 80029d2:	4391      	bics	r1, r2
 80029d4:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029d6:	105b      	asrs	r3, r3, #1
 80029d8:	2107      	movs	r1, #7
 80029da:	400b      	ands	r3, r1
 80029dc:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80029de:	6822      	ldr	r2, [r4, #0]
 80029e0:	60d3      	str	r3, [r2, #12]
}
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80029e4:	6863      	ldr	r3, [r4, #4]
 80029e6:	0858      	lsrs	r0, r3, #1
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <UART_SetConfig+0x194>)
 80029ea:	469c      	mov	ip, r3
 80029ec:	4460      	add	r0, ip
 80029ee:	6861      	ldr	r1, [r4, #4]
 80029f0:	f7fd fb92 	bl	8000118 <__udivsi3>
 80029f4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80029f6:	2000      	movs	r0, #0
        break;
 80029f8:	e7e9      	b.n	80029ce <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029fa:	f7ff f983 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 80029fe:	0040      	lsls	r0, r0, #1
 8002a00:	6863      	ldr	r3, [r4, #4]
 8002a02:	085b      	lsrs	r3, r3, #1
 8002a04:	18c0      	adds	r0, r0, r3
 8002a06:	6861      	ldr	r1, [r4, #4]
 8002a08:	f7fd fb86 	bl	8000118 <__udivsi3>
 8002a0c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a0e:	2000      	movs	r0, #0
        break;
 8002a10:	e7dd      	b.n	80029ce <UART_SetConfig+0xe2>
        ret = HAL_ERROR;
 8002a12:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e7da      	b.n	80029ce <UART_SetConfig+0xe2>
    switch (clocksource)
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d126      	bne.n	8002a6a <UART_SetConfig+0x17e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a1c:	6825      	ldr	r5, [r4, #0]
 8002a1e:	f7ff fa57 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 8002a22:	6861      	ldr	r1, [r4, #4]
 8002a24:	084b      	lsrs	r3, r1, #1
 8002a26:	18c0      	adds	r0, r0, r3
 8002a28:	f7fd fb76 	bl	8000118 <__udivsi3>
 8002a2c:	0400      	lsls	r0, r0, #16
 8002a2e:	0c00      	lsrs	r0, r0, #16
 8002a30:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a32:	2000      	movs	r0, #0
        break;
 8002a34:	e7d5      	b.n	80029e2 <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a36:	6825      	ldr	r5, [r4, #0]
 8002a38:	6861      	ldr	r1, [r4, #4]
 8002a3a:	0848      	lsrs	r0, r1, #1
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <UART_SetConfig+0x198>)
 8002a3e:	469c      	mov	ip, r3
 8002a40:	4460      	add	r0, ip
 8002a42:	f7fd fb69 	bl	8000118 <__udivsi3>
 8002a46:	0400      	lsls	r0, r0, #16
 8002a48:	0c00      	lsrs	r0, r0, #16
 8002a4a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a4c:	2000      	movs	r0, #0
        break;
 8002a4e:	e7c8      	b.n	80029e2 <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a50:	6825      	ldr	r5, [r4, #0]
 8002a52:	f7ff f957 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8002a56:	6861      	ldr	r1, [r4, #4]
 8002a58:	084b      	lsrs	r3, r1, #1
 8002a5a:	18c0      	adds	r0, r0, r3
 8002a5c:	f7fd fb5c 	bl	8000118 <__udivsi3>
 8002a60:	0400      	lsls	r0, r0, #16
 8002a62:	0c00      	lsrs	r0, r0, #16
 8002a64:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a66:	2000      	movs	r0, #0
        break;
 8002a68:	e7bb      	b.n	80029e2 <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	e7b9      	b.n	80029e2 <UART_SetConfig+0xf6>
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	ffff69f3 	.word	0xffff69f3
 8002a74:	ffffcfff 	.word	0xffffcfff
 8002a78:	fffff4ff 	.word	0xfffff4ff
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	00f42400 	.word	0x00f42400
 8002a84:	007a1200 	.word	0x007a1200

08002a88 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a8a:	07db      	lsls	r3, r3, #31
 8002a8c:	d506      	bpl.n	8002a9c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a8e:	6802      	ldr	r2, [r0, #0]
 8002a90:	6853      	ldr	r3, [r2, #4]
 8002a92:	492c      	ldr	r1, [pc, #176]	; (8002b44 <UART_AdvFeatureConfig+0xbc>)
 8002a94:	400b      	ands	r3, r1
 8002a96:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a9e:	079b      	lsls	r3, r3, #30
 8002aa0:	d506      	bpl.n	8002ab0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aa2:	6802      	ldr	r2, [r0, #0]
 8002aa4:	6853      	ldr	r3, [r2, #4]
 8002aa6:	4928      	ldr	r1, [pc, #160]	; (8002b48 <UART_AdvFeatureConfig+0xc0>)
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ab2:	075b      	lsls	r3, r3, #29
 8002ab4:	d506      	bpl.n	8002ac4 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ab6:	6802      	ldr	r2, [r0, #0]
 8002ab8:	6853      	ldr	r3, [r2, #4]
 8002aba:	4924      	ldr	r1, [pc, #144]	; (8002b4c <UART_AdvFeatureConfig+0xc4>)
 8002abc:	400b      	ands	r3, r1
 8002abe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ac4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ac6:	071b      	lsls	r3, r3, #28
 8002ac8:	d506      	bpl.n	8002ad8 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aca:	6802      	ldr	r2, [r0, #0]
 8002acc:	6853      	ldr	r3, [r2, #4]
 8002ace:	4920      	ldr	r1, [pc, #128]	; (8002b50 <UART_AdvFeatureConfig+0xc8>)
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ad8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ada:	06db      	lsls	r3, r3, #27
 8002adc:	d506      	bpl.n	8002aec <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ade:	6802      	ldr	r2, [r0, #0]
 8002ae0:	6893      	ldr	r3, [r2, #8]
 8002ae2:	491c      	ldr	r1, [pc, #112]	; (8002b54 <UART_AdvFeatureConfig+0xcc>)
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002aee:	069b      	lsls	r3, r3, #26
 8002af0:	d506      	bpl.n	8002b00 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002af2:	6802      	ldr	r2, [r0, #0]
 8002af4:	6893      	ldr	r3, [r2, #8]
 8002af6:	4918      	ldr	r1, [pc, #96]	; (8002b58 <UART_AdvFeatureConfig+0xd0>)
 8002af8:	400b      	ands	r3, r1
 8002afa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b02:	065b      	lsls	r3, r3, #25
 8002b04:	d50b      	bpl.n	8002b1e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b06:	6802      	ldr	r2, [r0, #0]
 8002b08:	6853      	ldr	r3, [r2, #4]
 8002b0a:	4914      	ldr	r1, [pc, #80]	; (8002b5c <UART_AdvFeatureConfig+0xd4>)
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	035b      	lsls	r3, r3, #13
 8002b18:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d00a      	beq.n	8002b34 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	d506      	bpl.n	8002b32 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b24:	6802      	ldr	r2, [r0, #0]
 8002b26:	6853      	ldr	r3, [r2, #4]
 8002b28:	490d      	ldr	r1, [pc, #52]	; (8002b60 <UART_AdvFeatureConfig+0xd8>)
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	6053      	str	r3, [r2, #4]
}
 8002b32:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b34:	6802      	ldr	r2, [r0, #0]
 8002b36:	6853      	ldr	r3, [r2, #4]
 8002b38:	490a      	ldr	r1, [pc, #40]	; (8002b64 <UART_AdvFeatureConfig+0xdc>)
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6053      	str	r3, [r2, #4]
 8002b42:	e7ec      	b.n	8002b1e <UART_AdvFeatureConfig+0x96>
 8002b44:	fffdffff 	.word	0xfffdffff
 8002b48:	fffeffff 	.word	0xfffeffff
 8002b4c:	fffbffff 	.word	0xfffbffff
 8002b50:	ffff7fff 	.word	0xffff7fff
 8002b54:	ffffefff 	.word	0xffffefff
 8002b58:	ffffdfff 	.word	0xffffdfff
 8002b5c:	ffefffff 	.word	0xffefffff
 8002b60:	fff7ffff 	.word	0xfff7ffff
 8002b64:	ff9fffff 	.word	0xff9fffff

08002b68 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	66c3      	str	r3, [r0, #108]	; 0x6c
  huart->gState  = HAL_UART_STATE_READY;
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	2169      	movs	r1, #105	; 0x69
 8002b70:	5442      	strb	r2, [r0, r1]
  huart->RxState = HAL_UART_STATE_READY;
 8002b72:	3101      	adds	r1, #1
 8002b74:	5442      	strb	r2, [r0, r1]
  __HAL_UNLOCK(huart);
 8002b76:	3248      	adds	r2, #72	; 0x48
 8002b78:	5483      	strb	r3, [r0, r2]
}
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_UART_Init>:
{
 8002b80:	b510      	push	{r4, lr}
 8002b82:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8002b84:	d030      	beq.n	8002be8 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002b86:	2369      	movs	r3, #105	; 0x69
 8002b88:	5cc3      	ldrb	r3, [r0, r3]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d022      	beq.n	8002bd4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	2369      	movs	r3, #105	; 0x69
 8002b92:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8002b94:	6822      	ldr	r2, [r4, #0]
 8002b96:	6813      	ldr	r3, [r2, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	438b      	bics	r3, r1
 8002b9c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f7ff fea4 	bl	80028ec <UART_SetConfig>
 8002ba4:	2801      	cmp	r0, #1
 8002ba6:	d014      	beq.n	8002bd2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d118      	bne.n	8002be0 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002bae:	6822      	ldr	r2, [r4, #0]
 8002bb0:	6853      	ldr	r3, [r2, #4]
 8002bb2:	490e      	ldr	r1, [pc, #56]	; (8002bec <HAL_UART_Init+0x6c>)
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002bb8:	6822      	ldr	r2, [r4, #0]
 8002bba:	6893      	ldr	r3, [r2, #8]
 8002bbc:	2108      	movs	r1, #8
 8002bbe:	438b      	bics	r3, r1
 8002bc0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002bc2:	6822      	ldr	r2, [r4, #0]
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	3907      	subs	r1, #7
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002bcc:	0020      	movs	r0, r4
 8002bce:	f7ff ffcb 	bl	8002b68 <UART_CheckIdleState>
}
 8002bd2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	3368      	adds	r3, #104	; 0x68
 8002bd8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002bda:	f000 fced 	bl	80035b8 <HAL_UART_MspInit>
 8002bde:	e7d6      	b.n	8002b8e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8002be0:	0020      	movs	r0, r4
 8002be2:	f7ff ff51 	bl	8002a88 <UART_AdvFeatureConfig>
 8002be6:	e7e2      	b.n	8002bae <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8002be8:	2001      	movs	r0, #1
 8002bea:	e7f2      	b.n	8002bd2 <HAL_UART_Init+0x52>
 8002bec:	fffff7ff 	.word	0xfffff7ff

08002bf0 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bf0:	2369      	movs	r3, #105	; 0x69
 8002bf2:	5cc3      	ldrb	r3, [r0, r3]
 8002bf4:	2b21      	cmp	r3, #33	; 0x21
 8002bf6:	d001      	beq.n	8002bfc <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002bf8:	2002      	movs	r0, #2
  }
}
 8002bfa:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002bfc:	3331      	adds	r3, #49	; 0x31
 8002bfe:	5ac3      	ldrh	r3, [r0, r3]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d011      	beq.n	8002c2a <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	015b      	lsls	r3, r3, #5
 8002c0a:	6882      	ldr	r2, [r0, #8]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d018      	beq.n	8002c42 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002c10:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	64c2      	str	r2, [r0, #76]	; 0x4c
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	6802      	ldr	r2, [r0, #0]
 8002c1a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002c1c:	2252      	movs	r2, #82	; 0x52
 8002c1e:	5a83      	ldrh	r3, [r0, r2]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8002c26:	2000      	movs	r0, #0
 8002c28:	e7e7      	b.n	8002bfa <UART_Transmit_IT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002c2a:	6802      	ldr	r2, [r0, #0]
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	438b      	bics	r3, r1
 8002c32:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c34:	6802      	ldr	r2, [r0, #0]
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	3940      	subs	r1, #64	; 0x40
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8002c3e:	2000      	movs	r0, #0
 8002c40:	e7db      	b.n	8002bfa <UART_Transmit_IT+0xa>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c42:	6903      	ldr	r3, [r0, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e3      	bne.n	8002c10 <UART_Transmit_IT+0x20>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002c48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	05db      	lsls	r3, r3, #23
 8002c4e:	0ddb      	lsrs	r3, r3, #23
 8002c50:	6802      	ldr	r2, [r0, #0]
 8002c52:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002c54:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002c56:	3302      	adds	r3, #2
 8002c58:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002c5a:	e7df      	b.n	8002c1c <UART_Transmit_IT+0x2c>

08002c5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c5c:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c5e:	6802      	ldr	r2, [r0, #0]
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	2140      	movs	r1, #64	; 0x40
 8002c64:	438b      	bics	r3, r1
 8002c66:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c68:	2220      	movs	r2, #32
 8002c6a:	2369      	movs	r3, #105	; 0x69
 8002c6c:	54c2      	strb	r2, [r0, r3]

  HAL_UART_TxCpltCallback(huart);
 8002c6e:	f000 f939 	bl	8002ee4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002c72:	2000      	movs	r0, #0
 8002c74:	bd10      	pop	{r4, pc}
	...

08002c78 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c78:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002c7a:	235c      	movs	r3, #92	; 0x5c
 8002c7c:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c7e:	330e      	adds	r3, #14
 8002c80:	5cc3      	ldrb	r3, [r0, r3]
 8002c82:	2b22      	cmp	r3, #34	; 0x22
 8002c84:	d006      	beq.n	8002c94 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c86:	6802      	ldr	r2, [r0, #0]
 8002c88:	6993      	ldr	r3, [r2, #24]
 8002c8a:	2108      	movs	r1, #8
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8002c90:	2002      	movs	r0, #2
  }
}
 8002c92:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c94:	6803      	ldr	r3, [r0, #0]
 8002c96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c98:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	0149      	lsls	r1, r1, #5
 8002c9e:	6884      	ldr	r4, [r0, #8]
 8002ca0:	428c      	cmp	r4, r1
 8002ca2:	d00e      	beq.n	8002cc2 <UART_Receive_IT+0x4a>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ca4:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002ca6:	1c4c      	adds	r4, r1, #1
 8002ca8:	6544      	str	r4, [r0, #84]	; 0x54
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	401a      	ands	r2, r3
 8002cae:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8002cb0:	225a      	movs	r2, #90	; 0x5a
 8002cb2:	5a83      	ldrh	r3, [r0, r2]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	5283      	strh	r3, [r0, r2]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <UART_Receive_IT+0x5e>
    return HAL_OK;
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	e7e7      	b.n	8002c92 <UART_Receive_IT+0x1a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc2:	6901      	ldr	r1, [r0, #16]
 8002cc4:	2900      	cmp	r1, #0
 8002cc6:	d1ed      	bne.n	8002ca4 <UART_Receive_IT+0x2c>
      *tmp = (uint16_t)(uhdata & uhMask);
 8002cc8:	401a      	ands	r2, r3
 8002cca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ccc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8002cce:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	6543      	str	r3, [r0, #84]	; 0x54
 8002cd4:	e7ec      	b.n	8002cb0 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd6:	6802      	ldr	r2, [r0, #0]
 8002cd8:	6813      	ldr	r3, [r2, #0]
 8002cda:	4908      	ldr	r1, [pc, #32]	; (8002cfc <UART_Receive_IT+0x84>)
 8002cdc:	400b      	ands	r3, r1
 8002cde:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce0:	6802      	ldr	r2, [r0, #0]
 8002ce2:	6893      	ldr	r3, [r2, #8]
 8002ce4:	3123      	adds	r1, #35	; 0x23
 8002ce6:	31ff      	adds	r1, #255	; 0xff
 8002ce8:	438b      	bics	r3, r1
 8002cea:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002cec:	2220      	movs	r2, #32
 8002cee:	236a      	movs	r3, #106	; 0x6a
 8002cf0:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8002cf2:	f000 f8cf 	bl	8002e94 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	e7cb      	b.n	8002c92 <UART_Receive_IT+0x1a>
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	fffffedf 	.word	0xfffffedf

08002d00 <HAL_UART_IRQHandler>:
{
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d04:	6801      	ldr	r1, [r0, #0]
 8002d06:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d08:	6808      	ldr	r0, [r1, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8002d0e:	d103      	bne.n	8002d18 <HAL_UART_IRQHandler+0x18>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d10:	069d      	lsls	r5, r3, #26
 8002d12:	d501      	bpl.n	8002d18 <HAL_UART_IRQHandler+0x18>
 8002d14:	0685      	lsls	r5, r0, #26
 8002d16:	d45b      	bmi.n	8002dd0 <HAL_UART_IRQHandler+0xd0>
  cr3its = READ_REG(huart->Instance->CR3);
 8002d18:	688d      	ldr	r5, [r1, #8]
  if(   (errorflags != RESET)
 8002d1a:	2a00      	cmp	r2, #0
 8002d1c:	d06e      	beq.n	8002dfc <HAL_UART_IRQHandler+0xfc>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	402a      	ands	r2, r5
 8002d22:	d103      	bne.n	8002d2c <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002d24:	2590      	movs	r5, #144	; 0x90
 8002d26:	006d      	lsls	r5, r5, #1
 8002d28:	4228      	tst	r0, r5
 8002d2a:	d067      	beq.n	8002dfc <HAL_UART_IRQHandler+0xfc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d2c:	07dd      	lsls	r5, r3, #31
 8002d2e:	d506      	bpl.n	8002d3e <HAL_UART_IRQHandler+0x3e>
 8002d30:	05c5      	lsls	r5, r0, #23
 8002d32:	d504      	bpl.n	8002d3e <HAL_UART_IRQHandler+0x3e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002d34:	2501      	movs	r5, #1
 8002d36:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d38:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002d3a:	4329      	orrs	r1, r5
 8002d3c:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d3e:	0799      	lsls	r1, r3, #30
 8002d40:	d508      	bpl.n	8002d54 <HAL_UART_IRQHandler+0x54>
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d006      	beq.n	8002d54 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002d46:	6821      	ldr	r1, [r4, #0]
 8002d48:	2502      	movs	r5, #2
 8002d4a:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d4c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002d4e:	3502      	adds	r5, #2
 8002d50:	4329      	orrs	r1, r5
 8002d52:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d54:	0759      	lsls	r1, r3, #29
 8002d56:	d508      	bpl.n	8002d6a <HAL_UART_IRQHandler+0x6a>
 8002d58:	2a00      	cmp	r2, #0
 8002d5a:	d006      	beq.n	8002d6a <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002d5c:	6821      	ldr	r1, [r4, #0]
 8002d5e:	2504      	movs	r5, #4
 8002d60:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d62:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002d64:	3d02      	subs	r5, #2
 8002d66:	4329      	orrs	r1, r5
 8002d68:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002d6a:	0719      	lsls	r1, r3, #28
 8002d6c:	d509      	bpl.n	8002d82 <HAL_UART_IRQHandler+0x82>
 8002d6e:	0681      	lsls	r1, r0, #26
 8002d70:	d401      	bmi.n	8002d76 <HAL_UART_IRQHandler+0x76>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d72:	2a00      	cmp	r2, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002d76:	6822      	ldr	r2, [r4, #0]
 8002d78:	2108      	movs	r1, #8
 8002d7a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d7c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d82:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	d041      	beq.n	8002e0c <HAL_UART_IRQHandler+0x10c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d88:	069b      	lsls	r3, r3, #26
 8002d8a:	d501      	bpl.n	8002d90 <HAL_UART_IRQHandler+0x90>
 8002d8c:	0683      	lsls	r3, r0, #26
 8002d8e:	d423      	bmi.n	8002dd8 <HAL_UART_IRQHandler+0xd8>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002d90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002d92:	071b      	lsls	r3, r3, #28
 8002d94:	d403      	bmi.n	8002d9e <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002d9a:	065b      	lsls	r3, r3, #25
 8002d9c:	d528      	bpl.n	8002df0 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8002d9e:	0020      	movs	r0, r4
 8002da0:	f7ff fc5e 	bl	8002660 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	0652      	lsls	r2, r2, #25
 8002daa:	d51d      	bpl.n	8002de8 <HAL_UART_IRQHandler+0xe8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	2140      	movs	r1, #64	; 0x40
 8002db0:	438a      	bics	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <HAL_UART_IRQHandler+0xe0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dba:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <HAL_UART_IRQHandler+0x120>)
 8002dbc:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dbe:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002dc0:	f7fe fc1d 	bl	80015fe <HAL_DMA_Abort_IT>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d021      	beq.n	8002e0c <HAL_UART_IRQHandler+0x10c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dc8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002dca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dcc:	4798      	blx	r3
 8002dce:	e01d      	b.n	8002e0c <HAL_UART_IRQHandler+0x10c>
      UART_Receive_IT(huart);
 8002dd0:	0020      	movs	r0, r4
 8002dd2:	f7ff ff51 	bl	8002c78 <UART_Receive_IT>
      return;
 8002dd6:	e019      	b.n	8002e0c <HAL_UART_IRQHandler+0x10c>
        UART_Receive_IT(huart);
 8002dd8:	0020      	movs	r0, r4
 8002dda:	f7ff ff4d 	bl	8002c78 <UART_Receive_IT>
 8002dde:	e7d7      	b.n	8002d90 <HAL_UART_IRQHandler+0x90>
            HAL_UART_ErrorCallback(huart);
 8002de0:	0020      	movs	r0, r4
 8002de2:	f7ff fd4f 	bl	8002884 <HAL_UART_ErrorCallback>
 8002de6:	e011      	b.n	8002e0c <HAL_UART_IRQHandler+0x10c>
          HAL_UART_ErrorCallback(huart);
 8002de8:	0020      	movs	r0, r4
 8002dea:	f7ff fd4b 	bl	8002884 <HAL_UART_ErrorCallback>
 8002dee:	e00d      	b.n	8002e0c <HAL_UART_IRQHandler+0x10c>
        HAL_UART_ErrorCallback(huart);
 8002df0:	0020      	movs	r0, r4
 8002df2:	f7ff fd47 	bl	8002884 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002dfa:	e007      	b.n	8002e0c <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dfc:	061a      	lsls	r2, r3, #24
 8002dfe:	d501      	bpl.n	8002e04 <HAL_UART_IRQHandler+0x104>
 8002e00:	0602      	lsls	r2, r0, #24
 8002e02:	d404      	bmi.n	8002e0e <HAL_UART_IRQHandler+0x10e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e04:	065b      	lsls	r3, r3, #25
 8002e06:	d501      	bpl.n	8002e0c <HAL_UART_IRQHandler+0x10c>
 8002e08:	0643      	lsls	r3, r0, #25
 8002e0a:	d404      	bmi.n	8002e16 <HAL_UART_IRQHandler+0x116>
}
 8002e0c:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8002e0e:	0020      	movs	r0, r4
 8002e10:	f7ff feee 	bl	8002bf0 <UART_Transmit_IT>
    return;
 8002e14:	e7fa      	b.n	8002e0c <HAL_UART_IRQHandler+0x10c>
    UART_EndTransmit_IT(huart);
 8002e16:	0020      	movs	r0, r4
 8002e18:	f7ff ff20 	bl	8002c5c <UART_EndTransmit_IT>
    return;
 8002e1c:	e7f6      	b.n	8002e0c <HAL_UART_IRQHandler+0x10c>
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	080028d7 	.word	0x080028d7

08002e24 <get_current_potentiometer>:

#include "function.h"
#include "variables.h"
#define R 155		// Resistor chosen in H-brigde circuit to transform proportional current to a voltage

void get_current_potentiometer(){
 8002e24:	b510      	push	{r4, lr}

	sampledPotentiometer_prev = sampledPotentiometer;
 8002e26:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <get_current_potentiometer+0x50>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <get_current_potentiometer+0x54>)
 8002e2c:	6013      	str	r3, [r2, #0]
	sampledCurrent = ADC_buffer[1];
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <get_current_potentiometer+0x58>)
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	684a      	ldr	r2, [r1, #4]
 8002e34:	4812      	ldr	r0, [pc, #72]	; (8002e80 <get_current_potentiometer+0x5c>)
 8002e36:	6002      	str	r2, [r0, #0]

	if( (int8_t)(sampledPotentiometer_prev - *ADC_buffer) > 15 || (int8_t)(*ADC_buffer - sampledPotentiometer_prev) > 15 ){
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	680c      	ldr	r4, [r1, #0]
 8002e3c:	b2e1      	uxtb	r1, r4
 8002e3e:	1a58      	subs	r0, r3, r1
 8002e40:	b240      	sxtb	r0, r0
 8002e42:	280f      	cmp	r0, #15
 8002e44:	dc03      	bgt.n	8002e4e <get_current_potentiometer+0x2a>
 8002e46:	1acb      	subs	r3, r1, r3
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	dd01      	ble.n	8002e52 <get_current_potentiometer+0x2e>
		sampledPotentiometer = ADC_buffer[0];
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <get_current_potentiometer+0x50>)
 8002e50:	601c      	str	r4, [r3, #0]

	//if (q1_new - prev_q1 > 0.05 || prev_q1 - q1_new > 0.05){
	//	q1 = q1_new;
	//}

	torque = (sampledCurrent<<9);
 8002e52:	2100      	movs	r1, #0
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <get_current_potentiometer+0x60>)
 8002e56:	7019      	strb	r1, [r3, #0]
//	q1dot = (prevprev_q1 - prev_q1<<2+3*q1)/(time<<2); // time variable needs to change




	sprintf(send_torque,"%lu", sampledCurrent);
 8002e58:	4c0b      	ldr	r4, [pc, #44]	; (8002e88 <get_current_potentiometer+0x64>)
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <get_current_potentiometer+0x68>)
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	0021      	movs	r1, r4
 8002e60:	f000 ffae 	bl	8003dc0 <siprintf>
	sprintf(send_q1,"%lu", sampledPotentiometer);
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <get_current_potentiometer+0x50>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <get_current_potentiometer+0x6c>)
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	0021      	movs	r1, r4
 8002e6e:	f000 ffa7 	bl	8003dc0 <siprintf>
	// Do conversion equation to get 'real' value



	// store in buffer to be send across UART
}
 8002e72:	bd10      	pop	{r4, pc}
 8002e74:	20000238 	.word	0x20000238
 8002e78:	2000023c 	.word	0x2000023c
 8002e7c:	20000204 	.word	0x20000204
 8002e80:	20000234 	.word	0x20000234
 8002e84:	2000026c 	.word	0x2000026c
 8002e88:	08004778 	.word	0x08004778
 8002e8c:	20000250 	.word	0x20000250
 8002e90:	20000244 	.word	0x20000244

08002e94 <HAL_UART_RxCpltCallback>:
#define KI


// interrupt when byte is received on UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	uart_flag = 1;
 8002e94:	2201      	movs	r2, #1
 8002e96:	4b01      	ldr	r3, [pc, #4]	; (8002e9c <HAL_UART_RxCpltCallback+0x8>)
 8002e98:	701a      	strb	r2, [r3, #0]
}
 8002e9a:	4770      	bx	lr
 8002e9c:	20000274 	.word	0x20000274

08002ea0 <HAL_GPIO_EXTI_Callback>:

//interrupt when encoder is experiencing an rising or falling edge
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	encoder_flag = 1;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4b01      	ldr	r3, [pc, #4]	; (8002ea8 <HAL_GPIO_EXTI_Callback+0x8>)
 8002ea4:	701a      	strb	r2, [r3, #0]

}
 8002ea6:	4770      	bx	lr
 8002ea8:	20000213 	.word	0x20000213

08002eac <HAL_TIM_PeriodElapsedCallback>:

//	if(htim->Instance == htim16.Instance){
//		send_data_flag = 1;
//	}
//	else if(htim->Instance == htim14.Instance){
		adc_flag = 1;
 8002eac:	2301      	movs	r3, #1
 8002eae:	4a02      	ldr	r2, [pc, #8]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8002eb0:	7013      	strb	r3, [r2, #0]
		data_flag = 1;
 8002eb2:	4a02      	ldr	r2, [pc, #8]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002eb4:	7013      	strb	r3, [r2, #0]
//	}

}
 8002eb6:	4770      	bx	lr
 8002eb8:	20000208 	.word	0x20000208
 8002ebc:	20000210 	.word	0x20000210

08002ec0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
	// check what timer counter it is before setting flag
	pwm_flag = 1;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4b01      	ldr	r3, [pc, #4]	; (8002ec8 <HAL_TIM_OC_DelayElapsedCallback+0x8>)
 8002ec4:	701a      	strb	r2, [r3, #0]
}
 8002ec6:	4770      	bx	lr
 8002ec8:	20000218 	.word	0x20000218

08002ecc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4b01      	ldr	r3, [pc, #4]	; (8002ed4 <HAL_TIM_IC_CaptureCallback+0x8>)
 8002ed0:	701a      	strb	r2, [r3, #0]
}
 8002ed2:	4770      	bx	lr
 8002ed4:	20000218 	.word	0x20000218

08002ed8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4b01      	ldr	r3, [pc, #4]	; (8002ee0 <HAL_TIM_PWM_PulseFinishedCallback+0x8>)
 8002edc:	701a      	strb	r2, [r3, #0]
}
 8002ede:	4770      	bx	lr
 8002ee0:	20000218 	.word	0x20000218

08002ee4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 8002ee4:	b510      	push	{r4, lr}
	memset(rx_buffer,0x00, 16);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_UART_TxCpltCallback+0x28>)
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	2210      	movs	r2, #16
 8002eec:	2100      	movs	r1, #0
 8002eee:	f000 fea4 	bl	8003c3a <memset>
	memset(rx_buffer_copy,0x00, 16);
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_UART_TxCpltCallback+0x2c>)
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	2100      	movs	r1, #0
 8002efa:	f000 fe9e 	bl	8003c3a <memset>
//	rx_buffer_cntr = 0;
	memset(data_buffer,0x00,40);
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_UART_TxCpltCallback+0x30>)
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	2228      	movs	r2, #40	; 0x28
 8002f04:	2100      	movs	r1, #0
 8002f06:	f000 fe98 	bl	8003c3a <memset>
}
 8002f0a:	bd10      	pop	{r4, pc}
 8002f0c:	20000224 	.word	0x20000224
 8002f10:	2000022c 	.word	0x2000022c
 8002f14:	2000020c 	.word	0x2000020c

08002f18 <read_motor_position>:


void read_motor_position(){
 8002f18:	b510      	push	{r4, lr}

	//prevprev_q2 = prev_q2;
	//prev_q2 = q2;

	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	480a      	ldr	r0, [pc, #40]	; (8002f48 <read_motor_position+0x30>)
 8002f1e:	f7fe fcaf 	bl	8001880 <HAL_GPIO_ReadPin>
 8002f22:	2801      	cmp	r0, #1
 8002f24:	d00b      	beq.n	8002f3e <read_motor_position+0x26>
		q2_steps -= 1;
		//q2 = q2_steps*dir_increment_size;
	}
	else{ // actuated pendulum is turning anti-clockwise
		q2_steps += 1;
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <read_motor_position+0x34>)
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]
		//q2 = q2_steps*dir_increment_size;
	}
	sprintf(send_q2,"%d", q2_steps);
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <read_motor_position+0x34>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <read_motor_position+0x38>)
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	4907      	ldr	r1, [pc, #28]	; (8002f54 <read_motor_position+0x3c>)
 8002f38:	f000 ff42 	bl	8003dc0 <siprintf>

	//three point backward difference
//	q2dot = (prevprev_q2 - prev_q2<<2+3*q2)/(2*time); // time variable needs to change

}
 8002f3c:	bd10      	pop	{r4, pc}
		q2_steps -= 1;
 8002f3e:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <read_motor_position+0x34>)
 8002f40:	6813      	ldr	r3, [r2, #0]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e7f2      	b.n	8002f2e <read_motor_position+0x16>
 8002f48:	48000400 	.word	0x48000400
 8002f4c:	2000021c 	.word	0x2000021c
 8002f50:	20000248 	.word	0x20000248
 8002f54:	0800477c 	.word	0x0800477c

08002f58 <output_torque>:

void output_torque(uint8_t dir, uint8_t duty_cycle){
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	000c      	movs	r4, r1
//	if(duty_cycle < 30){ // safety percaustion to ensure safety
//		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100 ); // stop motor
//
//	}
//	else{
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,dir);
 8002f5e:	2120      	movs	r1, #32
 8002f60:	2090      	movs	r0, #144	; 0x90
 8002f62:	05c0      	lsls	r0, r0, #23
 8002f64:	f7fe fc93 	bl	800188e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
 8002f68:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <output_torque+0x18>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	639c      	str	r4, [r3, #56]	; 0x38
//	}
}
 8002f6e:	bd10      	pop	{r4, pc}
 8002f70:	2000028c 	.word	0x2000028c

08002f74 <startPeripherals>:
extern ADC_HandleTypeDef hadc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim16;

void startPeripherals(){
 8002f74:	b510      	push	{r4, lr}

	HAL_ADCEx_Calibration_Start(&hadc);					// Calibrate the ADC
 8002f76:	4c10      	ldr	r4, [pc, #64]	; (8002fb8 <startPeripherals+0x44>)
 8002f78:	0020      	movs	r0, r4
 8002f7a:	f7fe f9e3 	bl	8001344 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, ADC_buffer, 2);			// Start to capture the ADC with DMA
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <startPeripherals+0x48>)
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	2202      	movs	r2, #2
 8002f84:	0020      	movs	r0, r4
 8002f86:	f7fe f8a1 	bl	80010cc <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim14);						// Timer responsible for time-keeping and triggers system state to be send
 8002f8a:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <startPeripherals+0x4c>)
 8002f8c:	f7ff f8f6 	bl	800217c <HAL_TIM_Base_Start_IT>
	//HAL_TIM_Base_Start_IT(&htim16);						// Timer responsible for time-keeping and triggers system state to be send
	HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);			// Start the Timer Module with PWM
 8002f90:	4c0c      	ldr	r4, [pc, #48]	; (8002fc4 <startPeripherals+0x50>)
 8002f92:	2104      	movs	r1, #4
 8002f94:	0020      	movs	r0, r4
 8002f96:	f7ff fae5 	bl	8002564 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8002fa0:	3201      	adds	r2, #1
 8002fa2:	4909      	ldr	r1, [pc, #36]	; (8002fc8 <startPeripherals+0x54>)
 8002fa4:	4809      	ldr	r0, [pc, #36]	; (8002fcc <startPeripherals+0x58>)
 8002fa6:	f7ff fba1 	bl	80026ec <HAL_UART_Receive_IT>


//	HAL_Delay(500);										// Delay for peripherals to settle
	HAL_GPIO_WritePin(DEBUG_LED1_GPIO_Port,DEBUG_LED1_Pin,1); // LED ON indicates system is ready
 8002faa:	2201      	movs	r2, #1
 8002fac:	2108      	movs	r1, #8
 8002fae:	2090      	movs	r0, #144	; 0x90
 8002fb0:	05c0      	lsls	r0, r0, #23
 8002fb2:	f7fe fc6c 	bl	800188e <HAL_GPIO_WritePin>

	//startval_sampledPotentiometer = ADC_buffer[1];

}
 8002fb6:	bd10      	pop	{r4, pc}
 8002fb8:	20000404 	.word	0x20000404
 8002fbc:	20000204 	.word	0x20000204
 8002fc0:	20000380 	.word	0x20000380
 8002fc4:	2000028c 	.word	0x2000028c
 8002fc8:	20000230 	.word	0x20000230
 8002fcc:	20000310 	.word	0x20000310

08002fd0 <init_variables>:


void init_variables(){
 8002fd0:	b570      	push	{r4, r5, r6, lr}

	rx_buffer = (uint8_t*)malloc(16*sizeof(uint8_t));
 8002fd2:	2010      	movs	r0, #16
 8002fd4:	f000 fe1e 	bl	8003c14 <malloc>
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <init_variables+0xfc>)
 8002fda:	6018      	str	r0, [r3, #0]
	memset(rx_buffer,0x00,32);
 8002fdc:	2220      	movs	r2, #32
 8002fde:	2100      	movs	r1, #0
 8002fe0:	f000 fe2b 	bl	8003c3a <memset>

	rx_buffer_copy = (uint8_t*)malloc(16*sizeof(uint8_t));
 8002fe4:	2010      	movs	r0, #16
 8002fe6:	f000 fe15 	bl	8003c14 <malloc>
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <init_variables+0x100>)
 8002fec:	6018      	str	r0, [r3, #0]
	memset(rx_buffer_copy,0x00,32);
 8002fee:	2220      	movs	r2, #32
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	f000 fe22 	bl	8003c3a <memset>


	torque_received = (char*)malloc(8*sizeof(char));
 8002ff6:	2008      	movs	r0, #8
 8002ff8:	f000 fe0c 	bl	8003c14 <malloc>
 8002ffc:	4b35      	ldr	r3, [pc, #212]	; (80030d4 <init_variables+0x104>)
 8002ffe:	6018      	str	r0, [r3, #0]
	memset(torque_received,0x00,8);
 8003000:	2208      	movs	r2, #8
 8003002:	2100      	movs	r1, #0
 8003004:	f000 fe19 	bl	8003c3a <memset>

	motor_dir = (char*)malloc(8*sizeof(char));
 8003008:	2008      	movs	r0, #8
 800300a:	f000 fe03 	bl	8003c14 <malloc>
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <init_variables+0x108>)
 8003010:	6018      	str	r0, [r3, #0]
	memset(motor_dir,0x00,8);
 8003012:	2208      	movs	r2, #8
 8003014:	2100      	movs	r1, #0
 8003016:	f000 fe10 	bl	8003c3a <memset>


	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 800301a:	2008      	movs	r0, #8
 800301c:	f000 fdfa 	bl	8003c14 <malloc>
 8003020:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <init_variables+0x10c>)
 8003022:	6018      	str	r0, [r3, #0]
	memset(verification,0x00,8);
 8003024:	2208      	movs	r2, #8
 8003026:	2100      	movs	r1, #0
 8003028:	f000 fe07 	bl	8003c3a <memset>

	// might to be larger to account for decimals
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 800302c:	2048      	movs	r0, #72	; 0x48
 800302e:	f000 fdf1 	bl	8003c14 <malloc>
 8003032:	4d2b      	ldr	r5, [pc, #172]	; (80030e0 <init_variables+0x110>)
 8003034:	6028      	str	r0, [r5, #0]
	memset(data_buffer,0x00,72);
 8003036:	2248      	movs	r2, #72	; 0x48
 8003038:	2100      	movs	r1, #0
 800303a:	f000 fdfe 	bl	8003c3a <memset>

	// forming dat structure to be send
	memcpy(data_buffer, dollar, strlen((char*)dollar));
 800303e:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <init_variables+0x114>)
 8003040:	681c      	ldr	r4, [r3, #0]
 8003042:	0020      	movs	r0, r4
 8003044:	f7fd f860 	bl	8000108 <strlen>
 8003048:	0002      	movs	r2, r0
 800304a:	6828      	ldr	r0, [r5, #0]
 800304c:	0021      	movs	r1, r4
 800304e:	f000 fdeb 	bl	8003c28 <memcpy>


	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8003052:	2008      	movs	r0, #8
 8003054:	f000 fdde 	bl	8003c14 <malloc>
 8003058:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <init_variables+0x118>)
 800305a:	6018      	str	r0, [r3, #0]
	memset(ADC_buffer,0x00,2);
 800305c:	2202      	movs	r2, #2
 800305e:	2100      	movs	r1, #0
 8003060:	f000 fdeb 	bl	8003c3a <memset>

	//atan_vals = (float*)malloc(100*sizeof(double));
	//memset(atan_vals,0x00,100);

	scratchpad = (char*)malloc(5*sizeof(char));
 8003064:	2005      	movs	r0, #5
 8003066:	f000 fdd5 	bl	8003c14 <malloc>
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <init_variables+0x11c>)
 800306c:	6018      	str	r0, [r3, #0]
	memset(scratchpad,0x00,5);
 800306e:	2205      	movs	r2, #5
 8003070:	2100      	movs	r1, #0
 8003072:	f000 fde2 	bl	8003c3a <memset>

	send_q1 = (char*)malloc(10*sizeof(char));
 8003076:	200a      	movs	r0, #10
 8003078:	f000 fdcc 	bl	8003c14 <malloc>
 800307c:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <init_variables+0x120>)
 800307e:	6018      	str	r0, [r3, #0]
	memset(send_q1,0x00,10);
 8003080:	220a      	movs	r2, #10
 8003082:	2100      	movs	r1, #0
 8003084:	f000 fdd9 	bl	8003c3a <memset>
	send_q2 = (char*)malloc(32*sizeof(char));
 8003088:	2020      	movs	r0, #32
 800308a:	f000 fdc3 	bl	8003c14 <malloc>
 800308e:	4c19      	ldr	r4, [pc, #100]	; (80030f4 <init_variables+0x124>)
 8003090:	6020      	str	r0, [r4, #0]
	memset(send_q2,0x00,32);
 8003092:	2220      	movs	r2, #32
 8003094:	2100      	movs	r1, #0
 8003096:	f000 fdd0 	bl	8003c3a <memset>
	send_torque = (char*)malloc(4*sizeof(char));
 800309a:	2004      	movs	r0, #4
 800309c:	f000 fdba 	bl	8003c14 <malloc>
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <init_variables+0x128>)
 80030a2:	6018      	str	r0, [r3, #0]
	memset(send_torque,0x00,4);
 80030a4:	2204      	movs	r2, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	f000 fdc7 	bl	8003c3a <memset>
	send_time = (char*)malloc(4*sizeof(char));
 80030ac:	2004      	movs	r0, #4
 80030ae:	f000 fdb1 	bl	8003c14 <malloc>
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <init_variables+0x12c>)
 80030b4:	6018      	str	r0, [r3, #0]
	memset(send_time,0x00,4);
 80030b6:	2204      	movs	r2, #4
 80030b8:	2100      	movs	r1, #0
 80030ba:	f000 fdbe 	bl	8003c3a <memset>


	sprintf(send_q2,"%d", q2_steps);
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <init_variables+0x130>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	490f      	ldr	r1, [pc, #60]	; (8003104 <init_variables+0x134>)
 80030c6:	f000 fe7b 	bl	8003dc0 <siprintf>

	// temporary, this should be done where the variables are measured

}
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	20000224 	.word	0x20000224
 80030d0:	2000022c 	.word	0x2000022c
 80030d4:	20000270 	.word	0x20000270
 80030d8:	20000214 	.word	0x20000214
 80030dc:	20000278 	.word	0x20000278
 80030e0:	2000020c 	.word	0x2000020c
 80030e4:	2000000c 	.word	0x2000000c
 80030e8:	20000204 	.word	0x20000204
 80030ec:	20000240 	.word	0x20000240
 80030f0:	20000244 	.word	0x20000244
 80030f4:	20000248 	.word	0x20000248
 80030f8:	20000250 	.word	0x20000250
 80030fc:	2000024c 	.word	0x2000024c
 8003100:	2000021c 	.word	0x2000021c
 8003104:	0800477c 	.word	0x0800477c

08003108 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8003108:	b530      	push	{r4, r5, lr}
 800310a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	4b20      	ldr	r3, [pc, #128]	; (8003190 <MX_GPIO_Init+0x88>)
 800310e:	6959      	ldr	r1, [r3, #20]
 8003110:	2080      	movs	r0, #128	; 0x80
 8003112:	0280      	lsls	r0, r0, #10
 8003114:	4301      	orrs	r1, r0
 8003116:	6159      	str	r1, [r3, #20]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	4002      	ands	r2, r0
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	02c9      	lsls	r1, r1, #11
 8003126:	430a      	orrs	r2, r1
 8003128:	615a      	str	r2, [r3, #20]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	400b      	ands	r3, r1
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003132:	2590      	movs	r5, #144	; 0x90
 8003134:	05ed      	lsls	r5, r5, #23
 8003136:	2200      	movs	r2, #0
 8003138:	2138      	movs	r1, #56	; 0x38
 800313a:	0028      	movs	r0, r5
 800313c:	f7fe fba7 	bl	800188e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED1_Pin DEBUG_LED2_Pin MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 8003140:	2338      	movs	r3, #56	; 0x38
 8003142:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003144:	3b37      	subs	r3, #55	; 0x37
 8003146:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2400      	movs	r4, #0
 800314a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314e:	a903      	add	r1, sp, #12
 8003150:	0028      	movs	r0, r5
 8003152:	f7fe facf 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Pin */
  GPIO_InitStruct.Pin = ENCODER_Pin;
 8003156:	2310      	movs	r3, #16
 8003158:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <MX_GPIO_Init+0x8c>)
 800315c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8003160:	4d0d      	ldr	r5, [pc, #52]	; (8003198 <MX_GPIO_Init+0x90>)
 8003162:	a903      	add	r1, sp, #12
 8003164:	0028      	movs	r0, r5
 8003166:	f7fe fac5 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800316a:	2320      	movs	r3, #32
 800316c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8003172:	a903      	add	r1, sp, #12
 8003174:	0028      	movs	r0, r5
 8003176:	f7fe fabd 	bl	80016f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800317a:	2200      	movs	r2, #0
 800317c:	2100      	movs	r1, #0
 800317e:	2007      	movs	r0, #7
 8003180:	f7fe f940 	bl	8001404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003184:	2007      	movs	r0, #7
 8003186:	f7fe f96f 	bl	8001468 <HAL_NVIC_EnableIRQ>

}
 800318a:	b009      	add	sp, #36	; 0x24
 800318c:	bd30      	pop	{r4, r5, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	40021000 	.word	0x40021000
 8003194:	10310000 	.word	0x10310000
 8003198:	48000400 	.word	0x48000400

0800319c <MX_DMA_Init>:
{
 800319c:	b500      	push	{lr}
 800319e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <MX_DMA_Init+0x3c>)
 80031a2:	6951      	ldr	r1, [r2, #20]
 80031a4:	2301      	movs	r3, #1
 80031a6:	4319      	orrs	r1, r3
 80031a8:	6151      	str	r1, [r2, #20]
 80031aa:	6952      	ldr	r2, [r2, #20]
 80031ac:	4013      	ands	r3, r2
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2101      	movs	r1, #1
 80031b6:	2009      	movs	r0, #9
 80031b8:	f7fe f924 	bl	8001404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031bc:	2009      	movs	r0, #9
 80031be:	f7fe f953 	bl	8001468 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2101      	movs	r1, #1
 80031c6:	200a      	movs	r0, #10
 80031c8:	f7fe f91c 	bl	8001404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80031cc:	200a      	movs	r0, #10
 80031ce:	f7fe f94b 	bl	8001468 <HAL_NVIC_EnableIRQ>
}
 80031d2:	b003      	add	sp, #12
 80031d4:	bd00      	pop	{pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	40021000 	.word	0x40021000

080031dc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80031dc:	e7fe      	b.n	80031dc <_Error_Handler>
	...

080031e0 <MX_ADC_Init>:
{
 80031e0:	b500      	push	{lr}
 80031e2:	b085      	sub	sp, #20
  hadc.Instance = ADC1;
 80031e4:	481d      	ldr	r0, [pc, #116]	; (800325c <MX_ADC_Init+0x7c>)
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <MX_ADC_Init+0x80>)
 80031e8:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80031ea:	2300      	movs	r3, #0
 80031ec:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80031ee:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031f0:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80031f2:	2201      	movs	r2, #1
 80031f4:	6102      	str	r2, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031f6:	2104      	movs	r1, #4
 80031f8:	6141      	str	r1, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80031fa:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80031fc:	61c3      	str	r3, [r0, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 80031fe:	6202      	str	r2, [r0, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003200:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003202:	21c2      	movs	r1, #194	; 0xc2
 8003204:	31ff      	adds	r1, #255	; 0xff
 8003206:	6281      	str	r1, [r0, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003208:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 800320a:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800320c:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800320e:	f7fd fe97 	bl	8000f40 <HAL_ADC_Init>
 8003212:	2800      	cmp	r0, #0
 8003214:	d116      	bne.n	8003244 <MX_ADC_Init+0x64>
  sConfig.Channel = ADC_CHANNEL_8;
 8003216:	2308      	movs	r3, #8
 8003218:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	015b      	lsls	r3, r3, #5
 800321e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003220:	2307      	movs	r3, #7
 8003222:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003224:	a901      	add	r1, sp, #4
 8003226:	480d      	ldr	r0, [pc, #52]	; (800325c <MX_ADC_Init+0x7c>)
 8003228:	f7fd fff2 	bl	8001210 <HAL_ADC_ConfigChannel>
 800322c:	2800      	cmp	r0, #0
 800322e:	d10d      	bne.n	800324c <MX_ADC_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_9;
 8003230:	2309      	movs	r3, #9
 8003232:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003234:	a901      	add	r1, sp, #4
 8003236:	4809      	ldr	r0, [pc, #36]	; (800325c <MX_ADC_Init+0x7c>)
 8003238:	f7fd ffea 	bl	8001210 <HAL_ADC_ConfigChannel>
 800323c:	2800      	cmp	r0, #0
 800323e:	d109      	bne.n	8003254 <MX_ADC_Init+0x74>
}
 8003240:	b005      	add	sp, #20
 8003242:	bd00      	pop	{pc}
    _Error_Handler(__FILE__, __LINE__);
 8003244:	21dd      	movs	r1, #221	; 0xdd
 8003246:	4807      	ldr	r0, [pc, #28]	; (8003264 <MX_ADC_Init+0x84>)
 8003248:	f7ff ffc8 	bl	80031dc <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800324c:	21e7      	movs	r1, #231	; 0xe7
 800324e:	4805      	ldr	r0, [pc, #20]	; (8003264 <MX_ADC_Init+0x84>)
 8003250:	f7ff ffc4 	bl	80031dc <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003254:	21ef      	movs	r1, #239	; 0xef
 8003256:	4803      	ldr	r0, [pc, #12]	; (8003264 <MX_ADC_Init+0x84>)
 8003258:	f7ff ffc0 	bl	80031dc <_Error_Handler>
 800325c:	20000404 	.word	0x20000404
 8003260:	40012400 	.word	0x40012400
 8003264:	08004780 	.word	0x08004780

08003268 <MX_USART1_UART_Init>:
{
 8003268:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800326a:	480d      	ldr	r0, [pc, #52]	; (80032a0 <MX_USART1_UART_Init+0x38>)
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <MX_USART1_UART_Init+0x3c>)
 800326e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003270:	23e1      	movs	r3, #225	; 0xe1
 8003272:	025b      	lsls	r3, r3, #9
 8003274:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003276:	2300      	movs	r3, #0
 8003278:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800327a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800327c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800327e:	220c      	movs	r2, #12
 8003280:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003282:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003284:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003286:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003288:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800328a:	f7ff fc79 	bl	8002b80 <HAL_UART_Init>
 800328e:	2800      	cmp	r0, #0
 8003290:	d100      	bne.n	8003294 <MX_USART1_UART_Init+0x2c>
}
 8003292:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003294:	213c      	movs	r1, #60	; 0x3c
 8003296:	31ff      	adds	r1, #255	; 0xff
 8003298:	4803      	ldr	r0, [pc, #12]	; (80032a8 <MX_USART1_UART_Init+0x40>)
 800329a:	f7ff ff9f 	bl	80031dc <_Error_Handler>
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	20000310 	.word	0x20000310
 80032a4:	40013800 	.word	0x40013800
 80032a8:	08004780 	.word	0x08004780

080032ac <MX_TIM3_Init>:
{
 80032ac:	b500      	push	{lr}
 80032ae:	b08b      	sub	sp, #44	; 0x2c
  htim3.Instance = TIM3;
 80032b0:	481c      	ldr	r0, [pc, #112]	; (8003324 <MX_TIM3_Init+0x78>)
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <MX_TIM3_Init+0x7c>)
 80032b4:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 48;
 80032b6:	2330      	movs	r3, #48	; 0x30
 80032b8:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ba:	2300      	movs	r3, #0
 80032bc:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 99;
 80032be:	2263      	movs	r2, #99	; 0x63
 80032c0:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032c2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80032c6:	f7ff f871 	bl	80023ac <HAL_TIM_PWM_Init>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d11a      	bne.n	8003304 <MX_TIM3_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032d4:	a908      	add	r1, sp, #32
 80032d6:	4813      	ldr	r0, [pc, #76]	; (8003324 <MX_TIM3_Init+0x78>)
 80032d8:	f7ff f990 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d116      	bne.n	800330e <MX_TIM3_Init+0x62>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032e0:	2360      	movs	r3, #96	; 0x60
 80032e2:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032e8:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ea:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032ec:	2204      	movs	r2, #4
 80032ee:	a901      	add	r1, sp, #4
 80032f0:	480c      	ldr	r0, [pc, #48]	; (8003324 <MX_TIM3_Init+0x78>)
 80032f2:	f7ff f8b5 	bl	8002460 <HAL_TIM_PWM_ConfigChannel>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d10e      	bne.n	8003318 <MX_TIM3_Init+0x6c>
  HAL_TIM_MspPostInit(&htim3);
 80032fa:	480a      	ldr	r0, [pc, #40]	; (8003324 <MX_TIM3_Init+0x78>)
 80032fc:	f000 f942 	bl	8003584 <HAL_TIM_MspPostInit>
}
 8003300:	b00b      	add	sp, #44	; 0x2c
 8003302:	bd00      	pop	{pc}
    _Error_Handler(__FILE__, __LINE__);
 8003304:	2104      	movs	r1, #4
 8003306:	31ff      	adds	r1, #255	; 0xff
 8003308:	4808      	ldr	r0, [pc, #32]	; (800332c <MX_TIM3_Init+0x80>)
 800330a:	f7ff ff67 	bl	80031dc <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800330e:	2185      	movs	r1, #133	; 0x85
 8003310:	0049      	lsls	r1, r1, #1
 8003312:	4806      	ldr	r0, [pc, #24]	; (800332c <MX_TIM3_Init+0x80>)
 8003314:	f7ff ff62 	bl	80031dc <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003318:	2114      	movs	r1, #20
 800331a:	31ff      	adds	r1, #255	; 0xff
 800331c:	4803      	ldr	r0, [pc, #12]	; (800332c <MX_TIM3_Init+0x80>)
 800331e:	f7ff ff5d 	bl	80031dc <_Error_Handler>
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	2000028c 	.word	0x2000028c
 8003328:	40000400 	.word	0x40000400
 800332c:	08004780 	.word	0x08004780

08003330 <MX_TIM14_Init>:
{
 8003330:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8003332:	480b      	ldr	r0, [pc, #44]	; (8003360 <MX_TIM14_Init+0x30>)
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <MX_TIM14_Init+0x34>)
 8003336:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 192;
 8003338:	23c0      	movs	r3, #192	; 0xc0
 800333a:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333c:	2300      	movs	r3, #0
 800333e:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 1000;
 8003340:	22fa      	movs	r2, #250	; 0xfa
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003346:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003348:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800334a:	f7ff f815 	bl	8002378 <HAL_TIM_Base_Init>
 800334e:	2800      	cmp	r0, #0
 8003350:	d100      	bne.n	8003354 <MX_TIM14_Init+0x24>
}
 8003352:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003354:	2193      	movs	r1, #147	; 0x93
 8003356:	0049      	lsls	r1, r1, #1
 8003358:	4803      	ldr	r0, [pc, #12]	; (8003368 <MX_TIM14_Init+0x38>)
 800335a:	f7ff ff3f 	bl	80031dc <_Error_Handler>
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	20000380 	.word	0x20000380
 8003364:	40002000 	.word	0x40002000
 8003368:	08004780 	.word	0x08004780

0800336c <SystemClock_Config>:
{
 800336c:	b500      	push	{lr}
 800336e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003370:	2312      	movs	r3, #18
 8003372:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003374:	3b11      	subs	r3, #17
 8003376:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003378:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800337a:	330f      	adds	r3, #15
 800337c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800337e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003380:	3b0e      	subs	r3, #14
 8003382:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003384:	2300      	movs	r3, #0
 8003386:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003388:	22a0      	movs	r2, #160	; 0xa0
 800338a:	0392      	lsls	r2, r2, #14
 800338c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800338e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003390:	a808      	add	r0, sp, #32
 8003392:	f7fe fa91 	bl	80018b8 <HAL_RCC_OscConfig>
 8003396:	2800      	cmp	r0, #0
 8003398:	d128      	bne.n	80033ec <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800339a:	2307      	movs	r3, #7
 800339c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800339e:	3b05      	subs	r3, #5
 80033a0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033a2:	2300      	movs	r3, #0
 80033a4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033a6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033a8:	2101      	movs	r1, #1
 80033aa:	a804      	add	r0, sp, #16
 80033ac:	f7fe fce0 	bl	8001d70 <HAL_RCC_ClockConfig>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d11f      	bne.n	80033f4 <SystemClock_Config+0x88>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033b4:	2301      	movs	r3, #1
 80033b6:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80033b8:	2300      	movs	r3, #0
 80033ba:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033bc:	4668      	mov	r0, sp
 80033be:	f7fe fd97 	bl	8001ef0 <HAL_RCCEx_PeriphCLKConfig>
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d11a      	bne.n	80033fc <SystemClock_Config+0x90>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80033c6:	f7fe fd7d 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 80033ca:	21fa      	movs	r1, #250	; 0xfa
 80033cc:	0089      	lsls	r1, r1, #2
 80033ce:	f7fc fea3 	bl	8000118 <__udivsi3>
 80033d2:	f7fe f853 	bl	800147c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80033d6:	2004      	movs	r0, #4
 80033d8:	f7fe f86c 	bl	80014b4 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80033dc:	2200      	movs	r2, #0
 80033de:	2100      	movs	r1, #0
 80033e0:	2001      	movs	r0, #1
 80033e2:	4240      	negs	r0, r0
 80033e4:	f7fe f80e 	bl	8001404 <HAL_NVIC_SetPriority>
}
 80033e8:	b015      	add	sp, #84	; 0x54
 80033ea:	bd00      	pop	{pc}
    _Error_Handler(__FILE__, __LINE__);
 80033ec:	21a2      	movs	r1, #162	; 0xa2
 80033ee:	4805      	ldr	r0, [pc, #20]	; (8003404 <SystemClock_Config+0x98>)
 80033f0:	f7ff fef4 	bl	80031dc <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80033f4:	21af      	movs	r1, #175	; 0xaf
 80033f6:	4803      	ldr	r0, [pc, #12]	; (8003404 <SystemClock_Config+0x98>)
 80033f8:	f7ff fef0 	bl	80031dc <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80033fc:	21b6      	movs	r1, #182	; 0xb6
 80033fe:	4801      	ldr	r0, [pc, #4]	; (8003404 <SystemClock_Config+0x98>)
 8003400:	f7ff feec 	bl	80031dc <_Error_Handler>
 8003404:	08004780 	.word	0x08004780

08003408 <main>:
{
 8003408:	b510      	push	{r4, lr}
  HAL_Init();
 800340a:	f7fd fd21 	bl	8000e50 <HAL_Init>
  SystemClock_Config();
 800340e:	f7ff ffad 	bl	800336c <SystemClock_Config>
  MX_GPIO_Init();
 8003412:	f7ff fe79 	bl	8003108 <MX_GPIO_Init>
  MX_DMA_Init();
 8003416:	f7ff fec1 	bl	800319c <MX_DMA_Init>
  MX_ADC_Init();
 800341a:	f7ff fee1 	bl	80031e0 <MX_ADC_Init>
  MX_USART1_UART_Init();
 800341e:	f7ff ff23 	bl	8003268 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8003422:	f7ff ff43 	bl	80032ac <MX_TIM3_Init>
  MX_TIM14_Init();
 8003426:	f7ff ff83 	bl	8003330 <MX_TIM14_Init>
  init_variables();
 800342a:	f7ff fdd1 	bl	8002fd0 <init_variables>
  startPeripherals();
 800342e:	f7ff fda1 	bl	8002f74 <startPeripherals>
	  user_main();
 8003432:	f000 fb43 	bl	8003abc <user_main>
 8003436:	e7fc      	b.n	8003432 <main+0x2a>

08003438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003438:	b500      	push	{lr}
 800343a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343c:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_MspInit+0x40>)
 800343e:	6991      	ldr	r1, [r2, #24]
 8003440:	2301      	movs	r3, #1
 8003442:	4319      	orrs	r1, r3
 8003444:	6191      	str	r1, [r2, #24]
 8003446:	6992      	ldr	r2, [r2, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800344e:	2200      	movs	r2, #0
 8003450:	2100      	movs	r1, #0
 8003452:	2005      	movs	r0, #5
 8003454:	4240      	negs	r0, r0
 8003456:	f7fd ffd5 	bl	8001404 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2100      	movs	r1, #0
 800345e:	2002      	movs	r0, #2
 8003460:	4240      	negs	r0, r0
 8003462:	f7fd ffcf 	bl	8001404 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	2001      	movs	r0, #1
 800346c:	4240      	negs	r0, r0
 800346e:	f7fd ffc9 	bl	8001404 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003472:	b003      	add	sp, #12
 8003474:	bd00      	pop	{pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_ADC_MspInit+0x74>)
 8003484:	6802      	ldr	r2, [r0, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d001      	beq.n	800348e <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800348a:	b006      	add	sp, #24
 800348c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800348e:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_ADC_MspInit+0x78>)
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	2580      	movs	r5, #128	; 0x80
 8003494:	00ad      	lsls	r5, r5, #2
 8003496:	432a      	orrs	r2, r5
 8003498:	619a      	str	r2, [r3, #24]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	402b      	ands	r3, r5
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 80034a2:	2303      	movs	r3, #3
 80034a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2600      	movs	r6, #0
 80034aa:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	a901      	add	r1, sp, #4
 80034ae:	4812      	ldr	r0, [pc, #72]	; (80034f8 <HAL_ADC_MspInit+0x7c>)
 80034b0:	f7fe f920 	bl	80016f4 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80034b4:	4811      	ldr	r0, [pc, #68]	; (80034fc <HAL_ADC_MspInit+0x80>)
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_ADC_MspInit+0x84>)
 80034b8:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ba:	6046      	str	r6, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80034bc:	6086      	str	r6, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034c2:	6105      	str	r5, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80034ca:	2320      	movs	r3, #32
 80034cc:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80034d4:	f7fe f82c 	bl	8001530 <HAL_DMA_Init>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d103      	bne.n	80034e4 <HAL_ADC_MspInit+0x68>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_ADC_MspInit+0x80>)
 80034de:	63e3      	str	r3, [r4, #60]	; 0x3c
 80034e0:	625c      	str	r4, [r3, #36]	; 0x24
}
 80034e2:	e7d2      	b.n	800348a <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 80034e4:	216b      	movs	r1, #107	; 0x6b
 80034e6:	4807      	ldr	r0, [pc, #28]	; (8003504 <HAL_ADC_MspInit+0x88>)
 80034e8:	f7ff fe78 	bl	80031dc <_Error_Handler>
 80034ec:	e7f6      	b.n	80034dc <HAL_ADC_MspInit+0x60>
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	40012400 	.word	0x40012400
 80034f4:	40021000 	.word	0x40021000
 80034f8:	48000400 	.word	0x48000400
 80034fc:	200003c0 	.word	0x200003c0
 8003500:	40020008 	.word	0x40020008
 8003504:	08004790 	.word	0x08004790

08003508 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003508:	b500      	push	{lr}
 800350a:	b083      	sub	sp, #12

  if(htim_pwm->Instance==TIM3)
 800350c:	6802      	ldr	r2, [r0, #0]
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_TIM_PWM_MspInit+0x34>)
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_TIM_PWM_MspInit+0x10>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003514:	b003      	add	sp, #12
 8003516:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003518:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_TIM_PWM_MspInit+0x38>)
 800351a:	69d1      	ldr	r1, [r2, #28]
 800351c:	2302      	movs	r3, #2
 800351e:	4319      	orrs	r1, r3
 8003520:	61d1      	str	r1, [r2, #28]
 8003522:	69d2      	ldr	r2, [r2, #28]
 8003524:	4013      	ands	r3, r2
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	2101      	movs	r1, #1
 800352e:	2010      	movs	r0, #16
 8003530:	f7fd ff68 	bl	8001404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003534:	2010      	movs	r0, #16
 8003536:	f7fd ff97 	bl	8001468 <HAL_NVIC_EnableIRQ>
}
 800353a:	e7eb      	b.n	8003514 <HAL_TIM_PWM_MspInit+0xc>
 800353c:	40000400 	.word	0x40000400
 8003540:	40021000 	.word	0x40021000

08003544 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003544:	b500      	push	{lr}
 8003546:	b083      	sub	sp, #12

  if(htim_base->Instance==TIM14)
 8003548:	6802      	ldr	r2, [r0, #0]
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_TIM_Base_MspInit+0x38>)
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003550:	b003      	add	sp, #12
 8003552:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003554:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <HAL_TIM_Base_MspInit+0x3c>)
 8003556:	69d1      	ldr	r1, [r2, #28]
 8003558:	2080      	movs	r0, #128	; 0x80
 800355a:	0040      	lsls	r0, r0, #1
 800355c:	4301      	orrs	r1, r0
 800355e:	61d1      	str	r1, [r2, #28]
 8003560:	69d3      	ldr	r3, [r2, #28]
 8003562:	4003      	ands	r3, r0
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8003568:	2200      	movs	r2, #0
 800356a:	2101      	movs	r1, #1
 800356c:	38ed      	subs	r0, #237	; 0xed
 800356e:	f7fd ff49 	bl	8001404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003572:	2013      	movs	r0, #19
 8003574:	f7fd ff78 	bl	8001468 <HAL_NVIC_EnableIRQ>
}
 8003578:	e7ea      	b.n	8003550 <HAL_TIM_Base_MspInit+0xc>
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	40002000 	.word	0x40002000
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003584:	b500      	push	{lr}
 8003586:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8003588:	6802      	ldr	r2, [r0, #0]
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_TIM_MspPostInit+0x30>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003590:	b007      	add	sp, #28
 8003592:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = PWM_SIGNAL_Pin;
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	3b7e      	subs	r3, #126	; 0x7e
 800359a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80035a2:	3301      	adds	r3, #1
 80035a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80035a6:	a901      	add	r1, sp, #4
 80035a8:	2090      	movs	r0, #144	; 0x90
 80035aa:	05c0      	lsls	r0, r0, #23
 80035ac:	f7fe f8a2 	bl	80016f4 <HAL_GPIO_Init>
}
 80035b0:	e7ee      	b.n	8003590 <HAL_TIM_MspPostInit+0xc>
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	40000400 	.word	0x40000400

080035b8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035b8:	b530      	push	{r4, r5, lr}
 80035ba:	b087      	sub	sp, #28
 80035bc:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <HAL_UART_MspInit+0x90>)
 80035c0:	6802      	ldr	r2, [r0, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d001      	beq.n	80035ca <HAL_UART_MspInit+0x12>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035c6:	b007      	add	sp, #28
 80035c8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ca:	4a20      	ldr	r2, [pc, #128]	; (800364c <HAL_UART_MspInit+0x94>)
 80035cc:	6991      	ldr	r1, [r2, #24]
 80035ce:	2080      	movs	r0, #128	; 0x80
 80035d0:	01c0      	lsls	r0, r0, #7
 80035d2:	4301      	orrs	r1, r0
 80035d4:	6191      	str	r1, [r2, #24]
 80035d6:	6993      	ldr	r3, [r2, #24]
 80035d8:	4003      	ands	r3, r0
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035de:	23c0      	movs	r3, #192	; 0xc0
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2500      	movs	r5, #0
 80035ea:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ec:	3301      	adds	r3, #1
 80035ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80035f0:	3b02      	subs	r3, #2
 80035f2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f4:	a901      	add	r1, sp, #4
 80035f6:	2090      	movs	r0, #144	; 0x90
 80035f8:	05c0      	lsls	r0, r0, #23
 80035fa:	f7fe f87b 	bl	80016f4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80035fe:	4814      	ldr	r0, [pc, #80]	; (8003650 <HAL_UART_MspInit+0x98>)
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_UART_MspInit+0x9c>)
 8003602:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003604:	2310      	movs	r3, #16
 8003606:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003608:	6085      	str	r5, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800360a:	3370      	adds	r3, #112	; 0x70
 800360c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800360e:	6105      	str	r5, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003610:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003612:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	019b      	lsls	r3, r3, #6
 8003618:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800361a:	f7fd ff89 	bl	8001530 <HAL_DMA_Init>
 800361e:	2800      	cmp	r0, #0
 8003620:	d10b      	bne.n	800363a <HAL_UART_MspInit+0x82>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_UART_MspInit+0x98>)
 8003624:	6623      	str	r3, [r4, #96]	; 0x60
 8003626:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	201b      	movs	r0, #27
 800362e:	f7fd fee9 	bl	8001404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003632:	201b      	movs	r0, #27
 8003634:	f7fd ff18 	bl	8001468 <HAL_NVIC_EnableIRQ>
}
 8003638:	e7c5      	b.n	80035c6 <HAL_UART_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 800363a:	2120      	movs	r1, #32
 800363c:	31ff      	adds	r1, #255	; 0xff
 800363e:	4806      	ldr	r0, [pc, #24]	; (8003658 <HAL_UART_MspInit+0xa0>)
 8003640:	f7ff fdcc 	bl	80031dc <_Error_Handler>
 8003644:	e7ed      	b.n	8003622 <HAL_UART_MspInit+0x6a>
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	40013800 	.word	0x40013800
 800364c:	40021000 	.word	0x40021000
 8003650:	200002cc 	.word	0x200002cc
 8003654:	4002001c 	.word	0x4002001c
 8003658:	08004790 	.word	0x08004790

0800365c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800365c:	4770      	bx	lr

0800365e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800365e:	e7fe      	b.n	800365e <HardFault_Handler>

08003660 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003660:	4770      	bx	lr

08003662 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003662:	4770      	bx	lr

08003664 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003664:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003666:	f7fd fc03 	bl	8000e70 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800366a:	f7fd ff34 	bl	80014d6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800366e:	bd10      	pop	{r4, pc}

08003670 <EXTI4_15_IRQHandler>:

/**
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
 8003670:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003672:	2010      	movs	r0, #16
 8003674:	f7fe f912 	bl	800189c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003678:	bd10      	pop	{r4, pc}
	...

0800367c <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 800367c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800367e:	4802      	ldr	r0, [pc, #8]	; (8003688 <DMA1_Channel1_IRQHandler+0xc>)
 8003680:	f7fd ffe2 	bl	8001648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003684:	bd10      	pop	{r4, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	200003c0 	.word	0x200003c0

0800368c <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 800368c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800368e:	4802      	ldr	r0, [pc, #8]	; (8003698 <DMA1_Channel2_3_IRQHandler+0xc>)
 8003690:	f7fd ffda 	bl	8001648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003694:	bd10      	pop	{r4, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	200002cc 	.word	0x200002cc

0800369c <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 800369c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800369e:	4802      	ldr	r0, [pc, #8]	; (80036a8 <TIM3_IRQHandler+0xc>)
 80036a0:	f7fe fd78 	bl	8002194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036a4:	bd10      	pop	{r4, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	2000028c 	.word	0x2000028c

080036ac <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 80036ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80036ae:	4802      	ldr	r0, [pc, #8]	; (80036b8 <TIM14_IRQHandler+0xc>)
 80036b0:	f7fe fd70 	bl	8002194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80036b4:	bd10      	pop	{r4, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	20000380 	.word	0x20000380

080036bc <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 80036bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036be:	4802      	ldr	r0, [pc, #8]	; (80036c8 <USART1_IRQHandler+0xc>)
 80036c0:	f7ff fb1e 	bl	8002d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036c4:	bd10      	pop	{r4, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	20000310 	.word	0x20000310

080036cc <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <SystemInit+0x48>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	480f      	ldr	r0, [pc, #60]	; (8003718 <SystemInit+0x4c>)
 80036da:	4002      	ands	r2, r0
 80036dc:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	480e      	ldr	r0, [pc, #56]	; (800371c <SystemInit+0x50>)
 80036e2:	4002      	ands	r2, r0
 80036e4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	480d      	ldr	r0, [pc, #52]	; (8003720 <SystemInit+0x54>)
 80036ea:	4002      	ands	r2, r0
 80036ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	480c      	ldr	r0, [pc, #48]	; (8003724 <SystemInit+0x58>)
 80036f2:	4002      	ands	r2, r0
 80036f4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	200f      	movs	r0, #15
 80036fa:	4382      	bics	r2, r0
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80036fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003700:	4809      	ldr	r0, [pc, #36]	; (8003728 <SystemInit+0x5c>)
 8003702:	4002      	ands	r2, r0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003708:	438a      	bics	r2, r1
 800370a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]

}
 8003710:	4770      	bx	lr
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	40021000 	.word	0x40021000
 8003718:	08ffb80c 	.word	0x08ffb80c
 800371c:	fef6ffff 	.word	0xfef6ffff
 8003720:	fffbffff 	.word	0xfffbffff
 8003724:	ffc0ffff 	.word	0xffc0ffff
 8003728:	fffffeec 	.word	0xfffffeec

0800372c <data_aquisition>:
#include "function.h"
#include "variables.h"
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim3;

void data_aquisition(){
 800372c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372e:	46de      	mov	lr, fp
 8003730:	4657      	mov	r7, sl
 8003732:	464e      	mov	r6, r9
 8003734:	4645      	mov	r5, r8
 8003736:	b5e0      	push	{r5, r6, r7, lr}
 8003738:	b085      	sub	sp, #20
	size_data_buffer = strlen((char*)data_buffer);
 800373a:	4e54      	ldr	r6, [pc, #336]	; (800388c <data_aquisition+0x160>)
 800373c:	6833      	ldr	r3, [r6, #0]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	0018      	movs	r0, r3
 8003742:	f7fc fce1 	bl	8000108 <strlen>
 8003746:	4682      	mov	sl, r0
 8003748:	4c51      	ldr	r4, [pc, #324]	; (8003890 <data_aquisition+0x164>)
 800374a:	6020      	str	r0, [r4, #0]
	size_time = strlen((char*)send_time);
 800374c:	4b51      	ldr	r3, [pc, #324]	; (8003894 <data_aquisition+0x168>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	0018      	movs	r0, r3
 8003754:	f7fc fcd8 	bl	8000108 <strlen>
 8003758:	4d4f      	ldr	r5, [pc, #316]	; (8003898 <data_aquisition+0x16c>)
 800375a:	9002      	str	r0, [sp, #8]
 800375c:	6028      	str	r0, [r5, #0]
	size_q1 = strlen((char*)send_q1);
 800375e:	4f4f      	ldr	r7, [pc, #316]	; (800389c <data_aquisition+0x170>)
 8003760:	46bb      	mov	fp, r7
 8003762:	6838      	ldr	r0, [r7, #0]
 8003764:	f7fc fcd0 	bl	8000108 <strlen>
 8003768:	4f4d      	ldr	r7, [pc, #308]	; (80038a0 <data_aquisition+0x174>)
 800376a:	6038      	str	r0, [r7, #0]
	size_q2 = strlen((char*)send_q2);
 800376c:	494d      	ldr	r1, [pc, #308]	; (80038a4 <data_aquisition+0x178>)
 800376e:	6809      	ldr	r1, [r1, #0]
 8003770:	9103      	str	r1, [sp, #12]
 8003772:	0008      	movs	r0, r1
 8003774:	f7fc fcc8 	bl	8000108 <strlen>
 8003778:	494b      	ldr	r1, [pc, #300]	; (80038a8 <data_aquisition+0x17c>)
 800377a:	4688      	mov	r8, r1
 800377c:	6008      	str	r0, [r1, #0]
	size_torque = strlen((char*)send_torque);
 800377e:	494b      	ldr	r1, [pc, #300]	; (80038ac <data_aquisition+0x180>)
 8003780:	6809      	ldr	r1, [r1, #0]
 8003782:	9103      	str	r1, [sp, #12]
 8003784:	0008      	movs	r0, r1
 8003786:	f7fc fcbf 	bl	8000108 <strlen>
 800378a:	4949      	ldr	r1, [pc, #292]	; (80038b0 <data_aquisition+0x184>)
 800378c:	4689      	mov	r9, r1
 800378e:	6008      	str	r0, [r1, #0]

	//memset(data_buffer,0x00,40);
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 8003790:	9b00      	ldr	r3, [sp, #0]
 8003792:	0018      	movs	r0, r3
 8003794:	4450      	add	r0, sl
 8003796:	9a02      	ldr	r2, [sp, #8]
 8003798:	9901      	ldr	r1, [sp, #4]
 800379a:	f000 fa45 	bl	8003c28 <memcpy>
	memcpy(data_buffer+size_time+size_data_buffer, comma, 1);
 800379e:	682b      	ldr	r3, [r5, #0]
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	4694      	mov	ip, r2
 80037a4:	4463      	add	r3, ip
 80037a6:	4a43      	ldr	r2, [pc, #268]	; (80038b4 <data_aquisition+0x188>)
 80037a8:	4692      	mov	sl, r2
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	6831      	ldr	r1, [r6, #0]
 80037b0:	54ca      	strb	r2, [r1, r3]
	memcpy(data_buffer+1+size_time+size_data_buffer, send_q1, size_q1);
 80037b2:	682b      	ldr	r3, [r5, #0]
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	4694      	mov	ip, r2
 80037b8:	4463      	add	r3, ip
 80037ba:	0018      	movs	r0, r3
 80037bc:	3001      	adds	r0, #1
 80037be:	6833      	ldr	r3, [r6, #0]
 80037c0:	469c      	mov	ip, r3
 80037c2:	4460      	add	r0, ip
 80037c4:	465b      	mov	r3, fp
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	f000 fa2d 	bl	8003c28 <memcpy>
	memcpy(data_buffer+1+size_q1+size_time+size_data_buffer, comma, 1);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	682a      	ldr	r2, [r5, #0]
 80037d2:	4694      	mov	ip, r2
 80037d4:	4463      	add	r3, ip
 80037d6:	6822      	ldr	r2, [r4, #0]
 80037d8:	4694      	mov	ip, r2
 80037da:	4463      	add	r3, ip
 80037dc:	3301      	adds	r3, #1
 80037de:	4652      	mov	r2, sl
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	6831      	ldr	r1, [r6, #0]
 80037e6:	54ca      	strb	r2, [r1, r3]
	memcpy(data_buffer+2+size_q1+size_time+size_data_buffer, send_q2, size_q2);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	682a      	ldr	r2, [r5, #0]
 80037ec:	4694      	mov	ip, r2
 80037ee:	4463      	add	r3, ip
 80037f0:	0018      	movs	r0, r3
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	469c      	mov	ip, r3
 80037f6:	4460      	add	r0, ip
 80037f8:	3002      	adds	r0, #2
 80037fa:	6833      	ldr	r3, [r6, #0]
 80037fc:	469c      	mov	ip, r3
 80037fe:	4460      	add	r0, ip
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <data_aquisition+0x178>)
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	4643      	mov	r3, r8
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	f000 fa0e 	bl	8003c28 <memcpy>
	memcpy(data_buffer+2+size_q1+size_time+size_q2+size_data_buffer, comma, 1);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	682a      	ldr	r2, [r5, #0]
 8003810:	4694      	mov	ip, r2
 8003812:	4463      	add	r3, ip
 8003814:	4642      	mov	r2, r8
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	4694      	mov	ip, r2
 800381a:	4463      	add	r3, ip
 800381c:	6822      	ldr	r2, [r4, #0]
 800381e:	4694      	mov	ip, r2
 8003820:	4463      	add	r3, ip
 8003822:	3302      	adds	r3, #2
 8003824:	4652      	mov	r2, sl
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	7812      	ldrb	r2, [r2, #0]
 800382a:	6831      	ldr	r1, [r6, #0]
 800382c:	54ca      	strb	r2, [r1, r3]
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_data_buffer, send_torque, size_torque);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	682a      	ldr	r2, [r5, #0]
 8003832:	4694      	mov	ip, r2
 8003834:	4463      	add	r3, ip
 8003836:	0018      	movs	r0, r3
 8003838:	4643      	mov	r3, r8
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	469c      	mov	ip, r3
 800383e:	4460      	add	r0, ip
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	469c      	mov	ip, r3
 8003844:	4460      	add	r0, ip
 8003846:	3003      	adds	r0, #3
 8003848:	6833      	ldr	r3, [r6, #0]
 800384a:	469c      	mov	ip, r3
 800384c:	4460      	add	r0, ip
 800384e:	4b17      	ldr	r3, [pc, #92]	; (80038ac <data_aquisition+0x180>)
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	464b      	mov	r3, r9
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	f000 f9e7 	bl	8003c28 <memcpy>
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_torque+size_data_buffer, endSymbol, 1);
 800385a:	6832      	ldr	r2, [r6, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6829      	ldr	r1, [r5, #0]
 8003860:	185b      	adds	r3, r3, r1
 8003862:	4641      	mov	r1, r8
 8003864:	6809      	ldr	r1, [r1, #0]
 8003866:	185b      	adds	r3, r3, r1
 8003868:	4649      	mov	r1, r9
 800386a:	6809      	ldr	r1, [r1, #0]
 800386c:	185b      	adds	r3, r3, r1
 800386e:	6821      	ldr	r1, [r4, #0]
 8003870:	185b      	adds	r3, r3, r1
 8003872:	3303      	adds	r3, #3
 8003874:	4910      	ldr	r1, [pc, #64]	; (80038b8 <data_aquisition+0x18c>)
 8003876:	6809      	ldr	r1, [r1, #0]
 8003878:	7809      	ldrb	r1, [r1, #0]
 800387a:	54d1      	strb	r1, [r2, r3]

//	HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
}
 800387c:	b005      	add	sp, #20
 800387e:	bc3c      	pop	{r2, r3, r4, r5}
 8003880:	4690      	mov	r8, r2
 8003882:	4699      	mov	r9, r3
 8003884:	46a2      	mov	sl, r4
 8003886:	46ab      	mov	fp, r5
 8003888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	2000020c 	.word	0x2000020c
 8003890:	20000254 	.word	0x20000254
 8003894:	2000024c 	.word	0x2000024c
 8003898:	20000260 	.word	0x20000260
 800389c:	20000244 	.word	0x20000244
 80038a0:	20000258 	.word	0x20000258
 80038a4:	20000248 	.word	0x20000248
 80038a8:	2000025c 	.word	0x2000025c
 80038ac:	20000250 	.word	0x20000250
 80038b0:	20000264 	.word	0x20000264
 80038b4:	20000008 	.word	0x20000008
 80038b8:	20000014 	.word	0x20000014

080038bc <uart_request>:


void uart_request(){
 80038bc:	b570      	push	{r4, r5, r6, lr}

	rx_buffer[rx_buffer_cntr] = rx_byte;
 80038be:	4b69      	ldr	r3, [pc, #420]	; (8003a64 <uart_request+0x1a8>)
 80038c0:	4a69      	ldr	r2, [pc, #420]	; (8003a68 <uart_request+0x1ac>)
 80038c2:	7812      	ldrb	r2, [r2, #0]
 80038c4:	4969      	ldr	r1, [pc, #420]	; (8003a6c <uart_request+0x1b0>)
 80038c6:	7809      	ldrb	r1, [r1, #0]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	5481      	strb	r1, [r0, r2]
	if(*rx_buffer == '$'){
 80038cc:	681c      	ldr	r4, [r3, #0]
 80038ce:	7823      	ldrb	r3, [r4, #0]
 80038d0:	2b24      	cmp	r3, #36	; 0x24
 80038d2:	d00f      	beq.n	80038f4 <uart_request+0x38>
		rx_buffer_cntr += 1;
	}
	if(rx_buffer_cntr > 15){
 80038d4:	4b64      	ldr	r3, [pc, #400]	; (8003a68 <uart_request+0x1ac>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b0f      	cmp	r3, #15
 80038da:	d902      	bls.n	80038e2 <uart_request+0x26>
		rx_buffer_cntr = 0;
 80038dc:	2200      	movs	r2, #0
 80038de:	4b62      	ldr	r3, [pc, #392]	; (8003a68 <uart_request+0x1ac>)
 80038e0:	701a      	strb	r2, [r3, #0]
	}
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 80038e2:	7823      	ldrb	r3, [r4, #0]
 80038e4:	2b24      	cmp	r3, #36	; 0x24
 80038e6:	d00a      	beq.n	80038fe <uart_request+0x42>
			//memset(rx_buffer_copy,0x00, 16);

		}
		rx_buffer_cntr = 0;
	}
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80038e8:	2201      	movs	r2, #1
 80038ea:	4960      	ldr	r1, [pc, #384]	; (8003a6c <uart_request+0x1b0>)
 80038ec:	4860      	ldr	r0, [pc, #384]	; (8003a70 <uart_request+0x1b4>)
 80038ee:	f7fe fefd 	bl	80026ec <HAL_UART_Receive_IT>


}
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
		rx_buffer_cntr += 1;
 80038f4:	4a5c      	ldr	r2, [pc, #368]	; (8003a68 <uart_request+0x1ac>)
 80038f6:	7813      	ldrb	r3, [r2, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	7013      	strb	r3, [r2, #0]
 80038fc:	e7ea      	b.n	80038d4 <uart_request+0x18>
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 80038fe:	4b5a      	ldr	r3, [pc, #360]	; (8003a68 <uart_request+0x1ac>)
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	18a3      	adds	r3, r4, r2
 8003904:	3b01      	subs	r3, #1
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b0a      	cmp	r3, #10
 800390a:	d1ed      	bne.n	80038e8 <uart_request+0x2c>
 800390c:	2a02      	cmp	r2, #2
 800390e:	d9eb      	bls.n	80038e8 <uart_request+0x2c>
		rx_buffer_copy = rx_buffer;
 8003910:	4b58      	ldr	r3, [pc, #352]	; (8003a74 <uart_request+0x1b8>)
 8003912:	601c      	str	r4, [r3, #0]
		switch(rx_buffer[1]){
 8003914:	7863      	ldrb	r3, [r4, #1]
 8003916:	3b41      	subs	r3, #65	; 0x41
 8003918:	b2da      	uxtb	r2, r3
 800391a:	2a17      	cmp	r2, #23
 800391c:	d815      	bhi.n	800394a <uart_request+0x8e>
 800391e:	0093      	lsls	r3, r2, #2
 8003920:	4a55      	ldr	r2, [pc, #340]	; (8003a78 <uart_request+0x1bc>)
 8003922:	58d3      	ldr	r3, [r2, r3]
 8003924:	469f      	mov	pc, r3
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003926:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <uart_request+0x1c0>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	6353      	str	r3, [r2, #52]	; 0x34
			enable_data_aquisition = 0;
 800392e:	4a54      	ldr	r2, [pc, #336]	; (8003a80 <uart_request+0x1c4>)
 8003930:	7013      	strb	r3, [r2, #0]
			enable_encoder_reading = 0;
 8003932:	4a54      	ldr	r2, [pc, #336]	; (8003a84 <uart_request+0x1c8>)
 8003934:	7013      	strb	r3, [r2, #0]
			enable_ADC_interrupt = 0;
 8003936:	4a54      	ldr	r2, [pc, #336]	; (8003a88 <uart_request+0x1cc>)
 8003938:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 800393a:	0020      	movs	r0, r4
 800393c:	f7fc fbe4 	bl	8000108 <strlen>
 8003940:	b282      	uxth	r2, r0
 8003942:	0021      	movs	r1, r4
 8003944:	484a      	ldr	r0, [pc, #296]	; (8003a70 <uart_request+0x1b4>)
 8003946:	f7fe fe9d 	bl	8002684 <HAL_UART_Transmit_IT>
		rx_buffer_cntr = 0;
 800394a:	2200      	movs	r2, #0
 800394c:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <uart_request+0x1ac>)
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e7ca      	b.n	80038e8 <uart_request+0x2c>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)acrobat),strlen((char*)acrobat));
 8003952:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <uart_request+0x1d0>)
 8003954:	681c      	ldr	r4, [r3, #0]
 8003956:	0020      	movs	r0, r4
 8003958:	f7fc fbd6 	bl	8000108 <strlen>
 800395c:	b282      	uxth	r2, r0
 800395e:	0021      	movs	r1, r4
 8003960:	4843      	ldr	r0, [pc, #268]	; (8003a70 <uart_request+0x1b4>)
 8003962:	f7fe fe8f 	bl	8002684 <HAL_UART_Transmit_IT>
			break;
 8003966:	e7f0      	b.n	800394a <uart_request+0x8e>
			if(*(rx_buffer+3) == '1'){
 8003968:	78e3      	ldrb	r3, [r4, #3]
 800396a:	2b31      	cmp	r3, #49	; 0x31
 800396c:	d005      	beq.n	800397a <uart_request+0xbe>
			else if(rx_buffer[3] == '0'){
 800396e:	2b30      	cmp	r3, #48	; 0x30
 8003970:	d1eb      	bne.n	800394a <uart_request+0x8e>
				enable_data_aquisition = 0;
 8003972:	2200      	movs	r2, #0
 8003974:	4b42      	ldr	r3, [pc, #264]	; (8003a80 <uart_request+0x1c4>)
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e7e7      	b.n	800394a <uart_request+0x8e>
				receive_send = 1;
 800397a:	3b30      	subs	r3, #48	; 0x30
 800397c:	4a44      	ldr	r2, [pc, #272]	; (8003a90 <uart_request+0x1d4>)
 800397e:	7013      	strb	r3, [r2, #0]
				enable_data_aquisition = 1;
 8003980:	4a3f      	ldr	r2, [pc, #252]	; (8003a80 <uart_request+0x1c4>)
 8003982:	7013      	strb	r3, [r2, #0]
 8003984:	e7e1      	b.n	800394a <uart_request+0x8e>
			torque_received = strtok((char*)rx_buffer_copy, "$T,");
 8003986:	4943      	ldr	r1, [pc, #268]	; (8003a94 <uart_request+0x1d8>)
 8003988:	0020      	movs	r0, r4
 800398a:	f000 fa3b 	bl	8003e04 <strtok>
 800398e:	4d42      	ldr	r5, [pc, #264]	; (8003a98 <uart_request+0x1dc>)
 8003990:	6028      	str	r0, [r5, #0]
			motor_dir = (strtok(NULL, ",\r\n"));
 8003992:	4942      	ldr	r1, [pc, #264]	; (8003a9c <uart_request+0x1e0>)
 8003994:	2000      	movs	r0, #0
 8003996:	f000 fa35 	bl	8003e04 <strtok>
 800399a:	4c41      	ldr	r4, [pc, #260]	; (8003aa0 <uart_request+0x1e4>)
 800399c:	6020      	str	r0, [r4, #0]
			controller_torque = 100 - ((float)strtol(torque_received,NULL,10)+315.52f)/15.828f;
 800399e:	6828      	ldr	r0, [r5, #0]
 80039a0:	220a      	movs	r2, #10
 80039a2:	2100      	movs	r1, #0
 80039a4:	f000 fb0a 	bl	8003fbc <strtol>
 80039a8:	f7fd f8f0 	bl	8000b8c <__aeabi_i2f>
 80039ac:	493d      	ldr	r1, [pc, #244]	; (8003aa4 <uart_request+0x1e8>)
 80039ae:	f7fc fc57 	bl	8000260 <__aeabi_fadd>
 80039b2:	493d      	ldr	r1, [pc, #244]	; (8003aa8 <uart_request+0x1ec>)
 80039b4:	f7fc fde6 	bl	8000584 <__aeabi_fdiv>
 80039b8:	1c01      	adds	r1, r0, #0
 80039ba:	483c      	ldr	r0, [pc, #240]	; (8003aac <uart_request+0x1f0>)
 80039bc:	f7fc ff2a 	bl	8000814 <__aeabi_fsub>
 80039c0:	f7fc fc36 	bl	8000230 <__aeabi_f2uiz>
 80039c4:	b2c1      	uxtb	r1, r0
 80039c6:	4b3a      	ldr	r3, [pc, #232]	; (8003ab0 <uart_request+0x1f4>)
 80039c8:	7019      	strb	r1, [r3, #0]
			output_torque((*motor_dir-48),controller_torque);
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	7818      	ldrb	r0, [r3, #0]
 80039ce:	3830      	subs	r0, #48	; 0x30
 80039d0:	b2c0      	uxtb	r0, r0
 80039d2:	f7ff fac1 	bl	8002f58 <output_torque>
			receive_send = 1;
 80039d6:	2201      	movs	r2, #1
 80039d8:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <uart_request+0x1d4>)
 80039da:	701a      	strb	r2, [r3, #0]
			break;
 80039dc:	e7b5      	b.n	800394a <uart_request+0x8e>
			memcpy(scratchpad, rx_buffer+3, strlen((char*)rx_buffer)-4);
 80039de:	1ce5      	adds	r5, r4, #3
 80039e0:	0020      	movs	r0, r4
 80039e2:	f7fc fb91 	bl	8000108 <strlen>
 80039e6:	4c33      	ldr	r4, [pc, #204]	; (8003ab4 <uart_request+0x1f8>)
 80039e8:	1f02      	subs	r2, r0, #4
 80039ea:	0029      	movs	r1, r5
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	f000 f91b 	bl	8003c28 <memcpy>
			duty_cycle = (uint8_t)strtol(scratchpad, (char**)NULL,10);
 80039f2:	6820      	ldr	r0, [r4, #0]
 80039f4:	220a      	movs	r2, #10
 80039f6:	2100      	movs	r1, #0
 80039f8:	f000 fae0 	bl	8003fbc <strtol>
 80039fc:	b2c0      	uxtb	r0, r0
 80039fe:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <uart_request+0x1fc>)
 8003a00:	7018      	strb	r0, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 8003a02:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <uart_request+0x1c0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6398      	str	r0, [r3, #56]	; 0x38
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <uart_request+0x1a8>)
 8003a0a:	681c      	ldr	r4, [r3, #0]
 8003a0c:	0020      	movs	r0, r4
 8003a0e:	f7fc fb7b 	bl	8000108 <strlen>
 8003a12:	b282      	uxth	r2, r0
 8003a14:	0021      	movs	r1, r4
 8003a16:	4816      	ldr	r0, [pc, #88]	; (8003a70 <uart_request+0x1b4>)
 8003a18:	f7fe fe34 	bl	8002684 <HAL_UART_Transmit_IT>
			break;
 8003a1c:	e795      	b.n	800394a <uart_request+0x8e>
			if(rx_buffer[3] == '1'){
 8003a1e:	78e3      	ldrb	r3, [r4, #3]
 8003a20:	2b31      	cmp	r3, #49	; 0x31
 8003a22:	d00c      	beq.n	8003a3e <uart_request+0x182>
			else if(rx_buffer[3] == '0'){
 8003a24:	2b30      	cmp	r3, #48	; 0x30
 8003a26:	d013      	beq.n	8003a50 <uart_request+0x194>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <uart_request+0x1a8>)
 8003a2a:	681c      	ldr	r4, [r3, #0]
 8003a2c:	0020      	movs	r0, r4
 8003a2e:	f7fc fb6b 	bl	8000108 <strlen>
 8003a32:	b282      	uxth	r2, r0
 8003a34:	0021      	movs	r1, r4
 8003a36:	480e      	ldr	r0, [pc, #56]	; (8003a70 <uart_request+0x1b4>)
 8003a38:	f7fe fe24 	bl	8002684 <HAL_UART_Transmit_IT>
			break;
 8003a3c:	e785      	b.n	800394a <uart_request+0x8e>
				motor_dir = 1;
 8003a3e:	2201      	movs	r2, #1
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <uart_request+0x1e4>)
 8003a42:	601a      	str	r2, [r3, #0]
				output_torque(motor_dir, duty_cycle);
 8003a44:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <uart_request+0x1fc>)
 8003a46:	7819      	ldrb	r1, [r3, #0]
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f7ff fa85 	bl	8002f58 <output_torque>
 8003a4e:	e7eb      	b.n	8003a28 <uart_request+0x16c>
				motor_dir = 0;
 8003a50:	2200      	movs	r2, #0
 8003a52:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <uart_request+0x1e4>)
 8003a54:	601a      	str	r2, [r3, #0]
				output_torque(motor_dir, duty_cycle);
 8003a56:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <uart_request+0x1fc>)
 8003a58:	7819      	ldrb	r1, [r3, #0]
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7ff fa7c 	bl	8002f58 <output_torque>
 8003a60:	e7e2      	b.n	8003a28 <uart_request+0x16c>
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	20000224 	.word	0x20000224
 8003a68:	20000228 	.word	0x20000228
 8003a6c:	20000230 	.word	0x20000230
 8003a70:	20000310 	.word	0x20000310
 8003a74:	2000022c 	.word	0x2000022c
 8003a78:	080047c4 	.word	0x080047c4
 8003a7c:	2000028c 	.word	0x2000028c
 8003a80:	20000212 	.word	0x20000212
 8003a84:	20000011 	.word	0x20000011
 8003a88:	20000010 	.word	0x20000010
 8003a8c:	20000004 	.word	0x20000004
 8003a90:	20000220 	.word	0x20000220
 8003a94:	08004824 	.word	0x08004824
 8003a98:	20000270 	.word	0x20000270
 8003a9c:	08004828 	.word	0x08004828
 8003aa0:	20000214 	.word	0x20000214
 8003aa4:	439dc28f 	.word	0x439dc28f
 8003aa8:	417d3f7d 	.word	0x417d3f7d
 8003aac:	42c80000 	.word	0x42c80000
 8003ab0:	20000209 	.word	0x20000209
 8003ab4:	20000240 	.word	0x20000240
 8003ab8:	20000211 	.word	0x20000211

08003abc <user_main>:
#include "function.h"
#include "variables.h"

extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim14;
void user_main(){
 8003abc:	b510      	push	{r4, lr}

	if(uart_flag == 1){
 8003abe:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <user_main+0x90>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d010      	beq.n	8003ae8 <user_main+0x2c>
		uart_flag = 0;
		uart_request();
	}

	if(encoder_flag == 1){
 8003ac6:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <user_main+0x94>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d012      	beq.n	8003af4 <user_main+0x38>
		encoder_flag = 0;
		read_motor_position();
	}

	if(adc_flag == 1){
 8003ace:	4b21      	ldr	r3, [pc, #132]	; (8003b54 <user_main+0x98>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d014      	beq.n	8003b00 <user_main+0x44>
		adc_flag = 0;
		get_current_potentiometer();
	}

	if(enable_data_aquisition){
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <user_main+0x9c>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <user_main+0x2a>
		if(data_flag == 1){ // send system variables over UART
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <user_main+0xa0>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d012      	beq.n	8003b0c <user_main+0x50>
//		receive_send = 0;
//	}



}
 8003ae6:	bd10      	pop	{r4, pc}
		uart_flag = 0;
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <user_main+0x90>)
 8003aec:	701a      	strb	r2, [r3, #0]
		uart_request();
 8003aee:	f7ff fee5 	bl	80038bc <uart_request>
 8003af2:	e7e8      	b.n	8003ac6 <user_main+0xa>
		encoder_flag = 0;
 8003af4:	2200      	movs	r2, #0
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <user_main+0x94>)
 8003af8:	701a      	strb	r2, [r3, #0]
		read_motor_position();
 8003afa:	f7ff fa0d 	bl	8002f18 <read_motor_position>
 8003afe:	e7e6      	b.n	8003ace <user_main+0x12>
		adc_flag = 0;
 8003b00:	2200      	movs	r2, #0
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <user_main+0x98>)
 8003b04:	701a      	strb	r2, [r3, #0]
		get_current_potentiometer();
 8003b06:	f7ff f98d 	bl	8002e24 <get_current_potentiometer>
 8003b0a:	e7e4      	b.n	8003ad6 <user_main+0x1a>
			time += 1;
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <user_main+0xa4>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	3201      	adds	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
			sprintf(send_time,"%lu", time);
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <user_main+0xa8>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	4913      	ldr	r1, [pc, #76]	; (8003b68 <user_main+0xac>)
 8003b1a:	f000 f951 	bl	8003dc0 <siprintf>
			data_flag = 0;
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <user_main+0xa0>)
 8003b22:	701a      	strb	r2, [r3, #0]
			if(receive_send == 1){
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <user_main+0xb0>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d1dc      	bne.n	8003ae6 <user_main+0x2a>
			data_aquisition();
 8003b2c:	f7ff fdfe 	bl	800372c <data_aquisition>
			HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <user_main+0xb4>)
 8003b32:	681c      	ldr	r4, [r3, #0]
 8003b34:	0020      	movs	r0, r4
 8003b36:	f7fc fae7 	bl	8000108 <strlen>
 8003b3a:	b282      	uxth	r2, r0
 8003b3c:	0021      	movs	r1, r4
 8003b3e:	480d      	ldr	r0, [pc, #52]	; (8003b74 <user_main+0xb8>)
 8003b40:	f7fe fe2e 	bl	80027a0 <HAL_UART_Transmit_DMA>
			receive_send = 0;
 8003b44:	2200      	movs	r2, #0
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <user_main+0xb0>)
 8003b48:	701a      	strb	r2, [r3, #0]
}
 8003b4a:	e7cc      	b.n	8003ae6 <user_main+0x2a>
 8003b4c:	20000274 	.word	0x20000274
 8003b50:	20000213 	.word	0x20000213
 8003b54:	20000208 	.word	0x20000208
 8003b58:	20000212 	.word	0x20000212
 8003b5c:	20000210 	.word	0x20000210
 8003b60:	20000268 	.word	0x20000268
 8003b64:	2000024c 	.word	0x2000024c
 8003b68:	08004778 	.word	0x08004778
 8003b6c:	20000220 	.word	0x20000220
 8003b70:	2000020c 	.word	0x2000020c
 8003b74:	20000310 	.word	0x20000310

08003b78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b78:	480d      	ldr	r0, [pc, #52]	; (8003bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b7c:	480d      	ldr	r0, [pc, #52]	; (8003bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b7e:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b80:	4a0e      	ldr	r2, [pc, #56]	; (8003bbc <LoopForever+0xe>)
  movs r3, #0
 8003b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b84:	e002      	b.n	8003b8c <LoopCopyDataInit>

08003b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b8a:	3304      	adds	r3, #4

08003b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b90:	d3f9      	bcc.n	8003b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b92:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b94:	4c0b      	ldr	r4, [pc, #44]	; (8003bc4 <LoopForever+0x16>)
  movs r3, #0
 8003b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b98:	e001      	b.n	8003b9e <LoopFillZerobss>

08003b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b9c:	3204      	adds	r2, #4

08003b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba0:	d3fb      	bcc.n	8003b9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ba2:	f7ff fd93 	bl	80036cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003ba6:	f000 f811 	bl	8003bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003baa:	f7ff fc2d 	bl	8003408 <main>

08003bae <LoopForever>:

LoopForever:
    b LoopForever
 8003bae:	e7fe      	b.n	8003bae <LoopForever>
  ldr   r0, =_estack
 8003bb0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bb8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003bbc:	080049a8 	.word	0x080049a8
  ldr r2, =_sbss
 8003bc0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003bc4:	20000454 	.word	0x20000454

08003bc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bc8:	e7fe      	b.n	8003bc8 <ADC1_IRQHandler>
	...

08003bcc <__libc_init_array>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	2600      	movs	r6, #0
 8003bd0:	4d0c      	ldr	r5, [pc, #48]	; (8003c04 <__libc_init_array+0x38>)
 8003bd2:	4c0d      	ldr	r4, [pc, #52]	; (8003c08 <__libc_init_array+0x3c>)
 8003bd4:	1b64      	subs	r4, r4, r5
 8003bd6:	10a4      	asrs	r4, r4, #2
 8003bd8:	42a6      	cmp	r6, r4
 8003bda:	d109      	bne.n	8003bf0 <__libc_init_array+0x24>
 8003bdc:	2600      	movs	r6, #0
 8003bde:	f000 fd6f 	bl	80046c0 <_init>
 8003be2:	4d0a      	ldr	r5, [pc, #40]	; (8003c0c <__libc_init_array+0x40>)
 8003be4:	4c0a      	ldr	r4, [pc, #40]	; (8003c10 <__libc_init_array+0x44>)
 8003be6:	1b64      	subs	r4, r4, r5
 8003be8:	10a4      	asrs	r4, r4, #2
 8003bea:	42a6      	cmp	r6, r4
 8003bec:	d105      	bne.n	8003bfa <__libc_init_array+0x2e>
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	00b3      	lsls	r3, r6, #2
 8003bf2:	58eb      	ldr	r3, [r5, r3]
 8003bf4:	4798      	blx	r3
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7ee      	b.n	8003bd8 <__libc_init_array+0xc>
 8003bfa:	00b3      	lsls	r3, r6, #2
 8003bfc:	58eb      	ldr	r3, [r5, r3]
 8003bfe:	4798      	blx	r3
 8003c00:	3601      	adds	r6, #1
 8003c02:	e7f2      	b.n	8003bea <__libc_init_array+0x1e>
 8003c04:	080049a0 	.word	0x080049a0
 8003c08:	080049a0 	.word	0x080049a0
 8003c0c:	080049a0 	.word	0x080049a0
 8003c10:	080049a4 	.word	0x080049a4

08003c14 <malloc>:
 8003c14:	b510      	push	{r4, lr}
 8003c16:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <malloc+0x10>)
 8003c18:	0001      	movs	r1, r0
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	f000 f860 	bl	8003ce0 <_malloc_r>
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	20000018 	.word	0x20000018

08003c28 <memcpy>:
 8003c28:	2300      	movs	r3, #0
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d100      	bne.n	8003c32 <memcpy+0xa>
 8003c30:	bd10      	pop	{r4, pc}
 8003c32:	5ccc      	ldrb	r4, [r1, r3]
 8003c34:	54c4      	strb	r4, [r0, r3]
 8003c36:	3301      	adds	r3, #1
 8003c38:	e7f8      	b.n	8003c2c <memcpy+0x4>

08003c3a <memset>:
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	1882      	adds	r2, r0, r2
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d100      	bne.n	8003c44 <memset+0xa>
 8003c42:	4770      	bx	lr
 8003c44:	7019      	strb	r1, [r3, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	e7f9      	b.n	8003c3e <memset+0x4>
	...

08003c4c <_free_r>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	0005      	movs	r5, r0
 8003c50:	2900      	cmp	r1, #0
 8003c52:	d010      	beq.n	8003c76 <_free_r+0x2a>
 8003c54:	1f0c      	subs	r4, r1, #4
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da00      	bge.n	8003c5e <_free_r+0x12>
 8003c5c:	18e4      	adds	r4, r4, r3
 8003c5e:	0028      	movs	r0, r5
 8003c60:	f000 f9d5 	bl	800400e <__malloc_lock>
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <_free_r+0x90>)
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <_free_r+0x2c>
 8003c6c:	6063      	str	r3, [r4, #4]
 8003c6e:	6014      	str	r4, [r2, #0]
 8003c70:	0028      	movs	r0, r5
 8003c72:	f000 f9cd 	bl	8004010 <__malloc_unlock>
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	42a3      	cmp	r3, r4
 8003c7a:	d909      	bls.n	8003c90 <_free_r+0x44>
 8003c7c:	6821      	ldr	r1, [r4, #0]
 8003c7e:	1860      	adds	r0, r4, r1
 8003c80:	4283      	cmp	r3, r0
 8003c82:	d1f3      	bne.n	8003c6c <_free_r+0x20>
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	1841      	adds	r1, r0, r1
 8003c8a:	6021      	str	r1, [r4, #0]
 8003c8c:	e7ee      	b.n	8003c6c <_free_r+0x20>
 8003c8e:	0013      	movs	r3, r2
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	d001      	beq.n	8003c9a <_free_r+0x4e>
 8003c96:	42a2      	cmp	r2, r4
 8003c98:	d9f9      	bls.n	8003c8e <_free_r+0x42>
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	1858      	adds	r0, r3, r1
 8003c9e:	42a0      	cmp	r0, r4
 8003ca0:	d10b      	bne.n	8003cba <_free_r+0x6e>
 8003ca2:	6820      	ldr	r0, [r4, #0]
 8003ca4:	1809      	adds	r1, r1, r0
 8003ca6:	1858      	adds	r0, r3, r1
 8003ca8:	6019      	str	r1, [r3, #0]
 8003caa:	4282      	cmp	r2, r0
 8003cac:	d1e0      	bne.n	8003c70 <_free_r+0x24>
 8003cae:	6810      	ldr	r0, [r2, #0]
 8003cb0:	6852      	ldr	r2, [r2, #4]
 8003cb2:	1841      	adds	r1, r0, r1
 8003cb4:	6019      	str	r1, [r3, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	e7da      	b.n	8003c70 <_free_r+0x24>
 8003cba:	42a0      	cmp	r0, r4
 8003cbc:	d902      	bls.n	8003cc4 <_free_r+0x78>
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	602b      	str	r3, [r5, #0]
 8003cc2:	e7d5      	b.n	8003c70 <_free_r+0x24>
 8003cc4:	6821      	ldr	r1, [r4, #0]
 8003cc6:	1860      	adds	r0, r4, r1
 8003cc8:	4282      	cmp	r2, r0
 8003cca:	d103      	bne.n	8003cd4 <_free_r+0x88>
 8003ccc:	6810      	ldr	r0, [r2, #0]
 8003cce:	6852      	ldr	r2, [r2, #4]
 8003cd0:	1841      	adds	r1, r0, r1
 8003cd2:	6021      	str	r1, [r4, #0]
 8003cd4:	6062      	str	r2, [r4, #4]
 8003cd6:	605c      	str	r4, [r3, #4]
 8003cd8:	e7ca      	b.n	8003c70 <_free_r+0x24>
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	2000027c 	.word	0x2000027c

08003ce0 <_malloc_r>:
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	b570      	push	{r4, r5, r6, lr}
 8003ce4:	1ccd      	adds	r5, r1, #3
 8003ce6:	439d      	bics	r5, r3
 8003ce8:	3508      	adds	r5, #8
 8003cea:	0006      	movs	r6, r0
 8003cec:	2d0c      	cmp	r5, #12
 8003cee:	d21e      	bcs.n	8003d2e <_malloc_r+0x4e>
 8003cf0:	250c      	movs	r5, #12
 8003cf2:	42a9      	cmp	r1, r5
 8003cf4:	d81d      	bhi.n	8003d32 <_malloc_r+0x52>
 8003cf6:	0030      	movs	r0, r6
 8003cf8:	f000 f989 	bl	800400e <__malloc_lock>
 8003cfc:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <_malloc_r+0xb4>)
 8003cfe:	6814      	ldr	r4, [r2, #0]
 8003d00:	0021      	movs	r1, r4
 8003d02:	2900      	cmp	r1, #0
 8003d04:	d119      	bne.n	8003d3a <_malloc_r+0x5a>
 8003d06:	4c24      	ldr	r4, [pc, #144]	; (8003d98 <_malloc_r+0xb8>)
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <_malloc_r+0x36>
 8003d0e:	0030      	movs	r0, r6
 8003d10:	f000 f844 	bl	8003d9c <_sbrk_r>
 8003d14:	6020      	str	r0, [r4, #0]
 8003d16:	0029      	movs	r1, r5
 8003d18:	0030      	movs	r0, r6
 8003d1a:	f000 f83f 	bl	8003d9c <_sbrk_r>
 8003d1e:	1c43      	adds	r3, r0, #1
 8003d20:	d12c      	bne.n	8003d7c <_malloc_r+0x9c>
 8003d22:	230c      	movs	r3, #12
 8003d24:	0030      	movs	r0, r6
 8003d26:	6033      	str	r3, [r6, #0]
 8003d28:	f000 f972 	bl	8004010 <__malloc_unlock>
 8003d2c:	e003      	b.n	8003d36 <_malloc_r+0x56>
 8003d2e:	2d00      	cmp	r5, #0
 8003d30:	dadf      	bge.n	8003cf2 <_malloc_r+0x12>
 8003d32:	230c      	movs	r3, #12
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	2000      	movs	r0, #0
 8003d38:	bd70      	pop	{r4, r5, r6, pc}
 8003d3a:	680b      	ldr	r3, [r1, #0]
 8003d3c:	1b5b      	subs	r3, r3, r5
 8003d3e:	d41a      	bmi.n	8003d76 <_malloc_r+0x96>
 8003d40:	2b0b      	cmp	r3, #11
 8003d42:	d903      	bls.n	8003d4c <_malloc_r+0x6c>
 8003d44:	600b      	str	r3, [r1, #0]
 8003d46:	18cc      	adds	r4, r1, r3
 8003d48:	6025      	str	r5, [r4, #0]
 8003d4a:	e003      	b.n	8003d54 <_malloc_r+0x74>
 8003d4c:	428c      	cmp	r4, r1
 8003d4e:	d10e      	bne.n	8003d6e <_malloc_r+0x8e>
 8003d50:	6863      	ldr	r3, [r4, #4]
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	0030      	movs	r0, r6
 8003d56:	f000 f95b 	bl	8004010 <__malloc_unlock>
 8003d5a:	0020      	movs	r0, r4
 8003d5c:	2207      	movs	r2, #7
 8003d5e:	300b      	adds	r0, #11
 8003d60:	1d23      	adds	r3, r4, #4
 8003d62:	4390      	bics	r0, r2
 8003d64:	1ac3      	subs	r3, r0, r3
 8003d66:	d0e7      	beq.n	8003d38 <_malloc_r+0x58>
 8003d68:	425a      	negs	r2, r3
 8003d6a:	50e2      	str	r2, [r4, r3]
 8003d6c:	e7e4      	b.n	8003d38 <_malloc_r+0x58>
 8003d6e:	684b      	ldr	r3, [r1, #4]
 8003d70:	6063      	str	r3, [r4, #4]
 8003d72:	000c      	movs	r4, r1
 8003d74:	e7ee      	b.n	8003d54 <_malloc_r+0x74>
 8003d76:	000c      	movs	r4, r1
 8003d78:	6849      	ldr	r1, [r1, #4]
 8003d7a:	e7c2      	b.n	8003d02 <_malloc_r+0x22>
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	1cc4      	adds	r4, r0, #3
 8003d80:	439c      	bics	r4, r3
 8003d82:	42a0      	cmp	r0, r4
 8003d84:	d0e0      	beq.n	8003d48 <_malloc_r+0x68>
 8003d86:	1a21      	subs	r1, r4, r0
 8003d88:	0030      	movs	r0, r6
 8003d8a:	f000 f807 	bl	8003d9c <_sbrk_r>
 8003d8e:	1c43      	adds	r3, r0, #1
 8003d90:	d1da      	bne.n	8003d48 <_malloc_r+0x68>
 8003d92:	e7c6      	b.n	8003d22 <_malloc_r+0x42>
 8003d94:	2000027c 	.word	0x2000027c
 8003d98:	20000280 	.word	0x20000280

08003d9c <_sbrk_r>:
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	b570      	push	{r4, r5, r6, lr}
 8003da0:	4c06      	ldr	r4, [pc, #24]	; (8003dbc <_sbrk_r+0x20>)
 8003da2:	0005      	movs	r5, r0
 8003da4:	0008      	movs	r0, r1
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	f000 fc7a 	bl	80046a0 <_sbrk>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d103      	bne.n	8003db8 <_sbrk_r+0x1c>
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d000      	beq.n	8003db8 <_sbrk_r+0x1c>
 8003db6:	602b      	str	r3, [r5, #0]
 8003db8:	bd70      	pop	{r4, r5, r6, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	20000450 	.word	0x20000450

08003dc0 <siprintf>:
 8003dc0:	b40e      	push	{r1, r2, r3}
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	b09d      	sub	sp, #116	; 0x74
 8003dc6:	a902      	add	r1, sp, #8
 8003dc8:	9002      	str	r0, [sp, #8]
 8003dca:	6108      	str	r0, [r1, #16]
 8003dcc:	480b      	ldr	r0, [pc, #44]	; (8003dfc <siprintf+0x3c>)
 8003dce:	2482      	movs	r4, #130	; 0x82
 8003dd0:	6088      	str	r0, [r1, #8]
 8003dd2:	6148      	str	r0, [r1, #20]
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	4240      	negs	r0, r0
 8003dd8:	ab1f      	add	r3, sp, #124	; 0x7c
 8003dda:	81c8      	strh	r0, [r1, #14]
 8003ddc:	4808      	ldr	r0, [pc, #32]	; (8003e00 <siprintf+0x40>)
 8003dde:	cb04      	ldmia	r3!, {r2}
 8003de0:	00a4      	lsls	r4, r4, #2
 8003de2:	6800      	ldr	r0, [r0, #0]
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	818c      	strh	r4, [r1, #12]
 8003de8:	f000 f976 	bl	80040d8 <_svfiprintf_r>
 8003dec:	2300      	movs	r3, #0
 8003dee:	9a02      	ldr	r2, [sp, #8]
 8003df0:	7013      	strb	r3, [r2, #0]
 8003df2:	b01d      	add	sp, #116	; 0x74
 8003df4:	bc10      	pop	{r4}
 8003df6:	bc08      	pop	{r3}
 8003df8:	b003      	add	sp, #12
 8003dfa:	4718      	bx	r3
 8003dfc:	7fffffff 	.word	0x7fffffff
 8003e00:	20000018 	.word	0x20000018

08003e04 <strtok>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <strtok+0x4c>)
 8003e08:	0006      	movs	r6, r0
 8003e0a:	681d      	ldr	r5, [r3, #0]
 8003e0c:	000f      	movs	r7, r1
 8003e0e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003e10:	2c00      	cmp	r4, #0
 8003e12:	d116      	bne.n	8003e42 <strtok+0x3e>
 8003e14:	2050      	movs	r0, #80	; 0x50
 8003e16:	f7ff fefd 	bl	8003c14 <malloc>
 8003e1a:	65a8      	str	r0, [r5, #88]	; 0x58
 8003e1c:	6004      	str	r4, [r0, #0]
 8003e1e:	6044      	str	r4, [r0, #4]
 8003e20:	6084      	str	r4, [r0, #8]
 8003e22:	60c4      	str	r4, [r0, #12]
 8003e24:	6104      	str	r4, [r0, #16]
 8003e26:	6144      	str	r4, [r0, #20]
 8003e28:	6184      	str	r4, [r0, #24]
 8003e2a:	6284      	str	r4, [r0, #40]	; 0x28
 8003e2c:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003e2e:	6304      	str	r4, [r0, #48]	; 0x30
 8003e30:	6344      	str	r4, [r0, #52]	; 0x34
 8003e32:	6384      	str	r4, [r0, #56]	; 0x38
 8003e34:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003e36:	6404      	str	r4, [r0, #64]	; 0x40
 8003e38:	6444      	str	r4, [r0, #68]	; 0x44
 8003e3a:	6484      	str	r4, [r0, #72]	; 0x48
 8003e3c:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003e3e:	7704      	strb	r4, [r0, #28]
 8003e40:	6244      	str	r4, [r0, #36]	; 0x24
 8003e42:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003e44:	0039      	movs	r1, r7
 8003e46:	0030      	movs	r0, r6
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f000 f803 	bl	8003e54 <__strtok_r>
 8003e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e50:	20000018 	.word	0x20000018

08003e54 <__strtok_r>:
 8003e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d104      	bne.n	8003e64 <__strtok_r+0x10>
 8003e5a:	6810      	ldr	r0, [r2, #0]
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d101      	bne.n	8003e64 <__strtok_r+0x10>
 8003e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e62:	0020      	movs	r0, r4
 8003e64:	000e      	movs	r6, r1
 8003e66:	7805      	ldrb	r5, [r0, #0]
 8003e68:	1c44      	adds	r4, r0, #1
 8003e6a:	7837      	ldrb	r7, [r6, #0]
 8003e6c:	2f00      	cmp	r7, #0
 8003e6e:	d104      	bne.n	8003e7a <__strtok_r+0x26>
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	d110      	bne.n	8003e96 <__strtok_r+0x42>
 8003e74:	6015      	str	r5, [r2, #0]
 8003e76:	0028      	movs	r0, r5
 8003e78:	e7f2      	b.n	8003e60 <__strtok_r+0xc>
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	42bd      	cmp	r5, r7
 8003e7e:	d1f4      	bne.n	8003e6a <__strtok_r+0x16>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ee      	bne.n	8003e62 <__strtok_r+0xe>
 8003e84:	6014      	str	r4, [r2, #0]
 8003e86:	7003      	strb	r3, [r0, #0]
 8003e88:	e7ea      	b.n	8003e60 <__strtok_r+0xc>
 8003e8a:	0033      	movs	r3, r6
 8003e8c:	e00e      	b.n	8003eac <__strtok_r+0x58>
 8003e8e:	3501      	adds	r5, #1
 8003e90:	001c      	movs	r4, r3
 8003e92:	2f00      	cmp	r7, #0
 8003e94:	d102      	bne.n	8003e9c <__strtok_r+0x48>
 8003e96:	000d      	movs	r5, r1
 8003e98:	7826      	ldrb	r6, [r4, #0]
 8003e9a:	1c63      	adds	r3, r4, #1
 8003e9c:	782f      	ldrb	r7, [r5, #0]
 8003e9e:	42be      	cmp	r6, r7
 8003ea0:	d1f5      	bne.n	8003e8e <__strtok_r+0x3a>
 8003ea2:	2e00      	cmp	r6, #0
 8003ea4:	d0f1      	beq.n	8003e8a <__strtok_r+0x36>
 8003ea6:	2400      	movs	r4, #0
 8003ea8:	1e59      	subs	r1, r3, #1
 8003eaa:	700c      	strb	r4, [r1, #0]
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e7d7      	b.n	8003e60 <__strtok_r+0xc>

08003eb0 <_strtol_l.isra.0>:
 8003eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb2:	001f      	movs	r7, r3
 8003eb4:	000e      	movs	r6, r1
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	9005      	str	r0, [sp, #20]
 8003eba:	9103      	str	r1, [sp, #12]
 8003ebc:	9202      	str	r2, [sp, #8]
 8003ebe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ec0:	7834      	ldrb	r4, [r6, #0]
 8003ec2:	f000 f88f 	bl	8003fe4 <__locale_ctype_ptr_l>
 8003ec6:	2208      	movs	r2, #8
 8003ec8:	1900      	adds	r0, r0, r4
 8003eca:	7843      	ldrb	r3, [r0, #1]
 8003ecc:	1c75      	adds	r5, r6, #1
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d10c      	bne.n	8003eec <_strtol_l.isra.0+0x3c>
 8003ed2:	2c2d      	cmp	r4, #45	; 0x2d
 8003ed4:	d10c      	bne.n	8003ef0 <_strtol_l.isra.0+0x40>
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	782c      	ldrb	r4, [r5, #0]
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	1cb5      	adds	r5, r6, #2
 8003ede:	2f00      	cmp	r7, #0
 8003ee0:	d00c      	beq.n	8003efc <_strtol_l.isra.0+0x4c>
 8003ee2:	2f10      	cmp	r7, #16
 8003ee4:	d114      	bne.n	8003f10 <_strtol_l.isra.0+0x60>
 8003ee6:	2c30      	cmp	r4, #48	; 0x30
 8003ee8:	d00a      	beq.n	8003f00 <_strtol_l.isra.0+0x50>
 8003eea:	e011      	b.n	8003f10 <_strtol_l.isra.0+0x60>
 8003eec:	002e      	movs	r6, r5
 8003eee:	e7e6      	b.n	8003ebe <_strtol_l.isra.0+0xe>
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	2c2b      	cmp	r4, #43	; 0x2b
 8003ef4:	d1f3      	bne.n	8003ede <_strtol_l.isra.0+0x2e>
 8003ef6:	782c      	ldrb	r4, [r5, #0]
 8003ef8:	1cb5      	adds	r5, r6, #2
 8003efa:	e7f0      	b.n	8003ede <_strtol_l.isra.0+0x2e>
 8003efc:	2c30      	cmp	r4, #48	; 0x30
 8003efe:	d12f      	bne.n	8003f60 <_strtol_l.isra.0+0xb0>
 8003f00:	2220      	movs	r2, #32
 8003f02:	782b      	ldrb	r3, [r5, #0]
 8003f04:	4393      	bics	r3, r2
 8003f06:	2b58      	cmp	r3, #88	; 0x58
 8003f08:	d151      	bne.n	8003fae <_strtol_l.isra.0+0xfe>
 8003f0a:	2710      	movs	r7, #16
 8003f0c:	786c      	ldrb	r4, [r5, #1]
 8003f0e:	3502      	adds	r5, #2
 8003f10:	9b01      	ldr	r3, [sp, #4]
 8003f12:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <_strtol_l.isra.0+0x108>)
 8003f14:	0039      	movs	r1, r7
 8003f16:	189e      	adds	r6, r3, r2
 8003f18:	0030      	movs	r0, r6
 8003f1a:	f7fc f983 	bl	8000224 <__aeabi_uidivmod>
 8003f1e:	0030      	movs	r0, r6
 8003f20:	9104      	str	r1, [sp, #16]
 8003f22:	0039      	movs	r1, r7
 8003f24:	f7fc f8f8 	bl	8000118 <__udivsi3>
 8003f28:	2101      	movs	r1, #1
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	4249      	negs	r1, r1
 8003f2e:	0002      	movs	r2, r0
 8003f30:	468c      	mov	ip, r1
 8003f32:	0018      	movs	r0, r3
 8003f34:	0021      	movs	r1, r4
 8003f36:	3930      	subs	r1, #48	; 0x30
 8003f38:	2909      	cmp	r1, #9
 8003f3a:	d813      	bhi.n	8003f64 <_strtol_l.isra.0+0xb4>
 8003f3c:	000c      	movs	r4, r1
 8003f3e:	42a7      	cmp	r7, r4
 8003f40:	dd1c      	ble.n	8003f7c <_strtol_l.isra.0+0xcc>
 8003f42:	1c59      	adds	r1, r3, #1
 8003f44:	d009      	beq.n	8003f5a <_strtol_l.isra.0+0xaa>
 8003f46:	4663      	mov	r3, ip
 8003f48:	4282      	cmp	r2, r0
 8003f4a:	d306      	bcc.n	8003f5a <_strtol_l.isra.0+0xaa>
 8003f4c:	d102      	bne.n	8003f54 <_strtol_l.isra.0+0xa4>
 8003f4e:	9904      	ldr	r1, [sp, #16]
 8003f50:	42a1      	cmp	r1, r4
 8003f52:	db02      	blt.n	8003f5a <_strtol_l.isra.0+0xaa>
 8003f54:	2301      	movs	r3, #1
 8003f56:	4378      	muls	r0, r7
 8003f58:	1820      	adds	r0, r4, r0
 8003f5a:	782c      	ldrb	r4, [r5, #0]
 8003f5c:	3501      	adds	r5, #1
 8003f5e:	e7e9      	b.n	8003f34 <_strtol_l.isra.0+0x84>
 8003f60:	270a      	movs	r7, #10
 8003f62:	e7d5      	b.n	8003f10 <_strtol_l.isra.0+0x60>
 8003f64:	0021      	movs	r1, r4
 8003f66:	3941      	subs	r1, #65	; 0x41
 8003f68:	2919      	cmp	r1, #25
 8003f6a:	d801      	bhi.n	8003f70 <_strtol_l.isra.0+0xc0>
 8003f6c:	3c37      	subs	r4, #55	; 0x37
 8003f6e:	e7e6      	b.n	8003f3e <_strtol_l.isra.0+0x8e>
 8003f70:	0021      	movs	r1, r4
 8003f72:	3961      	subs	r1, #97	; 0x61
 8003f74:	2919      	cmp	r1, #25
 8003f76:	d801      	bhi.n	8003f7c <_strtol_l.isra.0+0xcc>
 8003f78:	3c57      	subs	r4, #87	; 0x57
 8003f7a:	e7e0      	b.n	8003f3e <_strtol_l.isra.0+0x8e>
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	d108      	bne.n	8003f92 <_strtol_l.isra.0+0xe2>
 8003f80:	9a05      	ldr	r2, [sp, #20]
 8003f82:	3323      	adds	r3, #35	; 0x23
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	9b02      	ldr	r3, [sp, #8]
 8003f88:	0030      	movs	r0, r6
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <_strtol_l.isra.0+0xf6>
 8003f8e:	b007      	add	sp, #28
 8003f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f92:	9a01      	ldr	r2, [sp, #4]
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d000      	beq.n	8003f9a <_strtol_l.isra.0+0xea>
 8003f98:	4240      	negs	r0, r0
 8003f9a:	9a02      	ldr	r2, [sp, #8]
 8003f9c:	2a00      	cmp	r2, #0
 8003f9e:	d0f6      	beq.n	8003f8e <_strtol_l.isra.0+0xde>
 8003fa0:	9a03      	ldr	r2, [sp, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d000      	beq.n	8003fa8 <_strtol_l.isra.0+0xf8>
 8003fa6:	1e6a      	subs	r2, r5, #1
 8003fa8:	9b02      	ldr	r3, [sp, #8]
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e7ef      	b.n	8003f8e <_strtol_l.isra.0+0xde>
 8003fae:	2430      	movs	r4, #48	; 0x30
 8003fb0:	2f00      	cmp	r7, #0
 8003fb2:	d1ad      	bne.n	8003f10 <_strtol_l.isra.0+0x60>
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	e7ab      	b.n	8003f10 <_strtol_l.isra.0+0x60>
 8003fb8:	7fffffff 	.word	0x7fffffff

08003fbc <strtol>:
 8003fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fbe:	0013      	movs	r3, r2
 8003fc0:	4a06      	ldr	r2, [pc, #24]	; (8003fdc <strtol+0x20>)
 8003fc2:	0005      	movs	r5, r0
 8003fc4:	6810      	ldr	r0, [r2, #0]
 8003fc6:	6a04      	ldr	r4, [r0, #32]
 8003fc8:	2c00      	cmp	r4, #0
 8003fca:	d100      	bne.n	8003fce <strtol+0x12>
 8003fcc:	4c04      	ldr	r4, [pc, #16]	; (8003fe0 <strtol+0x24>)
 8003fce:	000a      	movs	r2, r1
 8003fd0:	9400      	str	r4, [sp, #0]
 8003fd2:	0029      	movs	r1, r5
 8003fd4:	f7ff ff6c 	bl	8003eb0 <_strtol_l.isra.0>
 8003fd8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	20000018 	.word	0x20000018
 8003fe0:	2000007c 	.word	0x2000007c

08003fe4 <__locale_ctype_ptr_l>:
 8003fe4:	30ec      	adds	r0, #236	; 0xec
 8003fe6:	6800      	ldr	r0, [r0, #0]
 8003fe8:	4770      	bx	lr

08003fea <__ascii_mbtowc>:
 8003fea:	b082      	sub	sp, #8
 8003fec:	2900      	cmp	r1, #0
 8003fee:	d100      	bne.n	8003ff2 <__ascii_mbtowc+0x8>
 8003ff0:	a901      	add	r1, sp, #4
 8003ff2:	1e10      	subs	r0, r2, #0
 8003ff4:	d006      	beq.n	8004004 <__ascii_mbtowc+0x1a>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <__ascii_mbtowc+0x1e>
 8003ffa:	7813      	ldrb	r3, [r2, #0]
 8003ffc:	600b      	str	r3, [r1, #0]
 8003ffe:	7810      	ldrb	r0, [r2, #0]
 8004000:	1e43      	subs	r3, r0, #1
 8004002:	4198      	sbcs	r0, r3
 8004004:	b002      	add	sp, #8
 8004006:	4770      	bx	lr
 8004008:	2002      	movs	r0, #2
 800400a:	4240      	negs	r0, r0
 800400c:	e7fa      	b.n	8004004 <__ascii_mbtowc+0x1a>

0800400e <__malloc_lock>:
 800400e:	4770      	bx	lr

08004010 <__malloc_unlock>:
 8004010:	4770      	bx	lr
	...

08004014 <__ssputs_r>:
 8004014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004016:	688e      	ldr	r6, [r1, #8]
 8004018:	b085      	sub	sp, #20
 800401a:	0007      	movs	r7, r0
 800401c:	000c      	movs	r4, r1
 800401e:	9203      	str	r2, [sp, #12]
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	429e      	cmp	r6, r3
 8004024:	d839      	bhi.n	800409a <__ssputs_r+0x86>
 8004026:	2390      	movs	r3, #144	; 0x90
 8004028:	898a      	ldrh	r2, [r1, #12]
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	421a      	tst	r2, r3
 800402e:	d034      	beq.n	800409a <__ssputs_r+0x86>
 8004030:	2503      	movs	r5, #3
 8004032:	6909      	ldr	r1, [r1, #16]
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	1a5b      	subs	r3, r3, r1
 8004038:	9302      	str	r3, [sp, #8]
 800403a:	6963      	ldr	r3, [r4, #20]
 800403c:	9802      	ldr	r0, [sp, #8]
 800403e:	435d      	muls	r5, r3
 8004040:	0feb      	lsrs	r3, r5, #31
 8004042:	195d      	adds	r5, r3, r5
 8004044:	9b01      	ldr	r3, [sp, #4]
 8004046:	106d      	asrs	r5, r5, #1
 8004048:	3301      	adds	r3, #1
 800404a:	181b      	adds	r3, r3, r0
 800404c:	42ab      	cmp	r3, r5
 800404e:	d900      	bls.n	8004052 <__ssputs_r+0x3e>
 8004050:	001d      	movs	r5, r3
 8004052:	0553      	lsls	r3, r2, #21
 8004054:	d532      	bpl.n	80040bc <__ssputs_r+0xa8>
 8004056:	0029      	movs	r1, r5
 8004058:	0038      	movs	r0, r7
 800405a:	f7ff fe41 	bl	8003ce0 <_malloc_r>
 800405e:	1e06      	subs	r6, r0, #0
 8004060:	d109      	bne.n	8004076 <__ssputs_r+0x62>
 8004062:	230c      	movs	r3, #12
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	2340      	movs	r3, #64	; 0x40
 8004068:	2001      	movs	r0, #1
 800406a:	89a2      	ldrh	r2, [r4, #12]
 800406c:	4240      	negs	r0, r0
 800406e:	4313      	orrs	r3, r2
 8004070:	81a3      	strh	r3, [r4, #12]
 8004072:	b005      	add	sp, #20
 8004074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004076:	9a02      	ldr	r2, [sp, #8]
 8004078:	6921      	ldr	r1, [r4, #16]
 800407a:	f7ff fdd5 	bl	8003c28 <memcpy>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <__ssputs_r+0xc0>)
 8004082:	401a      	ands	r2, r3
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	4313      	orrs	r3, r2
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	9b02      	ldr	r3, [sp, #8]
 800408c:	6126      	str	r6, [r4, #16]
 800408e:	18f6      	adds	r6, r6, r3
 8004090:	6026      	str	r6, [r4, #0]
 8004092:	6165      	str	r5, [r4, #20]
 8004094:	9e01      	ldr	r6, [sp, #4]
 8004096:	1aed      	subs	r5, r5, r3
 8004098:	60a5      	str	r5, [r4, #8]
 800409a:	9b01      	ldr	r3, [sp, #4]
 800409c:	42b3      	cmp	r3, r6
 800409e:	d200      	bcs.n	80040a2 <__ssputs_r+0x8e>
 80040a0:	001e      	movs	r6, r3
 80040a2:	0032      	movs	r2, r6
 80040a4:	9903      	ldr	r1, [sp, #12]
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	f000 fab9 	bl	800461e <memmove>
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	2000      	movs	r0, #0
 80040b0:	1b9b      	subs	r3, r3, r6
 80040b2:	60a3      	str	r3, [r4, #8]
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	199e      	adds	r6, r3, r6
 80040b8:	6026      	str	r6, [r4, #0]
 80040ba:	e7da      	b.n	8004072 <__ssputs_r+0x5e>
 80040bc:	002a      	movs	r2, r5
 80040be:	0038      	movs	r0, r7
 80040c0:	f000 fabf 	bl	8004642 <_realloc_r>
 80040c4:	1e06      	subs	r6, r0, #0
 80040c6:	d1e0      	bne.n	800408a <__ssputs_r+0x76>
 80040c8:	6921      	ldr	r1, [r4, #16]
 80040ca:	0038      	movs	r0, r7
 80040cc:	f7ff fdbe 	bl	8003c4c <_free_r>
 80040d0:	e7c7      	b.n	8004062 <__ssputs_r+0x4e>
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	fffffb7f 	.word	0xfffffb7f

080040d8 <_svfiprintf_r>:
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040da:	b09f      	sub	sp, #124	; 0x7c
 80040dc:	9002      	str	r0, [sp, #8]
 80040de:	9305      	str	r3, [sp, #20]
 80040e0:	898b      	ldrh	r3, [r1, #12]
 80040e2:	000f      	movs	r7, r1
 80040e4:	0016      	movs	r6, r2
 80040e6:	061b      	lsls	r3, r3, #24
 80040e8:	d511      	bpl.n	800410e <_svfiprintf_r+0x36>
 80040ea:	690b      	ldr	r3, [r1, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10e      	bne.n	800410e <_svfiprintf_r+0x36>
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	f7ff fdf5 	bl	8003ce0 <_malloc_r>
 80040f6:	6038      	str	r0, [r7, #0]
 80040f8:	6138      	str	r0, [r7, #16]
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d105      	bne.n	800410a <_svfiprintf_r+0x32>
 80040fe:	230c      	movs	r3, #12
 8004100:	9a02      	ldr	r2, [sp, #8]
 8004102:	3801      	subs	r0, #1
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	b01f      	add	sp, #124	; 0x7c
 8004108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800410a:	2340      	movs	r3, #64	; 0x40
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	2300      	movs	r3, #0
 8004110:	ad06      	add	r5, sp, #24
 8004112:	616b      	str	r3, [r5, #20]
 8004114:	3320      	adds	r3, #32
 8004116:	766b      	strb	r3, [r5, #25]
 8004118:	3310      	adds	r3, #16
 800411a:	76ab      	strb	r3, [r5, #26]
 800411c:	0034      	movs	r4, r6
 800411e:	7823      	ldrb	r3, [r4, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d147      	bne.n	80041b4 <_svfiprintf_r+0xdc>
 8004124:	1ba3      	subs	r3, r4, r6
 8004126:	9304      	str	r3, [sp, #16]
 8004128:	d00d      	beq.n	8004146 <_svfiprintf_r+0x6e>
 800412a:	1ba3      	subs	r3, r4, r6
 800412c:	0032      	movs	r2, r6
 800412e:	0039      	movs	r1, r7
 8004130:	9802      	ldr	r0, [sp, #8]
 8004132:	f7ff ff6f 	bl	8004014 <__ssputs_r>
 8004136:	1c43      	adds	r3, r0, #1
 8004138:	d100      	bne.n	800413c <_svfiprintf_r+0x64>
 800413a:	e0b5      	b.n	80042a8 <_svfiprintf_r+0x1d0>
 800413c:	696a      	ldr	r2, [r5, #20]
 800413e:	9b04      	ldr	r3, [sp, #16]
 8004140:	4694      	mov	ip, r2
 8004142:	4463      	add	r3, ip
 8004144:	616b      	str	r3, [r5, #20]
 8004146:	7823      	ldrb	r3, [r4, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d100      	bne.n	800414e <_svfiprintf_r+0x76>
 800414c:	e0ac      	b.n	80042a8 <_svfiprintf_r+0x1d0>
 800414e:	2201      	movs	r2, #1
 8004150:	2300      	movs	r3, #0
 8004152:	4252      	negs	r2, r2
 8004154:	606a      	str	r2, [r5, #4]
 8004156:	a902      	add	r1, sp, #8
 8004158:	3254      	adds	r2, #84	; 0x54
 800415a:	1852      	adds	r2, r2, r1
 800415c:	3401      	adds	r4, #1
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	60eb      	str	r3, [r5, #12]
 8004162:	60ab      	str	r3, [r5, #8]
 8004164:	7013      	strb	r3, [r2, #0]
 8004166:	65ab      	str	r3, [r5, #88]	; 0x58
 8004168:	4e58      	ldr	r6, [pc, #352]	; (80042cc <_svfiprintf_r+0x1f4>)
 800416a:	2205      	movs	r2, #5
 800416c:	7821      	ldrb	r1, [r4, #0]
 800416e:	0030      	movs	r0, r6
 8004170:	f000 fa4a 	bl	8004608 <memchr>
 8004174:	1c62      	adds	r2, r4, #1
 8004176:	2800      	cmp	r0, #0
 8004178:	d120      	bne.n	80041bc <_svfiprintf_r+0xe4>
 800417a:	6829      	ldr	r1, [r5, #0]
 800417c:	06cb      	lsls	r3, r1, #27
 800417e:	d504      	bpl.n	800418a <_svfiprintf_r+0xb2>
 8004180:	2353      	movs	r3, #83	; 0x53
 8004182:	ae02      	add	r6, sp, #8
 8004184:	3020      	adds	r0, #32
 8004186:	199b      	adds	r3, r3, r6
 8004188:	7018      	strb	r0, [r3, #0]
 800418a:	070b      	lsls	r3, r1, #28
 800418c:	d504      	bpl.n	8004198 <_svfiprintf_r+0xc0>
 800418e:	2353      	movs	r3, #83	; 0x53
 8004190:	202b      	movs	r0, #43	; 0x2b
 8004192:	ae02      	add	r6, sp, #8
 8004194:	199b      	adds	r3, r3, r6
 8004196:	7018      	strb	r0, [r3, #0]
 8004198:	7823      	ldrb	r3, [r4, #0]
 800419a:	2b2a      	cmp	r3, #42	; 0x2a
 800419c:	d016      	beq.n	80041cc <_svfiprintf_r+0xf4>
 800419e:	2000      	movs	r0, #0
 80041a0:	210a      	movs	r1, #10
 80041a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a4:	7822      	ldrb	r2, [r4, #0]
 80041a6:	3a30      	subs	r2, #48	; 0x30
 80041a8:	2a09      	cmp	r2, #9
 80041aa:	d955      	bls.n	8004258 <_svfiprintf_r+0x180>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d015      	beq.n	80041dc <_svfiprintf_r+0x104>
 80041b0:	9309      	str	r3, [sp, #36]	; 0x24
 80041b2:	e013      	b.n	80041dc <_svfiprintf_r+0x104>
 80041b4:	2b25      	cmp	r3, #37	; 0x25
 80041b6:	d0b5      	beq.n	8004124 <_svfiprintf_r+0x4c>
 80041b8:	3401      	adds	r4, #1
 80041ba:	e7b0      	b.n	800411e <_svfiprintf_r+0x46>
 80041bc:	2301      	movs	r3, #1
 80041be:	1b80      	subs	r0, r0, r6
 80041c0:	4083      	lsls	r3, r0
 80041c2:	6829      	ldr	r1, [r5, #0]
 80041c4:	0014      	movs	r4, r2
 80041c6:	430b      	orrs	r3, r1
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	e7cd      	b.n	8004168 <_svfiprintf_r+0x90>
 80041cc:	9b05      	ldr	r3, [sp, #20]
 80041ce:	1d18      	adds	r0, r3, #4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	9005      	str	r0, [sp, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db39      	blt.n	800424c <_svfiprintf_r+0x174>
 80041d8:	9309      	str	r3, [sp, #36]	; 0x24
 80041da:	0014      	movs	r4, r2
 80041dc:	7823      	ldrb	r3, [r4, #0]
 80041de:	2b2e      	cmp	r3, #46	; 0x2e
 80041e0:	d10b      	bne.n	80041fa <_svfiprintf_r+0x122>
 80041e2:	7863      	ldrb	r3, [r4, #1]
 80041e4:	1c62      	adds	r2, r4, #1
 80041e6:	2b2a      	cmp	r3, #42	; 0x2a
 80041e8:	d13e      	bne.n	8004268 <_svfiprintf_r+0x190>
 80041ea:	9b05      	ldr	r3, [sp, #20]
 80041ec:	3402      	adds	r4, #2
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	9205      	str	r2, [sp, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db34      	blt.n	8004262 <_svfiprintf_r+0x18a>
 80041f8:	9307      	str	r3, [sp, #28]
 80041fa:	4e35      	ldr	r6, [pc, #212]	; (80042d0 <_svfiprintf_r+0x1f8>)
 80041fc:	7821      	ldrb	r1, [r4, #0]
 80041fe:	2203      	movs	r2, #3
 8004200:	0030      	movs	r0, r6
 8004202:	f000 fa01 	bl	8004608 <memchr>
 8004206:	2800      	cmp	r0, #0
 8004208:	d006      	beq.n	8004218 <_svfiprintf_r+0x140>
 800420a:	2340      	movs	r3, #64	; 0x40
 800420c:	1b80      	subs	r0, r0, r6
 800420e:	4083      	lsls	r3, r0
 8004210:	682a      	ldr	r2, [r5, #0]
 8004212:	3401      	adds	r4, #1
 8004214:	4313      	orrs	r3, r2
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	7821      	ldrb	r1, [r4, #0]
 800421a:	2206      	movs	r2, #6
 800421c:	482d      	ldr	r0, [pc, #180]	; (80042d4 <_svfiprintf_r+0x1fc>)
 800421e:	1c66      	adds	r6, r4, #1
 8004220:	7629      	strb	r1, [r5, #24]
 8004222:	f000 f9f1 	bl	8004608 <memchr>
 8004226:	2800      	cmp	r0, #0
 8004228:	d046      	beq.n	80042b8 <_svfiprintf_r+0x1e0>
 800422a:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <_svfiprintf_r+0x200>)
 800422c:	2b00      	cmp	r3, #0
 800422e:	d12f      	bne.n	8004290 <_svfiprintf_r+0x1b8>
 8004230:	6829      	ldr	r1, [r5, #0]
 8004232:	9b05      	ldr	r3, [sp, #20]
 8004234:	2207      	movs	r2, #7
 8004236:	05c9      	lsls	r1, r1, #23
 8004238:	d528      	bpl.n	800428c <_svfiprintf_r+0x1b4>
 800423a:	189b      	adds	r3, r3, r2
 800423c:	4393      	bics	r3, r2
 800423e:	3308      	adds	r3, #8
 8004240:	9305      	str	r3, [sp, #20]
 8004242:	696b      	ldr	r3, [r5, #20]
 8004244:	9a03      	ldr	r2, [sp, #12]
 8004246:	189b      	adds	r3, r3, r2
 8004248:	616b      	str	r3, [r5, #20]
 800424a:	e767      	b.n	800411c <_svfiprintf_r+0x44>
 800424c:	425b      	negs	r3, r3
 800424e:	60eb      	str	r3, [r5, #12]
 8004250:	2302      	movs	r3, #2
 8004252:	430b      	orrs	r3, r1
 8004254:	602b      	str	r3, [r5, #0]
 8004256:	e7c0      	b.n	80041da <_svfiprintf_r+0x102>
 8004258:	434b      	muls	r3, r1
 800425a:	3401      	adds	r4, #1
 800425c:	189b      	adds	r3, r3, r2
 800425e:	2001      	movs	r0, #1
 8004260:	e7a0      	b.n	80041a4 <_svfiprintf_r+0xcc>
 8004262:	2301      	movs	r3, #1
 8004264:	425b      	negs	r3, r3
 8004266:	e7c7      	b.n	80041f8 <_svfiprintf_r+0x120>
 8004268:	2300      	movs	r3, #0
 800426a:	0014      	movs	r4, r2
 800426c:	200a      	movs	r0, #10
 800426e:	001a      	movs	r2, r3
 8004270:	606b      	str	r3, [r5, #4]
 8004272:	7821      	ldrb	r1, [r4, #0]
 8004274:	3930      	subs	r1, #48	; 0x30
 8004276:	2909      	cmp	r1, #9
 8004278:	d903      	bls.n	8004282 <_svfiprintf_r+0x1aa>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0bd      	beq.n	80041fa <_svfiprintf_r+0x122>
 800427e:	9207      	str	r2, [sp, #28]
 8004280:	e7bb      	b.n	80041fa <_svfiprintf_r+0x122>
 8004282:	4342      	muls	r2, r0
 8004284:	3401      	adds	r4, #1
 8004286:	1852      	adds	r2, r2, r1
 8004288:	2301      	movs	r3, #1
 800428a:	e7f2      	b.n	8004272 <_svfiprintf_r+0x19a>
 800428c:	3307      	adds	r3, #7
 800428e:	e7d5      	b.n	800423c <_svfiprintf_r+0x164>
 8004290:	ab05      	add	r3, sp, #20
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	003a      	movs	r2, r7
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <_svfiprintf_r+0x204>)
 8004298:	0029      	movs	r1, r5
 800429a:	9802      	ldr	r0, [sp, #8]
 800429c:	e000      	b.n	80042a0 <_svfiprintf_r+0x1c8>
 800429e:	bf00      	nop
 80042a0:	9003      	str	r0, [sp, #12]
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	3301      	adds	r3, #1
 80042a6:	d1cc      	bne.n	8004242 <_svfiprintf_r+0x16a>
 80042a8:	89bb      	ldrh	r3, [r7, #12]
 80042aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042ac:	065b      	lsls	r3, r3, #25
 80042ae:	d400      	bmi.n	80042b2 <_svfiprintf_r+0x1da>
 80042b0:	e729      	b.n	8004106 <_svfiprintf_r+0x2e>
 80042b2:	2001      	movs	r0, #1
 80042b4:	4240      	negs	r0, r0
 80042b6:	e726      	b.n	8004106 <_svfiprintf_r+0x2e>
 80042b8:	ab05      	add	r3, sp, #20
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	003a      	movs	r2, r7
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <_svfiprintf_r+0x204>)
 80042c0:	0029      	movs	r1, r5
 80042c2:	9802      	ldr	r0, [sp, #8]
 80042c4:	f000 f87a 	bl	80043bc <_printf_i>
 80042c8:	e7ea      	b.n	80042a0 <_svfiprintf_r+0x1c8>
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	0800486a 	.word	0x0800486a
 80042d0:	08004870 	.word	0x08004870
 80042d4:	08004874 	.word	0x08004874
 80042d8:	00000000 	.word	0x00000000
 80042dc:	08004015 	.word	0x08004015

080042e0 <_printf_common>:
 80042e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042e2:	0015      	movs	r5, r2
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	688a      	ldr	r2, [r1, #8]
 80042e8:	690b      	ldr	r3, [r1, #16]
 80042ea:	9000      	str	r0, [sp, #0]
 80042ec:	000c      	movs	r4, r1
 80042ee:	4293      	cmp	r3, r2
 80042f0:	da00      	bge.n	80042f4 <_printf_common+0x14>
 80042f2:	0013      	movs	r3, r2
 80042f4:	0022      	movs	r2, r4
 80042f6:	602b      	str	r3, [r5, #0]
 80042f8:	3243      	adds	r2, #67	; 0x43
 80042fa:	7812      	ldrb	r2, [r2, #0]
 80042fc:	2a00      	cmp	r2, #0
 80042fe:	d001      	beq.n	8004304 <_printf_common+0x24>
 8004300:	3301      	adds	r3, #1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	069b      	lsls	r3, r3, #26
 8004308:	d502      	bpl.n	8004310 <_printf_common+0x30>
 800430a:	682b      	ldr	r3, [r5, #0]
 800430c:	3302      	adds	r3, #2
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	2706      	movs	r7, #6
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	401f      	ands	r7, r3
 8004316:	d027      	beq.n	8004368 <_printf_common+0x88>
 8004318:	0023      	movs	r3, r4
 800431a:	3343      	adds	r3, #67	; 0x43
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	1e5a      	subs	r2, r3, #1
 8004320:	4193      	sbcs	r3, r2
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	0692      	lsls	r2, r2, #26
 8004326:	d430      	bmi.n	800438a <_printf_common+0xaa>
 8004328:	0022      	movs	r2, r4
 800432a:	9901      	ldr	r1, [sp, #4]
 800432c:	3243      	adds	r2, #67	; 0x43
 800432e:	9800      	ldr	r0, [sp, #0]
 8004330:	9e08      	ldr	r6, [sp, #32]
 8004332:	47b0      	blx	r6
 8004334:	1c43      	adds	r3, r0, #1
 8004336:	d025      	beq.n	8004384 <_printf_common+0xa4>
 8004338:	2306      	movs	r3, #6
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	682a      	ldr	r2, [r5, #0]
 800433e:	68e1      	ldr	r1, [r4, #12]
 8004340:	4003      	ands	r3, r0
 8004342:	2500      	movs	r5, #0
 8004344:	2b04      	cmp	r3, #4
 8004346:	d103      	bne.n	8004350 <_printf_common+0x70>
 8004348:	1a8d      	subs	r5, r1, r2
 800434a:	43eb      	mvns	r3, r5
 800434c:	17db      	asrs	r3, r3, #31
 800434e:	401d      	ands	r5, r3
 8004350:	68a3      	ldr	r3, [r4, #8]
 8004352:	6922      	ldr	r2, [r4, #16]
 8004354:	4293      	cmp	r3, r2
 8004356:	dd01      	ble.n	800435c <_printf_common+0x7c>
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	18ed      	adds	r5, r5, r3
 800435c:	2700      	movs	r7, #0
 800435e:	42bd      	cmp	r5, r7
 8004360:	d120      	bne.n	80043a4 <_printf_common+0xc4>
 8004362:	2000      	movs	r0, #0
 8004364:	e010      	b.n	8004388 <_printf_common+0xa8>
 8004366:	3701      	adds	r7, #1
 8004368:	68e3      	ldr	r3, [r4, #12]
 800436a:	682a      	ldr	r2, [r5, #0]
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	429f      	cmp	r7, r3
 8004370:	dad2      	bge.n	8004318 <_printf_common+0x38>
 8004372:	0022      	movs	r2, r4
 8004374:	2301      	movs	r3, #1
 8004376:	3219      	adds	r2, #25
 8004378:	9901      	ldr	r1, [sp, #4]
 800437a:	9800      	ldr	r0, [sp, #0]
 800437c:	9e08      	ldr	r6, [sp, #32]
 800437e:	47b0      	blx	r6
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d1f0      	bne.n	8004366 <_printf_common+0x86>
 8004384:	2001      	movs	r0, #1
 8004386:	4240      	negs	r0, r0
 8004388:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800438a:	2030      	movs	r0, #48	; 0x30
 800438c:	18e1      	adds	r1, r4, r3
 800438e:	3143      	adds	r1, #67	; 0x43
 8004390:	7008      	strb	r0, [r1, #0]
 8004392:	0021      	movs	r1, r4
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	3145      	adds	r1, #69	; 0x45
 8004398:	7809      	ldrb	r1, [r1, #0]
 800439a:	18a2      	adds	r2, r4, r2
 800439c:	3243      	adds	r2, #67	; 0x43
 800439e:	3302      	adds	r3, #2
 80043a0:	7011      	strb	r1, [r2, #0]
 80043a2:	e7c1      	b.n	8004328 <_printf_common+0x48>
 80043a4:	0022      	movs	r2, r4
 80043a6:	2301      	movs	r3, #1
 80043a8:	321a      	adds	r2, #26
 80043aa:	9901      	ldr	r1, [sp, #4]
 80043ac:	9800      	ldr	r0, [sp, #0]
 80043ae:	9e08      	ldr	r6, [sp, #32]
 80043b0:	47b0      	blx	r6
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	d0e6      	beq.n	8004384 <_printf_common+0xa4>
 80043b6:	3701      	adds	r7, #1
 80043b8:	e7d1      	b.n	800435e <_printf_common+0x7e>
	...

080043bc <_printf_i>:
 80043bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043be:	b08b      	sub	sp, #44	; 0x2c
 80043c0:	9206      	str	r2, [sp, #24]
 80043c2:	000a      	movs	r2, r1
 80043c4:	3243      	adds	r2, #67	; 0x43
 80043c6:	9307      	str	r3, [sp, #28]
 80043c8:	9005      	str	r0, [sp, #20]
 80043ca:	9204      	str	r2, [sp, #16]
 80043cc:	7e0a      	ldrb	r2, [r1, #24]
 80043ce:	000c      	movs	r4, r1
 80043d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043d2:	2a6e      	cmp	r2, #110	; 0x6e
 80043d4:	d100      	bne.n	80043d8 <_printf_i+0x1c>
 80043d6:	e08f      	b.n	80044f8 <_printf_i+0x13c>
 80043d8:	d817      	bhi.n	800440a <_printf_i+0x4e>
 80043da:	2a63      	cmp	r2, #99	; 0x63
 80043dc:	d02c      	beq.n	8004438 <_printf_i+0x7c>
 80043de:	d808      	bhi.n	80043f2 <_printf_i+0x36>
 80043e0:	2a00      	cmp	r2, #0
 80043e2:	d100      	bne.n	80043e6 <_printf_i+0x2a>
 80043e4:	e099      	b.n	800451a <_printf_i+0x15e>
 80043e6:	2a58      	cmp	r2, #88	; 0x58
 80043e8:	d054      	beq.n	8004494 <_printf_i+0xd8>
 80043ea:	0026      	movs	r6, r4
 80043ec:	3642      	adds	r6, #66	; 0x42
 80043ee:	7032      	strb	r2, [r6, #0]
 80043f0:	e029      	b.n	8004446 <_printf_i+0x8a>
 80043f2:	2a64      	cmp	r2, #100	; 0x64
 80043f4:	d001      	beq.n	80043fa <_printf_i+0x3e>
 80043f6:	2a69      	cmp	r2, #105	; 0x69
 80043f8:	d1f7      	bne.n	80043ea <_printf_i+0x2e>
 80043fa:	6821      	ldr	r1, [r4, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	0608      	lsls	r0, r1, #24
 8004400:	d523      	bpl.n	800444a <_printf_i+0x8e>
 8004402:	1d11      	adds	r1, r2, #4
 8004404:	6019      	str	r1, [r3, #0]
 8004406:	6815      	ldr	r5, [r2, #0]
 8004408:	e025      	b.n	8004456 <_printf_i+0x9a>
 800440a:	2a73      	cmp	r2, #115	; 0x73
 800440c:	d100      	bne.n	8004410 <_printf_i+0x54>
 800440e:	e088      	b.n	8004522 <_printf_i+0x166>
 8004410:	d808      	bhi.n	8004424 <_printf_i+0x68>
 8004412:	2a6f      	cmp	r2, #111	; 0x6f
 8004414:	d029      	beq.n	800446a <_printf_i+0xae>
 8004416:	2a70      	cmp	r2, #112	; 0x70
 8004418:	d1e7      	bne.n	80043ea <_printf_i+0x2e>
 800441a:	2220      	movs	r2, #32
 800441c:	6809      	ldr	r1, [r1, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	6022      	str	r2, [r4, #0]
 8004422:	e003      	b.n	800442c <_printf_i+0x70>
 8004424:	2a75      	cmp	r2, #117	; 0x75
 8004426:	d020      	beq.n	800446a <_printf_i+0xae>
 8004428:	2a78      	cmp	r2, #120	; 0x78
 800442a:	d1de      	bne.n	80043ea <_printf_i+0x2e>
 800442c:	0022      	movs	r2, r4
 800442e:	2178      	movs	r1, #120	; 0x78
 8004430:	3245      	adds	r2, #69	; 0x45
 8004432:	7011      	strb	r1, [r2, #0]
 8004434:	4a6c      	ldr	r2, [pc, #432]	; (80045e8 <_printf_i+0x22c>)
 8004436:	e030      	b.n	800449a <_printf_i+0xde>
 8004438:	000e      	movs	r6, r1
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	3642      	adds	r6, #66	; 0x42
 800443e:	1d11      	adds	r1, r2, #4
 8004440:	6019      	str	r1, [r3, #0]
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	7033      	strb	r3, [r6, #0]
 8004446:	2301      	movs	r3, #1
 8004448:	e079      	b.n	800453e <_printf_i+0x182>
 800444a:	0649      	lsls	r1, r1, #25
 800444c:	d5d9      	bpl.n	8004402 <_printf_i+0x46>
 800444e:	1d11      	adds	r1, r2, #4
 8004450:	6019      	str	r1, [r3, #0]
 8004452:	2300      	movs	r3, #0
 8004454:	5ed5      	ldrsh	r5, [r2, r3]
 8004456:	2d00      	cmp	r5, #0
 8004458:	da03      	bge.n	8004462 <_printf_i+0xa6>
 800445a:	232d      	movs	r3, #45	; 0x2d
 800445c:	9a04      	ldr	r2, [sp, #16]
 800445e:	426d      	negs	r5, r5
 8004460:	7013      	strb	r3, [r2, #0]
 8004462:	4b62      	ldr	r3, [pc, #392]	; (80045ec <_printf_i+0x230>)
 8004464:	270a      	movs	r7, #10
 8004466:	9303      	str	r3, [sp, #12]
 8004468:	e02f      	b.n	80044ca <_printf_i+0x10e>
 800446a:	6820      	ldr	r0, [r4, #0]
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	0605      	lsls	r5, r0, #24
 8004470:	d503      	bpl.n	800447a <_printf_i+0xbe>
 8004472:	1d08      	adds	r0, r1, #4
 8004474:	6018      	str	r0, [r3, #0]
 8004476:	680d      	ldr	r5, [r1, #0]
 8004478:	e005      	b.n	8004486 <_printf_i+0xca>
 800447a:	0640      	lsls	r0, r0, #25
 800447c:	d5f9      	bpl.n	8004472 <_printf_i+0xb6>
 800447e:	680d      	ldr	r5, [r1, #0]
 8004480:	1d08      	adds	r0, r1, #4
 8004482:	6018      	str	r0, [r3, #0]
 8004484:	b2ad      	uxth	r5, r5
 8004486:	4b59      	ldr	r3, [pc, #356]	; (80045ec <_printf_i+0x230>)
 8004488:	2708      	movs	r7, #8
 800448a:	9303      	str	r3, [sp, #12]
 800448c:	2a6f      	cmp	r2, #111	; 0x6f
 800448e:	d018      	beq.n	80044c2 <_printf_i+0x106>
 8004490:	270a      	movs	r7, #10
 8004492:	e016      	b.n	80044c2 <_printf_i+0x106>
 8004494:	3145      	adds	r1, #69	; 0x45
 8004496:	700a      	strb	r2, [r1, #0]
 8004498:	4a54      	ldr	r2, [pc, #336]	; (80045ec <_printf_i+0x230>)
 800449a:	9203      	str	r2, [sp, #12]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	6821      	ldr	r1, [r4, #0]
 80044a0:	1d10      	adds	r0, r2, #4
 80044a2:	6018      	str	r0, [r3, #0]
 80044a4:	6815      	ldr	r5, [r2, #0]
 80044a6:	0608      	lsls	r0, r1, #24
 80044a8:	d522      	bpl.n	80044f0 <_printf_i+0x134>
 80044aa:	07cb      	lsls	r3, r1, #31
 80044ac:	d502      	bpl.n	80044b4 <_printf_i+0xf8>
 80044ae:	2320      	movs	r3, #32
 80044b0:	4319      	orrs	r1, r3
 80044b2:	6021      	str	r1, [r4, #0]
 80044b4:	2710      	movs	r7, #16
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	d103      	bne.n	80044c2 <_printf_i+0x106>
 80044ba:	2320      	movs	r3, #32
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	439a      	bics	r2, r3
 80044c0:	6022      	str	r2, [r4, #0]
 80044c2:	0023      	movs	r3, r4
 80044c4:	2200      	movs	r2, #0
 80044c6:	3343      	adds	r3, #67	; 0x43
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	60a3      	str	r3, [r4, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db5c      	blt.n	800458c <_printf_i+0x1d0>
 80044d2:	2204      	movs	r2, #4
 80044d4:	6821      	ldr	r1, [r4, #0]
 80044d6:	4391      	bics	r1, r2
 80044d8:	6021      	str	r1, [r4, #0]
 80044da:	2d00      	cmp	r5, #0
 80044dc:	d158      	bne.n	8004590 <_printf_i+0x1d4>
 80044de:	9e04      	ldr	r6, [sp, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d064      	beq.n	80045ae <_printf_i+0x1f2>
 80044e4:	0026      	movs	r6, r4
 80044e6:	9b03      	ldr	r3, [sp, #12]
 80044e8:	3642      	adds	r6, #66	; 0x42
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	7033      	strb	r3, [r6, #0]
 80044ee:	e05e      	b.n	80045ae <_printf_i+0x1f2>
 80044f0:	0648      	lsls	r0, r1, #25
 80044f2:	d5da      	bpl.n	80044aa <_printf_i+0xee>
 80044f4:	b2ad      	uxth	r5, r5
 80044f6:	e7d8      	b.n	80044aa <_printf_i+0xee>
 80044f8:	6809      	ldr	r1, [r1, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	0608      	lsls	r0, r1, #24
 80044fe:	d505      	bpl.n	800450c <_printf_i+0x150>
 8004500:	1d11      	adds	r1, r2, #4
 8004502:	6019      	str	r1, [r3, #0]
 8004504:	6813      	ldr	r3, [r2, #0]
 8004506:	6962      	ldr	r2, [r4, #20]
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e006      	b.n	800451a <_printf_i+0x15e>
 800450c:	0649      	lsls	r1, r1, #25
 800450e:	d5f7      	bpl.n	8004500 <_printf_i+0x144>
 8004510:	1d11      	adds	r1, r2, #4
 8004512:	6019      	str	r1, [r3, #0]
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	8aa2      	ldrh	r2, [r4, #20]
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	9e04      	ldr	r6, [sp, #16]
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	e054      	b.n	80045cc <_printf_i+0x210>
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	1d11      	adds	r1, r2, #4
 8004526:	6019      	str	r1, [r3, #0]
 8004528:	6816      	ldr	r6, [r2, #0]
 800452a:	2100      	movs	r1, #0
 800452c:	6862      	ldr	r2, [r4, #4]
 800452e:	0030      	movs	r0, r6
 8004530:	f000 f86a 	bl	8004608 <memchr>
 8004534:	2800      	cmp	r0, #0
 8004536:	d001      	beq.n	800453c <_printf_i+0x180>
 8004538:	1b80      	subs	r0, r0, r6
 800453a:	6060      	str	r0, [r4, #4]
 800453c:	6863      	ldr	r3, [r4, #4]
 800453e:	6123      	str	r3, [r4, #16]
 8004540:	2300      	movs	r3, #0
 8004542:	9a04      	ldr	r2, [sp, #16]
 8004544:	7013      	strb	r3, [r2, #0]
 8004546:	e041      	b.n	80045cc <_printf_i+0x210>
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	0032      	movs	r2, r6
 800454c:	9906      	ldr	r1, [sp, #24]
 800454e:	9805      	ldr	r0, [sp, #20]
 8004550:	9d07      	ldr	r5, [sp, #28]
 8004552:	47a8      	blx	r5
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d043      	beq.n	80045e0 <_printf_i+0x224>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	2500      	movs	r5, #0
 800455c:	079b      	lsls	r3, r3, #30
 800455e:	d40f      	bmi.n	8004580 <_printf_i+0x1c4>
 8004560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004562:	68e0      	ldr	r0, [r4, #12]
 8004564:	4298      	cmp	r0, r3
 8004566:	da3d      	bge.n	80045e4 <_printf_i+0x228>
 8004568:	0018      	movs	r0, r3
 800456a:	e03b      	b.n	80045e4 <_printf_i+0x228>
 800456c:	0022      	movs	r2, r4
 800456e:	2301      	movs	r3, #1
 8004570:	3219      	adds	r2, #25
 8004572:	9906      	ldr	r1, [sp, #24]
 8004574:	9805      	ldr	r0, [sp, #20]
 8004576:	9e07      	ldr	r6, [sp, #28]
 8004578:	47b0      	blx	r6
 800457a:	1c43      	adds	r3, r0, #1
 800457c:	d030      	beq.n	80045e0 <_printf_i+0x224>
 800457e:	3501      	adds	r5, #1
 8004580:	68e3      	ldr	r3, [r4, #12]
 8004582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	429d      	cmp	r5, r3
 8004588:	dbf0      	blt.n	800456c <_printf_i+0x1b0>
 800458a:	e7e9      	b.n	8004560 <_printf_i+0x1a4>
 800458c:	2d00      	cmp	r5, #0
 800458e:	d0a9      	beq.n	80044e4 <_printf_i+0x128>
 8004590:	9e04      	ldr	r6, [sp, #16]
 8004592:	0028      	movs	r0, r5
 8004594:	0039      	movs	r1, r7
 8004596:	f7fb fe45 	bl	8000224 <__aeabi_uidivmod>
 800459a:	9b03      	ldr	r3, [sp, #12]
 800459c:	3e01      	subs	r6, #1
 800459e:	5c5b      	ldrb	r3, [r3, r1]
 80045a0:	0028      	movs	r0, r5
 80045a2:	7033      	strb	r3, [r6, #0]
 80045a4:	0039      	movs	r1, r7
 80045a6:	f7fb fdb7 	bl	8000118 <__udivsi3>
 80045aa:	1e05      	subs	r5, r0, #0
 80045ac:	d1f1      	bne.n	8004592 <_printf_i+0x1d6>
 80045ae:	2f08      	cmp	r7, #8
 80045b0:	d109      	bne.n	80045c6 <_printf_i+0x20a>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	07db      	lsls	r3, r3, #31
 80045b6:	d506      	bpl.n	80045c6 <_printf_i+0x20a>
 80045b8:	6863      	ldr	r3, [r4, #4]
 80045ba:	6922      	ldr	r2, [r4, #16]
 80045bc:	4293      	cmp	r3, r2
 80045be:	dc02      	bgt.n	80045c6 <_printf_i+0x20a>
 80045c0:	2330      	movs	r3, #48	; 0x30
 80045c2:	3e01      	subs	r6, #1
 80045c4:	7033      	strb	r3, [r6, #0]
 80045c6:	9b04      	ldr	r3, [sp, #16]
 80045c8:	1b9b      	subs	r3, r3, r6
 80045ca:	6123      	str	r3, [r4, #16]
 80045cc:	9b07      	ldr	r3, [sp, #28]
 80045ce:	aa09      	add	r2, sp, #36	; 0x24
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	0021      	movs	r1, r4
 80045d4:	9b06      	ldr	r3, [sp, #24]
 80045d6:	9805      	ldr	r0, [sp, #20]
 80045d8:	f7ff fe82 	bl	80042e0 <_printf_common>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d1b3      	bne.n	8004548 <_printf_i+0x18c>
 80045e0:	2001      	movs	r0, #1
 80045e2:	4240      	negs	r0, r0
 80045e4:	b00b      	add	sp, #44	; 0x2c
 80045e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e8:	0800488c 	.word	0x0800488c
 80045ec:	0800487b 	.word	0x0800487b

080045f0 <__ascii_wctomb>:
 80045f0:	1e0b      	subs	r3, r1, #0
 80045f2:	d004      	beq.n	80045fe <__ascii_wctomb+0xe>
 80045f4:	2aff      	cmp	r2, #255	; 0xff
 80045f6:	d904      	bls.n	8004602 <__ascii_wctomb+0x12>
 80045f8:	238a      	movs	r3, #138	; 0x8a
 80045fa:	6003      	str	r3, [r0, #0]
 80045fc:	3b8b      	subs	r3, #139	; 0x8b
 80045fe:	0018      	movs	r0, r3
 8004600:	4770      	bx	lr
 8004602:	700a      	strb	r2, [r1, #0]
 8004604:	2301      	movs	r3, #1
 8004606:	e7fa      	b.n	80045fe <__ascii_wctomb+0xe>

08004608 <memchr>:
 8004608:	b2c9      	uxtb	r1, r1
 800460a:	1882      	adds	r2, r0, r2
 800460c:	4290      	cmp	r0, r2
 800460e:	d101      	bne.n	8004614 <memchr+0xc>
 8004610:	2000      	movs	r0, #0
 8004612:	4770      	bx	lr
 8004614:	7803      	ldrb	r3, [r0, #0]
 8004616:	428b      	cmp	r3, r1
 8004618:	d0fb      	beq.n	8004612 <memchr+0xa>
 800461a:	3001      	adds	r0, #1
 800461c:	e7f6      	b.n	800460c <memchr+0x4>

0800461e <memmove>:
 800461e:	b510      	push	{r4, lr}
 8004620:	4288      	cmp	r0, r1
 8004622:	d902      	bls.n	800462a <memmove+0xc>
 8004624:	188b      	adds	r3, r1, r2
 8004626:	4298      	cmp	r0, r3
 8004628:	d308      	bcc.n	800463c <memmove+0x1e>
 800462a:	2300      	movs	r3, #0
 800462c:	429a      	cmp	r2, r3
 800462e:	d007      	beq.n	8004640 <memmove+0x22>
 8004630:	5ccc      	ldrb	r4, [r1, r3]
 8004632:	54c4      	strb	r4, [r0, r3]
 8004634:	3301      	adds	r3, #1
 8004636:	e7f9      	b.n	800462c <memmove+0xe>
 8004638:	5c8b      	ldrb	r3, [r1, r2]
 800463a:	5483      	strb	r3, [r0, r2]
 800463c:	3a01      	subs	r2, #1
 800463e:	d2fb      	bcs.n	8004638 <memmove+0x1a>
 8004640:	bd10      	pop	{r4, pc}

08004642 <_realloc_r>:
 8004642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004644:	0007      	movs	r7, r0
 8004646:	000d      	movs	r5, r1
 8004648:	0016      	movs	r6, r2
 800464a:	2900      	cmp	r1, #0
 800464c:	d105      	bne.n	800465a <_realloc_r+0x18>
 800464e:	0011      	movs	r1, r2
 8004650:	f7ff fb46 	bl	8003ce0 <_malloc_r>
 8004654:	0004      	movs	r4, r0
 8004656:	0020      	movs	r0, r4
 8004658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800465a:	2a00      	cmp	r2, #0
 800465c:	d103      	bne.n	8004666 <_realloc_r+0x24>
 800465e:	f7ff faf5 	bl	8003c4c <_free_r>
 8004662:	0034      	movs	r4, r6
 8004664:	e7f7      	b.n	8004656 <_realloc_r+0x14>
 8004666:	f000 f812 	bl	800468e <_malloc_usable_size_r>
 800466a:	002c      	movs	r4, r5
 800466c:	4286      	cmp	r6, r0
 800466e:	d9f2      	bls.n	8004656 <_realloc_r+0x14>
 8004670:	0031      	movs	r1, r6
 8004672:	0038      	movs	r0, r7
 8004674:	f7ff fb34 	bl	8003ce0 <_malloc_r>
 8004678:	1e04      	subs	r4, r0, #0
 800467a:	d0ec      	beq.n	8004656 <_realloc_r+0x14>
 800467c:	0029      	movs	r1, r5
 800467e:	0032      	movs	r2, r6
 8004680:	f7ff fad2 	bl	8003c28 <memcpy>
 8004684:	0029      	movs	r1, r5
 8004686:	0038      	movs	r0, r7
 8004688:	f7ff fae0 	bl	8003c4c <_free_r>
 800468c:	e7e3      	b.n	8004656 <_realloc_r+0x14>

0800468e <_malloc_usable_size_r>:
 800468e:	1f0b      	subs	r3, r1, #4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	1f18      	subs	r0, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	da01      	bge.n	800469c <_malloc_usable_size_r+0xe>
 8004698:	580b      	ldr	r3, [r1, r0]
 800469a:	18c0      	adds	r0, r0, r3
 800469c:	4770      	bx	lr
	...

080046a0 <_sbrk>:
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <_sbrk+0x18>)
 80046a2:	0002      	movs	r2, r0
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	2900      	cmp	r1, #0
 80046a8:	d101      	bne.n	80046ae <_sbrk+0xe>
 80046aa:	4904      	ldr	r1, [pc, #16]	; (80046bc <_sbrk+0x1c>)
 80046ac:	6019      	str	r1, [r3, #0]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	1882      	adds	r2, r0, r2
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	4770      	bx	lr
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	20000284 	.word	0x20000284
 80046bc:	20000454 	.word	0x20000454

080046c0 <_init>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr

080046cc <_fini>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr
