
C:\Users\Henry\Desktop\Skripsie\Feedback-Control-of-Robotic-Gymnast-MCU\acrobat_v4\Debug\acrobat_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000000  08004714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000026c  200001e8  080048fc  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000454  080048fc  00020454  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d750  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000374d  00000000  00000000  0003d960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b136  00000000  00000000  000410ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a80  00000000  00000000  0004c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017d8  00000000  00000000  0004cc68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008379  00000000  00000000  0004e440  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0004b5a9  00000000  00000000  000567b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000a1d62  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000254c  00000000  00000000  000a1de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000bcd9  00000000  00000000  000a432c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004478 	.word	0x08004478

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	08004478 	.word	0x08004478

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_f2uiz>:
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	b510      	push	{r4, lr}
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	1c04      	adds	r4, r0, #0
 8000238:	f000 fd00 	bl	8000c3c <__aeabi_fcmpge>
 800023c:	2800      	cmp	r0, #0
 800023e:	d103      	bne.n	8000248 <__aeabi_f2uiz+0x18>
 8000240:	1c20      	adds	r0, r4, #0
 8000242:	f000 fc5b 	bl	8000afc <__aeabi_f2iz>
 8000246:	bd10      	pop	{r4, pc}
 8000248:	219e      	movs	r1, #158	; 0x9e
 800024a:	1c20      	adds	r0, r4, #0
 800024c:	05c9      	lsls	r1, r1, #23
 800024e:	f000 fab9 	bl	80007c4 <__aeabi_fsub>
 8000252:	f000 fc53 	bl	8000afc <__aeabi_f2iz>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	061b      	lsls	r3, r3, #24
 800025a:	469c      	mov	ip, r3
 800025c:	4460      	add	r0, ip
 800025e:	e7f2      	b.n	8000246 <__aeabi_f2uiz+0x16>

08000260 <__aeabi_fadd>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46c6      	mov	lr, r8
 8000264:	024e      	lsls	r6, r1, #9
 8000266:	0247      	lsls	r7, r0, #9
 8000268:	0a76      	lsrs	r6, r6, #9
 800026a:	0a7b      	lsrs	r3, r7, #9
 800026c:	0044      	lsls	r4, r0, #1
 800026e:	0fc5      	lsrs	r5, r0, #31
 8000270:	00f7      	lsls	r7, r6, #3
 8000272:	0048      	lsls	r0, r1, #1
 8000274:	4698      	mov	r8, r3
 8000276:	b500      	push	{lr}
 8000278:	0e24      	lsrs	r4, r4, #24
 800027a:	002a      	movs	r2, r5
 800027c:	00db      	lsls	r3, r3, #3
 800027e:	0e00      	lsrs	r0, r0, #24
 8000280:	0fc9      	lsrs	r1, r1, #31
 8000282:	46bc      	mov	ip, r7
 8000284:	428d      	cmp	r5, r1
 8000286:	d067      	beq.n	8000358 <__aeabi_fadd+0xf8>
 8000288:	1a22      	subs	r2, r4, r0
 800028a:	2a00      	cmp	r2, #0
 800028c:	dc00      	bgt.n	8000290 <__aeabi_fadd+0x30>
 800028e:	e0a5      	b.n	80003dc <__aeabi_fadd+0x17c>
 8000290:	2800      	cmp	r0, #0
 8000292:	d13a      	bne.n	800030a <__aeabi_fadd+0xaa>
 8000294:	2f00      	cmp	r7, #0
 8000296:	d100      	bne.n	800029a <__aeabi_fadd+0x3a>
 8000298:	e093      	b.n	80003c2 <__aeabi_fadd+0x162>
 800029a:	1e51      	subs	r1, r2, #1
 800029c:	2900      	cmp	r1, #0
 800029e:	d000      	beq.n	80002a2 <__aeabi_fadd+0x42>
 80002a0:	e0bc      	b.n	800041c <__aeabi_fadd+0x1bc>
 80002a2:	2401      	movs	r4, #1
 80002a4:	1bdb      	subs	r3, r3, r7
 80002a6:	015a      	lsls	r2, r3, #5
 80002a8:	d546      	bpl.n	8000338 <__aeabi_fadd+0xd8>
 80002aa:	019b      	lsls	r3, r3, #6
 80002ac:	099e      	lsrs	r6, r3, #6
 80002ae:	0030      	movs	r0, r6
 80002b0:	f000 fcce 	bl	8000c50 <__clzsi2>
 80002b4:	3805      	subs	r0, #5
 80002b6:	4086      	lsls	r6, r0
 80002b8:	4284      	cmp	r4, r0
 80002ba:	dd00      	ble.n	80002be <__aeabi_fadd+0x5e>
 80002bc:	e09d      	b.n	80003fa <__aeabi_fadd+0x19a>
 80002be:	1b04      	subs	r4, r0, r4
 80002c0:	0032      	movs	r2, r6
 80002c2:	2020      	movs	r0, #32
 80002c4:	3401      	adds	r4, #1
 80002c6:	40e2      	lsrs	r2, r4
 80002c8:	1b04      	subs	r4, r0, r4
 80002ca:	40a6      	lsls	r6, r4
 80002cc:	0033      	movs	r3, r6
 80002ce:	1e5e      	subs	r6, r3, #1
 80002d0:	41b3      	sbcs	r3, r6
 80002d2:	2400      	movs	r4, #0
 80002d4:	4313      	orrs	r3, r2
 80002d6:	075a      	lsls	r2, r3, #29
 80002d8:	d004      	beq.n	80002e4 <__aeabi_fadd+0x84>
 80002da:	220f      	movs	r2, #15
 80002dc:	401a      	ands	r2, r3
 80002de:	2a04      	cmp	r2, #4
 80002e0:	d000      	beq.n	80002e4 <__aeabi_fadd+0x84>
 80002e2:	3304      	adds	r3, #4
 80002e4:	015a      	lsls	r2, r3, #5
 80002e6:	d529      	bpl.n	800033c <__aeabi_fadd+0xdc>
 80002e8:	3401      	adds	r4, #1
 80002ea:	2cff      	cmp	r4, #255	; 0xff
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fadd+0x90>
 80002ee:	e081      	b.n	80003f4 <__aeabi_fadd+0x194>
 80002f0:	002a      	movs	r2, r5
 80002f2:	019b      	lsls	r3, r3, #6
 80002f4:	0a5b      	lsrs	r3, r3, #9
 80002f6:	b2e4      	uxtb	r4, r4
 80002f8:	025b      	lsls	r3, r3, #9
 80002fa:	05e4      	lsls	r4, r4, #23
 80002fc:	0a58      	lsrs	r0, r3, #9
 80002fe:	07d2      	lsls	r2, r2, #31
 8000300:	4320      	orrs	r0, r4
 8000302:	4310      	orrs	r0, r2
 8000304:	bc04      	pop	{r2}
 8000306:	4690      	mov	r8, r2
 8000308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030a:	2cff      	cmp	r4, #255	; 0xff
 800030c:	d0e3      	beq.n	80002d6 <__aeabi_fadd+0x76>
 800030e:	2180      	movs	r1, #128	; 0x80
 8000310:	0038      	movs	r0, r7
 8000312:	04c9      	lsls	r1, r1, #19
 8000314:	4308      	orrs	r0, r1
 8000316:	4684      	mov	ip, r0
 8000318:	2a1b      	cmp	r2, #27
 800031a:	dd00      	ble.n	800031e <__aeabi_fadd+0xbe>
 800031c:	e082      	b.n	8000424 <__aeabi_fadd+0x1c4>
 800031e:	2020      	movs	r0, #32
 8000320:	4661      	mov	r1, ip
 8000322:	40d1      	lsrs	r1, r2
 8000324:	1a82      	subs	r2, r0, r2
 8000326:	4660      	mov	r0, ip
 8000328:	4090      	lsls	r0, r2
 800032a:	0002      	movs	r2, r0
 800032c:	1e50      	subs	r0, r2, #1
 800032e:	4182      	sbcs	r2, r0
 8000330:	430a      	orrs	r2, r1
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	015a      	lsls	r2, r3, #5
 8000336:	d4b8      	bmi.n	80002aa <__aeabi_fadd+0x4a>
 8000338:	075a      	lsls	r2, r3, #29
 800033a:	d1ce      	bne.n	80002da <__aeabi_fadd+0x7a>
 800033c:	08de      	lsrs	r6, r3, #3
 800033e:	002a      	movs	r2, r5
 8000340:	2cff      	cmp	r4, #255	; 0xff
 8000342:	d13a      	bne.n	80003ba <__aeabi_fadd+0x15a>
 8000344:	2e00      	cmp	r6, #0
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0xea>
 8000348:	e0ae      	b.n	80004a8 <__aeabi_fadd+0x248>
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	03db      	lsls	r3, r3, #15
 800034e:	4333      	orrs	r3, r6
 8000350:	025b      	lsls	r3, r3, #9
 8000352:	0a5b      	lsrs	r3, r3, #9
 8000354:	24ff      	movs	r4, #255	; 0xff
 8000356:	e7cf      	b.n	80002f8 <__aeabi_fadd+0x98>
 8000358:	1a21      	subs	r1, r4, r0
 800035a:	2900      	cmp	r1, #0
 800035c:	dd52      	ble.n	8000404 <__aeabi_fadd+0x1a4>
 800035e:	2800      	cmp	r0, #0
 8000360:	d031      	beq.n	80003c6 <__aeabi_fadd+0x166>
 8000362:	2cff      	cmp	r4, #255	; 0xff
 8000364:	d0b7      	beq.n	80002d6 <__aeabi_fadd+0x76>
 8000366:	2080      	movs	r0, #128	; 0x80
 8000368:	003e      	movs	r6, r7
 800036a:	04c0      	lsls	r0, r0, #19
 800036c:	4306      	orrs	r6, r0
 800036e:	46b4      	mov	ip, r6
 8000370:	291b      	cmp	r1, #27
 8000372:	dd00      	ble.n	8000376 <__aeabi_fadd+0x116>
 8000374:	e0aa      	b.n	80004cc <__aeabi_fadd+0x26c>
 8000376:	2620      	movs	r6, #32
 8000378:	4660      	mov	r0, ip
 800037a:	40c8      	lsrs	r0, r1
 800037c:	1a71      	subs	r1, r6, r1
 800037e:	4666      	mov	r6, ip
 8000380:	408e      	lsls	r6, r1
 8000382:	0031      	movs	r1, r6
 8000384:	1e4e      	subs	r6, r1, #1
 8000386:	41b1      	sbcs	r1, r6
 8000388:	4301      	orrs	r1, r0
 800038a:	185b      	adds	r3, r3, r1
 800038c:	0159      	lsls	r1, r3, #5
 800038e:	d5d3      	bpl.n	8000338 <__aeabi_fadd+0xd8>
 8000390:	3401      	adds	r4, #1
 8000392:	2cff      	cmp	r4, #255	; 0xff
 8000394:	d100      	bne.n	8000398 <__aeabi_fadd+0x138>
 8000396:	e087      	b.n	80004a8 <__aeabi_fadd+0x248>
 8000398:	2201      	movs	r2, #1
 800039a:	4978      	ldr	r1, [pc, #480]	; (800057c <__aeabi_fadd+0x31c>)
 800039c:	401a      	ands	r2, r3
 800039e:	085b      	lsrs	r3, r3, #1
 80003a0:	400b      	ands	r3, r1
 80003a2:	4313      	orrs	r3, r2
 80003a4:	e797      	b.n	80002d6 <__aeabi_fadd+0x76>
 80003a6:	2c00      	cmp	r4, #0
 80003a8:	d000      	beq.n	80003ac <__aeabi_fadd+0x14c>
 80003aa:	e0a7      	b.n	80004fc <__aeabi_fadd+0x29c>
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d000      	beq.n	80003b2 <__aeabi_fadd+0x152>
 80003b0:	e0b6      	b.n	8000520 <__aeabi_fadd+0x2c0>
 80003b2:	1e3b      	subs	r3, r7, #0
 80003b4:	d162      	bne.n	800047c <__aeabi_fadd+0x21c>
 80003b6:	2600      	movs	r6, #0
 80003b8:	2200      	movs	r2, #0
 80003ba:	0273      	lsls	r3, r6, #9
 80003bc:	0a5b      	lsrs	r3, r3, #9
 80003be:	b2e4      	uxtb	r4, r4
 80003c0:	e79a      	b.n	80002f8 <__aeabi_fadd+0x98>
 80003c2:	0014      	movs	r4, r2
 80003c4:	e787      	b.n	80002d6 <__aeabi_fadd+0x76>
 80003c6:	2f00      	cmp	r7, #0
 80003c8:	d04d      	beq.n	8000466 <__aeabi_fadd+0x206>
 80003ca:	1e48      	subs	r0, r1, #1
 80003cc:	2800      	cmp	r0, #0
 80003ce:	d157      	bne.n	8000480 <__aeabi_fadd+0x220>
 80003d0:	4463      	add	r3, ip
 80003d2:	2401      	movs	r4, #1
 80003d4:	015a      	lsls	r2, r3, #5
 80003d6:	d5af      	bpl.n	8000338 <__aeabi_fadd+0xd8>
 80003d8:	2402      	movs	r4, #2
 80003da:	e7dd      	b.n	8000398 <__aeabi_fadd+0x138>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	d124      	bne.n	800042a <__aeabi_fadd+0x1ca>
 80003e0:	1c62      	adds	r2, r4, #1
 80003e2:	b2d2      	uxtb	r2, r2
 80003e4:	2a01      	cmp	r2, #1
 80003e6:	ddde      	ble.n	80003a6 <__aeabi_fadd+0x146>
 80003e8:	1bde      	subs	r6, r3, r7
 80003ea:	0172      	lsls	r2, r6, #5
 80003ec:	d535      	bpl.n	800045a <__aeabi_fadd+0x1fa>
 80003ee:	1afe      	subs	r6, r7, r3
 80003f0:	000d      	movs	r5, r1
 80003f2:	e75c      	b.n	80002ae <__aeabi_fadd+0x4e>
 80003f4:	002a      	movs	r2, r5
 80003f6:	2300      	movs	r3, #0
 80003f8:	e77e      	b.n	80002f8 <__aeabi_fadd+0x98>
 80003fa:	0033      	movs	r3, r6
 80003fc:	4a60      	ldr	r2, [pc, #384]	; (8000580 <__aeabi_fadd+0x320>)
 80003fe:	1a24      	subs	r4, r4, r0
 8000400:	4013      	ands	r3, r2
 8000402:	e768      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000404:	2900      	cmp	r1, #0
 8000406:	d163      	bne.n	80004d0 <__aeabi_fadd+0x270>
 8000408:	1c61      	adds	r1, r4, #1
 800040a:	b2c8      	uxtb	r0, r1
 800040c:	2801      	cmp	r0, #1
 800040e:	dd4e      	ble.n	80004ae <__aeabi_fadd+0x24e>
 8000410:	29ff      	cmp	r1, #255	; 0xff
 8000412:	d049      	beq.n	80004a8 <__aeabi_fadd+0x248>
 8000414:	4463      	add	r3, ip
 8000416:	085b      	lsrs	r3, r3, #1
 8000418:	000c      	movs	r4, r1
 800041a:	e75c      	b.n	80002d6 <__aeabi_fadd+0x76>
 800041c:	2aff      	cmp	r2, #255	; 0xff
 800041e:	d041      	beq.n	80004a4 <__aeabi_fadd+0x244>
 8000420:	000a      	movs	r2, r1
 8000422:	e779      	b.n	8000318 <__aeabi_fadd+0xb8>
 8000424:	2201      	movs	r2, #1
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	e784      	b.n	8000334 <__aeabi_fadd+0xd4>
 800042a:	2c00      	cmp	r4, #0
 800042c:	d01d      	beq.n	800046a <__aeabi_fadd+0x20a>
 800042e:	28ff      	cmp	r0, #255	; 0xff
 8000430:	d022      	beq.n	8000478 <__aeabi_fadd+0x218>
 8000432:	2480      	movs	r4, #128	; 0x80
 8000434:	04e4      	lsls	r4, r4, #19
 8000436:	4252      	negs	r2, r2
 8000438:	4323      	orrs	r3, r4
 800043a:	2a1b      	cmp	r2, #27
 800043c:	dd00      	ble.n	8000440 <__aeabi_fadd+0x1e0>
 800043e:	e08a      	b.n	8000556 <__aeabi_fadd+0x2f6>
 8000440:	001c      	movs	r4, r3
 8000442:	2520      	movs	r5, #32
 8000444:	40d4      	lsrs	r4, r2
 8000446:	1aaa      	subs	r2, r5, r2
 8000448:	4093      	lsls	r3, r2
 800044a:	1e5a      	subs	r2, r3, #1
 800044c:	4193      	sbcs	r3, r2
 800044e:	4323      	orrs	r3, r4
 8000450:	4662      	mov	r2, ip
 8000452:	0004      	movs	r4, r0
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	000d      	movs	r5, r1
 8000458:	e725      	b.n	80002a6 <__aeabi_fadd+0x46>
 800045a:	2e00      	cmp	r6, #0
 800045c:	d000      	beq.n	8000460 <__aeabi_fadd+0x200>
 800045e:	e726      	b.n	80002ae <__aeabi_fadd+0x4e>
 8000460:	2200      	movs	r2, #0
 8000462:	2400      	movs	r4, #0
 8000464:	e7a9      	b.n	80003ba <__aeabi_fadd+0x15a>
 8000466:	000c      	movs	r4, r1
 8000468:	e735      	b.n	80002d6 <__aeabi_fadd+0x76>
 800046a:	2b00      	cmp	r3, #0
 800046c:	d04d      	beq.n	800050a <__aeabi_fadd+0x2aa>
 800046e:	43d2      	mvns	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	d0ed      	beq.n	8000450 <__aeabi_fadd+0x1f0>
 8000474:	28ff      	cmp	r0, #255	; 0xff
 8000476:	d1e0      	bne.n	800043a <__aeabi_fadd+0x1da>
 8000478:	4663      	mov	r3, ip
 800047a:	24ff      	movs	r4, #255	; 0xff
 800047c:	000d      	movs	r5, r1
 800047e:	e72a      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000480:	29ff      	cmp	r1, #255	; 0xff
 8000482:	d00f      	beq.n	80004a4 <__aeabi_fadd+0x244>
 8000484:	0001      	movs	r1, r0
 8000486:	e773      	b.n	8000370 <__aeabi_fadd+0x110>
 8000488:	2b00      	cmp	r3, #0
 800048a:	d061      	beq.n	8000550 <__aeabi_fadd+0x2f0>
 800048c:	24ff      	movs	r4, #255	; 0xff
 800048e:	2f00      	cmp	r7, #0
 8000490:	d100      	bne.n	8000494 <__aeabi_fadd+0x234>
 8000492:	e720      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	4641      	mov	r1, r8
 8000498:	03d2      	lsls	r2, r2, #15
 800049a:	4211      	tst	r1, r2
 800049c:	d002      	beq.n	80004a4 <__aeabi_fadd+0x244>
 800049e:	4216      	tst	r6, r2
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x244>
 80004a2:	003b      	movs	r3, r7
 80004a4:	24ff      	movs	r4, #255	; 0xff
 80004a6:	e716      	b.n	80002d6 <__aeabi_fadd+0x76>
 80004a8:	24ff      	movs	r4, #255	; 0xff
 80004aa:	2300      	movs	r3, #0
 80004ac:	e724      	b.n	80002f8 <__aeabi_fadd+0x98>
 80004ae:	2c00      	cmp	r4, #0
 80004b0:	d1ea      	bne.n	8000488 <__aeabi_fadd+0x228>
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d058      	beq.n	8000568 <__aeabi_fadd+0x308>
 80004b6:	2f00      	cmp	r7, #0
 80004b8:	d100      	bne.n	80004bc <__aeabi_fadd+0x25c>
 80004ba:	e70c      	b.n	80002d6 <__aeabi_fadd+0x76>
 80004bc:	4463      	add	r3, ip
 80004be:	015a      	lsls	r2, r3, #5
 80004c0:	d400      	bmi.n	80004c4 <__aeabi_fadd+0x264>
 80004c2:	e739      	b.n	8000338 <__aeabi_fadd+0xd8>
 80004c4:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <__aeabi_fadd+0x320>)
 80004c6:	000c      	movs	r4, r1
 80004c8:	4013      	ands	r3, r2
 80004ca:	e704      	b.n	80002d6 <__aeabi_fadd+0x76>
 80004cc:	2101      	movs	r1, #1
 80004ce:	e75c      	b.n	800038a <__aeabi_fadd+0x12a>
 80004d0:	2c00      	cmp	r4, #0
 80004d2:	d11e      	bne.n	8000512 <__aeabi_fadd+0x2b2>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d040      	beq.n	800055a <__aeabi_fadd+0x2fa>
 80004d8:	43c9      	mvns	r1, r1
 80004da:	2900      	cmp	r1, #0
 80004dc:	d00b      	beq.n	80004f6 <__aeabi_fadd+0x296>
 80004de:	28ff      	cmp	r0, #255	; 0xff
 80004e0:	d036      	beq.n	8000550 <__aeabi_fadd+0x2f0>
 80004e2:	291b      	cmp	r1, #27
 80004e4:	dc47      	bgt.n	8000576 <__aeabi_fadd+0x316>
 80004e6:	001c      	movs	r4, r3
 80004e8:	2620      	movs	r6, #32
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	1a71      	subs	r1, r6, r1
 80004ee:	408b      	lsls	r3, r1
 80004f0:	1e59      	subs	r1, r3, #1
 80004f2:	418b      	sbcs	r3, r1
 80004f4:	4323      	orrs	r3, r4
 80004f6:	4463      	add	r3, ip
 80004f8:	0004      	movs	r4, r0
 80004fa:	e747      	b.n	800038c <__aeabi_fadd+0x12c>
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d118      	bne.n	8000532 <__aeabi_fadd+0x2d2>
 8000500:	1e3b      	subs	r3, r7, #0
 8000502:	d02d      	beq.n	8000560 <__aeabi_fadd+0x300>
 8000504:	000d      	movs	r5, r1
 8000506:	24ff      	movs	r4, #255	; 0xff
 8000508:	e6e5      	b.n	80002d6 <__aeabi_fadd+0x76>
 800050a:	003b      	movs	r3, r7
 800050c:	0004      	movs	r4, r0
 800050e:	000d      	movs	r5, r1
 8000510:	e6e1      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000512:	28ff      	cmp	r0, #255	; 0xff
 8000514:	d01c      	beq.n	8000550 <__aeabi_fadd+0x2f0>
 8000516:	2480      	movs	r4, #128	; 0x80
 8000518:	04e4      	lsls	r4, r4, #19
 800051a:	4249      	negs	r1, r1
 800051c:	4323      	orrs	r3, r4
 800051e:	e7e0      	b.n	80004e2 <__aeabi_fadd+0x282>
 8000520:	2f00      	cmp	r7, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_fadd+0x2c6>
 8000524:	e6d7      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000526:	1bde      	subs	r6, r3, r7
 8000528:	0172      	lsls	r2, r6, #5
 800052a:	d51f      	bpl.n	800056c <__aeabi_fadd+0x30c>
 800052c:	1afb      	subs	r3, r7, r3
 800052e:	000d      	movs	r5, r1
 8000530:	e6d1      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000532:	24ff      	movs	r4, #255	; 0xff
 8000534:	2f00      	cmp	r7, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x2da>
 8000538:	e6cd      	b.n	80002d6 <__aeabi_fadd+0x76>
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	4640      	mov	r0, r8
 800053e:	03d2      	lsls	r2, r2, #15
 8000540:	4210      	tst	r0, r2
 8000542:	d0af      	beq.n	80004a4 <__aeabi_fadd+0x244>
 8000544:	4216      	tst	r6, r2
 8000546:	d1ad      	bne.n	80004a4 <__aeabi_fadd+0x244>
 8000548:	003b      	movs	r3, r7
 800054a:	000d      	movs	r5, r1
 800054c:	24ff      	movs	r4, #255	; 0xff
 800054e:	e6c2      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000550:	4663      	mov	r3, ip
 8000552:	24ff      	movs	r4, #255	; 0xff
 8000554:	e6bf      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000556:	2301      	movs	r3, #1
 8000558:	e77a      	b.n	8000450 <__aeabi_fadd+0x1f0>
 800055a:	003b      	movs	r3, r7
 800055c:	0004      	movs	r4, r0
 800055e:	e6ba      	b.n	80002d6 <__aeabi_fadd+0x76>
 8000560:	2680      	movs	r6, #128	; 0x80
 8000562:	2200      	movs	r2, #0
 8000564:	03f6      	lsls	r6, r6, #15
 8000566:	e6f0      	b.n	800034a <__aeabi_fadd+0xea>
 8000568:	003b      	movs	r3, r7
 800056a:	e6b4      	b.n	80002d6 <__aeabi_fadd+0x76>
 800056c:	1e33      	subs	r3, r6, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_fadd+0x312>
 8000570:	e6e2      	b.n	8000338 <__aeabi_fadd+0xd8>
 8000572:	2200      	movs	r2, #0
 8000574:	e721      	b.n	80003ba <__aeabi_fadd+0x15a>
 8000576:	2301      	movs	r3, #1
 8000578:	e7bd      	b.n	80004f6 <__aeabi_fadd+0x296>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	7dffffff 	.word	0x7dffffff
 8000580:	fbffffff 	.word	0xfbffffff

08000584 <__aeabi_fmul>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	4657      	mov	r7, sl
 8000588:	464e      	mov	r6, r9
 800058a:	4645      	mov	r5, r8
 800058c:	46de      	mov	lr, fp
 800058e:	b5e0      	push	{r5, r6, r7, lr}
 8000590:	0247      	lsls	r7, r0, #9
 8000592:	0046      	lsls	r6, r0, #1
 8000594:	4688      	mov	r8, r1
 8000596:	0a7f      	lsrs	r7, r7, #9
 8000598:	0e36      	lsrs	r6, r6, #24
 800059a:	0fc4      	lsrs	r4, r0, #31
 800059c:	2e00      	cmp	r6, #0
 800059e:	d047      	beq.n	8000630 <__aeabi_fmul+0xac>
 80005a0:	2eff      	cmp	r6, #255	; 0xff
 80005a2:	d024      	beq.n	80005ee <__aeabi_fmul+0x6a>
 80005a4:	00fb      	lsls	r3, r7, #3
 80005a6:	2780      	movs	r7, #128	; 0x80
 80005a8:	04ff      	lsls	r7, r7, #19
 80005aa:	431f      	orrs	r7, r3
 80005ac:	2300      	movs	r3, #0
 80005ae:	4699      	mov	r9, r3
 80005b0:	469a      	mov	sl, r3
 80005b2:	3e7f      	subs	r6, #127	; 0x7f
 80005b4:	4643      	mov	r3, r8
 80005b6:	025d      	lsls	r5, r3, #9
 80005b8:	0058      	lsls	r0, r3, #1
 80005ba:	0fdb      	lsrs	r3, r3, #31
 80005bc:	0a6d      	lsrs	r5, r5, #9
 80005be:	0e00      	lsrs	r0, r0, #24
 80005c0:	4698      	mov	r8, r3
 80005c2:	d043      	beq.n	800064c <__aeabi_fmul+0xc8>
 80005c4:	28ff      	cmp	r0, #255	; 0xff
 80005c6:	d03b      	beq.n	8000640 <__aeabi_fmul+0xbc>
 80005c8:	00eb      	lsls	r3, r5, #3
 80005ca:	2580      	movs	r5, #128	; 0x80
 80005cc:	2200      	movs	r2, #0
 80005ce:	04ed      	lsls	r5, r5, #19
 80005d0:	431d      	orrs	r5, r3
 80005d2:	387f      	subs	r0, #127	; 0x7f
 80005d4:	1836      	adds	r6, r6, r0
 80005d6:	1c73      	adds	r3, r6, #1
 80005d8:	4641      	mov	r1, r8
 80005da:	469b      	mov	fp, r3
 80005dc:	464b      	mov	r3, r9
 80005de:	4061      	eors	r1, r4
 80005e0:	4313      	orrs	r3, r2
 80005e2:	2b0f      	cmp	r3, #15
 80005e4:	d864      	bhi.n	80006b0 <__aeabi_fmul+0x12c>
 80005e6:	4875      	ldr	r0, [pc, #468]	; (80007bc <__aeabi_fmul+0x238>)
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	58c3      	ldr	r3, [r0, r3]
 80005ec:	469f      	mov	pc, r3
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d142      	bne.n	8000678 <__aeabi_fmul+0xf4>
 80005f2:	2308      	movs	r3, #8
 80005f4:	4699      	mov	r9, r3
 80005f6:	3b06      	subs	r3, #6
 80005f8:	26ff      	movs	r6, #255	; 0xff
 80005fa:	469a      	mov	sl, r3
 80005fc:	e7da      	b.n	80005b4 <__aeabi_fmul+0x30>
 80005fe:	4641      	mov	r1, r8
 8000600:	2a02      	cmp	r2, #2
 8000602:	d028      	beq.n	8000656 <__aeabi_fmul+0xd2>
 8000604:	2a03      	cmp	r2, #3
 8000606:	d100      	bne.n	800060a <__aeabi_fmul+0x86>
 8000608:	e0ce      	b.n	80007a8 <__aeabi_fmul+0x224>
 800060a:	2a01      	cmp	r2, #1
 800060c:	d000      	beq.n	8000610 <__aeabi_fmul+0x8c>
 800060e:	e0ac      	b.n	800076a <__aeabi_fmul+0x1e6>
 8000610:	4011      	ands	r1, r2
 8000612:	2000      	movs	r0, #0
 8000614:	2200      	movs	r2, #0
 8000616:	b2cc      	uxtb	r4, r1
 8000618:	0240      	lsls	r0, r0, #9
 800061a:	05d2      	lsls	r2, r2, #23
 800061c:	0a40      	lsrs	r0, r0, #9
 800061e:	07e4      	lsls	r4, r4, #31
 8000620:	4310      	orrs	r0, r2
 8000622:	4320      	orrs	r0, r4
 8000624:	bc3c      	pop	{r2, r3, r4, r5}
 8000626:	4690      	mov	r8, r2
 8000628:	4699      	mov	r9, r3
 800062a:	46a2      	mov	sl, r4
 800062c:	46ab      	mov	fp, r5
 800062e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000630:	2f00      	cmp	r7, #0
 8000632:	d115      	bne.n	8000660 <__aeabi_fmul+0xdc>
 8000634:	2304      	movs	r3, #4
 8000636:	4699      	mov	r9, r3
 8000638:	3b03      	subs	r3, #3
 800063a:	2600      	movs	r6, #0
 800063c:	469a      	mov	sl, r3
 800063e:	e7b9      	b.n	80005b4 <__aeabi_fmul+0x30>
 8000640:	20ff      	movs	r0, #255	; 0xff
 8000642:	2202      	movs	r2, #2
 8000644:	2d00      	cmp	r5, #0
 8000646:	d0c5      	beq.n	80005d4 <__aeabi_fmul+0x50>
 8000648:	2203      	movs	r2, #3
 800064a:	e7c3      	b.n	80005d4 <__aeabi_fmul+0x50>
 800064c:	2d00      	cmp	r5, #0
 800064e:	d119      	bne.n	8000684 <__aeabi_fmul+0x100>
 8000650:	2000      	movs	r0, #0
 8000652:	2201      	movs	r2, #1
 8000654:	e7be      	b.n	80005d4 <__aeabi_fmul+0x50>
 8000656:	2401      	movs	r4, #1
 8000658:	22ff      	movs	r2, #255	; 0xff
 800065a:	400c      	ands	r4, r1
 800065c:	2000      	movs	r0, #0
 800065e:	e7db      	b.n	8000618 <__aeabi_fmul+0x94>
 8000660:	0038      	movs	r0, r7
 8000662:	f000 faf5 	bl	8000c50 <__clzsi2>
 8000666:	2676      	movs	r6, #118	; 0x76
 8000668:	1f43      	subs	r3, r0, #5
 800066a:	409f      	lsls	r7, r3
 800066c:	2300      	movs	r3, #0
 800066e:	4276      	negs	r6, r6
 8000670:	1a36      	subs	r6, r6, r0
 8000672:	4699      	mov	r9, r3
 8000674:	469a      	mov	sl, r3
 8000676:	e79d      	b.n	80005b4 <__aeabi_fmul+0x30>
 8000678:	230c      	movs	r3, #12
 800067a:	4699      	mov	r9, r3
 800067c:	3b09      	subs	r3, #9
 800067e:	26ff      	movs	r6, #255	; 0xff
 8000680:	469a      	mov	sl, r3
 8000682:	e797      	b.n	80005b4 <__aeabi_fmul+0x30>
 8000684:	0028      	movs	r0, r5
 8000686:	f000 fae3 	bl	8000c50 <__clzsi2>
 800068a:	1f43      	subs	r3, r0, #5
 800068c:	409d      	lsls	r5, r3
 800068e:	2376      	movs	r3, #118	; 0x76
 8000690:	425b      	negs	r3, r3
 8000692:	1a18      	subs	r0, r3, r0
 8000694:	2200      	movs	r2, #0
 8000696:	e79d      	b.n	80005d4 <__aeabi_fmul+0x50>
 8000698:	2080      	movs	r0, #128	; 0x80
 800069a:	2400      	movs	r4, #0
 800069c:	03c0      	lsls	r0, r0, #15
 800069e:	22ff      	movs	r2, #255	; 0xff
 80006a0:	e7ba      	b.n	8000618 <__aeabi_fmul+0x94>
 80006a2:	003d      	movs	r5, r7
 80006a4:	4652      	mov	r2, sl
 80006a6:	e7ab      	b.n	8000600 <__aeabi_fmul+0x7c>
 80006a8:	003d      	movs	r5, r7
 80006aa:	0021      	movs	r1, r4
 80006ac:	4652      	mov	r2, sl
 80006ae:	e7a7      	b.n	8000600 <__aeabi_fmul+0x7c>
 80006b0:	0c3b      	lsrs	r3, r7, #16
 80006b2:	469c      	mov	ip, r3
 80006b4:	042a      	lsls	r2, r5, #16
 80006b6:	0c12      	lsrs	r2, r2, #16
 80006b8:	0c2b      	lsrs	r3, r5, #16
 80006ba:	0014      	movs	r4, r2
 80006bc:	4660      	mov	r0, ip
 80006be:	4665      	mov	r5, ip
 80006c0:	043f      	lsls	r7, r7, #16
 80006c2:	0c3f      	lsrs	r7, r7, #16
 80006c4:	437c      	muls	r4, r7
 80006c6:	4342      	muls	r2, r0
 80006c8:	435d      	muls	r5, r3
 80006ca:	437b      	muls	r3, r7
 80006cc:	0c27      	lsrs	r7, r4, #16
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	18ff      	adds	r7, r7, r3
 80006d2:	42ba      	cmp	r2, r7
 80006d4:	d903      	bls.n	80006de <__aeabi_fmul+0x15a>
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	025b      	lsls	r3, r3, #9
 80006da:	469c      	mov	ip, r3
 80006dc:	4465      	add	r5, ip
 80006de:	0424      	lsls	r4, r4, #16
 80006e0:	043a      	lsls	r2, r7, #16
 80006e2:	0c24      	lsrs	r4, r4, #16
 80006e4:	1912      	adds	r2, r2, r4
 80006e6:	0193      	lsls	r3, r2, #6
 80006e8:	1e5c      	subs	r4, r3, #1
 80006ea:	41a3      	sbcs	r3, r4
 80006ec:	0c3f      	lsrs	r7, r7, #16
 80006ee:	0e92      	lsrs	r2, r2, #26
 80006f0:	197d      	adds	r5, r7, r5
 80006f2:	431a      	orrs	r2, r3
 80006f4:	01ad      	lsls	r5, r5, #6
 80006f6:	4315      	orrs	r5, r2
 80006f8:	012b      	lsls	r3, r5, #4
 80006fa:	d504      	bpl.n	8000706 <__aeabi_fmul+0x182>
 80006fc:	2301      	movs	r3, #1
 80006fe:	465e      	mov	r6, fp
 8000700:	086a      	lsrs	r2, r5, #1
 8000702:	401d      	ands	r5, r3
 8000704:	4315      	orrs	r5, r2
 8000706:	0032      	movs	r2, r6
 8000708:	327f      	adds	r2, #127	; 0x7f
 800070a:	2a00      	cmp	r2, #0
 800070c:	dd25      	ble.n	800075a <__aeabi_fmul+0x1d6>
 800070e:	076b      	lsls	r3, r5, #29
 8000710:	d004      	beq.n	800071c <__aeabi_fmul+0x198>
 8000712:	230f      	movs	r3, #15
 8000714:	402b      	ands	r3, r5
 8000716:	2b04      	cmp	r3, #4
 8000718:	d000      	beq.n	800071c <__aeabi_fmul+0x198>
 800071a:	3504      	adds	r5, #4
 800071c:	012b      	lsls	r3, r5, #4
 800071e:	d503      	bpl.n	8000728 <__aeabi_fmul+0x1a4>
 8000720:	0032      	movs	r2, r6
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <__aeabi_fmul+0x23c>)
 8000724:	3280      	adds	r2, #128	; 0x80
 8000726:	401d      	ands	r5, r3
 8000728:	2afe      	cmp	r2, #254	; 0xfe
 800072a:	dc94      	bgt.n	8000656 <__aeabi_fmul+0xd2>
 800072c:	2401      	movs	r4, #1
 800072e:	01a8      	lsls	r0, r5, #6
 8000730:	0a40      	lsrs	r0, r0, #9
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	400c      	ands	r4, r1
 8000736:	e76f      	b.n	8000618 <__aeabi_fmul+0x94>
 8000738:	2080      	movs	r0, #128	; 0x80
 800073a:	03c0      	lsls	r0, r0, #15
 800073c:	4207      	tst	r7, r0
 800073e:	d007      	beq.n	8000750 <__aeabi_fmul+0x1cc>
 8000740:	4205      	tst	r5, r0
 8000742:	d105      	bne.n	8000750 <__aeabi_fmul+0x1cc>
 8000744:	4328      	orrs	r0, r5
 8000746:	0240      	lsls	r0, r0, #9
 8000748:	0a40      	lsrs	r0, r0, #9
 800074a:	4644      	mov	r4, r8
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	e763      	b.n	8000618 <__aeabi_fmul+0x94>
 8000750:	4338      	orrs	r0, r7
 8000752:	0240      	lsls	r0, r0, #9
 8000754:	0a40      	lsrs	r0, r0, #9
 8000756:	22ff      	movs	r2, #255	; 0xff
 8000758:	e75e      	b.n	8000618 <__aeabi_fmul+0x94>
 800075a:	2401      	movs	r4, #1
 800075c:	1aa3      	subs	r3, r4, r2
 800075e:	2b1b      	cmp	r3, #27
 8000760:	dd05      	ble.n	800076e <__aeabi_fmul+0x1ea>
 8000762:	400c      	ands	r4, r1
 8000764:	2200      	movs	r2, #0
 8000766:	2000      	movs	r0, #0
 8000768:	e756      	b.n	8000618 <__aeabi_fmul+0x94>
 800076a:	465e      	mov	r6, fp
 800076c:	e7cb      	b.n	8000706 <__aeabi_fmul+0x182>
 800076e:	002a      	movs	r2, r5
 8000770:	2020      	movs	r0, #32
 8000772:	40da      	lsrs	r2, r3
 8000774:	1ac3      	subs	r3, r0, r3
 8000776:	409d      	lsls	r5, r3
 8000778:	002b      	movs	r3, r5
 800077a:	1e5d      	subs	r5, r3, #1
 800077c:	41ab      	sbcs	r3, r5
 800077e:	4313      	orrs	r3, r2
 8000780:	075a      	lsls	r2, r3, #29
 8000782:	d004      	beq.n	800078e <__aeabi_fmul+0x20a>
 8000784:	220f      	movs	r2, #15
 8000786:	401a      	ands	r2, r3
 8000788:	2a04      	cmp	r2, #4
 800078a:	d000      	beq.n	800078e <__aeabi_fmul+0x20a>
 800078c:	3304      	adds	r3, #4
 800078e:	015a      	lsls	r2, r3, #5
 8000790:	d504      	bpl.n	800079c <__aeabi_fmul+0x218>
 8000792:	2401      	movs	r4, #1
 8000794:	2201      	movs	r2, #1
 8000796:	400c      	ands	r4, r1
 8000798:	2000      	movs	r0, #0
 800079a:	e73d      	b.n	8000618 <__aeabi_fmul+0x94>
 800079c:	2401      	movs	r4, #1
 800079e:	019b      	lsls	r3, r3, #6
 80007a0:	0a58      	lsrs	r0, r3, #9
 80007a2:	400c      	ands	r4, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	e737      	b.n	8000618 <__aeabi_fmul+0x94>
 80007a8:	2080      	movs	r0, #128	; 0x80
 80007aa:	2401      	movs	r4, #1
 80007ac:	03c0      	lsls	r0, r0, #15
 80007ae:	4328      	orrs	r0, r5
 80007b0:	0240      	lsls	r0, r0, #9
 80007b2:	0a40      	lsrs	r0, r0, #9
 80007b4:	400c      	ands	r4, r1
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	e72e      	b.n	8000618 <__aeabi_fmul+0x94>
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	080044b0 	.word	0x080044b0
 80007c0:	f7ffffff 	.word	0xf7ffffff

080007c4 <__aeabi_fsub>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464f      	mov	r7, r9
 80007c8:	46d6      	mov	lr, sl
 80007ca:	4646      	mov	r6, r8
 80007cc:	0044      	lsls	r4, r0, #1
 80007ce:	b5c0      	push	{r6, r7, lr}
 80007d0:	0fc2      	lsrs	r2, r0, #31
 80007d2:	0247      	lsls	r7, r0, #9
 80007d4:	0248      	lsls	r0, r1, #9
 80007d6:	0a40      	lsrs	r0, r0, #9
 80007d8:	4684      	mov	ip, r0
 80007da:	4666      	mov	r6, ip
 80007dc:	0a7b      	lsrs	r3, r7, #9
 80007de:	0048      	lsls	r0, r1, #1
 80007e0:	0fc9      	lsrs	r1, r1, #31
 80007e2:	469a      	mov	sl, r3
 80007e4:	0e24      	lsrs	r4, r4, #24
 80007e6:	0015      	movs	r5, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	0e00      	lsrs	r0, r0, #24
 80007ec:	4689      	mov	r9, r1
 80007ee:	00f6      	lsls	r6, r6, #3
 80007f0:	28ff      	cmp	r0, #255	; 0xff
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fsub+0x32>
 80007f4:	e08f      	b.n	8000916 <__aeabi_fsub+0x152>
 80007f6:	2101      	movs	r1, #1
 80007f8:	464f      	mov	r7, r9
 80007fa:	404f      	eors	r7, r1
 80007fc:	0039      	movs	r1, r7
 80007fe:	4291      	cmp	r1, r2
 8000800:	d066      	beq.n	80008d0 <__aeabi_fsub+0x10c>
 8000802:	1a22      	subs	r2, r4, r0
 8000804:	2a00      	cmp	r2, #0
 8000806:	dc00      	bgt.n	800080a <__aeabi_fsub+0x46>
 8000808:	e09d      	b.n	8000946 <__aeabi_fsub+0x182>
 800080a:	2800      	cmp	r0, #0
 800080c:	d13d      	bne.n	800088a <__aeabi_fsub+0xc6>
 800080e:	2e00      	cmp	r6, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fsub+0x50>
 8000812:	e08b      	b.n	800092c <__aeabi_fsub+0x168>
 8000814:	1e51      	subs	r1, r2, #1
 8000816:	2900      	cmp	r1, #0
 8000818:	d000      	beq.n	800081c <__aeabi_fsub+0x58>
 800081a:	e0b5      	b.n	8000988 <__aeabi_fsub+0x1c4>
 800081c:	2401      	movs	r4, #1
 800081e:	1b9b      	subs	r3, r3, r6
 8000820:	015a      	lsls	r2, r3, #5
 8000822:	d544      	bpl.n	80008ae <__aeabi_fsub+0xea>
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	099f      	lsrs	r7, r3, #6
 8000828:	0038      	movs	r0, r7
 800082a:	f000 fa11 	bl	8000c50 <__clzsi2>
 800082e:	3805      	subs	r0, #5
 8000830:	4087      	lsls	r7, r0
 8000832:	4284      	cmp	r4, r0
 8000834:	dd00      	ble.n	8000838 <__aeabi_fsub+0x74>
 8000836:	e096      	b.n	8000966 <__aeabi_fsub+0x1a2>
 8000838:	1b04      	subs	r4, r0, r4
 800083a:	003a      	movs	r2, r7
 800083c:	2020      	movs	r0, #32
 800083e:	3401      	adds	r4, #1
 8000840:	40e2      	lsrs	r2, r4
 8000842:	1b04      	subs	r4, r0, r4
 8000844:	40a7      	lsls	r7, r4
 8000846:	003b      	movs	r3, r7
 8000848:	1e5f      	subs	r7, r3, #1
 800084a:	41bb      	sbcs	r3, r7
 800084c:	2400      	movs	r4, #0
 800084e:	4313      	orrs	r3, r2
 8000850:	075a      	lsls	r2, r3, #29
 8000852:	d004      	beq.n	800085e <__aeabi_fsub+0x9a>
 8000854:	220f      	movs	r2, #15
 8000856:	401a      	ands	r2, r3
 8000858:	2a04      	cmp	r2, #4
 800085a:	d000      	beq.n	800085e <__aeabi_fsub+0x9a>
 800085c:	3304      	adds	r3, #4
 800085e:	015a      	lsls	r2, r3, #5
 8000860:	d527      	bpl.n	80008b2 <__aeabi_fsub+0xee>
 8000862:	3401      	adds	r4, #1
 8000864:	2cff      	cmp	r4, #255	; 0xff
 8000866:	d100      	bne.n	800086a <__aeabi_fsub+0xa6>
 8000868:	e079      	b.n	800095e <__aeabi_fsub+0x19a>
 800086a:	2201      	movs	r2, #1
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	0a5b      	lsrs	r3, r3, #9
 8000870:	b2e4      	uxtb	r4, r4
 8000872:	402a      	ands	r2, r5
 8000874:	025b      	lsls	r3, r3, #9
 8000876:	05e4      	lsls	r4, r4, #23
 8000878:	0a58      	lsrs	r0, r3, #9
 800087a:	07d2      	lsls	r2, r2, #31
 800087c:	4320      	orrs	r0, r4
 800087e:	4310      	orrs	r0, r2
 8000880:	bc1c      	pop	{r2, r3, r4}
 8000882:	4690      	mov	r8, r2
 8000884:	4699      	mov	r9, r3
 8000886:	46a2      	mov	sl, r4
 8000888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d0e0      	beq.n	8000850 <__aeabi_fsub+0x8c>
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	04c9      	lsls	r1, r1, #19
 8000892:	430e      	orrs	r6, r1
 8000894:	2a1b      	cmp	r2, #27
 8000896:	dc7b      	bgt.n	8000990 <__aeabi_fsub+0x1cc>
 8000898:	0031      	movs	r1, r6
 800089a:	2020      	movs	r0, #32
 800089c:	40d1      	lsrs	r1, r2
 800089e:	1a82      	subs	r2, r0, r2
 80008a0:	4096      	lsls	r6, r2
 80008a2:	1e72      	subs	r2, r6, #1
 80008a4:	4196      	sbcs	r6, r2
 80008a6:	430e      	orrs	r6, r1
 80008a8:	1b9b      	subs	r3, r3, r6
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d4ba      	bmi.n	8000824 <__aeabi_fsub+0x60>
 80008ae:	075a      	lsls	r2, r3, #29
 80008b0:	d1d0      	bne.n	8000854 <__aeabi_fsub+0x90>
 80008b2:	2201      	movs	r2, #1
 80008b4:	08df      	lsrs	r7, r3, #3
 80008b6:	402a      	ands	r2, r5
 80008b8:	2cff      	cmp	r4, #255	; 0xff
 80008ba:	d133      	bne.n	8000924 <__aeabi_fsub+0x160>
 80008bc:	2f00      	cmp	r7, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fsub+0xfe>
 80008c0:	e0a8      	b.n	8000a14 <__aeabi_fsub+0x250>
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	03db      	lsls	r3, r3, #15
 80008c6:	433b      	orrs	r3, r7
 80008c8:	025b      	lsls	r3, r3, #9
 80008ca:	0a5b      	lsrs	r3, r3, #9
 80008cc:	24ff      	movs	r4, #255	; 0xff
 80008ce:	e7d1      	b.n	8000874 <__aeabi_fsub+0xb0>
 80008d0:	1a21      	subs	r1, r4, r0
 80008d2:	2900      	cmp	r1, #0
 80008d4:	dd4c      	ble.n	8000970 <__aeabi_fsub+0x1ac>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d02a      	beq.n	8000930 <__aeabi_fsub+0x16c>
 80008da:	2cff      	cmp	r4, #255	; 0xff
 80008dc:	d0b8      	beq.n	8000850 <__aeabi_fsub+0x8c>
 80008de:	2080      	movs	r0, #128	; 0x80
 80008e0:	04c0      	lsls	r0, r0, #19
 80008e2:	4306      	orrs	r6, r0
 80008e4:	291b      	cmp	r1, #27
 80008e6:	dd00      	ble.n	80008ea <__aeabi_fsub+0x126>
 80008e8:	e0af      	b.n	8000a4a <__aeabi_fsub+0x286>
 80008ea:	0030      	movs	r0, r6
 80008ec:	2720      	movs	r7, #32
 80008ee:	40c8      	lsrs	r0, r1
 80008f0:	1a79      	subs	r1, r7, r1
 80008f2:	408e      	lsls	r6, r1
 80008f4:	1e71      	subs	r1, r6, #1
 80008f6:	418e      	sbcs	r6, r1
 80008f8:	4306      	orrs	r6, r0
 80008fa:	199b      	adds	r3, r3, r6
 80008fc:	0159      	lsls	r1, r3, #5
 80008fe:	d5d6      	bpl.n	80008ae <__aeabi_fsub+0xea>
 8000900:	3401      	adds	r4, #1
 8000902:	2cff      	cmp	r4, #255	; 0xff
 8000904:	d100      	bne.n	8000908 <__aeabi_fsub+0x144>
 8000906:	e085      	b.n	8000a14 <__aeabi_fsub+0x250>
 8000908:	2201      	movs	r2, #1
 800090a:	497a      	ldr	r1, [pc, #488]	; (8000af4 <__aeabi_fsub+0x330>)
 800090c:	401a      	ands	r2, r3
 800090e:	085b      	lsrs	r3, r3, #1
 8000910:	400b      	ands	r3, r1
 8000912:	4313      	orrs	r3, r2
 8000914:	e79c      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000916:	2e00      	cmp	r6, #0
 8000918:	d000      	beq.n	800091c <__aeabi_fsub+0x158>
 800091a:	e770      	b.n	80007fe <__aeabi_fsub+0x3a>
 800091c:	e76b      	b.n	80007f6 <__aeabi_fsub+0x32>
 800091e:	1e3b      	subs	r3, r7, #0
 8000920:	d1c5      	bne.n	80008ae <__aeabi_fsub+0xea>
 8000922:	2200      	movs	r2, #0
 8000924:	027b      	lsls	r3, r7, #9
 8000926:	0a5b      	lsrs	r3, r3, #9
 8000928:	b2e4      	uxtb	r4, r4
 800092a:	e7a3      	b.n	8000874 <__aeabi_fsub+0xb0>
 800092c:	0014      	movs	r4, r2
 800092e:	e78f      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000930:	2e00      	cmp	r6, #0
 8000932:	d04d      	beq.n	80009d0 <__aeabi_fsub+0x20c>
 8000934:	1e48      	subs	r0, r1, #1
 8000936:	2800      	cmp	r0, #0
 8000938:	d157      	bne.n	80009ea <__aeabi_fsub+0x226>
 800093a:	199b      	adds	r3, r3, r6
 800093c:	2401      	movs	r4, #1
 800093e:	015a      	lsls	r2, r3, #5
 8000940:	d5b5      	bpl.n	80008ae <__aeabi_fsub+0xea>
 8000942:	2402      	movs	r4, #2
 8000944:	e7e0      	b.n	8000908 <__aeabi_fsub+0x144>
 8000946:	2a00      	cmp	r2, #0
 8000948:	d125      	bne.n	8000996 <__aeabi_fsub+0x1d2>
 800094a:	1c62      	adds	r2, r4, #1
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	2a01      	cmp	r2, #1
 8000950:	dd72      	ble.n	8000a38 <__aeabi_fsub+0x274>
 8000952:	1b9f      	subs	r7, r3, r6
 8000954:	017a      	lsls	r2, r7, #5
 8000956:	d535      	bpl.n	80009c4 <__aeabi_fsub+0x200>
 8000958:	1af7      	subs	r7, r6, r3
 800095a:	000d      	movs	r5, r1
 800095c:	e764      	b.n	8000828 <__aeabi_fsub+0x64>
 800095e:	2201      	movs	r2, #1
 8000960:	2300      	movs	r3, #0
 8000962:	402a      	ands	r2, r5
 8000964:	e786      	b.n	8000874 <__aeabi_fsub+0xb0>
 8000966:	003b      	movs	r3, r7
 8000968:	4a63      	ldr	r2, [pc, #396]	; (8000af8 <__aeabi_fsub+0x334>)
 800096a:	1a24      	subs	r4, r4, r0
 800096c:	4013      	ands	r3, r2
 800096e:	e76f      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000970:	2900      	cmp	r1, #0
 8000972:	d16c      	bne.n	8000a4e <__aeabi_fsub+0x28a>
 8000974:	1c61      	adds	r1, r4, #1
 8000976:	b2c8      	uxtb	r0, r1
 8000978:	2801      	cmp	r0, #1
 800097a:	dd4e      	ble.n	8000a1a <__aeabi_fsub+0x256>
 800097c:	29ff      	cmp	r1, #255	; 0xff
 800097e:	d049      	beq.n	8000a14 <__aeabi_fsub+0x250>
 8000980:	199b      	adds	r3, r3, r6
 8000982:	085b      	lsrs	r3, r3, #1
 8000984:	000c      	movs	r4, r1
 8000986:	e763      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000988:	2aff      	cmp	r2, #255	; 0xff
 800098a:	d041      	beq.n	8000a10 <__aeabi_fsub+0x24c>
 800098c:	000a      	movs	r2, r1
 800098e:	e781      	b.n	8000894 <__aeabi_fsub+0xd0>
 8000990:	2601      	movs	r6, #1
 8000992:	1b9b      	subs	r3, r3, r6
 8000994:	e789      	b.n	80008aa <__aeabi_fsub+0xe6>
 8000996:	2c00      	cmp	r4, #0
 8000998:	d01c      	beq.n	80009d4 <__aeabi_fsub+0x210>
 800099a:	28ff      	cmp	r0, #255	; 0xff
 800099c:	d021      	beq.n	80009e2 <__aeabi_fsub+0x21e>
 800099e:	2480      	movs	r4, #128	; 0x80
 80009a0:	04e4      	lsls	r4, r4, #19
 80009a2:	4252      	negs	r2, r2
 80009a4:	4323      	orrs	r3, r4
 80009a6:	2a1b      	cmp	r2, #27
 80009a8:	dd00      	ble.n	80009ac <__aeabi_fsub+0x1e8>
 80009aa:	e096      	b.n	8000ada <__aeabi_fsub+0x316>
 80009ac:	001c      	movs	r4, r3
 80009ae:	2520      	movs	r5, #32
 80009b0:	40d4      	lsrs	r4, r2
 80009b2:	1aaa      	subs	r2, r5, r2
 80009b4:	4093      	lsls	r3, r2
 80009b6:	1e5a      	subs	r2, r3, #1
 80009b8:	4193      	sbcs	r3, r2
 80009ba:	4323      	orrs	r3, r4
 80009bc:	1af3      	subs	r3, r6, r3
 80009be:	0004      	movs	r4, r0
 80009c0:	000d      	movs	r5, r1
 80009c2:	e72d      	b.n	8000820 <__aeabi_fsub+0x5c>
 80009c4:	2f00      	cmp	r7, #0
 80009c6:	d000      	beq.n	80009ca <__aeabi_fsub+0x206>
 80009c8:	e72e      	b.n	8000828 <__aeabi_fsub+0x64>
 80009ca:	2200      	movs	r2, #0
 80009cc:	2400      	movs	r4, #0
 80009ce:	e7a9      	b.n	8000924 <__aeabi_fsub+0x160>
 80009d0:	000c      	movs	r4, r1
 80009d2:	e73d      	b.n	8000850 <__aeabi_fsub+0x8c>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d058      	beq.n	8000a8a <__aeabi_fsub+0x2c6>
 80009d8:	43d2      	mvns	r2, r2
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d0ee      	beq.n	80009bc <__aeabi_fsub+0x1f8>
 80009de:	28ff      	cmp	r0, #255	; 0xff
 80009e0:	d1e1      	bne.n	80009a6 <__aeabi_fsub+0x1e2>
 80009e2:	0033      	movs	r3, r6
 80009e4:	24ff      	movs	r4, #255	; 0xff
 80009e6:	000d      	movs	r5, r1
 80009e8:	e732      	b.n	8000850 <__aeabi_fsub+0x8c>
 80009ea:	29ff      	cmp	r1, #255	; 0xff
 80009ec:	d010      	beq.n	8000a10 <__aeabi_fsub+0x24c>
 80009ee:	0001      	movs	r1, r0
 80009f0:	e778      	b.n	80008e4 <__aeabi_fsub+0x120>
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d06e      	beq.n	8000ad4 <__aeabi_fsub+0x310>
 80009f6:	24ff      	movs	r4, #255	; 0xff
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fsub+0x23a>
 80009fc:	e728      	b.n	8000850 <__aeabi_fsub+0x8c>
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	4651      	mov	r1, sl
 8000a02:	03d2      	lsls	r2, r2, #15
 8000a04:	4211      	tst	r1, r2
 8000a06:	d003      	beq.n	8000a10 <__aeabi_fsub+0x24c>
 8000a08:	4661      	mov	r1, ip
 8000a0a:	4211      	tst	r1, r2
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fsub+0x24c>
 8000a0e:	0033      	movs	r3, r6
 8000a10:	24ff      	movs	r4, #255	; 0xff
 8000a12:	e71d      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000a14:	24ff      	movs	r4, #255	; 0xff
 8000a16:	2300      	movs	r3, #0
 8000a18:	e72c      	b.n	8000874 <__aeabi_fsub+0xb0>
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d1e9      	bne.n	80009f2 <__aeabi_fsub+0x22e>
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d063      	beq.n	8000aea <__aeabi_fsub+0x326>
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fsub+0x264>
 8000a26:	e713      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000a28:	199b      	adds	r3, r3, r6
 8000a2a:	015a      	lsls	r2, r3, #5
 8000a2c:	d400      	bmi.n	8000a30 <__aeabi_fsub+0x26c>
 8000a2e:	e73e      	b.n	80008ae <__aeabi_fsub+0xea>
 8000a30:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <__aeabi_fsub+0x334>)
 8000a32:	000c      	movs	r4, r1
 8000a34:	4013      	ands	r3, r2
 8000a36:	e70b      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	d11e      	bne.n	8000a7a <__aeabi_fsub+0x2b6>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d12f      	bne.n	8000aa0 <__aeabi_fsub+0x2dc>
 8000a40:	2e00      	cmp	r6, #0
 8000a42:	d04f      	beq.n	8000ae4 <__aeabi_fsub+0x320>
 8000a44:	0033      	movs	r3, r6
 8000a46:	000d      	movs	r5, r1
 8000a48:	e702      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	e755      	b.n	80008fa <__aeabi_fsub+0x136>
 8000a4e:	2c00      	cmp	r4, #0
 8000a50:	d11f      	bne.n	8000a92 <__aeabi_fsub+0x2ce>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d043      	beq.n	8000ade <__aeabi_fsub+0x31a>
 8000a56:	43c9      	mvns	r1, r1
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	d00b      	beq.n	8000a74 <__aeabi_fsub+0x2b0>
 8000a5c:	28ff      	cmp	r0, #255	; 0xff
 8000a5e:	d039      	beq.n	8000ad4 <__aeabi_fsub+0x310>
 8000a60:	291b      	cmp	r1, #27
 8000a62:	dc44      	bgt.n	8000aee <__aeabi_fsub+0x32a>
 8000a64:	001c      	movs	r4, r3
 8000a66:	2720      	movs	r7, #32
 8000a68:	40cc      	lsrs	r4, r1
 8000a6a:	1a79      	subs	r1, r7, r1
 8000a6c:	408b      	lsls	r3, r1
 8000a6e:	1e59      	subs	r1, r3, #1
 8000a70:	418b      	sbcs	r3, r1
 8000a72:	4323      	orrs	r3, r4
 8000a74:	199b      	adds	r3, r3, r6
 8000a76:	0004      	movs	r4, r0
 8000a78:	e740      	b.n	80008fc <__aeabi_fsub+0x138>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d11a      	bne.n	8000ab4 <__aeabi_fsub+0x2f0>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d124      	bne.n	8000acc <__aeabi_fsub+0x308>
 8000a82:	2780      	movs	r7, #128	; 0x80
 8000a84:	2200      	movs	r2, #0
 8000a86:	03ff      	lsls	r7, r7, #15
 8000a88:	e71b      	b.n	80008c2 <__aeabi_fsub+0xfe>
 8000a8a:	0033      	movs	r3, r6
 8000a8c:	0004      	movs	r4, r0
 8000a8e:	000d      	movs	r5, r1
 8000a90:	e6de      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000a92:	28ff      	cmp	r0, #255	; 0xff
 8000a94:	d01e      	beq.n	8000ad4 <__aeabi_fsub+0x310>
 8000a96:	2480      	movs	r4, #128	; 0x80
 8000a98:	04e4      	lsls	r4, r4, #19
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	4323      	orrs	r3, r4
 8000a9e:	e7df      	b.n	8000a60 <__aeabi_fsub+0x29c>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x2e2>
 8000aa4:	e6d4      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000aa6:	1b9f      	subs	r7, r3, r6
 8000aa8:	017a      	lsls	r2, r7, #5
 8000aaa:	d400      	bmi.n	8000aae <__aeabi_fsub+0x2ea>
 8000aac:	e737      	b.n	800091e <__aeabi_fsub+0x15a>
 8000aae:	1af3      	subs	r3, r6, r3
 8000ab0:	000d      	movs	r5, r1
 8000ab2:	e6cd      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000ab4:	24ff      	movs	r4, #255	; 0xff
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fsub+0x2f8>
 8000aba:	e6c9      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	4650      	mov	r0, sl
 8000ac0:	03d2      	lsls	r2, r2, #15
 8000ac2:	4210      	tst	r0, r2
 8000ac4:	d0a4      	beq.n	8000a10 <__aeabi_fsub+0x24c>
 8000ac6:	4660      	mov	r0, ip
 8000ac8:	4210      	tst	r0, r2
 8000aca:	d1a1      	bne.n	8000a10 <__aeabi_fsub+0x24c>
 8000acc:	0033      	movs	r3, r6
 8000ace:	000d      	movs	r5, r1
 8000ad0:	24ff      	movs	r4, #255	; 0xff
 8000ad2:	e6bd      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000ad4:	0033      	movs	r3, r6
 8000ad6:	24ff      	movs	r4, #255	; 0xff
 8000ad8:	e6ba      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e76e      	b.n	80009bc <__aeabi_fsub+0x1f8>
 8000ade:	0033      	movs	r3, r6
 8000ae0:	0004      	movs	r4, r0
 8000ae2:	e6b5      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	e71c      	b.n	8000924 <__aeabi_fsub+0x160>
 8000aea:	0033      	movs	r3, r6
 8000aec:	e6b0      	b.n	8000850 <__aeabi_fsub+0x8c>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e7c0      	b.n	8000a74 <__aeabi_fsub+0x2b0>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	7dffffff 	.word	0x7dffffff
 8000af8:	fbffffff 	.word	0xfbffffff

08000afc <__aeabi_f2iz>:
 8000afc:	0241      	lsls	r1, r0, #9
 8000afe:	0043      	lsls	r3, r0, #1
 8000b00:	0fc2      	lsrs	r2, r0, #31
 8000b02:	0a49      	lsrs	r1, r1, #9
 8000b04:	0e1b      	lsrs	r3, r3, #24
 8000b06:	2000      	movs	r0, #0
 8000b08:	2b7e      	cmp	r3, #126	; 0x7e
 8000b0a:	dd0d      	ble.n	8000b28 <__aeabi_f2iz+0x2c>
 8000b0c:	2b9d      	cmp	r3, #157	; 0x9d
 8000b0e:	dc0c      	bgt.n	8000b2a <__aeabi_f2iz+0x2e>
 8000b10:	2080      	movs	r0, #128	; 0x80
 8000b12:	0400      	lsls	r0, r0, #16
 8000b14:	4301      	orrs	r1, r0
 8000b16:	2b95      	cmp	r3, #149	; 0x95
 8000b18:	dc0a      	bgt.n	8000b30 <__aeabi_f2iz+0x34>
 8000b1a:	2096      	movs	r0, #150	; 0x96
 8000b1c:	1ac3      	subs	r3, r0, r3
 8000b1e:	40d9      	lsrs	r1, r3
 8000b20:	4248      	negs	r0, r1
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_f2iz+0x2c>
 8000b26:	0008      	movs	r0, r1
 8000b28:	4770      	bx	lr
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <__aeabi_f2iz+0x3c>)
 8000b2c:	18d0      	adds	r0, r2, r3
 8000b2e:	e7fb      	b.n	8000b28 <__aeabi_f2iz+0x2c>
 8000b30:	3b96      	subs	r3, #150	; 0x96
 8000b32:	4099      	lsls	r1, r3
 8000b34:	e7f4      	b.n	8000b20 <__aeabi_f2iz+0x24>
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	7fffffff 	.word	0x7fffffff

08000b3c <__aeabi_i2f>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d030      	beq.n	8000ba4 <__aeabi_i2f+0x68>
 8000b42:	17c3      	asrs	r3, r0, #31
 8000b44:	18c4      	adds	r4, r0, r3
 8000b46:	405c      	eors	r4, r3
 8000b48:	0fc5      	lsrs	r5, r0, #31
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	f000 f880 	bl	8000c50 <__clzsi2>
 8000b50:	239e      	movs	r3, #158	; 0x9e
 8000b52:	1a1b      	subs	r3, r3, r0
 8000b54:	2b96      	cmp	r3, #150	; 0x96
 8000b56:	dc0d      	bgt.n	8000b74 <__aeabi_i2f+0x38>
 8000b58:	2296      	movs	r2, #150	; 0x96
 8000b5a:	1ad2      	subs	r2, r2, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	002a      	movs	r2, r5
 8000b60:	0264      	lsls	r4, r4, #9
 8000b62:	0a64      	lsrs	r4, r4, #9
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	0264      	lsls	r4, r4, #9
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	0a60      	lsrs	r0, r4, #9
 8000b6c:	07d2      	lsls	r2, r2, #31
 8000b6e:	4318      	orrs	r0, r3
 8000b70:	4310      	orrs	r0, r2
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	2b99      	cmp	r3, #153	; 0x99
 8000b76:	dc19      	bgt.n	8000bac <__aeabi_i2f+0x70>
 8000b78:	2299      	movs	r2, #153	; 0x99
 8000b7a:	1ad2      	subs	r2, r2, r3
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	dd29      	ble.n	8000bd4 <__aeabi_i2f+0x98>
 8000b80:	4094      	lsls	r4, r2
 8000b82:	0022      	movs	r2, r4
 8000b84:	4c14      	ldr	r4, [pc, #80]	; (8000bd8 <__aeabi_i2f+0x9c>)
 8000b86:	4014      	ands	r4, r2
 8000b88:	0751      	lsls	r1, r2, #29
 8000b8a:	d004      	beq.n	8000b96 <__aeabi_i2f+0x5a>
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	400a      	ands	r2, r1
 8000b90:	2a04      	cmp	r2, #4
 8000b92:	d000      	beq.n	8000b96 <__aeabi_i2f+0x5a>
 8000b94:	3404      	adds	r4, #4
 8000b96:	0162      	lsls	r2, r4, #5
 8000b98:	d413      	bmi.n	8000bc2 <__aeabi_i2f+0x86>
 8000b9a:	01a4      	lsls	r4, r4, #6
 8000b9c:	0a64      	lsrs	r4, r4, #9
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	002a      	movs	r2, r5
 8000ba2:	e7e0      	b.n	8000b66 <__aeabi_i2f+0x2a>
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2400      	movs	r4, #0
 8000baa:	e7dc      	b.n	8000b66 <__aeabi_i2f+0x2a>
 8000bac:	2205      	movs	r2, #5
 8000bae:	0021      	movs	r1, r4
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	40d1      	lsrs	r1, r2
 8000bb4:	22b9      	movs	r2, #185	; 0xb9
 8000bb6:	1ad2      	subs	r2, r2, r3
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	1e62      	subs	r2, r4, #1
 8000bbc:	4194      	sbcs	r4, r2
 8000bbe:	430c      	orrs	r4, r1
 8000bc0:	e7da      	b.n	8000b78 <__aeabi_i2f+0x3c>
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <__aeabi_i2f+0x9c>)
 8000bc4:	002a      	movs	r2, r5
 8000bc6:	401c      	ands	r4, r3
 8000bc8:	239f      	movs	r3, #159	; 0x9f
 8000bca:	01a4      	lsls	r4, r4, #6
 8000bcc:	1a1b      	subs	r3, r3, r0
 8000bce:	0a64      	lsrs	r4, r4, #9
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	e7c8      	b.n	8000b66 <__aeabi_i2f+0x2a>
 8000bd4:	0022      	movs	r2, r4
 8000bd6:	e7d5      	b.n	8000b84 <__aeabi_i2f+0x48>
 8000bd8:	fbffffff 	.word	0xfbffffff

08000bdc <__aeabi_cfrcmple>:
 8000bdc:	4684      	mov	ip, r0
 8000bde:	1c08      	adds	r0, r1, #0
 8000be0:	4661      	mov	r1, ip
 8000be2:	e7ff      	b.n	8000be4 <__aeabi_cfcmpeq>

08000be4 <__aeabi_cfcmpeq>:
 8000be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000be6:	f000 f8b7 	bl	8000d58 <__lesf2>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d401      	bmi.n	8000bf2 <__aeabi_cfcmpeq+0xe>
 8000bee:	2100      	movs	r1, #0
 8000bf0:	42c8      	cmn	r0, r1
 8000bf2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000bf4 <__aeabi_fcmpeq>:
 8000bf4:	b510      	push	{r4, lr}
 8000bf6:	f000 f849 	bl	8000c8c <__eqsf2>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	3001      	adds	r0, #1
 8000bfe:	bd10      	pop	{r4, pc}

08000c00 <__aeabi_fcmplt>:
 8000c00:	b510      	push	{r4, lr}
 8000c02:	f000 f8a9 	bl	8000d58 <__lesf2>
 8000c06:	2800      	cmp	r0, #0
 8000c08:	db01      	blt.n	8000c0e <__aeabi_fcmplt+0xe>
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	2001      	movs	r0, #1
 8000c10:	bd10      	pop	{r4, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)

08000c14 <__aeabi_fcmple>:
 8000c14:	b510      	push	{r4, lr}
 8000c16:	f000 f89f 	bl	8000d58 <__lesf2>
 8000c1a:	2800      	cmp	r0, #0
 8000c1c:	dd01      	ble.n	8000c22 <__aeabi_fcmple+0xe>
 8000c1e:	2000      	movs	r0, #0
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	2001      	movs	r0, #1
 8000c24:	bd10      	pop	{r4, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)

08000c28 <__aeabi_fcmpgt>:
 8000c28:	b510      	push	{r4, lr}
 8000c2a:	f000 f855 	bl	8000cd8 <__gesf2>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	dc01      	bgt.n	8000c36 <__aeabi_fcmpgt+0xe>
 8000c32:	2000      	movs	r0, #0
 8000c34:	bd10      	pop	{r4, pc}
 8000c36:	2001      	movs	r0, #1
 8000c38:	bd10      	pop	{r4, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)

08000c3c <__aeabi_fcmpge>:
 8000c3c:	b510      	push	{r4, lr}
 8000c3e:	f000 f84b 	bl	8000cd8 <__gesf2>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	da01      	bge.n	8000c4a <__aeabi_fcmpge+0xe>
 8000c46:	2000      	movs	r0, #0
 8000c48:	bd10      	pop	{r4, pc}
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	bd10      	pop	{r4, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)

08000c50 <__clzsi2>:
 8000c50:	211c      	movs	r1, #28
 8000c52:	2301      	movs	r3, #1
 8000c54:	041b      	lsls	r3, r3, #16
 8000c56:	4298      	cmp	r0, r3
 8000c58:	d301      	bcc.n	8000c5e <__clzsi2+0xe>
 8000c5a:	0c00      	lsrs	r0, r0, #16
 8000c5c:	3910      	subs	r1, #16
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	4298      	cmp	r0, r3
 8000c62:	d301      	bcc.n	8000c68 <__clzsi2+0x18>
 8000c64:	0a00      	lsrs	r0, r0, #8
 8000c66:	3908      	subs	r1, #8
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	4298      	cmp	r0, r3
 8000c6c:	d301      	bcc.n	8000c72 <__clzsi2+0x22>
 8000c6e:	0900      	lsrs	r0, r0, #4
 8000c70:	3904      	subs	r1, #4
 8000c72:	a202      	add	r2, pc, #8	; (adr r2, 8000c7c <__clzsi2+0x2c>)
 8000c74:	5c10      	ldrb	r0, [r2, r0]
 8000c76:	1840      	adds	r0, r0, r1
 8000c78:	4770      	bx	lr
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	02020304 	.word	0x02020304
 8000c80:	01010101 	.word	0x01010101
	...

08000c8c <__eqsf2>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	0042      	lsls	r2, r0, #1
 8000c90:	0245      	lsls	r5, r0, #9
 8000c92:	024e      	lsls	r6, r1, #9
 8000c94:	004c      	lsls	r4, r1, #1
 8000c96:	0fc3      	lsrs	r3, r0, #31
 8000c98:	0a6d      	lsrs	r5, r5, #9
 8000c9a:	0e12      	lsrs	r2, r2, #24
 8000c9c:	0a76      	lsrs	r6, r6, #9
 8000c9e:	0e24      	lsrs	r4, r4, #24
 8000ca0:	0fc9      	lsrs	r1, r1, #31
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2aff      	cmp	r2, #255	; 0xff
 8000ca6:	d006      	beq.n	8000cb6 <__eqsf2+0x2a>
 8000ca8:	2cff      	cmp	r4, #255	; 0xff
 8000caa:	d003      	beq.n	8000cb4 <__eqsf2+0x28>
 8000cac:	42a2      	cmp	r2, r4
 8000cae:	d101      	bne.n	8000cb4 <__eqsf2+0x28>
 8000cb0:	42b5      	cmp	r5, r6
 8000cb2:	d006      	beq.n	8000cc2 <__eqsf2+0x36>
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d1fc      	bne.n	8000cb4 <__eqsf2+0x28>
 8000cba:	2cff      	cmp	r4, #255	; 0xff
 8000cbc:	d1fa      	bne.n	8000cb4 <__eqsf2+0x28>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d1f8      	bne.n	8000cb4 <__eqsf2+0x28>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d006      	beq.n	8000cd4 <__eqsf2+0x48>
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d1f3      	bne.n	8000cb4 <__eqsf2+0x28>
 8000ccc:	0028      	movs	r0, r5
 8000cce:	1e45      	subs	r5, r0, #1
 8000cd0:	41a8      	sbcs	r0, r5
 8000cd2:	e7ef      	b.n	8000cb4 <__eqsf2+0x28>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	e7ed      	b.n	8000cb4 <__eqsf2+0x28>

08000cd8 <__gesf2>:
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	0042      	lsls	r2, r0, #1
 8000cdc:	0245      	lsls	r5, r0, #9
 8000cde:	024c      	lsls	r4, r1, #9
 8000ce0:	0fc3      	lsrs	r3, r0, #31
 8000ce2:	0048      	lsls	r0, r1, #1
 8000ce4:	0a6d      	lsrs	r5, r5, #9
 8000ce6:	0e12      	lsrs	r2, r2, #24
 8000ce8:	0a64      	lsrs	r4, r4, #9
 8000cea:	0e00      	lsrs	r0, r0, #24
 8000cec:	0fc9      	lsrs	r1, r1, #31
 8000cee:	2aff      	cmp	r2, #255	; 0xff
 8000cf0:	d01e      	beq.n	8000d30 <__gesf2+0x58>
 8000cf2:	28ff      	cmp	r0, #255	; 0xff
 8000cf4:	d021      	beq.n	8000d3a <__gesf2+0x62>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d10a      	bne.n	8000d10 <__gesf2+0x38>
 8000cfa:	426e      	negs	r6, r5
 8000cfc:	416e      	adcs	r6, r5
 8000cfe:	b2f6      	uxtb	r6, r6
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d10f      	bne.n	8000d24 <__gesf2+0x4c>
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d10d      	bne.n	8000d24 <__gesf2+0x4c>
 8000d08:	2000      	movs	r0, #0
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d009      	beq.n	8000d22 <__gesf2+0x4a>
 8000d0e:	e005      	b.n	8000d1c <__gesf2+0x44>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d101      	bne.n	8000d18 <__gesf2+0x40>
 8000d14:	2c00      	cmp	r4, #0
 8000d16:	d001      	beq.n	8000d1c <__gesf2+0x44>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d011      	beq.n	8000d40 <__gesf2+0x68>
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4258      	negs	r0, r3
 8000d20:	4308      	orrs	r0, r1
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d0f7      	beq.n	8000d18 <__gesf2+0x40>
 8000d28:	2001      	movs	r0, #1
 8000d2a:	3901      	subs	r1, #1
 8000d2c:	4308      	orrs	r0, r1
 8000d2e:	e7f8      	b.n	8000d22 <__gesf2+0x4a>
 8000d30:	2d00      	cmp	r5, #0
 8000d32:	d0de      	beq.n	8000cf2 <__gesf2+0x1a>
 8000d34:	2002      	movs	r0, #2
 8000d36:	4240      	negs	r0, r0
 8000d38:	e7f3      	b.n	8000d22 <__gesf2+0x4a>
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d0db      	beq.n	8000cf6 <__gesf2+0x1e>
 8000d3e:	e7f9      	b.n	8000d34 <__gesf2+0x5c>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	dceb      	bgt.n	8000d1c <__gesf2+0x44>
 8000d44:	db04      	blt.n	8000d50 <__gesf2+0x78>
 8000d46:	42a5      	cmp	r5, r4
 8000d48:	d8e8      	bhi.n	8000d1c <__gesf2+0x44>
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	d2e8      	bcs.n	8000d22 <__gesf2+0x4a>
 8000d50:	2101      	movs	r1, #1
 8000d52:	1e58      	subs	r0, r3, #1
 8000d54:	4308      	orrs	r0, r1
 8000d56:	e7e4      	b.n	8000d22 <__gesf2+0x4a>

08000d58 <__lesf2>:
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	0042      	lsls	r2, r0, #1
 8000d5c:	024d      	lsls	r5, r1, #9
 8000d5e:	004c      	lsls	r4, r1, #1
 8000d60:	0246      	lsls	r6, r0, #9
 8000d62:	0a76      	lsrs	r6, r6, #9
 8000d64:	0e12      	lsrs	r2, r2, #24
 8000d66:	0fc3      	lsrs	r3, r0, #31
 8000d68:	0a6d      	lsrs	r5, r5, #9
 8000d6a:	0e24      	lsrs	r4, r4, #24
 8000d6c:	0fc9      	lsrs	r1, r1, #31
 8000d6e:	2aff      	cmp	r2, #255	; 0xff
 8000d70:	d016      	beq.n	8000da0 <__lesf2+0x48>
 8000d72:	2cff      	cmp	r4, #255	; 0xff
 8000d74:	d018      	beq.n	8000da8 <__lesf2+0x50>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d10a      	bne.n	8000d90 <__lesf2+0x38>
 8000d7a:	4270      	negs	r0, r6
 8000d7c:	4170      	adcs	r0, r6
 8000d7e:	b2c0      	uxtb	r0, r0
 8000d80:	2c00      	cmp	r4, #0
 8000d82:	d015      	beq.n	8000db0 <__lesf2+0x58>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d005      	beq.n	8000d94 <__lesf2+0x3c>
 8000d88:	2001      	movs	r0, #1
 8000d8a:	3901      	subs	r1, #1
 8000d8c:	4308      	orrs	r0, r1
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d90:	2c00      	cmp	r4, #0
 8000d92:	d013      	beq.n	8000dbc <__lesf2+0x64>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	d014      	beq.n	8000dc2 <__lesf2+0x6a>
 8000d98:	2001      	movs	r0, #1
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	4318      	orrs	r0, r3
 8000d9e:	e7f6      	b.n	8000d8e <__lesf2+0x36>
 8000da0:	2002      	movs	r0, #2
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d1f3      	bne.n	8000d8e <__lesf2+0x36>
 8000da6:	e7e4      	b.n	8000d72 <__lesf2+0x1a>
 8000da8:	2002      	movs	r0, #2
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d1ef      	bne.n	8000d8e <__lesf2+0x36>
 8000dae:	e7e2      	b.n	8000d76 <__lesf2+0x1e>
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	d1e7      	bne.n	8000d84 <__lesf2+0x2c>
 8000db4:	2000      	movs	r0, #0
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d0e9      	beq.n	8000d8e <__lesf2+0x36>
 8000dba:	e7ed      	b.n	8000d98 <__lesf2+0x40>
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d1e9      	bne.n	8000d94 <__lesf2+0x3c>
 8000dc0:	e7ea      	b.n	8000d98 <__lesf2+0x40>
 8000dc2:	42a2      	cmp	r2, r4
 8000dc4:	dc06      	bgt.n	8000dd4 <__lesf2+0x7c>
 8000dc6:	dbdf      	blt.n	8000d88 <__lesf2+0x30>
 8000dc8:	42ae      	cmp	r6, r5
 8000dca:	d803      	bhi.n	8000dd4 <__lesf2+0x7c>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	42ae      	cmp	r6, r5
 8000dd0:	d3da      	bcc.n	8000d88 <__lesf2+0x30>
 8000dd2:	e7dc      	b.n	8000d8e <__lesf2+0x36>
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4249      	negs	r1, r1
 8000dd8:	4308      	orrs	r0, r1
 8000dda:	e7d8      	b.n	8000d8e <__lesf2+0x36>

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b510      	push	{r4, lr}
 8000dde:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000de0:	f001 f82c 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8000de4:	21fa      	movs	r1, #250	; 0xfa
 8000de6:	0089      	lsls	r1, r1, #2
 8000de8:	f7ff f996 	bl	8000118 <__udivsi3>
 8000dec:	f000 fad6 	bl	800139c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000df0:	2001      	movs	r0, #1
 8000df2:	2200      	movs	r2, #0
 8000df4:	0021      	movs	r1, r4
 8000df6:	4240      	negs	r0, r0
 8000df8:	f000 fa92 	bl	8001320 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	bd10      	pop	{r4, pc}

08000e00 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	2110      	movs	r1, #16
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_Init+0x1c>)
{
 8000e04:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e06:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e08:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	f7ff ffe5 	bl	8000ddc <HAL_InitTick>
  HAL_MspInit();
 8000e12:	f002 f9e1 	bl	80031d8 <HAL_MspInit>
}
 8000e16:	2000      	movs	r0, #0
 8000e18:	bd10      	pop	{r4, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e20:	4a02      	ldr	r2, [pc, #8]	; (8000e2c <HAL_IncTick+0xc>)
 8000e22:	6813      	ldr	r3, [r2, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	4770      	bx	lr
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000288 	.word	0x20000288

08000e30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e30:	4b01      	ldr	r3, [pc, #4]	; (8000e38 <HAL_GetTick+0x8>)
 8000e32:	6818      	ldr	r0, [r3, #0]
}
 8000e34:	4770      	bx	lr
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	20000288 	.word	0x20000288

08000e3c <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000e3c:	2300      	movs	r3, #0
{
 8000e3e:	b570      	push	{r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e40:	6802      	ldr	r2, [r0, #0]
{
 8000e42:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000e44:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e46:	6891      	ldr	r1, [r2, #8]
 8000e48:	3303      	adds	r3, #3
{
 8000e4a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d031      	beq.n	8000eb6 <ADC_Enable+0x7a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000e52:	6891      	ldr	r1, [r2, #8]
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <ADC_Enable+0x9c>)
 8000e56:	4219      	tst	r1, r3
 8000e58:	d122      	bne.n	8000ea0 <ADC_Enable+0x64>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	6893      	ldr	r3, [r2, #8]
 8000e5e:	430b      	orrs	r3, r1
 8000e60:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <ADC_Enable+0xa0>)
 8000e64:	491e      	ldr	r1, [pc, #120]	; (8000ee0 <ADC_Enable+0xa4>)
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	f7ff f956 	bl	8000118 <__udivsi3>
 8000e6c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000e6e:	9b01      	ldr	r3, [sp, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000e7a:	9b01      	ldr	r3, [sp, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f9      	bne.n	8000e74 <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e80:	f7ff ffd6 	bl	8000e30 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e84:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000e86:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e88:	e004      	b.n	8000e94 <ADC_Enable+0x58>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e8a:	f7ff ffd1 	bl	8000e30 <HAL_GetTick>
 8000e8e:	1b80      	subs	r0, r0, r6
 8000e90:	2802      	cmp	r0, #2
 8000e92:	d818      	bhi.n	8000ec6 <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	421d      	tst	r5, r3
 8000e9a:	d0f6      	beq.n	8000e8a <ADC_Enable+0x4e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	e008      	b.n	8000eb2 <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea0:	2210      	movs	r2, #16
      return HAL_ERROR;
 8000ea2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000eac:	3a0f      	subs	r2, #15
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	64a3      	str	r3, [r4, #72]	; 0x48
}
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000eb6:	6811      	ldr	r1, [r2, #0]
 8000eb8:	420b      	tst	r3, r1
 8000eba:	d1ef      	bne.n	8000e9c <ADC_Enable+0x60>
 8000ebc:	68d3      	ldr	r3, [r2, #12]
 8000ebe:	041b      	lsls	r3, r3, #16
 8000ec0:	d5c7      	bpl.n	8000e52 <ADC_Enable+0x16>
  return HAL_OK;
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	e7f5      	b.n	8000eb2 <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000eca:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ed2:	431d      	orrs	r5, r3
 8000ed4:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000ed6:	e7ec      	b.n	8000eb2 <ADC_Enable+0x76>
 8000ed8:	80000017 	.word	0x80000017
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	000f4240 	.word	0x000f4240

08000ee4 <HAL_ADC_Init>:
{
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000ee8:	d100      	bne.n	8000eec <HAL_ADC_Init+0x8>
 8000eea:	e080      	b.n	8000fee <HAL_ADC_Init+0x10a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d067      	beq.n	8000fc2 <HAL_ADC_Init+0xde>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ef4:	06db      	lsls	r3, r3, #27
 8000ef6:	d45e      	bmi.n	8000fb6 <HAL_ADC_Init+0xd2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ef8:	2004      	movs	r0, #4
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f00:	d159      	bne.n	8000fb6 <HAL_ADC_Init+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f04:	4948      	ldr	r1, [pc, #288]	; (8001028 <HAL_ADC_Init+0x144>)
 8000f06:	400a      	ands	r2, r1
 8000f08:	3106      	adds	r1, #6
 8000f0a:	31ff      	adds	r1, #255	; 0xff
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f10:	2203      	movs	r2, #3
 8000f12:	6899      	ldr	r1, [r3, #8]
 8000f14:	400a      	ands	r2, r1
 8000f16:	2a01      	cmp	r2, #1
 8000f18:	d059      	beq.n	8000fce <HAL_ADC_Init+0xea>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f1a:	2118      	movs	r1, #24
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	438a      	bics	r2, r1
 8000f20:	68a1      	ldr	r1, [r4, #8]
 8000f22:	430a      	orrs	r2, r1
 8000f24:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	6861      	ldr	r1, [r4, #4]
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	0892      	lsrs	r2, r2, #2
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	493d      	ldr	r1, [pc, #244]	; (800102c <HAL_ADC_Init+0x148>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000f36:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f38:	400a      	ands	r2, r1
 8000f3a:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000f3c:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000f3e:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000f40:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000f42:	69e2      	ldr	r2, [r4, #28]
 8000f44:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000f46:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000f48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f4a:	3a01      	subs	r2, #1
 8000f4c:	1e55      	subs	r5, r2, #1
 8000f4e:	41aa      	sbcs	r2, r5
 8000f50:	0315      	lsls	r5, r2, #12
 8000f52:	68e2      	ldr	r2, [r4, #12]
 8000f54:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000f56:	6922      	ldr	r2, [r4, #16]
 8000f58:	4339      	orrs	r1, r7
 8000f5a:	2a02      	cmp	r2, #2
 8000f5c:	d059      	beq.n	8001012 <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000f5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f60:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000f62:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f64:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000f66:	432a      	orrs	r2, r5
 8000f68:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f6a:	2901      	cmp	r1, #1
 8000f6c:	d04b      	beq.n	8001006 <HAL_ADC_Init+0x122>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f6e:	20c2      	movs	r0, #194	; 0xc2
 8000f70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000f72:	30ff      	adds	r0, #255	; 0xff
 8000f74:	4281      	cmp	r1, r0
 8000f76:	d002      	beq.n	8000f7e <HAL_ADC_Init+0x9a>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000f7a:	4301      	orrs	r1, r0
 8000f7c:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f7e:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f80:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f82:	4311      	orrs	r1, r2
 8000f84:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	0549      	lsls	r1, r1, #21
 8000f8a:	428d      	cmp	r5, r1
 8000f8c:	d026      	beq.n	8000fdc <HAL_ADC_Init+0xf8>
 8000f8e:	1e69      	subs	r1, r5, #1
 8000f90:	2906      	cmp	r1, #6
 8000f92:	d923      	bls.n	8000fdc <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	4926      	ldr	r1, [pc, #152]	; (8001030 <HAL_ADC_Init+0x14c>)
 8000f98:	400b      	ands	r3, r1
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d029      	beq.n	8000ff2 <HAL_ADC_Init+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8000f9e:	2212      	movs	r2, #18
 8000fa0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8000fa2:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000fa4:	4393      	bics	r3, r2
 8000fa6:	3a02      	subs	r2, #2
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fae:	3a0f      	subs	r2, #15
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	64a3      	str	r3, [r4, #72]	; 0x48
 8000fb4:	e004      	b.n	8000fc0 <HAL_ADC_Init+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fb6:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 8000fb8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 8000fc2:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc4:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8000fc6:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000fc8:	f002 f928 	bl	800321c <HAL_ADC_MspInit>
 8000fcc:	e791      	b.n	8000ef2 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000fce:	6819      	ldr	r1, [r3, #0]
 8000fd0:	420a      	tst	r2, r1
 8000fd2:	d1ae      	bne.n	8000f32 <HAL_ADC_Init+0x4e>
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	0412      	lsls	r2, r2, #16
 8000fd8:	d59f      	bpl.n	8000f1a <HAL_ADC_Init+0x36>
 8000fda:	e7aa      	b.n	8000f32 <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000fdc:	2107      	movs	r1, #7
 8000fde:	6958      	ldr	r0, [r3, #20]
 8000fe0:	4388      	bics	r0, r1
 8000fe2:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000fe4:	6958      	ldr	r0, [r3, #20]
 8000fe6:	4029      	ands	r1, r5
 8000fe8:	4301      	orrs	r1, r0
 8000fea:	6159      	str	r1, [r3, #20]
 8000fec:	e7d2      	b.n	8000f94 <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 8000fee:	2001      	movs	r0, #1
 8000ff0:	e7e6      	b.n	8000fc0 <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff2:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff6:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000ff8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffa:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000ffc:	4393      	bics	r3, r2
 8000ffe:	3a02      	subs	r2, #2
 8001000:	4313      	orrs	r3, r2
 8001002:	6463      	str	r3, [r4, #68]	; 0x44
 8001004:	e7dc      	b.n	8000fc0 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001006:	2e00      	cmp	r6, #0
 8001008:	d105      	bne.n	8001016 <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0249      	lsls	r1, r1, #9
 800100e:	430a      	orrs	r2, r1
 8001010:	e7ad      	b.n	8000f6e <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001012:	2004      	movs	r0, #4
 8001014:	e7a3      	b.n	8000f5e <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001016:	2520      	movs	r5, #32
 8001018:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800101a:	4328      	orrs	r0, r5
 800101c:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001020:	4301      	orrs	r1, r0
 8001022:	64a1      	str	r1, [r4, #72]	; 0x48
 8001024:	e7a3      	b.n	8000f6e <HAL_ADC_Init+0x8a>
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	fffffefd 	.word	0xfffffefd
 800102c:	fffe0219 	.word	0xfffe0219
 8001030:	833fffe7 	.word	0x833fffe7

08001034 <HAL_ADC_Start_DMA>:
{
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	000d      	movs	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001038:	6801      	ldr	r1, [r0, #0]
{
 800103a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800103c:	688b      	ldr	r3, [r1, #8]
{
 800103e:	0016      	movs	r6, r2
    tmp_hal_status = HAL_BUSY;
 8001040:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001042:	075b      	lsls	r3, r3, #29
 8001044:	d500      	bpl.n	8001048 <HAL_ADC_Start_DMA+0x14>
}
 8001046:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	5ce2      	ldrb	r2, [r4, r3]
 800104c:	2a01      	cmp	r2, #1
 800104e:	d0fa      	beq.n	8001046 <HAL_ADC_Start_DMA+0x12>
 8001050:	2201      	movs	r2, #1
 8001052:	54e2      	strb	r2, [r4, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001054:	69e3      	ldr	r3, [r4, #28]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d127      	bne.n	80010aa <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 800105a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800105c:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <HAL_ADC_Start_DMA+0x84>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800105e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001060:	401a      	ands	r2, r3
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4313      	orrs	r3, r2
 8001068:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800106a:	2240      	movs	r2, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800106c:	2300      	movs	r3, #0
 800106e:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8001070:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001074:	3a30      	subs	r2, #48	; 0x30
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001076:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_ADC_Start_DMA+0x8c>)
 800107a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_ADC_Start_DMA+0x90>)
 800107e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001080:	231c      	movs	r3, #28
 8001082:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001084:	684b      	ldr	r3, [r1, #4]
 8001086:	4313      	orrs	r3, r2
 8001088:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800108a:	68cb      	ldr	r3, [r1, #12]
 800108c:	3a0f      	subs	r2, #15
 800108e:	4313      	orrs	r3, r2
 8001090:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001092:	002a      	movs	r2, r5
 8001094:	3140      	adds	r1, #64	; 0x40
 8001096:	0033      	movs	r3, r6
 8001098:	f000 f9e8 	bl	800146c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800109c:	2104      	movs	r1, #4
 800109e:	6822      	ldr	r2, [r4, #0]
 80010a0:	2000      	movs	r0, #0
 80010a2:	6893      	ldr	r3, [r2, #8]
 80010a4:	430b      	orrs	r3, r1
 80010a6:	6093      	str	r3, [r2, #8]
 80010a8:	e7cd      	b.n	8001046 <HAL_ADC_Start_DMA+0x12>
      tmp_hal_status = ADC_Enable(hadc);
 80010aa:	0020      	movs	r0, r4
 80010ac:	f7ff fec6 	bl	8000e3c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d1c8      	bne.n	8001046 <HAL_ADC_Start_DMA+0x12>
 80010b4:	6821      	ldr	r1, [r4, #0]
 80010b6:	e7d0      	b.n	800105a <HAL_ADC_Start_DMA+0x26>
 80010b8:	fffff0fe 	.word	0xfffff0fe
 80010bc:	080010cd 	.word	0x080010cd
 80010c0:	08001141 	.word	0x08001141
 80010c4:	08001151 	.word	0x08001151

080010c8 <HAL_ADC_ConvCpltCallback>:
 80010c8:	4770      	bx	lr
 80010ca:	46c0      	nop			; (mov r8, r8)

080010cc <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010cc:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80010d0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010d4:	4211      	tst	r1, r2
 80010d6:	d122      	bne.n	800111e <ADC_DMAConvCplt+0x52>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e0:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010e2:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	0109      	lsls	r1, r1, #4
 80010e8:	68d0      	ldr	r0, [r2, #12]
 80010ea:	4208      	tst	r0, r1
 80010ec:	d113      	bne.n	8001116 <ADC_DMAConvCplt+0x4a>
 80010ee:	6a19      	ldr	r1, [r3, #32]
 80010f0:	2900      	cmp	r1, #0
 80010f2:	d110      	bne.n	8001116 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010f4:	6811      	ldr	r1, [r2, #0]
 80010f6:	0709      	lsls	r1, r1, #28
 80010f8:	d50d      	bpl.n	8001116 <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010fa:	6891      	ldr	r1, [r2, #8]
 80010fc:	0749      	lsls	r1, r1, #29
 80010fe:	d412      	bmi.n	8001126 <ADC_DMAConvCplt+0x5a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001100:	200c      	movs	r0, #12
 8001102:	6851      	ldr	r1, [r2, #4]
 8001104:	4381      	bics	r1, r0
 8001106:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800110a:	490b      	ldr	r1, [pc, #44]	; (8001138 <ADC_DMAConvCplt+0x6c>)
 800110c:	400a      	ands	r2, r1
 800110e:	3104      	adds	r1, #4
 8001110:	31ff      	adds	r1, #255	; 0xff
 8001112:	430a      	orrs	r2, r1
 8001114:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001116:	0018      	movs	r0, r3
 8001118:	f7ff ffd6 	bl	80010c8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800111c:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800111e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4798      	blx	r3
}
 8001124:	e7fa      	b.n	800111c <ADC_DMAConvCplt+0x50>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001126:	2120      	movs	r1, #32
 8001128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800112a:	430a      	orrs	r2, r1
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001130:	391f      	subs	r1, #31
 8001132:	430a      	orrs	r2, r1
 8001134:	649a      	str	r2, [r3, #72]	; 0x48
 8001136:	e7ee      	b.n	8001116 <ADC_DMAConvCplt+0x4a>
 8001138:	fffffefe 	.word	0xfffffefe

0800113c <HAL_ADC_ConvHalfCpltCallback>:
 800113c:	4770      	bx	lr
 800113e:	46c0      	nop			; (mov r8, r8)

08001140 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001140:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001142:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001144:	f7ff fffa 	bl	800113c <HAL_ADC_ConvHalfCpltCallback>
}
 8001148:	bd10      	pop	{r4, pc}
 800114a:	46c0      	nop			; (mov r8, r8)

0800114c <HAL_ADC_ErrorCallback>:
}
 800114c:	4770      	bx	lr
 800114e:	46c0      	nop			; (mov r8, r8)

08001150 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001150:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001152:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001154:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001156:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001158:	4313      	orrs	r3, r2
 800115a:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800115c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800115e:	3a3c      	subs	r2, #60	; 0x3c
 8001160:	4313      	orrs	r3, r2
 8001162:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001164:	f7ff fff2 	bl	800114c <HAL_ADC_ErrorCallback>
}
 8001168:	bd10      	pop	{r4, pc}
 800116a:	46c0      	nop			; (mov r8, r8)

0800116c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800116c:	2300      	movs	r3, #0
{
 800116e:	b570      	push	{r4, r5, r6, lr}
 8001170:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001172:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001174:	3340      	adds	r3, #64	; 0x40
 8001176:	5cc2      	ldrb	r2, [r0, r3]
{
 8001178:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800117a:	2002      	movs	r0, #2
 800117c:	2a01      	cmp	r2, #1
 800117e:	d02b      	beq.n	80011d8 <HAL_ADC_ConfigChannel+0x6c>
 8001180:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001182:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 8001184:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	689d      	ldr	r5, [r3, #8]
 800118a:	076d      	lsls	r5, r5, #29
 800118c:	d426      	bmi.n	80011dc <HAL_ADC_ConfigChannel+0x70>
    if (sConfig->Rank != ADC_RANK_NONE)
 800118e:	4d33      	ldr	r5, [pc, #204]	; (800125c <HAL_ADC_ConfigChannel+0xf0>)
 8001190:	684e      	ldr	r6, [r1, #4]
 8001192:	42ae      	cmp	r6, r5
 8001194:	d035      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x96>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001196:	680d      	ldr	r5, [r1, #0]
 8001198:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800119a:	40aa      	lsls	r2, r5
 800119c:	4332      	orrs	r2, r6
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	0552      	lsls	r2, r2, #21
 80011a4:	4290      	cmp	r0, r2
 80011a6:	d00f      	beq.n	80011c8 <HAL_ADC_ConfigChannel+0x5c>
 80011a8:	3801      	subs	r0, #1
 80011aa:	2806      	cmp	r0, #6
 80011ac:	d90c      	bls.n	80011c8 <HAL_ADC_ConfigChannel+0x5c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80011ae:	2207      	movs	r2, #7
 80011b0:	6888      	ldr	r0, [r1, #8]
 80011b2:	6959      	ldr	r1, [r3, #20]
 80011b4:	4011      	ands	r1, r2
 80011b6:	4288      	cmp	r0, r1
 80011b8:	d006      	beq.n	80011c8 <HAL_ADC_ConfigChannel+0x5c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80011ba:	6959      	ldr	r1, [r3, #20]
 80011bc:	4391      	bics	r1, r2
 80011be:	6159      	str	r1, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80011c0:	6959      	ldr	r1, [r3, #20]
 80011c2:	4002      	ands	r2, r0
 80011c4:	430a      	orrs	r2, r1
 80011c6:	615a      	str	r2, [r3, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011c8:	002b      	movs	r3, r5
 80011ca:	3b10      	subs	r3, #16
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d90e      	bls.n	80011ee <HAL_ADC_ConfigChannel+0x82>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	54e2      	strb	r2, [r4, r3]
}
 80011d8:	b002      	add	sp, #8
 80011da:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011dc:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 80011de:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011e2:	4313      	orrs	r3, r2
 80011e4:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	54e2      	strb	r2, [r4, r3]
  return tmp_hal_status;
 80011ec:	e7f4      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x6c>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_ADC_ConfigChannel+0xf4>)
 80011f0:	6819      	ldr	r1, [r3, #0]
 80011f2:	2d10      	cmp	r5, #16
 80011f4:	d018      	beq.n	8001228 <HAL_ADC_ConfigChannel+0xbc>
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	03d2      	lsls	r2, r2, #15
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fe:	2000      	movs	r0, #0
 8001200:	e7f1      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001202:	6809      	ldr	r1, [r1, #0]
 8001204:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001206:	408a      	lsls	r2, r1
 8001208:	4390      	bics	r0, r2
 800120a:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800120c:	000b      	movs	r3, r1
 800120e:	3b10      	subs	r3, #16
 8001210:	2b01      	cmp	r3, #1
 8001212:	d8dd      	bhi.n	80011d0 <HAL_ADC_ConfigChannel+0x64>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_ADC_ConfigChannel+0xf4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2910      	cmp	r1, #16
 800121a:	d01d      	beq.n	8001258 <HAL_ADC_ConfigChannel+0xec>
 800121c:	4a11      	ldr	r2, [pc, #68]	; (8001264 <HAL_ADC_ConfigChannel+0xf8>)
 800121e:	4013      	ands	r3, r2
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <HAL_ADC_ConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001222:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e7d4      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	0412      	lsls	r2, r2, #16
 800122c:	430a      	orrs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_ADC_ConfigChannel+0xfc>)
 8001232:	490e      	ldr	r1, [pc, #56]	; (800126c <HAL_ADC_ConfigChannel+0x100>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f7fe ff6f 	bl	8000118 <__udivsi3>
 800123a:	0083      	lsls	r3, r0, #2
 800123c:	1818      	adds	r0, r3, r0
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001242:	9b01      	ldr	r3, [sp, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0c3      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 8001248:	9b01      	ldr	r3, [sp, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800124e:	9b01      	ldr	r3, [sp, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f9      	bne.n	8001248 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001254:	2000      	movs	r0, #0
 8001256:	e7bc      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001258:	4a05      	ldr	r2, [pc, #20]	; (8001270 <HAL_ADC_ConfigChannel+0x104>)
 800125a:	e7e0      	b.n	800121e <HAL_ADC_ConfigChannel+0xb2>
 800125c:	00001001 	.word	0x00001001
 8001260:	40012708 	.word	0x40012708
 8001264:	ffbfffff 	.word	0xffbfffff
 8001268:	20000000 	.word	0x20000000
 800126c:	000f4240 	.word	0x000f4240
 8001270:	ff7fffff 	.word	0xff7fffff

08001274 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001274:	2340      	movs	r3, #64	; 0x40
{
 8001276:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001278:	5cc2      	ldrb	r2, [r0, r3]
{
 800127a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800127c:	2002      	movs	r0, #2
 800127e:	2a01      	cmp	r2, #1
 8001280:	d033      	beq.n	80012ea <HAL_ADCEx_Calibration_Start+0x76>
 8001282:	2201      	movs	r2, #1
 8001284:	54e2      	strb	r2, [r4, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	3202      	adds	r2, #2
 800128a:	6899      	ldr	r1, [r3, #8]
 800128c:	400a      	ands	r2, r1
 800128e:	2a01      	cmp	r2, #1
 8001290:	d02c      	beq.n	80012ec <HAL_ADCEx_Calibration_Start+0x78>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001292:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001294:	4921      	ldr	r1, [pc, #132]	; (800131c <HAL_ADCEx_Calibration_Start+0xa8>)
 8001296:	400a      	ands	r2, r1
 8001298:	3106      	adds	r1, #6
 800129a:	31ff      	adds	r1, #255	; 0xff
 800129c:	430a      	orrs	r2, r1
 800129e:	6462      	str	r2, [r4, #68]	; 0x44
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80012a0:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	3101      	adds	r1, #1
 80012a6:	438a      	bics	r2, r1
 80012a8:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	6899      	ldr	r1, [r3, #8]
 80012ae:	0612      	lsls	r2, r2, #24
 80012b0:	430a      	orrs	r2, r1
 80012b2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80012b4:	f7ff fdbc 	bl	8000e30 <HAL_GetTick>
 80012b8:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80012ba:	e004      	b.n	80012c6 <HAL_ADCEx_Calibration_Start+0x52>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012bc:	f7ff fdb8 	bl	8000e30 <HAL_GetTick>
 80012c0:	1b40      	subs	r0, r0, r5
 80012c2:	2802      	cmp	r0, #2
 80012c4:	d81e      	bhi.n	8001304 <HAL_ADCEx_Calibration_Start+0x90>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	dbf6      	blt.n	80012bc <HAL_ADCEx_Calibration_Start+0x48>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80012ce:	2203      	movs	r2, #3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d0:	2000      	movs	r0, #0
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80012d2:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80012d4:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80012d6:	430e      	orrs	r6, r1
 80012d8:	60de      	str	r6, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012dc:	4393      	bics	r3, r2
 80012de:	3a02      	subs	r2, #2
 80012e0:	4313      	orrs	r3, r2
 80012e2:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2340      	movs	r3, #64	; 0x40
 80012e8:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012ec:	6819      	ldr	r1, [r3, #0]
 80012ee:	420a      	tst	r2, r1
 80012f0:	d102      	bne.n	80012f8 <HAL_ADCEx_Calibration_Start+0x84>
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	0412      	lsls	r2, r2, #16
 80012f6:	d5cc      	bpl.n	8001292 <HAL_ADCEx_Calibration_Start+0x1e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f8:	2220      	movs	r2, #32
 80012fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80012fc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012fe:	4313      	orrs	r3, r2
 8001300:	6463      	str	r3, [r4, #68]	; 0x44
 8001302:	e7ef      	b.n	80012e4 <HAL_ADCEx_Calibration_Start+0x70>
        ADC_STATE_CLR_SET(hadc->State,
 8001304:	2212      	movs	r2, #18
 8001306:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001308:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800130a:	4393      	bics	r3, r2
 800130c:	3a02      	subs	r2, #2
 800130e:	4313      	orrs	r3, r2
 8001310:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001312:	2200      	movs	r2, #0
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8001318:	e7e7      	b.n	80012ea <HAL_ADCEx_Calibration_Start+0x76>
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	fffffefd 	.word	0xfffffefd

08001320 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001320:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001322:	2800      	cmp	r0, #0
 8001324:	db14      	blt.n	8001350 <HAL_NVIC_SetPriority+0x30>
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001328:	2403      	movs	r4, #3
 800132a:	4694      	mov	ip, r2
 800132c:	22ff      	movs	r2, #255	; 0xff
 800132e:	0883      	lsrs	r3, r0, #2
 8001330:	4020      	ands	r0, r4
 8001332:	0014      	movs	r4, r2
 8001334:	26c0      	movs	r6, #192	; 0xc0
 8001336:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001338:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133a:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133c:	400a      	ands	r2, r1
 800133e:	4082      	lsls	r2, r0
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001344:	00b6      	lsls	r6, r6, #2
 8001346:	599d      	ldr	r5, [r3, r6]
 8001348:	43a5      	bics	r5, r4
 800134a:	432a      	orrs	r2, r5
 800134c:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800134e:	bd70      	pop	{r4, r5, r6, pc}
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001352:	24ff      	movs	r4, #255	; 0xff
 8001354:	4694      	mov	ip, r2
 8001356:	230f      	movs	r3, #15
 8001358:	2203      	movs	r2, #3
 800135a:	b2c0      	uxtb	r0, r0
 800135c:	4003      	ands	r3, r0
 800135e:	4010      	ands	r0, r2
 8001360:	0022      	movs	r2, r4
 8001362:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001364:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001366:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001368:	400c      	ands	r4, r1
 800136a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800136c:	3b08      	subs	r3, #8
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4463      	add	r3, ip
 8001374:	69dd      	ldr	r5, [r3, #28]
 8001376:	4395      	bics	r5, r2
 8001378:	432c      	orrs	r4, r5
 800137a:	61dc      	str	r4, [r3, #28]
 800137c:	e7e7      	b.n	800134e <HAL_NVIC_SetPriority+0x2e>
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001388:	231f      	movs	r3, #31
 800138a:	4018      	ands	r0, r3
 800138c:	3b1e      	subs	r3, #30
 800138e:	4083      	lsls	r3, r0
 8001390:	4a01      	ldr	r2, [pc, #4]	; (8001398 <HAL_NVIC_EnableIRQ+0x10>)
 8001392:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001394:	4770      	bx	lr
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	e000e100 	.word	0xe000e100

0800139c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <HAL_SYSTICK_Config+0x2c>)
 800139e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d80e      	bhi.n	80013c4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a6:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a8:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ac:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ae:	6a03      	ldr	r3, [r0, #32]
 80013b0:	0609      	lsls	r1, r1, #24
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	430b      	orrs	r3, r1
 80013b8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ba:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013be:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c0:	3307      	adds	r3, #7
 80013c2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013c4:	4770      	bx	lr
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	00ffffff 	.word	0x00ffffff
 80013cc:	e000e010 	.word	0xe000e010
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <HAL_SYSTICK_CLKSourceConfig+0x18>)
 80013d6:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013d8:	2804      	cmp	r0, #4
 80013da:	d003      	beq.n	80013e4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013dc:	2104      	movs	r1, #4
 80013de:	438b      	bics	r3, r1
 80013e0:	6013      	str	r3, [r2, #0]
  }
}
 80013e2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013e4:	4318      	orrs	r0, r3
 80013e6:	6010      	str	r0, [r2, #0]
 80013e8:	e7fb      	b.n	80013e2 <HAL_SYSTICK_CLKSourceConfig+0xe>
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80013f0:	4770      	bx	lr
 80013f2:	46c0      	nop			; (mov r8, r8)

080013f4 <HAL_SYSTICK_IRQHandler>:
{
 80013f4:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80013f6:	f7ff fffb 	bl	80013f0 <HAL_SYSTICK_Callback>
}
 80013fa:	bd10      	pop	{r4, pc}

080013fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80013fc:	b570      	push	{r4, r5, r6, lr}
 80013fe:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001400:	d02b      	beq.n	800145a <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001402:	2521      	movs	r5, #33	; 0x21
 8001404:	2302      	movs	r3, #2
 8001406:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001408:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800140a:	4a15      	ldr	r2, [pc, #84]	; (8001460 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 800140c:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800140e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001410:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001412:	6863      	ldr	r3, [r4, #4]
 8001414:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001416:	68e1      	ldr	r1, [r4, #12]
 8001418:	430b      	orrs	r3, r1
 800141a:	6921      	ldr	r1, [r4, #16]
 800141c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141e:	6961      	ldr	r1, [r4, #20]
 8001420:	430b      	orrs	r3, r1
 8001422:	69a1      	ldr	r1, [r4, #24]
 8001424:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001426:	69e1      	ldr	r1, [r4, #28]
 8001428:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800142a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800142c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_DMA_Init+0x68>)
 8001430:	2114      	movs	r1, #20
 8001432:	469c      	mov	ip, r3
 8001434:	4460      	add	r0, ip
 8001436:	f7fe fe6f 	bl	8000118 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 800143c:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 800143e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8001440:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001442:	0080      	lsls	r0, r0, #2
 8001444:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001446:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 8001448:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800144a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800144c:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800144e:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001450:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001452:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001454:	321f      	adds	r2, #31
 8001456:	54a3      	strb	r3, [r4, r2]
}  
 8001458:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	e7fc      	b.n	8001458 <HAL_DMA_Init+0x5c>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	ffffc00f 	.word	0xffffc00f
 8001464:	bffdfff8 	.word	0xbffdfff8
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_DMA_Start_IT>:
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800146e:	2420      	movs	r4, #32
 8001470:	5d05      	ldrb	r5, [r0, r4]
 8001472:	2602      	movs	r6, #2
 8001474:	2d01      	cmp	r5, #1
 8001476:	d008      	beq.n	800148a <HAL_DMA_Start_IT+0x1e>
 8001478:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800147a:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 800147c:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 800147e:	5dc5      	ldrb	r5, [r0, r7]
 8001480:	b2ed      	uxtb	r5, r5
 8001482:	2d01      	cmp	r5, #1
 8001484:	d003      	beq.n	800148e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001486:	2300      	movs	r3, #0
 8001488:	5503      	strb	r3, [r0, r4]
} 
 800148a:	0030      	movs	r0, r6
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148e:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001490:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001492:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001494:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001496:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001498:	6826      	ldr	r6, [r4, #0]
 800149a:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800149c:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800149e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014a0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80014a2:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80014a4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014a6:	6843      	ldr	r3, [r0, #4]
 80014a8:	2b10      	cmp	r3, #16
 80014aa:	d00e      	beq.n	80014ca <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 80014ac:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80014ae:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80014b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00c      	beq.n	80014d0 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014b6:	220e      	movs	r2, #14
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80014be:	2201      	movs	r2, #1
 80014c0:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80014c2:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80014c4:	4313      	orrs	r3, r2
 80014c6:	6023      	str	r3, [r4, #0]
 80014c8:	e7df      	b.n	800148a <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 80014ca:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80014cc:	60e1      	str	r1, [r4, #12]
 80014ce:	e7ef      	b.n	80014b0 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80014d0:	220a      	movs	r2, #10
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	3a06      	subs	r2, #6
 80014dc:	4393      	bics	r3, r2
 80014de:	6023      	str	r3, [r4, #0]
 80014e0:	e7ed      	b.n	80014be <HAL_DMA_Start_IT+0x52>
 80014e2:	46c0      	nop			; (mov r8, r8)

080014e4 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014e4:	2321      	movs	r3, #33	; 0x21
{  
 80014e6:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014e8:	5cc2      	ldrb	r2, [r0, r3]
 80014ea:	2a02      	cmp	r2, #2
 80014ec:	d003      	beq.n	80014f6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	3b1d      	subs	r3, #29
 80014f0:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
}
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014f6:	240e      	movs	r4, #14
 80014f8:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014fa:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014fc:	6811      	ldr	r1, [r2, #0]
 80014fe:	43a1      	bics	r1, r4
 8001500:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001502:	2101      	movs	r1, #1
 8001504:	6814      	ldr	r4, [r2, #0]
 8001506:	438c      	bics	r4, r1
 8001508:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800150a:	000c      	movs	r4, r1
 800150c:	40ac      	lsls	r4, r5
 800150e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001510:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001514:	2200      	movs	r2, #0
 8001516:	2320      	movs	r3, #32
 8001518:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 800151a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8001520:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2000      	movs	r0, #0
 8001524:	e7e6      	b.n	80014f4 <HAL_DMA_Abort_IT+0x10>
 8001526:	2000      	movs	r0, #0
 8001528:	e7e4      	b.n	80014f4 <HAL_DMA_Abort_IT+0x10>
 800152a:	46c0      	nop			; (mov r8, r8)

0800152c <HAL_DMA_IRQHandler>:
{
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800152e:	2504      	movs	r5, #4
 8001530:	002e      	movs	r6, r5
 8001532:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001534:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001536:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001538:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800153a:	6801      	ldr	r1, [r0, #0]
 800153c:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800153e:	4216      	tst	r6, r2
 8001540:	d00d      	beq.n	800155e <HAL_DMA_IRQHandler+0x32>
 8001542:	423d      	tst	r5, r7
 8001544:	d00b      	beq.n	800155e <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001546:	680b      	ldr	r3, [r1, #0]
 8001548:	069b      	lsls	r3, r3, #26
 800154a:	d402      	bmi.n	8001552 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800154c:	680b      	ldr	r3, [r1, #0]
 800154e:	43ab      	bics	r3, r5
 8001550:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001552:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001554:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001556:	2b00      	cmp	r3, #0
 8001558:	d000      	beq.n	800155c <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 800155a:	4798      	blx	r3
}  
 800155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800155e:	2502      	movs	r5, #2
 8001560:	002e      	movs	r6, r5
 8001562:	409e      	lsls	r6, r3
 8001564:	4216      	tst	r6, r2
 8001566:	d014      	beq.n	8001592 <HAL_DMA_IRQHandler+0x66>
 8001568:	423d      	tst	r5, r7
 800156a:	d012      	beq.n	8001592 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800156c:	680b      	ldr	r3, [r1, #0]
 800156e:	069b      	lsls	r3, r3, #26
 8001570:	d406      	bmi.n	8001580 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001572:	220a      	movs	r2, #10
 8001574:	680b      	ldr	r3, [r1, #0]
 8001576:	4393      	bics	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800157a:	2321      	movs	r3, #33	; 0x21
 800157c:	3a09      	subs	r2, #9
 800157e:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8001580:	2320      	movs	r3, #32
 8001582:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001584:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 8001586:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8001588:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0e6      	beq.n	800155c <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 800158e:	4798      	blx	r3
 8001590:	e7e4      	b.n	800155c <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001592:	2508      	movs	r5, #8
 8001594:	002e      	movs	r6, r5
 8001596:	409e      	lsls	r6, r3
 8001598:	4232      	tst	r2, r6
 800159a:	d0df      	beq.n	800155c <HAL_DMA_IRQHandler+0x30>
 800159c:	423d      	tst	r5, r7
 800159e:	d0dd      	beq.n	800155c <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015a0:	680a      	ldr	r2, [r1, #0]
 80015a2:	3506      	adds	r5, #6
 80015a4:	43aa      	bics	r2, r5
 80015a6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015a8:	2201      	movs	r2, #1
 80015aa:	0011      	movs	r1, r2
 80015ac:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 80015ae:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015b0:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015b2:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80015b4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 80015b6:	2200      	movs	r2, #0
 80015b8:	3b01      	subs	r3, #1
 80015ba:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 80015bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0cc      	beq.n	800155c <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 80015c2:	4798      	blx	r3
 80015c4:	e7ca      	b.n	800155c <HAL_DMA_IRQHandler+0x30>
 80015c6:	46c0      	nop			; (mov r8, r8)

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	46de      	mov	lr, fp
 80015cc:	4657      	mov	r7, sl
 80015ce:	464e      	mov	r6, r9
 80015d0:	4645      	mov	r5, r8
 80015d2:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80015d4:	680b      	ldr	r3, [r1, #0]
{ 
 80015d6:	b085      	sub	sp, #20
 80015d8:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80015da:	469c      	mov	ip, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d100      	bne.n	80015e4 <HAL_GPIO_Init+0x1c>
 80015e2:	e0b7      	b.n	8001754 <HAL_GPIO_Init+0x18c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e4:	4b64      	ldr	r3, [pc, #400]	; (8001778 <HAL_GPIO_Init+0x1b0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e6:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e8:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 80015ea:	4b64      	ldr	r3, [pc, #400]	; (800177c <HAL_GPIO_Init+0x1b4>)
 80015ec:	4698      	mov	r8, r3
 80015ee:	e067      	b.n	80016c0 <HAL_GPIO_Init+0xf8>
      temp = GPIOx->MODER;
 80015f0:	6803      	ldr	r3, [r0, #0]
 80015f2:	0056      	lsls	r6, r2, #1
 80015f4:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80015f6:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f8:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80015fa:	40b3      	lsls	r3, r6
 80015fc:	4664      	mov	r4, ip
 80015fe:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001600:	400f      	ands	r7, r1
 8001602:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001604:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001606:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001608:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 800160a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800160c:	3f01      	subs	r7, #1
 800160e:	2f01      	cmp	r7, #1
 8001610:	d800      	bhi.n	8001614 <HAL_GPIO_Init+0x4c>
 8001612:	e081      	b.n	8001718 <HAL_GPIO_Init+0x150>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001614:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 8001616:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001618:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800161a:	68a5      	ldr	r5, [r4, #8]
 800161c:	40b5      	lsls	r5, r6
 800161e:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8001620:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	055b      	lsls	r3, r3, #21
 8001626:	4219      	tst	r1, r3
 8001628:	d046      	beq.n	80016b8 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	4653      	mov	r3, sl
 800162c:	2401      	movs	r4, #1
 800162e:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001630:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4323      	orrs	r3, r4
 8001634:	4654      	mov	r4, sl
 8001636:	61a3      	str	r3, [r4, #24]
 8001638:	69a3      	ldr	r3, [r4, #24]
 800163a:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800163c:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4023      	ands	r3, r4
 8001640:	4c4f      	ldr	r4, [pc, #316]	; (8001780 <HAL_GPIO_Init+0x1b8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001642:	4016      	ands	r6, r2
 8001644:	46a4      	mov	ip, r4
 8001646:	00b6      	lsls	r6, r6, #2
 8001648:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164a:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	9303      	str	r3, [sp, #12]
 800164e:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001650:	0893      	lsrs	r3, r2, #2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4463      	add	r3, ip
 8001656:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001658:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800165a:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165c:	42a0      	cmp	r0, r4
 800165e:	d100      	bne.n	8001662 <HAL_GPIO_Init+0x9a>
 8001660:	e07f      	b.n	8001762 <HAL_GPIO_Init+0x19a>
 8001662:	4f48      	ldr	r7, [pc, #288]	; (8001784 <HAL_GPIO_Init+0x1bc>)
 8001664:	42b8      	cmp	r0, r7
 8001666:	d100      	bne.n	800166a <HAL_GPIO_Init+0xa2>
 8001668:	e07d      	b.n	8001766 <HAL_GPIO_Init+0x19e>
 800166a:	4f47      	ldr	r7, [pc, #284]	; (8001788 <HAL_GPIO_Init+0x1c0>)
 800166c:	42b8      	cmp	r0, r7
 800166e:	d100      	bne.n	8001672 <HAL_GPIO_Init+0xaa>
 8001670:	e07c      	b.n	800176c <HAL_GPIO_Init+0x1a4>
 8001672:	4f46      	ldr	r7, [pc, #280]	; (800178c <HAL_GPIO_Init+0x1c4>)
 8001674:	42b8      	cmp	r0, r7
 8001676:	d100      	bne.n	800167a <HAL_GPIO_Init+0xb2>
 8001678:	e07b      	b.n	8001772 <HAL_GPIO_Init+0x1aa>
 800167a:	2705      	movs	r7, #5
 800167c:	40b7      	lsls	r7, r6
 800167e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001680:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8001682:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001684:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8001686:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001688:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800168a:	03cc      	lsls	r4, r1, #15
 800168c:	d45f      	bmi.n	800174e <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800168e:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8001690:	4644      	mov	r4, r8
 8001692:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8001694:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001696:	038c      	lsls	r4, r1, #14
 8001698:	d456      	bmi.n	8001748 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800169a:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 800169c:	4644      	mov	r4, r8
 800169e:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a0:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a2:	02cc      	lsls	r4, r1, #11
 80016a4:	d44d      	bmi.n	8001742 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80016a6:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80016a8:	4644      	mov	r4, r8
 80016aa:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 80016ac:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ae:	0289      	lsls	r1, r1, #10
 80016b0:	d444      	bmi.n	800173c <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80016b2:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80016b4:	4641      	mov	r1, r8
 80016b6:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80016b8:	464b      	mov	r3, r9
      }
    }
    
    position++;
 80016ba:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80016bc:	40d3      	lsrs	r3, r2
 80016be:	d049      	beq.n	8001754 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016c0:	2501      	movs	r5, #1
 80016c2:	464c      	mov	r4, r9
 80016c4:	4095      	lsls	r5, r2
 80016c6:	402c      	ands	r4, r5
 80016c8:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 80016ca:	d0f5      	beq.n	80016b8 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80016cc:	465b      	mov	r3, fp
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	2310      	movs	r3, #16
 80016d2:	000f      	movs	r7, r1
 80016d4:	439f      	bics	r7, r3
 80016d6:	003b      	movs	r3, r7
 80016d8:	9701      	str	r7, [sp, #4]
 80016da:	2f02      	cmp	r7, #2
 80016dc:	d188      	bne.n	80015f0 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80016de:	240f      	movs	r4, #15
 80016e0:	3305      	adds	r3, #5
 80016e2:	4013      	ands	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 80016e8:	08d6      	lsrs	r6, r2, #3
 80016ea:	00b6      	lsls	r6, r6, #2
 80016ec:	1986      	adds	r6, r0, r6
 80016ee:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80016f0:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80016f2:	465c      	mov	r4, fp
 80016f4:	6924      	ldr	r4, [r4, #16]
 80016f6:	409c      	lsls	r4, r3
 80016f8:	0023      	movs	r3, r4
 80016fa:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 80016fc:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80016fe:	2303      	movs	r3, #3
 8001700:	0056      	lsls	r6, r2, #1
 8001702:	40b3      	lsls	r3, r6
 8001704:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 8001706:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001708:	401f      	ands	r7, r3
 800170a:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800170c:	2703      	movs	r7, #3
 800170e:	400f      	ands	r7, r1
 8001710:	40b7      	lsls	r7, r6
 8001712:	4664      	mov	r4, ip
 8001714:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 8001716:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001718:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800171a:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800171c:	401f      	ands	r7, r3
 800171e:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001720:	68e7      	ldr	r7, [r4, #12]
 8001722:	4664      	mov	r4, ip
 8001724:	40b7      	lsls	r7, r6
 8001726:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001728:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 800172a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800172c:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800172e:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001730:	090d      	lsrs	r5, r1, #4
 8001732:	4025      	ands	r5, r4
 8001734:	4095      	lsls	r5, r2
 8001736:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 8001738:	6045      	str	r5, [r0, #4]
 800173a:	e76b      	b.n	8001614 <HAL_GPIO_Init+0x4c>
          SET_BIT(temp, iocurrent); 
 800173c:	9900      	ldr	r1, [sp, #0]
 800173e:	430b      	orrs	r3, r1
 8001740:	e7b8      	b.n	80016b4 <HAL_GPIO_Init+0xec>
          SET_BIT(temp, iocurrent); 
 8001742:	9c00      	ldr	r4, [sp, #0]
 8001744:	4323      	orrs	r3, r4
 8001746:	e7af      	b.n	80016a8 <HAL_GPIO_Init+0xe0>
          SET_BIT(temp, iocurrent); 
 8001748:	9c00      	ldr	r4, [sp, #0]
 800174a:	4323      	orrs	r3, r4
 800174c:	e7a6      	b.n	800169c <HAL_GPIO_Init+0xd4>
          SET_BIT(temp, iocurrent); 
 800174e:	9c00      	ldr	r4, [sp, #0]
 8001750:	4323      	orrs	r3, r4
 8001752:	e79d      	b.n	8001690 <HAL_GPIO_Init+0xc8>
  } 
}
 8001754:	b005      	add	sp, #20
 8001756:	bc3c      	pop	{r2, r3, r4, r5}
 8001758:	4690      	mov	r8, r2
 800175a:	4699      	mov	r9, r3
 800175c:	46a2      	mov	sl, r4
 800175e:	46ab      	mov	fp, r5
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001762:	2700      	movs	r7, #0
 8001764:	e78b      	b.n	800167e <HAL_GPIO_Init+0xb6>
 8001766:	2701      	movs	r7, #1
 8001768:	40b7      	lsls	r7, r6
 800176a:	e788      	b.n	800167e <HAL_GPIO_Init+0xb6>
 800176c:	2702      	movs	r7, #2
 800176e:	40b7      	lsls	r7, r6
 8001770:	e785      	b.n	800167e <HAL_GPIO_Init+0xb6>
 8001772:	2703      	movs	r7, #3
 8001774:	40b7      	lsls	r7, r6
 8001776:	e782      	b.n	800167e <HAL_GPIO_Init+0xb6>
 8001778:	40021000 	.word	0x40021000
 800177c:	40010400 	.word	0x40010400
 8001780:	40010000 	.word	0x40010000
 8001784:	48000400 	.word	0x48000400
 8001788:	48000800 	.word	0x48000800
 800178c:	48000c00 	.word	0x48000c00

08001790 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001790:	6900      	ldr	r0, [r0, #16]
 8001792:	4008      	ands	r0, r1
 8001794:	1e41      	subs	r1, r0, #1
 8001796:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001798:	b2c0      	uxtb	r0, r0
  }
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179c:	2a00      	cmp	r2, #0
 800179e:	d101      	bne.n	80017a4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80017a2:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a4:	6181      	str	r1, [r0, #24]
 80017a6:	e7fc      	b.n	80017a2 <HAL_GPIO_WritePin+0x6>

080017a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80017aa:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	4210      	tst	r0, r2
 80017b0:	d002      	beq.n	80017b8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b4:	f001 fac2 	bl	8002d3c <HAL_GPIO_EXTI_Callback>
  }
}
 80017b8:	bd10      	pop	{r4, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c2:	46ce      	mov	lr, r9
 80017c4:	4647      	mov	r7, r8
 80017c6:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c8:	6803      	ldr	r3, [r0, #0]
{
 80017ca:	b083      	sub	sp, #12
 80017cc:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	07da      	lsls	r2, r3, #31
 80017d0:	d52f      	bpl.n	8001832 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017d2:	220c      	movs	r2, #12
 80017d4:	48c4      	ldr	r0, [pc, #784]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 80017d6:	6841      	ldr	r1, [r0, #4]
 80017d8:	4011      	ands	r1, r2
 80017da:	2904      	cmp	r1, #4
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x20>
 80017de:	e110      	b.n	8001a02 <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e0:	6841      	ldr	r1, [r0, #4]
 80017e2:	400a      	ands	r2, r1
 80017e4:	2a08      	cmp	r2, #8
 80017e6:	d100      	bne.n	80017ea <HAL_RCC_OscConfig+0x2a>
 80017e8:	e107      	b.n	80019fa <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	6863      	ldr	r3, [r4, #4]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d100      	bne.n	80017f2 <HAL_RCC_OscConfig+0x32>
 80017f0:	e186      	b.n	8001b00 <HAL_RCC_OscConfig+0x340>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <HAL_RCC_OscConfig+0x38>
 80017f6:	e11a      	b.n	8001a2e <HAL_RCC_OscConfig+0x26e>
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d100      	bne.n	80017fe <HAL_RCC_OscConfig+0x3e>
 80017fc:	e1db      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3f6>
 80017fe:	4bba      	ldr	r3, [pc, #744]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 8001800:	49ba      	ldr	r1, [pc, #744]	; (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	400a      	ands	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	49b9      	ldr	r1, [pc, #740]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800180c:	400a      	ands	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fb0e 	bl	8000e30 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001814:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001816:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001818:	4eb3      	ldr	r6, [pc, #716]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 800181a:	02ad      	lsls	r5, r5, #10
 800181c:	e005      	b.n	800182a <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181e:	f7ff fb07 	bl	8000e30 <HAL_GetTick>
 8001822:	1bc0      	subs	r0, r0, r7
 8001824:	2864      	cmp	r0, #100	; 0x64
 8001826:	d900      	bls.n	800182a <HAL_RCC_OscConfig+0x6a>
 8001828:	e12f      	b.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	6833      	ldr	r3, [r6, #0]
 800182c:	422b      	tst	r3, r5
 800182e:	d0f6      	beq.n	800181e <HAL_RCC_OscConfig+0x5e>
 8001830:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	079a      	lsls	r2, r3, #30
 8001834:	d529      	bpl.n	800188a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001836:	220c      	movs	r2, #12
 8001838:	49ab      	ldr	r1, [pc, #684]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 800183a:	6848      	ldr	r0, [r1, #4]
 800183c:	4202      	tst	r2, r0
 800183e:	d100      	bne.n	8001842 <HAL_RCC_OscConfig+0x82>
 8001840:	e0bf      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001842:	6848      	ldr	r0, [r1, #4]
 8001844:	4002      	ands	r2, r0
 8001846:	2a08      	cmp	r2, #8
 8001848:	d100      	bne.n	800184c <HAL_RCC_OscConfig+0x8c>
 800184a:	e0b6      	b.n	80019ba <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184c:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184e:	4da6      	ldr	r5, [pc, #664]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001850:	2b00      	cmp	r3, #0
 8001852:	d100      	bne.n	8001856 <HAL_RCC_OscConfig+0x96>
 8001854:	e134      	b.n	8001ac0 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 8001856:	2201      	movs	r2, #1
 8001858:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800185c:	4313      	orrs	r3, r2
 800185e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001860:	f7ff fae6 	bl	8000e30 <HAL_GetTick>
 8001864:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	e005      	b.n	8001874 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fae2 	bl	8000e30 <HAL_GetTick>
 800186c:	1bc0      	subs	r0, r0, r7
 800186e:	2802      	cmp	r0, #2
 8001870:	d900      	bls.n	8001874 <HAL_RCC_OscConfig+0xb4>
 8001872:	e10a      	b.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	421e      	tst	r6, r3
 8001878:	d0f6      	beq.n	8001868 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	21f8      	movs	r1, #248	; 0xf8
 800187c:	682a      	ldr	r2, [r5, #0]
 800187e:	6923      	ldr	r3, [r4, #16]
 8001880:	438a      	bics	r2, r1
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4313      	orrs	r3, r2
 8001886:	602b      	str	r3, [r5, #0]
 8001888:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188a:	071a      	lsls	r2, r3, #28
 800188c:	d500      	bpl.n	8001890 <HAL_RCC_OscConfig+0xd0>
 800188e:	e07d      	b.n	800198c <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001890:	075a      	lsls	r2, r3, #29
 8001892:	d540      	bpl.n	8001916 <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001894:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001896:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001898:	4b93      	ldr	r3, [pc, #588]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 800189a:	0552      	lsls	r2, r2, #21
 800189c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800189e:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a0:	4211      	tst	r1, r2
 80018a2:	d108      	bne.n	80018b6 <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	69d9      	ldr	r1, [r3, #28]
 80018a6:	4311      	orrs	r1, r2
 80018a8:	61d9      	str	r1, [r3, #28]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	401a      	ands	r2, r3
 80018ae:	9201      	str	r2, [sp, #4]
 80018b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	2780      	movs	r7, #128	; 0x80
 80018b8:	4e8e      	ldr	r6, [pc, #568]	; (8001af4 <HAL_RCC_OscConfig+0x334>)
 80018ba:	007f      	lsls	r7, r7, #1
 80018bc:	6833      	ldr	r3, [r6, #0]
 80018be:	423b      	tst	r3, r7
 80018c0:	d100      	bne.n	80018c4 <HAL_RCC_OscConfig+0x104>
 80018c2:	e0cd      	b.n	8001a60 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	68a3      	ldr	r3, [r4, #8]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d100      	bne.n	80018cc <HAL_RCC_OscConfig+0x10c>
 80018ca:	e0d9      	b.n	8001a80 <HAL_RCC_OscConfig+0x2c0>
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d100      	bne.n	80018d2 <HAL_RCC_OscConfig+0x112>
 80018d0:	e0dd      	b.n	8001a8e <HAL_RCC_OscConfig+0x2ce>
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d100      	bne.n	80018d8 <HAL_RCC_OscConfig+0x118>
 80018d6:	e198      	b.n	8001c0a <HAL_RCC_OscConfig+0x44a>
 80018d8:	2101      	movs	r1, #1
 80018da:	4b83      	ldr	r3, [pc, #524]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 80018dc:	6a1a      	ldr	r2, [r3, #32]
 80018de:	438a      	bics	r2, r1
 80018e0:	621a      	str	r2, [r3, #32]
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	3103      	adds	r1, #3
 80018e6:	438a      	bics	r2, r1
 80018e8:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff faa1 	bl	8000e30 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ee:	4f7e      	ldr	r7, [pc, #504]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80018f0:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f2:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	4d80      	ldr	r5, [pc, #512]	; (8001af8 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	e006      	b.n	8001906 <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff fa9a 	bl	8000e30 <HAL_GetTick>
 80018fc:	464b      	mov	r3, r9
 80018fe:	1ac0      	subs	r0, r0, r3
 8001900:	42a8      	cmp	r0, r5
 8001902:	d900      	bls.n	8001906 <HAL_RCC_OscConfig+0x146>
 8001904:	e0c1      	b.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	421e      	tst	r6, r3
 800190a:	d0f5      	beq.n	80018f8 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800190c:	4643      	mov	r3, r8
 800190e:	2b01      	cmp	r3, #1
 8001910:	d100      	bne.n	8001914 <HAL_RCC_OscConfig+0x154>
 8001912:	e113      	b.n	8001b3c <HAL_RCC_OscConfig+0x37c>
 8001914:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001916:	06db      	lsls	r3, r3, #27
 8001918:	d512      	bpl.n	8001940 <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800191a:	6963      	ldr	r3, [r4, #20]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d100      	bne.n	8001922 <HAL_RCC_OscConfig+0x162>
 8001920:	e155      	b.n	8001bce <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001922:	3305      	adds	r3, #5
 8001924:	d000      	beq.n	8001928 <HAL_RCC_OscConfig+0x168>
 8001926:	e0f2      	b.n	8001b0e <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001928:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800192a:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 800192c:	4a6e      	ldr	r2, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 800192e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001930:	438b      	bics	r3, r1
 8001932:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001934:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001936:	69a3      	ldr	r3, [r4, #24]
 8001938:	4381      	bics	r1, r0
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	430b      	orrs	r3, r1
 800193e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001940:	6a23      	ldr	r3, [r4, #32]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01c      	beq.n	8001980 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001946:	220c      	movs	r2, #12
 8001948:	4d67      	ldr	r5, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 800194a:	6869      	ldr	r1, [r5, #4]
 800194c:	400a      	ands	r2, r1
 800194e:	2a08      	cmp	r2, #8
 8001950:	d03e      	beq.n	80019d0 <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001952:	2b02      	cmp	r3, #2
 8001954:	d100      	bne.n	8001958 <HAL_RCC_OscConfig+0x198>
 8001956:	e0f8      	b.n	8001b4a <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	4a68      	ldr	r2, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 800195e:	4013      	ands	r3, r2
 8001960:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001962:	f7ff fa65 	bl	8000e30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001968:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196a:	04ad      	lsls	r5, r5, #18
 800196c:	e005      	b.n	800197a <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff fa5f 	bl	8000e30 <HAL_GetTick>
 8001972:	1b80      	subs	r0, r0, r6
 8001974:	2802      	cmp	r0, #2
 8001976:	d900      	bls.n	800197a <HAL_RCC_OscConfig+0x1ba>
 8001978:	e087      	b.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	422b      	tst	r3, r5
 800197e:	d1f6      	bne.n	800196e <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001980:	2000      	movs	r0, #0
}
 8001982:	b003      	add	sp, #12
 8001984:	bc0c      	pop	{r2, r3}
 8001986:	4690      	mov	r8, r2
 8001988:	4699      	mov	r9, r3
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198c:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800198e:	4d56      	ldr	r5, [pc, #344]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01f      	beq.n	80019d4 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8001994:	2201      	movs	r2, #1
 8001996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001998:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800199a:	4313      	orrs	r3, r2
 800199c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800199e:	f7ff fa47 	bl	8000e30 <HAL_GetTick>
 80019a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a4:	e004      	b.n	80019b0 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a6:	f7ff fa43 	bl	8000e30 <HAL_GetTick>
 80019aa:	1bc0      	subs	r0, r0, r7
 80019ac:	2802      	cmp	r0, #2
 80019ae:	d86c      	bhi.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80019b2:	421e      	tst	r6, r3
 80019b4:	d0f7      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1e6>
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	e76a      	b.n	8001890 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019ba:	684a      	ldr	r2, [r1, #4]
 80019bc:	03d2      	lsls	r2, r2, #15
 80019be:	d500      	bpl.n	80019c2 <HAL_RCC_OscConfig+0x202>
 80019c0:	e744      	b.n	800184c <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	0792      	lsls	r2, r2, #30
 80019c8:	d525      	bpl.n	8001a16 <HAL_RCC_OscConfig+0x256>
 80019ca:	68e2      	ldr	r2, [r4, #12]
 80019cc:	2a01      	cmp	r2, #1
 80019ce:	d022      	beq.n	8001a16 <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 80019d0:	2001      	movs	r0, #1
 80019d2:	e7d6      	b.n	8001982 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 80019d4:	2201      	movs	r2, #1
 80019d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80019da:	4393      	bics	r3, r2
 80019dc:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80019de:	f7ff fa27 	bl	8000e30 <HAL_GetTick>
 80019e2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e4:	e004      	b.n	80019f0 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff fa23 	bl	8000e30 <HAL_GetTick>
 80019ea:	1bc0      	subs	r0, r0, r7
 80019ec:	2802      	cmp	r0, #2
 80019ee:	d84c      	bhi.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80019f2:	421e      	tst	r6, r3
 80019f4:	d1f7      	bne.n	80019e6 <HAL_RCC_OscConfig+0x226>
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	e74a      	b.n	8001890 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019fa:	6842      	ldr	r2, [r0, #4]
 80019fc:	03d2      	lsls	r2, r2, #15
 80019fe:	d400      	bmi.n	8001a02 <HAL_RCC_OscConfig+0x242>
 8001a00:	e6f3      	b.n	80017ea <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	4a39      	ldr	r2, [pc, #228]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	0392      	lsls	r2, r2, #14
 8001a08:	d400      	bmi.n	8001a0c <HAL_RCC_OscConfig+0x24c>
 8001a0a:	e712      	b.n	8001832 <HAL_RCC_OscConfig+0x72>
 8001a0c:	6862      	ldr	r2, [r4, #4]
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d000      	beq.n	8001a14 <HAL_RCC_OscConfig+0x254>
 8001a12:	e70e      	b.n	8001832 <HAL_RCC_OscConfig+0x72>
 8001a14:	e7dc      	b.n	80019d0 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	25f8      	movs	r5, #248	; 0xf8
 8001a18:	4833      	ldr	r0, [pc, #204]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 8001a1a:	6922      	ldr	r2, [r4, #16]
 8001a1c:	6801      	ldr	r1, [r0, #0]
 8001a1e:	00d2      	lsls	r2, r2, #3
 8001a20:	43a9      	bics	r1, r5
 8001a22:	430a      	orrs	r2, r1
 8001a24:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a26:	071a      	lsls	r2, r3, #28
 8001a28:	d400      	bmi.n	8001a2c <HAL_RCC_OscConfig+0x26c>
 8001a2a:	e731      	b.n	8001890 <HAL_RCC_OscConfig+0xd0>
 8001a2c:	e7ae      	b.n	800198c <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2e:	4d2e      	ldr	r5, [pc, #184]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 8001a30:	4a2e      	ldr	r2, [pc, #184]	; (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001a32:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a34:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a36:	4013      	ands	r3, r2
 8001a38:	602b      	str	r3, [r5, #0]
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	4a2c      	ldr	r2, [pc, #176]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a40:	4013      	ands	r3, r2
 8001a42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a44:	f7ff f9f4 	bl	8000e30 <HAL_GetTick>
 8001a48:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	e004      	b.n	8001a56 <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff f9f0 	bl	8000e30 <HAL_GetTick>
 8001a50:	1bc0      	subs	r0, r0, r7
 8001a52:	2864      	cmp	r0, #100	; 0x64
 8001a54:	d819      	bhi.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	682b      	ldr	r3, [r5, #0]
 8001a58:	4233      	tst	r3, r6
 8001a5a:	d1f7      	bne.n	8001a4c <HAL_RCC_OscConfig+0x28c>
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	e6e8      	b.n	8001832 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a60:	6833      	ldr	r3, [r6, #0]
 8001a62:	433b      	orrs	r3, r7
 8001a64:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a66:	f7ff f9e3 	bl	8000e30 <HAL_GetTick>
 8001a6a:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	e004      	b.n	8001a78 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff f9df 	bl	8000e30 <HAL_GetTick>
 8001a72:	1b40      	subs	r0, r0, r5
 8001a74:	2864      	cmp	r0, #100	; 0x64
 8001a76:	d808      	bhi.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	6833      	ldr	r3, [r6, #0]
 8001a7a:	423b      	tst	r3, r7
 8001a7c:	d0f7      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2ae>
 8001a7e:	e721      	b.n	80018c4 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	4919      	ldr	r1, [pc, #100]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
 8001a82:	6a0a      	ldr	r2, [r1, #32]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	620b      	str	r3, [r1, #32]
 8001a88:	e72f      	b.n	80018ea <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	e779      	b.n	8001982 <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4e15      	ldr	r6, [pc, #84]	; (8001ae8 <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a92:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	4d18      	ldr	r5, [pc, #96]	; (8001af8 <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	4393      	bics	r3, r2
 8001a9a:	6233      	str	r3, [r6, #32]
 8001a9c:	6a33      	ldr	r3, [r6, #32]
 8001a9e:	3203      	adds	r2, #3
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f9c4 	bl	8000e30 <HAL_GetTick>
 8001aa8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	e005      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff f9c0 	bl	8000e30 <HAL_GetTick>
 8001ab0:	464b      	mov	r3, r9
 8001ab2:	1ac0      	subs	r0, r0, r3
 8001ab4:	42a8      	cmp	r0, r5
 8001ab6:	d8e8      	bhi.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	6a33      	ldr	r3, [r6, #32]
 8001aba:	421f      	tst	r7, r3
 8001abc:	d1f6      	bne.n	8001aac <HAL_RCC_OscConfig+0x2ec>
 8001abe:	e725      	b.n	800190c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac4:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4393      	bics	r3, r2
 8001ac8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001aca:	f7ff f9b1 	bl	8000e30 <HAL_GetTick>
 8001ace:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad0:	e004      	b.n	8001adc <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff f9ad 	bl	8000e30 <HAL_GetTick>
 8001ad6:	1bc0      	subs	r0, r0, r7
 8001ad8:	2802      	cmp	r0, #2
 8001ada:	d8d6      	bhi.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001adc:	682b      	ldr	r3, [r5, #0]
 8001ade:	421e      	tst	r6, r3
 8001ae0:	d1f7      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x312>
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	e6d1      	b.n	800188a <HAL_RCC_OscConfig+0xca>
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	fffeffff 	.word	0xfffeffff
 8001af0:	fffbffff 	.word	0xfffbffff
 8001af4:	40007000 	.word	0x40007000
 8001af8:	00001388 	.word	0x00001388
 8001afc:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	4a47      	ldr	r2, [pc, #284]	; (8001c20 <HAL_RCC_OscConfig+0x460>)
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	6811      	ldr	r1, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e680      	b.n	8001810 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4d43      	ldr	r5, [pc, #268]	; (8001c20 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b12:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b14:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b16:	4313      	orrs	r3, r2
 8001b18:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001b1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b1c:	3a03      	subs	r2, #3
 8001b1e:	4393      	bics	r3, r2
 8001b20:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001b22:	f7ff f985 	bl	8000e30 <HAL_GetTick>
 8001b26:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b28:	e004      	b.n	8001b34 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b2a:	f7ff f981 	bl	8000e30 <HAL_GetTick>
 8001b2e:	1bc0      	subs	r0, r0, r7
 8001b30:	2802      	cmp	r0, #2
 8001b32:	d8aa      	bhi.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b36:	421e      	tst	r6, r3
 8001b38:	d1f7      	bne.n	8001b2a <HAL_RCC_OscConfig+0x36a>
 8001b3a:	e701      	b.n	8001940 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4a38      	ldr	r2, [pc, #224]	; (8001c20 <HAL_RCC_OscConfig+0x460>)
 8001b3e:	4939      	ldr	r1, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x464>)
 8001b40:	69d3      	ldr	r3, [r2, #28]
 8001b42:	400b      	ands	r3, r1
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	e6e5      	b.n	8001916 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	4a36      	ldr	r2, [pc, #216]	; (8001c28 <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4013      	ands	r3, r2
 8001b52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b54:	f7ff f96c 	bl	8000e30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b58:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001b5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5c:	e004      	b.n	8001b68 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7ff f967 	bl	8000e30 <HAL_GetTick>
 8001b62:	1bc0      	subs	r0, r0, r7
 8001b64:	2802      	cmp	r0, #2
 8001b66:	d890      	bhi.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b68:	682b      	ldr	r3, [r5, #0]
 8001b6a:	4233      	tst	r3, r6
 8001b6c:	d1f7      	bne.n	8001b5e <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6e:	220f      	movs	r2, #15
 8001b70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001b72:	4393      	bics	r3, r2
 8001b74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b76:	4313      	orrs	r3, r2
 8001b78:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001b7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b7e:	686a      	ldr	r2, [r5, #4]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	492a      	ldr	r1, [pc, #168]	; (8001c2c <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b86:	400a      	ands	r2, r1
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	682a      	ldr	r2, [r5, #0]
 8001b90:	045b      	lsls	r3, r3, #17
 8001b92:	4313      	orrs	r3, r2
 8001b94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b96:	f7ff f94b 	bl	8000e30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9a:	4d21      	ldr	r5, [pc, #132]	; (8001c20 <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 8001b9c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9e:	04a4      	lsls	r4, r4, #18
 8001ba0:	e005      	b.n	8001bae <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff f945 	bl	8000e30 <HAL_GetTick>
 8001ba6:	1b80      	subs	r0, r0, r6
 8001ba8:	2802      	cmp	r0, #2
 8001baa:	d900      	bls.n	8001bae <HAL_RCC_OscConfig+0x3ee>
 8001bac:	e76d      	b.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bae:	682b      	ldr	r3, [r5, #0]
 8001bb0:	4223      	tst	r3, r4
 8001bb2:	d0f6      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3e2>
 8001bb4:	e6e4      	b.n	8001980 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_RCC_OscConfig+0x460>)
 8001bba:	02d2      	lsls	r2, r2, #11
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	0252      	lsls	r2, r2, #9
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e620      	b.n	8001810 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bce:	2104      	movs	r1, #4
 8001bd0:	4d13      	ldr	r5, [pc, #76]	; (8001c20 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bd2:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bd4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001bda:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001be0:	f7ff f926 	bl	8000e30 <HAL_GetTick>
 8001be4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001be6:	e005      	b.n	8001bf4 <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001be8:	f7ff f922 	bl	8000e30 <HAL_GetTick>
 8001bec:	1bc0      	subs	r0, r0, r7
 8001bee:	2802      	cmp	r0, #2
 8001bf0:	d900      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x434>
 8001bf2:	e74a      	b.n	8001a8a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bf4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001bf6:	421e      	tst	r6, r3
 8001bf8:	d0f6      	beq.n	8001be8 <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bfa:	21f8      	movs	r1, #248	; 0xf8
 8001bfc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001bfe:	69a3      	ldr	r3, [r4, #24]
 8001c00:	438a      	bics	r2, r1
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	636b      	str	r3, [r5, #52]	; 0x34
 8001c08:	e69a      	b.n	8001940 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_RCC_OscConfig+0x460>)
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	621a      	str	r2, [r3, #32]
 8001c14:	6a1a      	ldr	r2, [r3, #32]
 8001c16:	3903      	subs	r1, #3
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	621a      	str	r2, [r3, #32]
 8001c1c:	e665      	b.n	80018ea <HAL_RCC_OscConfig+0x12a>
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	40021000 	.word	0x40021000
 8001c24:	efffffff 	.word	0xefffffff
 8001c28:	feffffff 	.word	0xfeffffff
 8001c2c:	ffc2ffff 	.word	0xffc2ffff

08001c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	46ce      	mov	lr, r9
 8001c34:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c36:	2201      	movs	r2, #1
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c3c:	495c      	ldr	r1, [pc, #368]	; (8001db0 <HAL_RCC_ClockConfig+0x180>)
{
 8001c3e:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c40:	680b      	ldr	r3, [r1, #0]
{
 8001c42:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c44:	4013      	ands	r3, r2
 8001c46:	42a3      	cmp	r3, r4
 8001c48:	d20d      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	680b      	ldr	r3, [r1, #0]
 8001c4c:	4393      	bics	r3, r2
 8001c4e:	4323      	orrs	r3, r4
 8001c50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c52:	680b      	ldr	r3, [r1, #0]
 8001c54:	401a      	ands	r2, r3
 8001c56:	4294      	cmp	r4, r2
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001c5c:	b009      	add	sp, #36	; 0x24
 8001c5e:	bc0c      	pop	{r2, r3}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	079a      	lsls	r2, r3, #30
 8001c6a:	d506      	bpl.n	8001c7a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	20f0      	movs	r0, #240	; 0xf0
 8001c6e:	4951      	ldr	r1, [pc, #324]	; (8001db4 <HAL_RCC_ClockConfig+0x184>)
 8001c70:	684a      	ldr	r2, [r1, #4]
 8001c72:	4382      	bics	r2, r0
 8001c74:	68a8      	ldr	r0, [r5, #8]
 8001c76:	4302      	orrs	r2, r0
 8001c78:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7a:	07db      	lsls	r3, r3, #31
 8001c7c:	d524      	bpl.n	8001cc8 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b4d      	ldr	r3, [pc, #308]	; (8001db4 <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c80:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c84:	2a01      	cmp	r2, #1
 8001c86:	d06a      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c88:	2a02      	cmp	r2, #2
 8001c8a:	d063      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	079b      	lsls	r3, r3, #30
 8001c8e:	d5e4      	bpl.n	8001c5a <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c90:	2103      	movs	r1, #3
 8001c92:	4e48      	ldr	r6, [pc, #288]	; (8001db4 <HAL_RCC_ClockConfig+0x184>)
 8001c94:	6873      	ldr	r3, [r6, #4]
 8001c96:	438b      	bics	r3, r1
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f8c8 	bl	8000e30 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001ca2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d05d      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d06b      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cac:	230c      	movs	r3, #12
 8001cae:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <HAL_RCC_ClockConfig+0x188>)
 8001cb2:	4699      	mov	r9, r3
 8001cb4:	e004      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x90>
 8001cb6:	f7ff f8bb 	bl	8000e30 <HAL_GetTick>
 8001cba:	1bc0      	subs	r0, r0, r7
 8001cbc:	4548      	cmp	r0, r9
 8001cbe:	d84c      	bhi.n	8001d5a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cc0:	4642      	mov	r2, r8
 8001cc2:	6873      	ldr	r3, [r6, #4]
 8001cc4:	421a      	tst	r2, r3
 8001cc6:	d1f6      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4a39      	ldr	r2, [pc, #228]	; (8001db0 <HAL_RCC_ClockConfig+0x180>)
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	400b      	ands	r3, r1
 8001cd0:	429c      	cmp	r4, r3
 8001cd2:	d205      	bcs.n	8001ce0 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd4:	6813      	ldr	r3, [r2, #0]
 8001cd6:	438b      	bics	r3, r1
 8001cd8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cda:	6813      	ldr	r3, [r2, #0]
 8001cdc:	4219      	tst	r1, r3
 8001cde:	d1bc      	bne.n	8001c5a <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	075b      	lsls	r3, r3, #29
 8001ce4:	d506      	bpl.n	8001cf4 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce6:	4a33      	ldr	r2, [pc, #204]	; (8001db4 <HAL_RCC_ClockConfig+0x184>)
 8001ce8:	4934      	ldr	r1, [pc, #208]	; (8001dbc <HAL_RCC_ClockConfig+0x18c>)
 8001cea:	6853      	ldr	r3, [r2, #4]
 8001cec:	400b      	ands	r3, r1
 8001cee:	68e9      	ldr	r1, [r5, #12]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <HAL_RCC_ClockConfig+0x190>)
 8001cf6:	466a      	mov	r2, sp
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	c870      	ldmia	r0!, {r4, r5, r6}
 8001cfc:	c270      	stmia	r2!, {r4, r5, r6}
 8001cfe:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d00:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d02:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d04:	aa04      	add	r2, sp, #16
 8001d06:	0010      	movs	r0, r2
 8001d08:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001d0a:	c070      	stmia	r0!, {r4, r5, r6}
 8001d0c:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001d0e:	4d29      	ldr	r5, [pc, #164]	; (8001db4 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d10:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d12:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001d14:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d16:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	4003      	ands	r3, r0
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d10b      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d1e:	3307      	adds	r3, #7
 8001d20:	0c84      	lsrs	r4, r0, #18
 8001d22:	401c      	ands	r4, r3
 8001d24:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d26:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001d28:	400b      	ands	r3, r1
 8001d2a:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d2c:	03c3      	lsls	r3, r0, #15
 8001d2e:	d439      	bmi.n	8001da4 <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001d30:	4824      	ldr	r0, [pc, #144]	; (8001dc4 <HAL_RCC_ClockConfig+0x194>)
 8001d32:	4360      	muls	r0, r4
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 8001d36:	4824      	ldr	r0, [pc, #144]	; (8001dc8 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_RCC_ClockConfig+0x184>)
 8001d3a:	4a24      	ldr	r2, [pc, #144]	; (8001dcc <HAL_RCC_ClockConfig+0x19c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	061b      	lsls	r3, r3, #24
 8001d40:	0f1b      	lsrs	r3, r3, #28
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	40d8      	lsrs	r0, r3
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <HAL_RCC_ClockConfig+0x1a0>)
 8001d48:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff f846 	bl	8000ddc <HAL_InitTick>
  return HAL_OK;
 8001d50:	2000      	movs	r0, #0
 8001d52:	e783      	b.n	8001c5c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	d49b      	bmi.n	8001c90 <HAL_RCC_ClockConfig+0x60>
 8001d58:	e77f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	e77e      	b.n	8001c5c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	039b      	lsls	r3, r3, #14
 8001d60:	d496      	bmi.n	8001c90 <HAL_RCC_ClockConfig+0x60>
 8001d62:	e77a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d64:	330b      	adds	r3, #11
 8001d66:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_RCC_ClockConfig+0x188>)
 8001d6a:	4699      	mov	r9, r3
 8001d6c:	e004      	b.n	8001d78 <HAL_RCC_ClockConfig+0x148>
 8001d6e:	f7ff f85f 	bl	8000e30 <HAL_GetTick>
 8001d72:	1bc0      	subs	r0, r0, r7
 8001d74:	4548      	cmp	r0, r9
 8001d76:	d8f0      	bhi.n	8001d5a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d78:	4642      	mov	r2, r8
 8001d7a:	6873      	ldr	r3, [r6, #4]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d1f5      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x13e>
 8001d82:	e7a1      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	330a      	adds	r3, #10
 8001d86:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_ClockConfig+0x188>)
 8001d8a:	4699      	mov	r9, r3
 8001d8c:	e004      	b.n	8001d98 <HAL_RCC_ClockConfig+0x168>
 8001d8e:	f7ff f84f 	bl	8000e30 <HAL_GetTick>
 8001d92:	1bc0      	subs	r0, r0, r7
 8001d94:	4548      	cmp	r0, r9
 8001d96:	d8e0      	bhi.n	8001d5a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d98:	4642      	mov	r2, r8
 8001d9a:	6873      	ldr	r3, [r6, #4]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d1f5      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x15e>
 8001da2:	e791      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001da4:	4808      	ldr	r0, [pc, #32]	; (8001dc8 <HAL_RCC_ClockConfig+0x198>)
 8001da6:	f7fe f9b7 	bl	8000118 <__udivsi3>
 8001daa:	4360      	muls	r0, r4
 8001dac:	e7c4      	b.n	8001d38 <HAL_RCC_ClockConfig+0x108>
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	00001388 	.word	0x00001388
 8001dbc:	fffff8ff 	.word	0xfffff8ff
 8001dc0:	08004490 	.word	0x08004490
 8001dc4:	003d0900 	.word	0x003d0900
 8001dc8:	007a1200 	.word	0x007a1200
 8001dcc:	08004518 	.word	0x08004518
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <HAL_RCC_GetSysClockFreq>:
{
 8001dd4:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x58>)
{
 8001dd8:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001dda:	0018      	movs	r0, r3
 8001ddc:	466a      	mov	r2, sp
 8001dde:	c870      	ldmia	r0!, {r4, r5, r6}
 8001de0:	c270      	stmia	r2!, {r4, r5, r6}
 8001de2:	6800      	ldr	r0, [r0, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001de4:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001de6:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001de8:	aa04      	add	r2, sp, #16
 8001dea:	0010      	movs	r0, r2
 8001dec:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001dee:	c070      	stmia	r0!, {r4, r5, r6}
 8001df0:	681b      	ldr	r3, [r3, #0]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001df2:	4669      	mov	r1, sp
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001df4:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 8001df6:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001dfa:	6844      	ldr	r4, [r0, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001dfc:	4023      	ands	r3, r4
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d10b      	bne.n	8001e1a <HAL_RCC_GetSysClockFreq+0x46>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e02:	3307      	adds	r3, #7
 8001e04:	0ca5      	lsrs	r5, r4, #18
 8001e06:	401d      	ands	r5, r3
 8001e08:	5d4d      	ldrb	r5, [r1, r5]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e0a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e10:	03e3      	lsls	r3, r4, #15
 8001e12:	d405      	bmi.n	8001e20 <HAL_RCC_GetSysClockFreq+0x4c>
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x60>)
 8001e16:	4368      	muls	r0, r5
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x48>
      sysclockfreq = HSE_VALUE;
 8001e1a:	4807      	ldr	r0, [pc, #28]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e1c:	b008      	add	sp, #32
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x64>)
 8001e22:	f7fe f979 	bl	8000118 <__udivsi3>
 8001e26:	4368      	muls	r0, r5
 8001e28:	e7f8      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x48>
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	08004490 	.word	0x08004490
 8001e30:	40021000 	.word	0x40021000
 8001e34:	003d0900 	.word	0x003d0900
 8001e38:	007a1200 	.word	0x007a1200

08001e3c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001e3c:	4b01      	ldr	r3, [pc, #4]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
}
 8001e40:	4770      	bx	lr
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	055b      	lsls	r3, r3, #21
 8001e50:	0f5b      	lsrs	r3, r3, #29
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e56:	6810      	ldr	r0, [r2, #0]
 8001e58:	40d8      	lsrs	r0, r3
}    
 8001e5a:	4770      	bx	lr
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08004528 	.word	0x08004528
 8001e64:	20000000 	.word	0x20000000

08001e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6a:	46ce      	mov	lr, r9
 8001e6c:	4647      	mov	r7, r8
 8001e6e:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e70:	6803      	ldr	r3, [r0, #0]
{
 8001e72:	b083      	sub	sp, #12
 8001e74:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e76:	03da      	lsls	r2, r3, #15
 8001e78:	d539      	bpl.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001e7c:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001e80:	0552      	lsls	r2, r2, #21
 8001e82:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001e84:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4211      	tst	r1, r2
 8001e88:	d108      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x34>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	69d9      	ldr	r1, [r3, #28]
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	61d9      	str	r1, [r3, #28]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	401a      	ands	r2, r3
 8001e94:	9201      	str	r2, [sp, #4]
 8001e96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	2680      	movs	r6, #128	; 0x80
 8001e9e:	4d36      	ldr	r5, [pc, #216]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001ea0:	0076      	lsls	r6, r6, #1
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	4233      	tst	r3, r6
 8001ea6:	d04c      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xda>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea8:	21c0      	movs	r1, #192	; 0xc0
 8001eaa:	4d32      	ldr	r5, [pc, #200]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001eac:	0089      	lsls	r1, r1, #2
 8001eae:	6a2a      	ldr	r2, [r5, #32]
 8001eb0:	400a      	ands	r2, r1
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eb2:	d044      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8001eb4:	6860      	ldr	r0, [r4, #4]
 8001eb6:	4001      	ands	r1, r0
 8001eb8:	428a      	cmp	r2, r1
 8001eba:	d00e      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ebc:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ebe:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ec0:	6a2e      	ldr	r6, [r5, #32]
 8001ec2:	0252      	lsls	r2, r2, #9
 8001ec4:	4332      	orrs	r2, r6
 8001ec6:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec8:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x114>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ecc:	4e2c      	ldr	r6, [pc, #176]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ece:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed0:	4032      	ands	r2, r6
 8001ed2:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ed4:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ed6:	07cb      	lsls	r3, r1, #31
 8001ed8:	d422      	bmi.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001edc:	4927      	ldr	r1, [pc, #156]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001ede:	6a13      	ldr	r3, [r2, #32]
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	4303      	orrs	r3, r0
 8001ee4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ee6:	4643      	mov	r3, r8
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d03a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001eec:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eee:	07da      	lsls	r2, r3, #31
 8001ef0:	d40e      	bmi.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ef2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ef4:	069b      	lsls	r3, r3, #26
 8001ef6:	d506      	bpl.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef8:	2110      	movs	r1, #16
 8001efa:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001efc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001efe:	438b      	bics	r3, r1
 8001f00:	68e1      	ldr	r1, [r4, #12]
 8001f02:	430b      	orrs	r3, r1
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f06:	b003      	add	sp, #12
 8001f08:	bc0c      	pop	{r2, r3}
 8001f0a:	4690      	mov	r8, r2
 8001f0c:	4699      	mov	r9, r3
 8001f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f10:	2003      	movs	r0, #3
 8001f12:	4918      	ldr	r1, [pc, #96]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001f14:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001f16:	4382      	bics	r2, r0
 8001f18:	68a0      	ldr	r0, [r4, #8]
 8001f1a:	4302      	orrs	r2, r0
 8001f1c:	630a      	str	r2, [r1, #48]	; 0x30
 8001f1e:	e7e8      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        tickstart = HAL_GetTick();
 8001f20:	f7fe ff86 	bl	8000e30 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
        tickstart = HAL_GetTick();
 8001f26:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	e004      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7fe ff7f 	bl	8000e30 <HAL_GetTick>
 8001f32:	1bc0      	subs	r0, r0, r7
 8001f34:	4548      	cmp	r0, r9
 8001f36:	d81a      	bhi.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	6a2b      	ldr	r3, [r5, #32]
 8001f3a:	421e      	tst	r6, r3
 8001f3c:	d0f7      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8001f3e:	6860      	ldr	r0, [r4, #4]
 8001f40:	e7cb      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f42:	682b      	ldr	r3, [r5, #0]
 8001f44:	4333      	orrs	r3, r6
 8001f46:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001f48:	f7fe ff72 	bl	8000e30 <HAL_GetTick>
 8001f4c:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	e004      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xf2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f50:	f7fe ff6e 	bl	8000e30 <HAL_GetTick>
 8001f54:	1bc0      	subs	r0, r0, r7
 8001f56:	2864      	cmp	r0, #100	; 0x64
 8001f58:	d809      	bhi.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	4233      	tst	r3, r6
 8001f5e:	d0f7      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f60:	e7a2      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	69d3      	ldr	r3, [r2, #28]
 8001f64:	4908      	ldr	r1, [pc, #32]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001f66:	400b      	ands	r3, r1
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	e7bf      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x86>
          return HAL_TIMEOUT;
 8001f6e:	2003      	movs	r0, #3
 8001f70:	e7c9      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	fffffcff 	.word	0xfffffcff
 8001f80:	fffeffff 	.word	0xfffeffff
 8001f84:	00001388 	.word	0x00001388
 8001f88:	efffffff 	.word	0xefffffff

08001f8c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001f90:	d049      	beq.n	8002026 <HAL_TIM_Base_Init+0x9a>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001f92:	233d      	movs	r3, #61	; 0x3d
 8001f94:	5cc3      	ldrb	r3, [r0, r3]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d036      	beq.n	800200a <HAL_TIM_Base_Init+0x7e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa0:	4922      	ldr	r1, [pc, #136]	; (800202c <HAL_TIM_Base_Init+0xa0>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001fa2:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa4:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001fa6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa8:	428b      	cmp	r3, r1
 8001faa:	d01a      	beq.n	8001fe2 <HAL_TIM_Base_Init+0x56>
 8001fac:	4920      	ldr	r1, [pc, #128]	; (8002030 <HAL_TIM_Base_Init+0xa4>)
 8001fae:	428b      	cmp	r3, r1
 8001fb0:	d030      	beq.n	8002014 <HAL_TIM_Base_Init+0x88>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fb2:	4920      	ldr	r1, [pc, #128]	; (8002034 <HAL_TIM_Base_Init+0xa8>)
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	d031      	beq.n	800201c <HAL_TIM_Base_Init+0x90>
 8001fb8:	491f      	ldr	r1, [pc, #124]	; (8002038 <HAL_TIM_Base_Init+0xac>)
 8001fba:	428b      	cmp	r3, r1
 8001fbc:	d015      	beq.n	8001fea <HAL_TIM_Base_Init+0x5e>
 8001fbe:	491f      	ldr	r1, [pc, #124]	; (800203c <HAL_TIM_Base_Init+0xb0>)
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	d012      	beq.n	8001fea <HAL_TIM_Base_Init+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	69a1      	ldr	r1, [r4, #24]
 8001fca:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fce:	68e2      	ldr	r2, [r4, #12]
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fd2:	6862      	ldr	r2, [r4, #4]
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001fda:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001fdc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001fde:	54e2      	strb	r2, [r4, r3]
}
 8001fe0:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe2:	2170      	movs	r1, #112	; 0x70
 8001fe4:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001fe6:	68a1      	ldr	r1, [r4, #8]
 8001fe8:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fea:	4915      	ldr	r1, [pc, #84]	; (8002040 <HAL_TIM_Base_Init+0xb4>)
 8001fec:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fee:	6921      	ldr	r1, [r4, #16]
 8001ff0:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	69a1      	ldr	r1, [r4, #24]
 8001ff8:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001ffa:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ffc:	68e2      	ldr	r2, [r4, #12]
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002000:	6862      	ldr	r2, [r4, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002004:	6962      	ldr	r2, [r4, #20]
 8002006:	631a      	str	r2, [r3, #48]	; 0x30
 8002008:	e7e5      	b.n	8001fd6 <HAL_TIM_Base_Init+0x4a>
    htim->Lock = HAL_UNLOCKED;
 800200a:	223c      	movs	r2, #60	; 0x3c
 800200c:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 800200e:	f001 f969 	bl	80032e4 <HAL_TIM_Base_MspInit>
 8002012:	e7c3      	b.n	8001f9c <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002014:	2170      	movs	r1, #112	; 0x70
 8002016:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8002018:	68a1      	ldr	r1, [r4, #8]
 800201a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800201c:	4908      	ldr	r1, [pc, #32]	; (8002040 <HAL_TIM_Base_Init+0xb4>)
 800201e:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002020:	6921      	ldr	r1, [r4, #16]
 8002022:	430a      	orrs	r2, r1
 8002024:	e7ce      	b.n	8001fc4 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 8002026:	2001      	movs	r0, #1
 8002028:	e7da      	b.n	8001fe0 <HAL_TIM_Base_Init+0x54>
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40000400 	.word	0x40000400
 8002034:	40002000 	.word	0x40002000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800
 8002040:	fffffcff 	.word	0xfffffcff

08002044 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002044:	6803      	ldr	r3, [r0, #0]
 8002046:	2001      	movs	r0, #1
 8002048:	68d9      	ldr	r1, [r3, #12]
 800204a:	4301      	orrs	r1, r0
 800204c:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4302      	orrs	r2, r0
 8002052:	601a      	str	r2, [r3, #0]
}
 8002054:	2000      	movs	r0, #0
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_PWM_Init>:
{
 8002058:	b510      	push	{r4, lr}
 800205a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 800205c:	d049      	beq.n	80020f2 <HAL_TIM_PWM_Init+0x9a>
  if(htim->State == HAL_TIM_STATE_RESET)
 800205e:	233d      	movs	r3, #61	; 0x3d
 8002060:	5cc3      	ldrb	r3, [r0, r3]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d036      	beq.n	80020d6 <HAL_TIM_PWM_Init+0x7e>
  htim->State= HAL_TIM_STATE_BUSY;
 8002068:	2202      	movs	r2, #2
 800206a:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800206c:	4922      	ldr	r1, [pc, #136]	; (80020f8 <HAL_TIM_PWM_Init+0xa0>)
  htim->State= HAL_TIM_STATE_BUSY;
 800206e:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002070:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8002072:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002074:	428b      	cmp	r3, r1
 8002076:	d01a      	beq.n	80020ae <HAL_TIM_PWM_Init+0x56>
 8002078:	4920      	ldr	r1, [pc, #128]	; (80020fc <HAL_TIM_PWM_Init+0xa4>)
 800207a:	428b      	cmp	r3, r1
 800207c:	d030      	beq.n	80020e0 <HAL_TIM_PWM_Init+0x88>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207e:	4920      	ldr	r1, [pc, #128]	; (8002100 <HAL_TIM_PWM_Init+0xa8>)
 8002080:	428b      	cmp	r3, r1
 8002082:	d031      	beq.n	80020e8 <HAL_TIM_PWM_Init+0x90>
 8002084:	491f      	ldr	r1, [pc, #124]	; (8002104 <HAL_TIM_PWM_Init+0xac>)
 8002086:	428b      	cmp	r3, r1
 8002088:	d015      	beq.n	80020b6 <HAL_TIM_PWM_Init+0x5e>
 800208a:	491f      	ldr	r1, [pc, #124]	; (8002108 <HAL_TIM_PWM_Init+0xb0>)
 800208c:	428b      	cmp	r3, r1
 800208e:	d012      	beq.n	80020b6 <HAL_TIM_PWM_Init+0x5e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	438a      	bics	r2, r1
 8002094:	69a1      	ldr	r1, [r4, #24]
 8002096:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8002098:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800209a:	68e2      	ldr	r2, [r4, #12]
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800209e:	6862      	ldr	r2, [r4, #4]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80020a2:	2201      	movs	r2, #1
 80020a4:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 80020a6:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 80020a8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80020aa:	54e2      	strb	r2, [r4, r3]
}
 80020ac:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ae:	2170      	movs	r1, #112	; 0x70
 80020b0:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80020b2:	68a1      	ldr	r1, [r4, #8]
 80020b4:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b6:	4915      	ldr	r1, [pc, #84]	; (800210c <HAL_TIM_PWM_Init+0xb4>)
 80020b8:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	6921      	ldr	r1, [r4, #16]
 80020bc:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	438a      	bics	r2, r1
 80020c2:	69a1      	ldr	r1, [r4, #24]
 80020c4:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80020c6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c8:	68e2      	ldr	r2, [r4, #12]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80020cc:	6862      	ldr	r2, [r4, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80020d0:	6962      	ldr	r2, [r4, #20]
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
 80020d4:	e7e5      	b.n	80020a2 <HAL_TIM_PWM_Init+0x4a>
    htim->Lock = HAL_UNLOCKED;
 80020d6:	223c      	movs	r2, #60	; 0x3c
 80020d8:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 80020da:	f001 f8e5 	bl	80032a8 <HAL_TIM_PWM_MspInit>
 80020de:	e7c3      	b.n	8002068 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e0:	2170      	movs	r1, #112	; 0x70
 80020e2:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80020e4:	68a1      	ldr	r1, [r4, #8]
 80020e6:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80020e8:	4908      	ldr	r1, [pc, #32]	; (800210c <HAL_TIM_PWM_Init+0xb4>)
 80020ea:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ec:	6921      	ldr	r1, [r4, #16]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	e7ce      	b.n	8002090 <HAL_TIM_PWM_Init+0x38>
    return HAL_ERROR;
 80020f2:	2001      	movs	r0, #1
 80020f4:	e7da      	b.n	80020ac <HAL_TIM_PWM_Init+0x54>
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40000400 	.word	0x40000400
 8002100:	40002000 	.word	0x40002000
 8002104:	40014400 	.word	0x40014400
 8002108:	40014800 	.word	0x40014800
 800210c:	fffffcff 	.word	0xfffffcff

08002110 <HAL_TIM_PWM_Start_IT>:
  switch (Channel)
 8002110:	2904      	cmp	r1, #4
 8002112:	d020      	beq.n	8002156 <HAL_TIM_PWM_Start_IT+0x46>
 8002114:	d92a      	bls.n	800216c <HAL_TIM_PWM_Start_IT+0x5c>
 8002116:	2908      	cmp	r1, #8
 8002118:	d01d      	beq.n	8002156 <HAL_TIM_PWM_Start_IT+0x46>
 800211a:	290c      	cmp	r1, #12
 800211c:	d12e      	bne.n	800217c <HAL_TIM_PWM_Start_IT+0x6c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800211e:	6803      	ldr	r3, [r0, #0]
 8002120:	2010      	movs	r0, #16
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	4302      	orrs	r2, r0
 8002126:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002128:	2201      	movs	r2, #1
 800212a:	408a      	lsls	r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800212c:	6a19      	ldr	r1, [r3, #32]
 800212e:	4391      	bics	r1, r2
 8002130:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002132:	6a19      	ldr	r1, [r3, #32]
 8002134:	430a      	orrs	r2, r1
 8002136:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_TIM_PWM_Start_IT+0x70>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d010      	beq.n	8002160 <HAL_TIM_PWM_Start_IT+0x50>
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_TIM_PWM_Start_IT+0x74>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00d      	beq.n	8002160 <HAL_TIM_PWM_Start_IT+0x50>
 8002144:	4a10      	ldr	r2, [pc, #64]	; (8002188 <HAL_TIM_PWM_Start_IT+0x78>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00a      	beq.n	8002160 <HAL_TIM_PWM_Start_IT+0x50>
  __HAL_TIM_ENABLE(htim);
 800214a:	2101      	movs	r1, #1
 800214c:	681a      	ldr	r2, [r3, #0]
}
 800214e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
}
 8002154:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002156:	6803      	ldr	r3, [r0, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	430a      	orrs	r2, r1
 800215c:	60da      	str	r2, [r3, #12]
    break;
 800215e:	e7e3      	b.n	8002128 <HAL_TIM_PWM_Start_IT+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002164:	0212      	lsls	r2, r2, #8
 8002166:	430a      	orrs	r2, r1
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
 800216a:	e7ee      	b.n	800214a <HAL_TIM_PWM_Start_IT+0x3a>
  switch (Channel)
 800216c:	2900      	cmp	r1, #0
 800216e:	d105      	bne.n	800217c <HAL_TIM_PWM_Start_IT+0x6c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002170:	6803      	ldr	r3, [r0, #0]
 8002172:	2002      	movs	r0, #2
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	4302      	orrs	r2, r0
 8002178:	60da      	str	r2, [r3, #12]
    break;
 800217a:	e7d5      	b.n	8002128 <HAL_TIM_PWM_Start_IT+0x18>
 800217c:	6803      	ldr	r3, [r0, #0]
 800217e:	e7d3      	b.n	8002128 <HAL_TIM_PWM_Start_IT+0x18>
 8002180:	40012c00 	.word	0x40012c00
 8002184:	40014400 	.word	0x40014400
 8002188:	40014800 	.word	0x40014800

0800218c <HAL_TIM_PWM_ConfigChannel>:
{
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800218e:	243c      	movs	r4, #60	; 0x3c
 8002190:	5d05      	ldrb	r5, [r0, r4]
{
 8002192:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002194:	2002      	movs	r0, #2
 8002196:	2d01      	cmp	r5, #1
 8002198:	d044      	beq.n	8002224 <HAL_TIM_PWM_ConfigChannel+0x98>
 800219a:	2501      	movs	r5, #1
 800219c:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 800219e:	3401      	adds	r4, #1
 80021a0:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 80021a2:	2a04      	cmp	r2, #4
 80021a4:	d100      	bne.n	80021a8 <HAL_TIM_PWM_ConfigChannel+0x1c>
 80021a6:	e06d      	b.n	8002284 <HAL_TIM_PWM_ConfigChannel+0xf8>
 80021a8:	d800      	bhi.n	80021ac <HAL_TIM_PWM_ConfigChannel+0x20>
 80021aa:	e09a      	b.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x156>
 80021ac:	2a08      	cmp	r2, #8
 80021ae:	d03a      	beq.n	8002226 <HAL_TIM_PWM_ConfigChannel+0x9a>
 80021b0:	2a0c      	cmp	r2, #12
 80021b2:	d130      	bne.n	8002216 <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021b4:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021b6:	4c7a      	ldr	r4, [pc, #488]	; (80023a0 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80021b8:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021ba:	4d7a      	ldr	r5, [pc, #488]	; (80023a4 <HAL_TIM_PWM_ConfigChannel+0x218>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021bc:	4020      	ands	r0, r4
 80021be:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80021c0:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80021c2:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80021c4:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021c6:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021c8:	680d      	ldr	r5, [r1, #0]
 80021ca:	022d      	lsls	r5, r5, #8
 80021cc:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 80021ce:	4c76      	ldr	r4, [pc, #472]	; (80023a8 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80021d0:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021d2:	6888      	ldr	r0, [r1, #8]
 80021d4:	0300      	lsls	r0, r0, #12
 80021d6:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021d8:	4c74      	ldr	r4, [pc, #464]	; (80023ac <HAL_TIM_PWM_ConfigChannel+0x220>)
 80021da:	42a2      	cmp	r2, r4
 80021dc:	d100      	bne.n	80021e0 <HAL_TIM_PWM_ConfigChannel+0x54>
 80021de:	e0ac      	b.n	800233a <HAL_TIM_PWM_ConfigChannel+0x1ae>
 80021e0:	4c73      	ldr	r4, [pc, #460]	; (80023b0 <HAL_TIM_PWM_ConfigChannel+0x224>)
 80021e2:	42a2      	cmp	r2, r4
 80021e4:	d100      	bne.n	80021e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80021e6:	e0a8      	b.n	800233a <HAL_TIM_PWM_ConfigChannel+0x1ae>
 80021e8:	4c72      	ldr	r4, [pc, #456]	; (80023b4 <HAL_TIM_PWM_ConfigChannel+0x228>)
 80021ea:	42a2      	cmp	r2, r4
 80021ec:	d100      	bne.n	80021f0 <HAL_TIM_PWM_ConfigChannel+0x64>
 80021ee:	e0a4      	b.n	800233a <HAL_TIM_PWM_ConfigChannel+0x1ae>
  TIMx->CCR4 = OC_Config->Pulse;
 80021f0:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80021f2:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80021f4:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80021f6:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80021f8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021fa:	2080      	movs	r0, #128	; 0x80
 80021fc:	69d4      	ldr	r4, [r2, #28]
 80021fe:	0100      	lsls	r0, r0, #4
 8002200:	4320      	orrs	r0, r4
 8002202:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002204:	69d0      	ldr	r0, [r2, #28]
 8002206:	4c6c      	ldr	r4, [pc, #432]	; (80023b8 <HAL_TIM_PWM_ConfigChannel+0x22c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002208:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800220a:	4020      	ands	r0, r4
 800220c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800220e:	69d0      	ldr	r0, [r2, #28]
 8002210:	0209      	lsls	r1, r1, #8
 8002212:	4301      	orrs	r1, r0
 8002214:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8002216:	2101      	movs	r1, #1
 8002218:	223d      	movs	r2, #61	; 0x3d
 800221a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 800221c:	2100      	movs	r1, #0
  return HAL_OK;
 800221e:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8002220:	3a01      	subs	r2, #1
 8002222:	5499      	strb	r1, [r3, r2]
}
 8002224:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002226:	2573      	movs	r5, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002228:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800222a:	4c64      	ldr	r4, [pc, #400]	; (80023bc <HAL_TIM_PWM_ConfigChannel+0x230>)
 800222c:	6a10      	ldr	r0, [r2, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800222e:	4f5f      	ldr	r7, [pc, #380]	; (80023ac <HAL_TIM_PWM_ConfigChannel+0x220>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002230:	4020      	ands	r0, r4
 8002232:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8002234:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002236:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8002238:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800223a:	43ac      	bics	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 800223c:	680d      	ldr	r5, [r1, #0]
 800223e:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8002240:	4c5f      	ldr	r4, [pc, #380]	; (80023c0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8002242:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002244:	688c      	ldr	r4, [r1, #8]
 8002246:	0224      	lsls	r4, r4, #8
 8002248:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800224a:	42ba      	cmp	r2, r7
 800224c:	d100      	bne.n	8002250 <HAL_TIM_PWM_ConfigChannel+0xc4>
 800224e:	e08a      	b.n	8002366 <HAL_TIM_PWM_ConfigChannel+0x1da>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002250:	4f57      	ldr	r7, [pc, #348]	; (80023b0 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8002252:	42ba      	cmp	r2, r7
 8002254:	d100      	bne.n	8002258 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8002256:	e08d      	b.n	8002374 <HAL_TIM_PWM_ConfigChannel+0x1e8>
 8002258:	4f56      	ldr	r7, [pc, #344]	; (80023b4 <HAL_TIM_PWM_ConfigChannel+0x228>)
 800225a:	42ba      	cmp	r2, r7
 800225c:	d100      	bne.n	8002260 <HAL_TIM_PWM_ConfigChannel+0xd4>
 800225e:	e089      	b.n	8002374 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CCR3 = OC_Config->Pulse;
 8002260:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002262:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002264:	61d5      	str	r5, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002266:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002268:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 800226a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800226c:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800226e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002270:	4320      	orrs	r0, r4
 8002272:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002274:	69d0      	ldr	r0, [r2, #28]
 8002276:	3c04      	subs	r4, #4
 8002278:	43a0      	bics	r0, r4
 800227a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800227c:	69d0      	ldr	r0, [r2, #28]
 800227e:	4301      	orrs	r1, r0
 8002280:	61d1      	str	r1, [r2, #28]
    break;
 8002282:	e7c8      	b.n	8002216 <HAL_TIM_PWM_ConfigChannel+0x8a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002284:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002286:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002288:	4d46      	ldr	r5, [pc, #280]	; (80023a4 <HAL_TIM_PWM_ConfigChannel+0x218>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800228a:	6a10      	ldr	r0, [r2, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800228c:	4f47      	ldr	r7, [pc, #284]	; (80023ac <HAL_TIM_PWM_ConfigChannel+0x220>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800228e:	43a0      	bics	r0, r4
 8002290:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8002292:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002294:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8002296:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002298:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800229a:	680d      	ldr	r5, [r1, #0]
 800229c:	022d      	lsls	r5, r5, #8
 800229e:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80022a0:	2420      	movs	r4, #32
 80022a2:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022a4:	688c      	ldr	r4, [r1, #8]
 80022a6:	0124      	lsls	r4, r4, #4
 80022a8:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022aa:	42ba      	cmp	r2, r7
 80022ac:	d04b      	beq.n	8002346 <HAL_TIM_PWM_ConfigChannel+0x1ba>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022ae:	4f40      	ldr	r7, [pc, #256]	; (80023b0 <HAL_TIM_PWM_ConfigChannel+0x224>)
 80022b0:	42ba      	cmp	r2, r7
 80022b2:	d050      	beq.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80022b4:	4f3f      	ldr	r7, [pc, #252]	; (80023b4 <HAL_TIM_PWM_ConfigChannel+0x228>)
 80022b6:	42ba      	cmp	r2, r7
 80022b8:	d04d      	beq.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x1ca>
  TIMx->CCR2 = OC_Config->Pulse;
 80022ba:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80022bc:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022be:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80022c0:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80022c2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022c4:	2080      	movs	r0, #128	; 0x80
 80022c6:	6994      	ldr	r4, [r2, #24]
 80022c8:	0100      	lsls	r0, r0, #4
 80022ca:	4320      	orrs	r0, r4
 80022cc:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022ce:	6990      	ldr	r0, [r2, #24]
 80022d0:	4c39      	ldr	r4, [pc, #228]	; (80023b8 <HAL_TIM_PWM_ConfigChannel+0x22c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022d4:	4020      	ands	r0, r4
 80022d6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022d8:	6990      	ldr	r0, [r2, #24]
 80022da:	0209      	lsls	r1, r1, #8
 80022dc:	4301      	orrs	r1, r0
 80022de:	6191      	str	r1, [r2, #24]
    break;
 80022e0:	e799      	b.n	8002216 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d197      	bne.n	8002216 <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022e6:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022e8:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ea:	6a14      	ldr	r4, [r2, #32]
 80022ec:	43ac      	bics	r4, r5
 80022ee:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 80022f0:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80022f2:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 80022f4:	4384      	bics	r4, r0
 80022f6:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 80022f8:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 80022fa:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022fc:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 80022fe:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 8002300:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002302:	4c2a      	ldr	r4, [pc, #168]	; (80023ac <HAL_TIM_PWM_ConfigChannel+0x220>)
  tmpccmrx |= OC_Config->OCMode;
 8002304:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002306:	42a2      	cmp	r2, r4
 8002308:	d03c      	beq.n	8002384 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 800230a:	4c29      	ldr	r4, [pc, #164]	; (80023b0 <HAL_TIM_PWM_ConfigChannel+0x224>)
 800230c:	42a2      	cmp	r2, r4
 800230e:	d039      	beq.n	8002384 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8002310:	4c28      	ldr	r4, [pc, #160]	; (80023b4 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8002312:	42a2      	cmp	r2, r4
 8002314:	d036      	beq.n	8002384 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR1 = OC_Config->Pulse;
 8002316:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002318:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800231a:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800231c:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800231e:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8002320:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002322:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002324:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002326:	4320      	orrs	r0, r4
 8002328:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800232a:	6990      	ldr	r0, [r2, #24]
 800232c:	3c04      	subs	r4, #4
 800232e:	43a0      	bics	r0, r4
 8002330:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002332:	6990      	ldr	r0, [r2, #24]
 8002334:	4301      	orrs	r1, r0
 8002336:	6191      	str	r1, [r2, #24]
    break;
 8002338:	e76d      	b.n	8002216 <HAL_TIM_PWM_ConfigChannel+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800233a:	4c22      	ldr	r4, [pc, #136]	; (80023c4 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800233c:	4026      	ands	r6, r4
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800233e:	694c      	ldr	r4, [r1, #20]
 8002340:	01a4      	lsls	r4, r4, #6
 8002342:	4326      	orrs	r6, r4
 8002344:	e754      	b.n	80021f0 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002346:	2480      	movs	r4, #128	; 0x80
 8002348:	43a0      	bics	r0, r4
 800234a:	0004      	movs	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800234c:	68c8      	ldr	r0, [r1, #12]
 800234e:	0100      	lsls	r0, r0, #4
 8002350:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002352:	2440      	movs	r4, #64	; 0x40
 8002354:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002356:	4f1c      	ldr	r7, [pc, #112]	; (80023c8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002358:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800235a:	4037      	ands	r7, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800235c:	698e      	ldr	r6, [r1, #24]
 800235e:	4326      	orrs	r6, r4
 8002360:	00b6      	lsls	r6, r6, #2
 8002362:	433e      	orrs	r6, r7
 8002364:	e7a9      	b.n	80022ba <HAL_TIM_PWM_ConfigChannel+0x12e>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002366:	4c19      	ldr	r4, [pc, #100]	; (80023cc <HAL_TIM_PWM_ConfigChannel+0x240>)
 8002368:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800236a:	68c8      	ldr	r0, [r1, #12]
 800236c:	0200      	lsls	r0, r0, #8
 800236e:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8002370:	4c11      	ldr	r4, [pc, #68]	; (80023b8 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 8002372:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002374:	4f16      	ldr	r7, [pc, #88]	; (80023d0 <HAL_TIM_PWM_ConfigChannel+0x244>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002376:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002378:	4037      	ands	r7, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800237a:	698e      	ldr	r6, [r1, #24]
 800237c:	4326      	orrs	r6, r4
 800237e:	0136      	lsls	r6, r6, #4
 8002380:	433e      	orrs	r6, r7
 8002382:	e76d      	b.n	8002260 <HAL_TIM_PWM_ConfigChannel+0xd4>
    tmpccer &= ~TIM_CCER_CC1NP;
 8002384:	2408      	movs	r4, #8
 8002386:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 8002388:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800238a:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800238c:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800238e:	2404      	movs	r4, #4
 8002390:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002392:	4c10      	ldr	r4, [pc, #64]	; (80023d4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8002394:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002396:	694c      	ldr	r4, [r1, #20]
 8002398:	433c      	orrs	r4, r7
 800239a:	4326      	orrs	r6, r4
 800239c:	e7bb      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x18a>
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	ffffefff 	.word	0xffffefff
 80023a4:	ffff8cff 	.word	0xffff8cff
 80023a8:	ffffdfff 	.word	0xffffdfff
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40014400 	.word	0x40014400
 80023b4:	40014800 	.word	0x40014800
 80023b8:	fffffbff 	.word	0xfffffbff
 80023bc:	fffffeff 	.word	0xfffffeff
 80023c0:	fffffdff 	.word	0xfffffdff
 80023c4:	ffffbfff 	.word	0xffffbfff
 80023c8:	fffff3ff 	.word	0xfffff3ff
 80023cc:	fffff7ff 	.word	0xfffff7ff
 80023d0:	ffffcfff 	.word	0xffffcfff
 80023d4:	fffffcff 	.word	0xfffffcff

080023d8 <HAL_TIM_TriggerCallback>:
 80023d8:	4770      	bx	lr
 80023da:	46c0      	nop			; (mov r8, r8)

080023dc <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023dc:	2202      	movs	r2, #2
 80023de:	6803      	ldr	r3, [r0, #0]
{
 80023e0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e2:	6919      	ldr	r1, [r3, #16]
{
 80023e4:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e6:	420a      	tst	r2, r1
 80023e8:	d002      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x14>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	420a      	tst	r2, r1
 80023ee:	d168      	bne.n	80024c2 <HAL_TIM_IRQHandler+0xe6>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023f0:	2204      	movs	r2, #4
 80023f2:	6919      	ldr	r1, [r3, #16]
 80023f4:	420a      	tst	r2, r1
 80023f6:	d002      	beq.n	80023fe <HAL_TIM_IRQHandler+0x22>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80023f8:	68d9      	ldr	r1, [r3, #12]
 80023fa:	420a      	tst	r2, r1
 80023fc:	d14e      	bne.n	800249c <HAL_TIM_IRQHandler+0xc0>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fe:	2208      	movs	r2, #8
 8002400:	6919      	ldr	r1, [r3, #16]
 8002402:	420a      	tst	r2, r1
 8002404:	d002      	beq.n	800240c <HAL_TIM_IRQHandler+0x30>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	420a      	tst	r2, r1
 800240a:	d136      	bne.n	800247a <HAL_TIM_IRQHandler+0x9e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800240c:	2210      	movs	r2, #16
 800240e:	6919      	ldr	r1, [r3, #16]
 8002410:	420a      	tst	r2, r1
 8002412:	d002      	beq.n	800241a <HAL_TIM_IRQHandler+0x3e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002414:	68d9      	ldr	r1, [r3, #12]
 8002416:	420a      	tst	r2, r1
 8002418:	d11c      	bne.n	8002454 <HAL_TIM_IRQHandler+0x78>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800241a:	2201      	movs	r2, #1
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	420a      	tst	r2, r1
 8002420:	d002      	beq.n	8002428 <HAL_TIM_IRQHandler+0x4c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002422:	68d9      	ldr	r1, [r3, #12]
 8002424:	420a      	tst	r2, r1
 8002426:	d169      	bne.n	80024fc <HAL_TIM_IRQHandler+0x120>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002428:	2280      	movs	r2, #128	; 0x80
 800242a:	6919      	ldr	r1, [r3, #16]
 800242c:	420a      	tst	r2, r1
 800242e:	d002      	beq.n	8002436 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002430:	68d9      	ldr	r1, [r3, #12]
 8002432:	420a      	tst	r2, r1
 8002434:	d169      	bne.n	800250a <HAL_TIM_IRQHandler+0x12e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	6919      	ldr	r1, [r3, #16]
 800243a:	420a      	tst	r2, r1
 800243c:	d002      	beq.n	8002444 <HAL_TIM_IRQHandler+0x68>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800243e:	68d9      	ldr	r1, [r3, #12]
 8002440:	420a      	tst	r2, r1
 8002442:	d154      	bne.n	80024ee <HAL_TIM_IRQHandler+0x112>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002444:	2220      	movs	r2, #32
 8002446:	6919      	ldr	r1, [r3, #16]
 8002448:	420a      	tst	r2, r1
 800244a:	d002      	beq.n	8002452 <HAL_TIM_IRQHandler+0x76>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800244c:	68d9      	ldr	r1, [r3, #12]
 800244e:	420a      	tst	r2, r1
 8002450:	d147      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x106>
}
 8002452:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002454:	3a21      	subs	r2, #33	; 0x21
 8002456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002458:	3219      	adds	r2, #25
 800245a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	23c0      	movs	r3, #192	; 0xc0
 8002460:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002464:	421a      	tst	r2, r3
 8002466:	d15b      	bne.n	8002520 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002468:	f000 fc78 	bl	8002d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	0020      	movs	r0, r4
 800246e:	f000 fc81 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	2300      	movs	r3, #0
 8002474:	7723      	strb	r3, [r4, #28]
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	e7cf      	b.n	800241a <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800247a:	3a11      	subs	r2, #17
 800247c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800247e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002480:	320d      	adds	r2, #13
 8002482:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002484:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002486:	079b      	lsls	r3, r3, #30
 8002488:	d150      	bne.n	800252c <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	f000 fc67 	bl	8002d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248e:	0020      	movs	r0, r4
 8002490:	f000 fc70 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002494:	2300      	movs	r3, #0
 8002496:	7723      	strb	r3, [r4, #28]
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	e7b7      	b.n	800240c <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800249c:	3a09      	subs	r2, #9
 800249e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a0:	3207      	adds	r2, #7
 80024a2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	23c0      	movs	r3, #192	; 0xc0
 80024a8:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ac:	421a      	tst	r2, r3
 80024ae:	d13a      	bne.n	8002526 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b0:	f000 fc54 	bl	8002d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	0020      	movs	r0, r4
 80024b6:	f000 fc5d 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	2300      	movs	r3, #0
 80024bc:	7723      	strb	r3, [r4, #28]
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	e79d      	b.n	80023fe <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024c2:	3a05      	subs	r2, #5
 80024c4:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c8:	3204      	adds	r2, #4
 80024ca:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024cc:	079b      	lsls	r3, r3, #30
 80024ce:	d124      	bne.n	800251a <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d0:	f000 fc44 	bl	8002d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	0020      	movs	r0, r4
 80024d6:	f000 fc4d 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024da:	2300      	movs	r3, #0
 80024dc:	7723      	strb	r3, [r4, #28]
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	e786      	b.n	80023f0 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024e2:	3a41      	subs	r2, #65	; 0x41
 80024e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80024e6:	0020      	movs	r0, r4
 80024e8:	f000 f844 	bl	8002574 <HAL_TIMEx_CommutationCallback>
}
 80024ec:	e7b1      	b.n	8002452 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ee:	3a81      	subs	r2, #129	; 0x81
 80024f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80024f2:	0020      	movs	r0, r4
 80024f4:	f7ff ff70 	bl	80023d8 <HAL_TIM_TriggerCallback>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	e7a3      	b.n	8002444 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024fc:	3a03      	subs	r2, #3
 80024fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002500:	0020      	movs	r0, r4
 8002502:	f000 fc21 	bl	8002d48 <HAL_TIM_PeriodElapsedCallback>
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	e78e      	b.n	8002428 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800250a:	3a02      	subs	r2, #2
 800250c:	3aff      	subs	r2, #255	; 0xff
 800250e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002510:	0020      	movs	r0, r4
 8002512:	f000 f831 	bl	8002578 <HAL_TIMEx_BreakCallback>
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	e78d      	b.n	8002436 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 800251a:	f000 fc25 	bl	8002d68 <HAL_TIM_IC_CaptureCallback>
 800251e:	e7dc      	b.n	80024da <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8002520:	f000 fc22 	bl	8002d68 <HAL_TIM_IC_CaptureCallback>
 8002524:	e7a5      	b.n	8002472 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8002526:	f000 fc1f 	bl	8002d68 <HAL_TIM_IC_CaptureCallback>
 800252a:	e7c6      	b.n	80024ba <HAL_TIM_IRQHandler+0xde>
        HAL_TIM_IC_CaptureCallback(htim);
 800252c:	f000 fc1c 	bl	8002d68 <HAL_TIM_IC_CaptureCallback>
 8002530:	e7b0      	b.n	8002494 <HAL_TIM_IRQHandler+0xb8>
 8002532:	46c0      	nop			; (mov r8, r8)

08002534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002534:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002536:	243c      	movs	r4, #60	; 0x3c
 8002538:	5d03      	ldrb	r3, [r0, r4]
{
 800253a:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800253c:	2002      	movs	r0, #2
 800253e:	2b01      	cmp	r3, #1
 8002540:	d017      	beq.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8002542:	253d      	movs	r5, #61	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002544:	2670      	movs	r6, #112	; 0x70
 8002546:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800254a:	6858      	ldr	r0, [r3, #4]
 800254c:	43b0      	bics	r0, r6
 800254e:	6058      	str	r0, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002550:	6858      	ldr	r0, [r3, #4]
 8002552:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002554:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002556:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002558:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800255a:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800255c:	6898      	ldr	r0, [r3, #8]
 800255e:	43b0      	bics	r0, r6
 8002560:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002562:	6898      	ldr	r0, [r3, #8]
 8002564:	4301      	orrs	r1, r0
 8002566:	6099      	str	r1, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002568:	2301      	movs	r3, #1
 800256a:	5553      	strb	r3, [r2, r5]

  __HAL_UNLOCK(htim);
 800256c:	2300      	movs	r3, #0

  return HAL_OK;
 800256e:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8002570:	5513      	strb	r3, [r2, r4]
}
 8002572:	bd70      	pop	{r4, r5, r6, pc}

08002574 <HAL_TIMEx_CommutationCallback>:
 8002574:	4770      	bx	lr
 8002576:	46c0      	nop			; (mov r8, r8)

08002578 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002578:	4770      	bx	lr
 800257a:	46c0      	nop			; (mov r8, r8)

0800257c <HAL_UART_Transmit_IT>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800257c:	0003      	movs	r3, r0
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800257e:	2069      	movs	r0, #105	; 0x69
{
 8002580:	b530      	push	{r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8002582:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002584:	3867      	subs	r0, #103	; 0x67
  if(huart->gState == HAL_UART_STATE_READY)
 8002586:	2c20      	cmp	r4, #32
 8002588:	d000      	beq.n	800258c <HAL_UART_Transmit_IT+0x10>
  }
}
 800258a:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 800258c:	2900      	cmp	r1, #0
 800258e:	d024      	beq.n	80025da <HAL_UART_Transmit_IT+0x5e>
      return HAL_ERROR;
 8002590:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002592:	2a00      	cmp	r2, #0
 8002594:	d0f9      	beq.n	800258a <HAL_UART_Transmit_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002596:	2480      	movs	r4, #128	; 0x80
 8002598:	689d      	ldr	r5, [r3, #8]
 800259a:	0164      	lsls	r4, r4, #5
 800259c:	42a5      	cmp	r5, r4
 800259e:	d016      	beq.n	80025ce <HAL_UART_Transmit_IT+0x52>
    __HAL_LOCK(huart);
 80025a0:	2468      	movs	r4, #104	; 0x68
 80025a2:	5d1d      	ldrb	r5, [r3, r4]
    return HAL_BUSY;
 80025a4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80025a6:	2d01      	cmp	r5, #1
 80025a8:	d0ef      	beq.n	800258a <HAL_UART_Transmit_IT+0xe>
    huart->pTxBuffPtr = pData;
 80025aa:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80025ac:	2150      	movs	r1, #80	; 0x50
 80025ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025b0:	3102      	adds	r1, #2
 80025b2:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b4:	2200      	movs	r2, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b6:	301f      	adds	r0, #31
 80025b8:	3117      	adds	r1, #23
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ba:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025bc:	5458      	strb	r0, [r3, r1]
    __HAL_UNLOCK(huart);
 80025be:	551a      	strb	r2, [r3, r4]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	3117      	adds	r1, #23
 80025c4:	6813      	ldr	r3, [r2, #0]
    return HAL_OK;
 80025c6:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80025cc:	e7dd      	b.n	800258a <HAL_UART_Transmit_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ce:	691c      	ldr	r4, [r3, #16]
 80025d0:	2c00      	cmp	r4, #0
 80025d2:	d1e5      	bne.n	80025a0 <HAL_UART_Transmit_IT+0x24>
      if((((uint32_t)pData)&1U) != 0U)
 80025d4:	4201      	tst	r1, r0
 80025d6:	d0e3      	beq.n	80025a0 <HAL_UART_Transmit_IT+0x24>
 80025d8:	e7d7      	b.n	800258a <HAL_UART_Transmit_IT+0xe>
      return HAL_ERROR;
 80025da:	2001      	movs	r0, #1
 80025dc:	e7d5      	b.n	800258a <HAL_UART_Transmit_IT+0xe>
 80025de:	46c0      	nop			; (mov r8, r8)

080025e0 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025e0:	0003      	movs	r3, r0
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80025e2:	206a      	movs	r0, #106	; 0x6a
{
 80025e4:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 80025e6:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80025e8:	3868      	subs	r0, #104	; 0x68
  if(huart->RxState == HAL_UART_STATE_READY)
 80025ea:	2c20      	cmp	r4, #32
 80025ec:	d000      	beq.n	80025f0 <HAL_UART_Receive_IT+0x10>
  }
}
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == NULL ) || (Size == 0U))
 80025f0:	2900      	cmp	r1, #0
 80025f2:	d040      	beq.n	8002676 <HAL_UART_Receive_IT+0x96>
      return HAL_ERROR;
 80025f4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80025f6:	2a00      	cmp	r2, #0
 80025f8:	d0f9      	beq.n	80025ee <HAL_UART_Receive_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025fa:	2580      	movs	r5, #128	; 0x80
 80025fc:	689c      	ldr	r4, [r3, #8]
 80025fe:	016d      	lsls	r5, r5, #5
 8002600:	42ac      	cmp	r4, r5
 8002602:	d026      	beq.n	8002652 <HAL_UART_Receive_IT+0x72>
    __HAL_LOCK(huart);
 8002604:	2568      	movs	r5, #104	; 0x68
 8002606:	5d5e      	ldrb	r6, [r3, r5]
    return HAL_BUSY;
 8002608:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800260a:	2e01      	cmp	r6, #1
 800260c:	d0ef      	beq.n	80025ee <HAL_UART_Receive_IT+0xe>
 800260e:	2001      	movs	r0, #1
 8002610:	5558      	strb	r0, [r3, r5]
    huart->pRxBuffPtr = pData;
 8002612:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002614:	2158      	movs	r1, #88	; 0x58
 8002616:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002618:	3102      	adds	r1, #2
 800261a:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 800261c:	2c00      	cmp	r4, #0
 800261e:	d105      	bne.n	800262c <HAL_UART_Receive_IT+0x4c>
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	2a00      	cmp	r2, #0
 8002624:	d033      	beq.n	800268e <HAL_UART_Receive_IT+0xae>
 8002626:	217f      	movs	r1, #127	; 0x7f
 8002628:	225c      	movs	r2, #92	; 0x5c
 800262a:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262c:	2200      	movs	r2, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800262e:	2022      	movs	r0, #34	; 0x22
 8002630:	216a      	movs	r1, #106	; 0x6a
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002634:	5458      	strb	r0, [r3, r1]
    __HAL_UNLOCK(huart);
 8002636:	3902      	subs	r1, #2
 8002638:	545a      	strb	r2, [r3, r1]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3967      	subs	r1, #103	; 0x67
 800263e:	689a      	ldr	r2, [r3, #8]
    return HAL_OK;
 8002640:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002642:	430a      	orrs	r2, r1
 8002644:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002646:	2290      	movs	r2, #144	; 0x90
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	0052      	lsls	r2, r2, #1
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8002650:	e7cd      	b.n	80025ee <HAL_UART_Receive_IT+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002652:	691c      	ldr	r4, [r3, #16]
 8002654:	2c00      	cmp	r4, #0
 8002656:	d110      	bne.n	800267a <HAL_UART_Receive_IT+0x9a>
      if((((uint32_t)pData)&1U) != 0U)
 8002658:	4201      	tst	r1, r0
 800265a:	d1c8      	bne.n	80025ee <HAL_UART_Receive_IT+0xe>
    __HAL_LOCK(huart);
 800265c:	2068      	movs	r0, #104	; 0x68
 800265e:	5c18      	ldrb	r0, [r3, r0]
 8002660:	2801      	cmp	r0, #1
 8002662:	d018      	beq.n	8002696 <HAL_UART_Receive_IT+0xb6>
    huart->pRxBuffPtr = pData;
 8002664:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002666:	2158      	movs	r1, #88	; 0x58
 8002668:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800266a:	3102      	adds	r1, #2
 800266c:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 800266e:	225c      	movs	r2, #92	; 0x5c
 8002670:	490a      	ldr	r1, [pc, #40]	; (800269c <HAL_UART_Receive_IT+0xbc>)
 8002672:	5299      	strh	r1, [r3, r2]
 8002674:	e7da      	b.n	800262c <HAL_UART_Receive_IT+0x4c>
      return HAL_ERROR;
 8002676:	2001      	movs	r0, #1
 8002678:	e7b9      	b.n	80025ee <HAL_UART_Receive_IT+0xe>
    __HAL_LOCK(huart);
 800267a:	2068      	movs	r0, #104	; 0x68
 800267c:	5c1c      	ldrb	r4, [r3, r0]
    return HAL_BUSY;
 800267e:	3866      	subs	r0, #102	; 0x66
    __HAL_LOCK(huart);
 8002680:	2c01      	cmp	r4, #1
 8002682:	d0b4      	beq.n	80025ee <HAL_UART_Receive_IT+0xe>
    huart->pRxBuffPtr = pData;
 8002684:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002686:	2158      	movs	r1, #88	; 0x58
 8002688:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800268a:	3102      	adds	r1, #2
 800268c:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 800268e:	21ff      	movs	r1, #255	; 0xff
 8002690:	225c      	movs	r2, #92	; 0x5c
 8002692:	5299      	strh	r1, [r3, r2]
 8002694:	e7ca      	b.n	800262c <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 8002696:	2002      	movs	r0, #2
 8002698:	e7a9      	b.n	80025ee <HAL_UART_Receive_IT+0xe>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	000001ff 	.word	0x000001ff

080026a0 <HAL_UART_Transmit_DMA>:
  *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	0004      	movs	r4, r0
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80026a4:	2069      	movs	r0, #105	; 0x69
 80026a6:	5c25      	ldrb	r5, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80026a8:	3867      	subs	r0, #103	; 0x67
  if(huart->gState == HAL_UART_STATE_READY)
 80026aa:	2d20      	cmp	r5, #32
 80026ac:	d000      	beq.n	80026b0 <HAL_UART_Transmit_DMA+0x10>
  }
}
 80026ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 80026b0:	2900      	cmp	r1, #0
 80026b2:	d036      	beq.n	8002722 <HAL_UART_Transmit_DMA+0x82>
      return HAL_ERROR;
 80026b4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80026b6:	2a00      	cmp	r2, #0
 80026b8:	d0f9      	beq.n	80026ae <HAL_UART_Transmit_DMA+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	68a5      	ldr	r5, [r4, #8]
 80026be:	015b      	lsls	r3, r3, #5
 80026c0:	429d      	cmp	r5, r3
 80026c2:	d028      	beq.n	8002716 <HAL_UART_Transmit_DMA+0x76>
    __HAL_LOCK(huart);
 80026c4:	2568      	movs	r5, #104	; 0x68
 80026c6:	5d63      	ldrb	r3, [r4, r5]
    return HAL_BUSY;
 80026c8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d0ef      	beq.n	80026ae <HAL_UART_Transmit_DMA+0xe>
 80026ce:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d0:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80026d2:	5563      	strb	r3, [r4, r5]
    huart->TxXferSize = Size;
 80026d4:	334f      	adds	r3, #79	; 0x4f
    huart->pTxBuffPtr = pData;
 80026d6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80026d8:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80026da:	3302      	adds	r3, #2
 80026dc:	52e2      	strh	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026de:	301f      	adds	r0, #31
 80026e0:	3317      	adds	r3, #23
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	66e6      	str	r6, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e4:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_UART_Transmit_DMA+0x88>)
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80026ea:	6827      	ldr	r7, [r4, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026ec:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <HAL_UART_Transmit_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80026f0:	3728      	adds	r7, #40	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026f2:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_UART_Transmit_DMA+0x90>)
    huart->hdmatx->XferAbortCallback = NULL;
 80026f6:	6346      	str	r6, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80026f8:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80026fa:	0013      	movs	r3, r2
 80026fc:	003a      	movs	r2, r7
 80026fe:	f7fe feb5 	bl	800146c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002702:	2240      	movs	r2, #64	; 0x40
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002704:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002706:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8002708:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800270a:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800270c:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800270e:	5566      	strb	r6, [r4, r5]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002710:	430a      	orrs	r2, r1
 8002712:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002714:	e7cb      	b.n	80026ae <HAL_UART_Transmit_DMA+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002716:	6923      	ldr	r3, [r4, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1d3      	bne.n	80026c4 <HAL_UART_Transmit_DMA+0x24>
      if((((uint32_t)pData)&1U) != 0U)
 800271c:	4201      	tst	r1, r0
 800271e:	d0d1      	beq.n	80026c4 <HAL_UART_Transmit_DMA+0x24>
 8002720:	e7c5      	b.n	80026ae <HAL_UART_Transmit_DMA+0xe>
      return HAL_ERROR;
 8002722:	2001      	movs	r0, #1
 8002724:	e7c3      	b.n	80026ae <HAL_UART_Transmit_DMA+0xe>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	08002735 	.word	0x08002735
 800272c:	08002769 	.word	0x08002769
 8002730:	08002779 	.word	0x08002779

08002734 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002734:	6803      	ldr	r3, [r0, #0]
{
 8002736:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800273c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800273e:	400b      	ands	r3, r1
 8002740:	d10b      	bne.n	800275a <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0;
 8002742:	2152      	movs	r1, #82	; 0x52
 8002744:	5253      	strh	r3, [r2, r1]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	312e      	adds	r1, #46	; 0x2e
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	438a      	bics	r2, r1
 800274e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	3940      	subs	r1, #64	; 0x40
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8002758:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 800275a:	0010      	movs	r0, r2
 800275c:	f000 fb10 	bl	8002d80 <HAL_UART_TxCpltCallback>
}
 8002760:	e7fa      	b.n	8002758 <UART_DMATransmitCplt+0x24>
 8002762:	46c0      	nop			; (mov r8, r8)

08002764 <HAL_UART_TxHalfCpltCallback>:
 8002764:	4770      	bx	lr
 8002766:	46c0      	nop			; (mov r8, r8)

08002768 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002768:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 800276a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800276c:	f7ff fffa 	bl	8002764 <HAL_UART_TxHalfCpltCallback>
}
 8002770:	bd10      	pop	{r4, pc}
 8002772:	46c0      	nop			; (mov r8, r8)

08002774 <HAL_UART_ErrorCallback>:
 8002774:	4770      	bx	lr
 8002776:	46c0      	nop			; (mov r8, r8)

08002778 <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002778:	2369      	movs	r3, #105	; 0x69
{
 800277a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800277c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800277e:	5cc2      	ldrb	r2, [r0, r3]
 8002780:	2a21      	cmp	r2, #33	; 0x21
 8002782:	d01d      	beq.n	80027c0 <UART_DMAError+0x48>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002784:	236a      	movs	r3, #106	; 0x6a
 8002786:	5cc2      	ldrb	r2, [r0, r3]
 8002788:	2a22      	cmp	r2, #34	; 0x22
 800278a:	d006      	beq.n	800279a <UART_DMAError+0x22>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800278c:	2210      	movs	r2, #16
 800278e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002790:	4313      	orrs	r3, r2
 8002792:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8002794:	f7ff ffee 	bl	8002774 <HAL_UART_ErrorCallback>
}
 8002798:	bd10      	pop	{r4, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800279a:	6802      	ldr	r2, [r0, #0]
 800279c:	6891      	ldr	r1, [r2, #8]
 800279e:	0649      	lsls	r1, r1, #25
 80027a0:	d5f4      	bpl.n	800278c <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 80027a2:	2400      	movs	r4, #0
 80027a4:	215a      	movs	r1, #90	; 0x5a
 80027a6:	5244      	strh	r4, [r0, r1]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a8:	6811      	ldr	r1, [r2, #0]
 80027aa:	4c0c      	ldr	r4, [pc, #48]	; (80027dc <UART_DMAError+0x64>)
 80027ac:	4021      	ands	r1, r4
 80027ae:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b0:	6891      	ldr	r1, [r2, #8]
 80027b2:	3423      	adds	r4, #35	; 0x23
 80027b4:	34ff      	adds	r4, #255	; 0xff
 80027b6:	43a1      	bics	r1, r4
 80027b8:	6091      	str	r1, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80027ba:	2220      	movs	r2, #32
 80027bc:	54c2      	strb	r2, [r0, r3]
 80027be:	e7e5      	b.n	800278c <UART_DMAError+0x14>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80027c0:	6802      	ldr	r2, [r0, #0]
 80027c2:	6891      	ldr	r1, [r2, #8]
 80027c4:	0609      	lsls	r1, r1, #24
 80027c6:	d5dd      	bpl.n	8002784 <UART_DMAError+0xc>
    huart->TxXferCount = 0U;
 80027c8:	2400      	movs	r4, #0
 80027ca:	2152      	movs	r1, #82	; 0x52
 80027cc:	5244      	strh	r4, [r0, r1]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027ce:	6811      	ldr	r1, [r2, #0]
 80027d0:	34c0      	adds	r4, #192	; 0xc0
 80027d2:	43a1      	bics	r1, r4
 80027d4:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80027d6:	2220      	movs	r2, #32
 80027d8:	54c2      	strb	r2, [r0, r3]
 80027da:	e7d3      	b.n	8002784 <UART_DMAError+0xc>
 80027dc:	fffffedf 	.word	0xfffffedf

080027e0 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  huart->RxXferCount = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	225a      	movs	r2, #90	; 0x5a
{
 80027e4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80027e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80027e8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80027ea:	3a08      	subs	r2, #8
 80027ec:	5283      	strh	r3, [r0, r2]

  HAL_UART_ErrorCallback(huart);
 80027ee:	f7ff ffc1 	bl	8002774 <HAL_UART_ErrorCallback>
}
 80027f2:	bd10      	pop	{r4, pc}

080027f4 <HAL_UART_IRQHandler>:
{
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027f6:	6803      	ldr	r3, [r0, #0]
{
 80027f8:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	0018      	movs	r0, r3
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027fe:	6819      	ldr	r1, [r3, #0]
  if (errorflags == RESET)
 8002800:	0715      	lsls	r5, r2, #28
 8002802:	d110      	bne.n	8002826 <HAL_UART_IRQHandler+0x32>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002804:	2020      	movs	r0, #32
 8002806:	4210      	tst	r0, r2
 8002808:	d15d      	bne.n	80028c6 <HAL_UART_IRQHandler+0xd2>
  cr3its = READ_REG(huart->Instance->CR3);
 800280a:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800280c:	2080      	movs	r0, #128	; 0x80
 800280e:	4210      	tst	r0, r2
 8002810:	d002      	beq.n	8002818 <HAL_UART_IRQHandler+0x24>
 8002812:	4208      	tst	r0, r1
 8002814:	d000      	beq.n	8002818 <HAL_UART_IRQHandler+0x24>
 8002816:	e085      	b.n	8002924 <HAL_UART_IRQHandler+0x130>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002818:	2040      	movs	r0, #64	; 0x40
 800281a:	4210      	tst	r0, r2
 800281c:	d002      	beq.n	8002824 <HAL_UART_IRQHandler+0x30>
 800281e:	4208      	tst	r0, r1
 8002820:	d000      	beq.n	8002824 <HAL_UART_IRQHandler+0x30>
 8002822:	e06f      	b.n	8002904 <HAL_UART_IRQHandler+0x110>
}
 8002824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002826:	2601      	movs	r6, #1
  cr3its = READ_REG(huart->Instance->CR3);
 8002828:	689d      	ldr	r5, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800282a:	4035      	ands	r5, r6
 800282c:	d056      	beq.n	80028dc <HAL_UART_IRQHandler+0xe8>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800282e:	2601      	movs	r6, #1
 8002830:	4216      	tst	r6, r2
 8002832:	d005      	beq.n	8002840 <HAL_UART_IRQHandler+0x4c>
 8002834:	05cf      	lsls	r7, r1, #23
 8002836:	d503      	bpl.n	8002840 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002838:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800283a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800283c:	433e      	orrs	r6, r7
 800283e:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002840:	2602      	movs	r6, #2
 8002842:	4216      	tst	r6, r2
 8002844:	d053      	beq.n	80028ee <HAL_UART_IRQHandler+0xfa>
 8002846:	2d00      	cmp	r5, #0
 8002848:	d006      	beq.n	8002858 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800284a:	2704      	movs	r7, #4
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800284c:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800284e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8002850:	433e      	orrs	r6, r7
 8002852:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002854:	4217      	tst	r7, r2
 8002856:	d14e      	bne.n	80028f6 <HAL_UART_IRQHandler+0x102>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002858:	0716      	lsls	r6, r2, #28
 800285a:	d503      	bpl.n	8002864 <HAL_UART_IRQHandler+0x70>
 800285c:	068e      	lsls	r6, r1, #26
 800285e:	d45b      	bmi.n	8002918 <HAL_UART_IRQHandler+0x124>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002860:	2d00      	cmp	r5, #0
 8002862:	d159      	bne.n	8002918 <HAL_UART_IRQHandler+0x124>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002864:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002866:	2d00      	cmp	r5, #0
 8002868:	d0dc      	beq.n	8002824 <HAL_UART_IRQHandler+0x30>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800286a:	2520      	movs	r5, #32
 800286c:	4215      	tst	r5, r2
 800286e:	d002      	beq.n	8002876 <HAL_UART_IRQHandler+0x82>
 8002870:	420d      	tst	r5, r1
 8002872:	d000      	beq.n	8002876 <HAL_UART_IRQHandler+0x82>
 8002874:	e09a      	b.n	80029ac <HAL_UART_IRQHandler+0x1b8>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002876:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002878:	071b      	lsls	r3, r3, #28
 800287a:	d404      	bmi.n	8002886 <HAL_UART_IRQHandler+0x92>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800287c:	2540      	movs	r5, #64	; 0x40
 800287e:	6883      	ldr	r3, [r0, #8]
 8002880:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002882:	d100      	bne.n	8002886 <HAL_UART_IRQHandler+0x92>
 8002884:	e09b      	b.n	80029be <HAL_UART_IRQHandler+0x1ca>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002886:	6803      	ldr	r3, [r0, #0]
 8002888:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_UART_IRQHandler+0x270>)
 800288a:	4013      	ands	r3, r2
 800288c:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288e:	6883      	ldr	r3, [r0, #8]
 8002890:	3223      	adds	r2, #35	; 0x23
 8002892:	32ff      	adds	r2, #255	; 0xff
 8002894:	4393      	bics	r3, r2
 8002896:	6083      	str	r3, [r0, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002898:	236a      	movs	r3, #106	; 0x6a
 800289a:	321f      	adds	r2, #31
 800289c:	54e2      	strb	r2, [r4, r3]
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289e:	6883      	ldr	r3, [r0, #8]
 80028a0:	3220      	adds	r2, #32
 80028a2:	421a      	tst	r2, r3
 80028a4:	d057      	beq.n	8002956 <HAL_UART_IRQHandler+0x162>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a6:	6883      	ldr	r3, [r0, #8]
 80028a8:	4393      	bics	r3, r2
 80028aa:	6083      	str	r3, [r0, #8]
          if(huart->hdmarx != NULL)
 80028ac:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d051      	beq.n	8002956 <HAL_UART_IRQHandler+0x162>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028b2:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <HAL_UART_IRQHandler+0x274>)
 80028b4:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028b6:	f7fe fe15 	bl	80014e4 <HAL_DMA_Abort_IT>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d0b2      	beq.n	8002824 <HAL_UART_IRQHandler+0x30>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028be:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80028c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028c2:	4798      	blx	r3
 80028c4:	e7ae      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028c6:	4208      	tst	r0, r1
 80028c8:	d09f      	beq.n	800280a <HAL_UART_IRQHandler+0x16>
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ca:	226a      	movs	r2, #106	; 0x6a
 80028cc:	5ca2      	ldrb	r2, [r4, r2]
 80028ce:	2a22      	cmp	r2, #34	; 0x22
 80028d0:	d045      	beq.n	800295e <HAL_UART_IRQHandler+0x16a>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80028d2:	2108      	movs	r1, #8
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	619a      	str	r2, [r3, #24]
 80028da:	e7a3      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80028dc:	2690      	movs	r6, #144	; 0x90
 80028de:	0076      	lsls	r6, r6, #1
 80028e0:	4231      	tst	r1, r6
 80028e2:	d100      	bne.n	80028e6 <HAL_UART_IRQHandler+0xf2>
 80028e4:	e792      	b.n	800280c <HAL_UART_IRQHandler+0x18>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028e6:	2601      	movs	r6, #1
 80028e8:	4216      	tst	r6, r2
 80028ea:	d0a9      	beq.n	8002840 <HAL_UART_IRQHandler+0x4c>
 80028ec:	e7a2      	b.n	8002834 <HAL_UART_IRQHandler+0x40>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ee:	0756      	lsls	r6, r2, #29
 80028f0:	d5b2      	bpl.n	8002858 <HAL_UART_IRQHandler+0x64>
 80028f2:	2d00      	cmp	r5, #0
 80028f4:	d0b0      	beq.n	8002858 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80028f6:	2604      	movs	r6, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028f8:	2702      	movs	r7, #2
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80028fa:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028fc:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80028fe:	433e      	orrs	r6, r7
 8002900:	66e6      	str	r6, [r4, #108]	; 0x6c
 8002902:	e7a9      	b.n	8002858 <HAL_UART_IRQHandler+0x64>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4382      	bics	r2, r0
 8002908:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800290a:	2220      	movs	r2, #32
 800290c:	2369      	movs	r3, #105	; 0x69
  HAL_UART_TxCpltCallback(huart);
 800290e:	0020      	movs	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8002910:	54e2      	strb	r2, [r4, r3]
  HAL_UART_TxCpltCallback(huart);
 8002912:	f000 fa35 	bl	8002d80 <HAL_UART_TxCpltCallback>
 8002916:	e785      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002918:	2608      	movs	r6, #8
 800291a:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800291c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800291e:	4335      	orrs	r5, r6
 8002920:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002922:	e79f      	b.n	8002864 <HAL_UART_IRQHandler+0x70>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002924:	2269      	movs	r2, #105	; 0x69
 8002926:	5ca2      	ldrb	r2, [r4, r2]
 8002928:	2a21      	cmp	r2, #33	; 0x21
 800292a:	d000      	beq.n	800292e <HAL_UART_IRQHandler+0x13a>
 800292c:	e77a      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
    if(huart->TxXferCount == 0U)
 800292e:	3231      	adds	r2, #49	; 0x31
 8002930:	5aa2      	ldrh	r2, [r4, r2]
 8002932:	2a00      	cmp	r2, #0
 8002934:	d060      	beq.n	80029f8 <HAL_UART_IRQHandler+0x204>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	68a1      	ldr	r1, [r4, #8]
 800293a:	0152      	lsls	r2, r2, #5
 800293c:	4291      	cmp	r1, r2
 800293e:	d06c      	beq.n	8002a1a <HAL_UART_IRQHandler+0x226>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002940:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002942:	1c51      	adds	r1, r2, #1
 8002944:	64e1      	str	r1, [r4, #76]	; 0x4c
 8002946:	7812      	ldrb	r2, [r2, #0]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800294a:	2252      	movs	r2, #82	; 0x52
 800294c:	5aa3      	ldrh	r3, [r4, r2]
 800294e:	3b01      	subs	r3, #1
 8002950:	b29b      	uxth	r3, r3
 8002952:	52a3      	strh	r3, [r4, r2]
 8002954:	e766      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
            HAL_UART_ErrorCallback(huart);
 8002956:	0020      	movs	r0, r4
 8002958:	f7ff ff0c 	bl	8002774 <HAL_UART_ErrorCallback>
 800295c:	e762      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
  uint16_t  uhMask = huart->Mask;
 800295e:	323a      	adds	r2, #58	; 0x3a
 8002960:	5aa1      	ldrh	r1, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002962:	2280      	movs	r2, #128	; 0x80
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002964:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002966:	68a0      	ldr	r0, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002968:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800296a:	0152      	lsls	r2, r2, #5
 800296c:	4290      	cmp	r0, r2
 800296e:	d04b      	beq.n	8002a08 <HAL_UART_IRQHandler+0x214>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002970:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002972:	400b      	ands	r3, r1
 8002974:	1c50      	adds	r0, r2, #1
 8002976:	6560      	str	r0, [r4, #84]	; 0x54
 8002978:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 800297a:	225a      	movs	r2, #90	; 0x5a
 800297c:	5aa3      	ldrh	r3, [r4, r2]
 800297e:	3b01      	subs	r3, #1
 8002980:	b29b      	uxth	r3, r3
 8002982:	52a3      	strh	r3, [r4, r2]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d000      	beq.n	800298a <HAL_UART_IRQHandler+0x196>
 8002988:	e74c      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	4935      	ldr	r1, [pc, #212]	; (8002a64 <HAL_UART_IRQHandler+0x270>)
 800298e:	681a      	ldr	r2, [r3, #0]
      HAL_UART_RxCpltCallback(huart);
 8002990:	0020      	movs	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002992:	400a      	ands	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	3123      	adds	r1, #35	; 0x23
 800299a:	31ff      	adds	r1, #255	; 0xff
 800299c:	438a      	bics	r2, r1
 800299e:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80029a0:	2220      	movs	r2, #32
 80029a2:	236a      	movs	r3, #106	; 0x6a
 80029a4:	54e2      	strb	r2, [r4, r3]
      HAL_UART_RxCpltCallback(huart);
 80029a6:	f000 f9c3 	bl	8002d30 <HAL_UART_RxCpltCallback>
 80029aa:	e73b      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029ac:	226a      	movs	r2, #106	; 0x6a
 80029ae:	5ca2      	ldrb	r2, [r4, r2]
 80029b0:	2a22      	cmp	r2, #34	; 0x22
 80029b2:	d009      	beq.n	80029c8 <HAL_UART_IRQHandler+0x1d4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80029b4:	2108      	movs	r1, #8
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	619a      	str	r2, [r3, #24]
 80029bc:	e75b      	b.n	8002876 <HAL_UART_IRQHandler+0x82>
        HAL_UART_ErrorCallback(huart);
 80029be:	0020      	movs	r0, r4
 80029c0:	f7ff fed8 	bl	8002774 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80029c6:	e72d      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c8:	2080      	movs	r0, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80029ca:	323a      	adds	r2, #58	; 0x3a
 80029cc:	5aa1      	ldrh	r1, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ce:	68a5      	ldr	r5, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80029d0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d2:	0140      	lsls	r0, r0, #5
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80029d4:	b292      	uxth	r2, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d6:	4285      	cmp	r5, r0
 80029d8:	d03b      	beq.n	8002a52 <HAL_UART_IRQHandler+0x25e>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80029da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029dc:	400a      	ands	r2, r1
 80029de:	1c58      	adds	r0, r3, #1
 80029e0:	6560      	str	r0, [r4, #84]	; 0x54
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0U)
 80029e6:	215a      	movs	r1, #90	; 0x5a
 80029e8:	5a62      	ldrh	r2, [r4, r1]
 80029ea:	3a01      	subs	r2, #1
 80029ec:	b292      	uxth	r2, r2
 80029ee:	5262      	strh	r2, [r4, r1]
 80029f0:	2a00      	cmp	r2, #0
 80029f2:	d01d      	beq.n	8002a30 <HAL_UART_IRQHandler+0x23c>
 80029f4:	0018      	movs	r0, r3
 80029f6:	e73e      	b.n	8002876 <HAL_UART_IRQHandler+0x82>
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80029f8:	2140      	movs	r1, #64	; 0x40
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4382      	bics	r2, r0
 80029fe:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e70d      	b.n	8002824 <HAL_UART_IRQHandler+0x30>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a08:	6922      	ldr	r2, [r4, #16]
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	d1b0      	bne.n	8002970 <HAL_UART_IRQHandler+0x17c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002a0e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8002a10:	400b      	ands	r3, r1
 8002a12:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2U;
 8002a14:	3202      	adds	r2, #2
 8002a16:	6562      	str	r2, [r4, #84]	; 0x54
 8002a18:	e7af      	b.n	800297a <HAL_UART_IRQHandler+0x186>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1a:	6922      	ldr	r2, [r4, #16]
 8002a1c:	2a00      	cmp	r2, #0
 8002a1e:	d18f      	bne.n	8002940 <HAL_UART_IRQHandler+0x14c>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002a20:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a22:	880a      	ldrh	r2, [r1, #0]
        huart->pTxBuffPtr += 2U;
 8002a24:	3102      	adds	r1, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a26:	05d2      	lsls	r2, r2, #23
 8002a28:	0dd2      	lsrs	r2, r2, #23
 8002a2a:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002a2c:	64e1      	str	r1, [r4, #76]	; 0x4c
 8002a2e:	e78c      	b.n	800294a <HAL_UART_IRQHandler+0x156>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	490c      	ldr	r1, [pc, #48]	; (8002a64 <HAL_UART_IRQHandler+0x270>)
      HAL_UART_RxCpltCallback(huart);
 8002a34:	0020      	movs	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a36:	400a      	ands	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	3123      	adds	r1, #35	; 0x23
 8002a3e:	31ff      	adds	r1, #255	; 0xff
 8002a40:	438a      	bics	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002a44:	2220      	movs	r2, #32
 8002a46:	236a      	movs	r3, #106	; 0x6a
 8002a48:	54e2      	strb	r2, [r4, r3]
      HAL_UART_RxCpltCallback(huart);
 8002a4a:	f000 f971 	bl	8002d30 <HAL_UART_RxCpltCallback>
 8002a4e:	6820      	ldr	r0, [r4, #0]
 8002a50:	e711      	b.n	8002876 <HAL_UART_IRQHandler+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a52:	6920      	ldr	r0, [r4, #16]
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d1c0      	bne.n	80029da <HAL_UART_IRQHandler+0x1e6>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	8002      	strh	r2, [r0, #0]
      huart->pRxBuffPtr +=2U;
 8002a5e:	3002      	adds	r0, #2
 8002a60:	6560      	str	r0, [r4, #84]	; 0x54
 8002a62:	e7c0      	b.n	80029e6 <HAL_UART_IRQHandler+0x1f2>
 8002a64:	fffffedf 	.word	0xfffffedf
 8002a68:	080027e1 	.word	0x080027e1

08002a6c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002a6e:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a70:	07da      	lsls	r2, r3, #31
 8002a72:	d506      	bpl.n	8002a82 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a74:	6801      	ldr	r1, [r0, #0]
 8002a76:	4c28      	ldr	r4, [pc, #160]	; (8002b18 <UART_AdvFeatureConfig+0xac>)
 8002a78:	684a      	ldr	r2, [r1, #4]
 8002a7a:	4022      	ands	r2, r4
 8002a7c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002a7e:	4322      	orrs	r2, r4
 8002a80:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a82:	079a      	lsls	r2, r3, #30
 8002a84:	d506      	bpl.n	8002a94 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a86:	6801      	ldr	r1, [r0, #0]
 8002a88:	4c24      	ldr	r4, [pc, #144]	; (8002b1c <UART_AdvFeatureConfig+0xb0>)
 8002a8a:	684a      	ldr	r2, [r1, #4]
 8002a8c:	4022      	ands	r2, r4
 8002a8e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a90:	4322      	orrs	r2, r4
 8002a92:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a94:	075a      	lsls	r2, r3, #29
 8002a96:	d506      	bpl.n	8002aa6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a98:	6801      	ldr	r1, [r0, #0]
 8002a9a:	4c21      	ldr	r4, [pc, #132]	; (8002b20 <UART_AdvFeatureConfig+0xb4>)
 8002a9c:	684a      	ldr	r2, [r1, #4]
 8002a9e:	4022      	ands	r2, r4
 8002aa0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002aa2:	4322      	orrs	r2, r4
 8002aa4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aa6:	071a      	lsls	r2, r3, #28
 8002aa8:	d506      	bpl.n	8002ab8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aaa:	6801      	ldr	r1, [r0, #0]
 8002aac:	4c1d      	ldr	r4, [pc, #116]	; (8002b24 <UART_AdvFeatureConfig+0xb8>)
 8002aae:	684a      	ldr	r2, [r1, #4]
 8002ab0:	4022      	ands	r2, r4
 8002ab2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002ab4:	4322      	orrs	r2, r4
 8002ab6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ab8:	06da      	lsls	r2, r3, #27
 8002aba:	d506      	bpl.n	8002aca <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002abc:	6801      	ldr	r1, [r0, #0]
 8002abe:	4c1a      	ldr	r4, [pc, #104]	; (8002b28 <UART_AdvFeatureConfig+0xbc>)
 8002ac0:	688a      	ldr	r2, [r1, #8]
 8002ac2:	4022      	ands	r2, r4
 8002ac4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002ac6:	4322      	orrs	r2, r4
 8002ac8:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aca:	069a      	lsls	r2, r3, #26
 8002acc:	d506      	bpl.n	8002adc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ace:	6801      	ldr	r1, [r0, #0]
 8002ad0:	4c16      	ldr	r4, [pc, #88]	; (8002b2c <UART_AdvFeatureConfig+0xc0>)
 8002ad2:	688a      	ldr	r2, [r1, #8]
 8002ad4:	4022      	ands	r2, r4
 8002ad6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002ad8:	4322      	orrs	r2, r4
 8002ada:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002adc:	065a      	lsls	r2, r3, #25
 8002ade:	d50a      	bpl.n	8002af6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ae0:	6801      	ldr	r1, [r0, #0]
 8002ae2:	4d13      	ldr	r5, [pc, #76]	; (8002b30 <UART_AdvFeatureConfig+0xc4>)
 8002ae4:	684a      	ldr	r2, [r1, #4]
 8002ae6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ae8:	402a      	ands	r2, r5
 8002aea:	4322      	orrs	r2, r4
 8002aec:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	0352      	lsls	r2, r2, #13
 8002af2:	4294      	cmp	r4, r2
 8002af4:	d009      	beq.n	8002b0a <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002af6:	061b      	lsls	r3, r3, #24
 8002af8:	d506      	bpl.n	8002b08 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002afa:	6802      	ldr	r2, [r0, #0]
 8002afc:	490d      	ldr	r1, [pc, #52]	; (8002b34 <UART_AdvFeatureConfig+0xc8>)
 8002afe:	6853      	ldr	r3, [r2, #4]
 8002b00:	400b      	ands	r3, r1
 8002b02:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6053      	str	r3, [r2, #4]
}
 8002b08:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b0a:	684a      	ldr	r2, [r1, #4]
 8002b0c:	4c0a      	ldr	r4, [pc, #40]	; (8002b38 <UART_AdvFeatureConfig+0xcc>)
 8002b0e:	4022      	ands	r2, r4
 8002b10:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b12:	4322      	orrs	r2, r4
 8002b14:	604a      	str	r2, [r1, #4]
 8002b16:	e7ee      	b.n	8002af6 <UART_AdvFeatureConfig+0x8a>
 8002b18:	fffdffff 	.word	0xfffdffff
 8002b1c:	fffeffff 	.word	0xfffeffff
 8002b20:	fffbffff 	.word	0xfffbffff
 8002b24:	ffff7fff 	.word	0xffff7fff
 8002b28:	ffffefff 	.word	0xffffefff
 8002b2c:	ffffdfff 	.word	0xffffdfff
 8002b30:	ffefffff 	.word	0xffefffff
 8002b34:	fff7ffff 	.word	0xfff7ffff
 8002b38:	ff9fffff 	.word	0xff9fffff

08002b3c <HAL_UART_Init>:
{
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8002b40:	d100      	bne.n	8002b44 <HAL_UART_Init+0x8>
 8002b42:	e082      	b.n	8002c4a <HAL_UART_Init+0x10e>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002b44:	2369      	movs	r3, #105	; 0x69
 8002b46:	5cc3      	ldrb	r3, [r0, r3]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d078      	beq.n	8002c40 <HAL_UART_Init+0x104>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	2369      	movs	r3, #105	; 0x69
  __HAL_UART_DISABLE(huart);
 8002b52:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b54:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8002b56:	682b      	ldr	r3, [r5, #0]
 8002b58:	3a23      	subs	r2, #35	; 0x23
 8002b5a:	4393      	bics	r3, r2
 8002b5c:	602b      	str	r3, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b5e:	6920      	ldr	r0, [r4, #16]
 8002b60:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002b62:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b64:	4303      	orrs	r3, r0
 8002b66:	6960      	ldr	r0, [r4, #20]
 8002b68:	69e2      	ldr	r2, [r4, #28]
 8002b6a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002b6c:	484d      	ldr	r0, [pc, #308]	; (8002ca4 <HAL_UART_Init+0x168>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b6e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002b70:	4001      	ands	r1, r0
 8002b72:	430b      	orrs	r3, r1
 8002b74:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b76:	686b      	ldr	r3, [r5, #4]
 8002b78:	494b      	ldr	r1, [pc, #300]	; (8002ca8 <HAL_UART_Init+0x16c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002b7a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	68e1      	ldr	r1, [r4, #12]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002b84:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002b86:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002b88:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002b8a:	4848      	ldr	r0, [pc, #288]	; (8002cac <HAL_UART_Init+0x170>)
 8002b8c:	4001      	ands	r1, r0
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_UART_Init+0x174>)
 8002b94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b96:	2303      	movs	r3, #3
 8002b98:	400b      	ands	r3, r1
 8002b9a:	4946      	ldr	r1, [pc, #280]	; (8002cb4 <HAL_UART_Init+0x178>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	0209      	lsls	r1, r1, #8
 8002ba2:	428a      	cmp	r2, r1
 8002ba4:	d02d      	beq.n	8002c02 <HAL_UART_Init+0xc6>
    switch (clocksource)
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d063      	beq.n	8002c72 <HAL_UART_Init+0x136>
 8002baa:	d950      	bls.n	8002c4e <HAL_UART_Init+0x112>
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d056      	beq.n	8002c5e <HAL_UART_Init+0x122>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d14a      	bne.n	8002c4a <HAL_UART_Init+0x10e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002bb4:	6863      	ldr	r3, [r4, #4]
 8002bb6:	0858      	lsrs	r0, r3, #1
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	469c      	mov	ip, r3
 8002bbe:	4460      	add	r0, ip
 8002bc0:	6861      	ldr	r1, [r4, #4]
 8002bc2:	f7fd faa9 	bl	8000118 <__udivsi3>
 8002bc6:	0400      	lsls	r0, r0, #16
 8002bc8:	0c00      	lsrs	r0, r0, #16
 8002bca:	60e8      	str	r0, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d132      	bne.n	8002c38 <HAL_UART_Init+0xfc>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	4938      	ldr	r1, [pc, #224]	; (8002cb8 <HAL_UART_Init+0x17c>)
 8002bd6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002bd8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002bda:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002bdc:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	438a      	bics	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	3907      	subs	r1, #7
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
  huart->gState  = HAL_UART_STATE_READY;
 8002bee:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002bf2:	3168      	adds	r1, #104	; 0x68
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf4:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->gState  = HAL_UART_STATE_READY;
 8002bf6:	5462      	strb	r2, [r4, r1]
  huart->RxState = HAL_UART_STATE_READY;
 8002bf8:	3101      	adds	r1, #1
 8002bfa:	5462      	strb	r2, [r4, r1]
  __HAL_UNLOCK(huart);
 8002bfc:	3248      	adds	r2, #72	; 0x48
 8002bfe:	54a3      	strb	r3, [r4, r2]
  return (UART_CheckIdleState(huart));
 8002c00:	e024      	b.n	8002c4c <HAL_UART_Init+0x110>
    switch (clocksource)
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d031      	beq.n	8002c6a <HAL_UART_Init+0x12e>
 8002c06:	d948      	bls.n	8002c9a <HAL_UART_Init+0x15e>
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d03a      	beq.n	8002c82 <HAL_UART_Init+0x146>
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d134      	bne.n	8002c7a <HAL_UART_Init+0x13e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c10:	6863      	ldr	r3, [r4, #4]
 8002c12:	0858      	lsrs	r0, r3, #1
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	025b      	lsls	r3, r3, #9
 8002c18:	469c      	mov	ip, r3
 8002c1a:	6861      	ldr	r1, [r4, #4]
 8002c1c:	4460      	add	r0, ip
 8002c1e:	f7fd fa7b 	bl	8000118 <__udivsi3>
 8002c22:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 8002c24:	230f      	movs	r3, #15
 8002c26:	0002      	movs	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c28:	0700      	lsls	r0, r0, #28
    brrtemp = usartdiv & 0xFFF0U;
 8002c2a:	439a      	bics	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c2c:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8002c2e:	4310      	orrs	r0, r2
 8002c30:	60e8      	str	r0, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0cc      	beq.n	8002bd2 <HAL_UART_Init+0x96>
    UART_AdvFeatureConfig(huart);
 8002c38:	0020      	movs	r0, r4
 8002c3a:	f7ff ff17 	bl	8002a6c <UART_AdvFeatureConfig>
 8002c3e:	e7c8      	b.n	8002bd2 <HAL_UART_Init+0x96>
    huart->Lock = HAL_UNLOCKED;
 8002c40:	2268      	movs	r2, #104	; 0x68
 8002c42:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002c44:	f000 fb88 	bl	8003358 <HAL_UART_MspInit>
 8002c48:	e781      	b.n	8002b4e <HAL_UART_Init+0x12>
    return HAL_ERROR;
 8002c4a:	2001      	movs	r0, #1
}
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1fb      	bne.n	8002c4a <HAL_UART_Init+0x10e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c52:	f7ff f8f9 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002c56:	6863      	ldr	r3, [r4, #4]
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	1818      	adds	r0, r3, r0
 8002c5c:	e7b0      	b.n	8002bc0 <HAL_UART_Init+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c5e:	f7ff f8b9 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8002c62:	6863      	ldr	r3, [r4, #4]
 8002c64:	085b      	lsrs	r3, r3, #1
 8002c66:	1818      	adds	r0, r3, r0
 8002c68:	e7aa      	b.n	8002bc0 <HAL_UART_Init+0x84>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c6a:	6863      	ldr	r3, [r4, #4]
 8002c6c:	0858      	lsrs	r0, r3, #1
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_UART_Init+0x180>)
 8002c70:	e7d2      	b.n	8002c18 <HAL_UART_Init+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c72:	6863      	ldr	r3, [r4, #4]
 8002c74:	0858      	lsrs	r0, r3, #1
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_UART_Init+0x184>)
 8002c78:	e7a0      	b.n	8002bbc <HAL_UART_Init+0x80>
    huart->Instance->BRR = brrtemp;
 8002c7a:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002c7c:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8002c7e:	60eb      	str	r3, [r5, #12]
 8002c80:	e7e4      	b.n	8002c4c <HAL_UART_Init+0x110>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c82:	f7ff f8a7 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8002c86:	6863      	ldr	r3, [r4, #4]
 8002c88:	0040      	lsls	r0, r0, #1
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	18c0      	adds	r0, r0, r3
 8002c8e:	6861      	ldr	r1, [r4, #4]
 8002c90:	f7fd fa42 	bl	8000118 <__udivsi3>
 8002c94:	6825      	ldr	r5, [r4, #0]
 8002c96:	b280      	uxth	r0, r0
 8002c98:	e7c4      	b.n	8002c24 <HAL_UART_Init+0xe8>
    switch (clocksource)
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ed      	bne.n	8002c7a <HAL_UART_Init+0x13e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c9e:	f7ff f8d3 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002ca2:	e7f0      	b.n	8002c86 <HAL_UART_Init+0x14a>
 8002ca4:	ffff69f3 	.word	0xffff69f3
 8002ca8:	ffffcfff 	.word	0xffffcfff
 8002cac:	fffff4ff 	.word	0xfffff4ff
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	080044f0 	.word	0x080044f0
 8002cb8:	fffff7ff 	.word	0xfffff7ff
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	007a1200 	.word	0x007a1200

08002cc4 <get_current_potentiometer>:

#include "function.h"
#include "variables.h"
#define R 155		// Resistor chosen in H-brigde circuit to transform proportional current to a voltage

void get_current_potentiometer(){
 8002cc4:	b570      	push	{r4, r5, r6, lr}

	sampledPotentiometer_prev = sampledPotentiometer;
 8002cc6:	4c12      	ldr	r4, [pc, #72]	; (8002d10 <get_current_potentiometer+0x4c>)
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <get_current_potentiometer+0x50>)
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	601a      	str	r2, [r3, #0]
	sampledCurrent = ADC_buffer[1];
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <get_current_potentiometer+0x54>)
 8002cd0:	6819      	ldr	r1, [r3, #0]
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <get_current_potentiometer+0x58>)
 8002cd4:	684a      	ldr	r2, [r1, #4]
 8002cd6:	601a      	str	r2, [r3, #0]

	if( (int8_t)(sampledPotentiometer_prev - *ADC_buffer) > 15 || (int8_t)(*ADC_buffer - sampledPotentiometer_prev) > 15 ){
 8002cd8:	680d      	ldr	r5, [r1, #0]
 8002cda:	7823      	ldrb	r3, [r4, #0]
 8002cdc:	b2e9      	uxtb	r1, r5
 8002cde:	1a58      	subs	r0, r3, r1
 8002ce0:	b240      	sxtb	r0, r0
 8002ce2:	280f      	cmp	r0, #15
 8002ce4:	dc03      	bgt.n	8002cee <get_current_potentiometer+0x2a>
 8002ce6:	1acb      	subs	r3, r1, r3
 8002ce8:	b25b      	sxtb	r3, r3
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	dd00      	ble.n	8002cf0 <get_current_potentiometer+0x2c>
		sampledPotentiometer = ADC_buffer[0];
 8002cee:	6025      	str	r5, [r4, #0]

	//if (q1_new - prev_q1 > 0.05 || prev_q1 - q1_new > 0.05){
	//	q1 = q1_new;
	//}

	torque = (sampledCurrent<<9);
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <get_current_potentiometer+0x5c>)
//	q1dot = (prevprev_q1 - prev_q1<<2+3*q1)/(time<<2); // time variable needs to change




	sprintf(send_torque,"%lu", sampledCurrent);
 8002cf4:	4d0b      	ldr	r5, [pc, #44]	; (8002d24 <get_current_potentiometer+0x60>)
	torque = (sampledCurrent<<9);
 8002cf6:	7019      	strb	r1, [r3, #0]
	sprintf(send_torque,"%lu", sampledCurrent);
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <get_current_potentiometer+0x64>)
 8002cfa:	0029      	movs	r1, r5
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	f000 ff3b 	bl	8003b78 <siprintf>
	sprintf(send_q1,"%lu", sampledPotentiometer);
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <get_current_potentiometer+0x68>)
 8002d04:	0029      	movs	r1, r5
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	f000 ff35 	bl	8003b78 <siprintf>
	// Do conversion equation to get 'real' value



	// store in buffer to be send across UART
}
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	20000238 	.word	0x20000238
 8002d14:	2000023c 	.word	0x2000023c
 8002d18:	20000204 	.word	0x20000204
 8002d1c:	20000234 	.word	0x20000234
 8002d20:	2000026c 	.word	0x2000026c
 8002d24:	080044f4 	.word	0x080044f4
 8002d28:	20000250 	.word	0x20000250
 8002d2c:	20000244 	.word	0x20000244

08002d30 <HAL_UART_RxCpltCallback>:
#define KI


// interrupt when byte is received on UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	uart_flag = 1;
 8002d30:	2201      	movs	r2, #1
 8002d32:	4b01      	ldr	r3, [pc, #4]	; (8002d38 <HAL_UART_RxCpltCallback+0x8>)
 8002d34:	701a      	strb	r2, [r3, #0]
}
 8002d36:	4770      	bx	lr
 8002d38:	20000274 	.word	0x20000274

08002d3c <HAL_GPIO_EXTI_Callback>:

//interrupt when encoder is experiencing an rising or falling edge
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	encoder_flag = 1;
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <HAL_GPIO_EXTI_Callback+0x8>)
 8002d40:	701a      	strb	r2, [r3, #0]

}
 8002d42:	4770      	bx	lr
 8002d44:	20000213 	.word	0x20000213

08002d48 <HAL_TIM_PeriodElapsedCallback>:

//	if(htim->Instance == htim16.Instance){
//		send_data_flag = 1;
//	}
//	else if(htim->Instance == htim14.Instance){
		adc_flag = 1;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	4a02      	ldr	r2, [pc, #8]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8002d4c:	7013      	strb	r3, [r2, #0]
		data_flag = 1;
 8002d4e:	4a02      	ldr	r2, [pc, #8]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002d50:	7013      	strb	r3, [r2, #0]
//	}

}
 8002d52:	4770      	bx	lr
 8002d54:	20000208 	.word	0x20000208
 8002d58:	20000210 	.word	0x20000210

08002d5c <HAL_TIM_OC_DelayElapsedCallback>:
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4b01      	ldr	r3, [pc, #4]	; (8002d64 <HAL_TIM_OC_DelayElapsedCallback+0x8>)
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	4770      	bx	lr
 8002d64:	20000218 	.word	0x20000218

08002d68 <HAL_TIM_IC_CaptureCallback>:
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4b01      	ldr	r3, [pc, #4]	; (8002d70 <HAL_TIM_IC_CaptureCallback+0x8>)
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	4770      	bx	lr
 8002d70:	20000218 	.word	0x20000218

08002d74 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	pwm_flag = 1;
 8002d74:	2201      	movs	r2, #1
 8002d76:	4b01      	ldr	r3, [pc, #4]	; (8002d7c <HAL_TIM_PWM_PulseFinishedCallback+0x8>)
 8002d78:	701a      	strb	r2, [r3, #0]
}
 8002d7a:	4770      	bx	lr
 8002d7c:	20000218 	.word	0x20000218

08002d80 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
	memset(rx_buffer,0x00, 16);
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_UART_TxCpltCallback+0x28>)
void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 8002d82:	b510      	push	{r4, lr}
	memset(rx_buffer,0x00, 16);
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	2210      	movs	r2, #16
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f000 fe24 	bl	80039d6 <memset>
	memset(rx_buffer_copy,0x00, 16);
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <HAL_UART_TxCpltCallback+0x2c>)
 8002d90:	2210      	movs	r2, #16
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	2100      	movs	r1, #0
 8002d96:	f000 fe1e 	bl	80039d6 <memset>
//	rx_buffer_cntr = 0;
	memset(data_buffer,0x00,40);
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_UART_TxCpltCallback+0x30>)
 8002d9c:	2228      	movs	r2, #40	; 0x28
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	2100      	movs	r1, #0
 8002da2:	f000 fe18 	bl	80039d6 <memset>
}
 8002da6:	bd10      	pop	{r4, pc}
 8002da8:	20000224 	.word	0x20000224
 8002dac:	2000022c 	.word	0x2000022c
 8002db0:	2000020c 	.word	0x2000020c

08002db4 <read_motor_position>:


void read_motor_position(){
 8002db4:	b510      	push	{r4, lr}

	//prevprev_q2 = prev_q2;
	//prev_q2 = q2;

	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8002db6:	2120      	movs	r1, #32
 8002db8:	4808      	ldr	r0, [pc, #32]	; (8002ddc <read_motor_position+0x28>)
 8002dba:	f7fe fce9 	bl	8001790 <HAL_GPIO_ReadPin>
		q2_steps -= 1;
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <read_motor_position+0x2c>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin) == 1){ // actuated pendulum is turning clockwise
 8002dc2:	2801      	cmp	r0, #1
 8002dc4:	d007      	beq.n	8002dd6 <read_motor_position+0x22>
		//q2 = q2_steps*dir_increment_size;
	}
	else{ // actuated pendulum is turning anti-clockwise
		q2_steps += 1;
 8002dc6:	3201      	adds	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
		//q2 = q2_steps*dir_increment_size;
	}
	sprintf(send_q2,"%d", q2_steps);
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <read_motor_position+0x30>)
 8002dcc:	4906      	ldr	r1, [pc, #24]	; (8002de8 <read_motor_position+0x34>)
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	f000 fed2 	bl	8003b78 <siprintf>

	//three point backward difference
//	q2dot = (prevprev_q2 - prev_q2<<2+3*q2)/(2*time); // time variable needs to change

}
 8002dd4:	bd10      	pop	{r4, pc}
		q2_steps -= 1;
 8002dd6:	3a01      	subs	r2, #1
 8002dd8:	e7f6      	b.n	8002dc8 <read_motor_position+0x14>
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	48000400 	.word	0x48000400
 8002de0:	2000021c 	.word	0x2000021c
 8002de4:	20000248 	.word	0x20000248
 8002de8:	080044f8 	.word	0x080044f8

08002dec <output_torque>:

void output_torque(uint8_t dir, uint8_t duty_cycle){
 8002dec:	0002      	movs	r2, r0
//	if(duty_cycle < 30){ // safety percaustion to ensure safety
//		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100 ); // stop motor
//
//	}
//	else{
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,dir);
 8002dee:	2090      	movs	r0, #144	; 0x90
void output_torque(uint8_t dir, uint8_t duty_cycle){
 8002df0:	b510      	push	{r4, lr}
 8002df2:	000c      	movs	r4, r1
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port,MOTOR_DIR_Pin,dir);
 8002df4:	05c0      	lsls	r0, r0, #23
 8002df6:	2120      	movs	r1, #32
 8002df8:	f7fe fcd0 	bl	800179c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle );
 8002dfc:	4b01      	ldr	r3, [pc, #4]	; (8002e04 <output_torque+0x18>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	639c      	str	r4, [r3, #56]	; 0x38
//	}
}
 8002e02:	bd10      	pop	{r4, pc}
 8002e04:	2000028c 	.word	0x2000028c

08002e08 <startPeripherals>:
extern ADC_HandleTypeDef hadc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim16;

void startPeripherals(){
 8002e08:	b510      	push	{r4, lr}

	HAL_ADCEx_Calibration_Start(&hadc);					// Calibrate the ADC
 8002e0a:	4c10      	ldr	r4, [pc, #64]	; (8002e4c <startPeripherals+0x44>)
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	f7fe fa31 	bl	8001274 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, ADC_buffer, 2);			// Start to capture the ADC with DMA
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <startPeripherals+0x48>)
 8002e14:	2202      	movs	r2, #2
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	0020      	movs	r0, r4
 8002e1a:	f7fe f90b 	bl	8001034 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim14);						// Timer responsible for time-keeping and triggers system state to be send
 8002e1e:	480d      	ldr	r0, [pc, #52]	; (8002e54 <startPeripherals+0x4c>)
 8002e20:	f7ff f910 	bl	8002044 <HAL_TIM_Base_Start_IT>
	//HAL_TIM_Base_Start_IT(&htim16);						// Timer responsible for time-keeping and triggers system state to be send
	HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);			// Start the Timer Module with PWM
 8002e24:	4c0c      	ldr	r4, [pc, #48]	; (8002e58 <startPeripherals+0x50>)
 8002e26:	2104      	movs	r1, #4
 8002e28:	0020      	movs	r0, r4
 8002e2a:	f7ff f971 	bl	8002110 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8002e2e:	2200      	movs	r2, #0
 8002e30:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8002e32:	490a      	ldr	r1, [pc, #40]	; (8002e5c <startPeripherals+0x54>)
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);	// Set duty cycle of PWM signal to 0%
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);			// Set interrupt to receive byte over UART
 8002e36:	480a      	ldr	r0, [pc, #40]	; (8002e60 <startPeripherals+0x58>)
 8002e38:	3201      	adds	r2, #1
 8002e3a:	f7ff fbd1 	bl	80025e0 <HAL_UART_Receive_IT>


//	HAL_Delay(500);										// Delay for peripherals to settle
	HAL_GPIO_WritePin(DEBUG_LED1_GPIO_Port,DEBUG_LED1_Pin,1); // LED ON indicates system is ready
 8002e3e:	2090      	movs	r0, #144	; 0x90
 8002e40:	2201      	movs	r2, #1
 8002e42:	2108      	movs	r1, #8
 8002e44:	05c0      	lsls	r0, r0, #23
 8002e46:	f7fe fca9 	bl	800179c <HAL_GPIO_WritePin>

	//startval_sampledPotentiometer = ADC_buffer[1];

}
 8002e4a:	bd10      	pop	{r4, pc}
 8002e4c:	20000404 	.word	0x20000404
 8002e50:	20000204 	.word	0x20000204
 8002e54:	20000380 	.word	0x20000380
 8002e58:	2000028c 	.word	0x2000028c
 8002e5c:	20000230 	.word	0x20000230
 8002e60:	20000310 	.word	0x20000310

08002e64 <init_variables>:


void init_variables(){
 8002e64:	b570      	push	{r4, r5, r6, lr}

	rx_buffer = (uint8_t*)malloc(16*sizeof(uint8_t));
 8002e66:	2010      	movs	r0, #16
 8002e68:	f000 fda2 	bl	80039b0 <malloc>
 8002e6c:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <init_variables+0xc8>)
	memset(rx_buffer,0x00,32);
 8002e6e:	2220      	movs	r2, #32
 8002e70:	2100      	movs	r1, #0
	rx_buffer = (uint8_t*)malloc(16*sizeof(uint8_t));
 8002e72:	6018      	str	r0, [r3, #0]
	memset(rx_buffer,0x00,32);
 8002e74:	f000 fdaf 	bl	80039d6 <memset>

	rx_buffer_copy = (uint8_t*)malloc(16*sizeof(uint8_t));
 8002e78:	2010      	movs	r0, #16
 8002e7a:	f000 fd99 	bl	80039b0 <malloc>
 8002e7e:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <init_variables+0xcc>)
	memset(rx_buffer_copy,0x00,32);
 8002e80:	2220      	movs	r2, #32
 8002e82:	2100      	movs	r1, #0
	rx_buffer_copy = (uint8_t*)malloc(16*sizeof(uint8_t));
 8002e84:	6018      	str	r0, [r3, #0]
	memset(rx_buffer_copy,0x00,32);
 8002e86:	f000 fda6 	bl	80039d6 <memset>


	torque_received = (char*)malloc(8*sizeof(char));
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	2008      	movs	r0, #8
 8002e8e:	f000 fd61 	bl	8003954 <calloc>
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <init_variables+0xd0>)
	memset(torque_received,0x00,8);

	motor_dir = (char*)malloc(8*sizeof(char));
 8002e94:	2101      	movs	r1, #1
	torque_received = (char*)malloc(8*sizeof(char));
 8002e96:	6018      	str	r0, [r3, #0]
	motor_dir = (char*)malloc(8*sizeof(char));
 8002e98:	2008      	movs	r0, #8
 8002e9a:	f000 fd5b 	bl	8003954 <calloc>
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <init_variables+0xd4>)
	memset(motor_dir,0x00,8);


	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8002ea0:	2101      	movs	r1, #1
	motor_dir = (char*)malloc(8*sizeof(char));
 8002ea2:	6018      	str	r0, [r3, #0]
	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8002ea4:	2008      	movs	r0, #8
 8002ea6:	f000 fd55 	bl	8003954 <calloc>
 8002eaa:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <init_variables+0xd8>)
	memset(verification,0x00,8);

	// might to be larger to account for decimals
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 8002eac:	2101      	movs	r1, #1
	verification = (uint8_t*)malloc(8*sizeof(uint8_t));
 8002eae:	6018      	str	r0, [r3, #0]
	data_buffer = (uint8_t*)malloc(72*sizeof(uint8_t));
 8002eb0:	2048      	movs	r0, #72	; 0x48
 8002eb2:	f000 fd4f 	bl	8003954 <calloc>
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <init_variables+0xdc>)
 8002eb8:	0004      	movs	r4, r0
 8002eba:	6018      	str	r0, [r3, #0]
	memset(data_buffer,0x00,72);

	// forming dat structure to be send
	memcpy(data_buffer, dollar, strlen((char*)dollar));
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <init_variables+0xe0>)
 8002ebe:	681d      	ldr	r5, [r3, #0]
 8002ec0:	0028      	movs	r0, r5
 8002ec2:	f7fd f921 	bl	8000108 <strlen>
 8002ec6:	0029      	movs	r1, r5
 8002ec8:	0002      	movs	r2, r0
 8002eca:	0020      	movs	r0, r4
 8002ecc:	f000 fd7a 	bl	80039c4 <memcpy>


	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8002ed0:	2008      	movs	r0, #8
 8002ed2:	f000 fd6d 	bl	80039b0 <malloc>
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <init_variables+0xe4>)
	memset(ADC_buffer,0x00,2);

	//atan_vals = (float*)malloc(100*sizeof(double));
	//memset(atan_vals,0x00,100);

	scratchpad = (char*)malloc(5*sizeof(char));
 8002ed8:	2101      	movs	r1, #1
	ADC_buffer = (uint32_t*)malloc(2*sizeof(uint32_t));
 8002eda:	6018      	str	r0, [r3, #0]
	memset(ADC_buffer,0x00,2);
 8002edc:	2300      	movs	r3, #0
 8002ede:	8003      	strh	r3, [r0, #0]
	scratchpad = (char*)malloc(5*sizeof(char));
 8002ee0:	2005      	movs	r0, #5
 8002ee2:	f000 fd37 	bl	8003954 <calloc>
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <init_variables+0xe8>)
	memset(scratchpad,0x00,5);

	send_q1 = (char*)malloc(10*sizeof(char));
 8002ee8:	2101      	movs	r1, #1
	scratchpad = (char*)malloc(5*sizeof(char));
 8002eea:	6018      	str	r0, [r3, #0]
	send_q1 = (char*)malloc(10*sizeof(char));
 8002eec:	200a      	movs	r0, #10
 8002eee:	f000 fd31 	bl	8003954 <calloc>
 8002ef2:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <init_variables+0xec>)
	memset(send_q1,0x00,10);
	send_q2 = (char*)malloc(32*sizeof(char));
 8002ef4:	2101      	movs	r1, #1
	send_q1 = (char*)malloc(10*sizeof(char));
 8002ef6:	6018      	str	r0, [r3, #0]
	send_q2 = (char*)malloc(32*sizeof(char));
 8002ef8:	2020      	movs	r0, #32
 8002efa:	f000 fd2b 	bl	8003954 <calloc>
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <init_variables+0xf0>)
 8002f00:	0004      	movs	r4, r0
 8002f02:	6018      	str	r0, [r3, #0]
	memset(send_q2,0x00,32);
	send_torque = (char*)malloc(4*sizeof(char));
 8002f04:	2101      	movs	r1, #1
 8002f06:	2004      	movs	r0, #4
 8002f08:	f000 fd24 	bl	8003954 <calloc>
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <init_variables+0xf4>)
	memset(send_torque,0x00,4);
	send_time = (char*)malloc(4*sizeof(char));
 8002f0e:	2101      	movs	r1, #1
	send_torque = (char*)malloc(4*sizeof(char));
 8002f10:	6018      	str	r0, [r3, #0]
	send_time = (char*)malloc(4*sizeof(char));
 8002f12:	2004      	movs	r0, #4
 8002f14:	f000 fd1e 	bl	8003954 <calloc>
 8002f18:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <init_variables+0xf8>)
	memset(send_time,0x00,4);


	sprintf(send_q2,"%d", q2_steps);
 8002f1a:	4911      	ldr	r1, [pc, #68]	; (8002f60 <init_variables+0xfc>)
	send_time = (char*)malloc(4*sizeof(char));
 8002f1c:	6018      	str	r0, [r3, #0]
	sprintf(send_q2,"%d", q2_steps);
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <init_variables+0x100>)
 8002f20:	0020      	movs	r0, r4
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	f000 fe28 	bl	8003b78 <siprintf>

	// temporary, this should be done where the variables are measured

}
 8002f28:	bd70      	pop	{r4, r5, r6, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	20000224 	.word	0x20000224
 8002f30:	2000022c 	.word	0x2000022c
 8002f34:	20000270 	.word	0x20000270
 8002f38:	20000214 	.word	0x20000214
 8002f3c:	20000278 	.word	0x20000278
 8002f40:	2000020c 	.word	0x2000020c
 8002f44:	2000000c 	.word	0x2000000c
 8002f48:	20000204 	.word	0x20000204
 8002f4c:	20000240 	.word	0x20000240
 8002f50:	20000244 	.word	0x20000244
 8002f54:	20000248 	.word	0x20000248
 8002f58:	20000250 	.word	0x20000250
 8002f5c:	2000024c 	.word	0x2000024c
 8002f60:	080044f8 	.word	0x080044f8
 8002f64:	2000021c 	.word	0x2000021c

08002f68 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002f68:	2312      	movs	r3, #18
{
 8002f6a:	b530      	push	{r4, r5, lr}
 8002f6c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002f6e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002f70:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002f72:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f74:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002f76:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002f78:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f7a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f7c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002f7e:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f80:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f82:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002f84:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f86:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f88:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002f8a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002f8c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f8e:	f7fe fc17 	bl	80017c0 <HAL_RCC_OscConfig>
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d000      	beq.n	8002f98 <SystemClock_Config+0x30>
 8002f96:	e7fe      	b.n	8002f96 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f98:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f9a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f9c:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fa2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa4:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fa6:	f7fe fe43 	bl	8001c30 <HAL_RCC_ClockConfig>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d000      	beq.n	8002fb0 <SystemClock_Config+0x48>
 8002fae:	e7fe      	b.n	8002fae <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002fb0:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fb2:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fb4:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fb6:	f7fe ff57 	bl	8001e68 <HAL_RCCEx_PeriphCLKConfig>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d000      	beq.n	8002fc0 <SystemClock_Config+0x58>
 8002fbe:	e7fe      	b.n	8002fbe <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002fc0:	f7fe ff3c 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8002fc4:	21fa      	movs	r1, #250	; 0xfa
 8002fc6:	0089      	lsls	r1, r1, #2
 8002fc8:	f7fd f8a6 	bl	8000118 <__udivsi3>
 8002fcc:	f7fe f9e6 	bl	800139c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002fd0:	2004      	movs	r0, #4
 8002fd2:	f7fe f9ff 	bl	80013d4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4240      	negs	r0, r0
 8002fde:	f7fe f99f 	bl	8001320 <HAL_NVIC_SetPriority>
}
 8002fe2:	b015      	add	sp, #84	; 0x54
 8002fe4:	bd30      	pop	{r4, r5, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)

08002fe8 <main>:
{
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8002fec:	f7fd ff08 	bl	8000e00 <HAL_Init>
  SystemClock_Config();
 8002ff0:	f7ff ffba 	bl	8002f68 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	4c6c      	ldr	r4, [pc, #432]	; (80031a8 <main+0x1c0>)
 8002ff8:	0289      	lsls	r1, r1, #10
 8002ffa:	6962      	ldr	r2, [r4, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002ffc:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	430a      	orrs	r2, r1
 8003000:	6162      	str	r2, [r4, #20]
 8003002:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003004:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003008:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	6962      	ldr	r2, [r4, #20]
 8003010:	02c9      	lsls	r1, r1, #11
 8003012:	430a      	orrs	r2, r1
 8003014:	6162      	str	r2, [r4, #20]
 8003016:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003018:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	400b      	ands	r3, r1
 800301c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800301e:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003020:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003022:	f7fe fbbb 	bl	800179c <HAL_GPIO_WritePin>
  /*Configure GPIO pins : DEBUG_LED1_Pin DEBUG_LED2_Pin MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003026:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 800302c:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	a905      	add	r1, sp, #20
 8003030:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|DEBUG_LED2_Pin|MOTOR_DIR_Pin;
 8003032:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003034:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303a:	f7fe fac5 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Pin */
  GPIO_InitStruct.Pin = ENCODER_Pin;
 800303e:	2310      	movs	r3, #16
 8003040:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003042:	4b5a      	ldr	r3, [pc, #360]	; (80031ac <main+0x1c4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8003044:	a905      	add	r1, sp, #20
 8003046:	485a      	ldr	r0, [pc, #360]	; (80031b0 <main+0x1c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003048:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 800304c:	f7fe fabc 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8003050:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8003052:	a905      	add	r1, sp, #20
 8003054:	4856      	ldr	r0, [pc, #344]	; (80031b0 <main+0x1c8>)
  GPIO_InitStruct.Pin = DIR_Pin;
 8003056:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003058:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800305c:	f7fe fab4 	bl	80015c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003060:	2200      	movs	r2, #0
 8003062:	2100      	movs	r1, #0
 8003064:	2007      	movs	r0, #7
 8003066:	f7fe f95b 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800306a:	2007      	movs	r0, #7
 800306c:	f7fe f98c 	bl	8001388 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003070:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003072:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003074:	4333      	orrs	r3, r6
 8003076:	6163      	str	r3, [r4, #20]
 8003078:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800307a:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 800307c:	4033      	ands	r3, r6
 800307e:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003080:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003082:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003084:	f7fe f94c 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003088:	2009      	movs	r0, #9
 800308a:	f7fe f97d 	bl	8001388 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2101      	movs	r1, #1
 8003092:	200a      	movs	r0, #10
 8003094:	f7fe f944 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003098:	200a      	movs	r0, #10
 800309a:	f7fe f975 	bl	8001388 <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 800309e:	4c45      	ldr	r4, [pc, #276]	; (80031b4 <main+0x1cc>)
 80030a0:	4b45      	ldr	r3, [pc, #276]	; (80031b8 <main+0x1d0>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80030a2:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80030a4:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030a6:	2304      	movs	r3, #4
 80030a8:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030aa:	23c2      	movs	r3, #194	; 0xc2
 80030ac:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80030ae:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80030b0:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030b2:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80030b4:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80030b6:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80030b8:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 80030ba:	6226      	str	r6, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80030bc:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030be:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030c0:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 80030c2:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030c4:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80030c6:	f7fd ff0d 	bl	8000ee4 <HAL_ADC_Init>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d000      	beq.n	80030d0 <main+0xe8>
 80030ce:	e7fe      	b.n	80030ce <main+0xe6>
  sConfig.Channel = ADC_CHANNEL_8;
 80030d0:	2308      	movs	r3, #8
 80030d2:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	015b      	lsls	r3, r3, #5
 80030d8:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80030da:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030dc:	a905      	add	r1, sp, #20
 80030de:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80030e0:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030e2:	f7fe f843 	bl	800116c <HAL_ADC_ConfigChannel>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d000      	beq.n	80030ec <main+0x104>
 80030ea:	e7fe      	b.n	80030ea <main+0x102>
  sConfig.Channel = ADC_CHANNEL_9;
 80030ec:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030ee:	a905      	add	r1, sp, #20
 80030f0:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 80030f2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030f4:	f7fe f83a 	bl	800116c <HAL_ADC_ConfigChannel>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d000      	beq.n	80030fe <main+0x116>
 80030fc:	e7fe      	b.n	80030fc <main+0x114>
  huart1.Instance = USART1;
 80030fe:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <main+0x1d4>)
 8003100:	4a2f      	ldr	r2, [pc, #188]	; (80031c0 <main+0x1d8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003102:	6098      	str	r0, [r3, #8]
  huart1.Instance = USART1;
 8003104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003106:	22e1      	movs	r2, #225	; 0xe1
 8003108:	0252      	lsls	r2, r2, #9
 800310a:	605a      	str	r2, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800310c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800310e:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003110:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003112:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003114:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003116:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003118:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800311a:	0018      	movs	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800311c:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800311e:	f7ff fd0d 	bl	8002b3c <HAL_UART_Init>
 8003122:	2800      	cmp	r0, #0
 8003124:	d000      	beq.n	8003128 <main+0x140>
 8003126:	e7fe      	b.n	8003126 <main+0x13e>
  htim3.Instance = TIM3;
 8003128:	4c26      	ldr	r4, [pc, #152]	; (80031c4 <main+0x1dc>)
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <main+0x1e0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312c:	60a0      	str	r0, [r4, #8]
  htim3.Instance = TIM3;
 800312e:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48;
 8003130:	2330      	movs	r3, #48	; 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003132:	6120      	str	r0, [r4, #16]
  htim3.Init.Prescaler = 48;
 8003134:	6063      	str	r3, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003136:	61a0      	str	r0, [r4, #24]
  htim3.Init.Period = 99;
 8003138:	3333      	adds	r3, #51	; 0x33
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800313a:	0020      	movs	r0, r4
  htim3.Init.Period = 99;
 800313c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800313e:	f7fe ff8b 	bl	8002058 <HAL_TIM_PWM_Init>
 8003142:	2800      	cmp	r0, #0
 8003144:	d000      	beq.n	8003148 <main+0x160>
 8003146:	e7fe      	b.n	8003146 <main+0x15e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003148:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800314a:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800314c:	a903      	add	r1, sp, #12
 800314e:	0020      	movs	r0, r4
 8003150:	f7ff f9f0 	bl	8002534 <HAL_TIMEx_MasterConfigSynchronization>
 8003154:	2800      	cmp	r0, #0
 8003156:	d000      	beq.n	800315a <main+0x172>
 8003158:	e7fe      	b.n	8003158 <main+0x170>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800315a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800315c:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800315e:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003160:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003162:	2204      	movs	r2, #4
 8003164:	a905      	add	r1, sp, #20
 8003166:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003168:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800316a:	f7ff f80f 	bl	800218c <HAL_TIM_PWM_ConfigChannel>
 800316e:	1e05      	subs	r5, r0, #0
 8003170:	d000      	beq.n	8003174 <main+0x18c>
 8003172:	e7fe      	b.n	8003172 <main+0x18a>
  HAL_TIM_MspPostInit(&htim3);
 8003174:	0020      	movs	r0, r4
 8003176:	f000 f8d5 	bl	8003324 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 800317a:	4814      	ldr	r0, [pc, #80]	; (80031cc <main+0x1e4>)
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <main+0x1e8>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317e:	6085      	str	r5, [r0, #8]
  htim14.Instance = TIM14;
 8003180:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 192;
 8003182:	23c0      	movs	r3, #192	; 0xc0
 8003184:	6043      	str	r3, [r0, #4]
  htim14.Init.Period = 500;
 8003186:	3335      	adds	r3, #53	; 0x35
 8003188:	33ff      	adds	r3, #255	; 0xff
 800318a:	60c3      	str	r3, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800318c:	6105      	str	r5, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318e:	6185      	str	r5, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003190:	f7fe fefc 	bl	8001f8c <HAL_TIM_Base_Init>
 8003194:	2800      	cmp	r0, #0
 8003196:	d000      	beq.n	800319a <main+0x1b2>
 8003198:	e7fe      	b.n	8003198 <main+0x1b0>
  init_variables();
 800319a:	f7ff fe63 	bl	8002e64 <init_variables>
  startPeripherals();
 800319e:	f7ff fe33 	bl	8002e08 <startPeripherals>
	  user_main();
 80031a2:	f000 fb4f 	bl	8003844 <user_main>
 80031a6:	e7fc      	b.n	80031a2 <main+0x1ba>
 80031a8:	40021000 	.word	0x40021000
 80031ac:	10310000 	.word	0x10310000
 80031b0:	48000400 	.word	0x48000400
 80031b4:	20000404 	.word	0x20000404
 80031b8:	40012400 	.word	0x40012400
 80031bc:	20000310 	.word	0x20000310
 80031c0:	40013800 	.word	0x40013800
 80031c4:	2000028c 	.word	0x2000028c
 80031c8:	40000400 	.word	0x40000400
 80031cc:	20000380 	.word	0x20000380
 80031d0:	40002000 	.word	0x40002000

080031d4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80031d4:	e7fe      	b.n	80031d4 <_Error_Handler>
 80031d6:	46c0      	nop			; (mov r8, r8)

080031d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d8:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80031da:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031dc:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <HAL_MspInit+0x40>)
{
 80031de:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e0:	6991      	ldr	r1, [r2, #24]
{
 80031e2:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e4:	4319      	orrs	r1, r3
 80031e6:	6191      	str	r1, [r2, #24]
 80031e8:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80031ea:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ec:	4013      	ands	r3, r2
 80031ee:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80031f0:	2200      	movs	r2, #0
 80031f2:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80031f6:	f7fe f893 	bl	8001320 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80031fa:	2002      	movs	r0, #2
 80031fc:	2200      	movs	r2, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	4240      	negs	r0, r0
 8003202:	f7fe f88d 	bl	8001320 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003206:	2001      	movs	r0, #1
 8003208:	2200      	movs	r2, #0
 800320a:	2100      	movs	r1, #0
 800320c:	4240      	negs	r0, r0
 800320e:	f7fe f887 	bl	8001320 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003212:	b003      	add	sp, #12
 8003214:	bd00      	pop	{pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	40021000 	.word	0x40021000

0800321c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800321c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <HAL_ADC_MspInit+0x74>)
 8003220:	6802      	ldr	r2, [r0, #0]
{
 8003222:	b087      	sub	sp, #28
 8003224:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 8003226:	429a      	cmp	r2, r3
 8003228:	d001      	beq.n	800322e <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800322a:	b007      	add	sp, #28
 800322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800322e:	2680      	movs	r6, #128	; 0x80
 8003230:	4b18      	ldr	r3, [pc, #96]	; (8003294 <HAL_ADC_MspInit+0x78>)
 8003232:	00b6      	lsls	r6, r6, #2
 8003234:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2700      	movs	r7, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003238:	4332      	orrs	r2, r6
 800323a:	619a      	str	r2, [r3, #24]
 800323c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	4816      	ldr	r0, [pc, #88]	; (8003298 <HAL_ADC_MspInit+0x7c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003240:	4033      	ands	r3, r6
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 8003246:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003248:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin|CURRENT_Pin;
 800324a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800324c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003250:	f7fe f9ba 	bl	80015c8 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8003254:	4d11      	ldr	r5, [pc, #68]	; (800329c <HAL_ADC_MspInit+0x80>)
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_ADC_MspInit+0x84>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003258:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 800325a:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003266:	2320      	movs	r3, #32
 8003268:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800326e:	606f      	str	r7, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003270:	60af      	str	r7, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003272:	612e      	str	r6, [r5, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003274:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003276:	f7fe f8c1 	bl	80013fc <HAL_DMA_Init>
 800327a:	2800      	cmp	r0, #0
 800327c:	d102      	bne.n	8003284 <HAL_ADC_MspInit+0x68>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800327e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003280:	626c      	str	r4, [r5, #36]	; 0x24
}
 8003282:	e7d2      	b.n	800322a <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8003284:	216b      	movs	r1, #107	; 0x6b
 8003286:	4807      	ldr	r0, [pc, #28]	; (80032a4 <HAL_ADC_MspInit+0x88>)
 8003288:	f7ff ffa4 	bl	80031d4 <_Error_Handler>
 800328c:	e7f7      	b.n	800327e <HAL_ADC_MspInit+0x62>
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	40012400 	.word	0x40012400
 8003294:	40021000 	.word	0x40021000
 8003298:	48000400 	.word	0x48000400
 800329c:	200003c0 	.word	0x200003c0
 80032a0:	40020008 	.word	0x40020008
 80032a4:	080044fc 	.word	0x080044fc

080032a8 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032a8:	b500      	push	{lr}

  if(htim_pwm->Instance==TIM3)
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_TIM_PWM_MspInit+0x34>)
 80032ac:	6802      	ldr	r2, [r0, #0]
{
 80032ae:	b083      	sub	sp, #12
  if(htim_pwm->Instance==TIM3)
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_PWM_MspInit+0x10>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032b4:	b003      	add	sp, #12
 80032b6:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032b8:	2302      	movs	r3, #2
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_TIM_PWM_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80032bc:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032be:	69d1      	ldr	r1, [r2, #28]
 80032c0:	4319      	orrs	r1, r3
 80032c2:	61d1      	str	r1, [r2, #28]
 80032c4:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80032c6:	2101      	movs	r1, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032c8:	4013      	ands	r3, r2
 80032ca:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80032cc:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ce:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80032d0:	f7fe f826 	bl	8001320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032d4:	2010      	movs	r0, #16
 80032d6:	f7fe f857 	bl	8001388 <HAL_NVIC_EnableIRQ>
}
 80032da:	e7eb      	b.n	80032b4 <HAL_TIM_PWM_MspInit+0xc>
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40021000 	.word	0x40021000

080032e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e4:	b500      	push	{lr}

  if(htim_base->Instance==TIM14)
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_TIM_Base_MspInit+0x38>)
 80032e8:	6802      	ldr	r2, [r0, #0]
{
 80032ea:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80032f0:	b003      	add	sp, #12
 80032f2:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 80032f4:	2080      	movs	r0, #128	; 0x80
 80032f6:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <HAL_TIM_Base_MspInit+0x3c>)
 80032f8:	0040      	lsls	r0, r0, #1
 80032fa:	69d1      	ldr	r1, [r2, #28]
 80032fc:	4301      	orrs	r1, r0
 80032fe:	61d1      	str	r1, [r2, #28]
 8003300:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8003302:	2101      	movs	r1, #1
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003304:	4003      	ands	r3, r0
 8003306:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8003308:	2200      	movs	r2, #0
 800330a:	38ed      	subs	r0, #237	; 0xed
    __HAL_RCC_TIM14_CLK_ENABLE();
 800330c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 800330e:	f7fe f807 	bl	8001320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003312:	2013      	movs	r0, #19
 8003314:	f7fe f838 	bl	8001388 <HAL_NVIC_EnableIRQ>
}
 8003318:	e7ea      	b.n	80032f0 <HAL_TIM_Base_MspInit+0xc>
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	40002000 	.word	0x40002000
 8003320:	40021000 	.word	0x40021000

08003324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003324:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_TIM_MspPostInit+0x30>)
 8003328:	6802      	ldr	r2, [r0, #0]
{
 800332a:	b087      	sub	sp, #28
  if(htim->Instance==TIM3)
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003330:	b007      	add	sp, #28
 8003332:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = PWM_SIGNAL_Pin;
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	3b7e      	subs	r3, #126	; 0x7e
 800333a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800333c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8003340:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8003346:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003348:	3301      	adds	r3, #1
 800334a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800334c:	f7fe f93c 	bl	80015c8 <HAL_GPIO_Init>
}
 8003350:	e7ee      	b.n	8003330 <HAL_TIM_MspPostInit+0xc>
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	40000400 	.word	0x40000400

08003358 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003358:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800335a:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <HAL_UART_MspInit+0x90>)
 800335c:	6802      	ldr	r2, [r0, #0]
{
 800335e:	b086      	sub	sp, #24
 8003360:	0004      	movs	r4, r0
  if(huart->Instance==USART1)
 8003362:	429a      	cmp	r2, r3
 8003364:	d001      	beq.n	800336a <HAL_UART_MspInit+0x12>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003366:	b006      	add	sp, #24
 8003368:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800336a:	2080      	movs	r0, #128	; 0x80
 800336c:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_UART_MspInit+0x94>)
 800336e:	01c0      	lsls	r0, r0, #7
 8003370:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003374:	4301      	orrs	r1, r0
 8003376:	6191      	str	r1, [r2, #24]
 8003378:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800337c:	4003      	ands	r3, r0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003382:	23c0      	movs	r3, #192	; 0xc0
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003388:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800338e:	3301      	adds	r3, #1
 8003390:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003394:	3b02      	subs	r3, #2
 8003396:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339a:	f7fe f915 	bl	80015c8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800339e:	4d14      	ldr	r5, [pc, #80]	; (80033f0 <HAL_UART_MspInit+0x98>)
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_UART_MspInit+0x9c>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033a2:	0028      	movs	r0, r5
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80033a4:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033a6:	2310      	movs	r3, #16
 80033a8:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033aa:	3370      	adds	r3, #112	; 0x70
 80033ac:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b2:	60ae      	str	r6, [r5, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b4:	612e      	str	r6, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033b6:	616e      	str	r6, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80033b8:	61ae      	str	r6, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80033ba:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033bc:	f7fe f81e 	bl	80013fc <HAL_DMA_Init>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d10a      	bne.n	80033da <HAL_UART_MspInit+0x82>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80033c4:	6625      	str	r5, [r4, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80033cc:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033ce:	f7fd ffa7 	bl	8001320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033d2:	201b      	movs	r0, #27
 80033d4:	f7fd ffd8 	bl	8001388 <HAL_NVIC_EnableIRQ>
}
 80033d8:	e7c5      	b.n	8003366 <HAL_UART_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 80033da:	2120      	movs	r1, #32
 80033dc:	4806      	ldr	r0, [pc, #24]	; (80033f8 <HAL_UART_MspInit+0xa0>)
 80033de:	31ff      	adds	r1, #255	; 0xff
 80033e0:	f7ff fef8 	bl	80031d4 <_Error_Handler>
 80033e4:	e7ee      	b.n	80033c4 <HAL_UART_MspInit+0x6c>
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	40013800 	.word	0x40013800
 80033ec:	40021000 	.word	0x40021000
 80033f0:	200002cc 	.word	0x200002cc
 80033f4:	4002001c 	.word	0x4002001c
 80033f8:	080044fc 	.word	0x080044fc

080033fc <NMI_Handler>:
 80033fc:	4770      	bx	lr
 80033fe:	46c0      	nop			; (mov r8, r8)

08003400 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003400:	e7fe      	b.n	8003400 <HardFault_Handler>
 8003402:	46c0      	nop			; (mov r8, r8)

08003404 <SVC_Handler>:
 8003404:	4770      	bx	lr
 8003406:	46c0      	nop			; (mov r8, r8)

08003408 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003408:	4770      	bx	lr
 800340a:	46c0      	nop			; (mov r8, r8)

0800340c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800340c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800340e:	f7fd fd07 	bl	8000e20 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003412:	f7fd ffef 	bl	80013f4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003416:	bd10      	pop	{r4, pc}

08003418 <EXTI4_15_IRQHandler>:

/**
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
 8003418:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800341a:	2010      	movs	r0, #16
 800341c:	f7fe f9c4 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003420:	bd10      	pop	{r4, pc}
 8003422:	46c0      	nop			; (mov r8, r8)

08003424 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8003424:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003426:	4802      	ldr	r0, [pc, #8]	; (8003430 <DMA1_Channel1_IRQHandler+0xc>)
 8003428:	f7fe f880 	bl	800152c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800342c:	bd10      	pop	{r4, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	200003c0 	.word	0x200003c0

08003434 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 8003434:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003436:	4802      	ldr	r0, [pc, #8]	; (8003440 <DMA1_Channel2_3_IRQHandler+0xc>)
 8003438:	f7fe f878 	bl	800152c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800343c:	bd10      	pop	{r4, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	200002cc 	.word	0x200002cc

08003444 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8003444:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003446:	4802      	ldr	r0, [pc, #8]	; (8003450 <TIM3_IRQHandler+0xc>)
 8003448:	f7fe ffc8 	bl	80023dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800344c:	bd10      	pop	{r4, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	2000028c 	.word	0x2000028c

08003454 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 8003454:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003456:	4802      	ldr	r0, [pc, #8]	; (8003460 <TIM14_IRQHandler+0xc>)
 8003458:	f7fe ffc0 	bl	80023dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800345c:	bd10      	pop	{r4, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	20000380 	.word	0x20000380

08003464 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8003464:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003466:	4802      	ldr	r0, [pc, #8]	; (8003470 <USART1_IRQHandler+0xc>)
 8003468:	f7ff f9c4 	bl	80027f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800346c:	bd10      	pop	{r4, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	20000310 	.word	0x20000310

08003474 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003474:	2101      	movs	r1, #1
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003478:	4811      	ldr	r0, [pc, #68]	; (80034c0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4002      	ands	r2, r0
 8003484:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	480e      	ldr	r0, [pc, #56]	; (80034c4 <SystemInit+0x50>)
 800348a:	4002      	ands	r2, r0
 800348c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	480d      	ldr	r0, [pc, #52]	; (80034c8 <SystemInit+0x54>)
 8003492:	4002      	ands	r2, r0
 8003494:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	480c      	ldr	r0, [pc, #48]	; (80034cc <SystemInit+0x58>)
 800349a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800349c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800349e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	4382      	bics	r2, r0
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80034a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a8:	4809      	ldr	r0, [pc, #36]	; (80034d0 <SystemInit+0x5c>)
 80034aa:	4002      	ands	r2, r0
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80034ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b0:	438a      	bics	r2, r1
 80034b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]

}
 80034b8:	4770      	bx	lr
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08ffb80c 	.word	0x08ffb80c
 80034c4:	fef6ffff 	.word	0xfef6ffff
 80034c8:	fffbffff 	.word	0xfffbffff
 80034cc:	ffc0ffff 	.word	0xffc0ffff
 80034d0:	fffffeec 	.word	0xfffffeec

080034d4 <data_aquisition>:
#include "function.h"
#include "variables.h"
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim3;

void data_aquisition(){
 80034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d6:	46de      	mov	lr, fp
 80034d8:	4657      	mov	r7, sl
 80034da:	464e      	mov	r6, r9
 80034dc:	4645      	mov	r5, r8
 80034de:	b5e0      	push	{r5, r6, r7, lr}
	size_data_buffer = strlen((char*)data_buffer);
 80034e0:	4e53      	ldr	r6, [pc, #332]	; (8003630 <data_aquisition+0x15c>)
void data_aquisition(){
 80034e2:	b085      	sub	sp, #20
	size_data_buffer = strlen((char*)data_buffer);
 80034e4:	6833      	ldr	r3, [r6, #0]
 80034e6:	0018      	movs	r0, r3
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f7fc fe0d 	bl	8000108 <strlen>
	size_time = strlen((char*)send_time);
 80034ee:	4b51      	ldr	r3, [pc, #324]	; (8003634 <data_aquisition+0x160>)
	size_data_buffer = strlen((char*)data_buffer);
 80034f0:	4c51      	ldr	r4, [pc, #324]	; (8003638 <data_aquisition+0x164>)
	size_time = strlen((char*)send_time);
 80034f2:	681a      	ldr	r2, [r3, #0]
	size_data_buffer = strlen((char*)data_buffer);
 80034f4:	4682      	mov	sl, r0
 80034f6:	6020      	str	r0, [r4, #0]
	size_time = strlen((char*)send_time);
 80034f8:	0010      	movs	r0, r2
 80034fa:	9201      	str	r2, [sp, #4]
 80034fc:	f7fc fe04 	bl	8000108 <strlen>
 8003500:	4d4e      	ldr	r5, [pc, #312]	; (800363c <data_aquisition+0x168>)
 8003502:	9002      	str	r0, [sp, #8]
 8003504:	6028      	str	r0, [r5, #0]
	size_q1 = strlen((char*)send_q1);
 8003506:	484e      	ldr	r0, [pc, #312]	; (8003640 <data_aquisition+0x16c>)
 8003508:	4683      	mov	fp, r0
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	f7fc fdfc 	bl	8000108 <strlen>
 8003510:	4f4c      	ldr	r7, [pc, #304]	; (8003644 <data_aquisition+0x170>)
 8003512:	6038      	str	r0, [r7, #0]
	size_q2 = strlen((char*)send_q2);
 8003514:	484c      	ldr	r0, [pc, #304]	; (8003648 <data_aquisition+0x174>)
 8003516:	6800      	ldr	r0, [r0, #0]
 8003518:	9003      	str	r0, [sp, #12]
 800351a:	f7fc fdf5 	bl	8000108 <strlen>
 800351e:	494b      	ldr	r1, [pc, #300]	; (800364c <data_aquisition+0x178>)
 8003520:	6008      	str	r0, [r1, #0]
	size_torque = strlen((char*)send_torque);
 8003522:	484b      	ldr	r0, [pc, #300]	; (8003650 <data_aquisition+0x17c>)
	size_q2 = strlen((char*)send_q2);
 8003524:	4688      	mov	r8, r1
	size_torque = strlen((char*)send_torque);
 8003526:	6800      	ldr	r0, [r0, #0]
 8003528:	9003      	str	r0, [sp, #12]
 800352a:	f7fc fded 	bl	8000108 <strlen>
 800352e:	4949      	ldr	r1, [pc, #292]	; (8003654 <data_aquisition+0x180>)

	//memset(data_buffer,0x00,40);
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 8003530:	9a02      	ldr	r2, [sp, #8]
	size_torque = strlen((char*)send_torque);
 8003532:	6008      	str	r0, [r1, #0]
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 8003534:	9800      	ldr	r0, [sp, #0]
	size_torque = strlen((char*)send_torque);
 8003536:	4689      	mov	r9, r1
	memcpy(data_buffer+size_data_buffer, send_time, size_time);
 8003538:	4450      	add	r0, sl
 800353a:	9901      	ldr	r1, [sp, #4]
 800353c:	f000 fa42 	bl	80039c4 <memcpy>
	memcpy(data_buffer+size_time+size_data_buffer, comma, 1);
 8003540:	6829      	ldr	r1, [r5, #0]
 8003542:	4b45      	ldr	r3, [pc, #276]	; (8003658 <data_aquisition+0x184>)
 8003544:	468c      	mov	ip, r1
 8003546:	469a      	mov	sl, r3
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6821      	ldr	r1, [r4, #0]
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	6833      	ldr	r3, [r6, #0]
 8003550:	4463      	add	r3, ip
 8003552:	545a      	strb	r2, [r3, r1]
	memcpy(data_buffer+1+size_time+size_data_buffer, send_q1, size_q1);
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	682b      	ldr	r3, [r5, #0]
 8003558:	4694      	mov	ip, r2
 800355a:	4463      	add	r3, ip
 800355c:	0018      	movs	r0, r3
 800355e:	6833      	ldr	r3, [r6, #0]
 8003560:	3001      	adds	r0, #1
 8003562:	469c      	mov	ip, r3
 8003564:	465b      	mov	r3, fp
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	4460      	add	r0, ip
 800356c:	f000 fa2a 	bl	80039c4 <memcpy>
	memcpy(data_buffer+1+size_q1+size_time+size_data_buffer, comma, 1);
 8003570:	4653      	mov	r3, sl
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	468c      	mov	ip, r1
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	6829      	ldr	r1, [r5, #0]
 800357c:	6833      	ldr	r3, [r6, #0]
 800357e:	4463      	add	r3, ip
 8003580:	468c      	mov	ip, r1
 8003582:	6821      	ldr	r1, [r4, #0]
 8003584:	4463      	add	r3, ip
 8003586:	468c      	mov	ip, r1
 8003588:	4463      	add	r3, ip
 800358a:	705a      	strb	r2, [r3, #1]
	memcpy(data_buffer+2+size_q1+size_time+size_data_buffer, send_q2, size_q2);
 800358c:	682a      	ldr	r2, [r5, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	4694      	mov	ip, r2
 8003592:	4463      	add	r3, ip
 8003594:	0018      	movs	r0, r3
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	3002      	adds	r0, #2
 800359a:	469c      	mov	ip, r3
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	4460      	add	r0, ip
 80035a0:	469c      	mov	ip, r3
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <data_aquisition+0x174>)
 80035a4:	4460      	add	r0, ip
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	4643      	mov	r3, r8
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	f000 fa0a 	bl	80039c4 <memcpy>
	memcpy(data_buffer+2+size_q1+size_time+size_q2+size_data_buffer, comma, 1);
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	4653      	mov	r3, sl
 80035b4:	468c      	mov	ip, r1
 80035b6:	4641      	mov	r1, r8
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6809      	ldr	r1, [r1, #0]
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	6833      	ldr	r3, [r6, #0]
 80035c0:	4463      	add	r3, ip
 80035c2:	468c      	mov	ip, r1
 80035c4:	6829      	ldr	r1, [r5, #0]
 80035c6:	4463      	add	r3, ip
 80035c8:	468c      	mov	ip, r1
 80035ca:	6821      	ldr	r1, [r4, #0]
 80035cc:	4463      	add	r3, ip
 80035ce:	468c      	mov	ip, r1
 80035d0:	4463      	add	r3, ip
 80035d2:	709a      	strb	r2, [r3, #2]
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_data_buffer, send_torque, size_torque);
 80035d4:	682a      	ldr	r2, [r5, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	4694      	mov	ip, r2
 80035da:	4463      	add	r3, ip
 80035dc:	0018      	movs	r0, r3
 80035de:	4643      	mov	r3, r8
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3003      	adds	r0, #3
 80035e4:	469c      	mov	ip, r3
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	4460      	add	r0, ip
 80035ea:	469c      	mov	ip, r3
 80035ec:	6833      	ldr	r3, [r6, #0]
 80035ee:	4460      	add	r0, ip
 80035f0:	469c      	mov	ip, r3
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <data_aquisition+0x17c>)
 80035f4:	4460      	add	r0, ip
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	464b      	mov	r3, r9
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	f000 f9e2 	bl	80039c4 <memcpy>
	memcpy(data_buffer+3+size_q1+size_time+size_q2+size_torque+size_data_buffer, endSymbol, 1);
 8003600:	4648      	mov	r0, r9
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <data_aquisition+0x188>)
 8003604:	6832      	ldr	r2, [r6, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	682e      	ldr	r6, [r5, #0]
 800360a:	7819      	ldrb	r1, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6807      	ldr	r7, [r0, #0]
 8003610:	4640      	mov	r0, r8
 8003612:	18d3      	adds	r3, r2, r3
 8003614:	6805      	ldr	r5, [r0, #0]
 8003616:	19db      	adds	r3, r3, r7
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	199b      	adds	r3, r3, r6
 800361c:	195b      	adds	r3, r3, r5
 800361e:	181b      	adds	r3, r3, r0
 8003620:	70d9      	strb	r1, [r3, #3]

//	HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
}
 8003622:	b005      	add	sp, #20
 8003624:	bc3c      	pop	{r2, r3, r4, r5}
 8003626:	4690      	mov	r8, r2
 8003628:	4699      	mov	r9, r3
 800362a:	46a2      	mov	sl, r4
 800362c:	46ab      	mov	fp, r5
 800362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003630:	2000020c 	.word	0x2000020c
 8003634:	2000024c 	.word	0x2000024c
 8003638:	20000254 	.word	0x20000254
 800363c:	20000260 	.word	0x20000260
 8003640:	20000244 	.word	0x20000244
 8003644:	20000258 	.word	0x20000258
 8003648:	20000248 	.word	0x20000248
 800364c:	2000025c 	.word	0x2000025c
 8003650:	20000250 	.word	0x20000250
 8003654:	20000264 	.word	0x20000264
 8003658:	20000008 	.word	0x20000008
 800365c:	20000014 	.word	0x20000014

08003660 <uart_request>:


void uart_request(){
 8003660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003662:	46c6      	mov	lr, r8
 8003664:	b500      	push	{lr}

	rx_buffer[rx_buffer_cntr] = rx_byte;
 8003666:	4e61      	ldr	r6, [pc, #388]	; (80037ec <uart_request+0x18c>)
 8003668:	4f61      	ldr	r7, [pc, #388]	; (80037f0 <uart_request+0x190>)
 800366a:	4c62      	ldr	r4, [pc, #392]	; (80037f4 <uart_request+0x194>)
 800366c:	783a      	ldrb	r2, [r7, #0]
 800366e:	7823      	ldrb	r3, [r4, #0]
 8003670:	6831      	ldr	r1, [r6, #0]
 8003672:	54ca      	strb	r2, [r1, r3]
	if(*rx_buffer == '$'){
 8003674:	6835      	ldr	r5, [r6, #0]
 8003676:	782b      	ldrb	r3, [r5, #0]
 8003678:	2b24      	cmp	r3, #36	; 0x24
 800367a:	d015      	beq.n	80036a8 <uart_request+0x48>
		rx_buffer_cntr += 1;
	}
	if(rx_buffer_cntr > 15){
 800367c:	7823      	ldrb	r3, [r4, #0]
 800367e:	2b0f      	cmp	r3, #15
 8003680:	d909      	bls.n	8003696 <uart_request+0x36>
		rx_buffer_cntr = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	7023      	strb	r3, [r4, #0]
	}
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 8003686:	782a      	ldrb	r2, [r5, #0]
 8003688:	2a24      	cmp	r2, #36	; 0x24
 800368a:	d104      	bne.n	8003696 <uart_request+0x36>
 800368c:	18ea      	adds	r2, r5, r3
 800368e:	3a01      	subs	r2, #1
 8003690:	7812      	ldrb	r2, [r2, #0]
 8003692:	2a0a      	cmp	r2, #10
 8003694:	d00f      	beq.n	80036b6 <uart_request+0x56>
 8003696:	4e58      	ldr	r6, [pc, #352]	; (80037f8 <uart_request+0x198>)
			//memset(rx_buffer_copy,0x00, 16);

		}
		rx_buffer_cntr = 0;
	}
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8003698:	0039      	movs	r1, r7
 800369a:	0030      	movs	r0, r6
 800369c:	2201      	movs	r2, #1
 800369e:	f7fe ff9f 	bl	80025e0 <HAL_UART_Receive_IT>


}
 80036a2:	bc04      	pop	{r2}
 80036a4:	4690      	mov	r8, r2
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rx_buffer_cntr += 1;
 80036a8:	7823      	ldrb	r3, [r4, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	7023      	strb	r3, [r4, #0]
	if(rx_buffer_cntr > 15){
 80036b0:	2b0f      	cmp	r3, #15
 80036b2:	d9e8      	bls.n	8003686 <uart_request+0x26>
 80036b4:	e7e5      	b.n	8003682 <uart_request+0x22>
	if(rx_buffer[0] == '$' && rx_buffer[rx_buffer_cntr-1] == '\n' && rx_buffer_cntr > 2){
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d9ed      	bls.n	8003696 <uart_request+0x36>
		rx_buffer_copy = rx_buffer;
 80036ba:	4b50      	ldr	r3, [pc, #320]	; (80037fc <uart_request+0x19c>)
 80036bc:	601d      	str	r5, [r3, #0]
		switch(rx_buffer[1]){
 80036be:	786b      	ldrb	r3, [r5, #1]
 80036c0:	3b41      	subs	r3, #65	; 0x41
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b17      	cmp	r3, #23
 80036c6:	d86b      	bhi.n	80037a0 <uart_request+0x140>
 80036c8:	4a4d      	ldr	r2, [pc, #308]	; (8003800 <uart_request+0x1a0>)
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	58d3      	ldr	r3, [r2, r3]
 80036ce:	469f      	mov	pc, r3
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80036d0:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <uart_request+0x1a4>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	6353      	str	r3, [r2, #52]	; 0x34
			enable_data_aquisition = 0;
 80036d8:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <uart_request+0x1a8>)
 80036da:	7013      	strb	r3, [r2, #0]
			enable_encoder_reading = 0;
 80036dc:	4a4b      	ldr	r2, [pc, #300]	; (800380c <uart_request+0x1ac>)
 80036de:	7013      	strb	r3, [r2, #0]
			enable_ADC_interrupt = 0;
 80036e0:	4a4b      	ldr	r2, [pc, #300]	; (8003810 <uart_request+0x1b0>)
 80036e2:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 80036e4:	0028      	movs	r0, r5
 80036e6:	f7fc fd0f 	bl	8000108 <strlen>
 80036ea:	4e43      	ldr	r6, [pc, #268]	; (80037f8 <uart_request+0x198>)
 80036ec:	b282      	uxth	r2, r0
 80036ee:	0029      	movs	r1, r5
 80036f0:	0030      	movs	r0, r6
 80036f2:	f7fe ff43 	bl	800257c <HAL_UART_Transmit_IT>
		rx_buffer_cntr = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	7023      	strb	r3, [r4, #0]
 80036fa:	e7cd      	b.n	8003698 <uart_request+0x38>
			torque_received = strtok((char*)rx_buffer_copy, "$T,");
 80036fc:	4945      	ldr	r1, [pc, #276]	; (8003814 <uart_request+0x1b4>)
 80036fe:	0028      	movs	r0, r5
 8003700:	f000 fa5c 	bl	8003bbc <strtok>
 8003704:	4e44      	ldr	r6, [pc, #272]	; (8003818 <uart_request+0x1b8>)
			motor_dir = (strtok(NULL, ",\r\n"));
 8003706:	4945      	ldr	r1, [pc, #276]	; (800381c <uart_request+0x1bc>)
			torque_received = strtok((char*)rx_buffer_copy, "$T,");
 8003708:	6030      	str	r0, [r6, #0]
			motor_dir = (strtok(NULL, ",\r\n"));
 800370a:	2000      	movs	r0, #0
 800370c:	f000 fa56 	bl	8003bbc <strtok>
 8003710:	4d43      	ldr	r5, [pc, #268]	; (8003820 <uart_request+0x1c0>)
			controller_torque = 100 - ((float)strtol(torque_received,NULL,10)+315.52f)/15.828f;
 8003712:	220a      	movs	r2, #10
 8003714:	2100      	movs	r1, #0
			motor_dir = (strtok(NULL, ",\r\n"));
 8003716:	6028      	str	r0, [r5, #0]
			controller_torque = 100 - ((float)strtol(torque_received,NULL,10)+315.52f)/15.828f;
 8003718:	6830      	ldr	r0, [r6, #0]
 800371a:	f000 fb2b 	bl	8003d74 <strtol>
 800371e:	f7fd fa0d 	bl	8000b3c <__aeabi_i2f>
 8003722:	4940      	ldr	r1, [pc, #256]	; (8003824 <uart_request+0x1c4>)
 8003724:	f7fc fd9c 	bl	8000260 <__aeabi_fadd>
 8003728:	493f      	ldr	r1, [pc, #252]	; (8003828 <uart_request+0x1c8>)
 800372a:	f7fc ff2b 	bl	8000584 <__aeabi_fmul>
 800372e:	1c01      	adds	r1, r0, #0
 8003730:	483e      	ldr	r0, [pc, #248]	; (800382c <uart_request+0x1cc>)
 8003732:	f7fd f847 	bl	80007c4 <__aeabi_fsub>
 8003736:	f7fc fd7b 	bl	8000230 <__aeabi_f2uiz>
 800373a:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <uart_request+0x1d0>)
 800373c:	b2c1      	uxtb	r1, r0
 800373e:	7019      	strb	r1, [r3, #0]
			output_torque((*motor_dir-48),controller_torque);
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	7818      	ldrb	r0, [r3, #0]
 8003744:	3830      	subs	r0, #48	; 0x30
 8003746:	b2c0      	uxtb	r0, r0
 8003748:	f7ff fb50 	bl	8002dec <output_torque>
			receive_send = 1;
 800374c:	2201      	movs	r2, #1
 800374e:	4b39      	ldr	r3, [pc, #228]	; (8003834 <uart_request+0x1d4>)
 8003750:	4e29      	ldr	r6, [pc, #164]	; (80037f8 <uart_request+0x198>)
 8003752:	701a      	strb	r2, [r3, #0]
			break;
 8003754:	e7cf      	b.n	80036f6 <uart_request+0x96>
			if(rx_buffer[3] == '1'){
 8003756:	78eb      	ldrb	r3, [r5, #3]
 8003758:	2b31      	cmp	r3, #49	; 0x31
 800375a:	d03c      	beq.n	80037d6 <uart_request+0x176>
			else if(rx_buffer[3] == '0'){
 800375c:	2b30      	cmp	r3, #48	; 0x30
 800375e:	d029      	beq.n	80037b4 <uart_request+0x154>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8003760:	6835      	ldr	r5, [r6, #0]
 8003762:	e7bf      	b.n	80036e4 <uart_request+0x84>
			memcpy(scratchpad, rx_buffer+3, strlen((char*)rx_buffer)-4);
 8003764:	0028      	movs	r0, r5
 8003766:	f7fc fccf 	bl	8000108 <strlen>
 800376a:	4b33      	ldr	r3, [pc, #204]	; (8003838 <uart_request+0x1d8>)
 800376c:	1f02      	subs	r2, r0, #4
 800376e:	4698      	mov	r8, r3
 8003770:	1ce9      	adds	r1, r5, #3
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	f000 f926 	bl	80039c4 <memcpy>
			duty_cycle = (uint8_t)strtol(scratchpad, (char**)NULL,10);
 8003778:	4643      	mov	r3, r8
 800377a:	220a      	movs	r2, #10
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	2100      	movs	r1, #0
 8003780:	f000 faf8 	bl	8003d74 <strtol>
 8003784:	4b2d      	ldr	r3, [pc, #180]	; (800383c <uart_request+0x1dc>)
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 8003786:	6835      	ldr	r5, [r6, #0]
			duty_cycle = (uint8_t)strtol(scratchpad, (char**)NULL,10);
 8003788:	7018      	strb	r0, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 800378a:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <uart_request+0x1a4>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	23ff      	movs	r3, #255	; 0xff
 8003790:	4018      	ands	r0, r3
 8003792:	6390      	str	r0, [r2, #56]	; 0x38
 8003794:	e7a6      	b.n	80036e4 <uart_request+0x84>
			if(*(rx_buffer+3) == '1'){
 8003796:	78eb      	ldrb	r3, [r5, #3]
 8003798:	2b31      	cmp	r3, #49	; 0x31
 800379a:	d015      	beq.n	80037c8 <uart_request+0x168>
			else if(rx_buffer[3] == '0'){
 800379c:	2b30      	cmp	r3, #48	; 0x30
 800379e:	d004      	beq.n	80037aa <uart_request+0x14a>
 80037a0:	4e15      	ldr	r6, [pc, #84]	; (80037f8 <uart_request+0x198>)
 80037a2:	e7a8      	b.n	80036f6 <uart_request+0x96>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)acrobat),strlen((char*)acrobat));
 80037a4:	4b26      	ldr	r3, [pc, #152]	; (8003840 <uart_request+0x1e0>)
 80037a6:	681d      	ldr	r5, [r3, #0]
 80037a8:	e79c      	b.n	80036e4 <uart_request+0x84>
				enable_data_aquisition = 0;
 80037aa:	2200      	movs	r2, #0
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <uart_request+0x1a8>)
 80037ae:	4e12      	ldr	r6, [pc, #72]	; (80037f8 <uart_request+0x198>)
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	e7a0      	b.n	80036f6 <uart_request+0x96>
				motor_dir = 0;
 80037b4:	2200      	movs	r2, #0
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <uart_request+0x1c0>)
				output_torque(motor_dir, duty_cycle);
 80037b8:	2000      	movs	r0, #0
				motor_dir = 0;
 80037ba:	601a      	str	r2, [r3, #0]
				output_torque(motor_dir, duty_cycle);
 80037bc:	4b1f      	ldr	r3, [pc, #124]	; (800383c <uart_request+0x1dc>)
 80037be:	7819      	ldrb	r1, [r3, #0]
 80037c0:	f7ff fb14 	bl	8002dec <output_torque>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 80037c4:	6835      	ldr	r5, [r6, #0]
 80037c6:	e78d      	b.n	80036e4 <uart_request+0x84>
				receive_send = 1;
 80037c8:	4a1a      	ldr	r2, [pc, #104]	; (8003834 <uart_request+0x1d4>)
 80037ca:	3b30      	subs	r3, #48	; 0x30
 80037cc:	7013      	strb	r3, [r2, #0]
				enable_data_aquisition = 1;
 80037ce:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <uart_request+0x1a8>)
 80037d0:	4e09      	ldr	r6, [pc, #36]	; (80037f8 <uart_request+0x198>)
 80037d2:	7013      	strb	r3, [r2, #0]
 80037d4:	e78f      	b.n	80036f6 <uart_request+0x96>
				motor_dir = 1;
 80037d6:	2201      	movs	r2, #1
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <uart_request+0x1c0>)
				output_torque(motor_dir, duty_cycle);
 80037da:	2001      	movs	r0, #1
				motor_dir = 1;
 80037dc:	601a      	str	r2, [r3, #0]
				output_torque(motor_dir, duty_cycle);
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <uart_request+0x1dc>)
 80037e0:	7819      	ldrb	r1, [r3, #0]
 80037e2:	f7ff fb03 	bl	8002dec <output_torque>
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)rx_buffer),strlen((char*)rx_buffer));
 80037e6:	6835      	ldr	r5, [r6, #0]
 80037e8:	e77c      	b.n	80036e4 <uart_request+0x84>
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	20000224 	.word	0x20000224
 80037f0:	20000230 	.word	0x20000230
 80037f4:	20000228 	.word	0x20000228
 80037f8:	20000310 	.word	0x20000310
 80037fc:	2000022c 	.word	0x2000022c
 8003800:	08004530 	.word	0x08004530
 8003804:	2000028c 	.word	0x2000028c
 8003808:	20000212 	.word	0x20000212
 800380c:	20000011 	.word	0x20000011
 8003810:	20000010 	.word	0x20000010
 8003814:	08004590 	.word	0x08004590
 8003818:	20000270 	.word	0x20000270
 800381c:	08004594 	.word	0x08004594
 8003820:	20000214 	.word	0x20000214
 8003824:	439dc28f 	.word	0x439dc28f
 8003828:	3d816415 	.word	0x3d816415
 800382c:	42c80000 	.word	0x42c80000
 8003830:	20000209 	.word	0x20000209
 8003834:	20000220 	.word	0x20000220
 8003838:	20000240 	.word	0x20000240
 800383c:	20000211 	.word	0x20000211
 8003840:	20000004 	.word	0x20000004

08003844 <user_main>:
#include "function.h"
#include "variables.h"

extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim14;
void user_main(){
 8003844:	b570      	push	{r4, r5, r6, lr}

	if(uart_flag == 1){
 8003846:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <user_main+0x90>)
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	2a01      	cmp	r2, #1
 800384c:	d02d      	beq.n	80038aa <user_main+0x66>
		uart_flag = 0;
		uart_request();
	}

	if(encoder_flag == 1){
 800384e:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <user_main+0x94>)
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	2a01      	cmp	r2, #1
 8003854:	d031      	beq.n	80038ba <user_main+0x76>
		encoder_flag = 0;
		read_motor_position();
	}

	if(adc_flag == 1){
 8003856:	4b21      	ldr	r3, [pc, #132]	; (80038dc <user_main+0x98>)
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	2a01      	cmp	r2, #1
 800385c:	d035      	beq.n	80038ca <user_main+0x86>
		adc_flag = 0;
		get_current_potentiometer();
	}

	if(enable_data_aquisition){
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <user_main+0x9c>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <user_main+0x2a>
		if(data_flag == 1){ // send system variables over UART
 8003866:	4c1f      	ldr	r4, [pc, #124]	; (80038e4 <user_main+0xa0>)
 8003868:	7823      	ldrb	r3, [r4, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d000      	beq.n	8003870 <user_main+0x2c>
//		receive_send = 0;
//	}



}
 800386e:	bd70      	pop	{r4, r5, r6, pc}
			data_flag = 0;
 8003870:	2500      	movs	r5, #0
			time += 1;
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <user_main+0xa4>)
			sprintf(send_time,"%lu", time);
 8003874:	491d      	ldr	r1, [pc, #116]	; (80038ec <user_main+0xa8>)
			time += 1;
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	3201      	adds	r2, #1
 800387a:	601a      	str	r2, [r3, #0]
			sprintf(send_time,"%lu", time);
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <user_main+0xac>)
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	f000 f97a 	bl	8003b78 <siprintf>
			data_flag = 0;
 8003884:	7025      	strb	r5, [r4, #0]
			if(receive_send == 1){
 8003886:	4c1b      	ldr	r4, [pc, #108]	; (80038f4 <user_main+0xb0>)
 8003888:	7823      	ldrb	r3, [r4, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d1ef      	bne.n	800386e <user_main+0x2a>
			data_aquisition();
 800388e:	f7ff fe21 	bl	80034d4 <data_aquisition>
			HAL_UART_Transmit_DMA(&huart1, ((uint8_t*)data_buffer),strlen((char*)data_buffer));
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <user_main+0xb4>)
 8003894:	681e      	ldr	r6, [r3, #0]
 8003896:	0030      	movs	r0, r6
 8003898:	f7fc fc36 	bl	8000108 <strlen>
 800389c:	0031      	movs	r1, r6
 800389e:	b282      	uxth	r2, r0
 80038a0:	4816      	ldr	r0, [pc, #88]	; (80038fc <user_main+0xb8>)
 80038a2:	f7fe fefd 	bl	80026a0 <HAL_UART_Transmit_DMA>
			receive_send = 0;
 80038a6:	7025      	strb	r5, [r4, #0]
}
 80038a8:	e7e1      	b.n	800386e <user_main+0x2a>
		uart_flag = 0;
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
		uart_request();
 80038ae:	f7ff fed7 	bl	8003660 <uart_request>
	if(encoder_flag == 1){
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <user_main+0x94>)
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	2a01      	cmp	r2, #1
 80038b8:	d1cd      	bne.n	8003856 <user_main+0x12>
		encoder_flag = 0;
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
		read_motor_position();
 80038be:	f7ff fa79 	bl	8002db4 <read_motor_position>
	if(adc_flag == 1){
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <user_main+0x98>)
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	2a01      	cmp	r2, #1
 80038c8:	d1c9      	bne.n	800385e <user_main+0x1a>
		adc_flag = 0;
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
		get_current_potentiometer();
 80038ce:	f7ff f9f9 	bl	8002cc4 <get_current_potentiometer>
 80038d2:	e7c4      	b.n	800385e <user_main+0x1a>
 80038d4:	20000274 	.word	0x20000274
 80038d8:	20000213 	.word	0x20000213
 80038dc:	20000208 	.word	0x20000208
 80038e0:	20000212 	.word	0x20000212
 80038e4:	20000210 	.word	0x20000210
 80038e8:	20000268 	.word	0x20000268
 80038ec:	080044f4 	.word	0x080044f4
 80038f0:	2000024c 	.word	0x2000024c
 80038f4:	20000220 	.word	0x20000220
 80038f8:	2000020c 	.word	0x2000020c
 80038fc:	20000310 	.word	0x20000310

08003900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003900:	480d      	ldr	r0, [pc, #52]	; (8003938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003902:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003904:	480d      	ldr	r0, [pc, #52]	; (800393c <LoopForever+0x6>)
  ldr r1, =_edata
 8003906:	490e      	ldr	r1, [pc, #56]	; (8003940 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003908:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <LoopForever+0xe>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800390c:	e002      	b.n	8003914 <LoopCopyDataInit>

0800390e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800390e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003912:	3304      	adds	r3, #4

08003914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003918:	d3f9      	bcc.n	800390e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800391a:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <LoopForever+0x12>)
  ldr r4, =_ebss
 800391c:	4c0b      	ldr	r4, [pc, #44]	; (800394c <LoopForever+0x16>)
  movs r3, #0
 800391e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003920:	e001      	b.n	8003926 <LoopFillZerobss>

08003922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003924:	3204      	adds	r2, #4

08003926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003928:	d3fb      	bcc.n	8003922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800392a:	f7ff fda3 	bl	8003474 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800392e:	f000 f81b 	bl	8003968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003932:	f7ff fb59 	bl	8002fe8 <main>

08003936 <LoopForever>:

LoopForever:
    b LoopForever
 8003936:	e7fe      	b.n	8003936 <LoopForever>
  ldr   r0, =_estack
 8003938:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800393c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003940:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003944:	08004714 	.word	0x08004714
  ldr r2, =_sbss
 8003948:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800394c:	20000454 	.word	0x20000454

08003950 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003950:	e7fe      	b.n	8003950 <ADC1_IRQHandler>
	...

08003954 <calloc>:
 8003954:	b510      	push	{r4, lr}
 8003956:	4b03      	ldr	r3, [pc, #12]	; (8003964 <calloc+0x10>)
 8003958:	000a      	movs	r2, r1
 800395a:	0001      	movs	r1, r0
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	f000 f842 	bl	80039e6 <_calloc_r>
 8003962:	bd10      	pop	{r4, pc}
 8003964:	20000018 	.word	0x20000018

08003968 <__libc_init_array>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	2600      	movs	r6, #0
 800396c:	4d0c      	ldr	r5, [pc, #48]	; (80039a0 <__libc_init_array+0x38>)
 800396e:	4c0d      	ldr	r4, [pc, #52]	; (80039a4 <__libc_init_array+0x3c>)
 8003970:	1b64      	subs	r4, r4, r5
 8003972:	10a4      	asrs	r4, r4, #2
 8003974:	42a6      	cmp	r6, r4
 8003976:	d109      	bne.n	800398c <__libc_init_array+0x24>
 8003978:	2600      	movs	r6, #0
 800397a:	f000 fd7d 	bl	8004478 <_init>
 800397e:	4d0a      	ldr	r5, [pc, #40]	; (80039a8 <__libc_init_array+0x40>)
 8003980:	4c0a      	ldr	r4, [pc, #40]	; (80039ac <__libc_init_array+0x44>)
 8003982:	1b64      	subs	r4, r4, r5
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	42a6      	cmp	r6, r4
 8003988:	d105      	bne.n	8003996 <__libc_init_array+0x2e>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	00b3      	lsls	r3, r6, #2
 800398e:	58eb      	ldr	r3, [r5, r3]
 8003990:	4798      	blx	r3
 8003992:	3601      	adds	r6, #1
 8003994:	e7ee      	b.n	8003974 <__libc_init_array+0xc>
 8003996:	00b3      	lsls	r3, r6, #2
 8003998:	58eb      	ldr	r3, [r5, r3]
 800399a:	4798      	blx	r3
 800399c:	3601      	adds	r6, #1
 800399e:	e7f2      	b.n	8003986 <__libc_init_array+0x1e>
 80039a0:	0800470c 	.word	0x0800470c
 80039a4:	0800470c 	.word	0x0800470c
 80039a8:	0800470c 	.word	0x0800470c
 80039ac:	08004710 	.word	0x08004710

080039b0 <malloc>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <malloc+0x10>)
 80039b4:	0001      	movs	r1, r0
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	f000 f86e 	bl	8003a98 <_malloc_r>
 80039bc:	bd10      	pop	{r4, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	20000018 	.word	0x20000018

080039c4 <memcpy>:
 80039c4:	2300      	movs	r3, #0
 80039c6:	b510      	push	{r4, lr}
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d100      	bne.n	80039ce <memcpy+0xa>
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	5ccc      	ldrb	r4, [r1, r3]
 80039d0:	54c4      	strb	r4, [r0, r3]
 80039d2:	3301      	adds	r3, #1
 80039d4:	e7f8      	b.n	80039c8 <memcpy+0x4>

080039d6 <memset>:
 80039d6:	0003      	movs	r3, r0
 80039d8:	1882      	adds	r2, r0, r2
 80039da:	4293      	cmp	r3, r2
 80039dc:	d100      	bne.n	80039e0 <memset+0xa>
 80039de:	4770      	bx	lr
 80039e0:	7019      	strb	r1, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	e7f9      	b.n	80039da <memset+0x4>

080039e6 <_calloc_r>:
 80039e6:	434a      	muls	r2, r1
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	0011      	movs	r1, r2
 80039ec:	0014      	movs	r4, r2
 80039ee:	f000 f853 	bl	8003a98 <_malloc_r>
 80039f2:	1e05      	subs	r5, r0, #0
 80039f4:	d003      	beq.n	80039fe <_calloc_r+0x18>
 80039f6:	0022      	movs	r2, r4
 80039f8:	2100      	movs	r1, #0
 80039fa:	f7ff ffec 	bl	80039d6 <memset>
 80039fe:	0028      	movs	r0, r5
 8003a00:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a04 <_free_r>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	0005      	movs	r5, r0
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	d010      	beq.n	8003a2e <_free_r+0x2a>
 8003a0c:	1f0c      	subs	r4, r1, #4
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da00      	bge.n	8003a16 <_free_r+0x12>
 8003a14:	18e4      	adds	r4, r4, r3
 8003a16:	0028      	movs	r0, r5
 8003a18:	f000 f9d5 	bl	8003dc6 <__malloc_lock>
 8003a1c:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <_free_r+0x90>)
 8003a1e:	6813      	ldr	r3, [r2, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <_free_r+0x2c>
 8003a24:	6063      	str	r3, [r4, #4]
 8003a26:	6014      	str	r4, [r2, #0]
 8003a28:	0028      	movs	r0, r5
 8003a2a:	f000 f9cd 	bl	8003dc8 <__malloc_unlock>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	d909      	bls.n	8003a48 <_free_r+0x44>
 8003a34:	6821      	ldr	r1, [r4, #0]
 8003a36:	1860      	adds	r0, r4, r1
 8003a38:	4283      	cmp	r3, r0
 8003a3a:	d1f3      	bne.n	8003a24 <_free_r+0x20>
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	1841      	adds	r1, r0, r1
 8003a42:	6021      	str	r1, [r4, #0]
 8003a44:	e7ee      	b.n	8003a24 <_free_r+0x20>
 8003a46:	0013      	movs	r3, r2
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	2a00      	cmp	r2, #0
 8003a4c:	d001      	beq.n	8003a52 <_free_r+0x4e>
 8003a4e:	42a2      	cmp	r2, r4
 8003a50:	d9f9      	bls.n	8003a46 <_free_r+0x42>
 8003a52:	6819      	ldr	r1, [r3, #0]
 8003a54:	1858      	adds	r0, r3, r1
 8003a56:	42a0      	cmp	r0, r4
 8003a58:	d10b      	bne.n	8003a72 <_free_r+0x6e>
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	1809      	adds	r1, r1, r0
 8003a5e:	1858      	adds	r0, r3, r1
 8003a60:	6019      	str	r1, [r3, #0]
 8003a62:	4282      	cmp	r2, r0
 8003a64:	d1e0      	bne.n	8003a28 <_free_r+0x24>
 8003a66:	6810      	ldr	r0, [r2, #0]
 8003a68:	6852      	ldr	r2, [r2, #4]
 8003a6a:	1841      	adds	r1, r0, r1
 8003a6c:	6019      	str	r1, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	e7da      	b.n	8003a28 <_free_r+0x24>
 8003a72:	42a0      	cmp	r0, r4
 8003a74:	d902      	bls.n	8003a7c <_free_r+0x78>
 8003a76:	230c      	movs	r3, #12
 8003a78:	602b      	str	r3, [r5, #0]
 8003a7a:	e7d5      	b.n	8003a28 <_free_r+0x24>
 8003a7c:	6821      	ldr	r1, [r4, #0]
 8003a7e:	1860      	adds	r0, r4, r1
 8003a80:	4282      	cmp	r2, r0
 8003a82:	d103      	bne.n	8003a8c <_free_r+0x88>
 8003a84:	6810      	ldr	r0, [r2, #0]
 8003a86:	6852      	ldr	r2, [r2, #4]
 8003a88:	1841      	adds	r1, r0, r1
 8003a8a:	6021      	str	r1, [r4, #0]
 8003a8c:	6062      	str	r2, [r4, #4]
 8003a8e:	605c      	str	r4, [r3, #4]
 8003a90:	e7ca      	b.n	8003a28 <_free_r+0x24>
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	2000027c 	.word	0x2000027c

08003a98 <_malloc_r>:
 8003a98:	2303      	movs	r3, #3
 8003a9a:	b570      	push	{r4, r5, r6, lr}
 8003a9c:	1ccd      	adds	r5, r1, #3
 8003a9e:	439d      	bics	r5, r3
 8003aa0:	3508      	adds	r5, #8
 8003aa2:	0006      	movs	r6, r0
 8003aa4:	2d0c      	cmp	r5, #12
 8003aa6:	d21e      	bcs.n	8003ae6 <_malloc_r+0x4e>
 8003aa8:	250c      	movs	r5, #12
 8003aaa:	42a9      	cmp	r1, r5
 8003aac:	d81d      	bhi.n	8003aea <_malloc_r+0x52>
 8003aae:	0030      	movs	r0, r6
 8003ab0:	f000 f989 	bl	8003dc6 <__malloc_lock>
 8003ab4:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <_malloc_r+0xb4>)
 8003ab6:	6814      	ldr	r4, [r2, #0]
 8003ab8:	0021      	movs	r1, r4
 8003aba:	2900      	cmp	r1, #0
 8003abc:	d119      	bne.n	8003af2 <_malloc_r+0x5a>
 8003abe:	4c24      	ldr	r4, [pc, #144]	; (8003b50 <_malloc_r+0xb8>)
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d103      	bne.n	8003ace <_malloc_r+0x36>
 8003ac6:	0030      	movs	r0, r6
 8003ac8:	f000 f844 	bl	8003b54 <_sbrk_r>
 8003acc:	6020      	str	r0, [r4, #0]
 8003ace:	0029      	movs	r1, r5
 8003ad0:	0030      	movs	r0, r6
 8003ad2:	f000 f83f 	bl	8003b54 <_sbrk_r>
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	d12c      	bne.n	8003b34 <_malloc_r+0x9c>
 8003ada:	230c      	movs	r3, #12
 8003adc:	0030      	movs	r0, r6
 8003ade:	6033      	str	r3, [r6, #0]
 8003ae0:	f000 f972 	bl	8003dc8 <__malloc_unlock>
 8003ae4:	e003      	b.n	8003aee <_malloc_r+0x56>
 8003ae6:	2d00      	cmp	r5, #0
 8003ae8:	dadf      	bge.n	8003aaa <_malloc_r+0x12>
 8003aea:	230c      	movs	r3, #12
 8003aec:	6033      	str	r3, [r6, #0]
 8003aee:	2000      	movs	r0, #0
 8003af0:	bd70      	pop	{r4, r5, r6, pc}
 8003af2:	680b      	ldr	r3, [r1, #0]
 8003af4:	1b5b      	subs	r3, r3, r5
 8003af6:	d41a      	bmi.n	8003b2e <_malloc_r+0x96>
 8003af8:	2b0b      	cmp	r3, #11
 8003afa:	d903      	bls.n	8003b04 <_malloc_r+0x6c>
 8003afc:	600b      	str	r3, [r1, #0]
 8003afe:	18cc      	adds	r4, r1, r3
 8003b00:	6025      	str	r5, [r4, #0]
 8003b02:	e003      	b.n	8003b0c <_malloc_r+0x74>
 8003b04:	428c      	cmp	r4, r1
 8003b06:	d10e      	bne.n	8003b26 <_malloc_r+0x8e>
 8003b08:	6863      	ldr	r3, [r4, #4]
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	0030      	movs	r0, r6
 8003b0e:	f000 f95b 	bl	8003dc8 <__malloc_unlock>
 8003b12:	0020      	movs	r0, r4
 8003b14:	2207      	movs	r2, #7
 8003b16:	300b      	adds	r0, #11
 8003b18:	1d23      	adds	r3, r4, #4
 8003b1a:	4390      	bics	r0, r2
 8003b1c:	1ac3      	subs	r3, r0, r3
 8003b1e:	d0e7      	beq.n	8003af0 <_malloc_r+0x58>
 8003b20:	425a      	negs	r2, r3
 8003b22:	50e2      	str	r2, [r4, r3]
 8003b24:	e7e4      	b.n	8003af0 <_malloc_r+0x58>
 8003b26:	684b      	ldr	r3, [r1, #4]
 8003b28:	6063      	str	r3, [r4, #4]
 8003b2a:	000c      	movs	r4, r1
 8003b2c:	e7ee      	b.n	8003b0c <_malloc_r+0x74>
 8003b2e:	000c      	movs	r4, r1
 8003b30:	6849      	ldr	r1, [r1, #4]
 8003b32:	e7c2      	b.n	8003aba <_malloc_r+0x22>
 8003b34:	2303      	movs	r3, #3
 8003b36:	1cc4      	adds	r4, r0, #3
 8003b38:	439c      	bics	r4, r3
 8003b3a:	42a0      	cmp	r0, r4
 8003b3c:	d0e0      	beq.n	8003b00 <_malloc_r+0x68>
 8003b3e:	1a21      	subs	r1, r4, r0
 8003b40:	0030      	movs	r0, r6
 8003b42:	f000 f807 	bl	8003b54 <_sbrk_r>
 8003b46:	1c43      	adds	r3, r0, #1
 8003b48:	d1da      	bne.n	8003b00 <_malloc_r+0x68>
 8003b4a:	e7c6      	b.n	8003ada <_malloc_r+0x42>
 8003b4c:	2000027c 	.word	0x2000027c
 8003b50:	20000280 	.word	0x20000280

08003b54 <_sbrk_r>:
 8003b54:	2300      	movs	r3, #0
 8003b56:	b570      	push	{r4, r5, r6, lr}
 8003b58:	4c06      	ldr	r4, [pc, #24]	; (8003b74 <_sbrk_r+0x20>)
 8003b5a:	0005      	movs	r5, r0
 8003b5c:	0008      	movs	r0, r1
 8003b5e:	6023      	str	r3, [r4, #0]
 8003b60:	f000 fc7a 	bl	8004458 <_sbrk>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	d103      	bne.n	8003b70 <_sbrk_r+0x1c>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d000      	beq.n	8003b70 <_sbrk_r+0x1c>
 8003b6e:	602b      	str	r3, [r5, #0]
 8003b70:	bd70      	pop	{r4, r5, r6, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	20000450 	.word	0x20000450

08003b78 <siprintf>:
 8003b78:	b40e      	push	{r1, r2, r3}
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	b09d      	sub	sp, #116	; 0x74
 8003b7e:	a902      	add	r1, sp, #8
 8003b80:	9002      	str	r0, [sp, #8]
 8003b82:	6108      	str	r0, [r1, #16]
 8003b84:	480b      	ldr	r0, [pc, #44]	; (8003bb4 <siprintf+0x3c>)
 8003b86:	2482      	movs	r4, #130	; 0x82
 8003b88:	6088      	str	r0, [r1, #8]
 8003b8a:	6148      	str	r0, [r1, #20]
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	4240      	negs	r0, r0
 8003b90:	ab1f      	add	r3, sp, #124	; 0x7c
 8003b92:	81c8      	strh	r0, [r1, #14]
 8003b94:	4808      	ldr	r0, [pc, #32]	; (8003bb8 <siprintf+0x40>)
 8003b96:	cb04      	ldmia	r3!, {r2}
 8003b98:	00a4      	lsls	r4, r4, #2
 8003b9a:	6800      	ldr	r0, [r0, #0]
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	818c      	strh	r4, [r1, #12]
 8003ba0:	f000 f976 	bl	8003e90 <_svfiprintf_r>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9a02      	ldr	r2, [sp, #8]
 8003ba8:	7013      	strb	r3, [r2, #0]
 8003baa:	b01d      	add	sp, #116	; 0x74
 8003bac:	bc10      	pop	{r4}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	b003      	add	sp, #12
 8003bb2:	4718      	bx	r3
 8003bb4:	7fffffff 	.word	0x7fffffff
 8003bb8:	20000018 	.word	0x20000018

08003bbc <strtok>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <strtok+0x4c>)
 8003bc0:	0006      	movs	r6, r0
 8003bc2:	681d      	ldr	r5, [r3, #0]
 8003bc4:	000f      	movs	r7, r1
 8003bc6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003bc8:	2c00      	cmp	r4, #0
 8003bca:	d116      	bne.n	8003bfa <strtok+0x3e>
 8003bcc:	2050      	movs	r0, #80	; 0x50
 8003bce:	f7ff feef 	bl	80039b0 <malloc>
 8003bd2:	65a8      	str	r0, [r5, #88]	; 0x58
 8003bd4:	6004      	str	r4, [r0, #0]
 8003bd6:	6044      	str	r4, [r0, #4]
 8003bd8:	6084      	str	r4, [r0, #8]
 8003bda:	60c4      	str	r4, [r0, #12]
 8003bdc:	6104      	str	r4, [r0, #16]
 8003bde:	6144      	str	r4, [r0, #20]
 8003be0:	6184      	str	r4, [r0, #24]
 8003be2:	6284      	str	r4, [r0, #40]	; 0x28
 8003be4:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003be6:	6304      	str	r4, [r0, #48]	; 0x30
 8003be8:	6344      	str	r4, [r0, #52]	; 0x34
 8003bea:	6384      	str	r4, [r0, #56]	; 0x38
 8003bec:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003bee:	6404      	str	r4, [r0, #64]	; 0x40
 8003bf0:	6444      	str	r4, [r0, #68]	; 0x44
 8003bf2:	6484      	str	r4, [r0, #72]	; 0x48
 8003bf4:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003bf6:	7704      	strb	r4, [r0, #28]
 8003bf8:	6244      	str	r4, [r0, #36]	; 0x24
 8003bfa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003bfc:	0039      	movs	r1, r7
 8003bfe:	0030      	movs	r0, r6
 8003c00:	2301      	movs	r3, #1
 8003c02:	f000 f803 	bl	8003c0c <__strtok_r>
 8003c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c08:	20000018 	.word	0x20000018

08003c0c <__strtok_r>:
 8003c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d104      	bne.n	8003c1c <__strtok_r+0x10>
 8003c12:	6810      	ldr	r0, [r2, #0]
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d101      	bne.n	8003c1c <__strtok_r+0x10>
 8003c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1a:	0020      	movs	r0, r4
 8003c1c:	000e      	movs	r6, r1
 8003c1e:	7805      	ldrb	r5, [r0, #0]
 8003c20:	1c44      	adds	r4, r0, #1
 8003c22:	7837      	ldrb	r7, [r6, #0]
 8003c24:	2f00      	cmp	r7, #0
 8003c26:	d104      	bne.n	8003c32 <__strtok_r+0x26>
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	d110      	bne.n	8003c4e <__strtok_r+0x42>
 8003c2c:	6015      	str	r5, [r2, #0]
 8003c2e:	0028      	movs	r0, r5
 8003c30:	e7f2      	b.n	8003c18 <__strtok_r+0xc>
 8003c32:	3601      	adds	r6, #1
 8003c34:	42bd      	cmp	r5, r7
 8003c36:	d1f4      	bne.n	8003c22 <__strtok_r+0x16>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ee      	bne.n	8003c1a <__strtok_r+0xe>
 8003c3c:	6014      	str	r4, [r2, #0]
 8003c3e:	7003      	strb	r3, [r0, #0]
 8003c40:	e7ea      	b.n	8003c18 <__strtok_r+0xc>
 8003c42:	0033      	movs	r3, r6
 8003c44:	e00e      	b.n	8003c64 <__strtok_r+0x58>
 8003c46:	3501      	adds	r5, #1
 8003c48:	001c      	movs	r4, r3
 8003c4a:	2f00      	cmp	r7, #0
 8003c4c:	d102      	bne.n	8003c54 <__strtok_r+0x48>
 8003c4e:	000d      	movs	r5, r1
 8003c50:	7826      	ldrb	r6, [r4, #0]
 8003c52:	1c63      	adds	r3, r4, #1
 8003c54:	782f      	ldrb	r7, [r5, #0]
 8003c56:	42be      	cmp	r6, r7
 8003c58:	d1f5      	bne.n	8003c46 <__strtok_r+0x3a>
 8003c5a:	2e00      	cmp	r6, #0
 8003c5c:	d0f1      	beq.n	8003c42 <__strtok_r+0x36>
 8003c5e:	2400      	movs	r4, #0
 8003c60:	1e59      	subs	r1, r3, #1
 8003c62:	700c      	strb	r4, [r1, #0]
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e7d7      	b.n	8003c18 <__strtok_r+0xc>

08003c68 <_strtol_l.isra.0>:
 8003c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6a:	001f      	movs	r7, r3
 8003c6c:	000e      	movs	r6, r1
 8003c6e:	b087      	sub	sp, #28
 8003c70:	9005      	str	r0, [sp, #20]
 8003c72:	9103      	str	r1, [sp, #12]
 8003c74:	9202      	str	r2, [sp, #8]
 8003c76:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003c78:	7834      	ldrb	r4, [r6, #0]
 8003c7a:	f000 f88f 	bl	8003d9c <__locale_ctype_ptr_l>
 8003c7e:	2208      	movs	r2, #8
 8003c80:	1900      	adds	r0, r0, r4
 8003c82:	7843      	ldrb	r3, [r0, #1]
 8003c84:	1c75      	adds	r5, r6, #1
 8003c86:	4013      	ands	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <_strtol_l.isra.0+0x3c>
 8003c8a:	2c2d      	cmp	r4, #45	; 0x2d
 8003c8c:	d10c      	bne.n	8003ca8 <_strtol_l.isra.0+0x40>
 8003c8e:	3301      	adds	r3, #1
 8003c90:	782c      	ldrb	r4, [r5, #0]
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	1cb5      	adds	r5, r6, #2
 8003c96:	2f00      	cmp	r7, #0
 8003c98:	d00c      	beq.n	8003cb4 <_strtol_l.isra.0+0x4c>
 8003c9a:	2f10      	cmp	r7, #16
 8003c9c:	d114      	bne.n	8003cc8 <_strtol_l.isra.0+0x60>
 8003c9e:	2c30      	cmp	r4, #48	; 0x30
 8003ca0:	d00a      	beq.n	8003cb8 <_strtol_l.isra.0+0x50>
 8003ca2:	e011      	b.n	8003cc8 <_strtol_l.isra.0+0x60>
 8003ca4:	002e      	movs	r6, r5
 8003ca6:	e7e6      	b.n	8003c76 <_strtol_l.isra.0+0xe>
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	2c2b      	cmp	r4, #43	; 0x2b
 8003cac:	d1f3      	bne.n	8003c96 <_strtol_l.isra.0+0x2e>
 8003cae:	782c      	ldrb	r4, [r5, #0]
 8003cb0:	1cb5      	adds	r5, r6, #2
 8003cb2:	e7f0      	b.n	8003c96 <_strtol_l.isra.0+0x2e>
 8003cb4:	2c30      	cmp	r4, #48	; 0x30
 8003cb6:	d12f      	bne.n	8003d18 <_strtol_l.isra.0+0xb0>
 8003cb8:	2220      	movs	r2, #32
 8003cba:	782b      	ldrb	r3, [r5, #0]
 8003cbc:	4393      	bics	r3, r2
 8003cbe:	2b58      	cmp	r3, #88	; 0x58
 8003cc0:	d151      	bne.n	8003d66 <_strtol_l.isra.0+0xfe>
 8003cc2:	2710      	movs	r7, #16
 8003cc4:	786c      	ldrb	r4, [r5, #1]
 8003cc6:	3502      	adds	r5, #2
 8003cc8:	9b01      	ldr	r3, [sp, #4]
 8003cca:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <_strtol_l.isra.0+0x108>)
 8003ccc:	0039      	movs	r1, r7
 8003cce:	189e      	adds	r6, r3, r2
 8003cd0:	0030      	movs	r0, r6
 8003cd2:	f7fc faa7 	bl	8000224 <__aeabi_uidivmod>
 8003cd6:	0030      	movs	r0, r6
 8003cd8:	9104      	str	r1, [sp, #16]
 8003cda:	0039      	movs	r1, r7
 8003cdc:	f7fc fa1c 	bl	8000118 <__udivsi3>
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	4249      	negs	r1, r1
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	468c      	mov	ip, r1
 8003cea:	0018      	movs	r0, r3
 8003cec:	0021      	movs	r1, r4
 8003cee:	3930      	subs	r1, #48	; 0x30
 8003cf0:	2909      	cmp	r1, #9
 8003cf2:	d813      	bhi.n	8003d1c <_strtol_l.isra.0+0xb4>
 8003cf4:	000c      	movs	r4, r1
 8003cf6:	42a7      	cmp	r7, r4
 8003cf8:	dd1c      	ble.n	8003d34 <_strtol_l.isra.0+0xcc>
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	d009      	beq.n	8003d12 <_strtol_l.isra.0+0xaa>
 8003cfe:	4663      	mov	r3, ip
 8003d00:	4282      	cmp	r2, r0
 8003d02:	d306      	bcc.n	8003d12 <_strtol_l.isra.0+0xaa>
 8003d04:	d102      	bne.n	8003d0c <_strtol_l.isra.0+0xa4>
 8003d06:	9904      	ldr	r1, [sp, #16]
 8003d08:	42a1      	cmp	r1, r4
 8003d0a:	db02      	blt.n	8003d12 <_strtol_l.isra.0+0xaa>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4378      	muls	r0, r7
 8003d10:	1820      	adds	r0, r4, r0
 8003d12:	782c      	ldrb	r4, [r5, #0]
 8003d14:	3501      	adds	r5, #1
 8003d16:	e7e9      	b.n	8003cec <_strtol_l.isra.0+0x84>
 8003d18:	270a      	movs	r7, #10
 8003d1a:	e7d5      	b.n	8003cc8 <_strtol_l.isra.0+0x60>
 8003d1c:	0021      	movs	r1, r4
 8003d1e:	3941      	subs	r1, #65	; 0x41
 8003d20:	2919      	cmp	r1, #25
 8003d22:	d801      	bhi.n	8003d28 <_strtol_l.isra.0+0xc0>
 8003d24:	3c37      	subs	r4, #55	; 0x37
 8003d26:	e7e6      	b.n	8003cf6 <_strtol_l.isra.0+0x8e>
 8003d28:	0021      	movs	r1, r4
 8003d2a:	3961      	subs	r1, #97	; 0x61
 8003d2c:	2919      	cmp	r1, #25
 8003d2e:	d801      	bhi.n	8003d34 <_strtol_l.isra.0+0xcc>
 8003d30:	3c57      	subs	r4, #87	; 0x57
 8003d32:	e7e0      	b.n	8003cf6 <_strtol_l.isra.0+0x8e>
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	d108      	bne.n	8003d4a <_strtol_l.isra.0+0xe2>
 8003d38:	9a05      	ldr	r2, [sp, #20]
 8003d3a:	3323      	adds	r3, #35	; 0x23
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	9b02      	ldr	r3, [sp, #8]
 8003d40:	0030      	movs	r0, r6
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <_strtol_l.isra.0+0xf6>
 8003d46:	b007      	add	sp, #28
 8003d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d4a:	9a01      	ldr	r2, [sp, #4]
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	d000      	beq.n	8003d52 <_strtol_l.isra.0+0xea>
 8003d50:	4240      	negs	r0, r0
 8003d52:	9a02      	ldr	r2, [sp, #8]
 8003d54:	2a00      	cmp	r2, #0
 8003d56:	d0f6      	beq.n	8003d46 <_strtol_l.isra.0+0xde>
 8003d58:	9a03      	ldr	r2, [sp, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d000      	beq.n	8003d60 <_strtol_l.isra.0+0xf8>
 8003d5e:	1e6a      	subs	r2, r5, #1
 8003d60:	9b02      	ldr	r3, [sp, #8]
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e7ef      	b.n	8003d46 <_strtol_l.isra.0+0xde>
 8003d66:	2430      	movs	r4, #48	; 0x30
 8003d68:	2f00      	cmp	r7, #0
 8003d6a:	d1ad      	bne.n	8003cc8 <_strtol_l.isra.0+0x60>
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	e7ab      	b.n	8003cc8 <_strtol_l.isra.0+0x60>
 8003d70:	7fffffff 	.word	0x7fffffff

08003d74 <strtol>:
 8003d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d76:	0013      	movs	r3, r2
 8003d78:	4a06      	ldr	r2, [pc, #24]	; (8003d94 <strtol+0x20>)
 8003d7a:	0005      	movs	r5, r0
 8003d7c:	6810      	ldr	r0, [r2, #0]
 8003d7e:	6a04      	ldr	r4, [r0, #32]
 8003d80:	2c00      	cmp	r4, #0
 8003d82:	d100      	bne.n	8003d86 <strtol+0x12>
 8003d84:	4c04      	ldr	r4, [pc, #16]	; (8003d98 <strtol+0x24>)
 8003d86:	000a      	movs	r2, r1
 8003d88:	9400      	str	r4, [sp, #0]
 8003d8a:	0029      	movs	r1, r5
 8003d8c:	f7ff ff6c 	bl	8003c68 <_strtol_l.isra.0>
 8003d90:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	20000018 	.word	0x20000018
 8003d98:	2000007c 	.word	0x2000007c

08003d9c <__locale_ctype_ptr_l>:
 8003d9c:	30ec      	adds	r0, #236	; 0xec
 8003d9e:	6800      	ldr	r0, [r0, #0]
 8003da0:	4770      	bx	lr

08003da2 <__ascii_mbtowc>:
 8003da2:	b082      	sub	sp, #8
 8003da4:	2900      	cmp	r1, #0
 8003da6:	d100      	bne.n	8003daa <__ascii_mbtowc+0x8>
 8003da8:	a901      	add	r1, sp, #4
 8003daa:	1e10      	subs	r0, r2, #0
 8003dac:	d006      	beq.n	8003dbc <__ascii_mbtowc+0x1a>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d006      	beq.n	8003dc0 <__ascii_mbtowc+0x1e>
 8003db2:	7813      	ldrb	r3, [r2, #0]
 8003db4:	600b      	str	r3, [r1, #0]
 8003db6:	7810      	ldrb	r0, [r2, #0]
 8003db8:	1e43      	subs	r3, r0, #1
 8003dba:	4198      	sbcs	r0, r3
 8003dbc:	b002      	add	sp, #8
 8003dbe:	4770      	bx	lr
 8003dc0:	2002      	movs	r0, #2
 8003dc2:	4240      	negs	r0, r0
 8003dc4:	e7fa      	b.n	8003dbc <__ascii_mbtowc+0x1a>

08003dc6 <__malloc_lock>:
 8003dc6:	4770      	bx	lr

08003dc8 <__malloc_unlock>:
 8003dc8:	4770      	bx	lr
	...

08003dcc <__ssputs_r>:
 8003dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dce:	688e      	ldr	r6, [r1, #8]
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	0007      	movs	r7, r0
 8003dd4:	000c      	movs	r4, r1
 8003dd6:	9203      	str	r2, [sp, #12]
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	429e      	cmp	r6, r3
 8003ddc:	d839      	bhi.n	8003e52 <__ssputs_r+0x86>
 8003dde:	2390      	movs	r3, #144	; 0x90
 8003de0:	898a      	ldrh	r2, [r1, #12]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	421a      	tst	r2, r3
 8003de6:	d034      	beq.n	8003e52 <__ssputs_r+0x86>
 8003de8:	2503      	movs	r5, #3
 8003dea:	6909      	ldr	r1, [r1, #16]
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	1a5b      	subs	r3, r3, r1
 8003df0:	9302      	str	r3, [sp, #8]
 8003df2:	6963      	ldr	r3, [r4, #20]
 8003df4:	9802      	ldr	r0, [sp, #8]
 8003df6:	435d      	muls	r5, r3
 8003df8:	0feb      	lsrs	r3, r5, #31
 8003dfa:	195d      	adds	r5, r3, r5
 8003dfc:	9b01      	ldr	r3, [sp, #4]
 8003dfe:	106d      	asrs	r5, r5, #1
 8003e00:	3301      	adds	r3, #1
 8003e02:	181b      	adds	r3, r3, r0
 8003e04:	42ab      	cmp	r3, r5
 8003e06:	d900      	bls.n	8003e0a <__ssputs_r+0x3e>
 8003e08:	001d      	movs	r5, r3
 8003e0a:	0553      	lsls	r3, r2, #21
 8003e0c:	d532      	bpl.n	8003e74 <__ssputs_r+0xa8>
 8003e0e:	0029      	movs	r1, r5
 8003e10:	0038      	movs	r0, r7
 8003e12:	f7ff fe41 	bl	8003a98 <_malloc_r>
 8003e16:	1e06      	subs	r6, r0, #0
 8003e18:	d109      	bne.n	8003e2e <__ssputs_r+0x62>
 8003e1a:	230c      	movs	r3, #12
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	2340      	movs	r3, #64	; 0x40
 8003e20:	2001      	movs	r0, #1
 8003e22:	89a2      	ldrh	r2, [r4, #12]
 8003e24:	4240      	negs	r0, r0
 8003e26:	4313      	orrs	r3, r2
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	b005      	add	sp, #20
 8003e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e2e:	9a02      	ldr	r2, [sp, #8]
 8003e30:	6921      	ldr	r1, [r4, #16]
 8003e32:	f7ff fdc7 	bl	80039c4 <memcpy>
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <__ssputs_r+0xc0>)
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	9b02      	ldr	r3, [sp, #8]
 8003e44:	6126      	str	r6, [r4, #16]
 8003e46:	18f6      	adds	r6, r6, r3
 8003e48:	6026      	str	r6, [r4, #0]
 8003e4a:	6165      	str	r5, [r4, #20]
 8003e4c:	9e01      	ldr	r6, [sp, #4]
 8003e4e:	1aed      	subs	r5, r5, r3
 8003e50:	60a5      	str	r5, [r4, #8]
 8003e52:	9b01      	ldr	r3, [sp, #4]
 8003e54:	42b3      	cmp	r3, r6
 8003e56:	d200      	bcs.n	8003e5a <__ssputs_r+0x8e>
 8003e58:	001e      	movs	r6, r3
 8003e5a:	0032      	movs	r2, r6
 8003e5c:	9903      	ldr	r1, [sp, #12]
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	f000 fab9 	bl	80043d6 <memmove>
 8003e64:	68a3      	ldr	r3, [r4, #8]
 8003e66:	2000      	movs	r0, #0
 8003e68:	1b9b      	subs	r3, r3, r6
 8003e6a:	60a3      	str	r3, [r4, #8]
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	199e      	adds	r6, r3, r6
 8003e70:	6026      	str	r6, [r4, #0]
 8003e72:	e7da      	b.n	8003e2a <__ssputs_r+0x5e>
 8003e74:	002a      	movs	r2, r5
 8003e76:	0038      	movs	r0, r7
 8003e78:	f000 fabf 	bl	80043fa <_realloc_r>
 8003e7c:	1e06      	subs	r6, r0, #0
 8003e7e:	d1e0      	bne.n	8003e42 <__ssputs_r+0x76>
 8003e80:	6921      	ldr	r1, [r4, #16]
 8003e82:	0038      	movs	r0, r7
 8003e84:	f7ff fdbe 	bl	8003a04 <_free_r>
 8003e88:	e7c7      	b.n	8003e1a <__ssputs_r+0x4e>
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	fffffb7f 	.word	0xfffffb7f

08003e90 <_svfiprintf_r>:
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	b09f      	sub	sp, #124	; 0x7c
 8003e94:	9002      	str	r0, [sp, #8]
 8003e96:	9305      	str	r3, [sp, #20]
 8003e98:	898b      	ldrh	r3, [r1, #12]
 8003e9a:	000f      	movs	r7, r1
 8003e9c:	0016      	movs	r6, r2
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	d511      	bpl.n	8003ec6 <_svfiprintf_r+0x36>
 8003ea2:	690b      	ldr	r3, [r1, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10e      	bne.n	8003ec6 <_svfiprintf_r+0x36>
 8003ea8:	2140      	movs	r1, #64	; 0x40
 8003eaa:	f7ff fdf5 	bl	8003a98 <_malloc_r>
 8003eae:	6038      	str	r0, [r7, #0]
 8003eb0:	6138      	str	r0, [r7, #16]
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d105      	bne.n	8003ec2 <_svfiprintf_r+0x32>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	9a02      	ldr	r2, [sp, #8]
 8003eba:	3801      	subs	r0, #1
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	b01f      	add	sp, #124	; 0x7c
 8003ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec2:	2340      	movs	r3, #64	; 0x40
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	ad06      	add	r5, sp, #24
 8003eca:	616b      	str	r3, [r5, #20]
 8003ecc:	3320      	adds	r3, #32
 8003ece:	766b      	strb	r3, [r5, #25]
 8003ed0:	3310      	adds	r3, #16
 8003ed2:	76ab      	strb	r3, [r5, #26]
 8003ed4:	0034      	movs	r4, r6
 8003ed6:	7823      	ldrb	r3, [r4, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d147      	bne.n	8003f6c <_svfiprintf_r+0xdc>
 8003edc:	1ba3      	subs	r3, r4, r6
 8003ede:	9304      	str	r3, [sp, #16]
 8003ee0:	d00d      	beq.n	8003efe <_svfiprintf_r+0x6e>
 8003ee2:	1ba3      	subs	r3, r4, r6
 8003ee4:	0032      	movs	r2, r6
 8003ee6:	0039      	movs	r1, r7
 8003ee8:	9802      	ldr	r0, [sp, #8]
 8003eea:	f7ff ff6f 	bl	8003dcc <__ssputs_r>
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	d100      	bne.n	8003ef4 <_svfiprintf_r+0x64>
 8003ef2:	e0b5      	b.n	8004060 <_svfiprintf_r+0x1d0>
 8003ef4:	696a      	ldr	r2, [r5, #20]
 8003ef6:	9b04      	ldr	r3, [sp, #16]
 8003ef8:	4694      	mov	ip, r2
 8003efa:	4463      	add	r3, ip
 8003efc:	616b      	str	r3, [r5, #20]
 8003efe:	7823      	ldrb	r3, [r4, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d100      	bne.n	8003f06 <_svfiprintf_r+0x76>
 8003f04:	e0ac      	b.n	8004060 <_svfiprintf_r+0x1d0>
 8003f06:	2201      	movs	r2, #1
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4252      	negs	r2, r2
 8003f0c:	606a      	str	r2, [r5, #4]
 8003f0e:	a902      	add	r1, sp, #8
 8003f10:	3254      	adds	r2, #84	; 0x54
 8003f12:	1852      	adds	r2, r2, r1
 8003f14:	3401      	adds	r4, #1
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	60eb      	str	r3, [r5, #12]
 8003f1a:	60ab      	str	r3, [r5, #8]
 8003f1c:	7013      	strb	r3, [r2, #0]
 8003f1e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003f20:	4e58      	ldr	r6, [pc, #352]	; (8004084 <_svfiprintf_r+0x1f4>)
 8003f22:	2205      	movs	r2, #5
 8003f24:	7821      	ldrb	r1, [r4, #0]
 8003f26:	0030      	movs	r0, r6
 8003f28:	f000 fa4a 	bl	80043c0 <memchr>
 8003f2c:	1c62      	adds	r2, r4, #1
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d120      	bne.n	8003f74 <_svfiprintf_r+0xe4>
 8003f32:	6829      	ldr	r1, [r5, #0]
 8003f34:	06cb      	lsls	r3, r1, #27
 8003f36:	d504      	bpl.n	8003f42 <_svfiprintf_r+0xb2>
 8003f38:	2353      	movs	r3, #83	; 0x53
 8003f3a:	ae02      	add	r6, sp, #8
 8003f3c:	3020      	adds	r0, #32
 8003f3e:	199b      	adds	r3, r3, r6
 8003f40:	7018      	strb	r0, [r3, #0]
 8003f42:	070b      	lsls	r3, r1, #28
 8003f44:	d504      	bpl.n	8003f50 <_svfiprintf_r+0xc0>
 8003f46:	2353      	movs	r3, #83	; 0x53
 8003f48:	202b      	movs	r0, #43	; 0x2b
 8003f4a:	ae02      	add	r6, sp, #8
 8003f4c:	199b      	adds	r3, r3, r6
 8003f4e:	7018      	strb	r0, [r3, #0]
 8003f50:	7823      	ldrb	r3, [r4, #0]
 8003f52:	2b2a      	cmp	r3, #42	; 0x2a
 8003f54:	d016      	beq.n	8003f84 <_svfiprintf_r+0xf4>
 8003f56:	2000      	movs	r0, #0
 8003f58:	210a      	movs	r1, #10
 8003f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5c:	7822      	ldrb	r2, [r4, #0]
 8003f5e:	3a30      	subs	r2, #48	; 0x30
 8003f60:	2a09      	cmp	r2, #9
 8003f62:	d955      	bls.n	8004010 <_svfiprintf_r+0x180>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d015      	beq.n	8003f94 <_svfiprintf_r+0x104>
 8003f68:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6a:	e013      	b.n	8003f94 <_svfiprintf_r+0x104>
 8003f6c:	2b25      	cmp	r3, #37	; 0x25
 8003f6e:	d0b5      	beq.n	8003edc <_svfiprintf_r+0x4c>
 8003f70:	3401      	adds	r4, #1
 8003f72:	e7b0      	b.n	8003ed6 <_svfiprintf_r+0x46>
 8003f74:	2301      	movs	r3, #1
 8003f76:	1b80      	subs	r0, r0, r6
 8003f78:	4083      	lsls	r3, r0
 8003f7a:	6829      	ldr	r1, [r5, #0]
 8003f7c:	0014      	movs	r4, r2
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	602b      	str	r3, [r5, #0]
 8003f82:	e7cd      	b.n	8003f20 <_svfiprintf_r+0x90>
 8003f84:	9b05      	ldr	r3, [sp, #20]
 8003f86:	1d18      	adds	r0, r3, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	9005      	str	r0, [sp, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	db39      	blt.n	8004004 <_svfiprintf_r+0x174>
 8003f90:	9309      	str	r3, [sp, #36]	; 0x24
 8003f92:	0014      	movs	r4, r2
 8003f94:	7823      	ldrb	r3, [r4, #0]
 8003f96:	2b2e      	cmp	r3, #46	; 0x2e
 8003f98:	d10b      	bne.n	8003fb2 <_svfiprintf_r+0x122>
 8003f9a:	7863      	ldrb	r3, [r4, #1]
 8003f9c:	1c62      	adds	r2, r4, #1
 8003f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa0:	d13e      	bne.n	8004020 <_svfiprintf_r+0x190>
 8003fa2:	9b05      	ldr	r3, [sp, #20]
 8003fa4:	3402      	adds	r4, #2
 8003fa6:	1d1a      	adds	r2, r3, #4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	9205      	str	r2, [sp, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	db34      	blt.n	800401a <_svfiprintf_r+0x18a>
 8003fb0:	9307      	str	r3, [sp, #28]
 8003fb2:	4e35      	ldr	r6, [pc, #212]	; (8004088 <_svfiprintf_r+0x1f8>)
 8003fb4:	7821      	ldrb	r1, [r4, #0]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	0030      	movs	r0, r6
 8003fba:	f000 fa01 	bl	80043c0 <memchr>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d006      	beq.n	8003fd0 <_svfiprintf_r+0x140>
 8003fc2:	2340      	movs	r3, #64	; 0x40
 8003fc4:	1b80      	subs	r0, r0, r6
 8003fc6:	4083      	lsls	r3, r0
 8003fc8:	682a      	ldr	r2, [r5, #0]
 8003fca:	3401      	adds	r4, #1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	7821      	ldrb	r1, [r4, #0]
 8003fd2:	2206      	movs	r2, #6
 8003fd4:	482d      	ldr	r0, [pc, #180]	; (800408c <_svfiprintf_r+0x1fc>)
 8003fd6:	1c66      	adds	r6, r4, #1
 8003fd8:	7629      	strb	r1, [r5, #24]
 8003fda:	f000 f9f1 	bl	80043c0 <memchr>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d046      	beq.n	8004070 <_svfiprintf_r+0x1e0>
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <_svfiprintf_r+0x200>)
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d12f      	bne.n	8004048 <_svfiprintf_r+0x1b8>
 8003fe8:	6829      	ldr	r1, [r5, #0]
 8003fea:	9b05      	ldr	r3, [sp, #20]
 8003fec:	2207      	movs	r2, #7
 8003fee:	05c9      	lsls	r1, r1, #23
 8003ff0:	d528      	bpl.n	8004044 <_svfiprintf_r+0x1b4>
 8003ff2:	189b      	adds	r3, r3, r2
 8003ff4:	4393      	bics	r3, r2
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	9305      	str	r3, [sp, #20]
 8003ffa:	696b      	ldr	r3, [r5, #20]
 8003ffc:	9a03      	ldr	r2, [sp, #12]
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	616b      	str	r3, [r5, #20]
 8004002:	e767      	b.n	8003ed4 <_svfiprintf_r+0x44>
 8004004:	425b      	negs	r3, r3
 8004006:	60eb      	str	r3, [r5, #12]
 8004008:	2302      	movs	r3, #2
 800400a:	430b      	orrs	r3, r1
 800400c:	602b      	str	r3, [r5, #0]
 800400e:	e7c0      	b.n	8003f92 <_svfiprintf_r+0x102>
 8004010:	434b      	muls	r3, r1
 8004012:	3401      	adds	r4, #1
 8004014:	189b      	adds	r3, r3, r2
 8004016:	2001      	movs	r0, #1
 8004018:	e7a0      	b.n	8003f5c <_svfiprintf_r+0xcc>
 800401a:	2301      	movs	r3, #1
 800401c:	425b      	negs	r3, r3
 800401e:	e7c7      	b.n	8003fb0 <_svfiprintf_r+0x120>
 8004020:	2300      	movs	r3, #0
 8004022:	0014      	movs	r4, r2
 8004024:	200a      	movs	r0, #10
 8004026:	001a      	movs	r2, r3
 8004028:	606b      	str	r3, [r5, #4]
 800402a:	7821      	ldrb	r1, [r4, #0]
 800402c:	3930      	subs	r1, #48	; 0x30
 800402e:	2909      	cmp	r1, #9
 8004030:	d903      	bls.n	800403a <_svfiprintf_r+0x1aa>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0bd      	beq.n	8003fb2 <_svfiprintf_r+0x122>
 8004036:	9207      	str	r2, [sp, #28]
 8004038:	e7bb      	b.n	8003fb2 <_svfiprintf_r+0x122>
 800403a:	4342      	muls	r2, r0
 800403c:	3401      	adds	r4, #1
 800403e:	1852      	adds	r2, r2, r1
 8004040:	2301      	movs	r3, #1
 8004042:	e7f2      	b.n	800402a <_svfiprintf_r+0x19a>
 8004044:	3307      	adds	r3, #7
 8004046:	e7d5      	b.n	8003ff4 <_svfiprintf_r+0x164>
 8004048:	ab05      	add	r3, sp, #20
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	003a      	movs	r2, r7
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <_svfiprintf_r+0x204>)
 8004050:	0029      	movs	r1, r5
 8004052:	9802      	ldr	r0, [sp, #8]
 8004054:	e000      	b.n	8004058 <_svfiprintf_r+0x1c8>
 8004056:	bf00      	nop
 8004058:	9003      	str	r0, [sp, #12]
 800405a:	9b03      	ldr	r3, [sp, #12]
 800405c:	3301      	adds	r3, #1
 800405e:	d1cc      	bne.n	8003ffa <_svfiprintf_r+0x16a>
 8004060:	89bb      	ldrh	r3, [r7, #12]
 8004062:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004064:	065b      	lsls	r3, r3, #25
 8004066:	d400      	bmi.n	800406a <_svfiprintf_r+0x1da>
 8004068:	e729      	b.n	8003ebe <_svfiprintf_r+0x2e>
 800406a:	2001      	movs	r0, #1
 800406c:	4240      	negs	r0, r0
 800406e:	e726      	b.n	8003ebe <_svfiprintf_r+0x2e>
 8004070:	ab05      	add	r3, sp, #20
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	003a      	movs	r2, r7
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <_svfiprintf_r+0x204>)
 8004078:	0029      	movs	r1, r5
 800407a:	9802      	ldr	r0, [sp, #8]
 800407c:	f000 f87a 	bl	8004174 <_printf_i>
 8004080:	e7ea      	b.n	8004058 <_svfiprintf_r+0x1c8>
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	080045d6 	.word	0x080045d6
 8004088:	080045dc 	.word	0x080045dc
 800408c:	080045e0 	.word	0x080045e0
 8004090:	00000000 	.word	0x00000000
 8004094:	08003dcd 	.word	0x08003dcd

08004098 <_printf_common>:
 8004098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800409a:	0015      	movs	r5, r2
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	688a      	ldr	r2, [r1, #8]
 80040a0:	690b      	ldr	r3, [r1, #16]
 80040a2:	9000      	str	r0, [sp, #0]
 80040a4:	000c      	movs	r4, r1
 80040a6:	4293      	cmp	r3, r2
 80040a8:	da00      	bge.n	80040ac <_printf_common+0x14>
 80040aa:	0013      	movs	r3, r2
 80040ac:	0022      	movs	r2, r4
 80040ae:	602b      	str	r3, [r5, #0]
 80040b0:	3243      	adds	r2, #67	; 0x43
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	d001      	beq.n	80040bc <_printf_common+0x24>
 80040b8:	3301      	adds	r3, #1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	069b      	lsls	r3, r3, #26
 80040c0:	d502      	bpl.n	80040c8 <_printf_common+0x30>
 80040c2:	682b      	ldr	r3, [r5, #0]
 80040c4:	3302      	adds	r3, #2
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	2706      	movs	r7, #6
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	401f      	ands	r7, r3
 80040ce:	d027      	beq.n	8004120 <_printf_common+0x88>
 80040d0:	0023      	movs	r3, r4
 80040d2:	3343      	adds	r3, #67	; 0x43
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	1e5a      	subs	r2, r3, #1
 80040d8:	4193      	sbcs	r3, r2
 80040da:	6822      	ldr	r2, [r4, #0]
 80040dc:	0692      	lsls	r2, r2, #26
 80040de:	d430      	bmi.n	8004142 <_printf_common+0xaa>
 80040e0:	0022      	movs	r2, r4
 80040e2:	9901      	ldr	r1, [sp, #4]
 80040e4:	3243      	adds	r2, #67	; 0x43
 80040e6:	9800      	ldr	r0, [sp, #0]
 80040e8:	9e08      	ldr	r6, [sp, #32]
 80040ea:	47b0      	blx	r6
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d025      	beq.n	800413c <_printf_common+0xa4>
 80040f0:	2306      	movs	r3, #6
 80040f2:	6820      	ldr	r0, [r4, #0]
 80040f4:	682a      	ldr	r2, [r5, #0]
 80040f6:	68e1      	ldr	r1, [r4, #12]
 80040f8:	4003      	ands	r3, r0
 80040fa:	2500      	movs	r5, #0
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d103      	bne.n	8004108 <_printf_common+0x70>
 8004100:	1a8d      	subs	r5, r1, r2
 8004102:	43eb      	mvns	r3, r5
 8004104:	17db      	asrs	r3, r3, #31
 8004106:	401d      	ands	r5, r3
 8004108:	68a3      	ldr	r3, [r4, #8]
 800410a:	6922      	ldr	r2, [r4, #16]
 800410c:	4293      	cmp	r3, r2
 800410e:	dd01      	ble.n	8004114 <_printf_common+0x7c>
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	18ed      	adds	r5, r5, r3
 8004114:	2700      	movs	r7, #0
 8004116:	42bd      	cmp	r5, r7
 8004118:	d120      	bne.n	800415c <_printf_common+0xc4>
 800411a:	2000      	movs	r0, #0
 800411c:	e010      	b.n	8004140 <_printf_common+0xa8>
 800411e:	3701      	adds	r7, #1
 8004120:	68e3      	ldr	r3, [r4, #12]
 8004122:	682a      	ldr	r2, [r5, #0]
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	429f      	cmp	r7, r3
 8004128:	dad2      	bge.n	80040d0 <_printf_common+0x38>
 800412a:	0022      	movs	r2, r4
 800412c:	2301      	movs	r3, #1
 800412e:	3219      	adds	r2, #25
 8004130:	9901      	ldr	r1, [sp, #4]
 8004132:	9800      	ldr	r0, [sp, #0]
 8004134:	9e08      	ldr	r6, [sp, #32]
 8004136:	47b0      	blx	r6
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d1f0      	bne.n	800411e <_printf_common+0x86>
 800413c:	2001      	movs	r0, #1
 800413e:	4240      	negs	r0, r0
 8004140:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004142:	2030      	movs	r0, #48	; 0x30
 8004144:	18e1      	adds	r1, r4, r3
 8004146:	3143      	adds	r1, #67	; 0x43
 8004148:	7008      	strb	r0, [r1, #0]
 800414a:	0021      	movs	r1, r4
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	3145      	adds	r1, #69	; 0x45
 8004150:	7809      	ldrb	r1, [r1, #0]
 8004152:	18a2      	adds	r2, r4, r2
 8004154:	3243      	adds	r2, #67	; 0x43
 8004156:	3302      	adds	r3, #2
 8004158:	7011      	strb	r1, [r2, #0]
 800415a:	e7c1      	b.n	80040e0 <_printf_common+0x48>
 800415c:	0022      	movs	r2, r4
 800415e:	2301      	movs	r3, #1
 8004160:	321a      	adds	r2, #26
 8004162:	9901      	ldr	r1, [sp, #4]
 8004164:	9800      	ldr	r0, [sp, #0]
 8004166:	9e08      	ldr	r6, [sp, #32]
 8004168:	47b0      	blx	r6
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	d0e6      	beq.n	800413c <_printf_common+0xa4>
 800416e:	3701      	adds	r7, #1
 8004170:	e7d1      	b.n	8004116 <_printf_common+0x7e>
	...

08004174 <_printf_i>:
 8004174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004176:	b08b      	sub	sp, #44	; 0x2c
 8004178:	9206      	str	r2, [sp, #24]
 800417a:	000a      	movs	r2, r1
 800417c:	3243      	adds	r2, #67	; 0x43
 800417e:	9307      	str	r3, [sp, #28]
 8004180:	9005      	str	r0, [sp, #20]
 8004182:	9204      	str	r2, [sp, #16]
 8004184:	7e0a      	ldrb	r2, [r1, #24]
 8004186:	000c      	movs	r4, r1
 8004188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800418a:	2a6e      	cmp	r2, #110	; 0x6e
 800418c:	d100      	bne.n	8004190 <_printf_i+0x1c>
 800418e:	e08f      	b.n	80042b0 <_printf_i+0x13c>
 8004190:	d817      	bhi.n	80041c2 <_printf_i+0x4e>
 8004192:	2a63      	cmp	r2, #99	; 0x63
 8004194:	d02c      	beq.n	80041f0 <_printf_i+0x7c>
 8004196:	d808      	bhi.n	80041aa <_printf_i+0x36>
 8004198:	2a00      	cmp	r2, #0
 800419a:	d100      	bne.n	800419e <_printf_i+0x2a>
 800419c:	e099      	b.n	80042d2 <_printf_i+0x15e>
 800419e:	2a58      	cmp	r2, #88	; 0x58
 80041a0:	d054      	beq.n	800424c <_printf_i+0xd8>
 80041a2:	0026      	movs	r6, r4
 80041a4:	3642      	adds	r6, #66	; 0x42
 80041a6:	7032      	strb	r2, [r6, #0]
 80041a8:	e029      	b.n	80041fe <_printf_i+0x8a>
 80041aa:	2a64      	cmp	r2, #100	; 0x64
 80041ac:	d001      	beq.n	80041b2 <_printf_i+0x3e>
 80041ae:	2a69      	cmp	r2, #105	; 0x69
 80041b0:	d1f7      	bne.n	80041a2 <_printf_i+0x2e>
 80041b2:	6821      	ldr	r1, [r4, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	0608      	lsls	r0, r1, #24
 80041b8:	d523      	bpl.n	8004202 <_printf_i+0x8e>
 80041ba:	1d11      	adds	r1, r2, #4
 80041bc:	6019      	str	r1, [r3, #0]
 80041be:	6815      	ldr	r5, [r2, #0]
 80041c0:	e025      	b.n	800420e <_printf_i+0x9a>
 80041c2:	2a73      	cmp	r2, #115	; 0x73
 80041c4:	d100      	bne.n	80041c8 <_printf_i+0x54>
 80041c6:	e088      	b.n	80042da <_printf_i+0x166>
 80041c8:	d808      	bhi.n	80041dc <_printf_i+0x68>
 80041ca:	2a6f      	cmp	r2, #111	; 0x6f
 80041cc:	d029      	beq.n	8004222 <_printf_i+0xae>
 80041ce:	2a70      	cmp	r2, #112	; 0x70
 80041d0:	d1e7      	bne.n	80041a2 <_printf_i+0x2e>
 80041d2:	2220      	movs	r2, #32
 80041d4:	6809      	ldr	r1, [r1, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	6022      	str	r2, [r4, #0]
 80041da:	e003      	b.n	80041e4 <_printf_i+0x70>
 80041dc:	2a75      	cmp	r2, #117	; 0x75
 80041de:	d020      	beq.n	8004222 <_printf_i+0xae>
 80041e0:	2a78      	cmp	r2, #120	; 0x78
 80041e2:	d1de      	bne.n	80041a2 <_printf_i+0x2e>
 80041e4:	0022      	movs	r2, r4
 80041e6:	2178      	movs	r1, #120	; 0x78
 80041e8:	3245      	adds	r2, #69	; 0x45
 80041ea:	7011      	strb	r1, [r2, #0]
 80041ec:	4a6c      	ldr	r2, [pc, #432]	; (80043a0 <_printf_i+0x22c>)
 80041ee:	e030      	b.n	8004252 <_printf_i+0xde>
 80041f0:	000e      	movs	r6, r1
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	3642      	adds	r6, #66	; 0x42
 80041f6:	1d11      	adds	r1, r2, #4
 80041f8:	6019      	str	r1, [r3, #0]
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	7033      	strb	r3, [r6, #0]
 80041fe:	2301      	movs	r3, #1
 8004200:	e079      	b.n	80042f6 <_printf_i+0x182>
 8004202:	0649      	lsls	r1, r1, #25
 8004204:	d5d9      	bpl.n	80041ba <_printf_i+0x46>
 8004206:	1d11      	adds	r1, r2, #4
 8004208:	6019      	str	r1, [r3, #0]
 800420a:	2300      	movs	r3, #0
 800420c:	5ed5      	ldrsh	r5, [r2, r3]
 800420e:	2d00      	cmp	r5, #0
 8004210:	da03      	bge.n	800421a <_printf_i+0xa6>
 8004212:	232d      	movs	r3, #45	; 0x2d
 8004214:	9a04      	ldr	r2, [sp, #16]
 8004216:	426d      	negs	r5, r5
 8004218:	7013      	strb	r3, [r2, #0]
 800421a:	4b62      	ldr	r3, [pc, #392]	; (80043a4 <_printf_i+0x230>)
 800421c:	270a      	movs	r7, #10
 800421e:	9303      	str	r3, [sp, #12]
 8004220:	e02f      	b.n	8004282 <_printf_i+0x10e>
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	6819      	ldr	r1, [r3, #0]
 8004226:	0605      	lsls	r5, r0, #24
 8004228:	d503      	bpl.n	8004232 <_printf_i+0xbe>
 800422a:	1d08      	adds	r0, r1, #4
 800422c:	6018      	str	r0, [r3, #0]
 800422e:	680d      	ldr	r5, [r1, #0]
 8004230:	e005      	b.n	800423e <_printf_i+0xca>
 8004232:	0640      	lsls	r0, r0, #25
 8004234:	d5f9      	bpl.n	800422a <_printf_i+0xb6>
 8004236:	680d      	ldr	r5, [r1, #0]
 8004238:	1d08      	adds	r0, r1, #4
 800423a:	6018      	str	r0, [r3, #0]
 800423c:	b2ad      	uxth	r5, r5
 800423e:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <_printf_i+0x230>)
 8004240:	2708      	movs	r7, #8
 8004242:	9303      	str	r3, [sp, #12]
 8004244:	2a6f      	cmp	r2, #111	; 0x6f
 8004246:	d018      	beq.n	800427a <_printf_i+0x106>
 8004248:	270a      	movs	r7, #10
 800424a:	e016      	b.n	800427a <_printf_i+0x106>
 800424c:	3145      	adds	r1, #69	; 0x45
 800424e:	700a      	strb	r2, [r1, #0]
 8004250:	4a54      	ldr	r2, [pc, #336]	; (80043a4 <_printf_i+0x230>)
 8004252:	9203      	str	r2, [sp, #12]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	6821      	ldr	r1, [r4, #0]
 8004258:	1d10      	adds	r0, r2, #4
 800425a:	6018      	str	r0, [r3, #0]
 800425c:	6815      	ldr	r5, [r2, #0]
 800425e:	0608      	lsls	r0, r1, #24
 8004260:	d522      	bpl.n	80042a8 <_printf_i+0x134>
 8004262:	07cb      	lsls	r3, r1, #31
 8004264:	d502      	bpl.n	800426c <_printf_i+0xf8>
 8004266:	2320      	movs	r3, #32
 8004268:	4319      	orrs	r1, r3
 800426a:	6021      	str	r1, [r4, #0]
 800426c:	2710      	movs	r7, #16
 800426e:	2d00      	cmp	r5, #0
 8004270:	d103      	bne.n	800427a <_printf_i+0x106>
 8004272:	2320      	movs	r3, #32
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	439a      	bics	r2, r3
 8004278:	6022      	str	r2, [r4, #0]
 800427a:	0023      	movs	r3, r4
 800427c:	2200      	movs	r2, #0
 800427e:	3343      	adds	r3, #67	; 0x43
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	6863      	ldr	r3, [r4, #4]
 8004284:	60a3      	str	r3, [r4, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db5c      	blt.n	8004344 <_printf_i+0x1d0>
 800428a:	2204      	movs	r2, #4
 800428c:	6821      	ldr	r1, [r4, #0]
 800428e:	4391      	bics	r1, r2
 8004290:	6021      	str	r1, [r4, #0]
 8004292:	2d00      	cmp	r5, #0
 8004294:	d158      	bne.n	8004348 <_printf_i+0x1d4>
 8004296:	9e04      	ldr	r6, [sp, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d064      	beq.n	8004366 <_printf_i+0x1f2>
 800429c:	0026      	movs	r6, r4
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	3642      	adds	r6, #66	; 0x42
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	7033      	strb	r3, [r6, #0]
 80042a6:	e05e      	b.n	8004366 <_printf_i+0x1f2>
 80042a8:	0648      	lsls	r0, r1, #25
 80042aa:	d5da      	bpl.n	8004262 <_printf_i+0xee>
 80042ac:	b2ad      	uxth	r5, r5
 80042ae:	e7d8      	b.n	8004262 <_printf_i+0xee>
 80042b0:	6809      	ldr	r1, [r1, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	0608      	lsls	r0, r1, #24
 80042b6:	d505      	bpl.n	80042c4 <_printf_i+0x150>
 80042b8:	1d11      	adds	r1, r2, #4
 80042ba:	6019      	str	r1, [r3, #0]
 80042bc:	6813      	ldr	r3, [r2, #0]
 80042be:	6962      	ldr	r2, [r4, #20]
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e006      	b.n	80042d2 <_printf_i+0x15e>
 80042c4:	0649      	lsls	r1, r1, #25
 80042c6:	d5f7      	bpl.n	80042b8 <_printf_i+0x144>
 80042c8:	1d11      	adds	r1, r2, #4
 80042ca:	6019      	str	r1, [r3, #0]
 80042cc:	6813      	ldr	r3, [r2, #0]
 80042ce:	8aa2      	ldrh	r2, [r4, #20]
 80042d0:	801a      	strh	r2, [r3, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	9e04      	ldr	r6, [sp, #16]
 80042d6:	6123      	str	r3, [r4, #16]
 80042d8:	e054      	b.n	8004384 <_printf_i+0x210>
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	1d11      	adds	r1, r2, #4
 80042de:	6019      	str	r1, [r3, #0]
 80042e0:	6816      	ldr	r6, [r2, #0]
 80042e2:	2100      	movs	r1, #0
 80042e4:	6862      	ldr	r2, [r4, #4]
 80042e6:	0030      	movs	r0, r6
 80042e8:	f000 f86a 	bl	80043c0 <memchr>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d001      	beq.n	80042f4 <_printf_i+0x180>
 80042f0:	1b80      	subs	r0, r0, r6
 80042f2:	6060      	str	r0, [r4, #4]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	2300      	movs	r3, #0
 80042fa:	9a04      	ldr	r2, [sp, #16]
 80042fc:	7013      	strb	r3, [r2, #0]
 80042fe:	e041      	b.n	8004384 <_printf_i+0x210>
 8004300:	6923      	ldr	r3, [r4, #16]
 8004302:	0032      	movs	r2, r6
 8004304:	9906      	ldr	r1, [sp, #24]
 8004306:	9805      	ldr	r0, [sp, #20]
 8004308:	9d07      	ldr	r5, [sp, #28]
 800430a:	47a8      	blx	r5
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d043      	beq.n	8004398 <_printf_i+0x224>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	2500      	movs	r5, #0
 8004314:	079b      	lsls	r3, r3, #30
 8004316:	d40f      	bmi.n	8004338 <_printf_i+0x1c4>
 8004318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800431a:	68e0      	ldr	r0, [r4, #12]
 800431c:	4298      	cmp	r0, r3
 800431e:	da3d      	bge.n	800439c <_printf_i+0x228>
 8004320:	0018      	movs	r0, r3
 8004322:	e03b      	b.n	800439c <_printf_i+0x228>
 8004324:	0022      	movs	r2, r4
 8004326:	2301      	movs	r3, #1
 8004328:	3219      	adds	r2, #25
 800432a:	9906      	ldr	r1, [sp, #24]
 800432c:	9805      	ldr	r0, [sp, #20]
 800432e:	9e07      	ldr	r6, [sp, #28]
 8004330:	47b0      	blx	r6
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	d030      	beq.n	8004398 <_printf_i+0x224>
 8004336:	3501      	adds	r5, #1
 8004338:	68e3      	ldr	r3, [r4, #12]
 800433a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	429d      	cmp	r5, r3
 8004340:	dbf0      	blt.n	8004324 <_printf_i+0x1b0>
 8004342:	e7e9      	b.n	8004318 <_printf_i+0x1a4>
 8004344:	2d00      	cmp	r5, #0
 8004346:	d0a9      	beq.n	800429c <_printf_i+0x128>
 8004348:	9e04      	ldr	r6, [sp, #16]
 800434a:	0028      	movs	r0, r5
 800434c:	0039      	movs	r1, r7
 800434e:	f7fb ff69 	bl	8000224 <__aeabi_uidivmod>
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	3e01      	subs	r6, #1
 8004356:	5c5b      	ldrb	r3, [r3, r1]
 8004358:	0028      	movs	r0, r5
 800435a:	7033      	strb	r3, [r6, #0]
 800435c:	0039      	movs	r1, r7
 800435e:	f7fb fedb 	bl	8000118 <__udivsi3>
 8004362:	1e05      	subs	r5, r0, #0
 8004364:	d1f1      	bne.n	800434a <_printf_i+0x1d6>
 8004366:	2f08      	cmp	r7, #8
 8004368:	d109      	bne.n	800437e <_printf_i+0x20a>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	07db      	lsls	r3, r3, #31
 800436e:	d506      	bpl.n	800437e <_printf_i+0x20a>
 8004370:	6863      	ldr	r3, [r4, #4]
 8004372:	6922      	ldr	r2, [r4, #16]
 8004374:	4293      	cmp	r3, r2
 8004376:	dc02      	bgt.n	800437e <_printf_i+0x20a>
 8004378:	2330      	movs	r3, #48	; 0x30
 800437a:	3e01      	subs	r6, #1
 800437c:	7033      	strb	r3, [r6, #0]
 800437e:	9b04      	ldr	r3, [sp, #16]
 8004380:	1b9b      	subs	r3, r3, r6
 8004382:	6123      	str	r3, [r4, #16]
 8004384:	9b07      	ldr	r3, [sp, #28]
 8004386:	aa09      	add	r2, sp, #36	; 0x24
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	0021      	movs	r1, r4
 800438c:	9b06      	ldr	r3, [sp, #24]
 800438e:	9805      	ldr	r0, [sp, #20]
 8004390:	f7ff fe82 	bl	8004098 <_printf_common>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d1b3      	bne.n	8004300 <_printf_i+0x18c>
 8004398:	2001      	movs	r0, #1
 800439a:	4240      	negs	r0, r0
 800439c:	b00b      	add	sp, #44	; 0x2c
 800439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a0:	080045f8 	.word	0x080045f8
 80043a4:	080045e7 	.word	0x080045e7

080043a8 <__ascii_wctomb>:
 80043a8:	1e0b      	subs	r3, r1, #0
 80043aa:	d004      	beq.n	80043b6 <__ascii_wctomb+0xe>
 80043ac:	2aff      	cmp	r2, #255	; 0xff
 80043ae:	d904      	bls.n	80043ba <__ascii_wctomb+0x12>
 80043b0:	238a      	movs	r3, #138	; 0x8a
 80043b2:	6003      	str	r3, [r0, #0]
 80043b4:	3b8b      	subs	r3, #139	; 0x8b
 80043b6:	0018      	movs	r0, r3
 80043b8:	4770      	bx	lr
 80043ba:	700a      	strb	r2, [r1, #0]
 80043bc:	2301      	movs	r3, #1
 80043be:	e7fa      	b.n	80043b6 <__ascii_wctomb+0xe>

080043c0 <memchr>:
 80043c0:	b2c9      	uxtb	r1, r1
 80043c2:	1882      	adds	r2, r0, r2
 80043c4:	4290      	cmp	r0, r2
 80043c6:	d101      	bne.n	80043cc <memchr+0xc>
 80043c8:	2000      	movs	r0, #0
 80043ca:	4770      	bx	lr
 80043cc:	7803      	ldrb	r3, [r0, #0]
 80043ce:	428b      	cmp	r3, r1
 80043d0:	d0fb      	beq.n	80043ca <memchr+0xa>
 80043d2:	3001      	adds	r0, #1
 80043d4:	e7f6      	b.n	80043c4 <memchr+0x4>

080043d6 <memmove>:
 80043d6:	b510      	push	{r4, lr}
 80043d8:	4288      	cmp	r0, r1
 80043da:	d902      	bls.n	80043e2 <memmove+0xc>
 80043dc:	188b      	adds	r3, r1, r2
 80043de:	4298      	cmp	r0, r3
 80043e0:	d308      	bcc.n	80043f4 <memmove+0x1e>
 80043e2:	2300      	movs	r3, #0
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d007      	beq.n	80043f8 <memmove+0x22>
 80043e8:	5ccc      	ldrb	r4, [r1, r3]
 80043ea:	54c4      	strb	r4, [r0, r3]
 80043ec:	3301      	adds	r3, #1
 80043ee:	e7f9      	b.n	80043e4 <memmove+0xe>
 80043f0:	5c8b      	ldrb	r3, [r1, r2]
 80043f2:	5483      	strb	r3, [r0, r2]
 80043f4:	3a01      	subs	r2, #1
 80043f6:	d2fb      	bcs.n	80043f0 <memmove+0x1a>
 80043f8:	bd10      	pop	{r4, pc}

080043fa <_realloc_r>:
 80043fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fc:	0007      	movs	r7, r0
 80043fe:	000d      	movs	r5, r1
 8004400:	0016      	movs	r6, r2
 8004402:	2900      	cmp	r1, #0
 8004404:	d105      	bne.n	8004412 <_realloc_r+0x18>
 8004406:	0011      	movs	r1, r2
 8004408:	f7ff fb46 	bl	8003a98 <_malloc_r>
 800440c:	0004      	movs	r4, r0
 800440e:	0020      	movs	r0, r4
 8004410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004412:	2a00      	cmp	r2, #0
 8004414:	d103      	bne.n	800441e <_realloc_r+0x24>
 8004416:	f7ff faf5 	bl	8003a04 <_free_r>
 800441a:	0034      	movs	r4, r6
 800441c:	e7f7      	b.n	800440e <_realloc_r+0x14>
 800441e:	f000 f812 	bl	8004446 <_malloc_usable_size_r>
 8004422:	002c      	movs	r4, r5
 8004424:	4286      	cmp	r6, r0
 8004426:	d9f2      	bls.n	800440e <_realloc_r+0x14>
 8004428:	0031      	movs	r1, r6
 800442a:	0038      	movs	r0, r7
 800442c:	f7ff fb34 	bl	8003a98 <_malloc_r>
 8004430:	1e04      	subs	r4, r0, #0
 8004432:	d0ec      	beq.n	800440e <_realloc_r+0x14>
 8004434:	0029      	movs	r1, r5
 8004436:	0032      	movs	r2, r6
 8004438:	f7ff fac4 	bl	80039c4 <memcpy>
 800443c:	0029      	movs	r1, r5
 800443e:	0038      	movs	r0, r7
 8004440:	f7ff fae0 	bl	8003a04 <_free_r>
 8004444:	e7e3      	b.n	800440e <_realloc_r+0x14>

08004446 <_malloc_usable_size_r>:
 8004446:	1f0b      	subs	r3, r1, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	1f18      	subs	r0, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	da01      	bge.n	8004454 <_malloc_usable_size_r+0xe>
 8004450:	580b      	ldr	r3, [r1, r0]
 8004452:	18c0      	adds	r0, r0, r3
 8004454:	4770      	bx	lr
	...

08004458 <_sbrk>:
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <_sbrk+0x18>)
 800445a:	0002      	movs	r2, r0
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	2900      	cmp	r1, #0
 8004460:	d101      	bne.n	8004466 <_sbrk+0xe>
 8004462:	4904      	ldr	r1, [pc, #16]	; (8004474 <_sbrk+0x1c>)
 8004464:	6019      	str	r1, [r3, #0]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	1882      	adds	r2, r0, r2
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	20000284 	.word	0x20000284
 8004474:	20000454 	.word	0x20000454

08004478 <_init>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr

08004484 <_fini>:
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448a:	bc08      	pop	{r3}
 800448c:	469e      	mov	lr, r3
 800448e:	4770      	bx	lr
